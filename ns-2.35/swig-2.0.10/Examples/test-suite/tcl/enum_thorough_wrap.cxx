/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGTCL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
  Tcl_HashTable       hashtable;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, TCL_GLOBAL_ONLY);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    Tcl_HashEntry* hashentry;
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    hashentry = Tcl_FindHashEntry(&(cls->hashtable), method);
    if (hashentry) {
        ClientData cd = Tcl_GetHashValue(hashentry);
        swig_wrapper method_wrapper = (swig_wrapper)cd;
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (method_wrapper)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if (thisvalue && (type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AlsoEmpty swig_types[0]
#define SWIGTYPE_p_AnonSpace__AnonStruct swig_types[1]
#define SWIGTYPE_p_AnonSpace__namedanonspace swig_types[2]
#define SWIGTYPE_p_IgnoreTest swig_types[3]
#define SWIGTYPE_p_Instances swig_types[4]
#define SWIGTYPE_p_Name__TClassT_int_t swig_types[5]
#define SWIGTYPE_p_Obscure swig_types[6]
#define SWIGTYPE_p_OldNameStruct swig_types[7]
#define SWIGTYPE_p_RepeatSpace__repeat swig_types[8]
#define SWIGTYPE_p_SpeedClass swig_types[9]
#define SWIGTYPE_p_TemplateClassT_int_t swig_types[10]
#define SWIGTYPE_p_TreesClass swig_types[11]
#define SWIGTYPE_p_TreesClass__trees swig_types[12]
#define SWIGTYPE_p_TwoNamesStruct swig_types[13]
#define SWIGTYPE_p_char swig_types[14]
#define SWIGTYPE_p_curly__greasy__FirStruct swig_types[15]
#define SWIGTYPE_p_curly__greasy__HairStruct swig_types[16]
#define SWIGTYPE_p_doublename swig_types[17]
#define SWIGTYPE_p_hairtd1 swig_types[18]
#define SWIGTYPE_p_hairtd2 swig_types[19]
#define SWIGTYPE_p_hairtd3 swig_types[20]
#define SWIGTYPE_p_hairtd4 swig_types[21]
#define SWIGTYPE_p_hairtd5 swig_types[22]
#define SWIGTYPE_p_hairtd6 swig_types[23]
#define SWIGTYPE_p_hairtd7 swig_types[24]
#define SWIGTYPE_p_hairtd8 swig_types[25]
#define SWIGTYPE_p_hairtd9 swig_types[26]
#define SWIGTYPE_p_hairtdA swig_types[27]
#define SWIGTYPE_p_namedanon swig_types[28]
#define SWIGTYPE_p_old_name swig_types[29]
#define SWIGTYPE_p_scientiststd1 swig_types[30]
#define SWIGTYPE_p_scientiststd2 swig_types[31]
#define SWIGTYPE_p_scientiststd3 swig_types[32]
#define SWIGTYPE_p_singlename swig_types[33]
#define SWIGTYPE_p_speedtd1 swig_types[34]
#define SWIGTYPE_p_treestd1 swig_types[35]
#define SWIGTYPE_p_treestd2 swig_types[36]
#define SWIGTYPE_p_treestd3 swig_types[37]
#define SWIGTYPE_p_treestd4 swig_types[38]
#define SWIGTYPE_p_treestd5 swig_types[39]
#define SWIGTYPE_p_twonamestag swig_types[40]
static swig_type_info *swig_types[42];
static swig_module_info swig_module = {swig_types, 41, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Enum_thorough_Init
#define SWIG_name    "enum_thorough"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x020010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif

/* Compatibility version for TCL stubs */
#ifndef SWIG_TCL_STUBS_VERSION
#define SWIG_TCL_STUBS_VERSION "8.1"
#endif




enum { AnonEnum1, AnonEnum2 = 100 };
enum { ReallyAnInteger = 200 };
//enum { AnonEnum3, AnonEnum4 } instance;
namespace AnonSpace {
  enum { AnonSpaceEnum1, AnonSpaceEnum2 = 300 };
  struct AnonStruct {
    enum { AnonStructEnum1, AnonStructEnum2 = 400 };
  };
}


enum colour { red=-1, blue, green = 10 };
colour colourTest1(colour e) { return e; }
enum colour colourTest2(enum colour e) { return e; }
const colour colourTest3(const colour e) { return e; }
const enum colour colourTest4(const enum colour e) { return e; }

colour myColour;

struct SpeedClass {
  enum speed { slow=10, medium=20, fast=30, lightning };
  typedef enum speed speedtd1;

  int                           speedTest0(int s) { return s; }
  speed                         speedTest1(speed s) { return s; }
  enum speed                    speedTest2(enum speed s) { return s; }
  const speed                   speedTest3(const speed s) { return s; }
  const enum speed              speedTest4(const enum speed s) { return s; }
  speedtd1                      speedTest5(speedtd1 s) { return s; }
  const speedtd1                speedTest6(const speedtd1 s) { return s; }
  const speed &                 speedTest7(const speed &s) { return s; }
  const enum speed &            speedTest8(const enum speed &s) { return s; }

  const colour myColour2;
  speedtd1 mySpeedtd1;
  SpeedClass() : myColour2(red), mySpeedtd1(slow) { }
private:
  SpeedClass& operator=(const SpeedClass&);
};

int                            speedTest0(int s) { return s; }
SpeedClass::speed              speedTest1(SpeedClass::speed s) { return s; }
enum SpeedClass::speed         speedTest2(enum SpeedClass::speed s) { return s; }
const SpeedClass::speed        speedTest3(const SpeedClass::speed s) { return s; }
const enum SpeedClass::speed   speedTest4(const enum SpeedClass::speed s) { return s; }
const SpeedClass::speed &      speedTest5(const SpeedClass::speed &s) { return s; }


typedef enum { NamedAnon1, NamedAnon2 } namedanon;

namedanon                       namedanonTest1(namedanon e) { return e; } 

typedef enum twonamestag { TwoNames1, TwoNames2, TwoNames3 = 33 } twonames;

twonames                        twonamesTest1(twonames e) { return e; } 
twonamestag                     twonamesTest2(twonamestag e) { return e; } 
enum twonamestag                twonamesTest3(enum twonamestag e) { return e; } 

struct TwoNamesStruct {
  typedef enum twonamestag { TwoNamesStruct1, TwoNamesStruct2 } twonames;
  twonames                      twonamesTest1(twonames e) { return e; } 
  twonamestag                   twonamesTest2(twonamestag e) { return e; } 
  enum twonamestag              twonamesTest3(enum twonamestag e) { return e; } 
};

namespace AnonSpace{
  typedef enum { NamedAnonSpace1, NamedAnonSpace2 } namedanonspace;
  namedanonspace                namedanonspaceTest1(namedanonspace e) { return e; } 
  AnonSpace::namedanonspace     namedanonspaceTest2(AnonSpace::namedanonspace e) { return e; } 
}
AnonSpace::namedanonspace       namedanonspaceTest3(AnonSpace::namedanonspace e) { return e; } 
using namespace AnonSpace;
namedanonspace                  namedanonspaceTest4(namedanonspace e) { return e; } 


template<typename T> struct TemplateClass {
  enum scientists { einstein, galileo = 10 }; 
  typedef enum scientists scientiststd1;
  typedef scientists scientiststd2;
  typedef scientiststd1 scientiststd3;
  scientists                                scientistsTest1(scientists e) { return e; }
  enum scientists                           scientistsTest2(enum scientists e) { return e; }
  const scientists                          scientistsTest3(const scientists e) { return e; }
  const enum scientists                     scientistsTest4(const enum scientists e) { return e; }
  typename TemplateClass<T>::scientists     scientistsTest5(typename TemplateClass<T>::scientists e) { return e; }
  const typename TemplateClass<T>::scientists        scientistsTest6(const typename TemplateClass<T>::scientists e) { return e; }
  enum TemplateClass<T>::scientists         scientistsTest7(enum TemplateClass<T>::scientists e) { return e; }
  const enum TemplateClass<T>::scientists   scientistsTest8(const enum TemplateClass<T>::scientists e) { return e; }
  typename TemplateClass::scientists        scientistsTest9(typename TemplateClass::scientists e) { return e; }
//  enum TemplateClass::scientists            scientistsTestA(enum TemplateClass::scientists e) { return e; }
  const typename TemplateClass::scientists  scientistsTestB(const typename TemplateClass::scientists e) { return e; }
//  const enum TemplateClass::scientists      scientistsTestC(const enum TemplateClass::scientists e) { return e; }
  scientiststd1                             scientistsTestD(scientiststd1 e) { return e; }
  scientiststd2                             scientistsTestE(scientiststd2 e) { return e; }
  scientiststd3                             scientistsTestF(scientiststd3 e) { return e; }
  typename TemplateClass<T>::scientiststd1  scientistsTestG(typename TemplateClass<T>::scientiststd1 e) { return e; }
  typename TemplateClass<T>::scientiststd2  scientistsTestH(typename TemplateClass<T>::scientiststd2 e) { return e; }
  typename TemplateClass<T>::scientiststd3  scientistsTestI(typename TemplateClass<T>::scientiststd3 e) { return e; }
  const scientists &                        scientistsTestJ(const scientists &e) { return e; }
};

TemplateClass<int>::scientists              scientistsTest1(TemplateClass<int>::scientists e) { return e; }
const TemplateClass<int>::scientists        scientistsTest2(const TemplateClass<int>::scientists e) { return e; }
enum TemplateClass<int>::scientists         scientistsTest3(enum TemplateClass<int>::scientists e) { return e; }
const enum TemplateClass<int>::scientists   scientistsTest4(const enum TemplateClass<int>::scientists e) { return e; }
TemplateClass<int>::scientiststd1           scientistsTest5(TemplateClass<int>::scientiststd1 e) { return e; }
TemplateClass<int>::scientiststd2           scientistsTest6(TemplateClass<int>::scientiststd2 e) { return e; }
TemplateClass<int>::scientiststd3           scientistsTest7(TemplateClass<int>::scientiststd3 e) { return e; }
const TemplateClass<int>::scientiststd3 &   scientistsTest8(const TemplateClass<int>::scientiststd3 &e) { return e; }


namespace Name {
template<typename T> struct TClass {
  enum scientists { faraday, bell = 20 }; 
  typedef enum scientists scientiststd1;
  typedef scientists scientiststd2;
  typedef scientiststd1 scientiststd3;
  scientists                                scientistsNameTest1(scientists e) { return e; }
  enum scientists                           scientistsNameTest2(enum scientists e) { return e; }
  const scientists                          scientistsNameTest3(const scientists e) { return e; }
  const enum scientists                     scientistsNameTest4(const enum scientists e) { return e; }
  typename TClass<T>::scientists            scientistsNameTest5(typename TClass<T>::scientists e) { return e; }
  const typename TClass<T>::scientists      scientistsNameTest6(const typename TClass<T>::scientists e) { return e; }
  enum TClass<T>::scientists                scientistsNameTest7(enum TClass<T>::scientists e) { return e; }
  const enum TClass<T>::scientists          scientistsNameTest8(const enum TClass<T>::scientists e) { return e; }
  typename TClass::scientists               scientistsNameTest9(typename TClass::scientists e) { return e; }
//  enum TClass::scientists                   scientistsNameTestA(enum TClass::scientists e) { return e; }
  const typename TClass::scientists         scientistsNameTestB(const typename TClass::scientists e) { return e; }
//  const enum TClass::scientists             scientistsNameTestC(const enum TClass::scientists e) { return e; }
  scientiststd1                             scientistsNameTestD(scientiststd1 e) { return e; }
  scientiststd2                             scientistsNameTestE(scientiststd2 e) { return e; }
  scientiststd3                             scientistsNameTestF(scientiststd3 e) { return e; }
  typename TClass<T>::scientiststd1         scientistsNameTestG(typename TClass<T>::scientiststd1 e) { return e; }
  typename TClass<T>::scientiststd2         scientistsNameTestH(typename TClass<T>::scientiststd2 e) { return e; }
  typename TClass<T>::scientiststd3         scientistsNameTestI(typename TClass<T>::scientiststd3 e) { return e; }

  typename Name::TClass<T>::scientists      scientistsNameSpaceTest1(typename Name::TClass<T>::scientists e) { return e; }
  const typename Name::TClass<T>::scientists         scientistsNameSpaceTest2(const typename Name::TClass<T>::scientists e) { return e; }
  enum Name::TClass<T>::scientists          scientistsNameSpaceTest3(enum Name::TClass<T>::scientists e) { return e; }
  const enum Name::TClass<T>::scientists    scientistsNameSpaceTest4(const enum Name::TClass<T>::scientists e) { return e; }
  typename Name::TClass<T>::scientiststd1   scientistsNameSpaceTest5(typename Name::TClass<T>::scientiststd1 e) { return e; }
  typename Name::TClass<T>::scientiststd2   scientistsNameSpaceTest6(typename Name::TClass<T>::scientiststd2 e) { return e; }
  typename Name::TClass<T>::scientiststd3   scientistsNameSpaceTest7(typename Name::TClass<T>::scientiststd3 e) { return e; }

  // Test TemplateClass::scientists rather then TClass::scientists
  ::TemplateClass<int>::scientists              scientistsOtherTest1(::TemplateClass<int>::scientists e) { return e; }
  const ::TemplateClass<int>::scientists        scientistsOtherTest2(const ::TemplateClass<int>::scientists e) { return e; }
  enum ::TemplateClass<int>::scientists         scientistsOtherTest3(enum ::TemplateClass<int>::scientists e) { return e; }
  const enum ::TemplateClass<int>::scientists   scientistsOtherTest4(const enum ::TemplateClass<int>::scientists e) { return e; }
  ::TemplateClass<int>::scientiststd1           scientistsOtherTest5(::TemplateClass<int>::scientiststd1 e) { return e; }
  ::TemplateClass<int>::scientiststd2           scientistsOtherTest6(::TemplateClass<int>::scientiststd2 e) { return e; }
  ::TemplateClass<int>::scientiststd3           scientistsOtherTest7(::TemplateClass<int>::scientiststd3 e) { return e; }
};

TClass<int>::scientists                     scientistsNameTest1(TClass<int>::scientists e) { return e; }
const TClass<int>::scientists               scientistsNameTest2(const TClass<int>::scientists e) { return e; }
enum TClass<int>::scientists                scientistsNameTest3(enum TClass<int>::scientists e) { return e; }
const enum TClass<int>::scientists          scientistsNameTest4(const enum TClass<int>::scientists e) { return e; }
TClass<int>::scientiststd1                  scientistsNameTest5(TClass<int>::scientiststd1 e) { return e; }
TClass<int>::scientiststd2                  scientistsNameTest6(TClass<int>::scientiststd2 e) { return e; }
TClass<int>::scientiststd3                  scientistsNameTest7(TClass<int>::scientiststd3 e) { return e; }

Name::TClass<int>::scientists               scientistsNameSpaceTest1(Name::TClass<int>::scientists e) { return e; }
const Name::TClass<int>::scientists         scientistsNameSpaceTest2(const Name::TClass<int>::scientists e) { return e; }
enum Name::TClass<int>::scientists          scientistsNameSpaceTest3(enum Name::TClass<int>::scientists e) { return e; }
const enum Name::TClass<int>::scientists    scientistsNameSpaceTest4(const enum Name::TClass<int>::scientists e) { return e; }
Name::TClass<int>::scientiststd1            scientistsNameSpaceTest5(Name::TClass<int>::scientiststd1 e) { return e; }
Name::TClass<int>::scientiststd2            scientistsNameSpaceTest6(Name::TClass<int>::scientiststd2 e) { return e; }
Name::TClass<int>::scientiststd3            scientistsNameSpaceTest7(Name::TClass<int>::scientiststd3 e) { return e; }
}

Name::TClass<int>::scientists               scientistsNameSpaceTest8(Name::TClass<int>::scientists e) { return e; }
const Name::TClass<int>::scientists         scientistsNameSpaceTest9(const Name::TClass<int>::scientists e) { return e; }
enum Name::TClass<int>::scientists          scientistsNameSpaceTestA(enum Name::TClass<int>::scientists e) { return e; }
const enum Name::TClass<int>::scientists    scientistsNameSpaceTestB(const enum Name::TClass<int>::scientists e) { return e; }
Name::TClass<int>::scientiststd1            scientistsNameSpaceTestC(Name::TClass<int>::scientiststd1 e) { return e; }
Name::TClass<int>::scientiststd2            scientistsNameSpaceTestD(Name::TClass<int>::scientiststd2 e) { return e; }
Name::TClass<int>::scientiststd3            scientistsNameSpaceTestE(Name::TClass<int>::scientiststd3 e) { return e; }

using namespace Name;
TClass<int>::scientists                     scientistsNameSpaceTestF(TClass<int>::scientists e) { return e; }
const TClass<int>::scientists               scientistsNameSpaceTestG(const TClass<int>::scientists e) { return e; }
enum TClass<int>::scientists                scientistsNameSpaceTestH(enum TClass<int>::scientists e) { return e; }
const enum TClass<int>::scientists          scientistsNameSpaceTestI(const enum TClass<int>::scientists e) { return e; }
TClass<int>::scientiststd1                  scientistsNameSpaceTestJ(TClass<int>::scientiststd1 e) { return e; }
TClass<int>::scientiststd2                  scientistsNameSpaceTestK(TClass<int>::scientiststd2 e) { return e; }
TClass<int>::scientiststd3                  scientistsNameSpaceTestL(TClass<int>::scientiststd3 e) { return e; }



#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


enum old_name { argh, eek = -1 };
typedef old_name old_nametd;
old_name                            renameTest1(old_name e) { return e; }
old_nametd                          renameTest2(old_nametd e) { return e; }

struct OldNameStruct {
  enum enumeration {whizz, kerboom, pop};
  enumeration                       renameTest1(enumeration e) { return e; }
  OldNameStruct::enumeration        renameTest2(OldNameStruct::enumeration e) { return e; }

  enum simple {simple1};
  typedef enum doublenametag {doublename1} doublename;
  typedef enum {singlename1} singlename;

  simple                            renameTest3(simple e) { return e; }
  doublename                        renameTest4(doublename e) { return e; }
  doublenametag                     renameTest5(doublenametag e) { return e; }
  singlename                        renameTest6(singlename e) { return e; }
};

OldNameStruct::enumeration          renameTest3(OldNameStruct::enumeration e) { return e; }
OldNameStruct::simple               renameTest4(OldNameStruct::simple e) { return e; }
OldNameStruct::doublename           renameTest5(OldNameStruct::doublename e) { return e; }
OldNameStruct::doublenametag        renameTest6(OldNameStruct::doublenametag e) { return e; }
OldNameStruct::singlename           renameTest7(OldNameStruct::singlename e) { return e; }


struct TreesClass {
  enum trees {oak, fir, pine };
  typedef enum trees treestd1;
  typedef trees treestd2;
  typedef treestd1 treestd3;
  typedef TreesClass::trees treestd4;
  typedef treestd1 treestd5;

  trees                             treesTest1(trees e) { return e; }
  treestd1                          treesTest2(treestd1 e) { return e; }
  treestd2                          treesTest3(treestd2 e) { return e; }
  treestd3                          treesTest4(treestd3 e) { return e; }
  treestd4                          treesTest5(treestd4 e) { return e; }
  treestd5                          treesTest6(treestd5 e) { return e; }
  const trees                       treesTest7(const trees e) { return e; }
  const treestd1                    treesTest8(const treestd1 e) { return e; }
  const treestd2                    treesTest9(const treestd2 e) { return e; }
  const treestd3                    treesTestA(const treestd3 e) { return e; }
  const treestd4                    treesTestB(const treestd4 e) { return e; }
  const treestd5                    treesTestC(const treestd5 e) { return e; }
  TreesClass::trees                 treesTestD(TreesClass::trees e) { return e; }
  TreesClass::treestd1              treesTestE(TreesClass::treestd1 e) { return e; }
  TreesClass::treestd2              treesTestF(TreesClass::treestd2 e) { return e; }
  TreesClass::treestd3              treesTestG(TreesClass::treestd3 e) { return e; }
  TreesClass::treestd4              treesTestH(TreesClass::treestd4 e) { return e; }
  TreesClass::treestd5              treesTestI(TreesClass::treestd5 e) { return e; }
  const TreesClass::trees           treesTestJ(const TreesClass::trees e) { return e; }
  const TreesClass::treestd1        treesTestK(const TreesClass::treestd1 e) { return e; }
  const TreesClass::treestd2        treesTestL(const TreesClass::treestd2 e) { return e; }
  const TreesClass::treestd3        treesTestM(const TreesClass::treestd3 e) { return e; }
  const TreesClass::treestd4        treesTestN(const TreesClass::treestd4 e) { return e; }
  const TreesClass::treestd5        treesTestO(const TreesClass::treestd5 e) { return e; }
};

TreesClass::trees                   treesTest1(TreesClass::trees e) { return e; }
TreesClass::treestd1                treesTest2(TreesClass::treestd1 e) { return e; }
TreesClass::treestd2                treesTest3(TreesClass::treestd2 e) { return e; }
TreesClass::treestd3                treesTest4(TreesClass::treestd3 e) { return e; }
TreesClass::treestd4                treesTest5(TreesClass::treestd4 e) { return e; }
TreesClass::treestd5                treesTest6(TreesClass::treestd5 e) { return e; }
const TreesClass::trees             treesTest7(const TreesClass::trees e) { return e; }
const TreesClass::treestd1          treesTest8(const TreesClass::treestd1 e) { return e; }
const TreesClass::treestd2          treesTest9(const TreesClass::treestd2 e) { return e; }
const TreesClass::treestd3          treesTestA(const TreesClass::treestd3 e) { return e; }
const TreesClass::treestd4          treesTestB(const TreesClass::treestd4 e) { return e; }
const TreesClass::treestd5          treesTestC(const TreesClass::treestd5 e) { return e; }

typedef enum TreesClass::trees treesglobaltd1;
typedef TreesClass::trees treesglobaltd2;
typedef TreesClass::treestd1 treesglobaltd3;
typedef TreesClass::treestd2 treesglobaltd4;
typedef treesglobaltd4 treesglobaltd5;

treesglobaltd1                      treesTestD(treesglobaltd1 e) { return e; }
treesglobaltd2                      treesTestE(treesglobaltd2 e) { return e; }
treesglobaltd3                      treesTestF(treesglobaltd3 e) { return e; }
treesglobaltd4                      treesTestG(treesglobaltd4 e) { return e; }
treesglobaltd5                      treesTestH(treesglobaltd5 e) { return e; }
const treesglobaltd1                treesTestI(const treesglobaltd1 e) { return e; }
const treesglobaltd2                treesTestJ(const treesglobaltd2 e) { return e; }
const treesglobaltd3                treesTestK(const treesglobaltd3 e) { return e; }
const treesglobaltd4                treesTestL(const treesglobaltd4 e) { return e; }
const treesglobaltd5                treesTestM(const treesglobaltd5 e) { return e; }

typedef const enum TreesClass::trees treesglobaltd6;
typedef const TreesClass::trees treesglobaltd7;
typedef const TreesClass::treestd1 treesglobaltd8;
typedef const TreesClass::treestd2 treesglobaltd9;
typedef const treesglobaltd4 treesglobaltdA;

//treesglobaltd6                      treesTestN(treesglobaltd6 e) { return e; } // casting using an int instead of treesglobaltd6
treesglobaltd7                      treesTestO(treesglobaltd7 e) { return e; }
treesglobaltd8                      treesTestP(treesglobaltd8 e) { return e; }
treesglobaltd9                      treesTestQ(treesglobaltd9 e) { return e; }
treesglobaltdA                      treesTestR(treesglobaltdA e) { return e; }

namespace curly {
  namespace greasy {
    struct HairStruct {
      enum hair { blonde=0xFF0, ginger };
      typedef hair hairtd1;
      typedef HairStruct::hair hairtd2;
      typedef greasy::HairStruct::hair hairtd3;
      typedef curly::greasy::HairStruct::hair hairtd4;
      typedef ::curly::greasy::HairStruct::hair hairtd5;
      typedef hairtd1 hairtd6;
      typedef HairStruct::hairtd1 hairtd7;
      typedef greasy::HairStruct::hairtd1 hairtd8;
      typedef curly::greasy::HairStruct::hairtd1 hairtd9;
      typedef ::curly::greasy::HairStruct::hairtd1 hairtdA;
      hair                          hairTest1(hair e) { return e; }
      hairtd1                       hairTest2(hairtd1 e) { return e; }
      hairtd2                       hairTest3(hairtd2 e) { return e; }
      hairtd3                       hairTest4(hairtd3 e) { return e; }
      hairtd4                       hairTest5(hairtd4 e) { return e; }
      hairtd5                       hairTest6(hairtd5 e) { return e; }
      hairtd6                       hairTest7(hairtd6 e) { return e; }
      hairtd7                       hairTest8(hairtd7 e) { return e; }
      hairtd8                       hairTest9(hairtd8 e) { return e; }
      hairtd9                       hairTestA(hairtd9 e) { return e; }
      hairtdA                       hairTestB(hairtdA e) { return e; }

      ::colour                      colourTest1(::colour e) { return e; }
      enum colour                   colourTest2(enum colour e) { return e; }
      namedanon                     namedanonTest1(namedanon e) { return e; }
      AnonSpace::namedanonspace      namedanonspaceTest1(AnonSpace::namedanonspace e) { return e; }

      treesglobaltd1                treesGlobalTest1(treesglobaltd1 e) { return e; }
      treesglobaltd2                treesGlobalTest2(treesglobaltd2 e) { return e; }
      treesglobaltd3                treesGlobalTest3(treesglobaltd3 e) { return e; }
      treesglobaltd4                treesGlobalTest4(treesglobaltd4 e) { return e; }
      treesglobaltd5                treesGlobalTest5(treesglobaltd5 e) { return e; }

    };
    HairStruct::hair                hairTest1(HairStruct::hair e) { return e; }
    HairStruct::hairtd1             hairTest2(HairStruct::hairtd1 e) { return e; }
    HairStruct::hairtd2             hairTest3(HairStruct::hairtd2 e) { return e; }
    HairStruct::hairtd3             hairTest4(HairStruct::hairtd3 e) { return e; }
    HairStruct::hairtd4             hairTest5(HairStruct::hairtd4 e) { return e; }
    HairStruct::hairtd5             hairTest6(HairStruct::hairtd5 e) { return e; }
    HairStruct::hairtd6             hairTest7(HairStruct::hairtd6 e) { return e; }
    HairStruct::hairtd7             hairTest8(HairStruct::hairtd7 e) { return e; }
    HairStruct::hairtd8             hairTest9(HairStruct::hairtd8 e) { return e; }
    HairStruct::hairtd9             hairTestA(HairStruct::hairtd9 e) { return e; }
    HairStruct::hairtdA             hairTestB(HairStruct::hairtdA e) { return e; }
    const HairStruct::hair &        hairTestC(const HairStruct::hair &e) { return e; }
  }
  greasy::HairStruct::hair          hairTestA1(greasy::HairStruct::hair e) { return e; }
  greasy::HairStruct::hairtd1       hairTestA2(greasy::HairStruct::hairtd1 e) { return e; }
  greasy::HairStruct::hairtd2       hairTestA3(greasy::HairStruct::hairtd2 e) { return e; }
  greasy::HairStruct::hairtd3       hairTestA4(greasy::HairStruct::hairtd3 e) { return e; }
  greasy::HairStruct::hairtd4       hairTestA5(greasy::HairStruct::hairtd4 e) { return e; }
  greasy::HairStruct::hairtd5       hairTestA6(greasy::HairStruct::hairtd5 e) { return e; }
  greasy::HairStruct::hairtd6       hairTestA7(greasy::HairStruct::hairtd6 e) { return e; }
  greasy::HairStruct::hairtd7       hairTestA8(greasy::HairStruct::hairtd7 e) { return e; }
  greasy::HairStruct::hairtd8       hairTestA9(greasy::HairStruct::hairtd8 e) { return e; }
  greasy::HairStruct::hairtd9       hairTestAA(greasy::HairStruct::hairtd9 e) { return e; }
  greasy::HairStruct::hairtdA       hairTestAB(greasy::HairStruct::hairtdA e) { return e; }
  const greasy::HairStruct::hairtdA &     hairTestAC(const greasy::HairStruct::hairtdA &e) { return e; }
}
curly::greasy::HairStruct::hair     hairTestB1(curly::greasy::HairStruct::hair e) { return e; }
curly::greasy::HairStruct::hairtd1  hairTestB2(curly::greasy::HairStruct::hairtd1 e) { return e; }
curly::greasy::HairStruct::hairtd2  hairTestB3(curly::greasy::HairStruct::hairtd2 e) { return e; }
curly::greasy::HairStruct::hairtd3  hairTestB4(curly::greasy::HairStruct::hairtd3 e) { return e; }
curly::greasy::HairStruct::hairtd4  hairTestB5(curly::greasy::HairStruct::hairtd4 e) { return e; }
curly::greasy::HairStruct::hairtd5  hairTestB6(curly::greasy::HairStruct::hairtd5 e) { return e; }
curly::greasy::HairStruct::hairtd6  hairTestB7(curly::greasy::HairStruct::hairtd6 e) { return e; }
curly::greasy::HairStruct::hairtd7  hairTestB8(curly::greasy::HairStruct::hairtd7 e) { return e; }
curly::greasy::HairStruct::hairtd8  hairTestB9(curly::greasy::HairStruct::hairtd8 e) { return e; }
curly::greasy::HairStruct::hairtd9  hairTestBA(curly::greasy::HairStruct::hairtd9 e) { return e; }
curly::greasy::HairStruct::hairtdA  hairTestBB(curly::greasy::HairStruct::hairtdA e) { return e; }
const curly::greasy::HairStruct::hairtdA & hairTestBC(const curly::greasy::HairStruct::hairtdA &e) { return e; }

using curly::greasy::HairStruct;
HairStruct::hair                    hairTestC1(HairStruct::hair e) { return e; }
HairStruct::hairtd1                 hairTestC2(HairStruct::hairtd1 e) { return e; }
HairStruct::hairtd2                 hairTestC3(HairStruct::hairtd2 e) { return e; }
HairStruct::hairtd3                 hairTestC4(HairStruct::hairtd3 e) { return e; }
HairStruct::hairtd4                 hairTestC5(HairStruct::hairtd4 e) { return e; }
HairStruct::hairtd5                 hairTestC6(HairStruct::hairtd5 e) { return e; }
HairStruct::hairtd6                 hairTestC7(HairStruct::hairtd6 e) { return e; }
HairStruct::hairtd7                 hairTestC8(HairStruct::hairtd7 e) { return e; }
HairStruct::hairtd8                 hairTestC9(HairStruct::hairtd8 e) { return e; }
HairStruct::hairtd9                 hairTestCA(HairStruct::hairtd9 e) { return e; }
HairStruct::hairtdA                 hairTestCB(HairStruct::hairtdA e) { return e; }
const HairStruct::hairtdA &         hairTestCC(const HairStruct::hairtdA &e) { return e; }

namespace curly {
  namespace greasy {
    struct FirStruct : HairStruct {
      hair                          hairTestFir1(hair e) { return e; }
      hairtd1                       hairTestFir2(hairtd1 e) { return e; }
      hairtd2                       hairTestFir3(hairtd2 e) { return e; }
      hairtd3                       hairTestFir4(hairtd3 e) { return e; }
      hairtd4                       hairTestFir5(hairtd4 e) { return e; }
      hairtd5                       hairTestFir6(hairtd5 e) { return e; }
      hairtd6                       hairTestFir7(hairtd6 e) { return e; }
      hairtd7                       hairTestFir8(hairtd7 e) { return e; }
      hairtd8                       hairTestFir9(hairtd8 e) { return e; }
      hairtd9                       hairTestFirA(hairtd9 e) { return e; }
      hairtdA                       hairTestFirB(hairtdA e) { return e; }
    };
  }
}

struct Obscure {
  enum Zero {};
  enum One {one};
  enum Two {two, twoagain};
#if defined(SWIG)
  // g++-4.3 warns about this
  typedef enum Empty {};
#endif
  typedef enum {} AlsoEmpty;
};

// Unnamed enum instance
extern "C" {
enum { globalinstance1, globalinstance2, globalinstance3 = 30 } GlobalInstance;
}

struct Instances {
  enum { memberinstance1, memberinstance2, memberinstance3 = 300 } MemberInstance;
  Instances() : MemberInstance(memberinstance3) {}
};



struct IgnoreTest {
  enum IgnoreA { ignoreA_zero, ignoreA_one, ignoreA_two, ignoreA_three, ignoreA_ten=10, ignoreA_eleven, ignoreA_twelve, ignoreA_thirteen, ignoreA_fourteen, ignoreA_twenty=20, ignoreA_thirty=30, ignoreA_thirty_one, ignoreA_thirty_two, ignoreA_thirty_three };
  enum IgnoreB { ignoreB_ten=10, ignoreB_eleven, ignoreB_twelve, ignoreB_twenty=20, ignoreB_thirty=30, ignoreB_thirty_one, ignoreB_thirty_two, ignoreB_forty=40, ignoreB_forty_one, ignoreB_forty_two };
  enum IgnoreC { ignoreC_ten=10, ignoreC_eleven, ignoreC_twelve, ignoreC_twenty=20, ignoreC_thirty=30, ignoreC_thirty_one, ignoreC_thirty_two, ignoreC_forty=40, ignoreC_forty_one, ignoreC_forty_two };
  enum IgnoreD { ignoreD_ten=10, ignoreD_twenty=20, ignoreD_twenty_one, ignoreD_twenty_two };
  enum IgnoreE { ignoreE_zero, ignoreE_twenty=20, ignoreE_twenty_one, ignoreE_twenty_two };
};

IgnoreTest::IgnoreA ignoreATest(IgnoreTest::IgnoreA n) { return n; }
IgnoreTest::IgnoreB ignoreBTest(IgnoreTest::IgnoreB n) { return n; }
IgnoreTest::IgnoreC ignoreCTest(IgnoreTest::IgnoreC n) { return n; }
IgnoreTest::IgnoreD ignoreDTest(IgnoreTest::IgnoreD n) { return n; }
IgnoreTest::IgnoreE ignoreETest(IgnoreTest::IgnoreE n) { return n; }


namespace RepeatSpace {
typedef enum
{
   one = 1,
   initial = one,
   two,
   three,
   llast = three,
   end = llast
} repeat;
repeat repeatTest(repeat e) { return e; }
}


namespace DifferentSpace {
enum DifferentTypes {
  typeint = 10,
  typeboolfalse = false,
  typebooltrue = true,
  typebooltwo,
  typechar = 'C',
  typedefaultint
};
DifferentTypes differentTypesTest(DifferentTypes n) { return n; }

enum {
  global_typeint = 10,
  global_typeboolfalse = false,
  global_typebooltrue = true,
  global_typebooltwo,
  global_typechar = 'C',
  global_typedefaultint
};
int globalDifferentTypesTest(int n) { return n; }
}



  #define SWIG_From_bool   Tcl_NewBooleanObj 


SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast< int >(size)) : NULL;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


namespace DifferentSpace {
enum DifferentTypesNoConst {
  typeint_noconst = 10,
  typeboolfalse_noconst = false,
  typebooltrue_noconst = true,
  typebooltwo_noconst,
  typechar_noconst = 'C',
  typedefaultint_noconst
};

enum {
  global_typeint_noconst = 10,
  global_typeboolfalse_noconst = false,
  global_typebooltrue_noconst = true,
  global_typebooltwo_noconst,
  global_typechar_noconst = 'C',
  global_typedefaultint_noconst
};
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int
_wrap_new_AnonStruct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  AnonSpace::AnonStruct *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_AnonStruct ") == TCL_ERROR) SWIG_fail;
  result = (AnonSpace::AnonStruct *)new AnonSpace::AnonStruct();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_AnonSpace__AnonStruct,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_AnonStruct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  AnonSpace::AnonStruct *arg1 = (AnonSpace::AnonStruct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_AnonStruct self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_AnonSpace__AnonStruct, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AnonStruct" "', argument " "1"" of type '" "AnonSpace::AnonStruct *""'"); 
  }
  arg1 = reinterpret_cast< AnonSpace::AnonStruct * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_AnonStruct(void *obj) {
AnonSpace::AnonStruct *arg1 = (AnonSpace::AnonStruct *) obj;
delete arg1;
}
static swig_method swig_AnonSpace_AnonStruct_methods[] = {
    {0,0}
};
static swig_attribute swig_AnonSpace_AnonStruct_attributes[] = {
    {0,0,0}
};
static swig_class *swig_AnonSpace_AnonStruct_bases[] = {0};
static const char * swig_AnonSpace_AnonStruct_base_names[] = {0};
static swig_class _wrap_class_AnonSpace_AnonStruct = { "AnonStruct", &SWIGTYPE_p_AnonSpace__AnonStruct,_wrap_new_AnonStruct, swig_delete_AnonStruct, swig_AnonSpace_AnonStruct_methods, swig_AnonSpace_AnonStruct_attributes, swig_AnonSpace_AnonStruct_bases,swig_AnonSpace_AnonStruct_base_names, &swig_module };
SWIGINTERN int
_wrap_colourTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  colour arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  colour result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:colourTest1 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "colourTest1" "', argument " "1"" of type '" "colour""'");
  } 
  arg1 = static_cast< colour >(val1);
  result = (colour)colourTest1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_colourTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum colour arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum colour result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:colourTest2 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "colourTest2" "', argument " "1"" of type '" "enum colour""'");
  } 
  arg1 = static_cast< enum colour >(val1);
  result = (enum colour)colourTest2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_colourTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  colour arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  colour result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:colourTest3 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "colourTest3" "', argument " "1"" of type '" "colour""'");
  } 
  arg1 = static_cast< colour >(val1);
  result = (colour)colourTest3(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_colourTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum colour arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum colour result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:colourTest4 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "colourTest4" "', argument " "1"" of type '" "enum colour""'");
  } 
  arg1 = static_cast< enum colour >(val1);
  result = (enum colour)colourTest4(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN const char *_wrap_myColour_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(myColour));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_myColour_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  if (sizeof(int) != sizeof(myColour)) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""arch, read-only myColour""' of type '""colour""'");
  }  else {
    int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(value, reinterpret_cast< int* >(&myColour));
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in variable '""myColour""' of type '""colour""'");
    }
  }
  return NULL;
fail:
  return "myColour";
}


SWIGINTERN int
_wrap_SpeedClass_speedTest0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SpeedClass_speedTest0 self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest0" "', argument " "1"" of type '" "SpeedClass *""'"); 
  }
  arg1 = reinterpret_cast< SpeedClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest0" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->speedTest0(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SpeedClass_speedTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speed arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SpeedClass::speed result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SpeedClass_speedTest1 self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest1" "', argument " "1"" of type '" "SpeedClass *""'"); 
  }
  arg1 = reinterpret_cast< SpeedClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest1" "', argument " "2"" of type '" "SpeedClass::speed""'");
  } 
  arg2 = static_cast< SpeedClass::speed >(val2);
  result = (SpeedClass::speed)(arg1)->speedTest1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SpeedClass_speedTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  enum SpeedClass::speed arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum SpeedClass::speed result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SpeedClass_speedTest2 self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest2" "', argument " "1"" of type '" "SpeedClass *""'"); 
  }
  arg1 = reinterpret_cast< SpeedClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest2" "', argument " "2"" of type '" "enum SpeedClass::speed""'");
  } 
  arg2 = static_cast< enum SpeedClass::speed >(val2);
  result = (enum SpeedClass::speed)(arg1)->speedTest2(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SpeedClass_speedTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speed arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SpeedClass::speed result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SpeedClass_speedTest3 self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest3" "', argument " "1"" of type '" "SpeedClass *""'"); 
  }
  arg1 = reinterpret_cast< SpeedClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest3" "', argument " "2"" of type '" "SpeedClass::speed""'");
  } 
  arg2 = static_cast< SpeedClass::speed >(val2);
  result = (SpeedClass::speed)(arg1)->speedTest3(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SpeedClass_speedTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  enum SpeedClass::speed arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum SpeedClass::speed result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SpeedClass_speedTest4 self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest4" "', argument " "1"" of type '" "SpeedClass *""'"); 
  }
  arg1 = reinterpret_cast< SpeedClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest4" "', argument " "2"" of type '" "enum SpeedClass::speed""'");
  } 
  arg2 = static_cast< enum SpeedClass::speed >(val2);
  result = (enum SpeedClass::speed)(arg1)->speedTest4(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SpeedClass_speedTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speedtd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SpeedClass::speedtd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SpeedClass_speedTest5 self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest5" "', argument " "1"" of type '" "SpeedClass *""'"); 
  }
  arg1 = reinterpret_cast< SpeedClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest5" "', argument " "2"" of type '" "SpeedClass::speedtd1""'");
  } 
  arg2 = static_cast< SpeedClass::speedtd1 >(val2);
  result = (SpeedClass::speedtd1)(arg1)->speedTest5(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SpeedClass_speedTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speedtd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  SpeedClass::speedtd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SpeedClass_speedTest6 self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest6" "', argument " "1"" of type '" "SpeedClass *""'"); 
  }
  arg1 = reinterpret_cast< SpeedClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest6" "', argument " "2"" of type '" "SpeedClass::speedtd1""'");
  } 
  arg2 = static_cast< SpeedClass::speedtd1 >(val2);
  result = (SpeedClass::speedtd1)(arg1)->speedTest6(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SpeedClass_speedTest7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speed *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  SpeedClass::speed temp2 ;
  SpeedClass::speed *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SpeedClass_speedTest7 self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest7" "', argument " "1"" of type '" "SpeedClass *""'"); 
  }
  arg1 = reinterpret_cast< SpeedClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest7" "', argument " "2"" of type '" "SpeedClass::speed const &""'");
  } else {
    temp2 = static_cast< SpeedClass::speed >(val2);
    arg2 = &temp2;
  }
  result = (SpeedClass::speed *) &(arg1)->speedTest7((SpeedClass::speed const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SpeedClass_speedTest8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  enum SpeedClass::speed *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  enum SpeedClass::speed temp2 ;
  enum SpeedClass::speed *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SpeedClass_speedTest8 self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest8" "', argument " "1"" of type '" "SpeedClass *""'"); 
  }
  arg1 = reinterpret_cast< SpeedClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest8" "', argument " "2"" of type '" "enum SpeedClass::speed const &""'");
  } else {
    temp2 = static_cast< enum SpeedClass::speed >(val2);
    arg2 = &temp2;
  }
  result = (enum SpeedClass::speed *) &(arg1)->speedTest8((enum SpeedClass::speed const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SpeedClass_myColour2_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  colour result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SpeedClass_myColour2_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_myColour2_get" "', argument " "1"" of type '" "SpeedClass *""'"); 
  }
  arg1 = reinterpret_cast< SpeedClass * >(argp1);
  result = (colour)(colour) ((arg1)->myColour2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SpeedClass_mySpeedtd1_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speedtd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SpeedClass_mySpeedtd1_set self mySpeedtd1 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_mySpeedtd1_set" "', argument " "1"" of type '" "SpeedClass *""'"); 
  }
  arg1 = reinterpret_cast< SpeedClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_mySpeedtd1_set" "', argument " "2"" of type '" "SpeedClass::speedtd1""'");
  } 
  arg2 = static_cast< SpeedClass::speedtd1 >(val2);
  if (arg1) (arg1)->mySpeedtd1 = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SpeedClass_mySpeedtd1_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SpeedClass::speedtd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SpeedClass_mySpeedtd1_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_mySpeedtd1_get" "', argument " "1"" of type '" "SpeedClass *""'"); 
  }
  arg1 = reinterpret_cast< SpeedClass * >(argp1);
  result = (SpeedClass::speedtd1) ((arg1)->mySpeedtd1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SpeedClass(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SpeedClass ") == TCL_ERROR) SWIG_fail;
  result = (SpeedClass *)new SpeedClass();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SpeedClass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SpeedClass(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SpeedClass self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SpeedClass, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpeedClass" "', argument " "1"" of type '" "SpeedClass *""'"); 
  }
  arg1 = reinterpret_cast< SpeedClass * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SpeedClass(void *obj) {
SpeedClass *arg1 = (SpeedClass *) obj;
delete arg1;
}
static swig_method swig_SpeedClass_methods[] = {
    {"speedTest0", _wrap_SpeedClass_speedTest0}, 
    {"speedTest1", _wrap_SpeedClass_speedTest1}, 
    {"speedTest2", _wrap_SpeedClass_speedTest2}, 
    {"speedTest3", _wrap_SpeedClass_speedTest3}, 
    {"speedTest4", _wrap_SpeedClass_speedTest4}, 
    {"speedTest5", _wrap_SpeedClass_speedTest5}, 
    {"speedTest6", _wrap_SpeedClass_speedTest6}, 
    {"speedTest7", _wrap_SpeedClass_speedTest7}, 
    {"speedTest8", _wrap_SpeedClass_speedTest8}, 
    {0,0}
};
static swig_attribute swig_SpeedClass_attributes[] = {
    { "-myColour2",_wrap_SpeedClass_myColour2_get, 0 },
    { "-mySpeedtd1",_wrap_SpeedClass_mySpeedtd1_get, _wrap_SpeedClass_mySpeedtd1_set},
    {0,0,0}
};
static swig_class *swig_SpeedClass_bases[] = {0};
static const char * swig_SpeedClass_base_names[] = {0};
static swig_class _wrap_class_SpeedClass = { "SpeedClass", &SWIGTYPE_p_SpeedClass,_wrap_new_SpeedClass, swig_delete_SpeedClass, swig_SpeedClass_methods, swig_SpeedClass_attributes, swig_SpeedClass_bases,swig_SpeedClass_base_names, &swig_module };
SWIGINTERN int
_wrap_speedTest0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:speedTest0 s ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "speedTest0" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)speedTest0(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_speedTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass::speed arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  SpeedClass::speed result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:speedTest1 s ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "speedTest1" "', argument " "1"" of type '" "SpeedClass::speed""'");
  } 
  arg1 = static_cast< SpeedClass::speed >(val1);
  result = (SpeedClass::speed)speedTest1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_speedTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum SpeedClass::speed arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum SpeedClass::speed result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:speedTest2 s ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "speedTest2" "', argument " "1"" of type '" "enum SpeedClass::speed""'");
  } 
  arg1 = static_cast< enum SpeedClass::speed >(val1);
  result = (enum SpeedClass::speed)speedTest2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_speedTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass::speed arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  SpeedClass::speed result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:speedTest3 s ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "speedTest3" "', argument " "1"" of type '" "SpeedClass::speed""'");
  } 
  arg1 = static_cast< SpeedClass::speed >(val1);
  result = (SpeedClass::speed)speedTest3(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_speedTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum SpeedClass::speed arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum SpeedClass::speed result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:speedTest4 s ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "speedTest4" "', argument " "1"" of type '" "enum SpeedClass::speed""'");
  } 
  arg1 = static_cast< enum SpeedClass::speed >(val1);
  result = (enum SpeedClass::speed)speedTest4(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_speedTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SpeedClass::speed *arg1 = 0 ;
  int val1 ;
  int ecode1 ;
  SpeedClass::speed temp1 ;
  SpeedClass::speed *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:speedTest5 s ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "speedTest5" "', argument " "1"" of type '" "SpeedClass::speed const &""'");
  } else {
    temp1 = static_cast< SpeedClass::speed >(val1);
    arg1 = &temp1;
  }
  result = (SpeedClass::speed *) &speedTest5((enum SpeedClass::speed const &)*arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_namedanonTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  namedanon arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  namedanon result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:namedanonTest1 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "namedanonTest1" "', argument " "1"" of type '" "namedanon""'");
  } 
  arg1 = static_cast< namedanon >(val1);
  result = (namedanon)namedanonTest1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_twonamesTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  twonames arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  twonames result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:twonamesTest1 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "twonamesTest1" "', argument " "1"" of type '" "twonames""'");
  } 
  arg1 = static_cast< twonames >(val1);
  result = (twonames)twonamesTest1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_twonamesTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  twonamestag arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  twonamestag result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:twonamesTest2 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "twonamesTest2" "', argument " "1"" of type '" "twonamestag""'");
  } 
  arg1 = static_cast< twonamestag >(val1);
  result = (twonamestag)twonamesTest2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_twonamesTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum twonamestag arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum twonamestag result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:twonamesTest3 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "twonamesTest3" "', argument " "1"" of type '" "enum twonamestag""'");
  } 
  arg1 = static_cast< enum twonamestag >(val1);
  result = (enum twonamestag)twonamesTest3(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TwoNamesStruct_twonamesTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
  TwoNamesStruct::twonames arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TwoNamesStruct::twonames result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TwoNamesStruct_twonamesTest1 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TwoNamesStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoNamesStruct_twonamesTest1" "', argument " "1"" of type '" "TwoNamesStruct *""'"); 
  }
  arg1 = reinterpret_cast< TwoNamesStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoNamesStruct_twonamesTest1" "', argument " "2"" of type '" "TwoNamesStruct::twonames""'");
  } 
  arg2 = static_cast< TwoNamesStruct::twonames >(val2);
  result = (TwoNamesStruct::twonames)(arg1)->twonamesTest1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TwoNamesStruct_twonamesTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
  TwoNamesStruct::twonamestag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TwoNamesStruct::twonamestag result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TwoNamesStruct_twonamesTest2 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TwoNamesStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoNamesStruct_twonamesTest2" "', argument " "1"" of type '" "TwoNamesStruct *""'"); 
  }
  arg1 = reinterpret_cast< TwoNamesStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoNamesStruct_twonamesTest2" "', argument " "2"" of type '" "TwoNamesStruct::twonamestag""'");
  } 
  arg2 = static_cast< TwoNamesStruct::twonamestag >(val2);
  result = (TwoNamesStruct::twonamestag)(arg1)->twonamesTest2(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TwoNamesStruct_twonamesTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
  enum TwoNamesStruct::twonamestag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum TwoNamesStruct::twonamestag result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TwoNamesStruct_twonamesTest3 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TwoNamesStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoNamesStruct_twonamesTest3" "', argument " "1"" of type '" "TwoNamesStruct *""'"); 
  }
  arg1 = reinterpret_cast< TwoNamesStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoNamesStruct_twonamesTest3" "', argument " "2"" of type '" "enum TwoNamesStruct::twonamestag""'");
  } 
  arg2 = static_cast< enum TwoNamesStruct::twonamestag >(val2);
  result = (enum TwoNamesStruct::twonamestag)(arg1)->twonamesTest3(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_TwoNamesStruct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TwoNamesStruct *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_TwoNamesStruct ") == TCL_ERROR) SWIG_fail;
  result = (TwoNamesStruct *)new TwoNamesStruct();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_TwoNamesStruct,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_TwoNamesStruct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_TwoNamesStruct self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TwoNamesStruct, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TwoNamesStruct" "', argument " "1"" of type '" "TwoNamesStruct *""'"); 
  }
  arg1 = reinterpret_cast< TwoNamesStruct * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_TwoNamesStruct(void *obj) {
TwoNamesStruct *arg1 = (TwoNamesStruct *) obj;
delete arg1;
}
static swig_method swig_TwoNamesStruct_methods[] = {
    {"twonamesTest1", _wrap_TwoNamesStruct_twonamesTest1}, 
    {"twonamesTest2", _wrap_TwoNamesStruct_twonamesTest2}, 
    {"twonamesTest3", _wrap_TwoNamesStruct_twonamesTest3}, 
    {0,0}
};
static swig_attribute swig_TwoNamesStruct_attributes[] = {
    {0,0,0}
};
static swig_class *swig_TwoNamesStruct_bases[] = {0};
static const char * swig_TwoNamesStruct_base_names[] = {0};
static swig_class _wrap_class_TwoNamesStruct = { "TwoNamesStruct", &SWIGTYPE_p_TwoNamesStruct,_wrap_new_TwoNamesStruct, swig_delete_TwoNamesStruct, swig_TwoNamesStruct_methods, swig_TwoNamesStruct_attributes, swig_TwoNamesStruct_bases,swig_TwoNamesStruct_base_names, &swig_module };
SWIGINTERN int
_wrap_namedanonspaceTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  AnonSpace::namedanonspace arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  AnonSpace::namedanonspace result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:namedanonspaceTest1 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "namedanonspaceTest1" "', argument " "1"" of type '" "AnonSpace::namedanonspace""'");
  } 
  arg1 = static_cast< AnonSpace::namedanonspace >(val1);
  result = (AnonSpace::namedanonspace)AnonSpace::namedanonspaceTest1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_namedanonspaceTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  AnonSpace::namedanonspace arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  AnonSpace::namedanonspace result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:namedanonspaceTest2 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "namedanonspaceTest2" "', argument " "1"" of type '" "AnonSpace::namedanonspace""'");
  } 
  arg1 = static_cast< AnonSpace::namedanonspace >(val1);
  result = (AnonSpace::namedanonspace)AnonSpace::namedanonspaceTest2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_namedanonspaceTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  AnonSpace::namedanonspace arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  AnonSpace::namedanonspace result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:namedanonspaceTest3 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "namedanonspaceTest3" "', argument " "1"" of type '" "AnonSpace::namedanonspace""'");
  } 
  arg1 = static_cast< AnonSpace::namedanonspace >(val1);
  result = (AnonSpace::namedanonspace)namedanonspaceTest3(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_namedanonspaceTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  AnonSpace::namedanonspace arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  AnonSpace::namedanonspace result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:namedanonspaceTest4 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "namedanonspaceTest4" "', argument " "1"" of type '" "AnonSpace::namedanonspace""'");
  } 
  arg1 = static_cast< AnonSpace::namedanonspace >(val1);
  result = (AnonSpace::namedanonspace)namedanonspaceTest4(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsTest1 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest1" "', argument " "1"" of type '" "TemplateClass< int >::scientists""'");
  } 
  arg1 = static_cast< TemplateClass< int >::scientists >(val1);
  result = (TemplateClass< int >::scientists)scientistsTest1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsTest2 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest2" "', argument " "1"" of type '" "TemplateClass< int >::scientists""'");
  } 
  arg1 = static_cast< TemplateClass< int >::scientists >(val1);
  result = (TemplateClass< int >::scientists)scientistsTest2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum TemplateClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsTest3 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest3" "', argument " "1"" of type '" "enum TemplateClass< int >::scientists""'");
  } 
  arg1 = static_cast< enum TemplateClass< int >::scientists >(val1);
  result = (enum TemplateClass< int >::scientists)scientistsTest3(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum TemplateClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsTest4 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest4" "', argument " "1"" of type '" "enum TemplateClass< int >::scientists""'");
  } 
  arg1 = static_cast< enum TemplateClass< int >::scientists >(val1);
  result = (enum TemplateClass< int >::scientists)scientistsTest4(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int >::scientiststd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TemplateClass< int >::scientiststd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsTest5 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest5" "', argument " "1"" of type '" "TemplateClass< int >::scientiststd1""'");
  } 
  arg1 = static_cast< TemplateClass< int >::scientiststd1 >(val1);
  result = (TemplateClass< int >::scientiststd1)scientistsTest5(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int >::scientiststd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TemplateClass< int >::scientiststd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsTest6 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest6" "', argument " "1"" of type '" "TemplateClass< int >::scientiststd2""'");
  } 
  arg1 = static_cast< TemplateClass< int >::scientiststd2 >(val1);
  result = (TemplateClass< int >::scientiststd2)scientistsTest6(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsTest7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int >::scientiststd3 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TemplateClass< int >::scientiststd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsTest7 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest7" "', argument " "1"" of type '" "TemplateClass< int >::scientiststd3""'");
  } 
  arg1 = static_cast< TemplateClass< int >::scientiststd3 >(val1);
  result = (TemplateClass< int >::scientiststd3)scientistsTest7(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsTest8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int >::scientiststd3 *arg1 = 0 ;
  int val1 ;
  int ecode1 ;
  TemplateClass< int >::scientiststd3 temp1 ;
  TemplateClass< int >::scientiststd3 *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsTest8 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest8" "', argument " "1"" of type '" "TemplateClass< int >::scientiststd3 const &""'");
  } else {
    temp1 = static_cast< TemplateClass< int >::scientiststd3 >(val1);
    arg1 = &temp1;
  }
  result = (TemplateClass< int >::scientiststd3 *) &scientistsTest8((enum TemplateClass< int >::scientists const &)*arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameTest1 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest1" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientists >(val1);
  result = (Name::TClass< int >::scientists)Name::scientistsNameTest1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameTest2 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest2" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientists >(val1);
  result = (Name::TClass< int >::scientists)Name::scientistsNameTest2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameTest3 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest3" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
  result = (enum Name::TClass< int >::scientists)Name::scientistsNameTest3(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameTest4 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest4" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
  result = (enum Name::TClass< int >::scientists)Name::scientistsNameTest4(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientiststd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientiststd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameTest5 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest5" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd1""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientiststd1 >(val1);
  result = (Name::TClass< int >::scientiststd1)Name::scientistsNameTest5(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientiststd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientiststd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameTest6 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest6" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd2""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientiststd2 >(val1);
  result = (Name::TClass< int >::scientiststd2)Name::scientistsNameTest6(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameTest7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientiststd3 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientiststd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameTest7 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest7" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd3""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientiststd3 >(val1);
  result = (Name::TClass< int >::scientiststd3)Name::scientistsNameTest7(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTest1 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest1" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientists >(val1);
  result = (Name::TClass< int >::scientists)Name::scientistsNameSpaceTest1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTest2 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest2" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientists >(val1);
  result = (Name::TClass< int >::scientists)Name::scientistsNameSpaceTest2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTest3 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest3" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
  result = (enum Name::TClass< int >::scientists)Name::scientistsNameSpaceTest3(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTest4 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest4" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
  result = (enum Name::TClass< int >::scientists)Name::scientistsNameSpaceTest4(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientiststd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientiststd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTest5 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest5" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd1""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientiststd1 >(val1);
  result = (Name::TClass< int >::scientiststd1)Name::scientistsNameSpaceTest5(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientiststd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientiststd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTest6 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest6" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd2""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientiststd2 >(val1);
  result = (Name::TClass< int >::scientiststd2)Name::scientistsNameSpaceTest6(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTest7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientiststd3 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientiststd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTest7 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest7" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd3""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientiststd3 >(val1);
  result = (Name::TClass< int >::scientiststd3)Name::scientistsNameSpaceTest7(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTest8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTest8 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest8" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientists >(val1);
  result = (Name::TClass< int >::scientists)scientistsNameSpaceTest8(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTest9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTest9 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest9" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientists >(val1);
  result = (Name::TClass< int >::scientists)scientistsNameSpaceTest9(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTestA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTestA e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestA" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
  result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestA(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTestB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTestB e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestB" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
  result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestB(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTestC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientiststd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientiststd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTestC e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestC" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd1""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientiststd1 >(val1);
  result = (Name::TClass< int >::scientiststd1)scientistsNameSpaceTestC(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTestD(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientiststd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientiststd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTestD e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestD" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd2""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientiststd2 >(val1);
  result = (Name::TClass< int >::scientiststd2)scientistsNameSpaceTestD(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTestE(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientiststd3 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientiststd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTestE e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestE" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd3""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientiststd3 >(val1);
  result = (Name::TClass< int >::scientiststd3)scientistsNameSpaceTestE(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTestF(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTestF e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestF" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientists >(val1);
  result = (Name::TClass< int >::scientists)scientistsNameSpaceTestF(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTestG(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTestG e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestG" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientists >(val1);
  result = (Name::TClass< int >::scientists)scientistsNameSpaceTestG(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTestH(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTestH e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestH" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
  result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestH(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTestI(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  enum Name::TClass< int >::scientists arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTestI e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestI" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
  result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestI(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTestJ(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientiststd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientiststd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTestJ e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestJ" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd1""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientiststd1 >(val1);
  result = (Name::TClass< int >::scientiststd1)scientistsNameSpaceTestJ(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTestK(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientiststd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientiststd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTestK e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestK" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd2""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientiststd2 >(val1);
  result = (Name::TClass< int >::scientiststd2)scientistsNameSpaceTestK(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_scientistsNameSpaceTestL(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int >::scientiststd3 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Name::TClass< int >::scientiststd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:scientistsNameSpaceTestL e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestL" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd3""'");
  } 
  arg1 = static_cast< Name::TClass< int >::scientiststd3 >(val1);
  result = (Name::TClass< int >::scientiststd3)scientistsNameSpaceTestL(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTest1 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest1" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest1" "', argument " "2"" of type '" "TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< TemplateClass< int >::scientists >(val2);
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  enum TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTest2 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest2" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest2" "', argument " "2"" of type '" "enum TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< enum TemplateClass< int >::scientists >(val2);
  result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest2(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTest3 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest3" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest3" "', argument " "2"" of type '" "TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< TemplateClass< int >::scientists >(val2);
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest3(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  enum TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTest4 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest4" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest4" "', argument " "2"" of type '" "enum TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< enum TemplateClass< int >::scientists >(val2);
  result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest4(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTest5 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest5" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest5" "', argument " "2"" of type '" "TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< TemplateClass< int >::scientists >(val2);
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest5(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTest6 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest6" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest6" "', argument " "2"" of type '" "TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< TemplateClass< int >::scientists >(val2);
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest6(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTest7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  enum TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTest7 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest7" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest7" "', argument " "2"" of type '" "enum TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< enum TemplateClass< int >::scientists >(val2);
  result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest7(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTest8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  enum TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTest8 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest8" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest8" "', argument " "2"" of type '" "enum TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< enum TemplateClass< int >::scientists >(val2);
  result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest8(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTest9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTest9 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest9" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest9" "', argument " "2"" of type '" "TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< TemplateClass< int >::scientists >(val2);
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest9(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTestB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTestB self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestB" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestB" "', argument " "2"" of type '" "TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< TemplateClass< int >::scientists >(val2);
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTestB(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTestD(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TemplateClass< int >::scientiststd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTestD self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestD" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestD" "', argument " "2"" of type '" "TemplateClass< int >::scientiststd1""'");
  } 
  arg2 = static_cast< TemplateClass< int >::scientiststd1 >(val2);
  result = (TemplateClass< int >::scientiststd1)(arg1)->scientistsTestD(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTestE(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TemplateClass< int >::scientiststd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTestE self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestE" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestE" "', argument " "2"" of type '" "TemplateClass< int >::scientiststd2""'");
  } 
  arg2 = static_cast< TemplateClass< int >::scientiststd2 >(val2);
  result = (TemplateClass< int >::scientiststd2)(arg1)->scientistsTestE(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTestF(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TemplateClass< int >::scientiststd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTestF self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestF" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestF" "', argument " "2"" of type '" "TemplateClass< int >::scientiststd3""'");
  } 
  arg2 = static_cast< TemplateClass< int >::scientiststd3 >(val2);
  result = (TemplateClass< int >::scientiststd3)(arg1)->scientistsTestF(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTestG(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TemplateClass< int >::scientiststd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTestG self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestG" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestG" "', argument " "2"" of type '" "TemplateClass< int >::scientiststd1""'");
  } 
  arg2 = static_cast< TemplateClass< int >::scientiststd1 >(val2);
  result = (TemplateClass< int >::scientiststd1)(arg1)->scientistsTestG(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTestH(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TemplateClass< int >::scientiststd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTestH self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestH" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestH" "', argument " "2"" of type '" "TemplateClass< int >::scientiststd2""'");
  } 
  arg2 = static_cast< TemplateClass< int >::scientiststd2 >(val2);
  result = (TemplateClass< int >::scientiststd2)(arg1)->scientistsTestH(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTestI(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TemplateClass< int >::scientiststd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTestI self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestI" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestI" "', argument " "2"" of type '" "TemplateClass< int >::scientiststd3""'");
  } 
  arg2 = static_cast< TemplateClass< int >::scientiststd3 >(val2);
  result = (TemplateClass< int >::scientiststd3)(arg1)->scientistsTestI(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TemplateClassInt_scientistsTestJ(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  TemplateClass< int >::scientists temp2 ;
  TemplateClass< int >::scientists *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TemplateClassInt_scientistsTestJ self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestJ" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestJ" "', argument " "2"" of type '" "TemplateClass< int >::scientists const &""'");
  } else {
    temp2 = static_cast< TemplateClass< int >::scientists >(val2);
    arg2 = &temp2;
  }
  result = (TemplateClass< int >::scientists *) &(arg1)->scientistsTestJ((TemplateClass< int >::scientists const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_TemplateClassInt(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_TemplateClassInt ") == TCL_ERROR) SWIG_fail;
  result = (TemplateClass< int > *)new TemplateClass< int >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_TemplateClassT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_TemplateClassInt(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_TemplateClassInt self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TemplateClassT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TemplateClassInt" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_TemplateClassInt(void *obj) {
TemplateClass< int > *arg1 = (TemplateClass< int > *) obj;
delete arg1;
}
static swig_method swig_TemplateClass_Sl_int_Sg__methods[] = {
    {"scientistsTest1", _wrap_TemplateClassInt_scientistsTest1}, 
    {"scientistsTest2", _wrap_TemplateClassInt_scientistsTest2}, 
    {"scientistsTest3", _wrap_TemplateClassInt_scientistsTest3}, 
    {"scientistsTest4", _wrap_TemplateClassInt_scientistsTest4}, 
    {"scientistsTest5", _wrap_TemplateClassInt_scientistsTest5}, 
    {"scientistsTest6", _wrap_TemplateClassInt_scientistsTest6}, 
    {"scientistsTest7", _wrap_TemplateClassInt_scientistsTest7}, 
    {"scientistsTest8", _wrap_TemplateClassInt_scientistsTest8}, 
    {"scientistsTest9", _wrap_TemplateClassInt_scientistsTest9}, 
    {"scientistsTestB", _wrap_TemplateClassInt_scientistsTestB}, 
    {"scientistsTestD", _wrap_TemplateClassInt_scientistsTestD}, 
    {"scientistsTestE", _wrap_TemplateClassInt_scientistsTestE}, 
    {"scientistsTestF", _wrap_TemplateClassInt_scientistsTestF}, 
    {"scientistsTestG", _wrap_TemplateClassInt_scientistsTestG}, 
    {"scientistsTestH", _wrap_TemplateClassInt_scientistsTestH}, 
    {"scientistsTestI", _wrap_TemplateClassInt_scientistsTestI}, 
    {"scientistsTestJ", _wrap_TemplateClassInt_scientistsTestJ}, 
    {0,0}
};
static swig_attribute swig_TemplateClass_Sl_int_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_TemplateClass_Sl_int_Sg__bases[] = {0};
static const char * swig_TemplateClass_Sl_int_Sg__base_names[] = {0};
static swig_class _wrap_class_TemplateClass_Sl_int_Sg_ = { "TemplateClassInt", &SWIGTYPE_p_TemplateClassT_int_t,_wrap_new_TemplateClassInt, swig_delete_TemplateClassInt, swig_TemplateClass_Sl_int_Sg__methods, swig_TemplateClass_Sl_int_Sg__attributes, swig_TemplateClass_Sl_int_Sg__bases,swig_TemplateClass_Sl_int_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_TClassInt_scientistsNameTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTest1 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest1" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest1" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientists >(val2);
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTest2 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest2" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest2" "', argument " "2"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< enum Name::TClass< int >::scientists >(val2);
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest2(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTest3 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest3" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest3" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientists >(val2);
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest3(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTest4 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest4" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest4" "', argument " "2"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< enum Name::TClass< int >::scientists >(val2);
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest4(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTest5 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest5" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest5" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientists >(val2);
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest5(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTest6 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest6" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest6" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientists >(val2);
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest6(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTest7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTest7 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest7" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest7" "', argument " "2"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< enum Name::TClass< int >::scientists >(val2);
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest7(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTest8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTest8 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest8" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest8" "', argument " "2"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< enum Name::TClass< int >::scientists >(val2);
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest8(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTest9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTest9 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest9" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest9" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientists >(val2);
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest9(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTestB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTestB self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestB" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestB" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientists >(val2);
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTestB(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTestD(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientiststd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTestD self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestD" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestD" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd1""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientiststd1 >(val2);
  result = (Name::TClass< int >::scientiststd1)(arg1)->scientistsNameTestD(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTestE(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientiststd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTestE self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestE" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestE" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd2""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientiststd2 >(val2);
  result = (Name::TClass< int >::scientiststd2)(arg1)->scientistsNameTestE(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTestF(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientiststd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTestF self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestF" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestF" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd3""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientiststd3 >(val2);
  result = (Name::TClass< int >::scientiststd3)(arg1)->scientistsNameTestF(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTestG(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientiststd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTestG self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestG" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestG" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd1""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientiststd1 >(val2);
  result = (Name::TClass< int >::scientiststd1)(arg1)->scientistsNameTestG(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTestH(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientiststd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTestH self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestH" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestH" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd2""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientiststd2 >(val2);
  result = (Name::TClass< int >::scientiststd2)(arg1)->scientistsNameTestH(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameTestI(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientiststd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameTestI self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestI" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestI" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd3""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientiststd3 >(val2);
  result = (Name::TClass< int >::scientiststd3)(arg1)->scientistsNameTestI(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameSpaceTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameSpaceTest1 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest1" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest1" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientists >(val2);
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameSpaceTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameSpaceTest2 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest2" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest2" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientists >(val2);
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest2(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameSpaceTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameSpaceTest3 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest3" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest3" "', argument " "2"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< enum Name::TClass< int >::scientists >(val2);
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest3(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameSpaceTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum Name::TClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameSpaceTest4 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest4" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest4" "', argument " "2"" of type '" "enum Name::TClass< int >::scientists""'");
  } 
  arg2 = static_cast< enum Name::TClass< int >::scientists >(val2);
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest4(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameSpaceTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientiststd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameSpaceTest5 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest5" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest5" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd1""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientiststd1 >(val2);
  result = (Name::TClass< int >::scientiststd1)(arg1)->scientistsNameSpaceTest5(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameSpaceTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientiststd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameSpaceTest6 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest6" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest6" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd2""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientiststd2 >(val2);
  result = (Name::TClass< int >::scientiststd2)(arg1)->scientistsNameSpaceTest6(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsNameSpaceTest7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Name::TClass< int >::scientiststd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsNameSpaceTest7 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest7" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest7" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd3""'");
  } 
  arg2 = static_cast< Name::TClass< int >::scientiststd3 >(val2);
  result = (Name::TClass< int >::scientiststd3)(arg1)->scientistsNameSpaceTest7(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsOtherTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsOtherTest1 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest1" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest1" "', argument " "2"" of type '" "::TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< ::TemplateClass< int >::scientists >(val2);
  result = (::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsOtherTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsOtherTest2 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest2" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest2" "', argument " "2"" of type '" "::TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< ::TemplateClass< int >::scientists >(val2);
  result = (::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest2(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsOtherTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum ::TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum ::TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsOtherTest3 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest3" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest3" "', argument " "2"" of type '" "enum ::TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< enum ::TemplateClass< int >::scientists >(val2);
  result = (enum ::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest3(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsOtherTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum ::TemplateClass< int >::scientists arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum ::TemplateClass< int >::scientists result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsOtherTest4 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest4" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest4" "', argument " "2"" of type '" "enum ::TemplateClass< int >::scientists""'");
  } 
  arg2 = static_cast< enum ::TemplateClass< int >::scientists >(val2);
  result = (enum ::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest4(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsOtherTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientiststd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::TemplateClass< int >::scientiststd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsOtherTest5 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest5" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest5" "', argument " "2"" of type '" "::TemplateClass< int >::scientiststd1""'");
  } 
  arg2 = static_cast< ::TemplateClass< int >::scientiststd1 >(val2);
  result = (::TemplateClass< int >::scientiststd1)(arg1)->scientistsOtherTest5(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsOtherTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientiststd2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::TemplateClass< int >::scientiststd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsOtherTest6 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest6" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest6" "', argument " "2"" of type '" "::TemplateClass< int >::scientiststd2""'");
  } 
  arg2 = static_cast< ::TemplateClass< int >::scientiststd2 >(val2);
  result = (::TemplateClass< int >::scientiststd2)(arg1)->scientistsOtherTest6(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TClassInt_scientistsOtherTest7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientiststd3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::TemplateClass< int >::scientiststd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TClassInt_scientistsOtherTest7 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest7" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest7" "', argument " "2"" of type '" "::TemplateClass< int >::scientiststd3""'");
  } 
  arg2 = static_cast< ::TemplateClass< int >::scientiststd3 >(val2);
  result = (::TemplateClass< int >::scientiststd3)(arg1)->scientistsOtherTest7(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_TClassInt(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_TClassInt ") == TCL_ERROR) SWIG_fail;
  result = (Name::TClass< int > *)new Name::TClass< int >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Name__TClassT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_TClassInt(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_TClassInt self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Name__TClassT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TClassInt" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
  }
  arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_TClassInt(void *obj) {
Name::TClass< int > *arg1 = (Name::TClass< int > *) obj;
delete arg1;
}
static swig_method swig_Name_TClass_Sl_int_Sg__methods[] = {
    {"scientistsNameTest1", _wrap_TClassInt_scientistsNameTest1}, 
    {"scientistsNameTest2", _wrap_TClassInt_scientistsNameTest2}, 
    {"scientistsNameTest3", _wrap_TClassInt_scientistsNameTest3}, 
    {"scientistsNameTest4", _wrap_TClassInt_scientistsNameTest4}, 
    {"scientistsNameTest5", _wrap_TClassInt_scientistsNameTest5}, 
    {"scientistsNameTest6", _wrap_TClassInt_scientistsNameTest6}, 
    {"scientistsNameTest7", _wrap_TClassInt_scientistsNameTest7}, 
    {"scientistsNameTest8", _wrap_TClassInt_scientistsNameTest8}, 
    {"scientistsNameTest9", _wrap_TClassInt_scientistsNameTest9}, 
    {"scientistsNameTestB", _wrap_TClassInt_scientistsNameTestB}, 
    {"scientistsNameTestD", _wrap_TClassInt_scientistsNameTestD}, 
    {"scientistsNameTestE", _wrap_TClassInt_scientistsNameTestE}, 
    {"scientistsNameTestF", _wrap_TClassInt_scientistsNameTestF}, 
    {"scientistsNameTestG", _wrap_TClassInt_scientistsNameTestG}, 
    {"scientistsNameTestH", _wrap_TClassInt_scientistsNameTestH}, 
    {"scientistsNameTestI", _wrap_TClassInt_scientistsNameTestI}, 
    {"scientistsNameSpaceTest1", _wrap_TClassInt_scientistsNameSpaceTest1}, 
    {"scientistsNameSpaceTest2", _wrap_TClassInt_scientistsNameSpaceTest2}, 
    {"scientistsNameSpaceTest3", _wrap_TClassInt_scientistsNameSpaceTest3}, 
    {"scientistsNameSpaceTest4", _wrap_TClassInt_scientistsNameSpaceTest4}, 
    {"scientistsNameSpaceTest5", _wrap_TClassInt_scientistsNameSpaceTest5}, 
    {"scientistsNameSpaceTest6", _wrap_TClassInt_scientistsNameSpaceTest6}, 
    {"scientistsNameSpaceTest7", _wrap_TClassInt_scientistsNameSpaceTest7}, 
    {"scientistsOtherTest1", _wrap_TClassInt_scientistsOtherTest1}, 
    {"scientistsOtherTest2", _wrap_TClassInt_scientistsOtherTest2}, 
    {"scientistsOtherTest3", _wrap_TClassInt_scientistsOtherTest3}, 
    {"scientistsOtherTest4", _wrap_TClassInt_scientistsOtherTest4}, 
    {"scientistsOtherTest5", _wrap_TClassInt_scientistsOtherTest5}, 
    {"scientistsOtherTest6", _wrap_TClassInt_scientistsOtherTest6}, 
    {"scientistsOtherTest7", _wrap_TClassInt_scientistsOtherTest7}, 
    {0,0}
};
static swig_attribute swig_Name_TClass_Sl_int_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Name_TClass_Sl_int_Sg__bases[] = {0};
static const char * swig_Name_TClass_Sl_int_Sg__base_names[] = {0};
static swig_class _wrap_class_Name_TClass_Sl_int_Sg_ = { "TClassInt", &SWIGTYPE_p_Name__TClassT_int_t,_wrap_new_TClassInt, swig_delete_TClassInt, swig_Name_TClass_Sl_int_Sg__methods, swig_Name_TClass_Sl_int_Sg__attributes, swig_Name_TClass_Sl_int_Sg__bases,swig_Name_TClass_Sl_int_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_renameTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  old_name arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  old_name result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:renameTest1 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest1" "', argument " "1"" of type '" "old_name""'");
  } 
  arg1 = static_cast< old_name >(val1);
  result = (old_name)renameTest1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_renameTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  old_nametd arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  old_nametd result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:renameTest2 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest2" "', argument " "1"" of type '" "old_nametd""'");
  } 
  arg1 = static_cast< old_nametd >(val1);
  result = (old_nametd)renameTest2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_NewNameStruct_renameTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::enumeration arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  OldNameStruct::enumeration result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:NewNameStruct_renameTest1 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_OldNameStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewNameStruct_renameTest1" "', argument " "1"" of type '" "OldNameStruct *""'"); 
  }
  arg1 = reinterpret_cast< OldNameStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewNameStruct_renameTest1" "', argument " "2"" of type '" "OldNameStruct::enumeration""'");
  } 
  arg2 = static_cast< OldNameStruct::enumeration >(val2);
  result = (OldNameStruct::enumeration)(arg1)->renameTest1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_NewNameStruct_renameTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::enumeration arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  OldNameStruct::enumeration result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:NewNameStruct_renameTest2 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_OldNameStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewNameStruct_renameTest2" "', argument " "1"" of type '" "OldNameStruct *""'"); 
  }
  arg1 = reinterpret_cast< OldNameStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewNameStruct_renameTest2" "', argument " "2"" of type '" "OldNameStruct::enumeration""'");
  } 
  arg2 = static_cast< OldNameStruct::enumeration >(val2);
  result = (OldNameStruct::enumeration)(arg1)->renameTest2(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_NewNameStruct_renameTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::simple arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  OldNameStruct::simple result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:NewNameStruct_renameTest3 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_OldNameStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewNameStruct_renameTest3" "', argument " "1"" of type '" "OldNameStruct *""'"); 
  }
  arg1 = reinterpret_cast< OldNameStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewNameStruct_renameTest3" "', argument " "2"" of type '" "OldNameStruct::simple""'");
  } 
  arg2 = static_cast< OldNameStruct::simple >(val2);
  result = (OldNameStruct::simple)(arg1)->renameTest3(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_NewNameStruct_renameTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::doublename arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  OldNameStruct::doublename result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:NewNameStruct_renameTest4 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_OldNameStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewNameStruct_renameTest4" "', argument " "1"" of type '" "OldNameStruct *""'"); 
  }
  arg1 = reinterpret_cast< OldNameStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewNameStruct_renameTest4" "', argument " "2"" of type '" "OldNameStruct::doublename""'");
  } 
  arg2 = static_cast< OldNameStruct::doublename >(val2);
  result = (OldNameStruct::doublename)(arg1)->renameTest4(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_NewNameStruct_renameTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::doublenametag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  OldNameStruct::doublenametag result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:NewNameStruct_renameTest5 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_OldNameStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewNameStruct_renameTest5" "', argument " "1"" of type '" "OldNameStruct *""'"); 
  }
  arg1 = reinterpret_cast< OldNameStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewNameStruct_renameTest5" "', argument " "2"" of type '" "OldNameStruct::doublenametag""'");
  } 
  arg2 = static_cast< OldNameStruct::doublenametag >(val2);
  result = (OldNameStruct::doublenametag)(arg1)->renameTest5(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_NewNameStruct_renameTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::singlename arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  OldNameStruct::singlename result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:NewNameStruct_renameTest6 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_OldNameStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewNameStruct_renameTest6" "', argument " "1"" of type '" "OldNameStruct *""'"); 
  }
  arg1 = reinterpret_cast< OldNameStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewNameStruct_renameTest6" "', argument " "2"" of type '" "OldNameStruct::singlename""'");
  } 
  arg2 = static_cast< OldNameStruct::singlename >(val2);
  result = (OldNameStruct::singlename)(arg1)->renameTest6(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_NewNameStruct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  OldNameStruct *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_NewNameStruct ") == TCL_ERROR) SWIG_fail;
  result = (OldNameStruct *)new OldNameStruct();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_OldNameStruct,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_NewNameStruct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_NewNameStruct self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_OldNameStruct, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NewNameStruct" "', argument " "1"" of type '" "OldNameStruct *""'"); 
  }
  arg1 = reinterpret_cast< OldNameStruct * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_NewNameStruct(void *obj) {
OldNameStruct *arg1 = (OldNameStruct *) obj;
delete arg1;
}
static swig_method swig_OldNameStruct_methods[] = {
    {"renameTest1", _wrap_NewNameStruct_renameTest1}, 
    {"renameTest2", _wrap_NewNameStruct_renameTest2}, 
    {"renameTest3", _wrap_NewNameStruct_renameTest3}, 
    {"renameTest4", _wrap_NewNameStruct_renameTest4}, 
    {"renameTest5", _wrap_NewNameStruct_renameTest5}, 
    {"renameTest6", _wrap_NewNameStruct_renameTest6}, 
    {0,0}
};
static swig_attribute swig_OldNameStruct_attributes[] = {
    {0,0,0}
};
static swig_class *swig_OldNameStruct_bases[] = {0};
static const char * swig_OldNameStruct_base_names[] = {0};
static swig_class _wrap_class_OldNameStruct = { "NewNameStruct", &SWIGTYPE_p_OldNameStruct,_wrap_new_NewNameStruct, swig_delete_NewNameStruct, swig_OldNameStruct_methods, swig_OldNameStruct_attributes, swig_OldNameStruct_bases,swig_OldNameStruct_base_names, &swig_module };
SWIGINTERN int
_wrap_renameTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  OldNameStruct::enumeration arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  OldNameStruct::enumeration result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:renameTest3 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest3" "', argument " "1"" of type '" "OldNameStruct::enumeration""'");
  } 
  arg1 = static_cast< OldNameStruct::enumeration >(val1);
  result = (OldNameStruct::enumeration)renameTest3(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_renameTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  OldNameStruct::simple arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  OldNameStruct::simple result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:renameTest4 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest4" "', argument " "1"" of type '" "OldNameStruct::simple""'");
  } 
  arg1 = static_cast< OldNameStruct::simple >(val1);
  result = (OldNameStruct::simple)renameTest4(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_renameTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  OldNameStruct::doublename arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  OldNameStruct::doublename result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:renameTest5 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest5" "', argument " "1"" of type '" "OldNameStruct::doublename""'");
  } 
  arg1 = static_cast< OldNameStruct::doublename >(val1);
  result = (OldNameStruct::doublename)renameTest5(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_renameTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  OldNameStruct::doublenametag arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  OldNameStruct::doublenametag result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:renameTest6 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest6" "', argument " "1"" of type '" "OldNameStruct::doublenametag""'");
  } 
  arg1 = static_cast< OldNameStruct::doublenametag >(val1);
  result = (OldNameStruct::doublenametag)renameTest6(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_renameTest7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  OldNameStruct::singlename arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  OldNameStruct::singlename result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:renameTest7 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest7" "', argument " "1"" of type '" "OldNameStruct::singlename""'");
  } 
  arg1 = static_cast< OldNameStruct::singlename >(val1);
  result = (OldNameStruct::singlename)renameTest7(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::trees arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::trees result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTest1 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest1" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest1" "', argument " "2"" of type '" "TreesClass::trees""'");
  } 
  arg2 = static_cast< TreesClass::trees >(val2);
  result = (TreesClass::trees)(arg1)->treesTest1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTest2 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest2" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest2" "', argument " "2"" of type '" "TreesClass::treestd1""'");
  } 
  arg2 = static_cast< TreesClass::treestd1 >(val2);
  result = (TreesClass::treestd1)(arg1)->treesTest2(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTest3 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest3" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest3" "', argument " "2"" of type '" "TreesClass::treestd2""'");
  } 
  arg2 = static_cast< TreesClass::treestd2 >(val2);
  result = (TreesClass::treestd2)(arg1)->treesTest3(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTest4 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest4" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest4" "', argument " "2"" of type '" "TreesClass::treestd3""'");
  } 
  arg2 = static_cast< TreesClass::treestd3 >(val2);
  result = (TreesClass::treestd3)(arg1)->treesTest4(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd4 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTest5 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest5" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest5" "', argument " "2"" of type '" "TreesClass::treestd4""'");
  } 
  arg2 = static_cast< TreesClass::treestd4 >(val2);
  result = (TreesClass::treestd4)(arg1)->treesTest5(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd5 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTest6 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest6" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest6" "', argument " "2"" of type '" "TreesClass::treestd5""'");
  } 
  arg2 = static_cast< TreesClass::treestd5 >(val2);
  result = (TreesClass::treestd5)(arg1)->treesTest6(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTest7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::trees arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::trees result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTest7 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest7" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest7" "', argument " "2"" of type '" "TreesClass::trees""'");
  } 
  arg2 = static_cast< TreesClass::trees >(val2);
  result = (TreesClass::trees)(arg1)->treesTest7(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTest8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTest8 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest8" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest8" "', argument " "2"" of type '" "TreesClass::treestd1""'");
  } 
  arg2 = static_cast< TreesClass::treestd1 >(val2);
  result = (TreesClass::treestd1)(arg1)->treesTest8(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTest9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTest9 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest9" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest9" "', argument " "2"" of type '" "TreesClass::treestd2""'");
  } 
  arg2 = static_cast< TreesClass::treestd2 >(val2);
  result = (TreesClass::treestd2)(arg1)->treesTest9(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestA self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestA" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestA" "', argument " "2"" of type '" "TreesClass::treestd3""'");
  } 
  arg2 = static_cast< TreesClass::treestd3 >(val2);
  result = (TreesClass::treestd3)(arg1)->treesTestA(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd4 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestB self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestB" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestB" "', argument " "2"" of type '" "TreesClass::treestd4""'");
  } 
  arg2 = static_cast< TreesClass::treestd4 >(val2);
  result = (TreesClass::treestd4)(arg1)->treesTestB(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd5 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestC self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestC" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestC" "', argument " "2"" of type '" "TreesClass::treestd5""'");
  } 
  arg2 = static_cast< TreesClass::treestd5 >(val2);
  result = (TreesClass::treestd5)(arg1)->treesTestC(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestD(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::trees arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::trees result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestD self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestD" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestD" "', argument " "2"" of type '" "TreesClass::trees""'");
  } 
  arg2 = static_cast< TreesClass::trees >(val2);
  result = (TreesClass::trees)(arg1)->treesTestD(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestE(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestE self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestE" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestE" "', argument " "2"" of type '" "TreesClass::treestd1""'");
  } 
  arg2 = static_cast< TreesClass::treestd1 >(val2);
  result = (TreesClass::treestd1)(arg1)->treesTestE(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestF(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestF self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestF" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestF" "', argument " "2"" of type '" "TreesClass::treestd2""'");
  } 
  arg2 = static_cast< TreesClass::treestd2 >(val2);
  result = (TreesClass::treestd2)(arg1)->treesTestF(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestG(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestG self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestG" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestG" "', argument " "2"" of type '" "TreesClass::treestd3""'");
  } 
  arg2 = static_cast< TreesClass::treestd3 >(val2);
  result = (TreesClass::treestd3)(arg1)->treesTestG(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestH(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd4 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestH self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestH" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestH" "', argument " "2"" of type '" "TreesClass::treestd4""'");
  } 
  arg2 = static_cast< TreesClass::treestd4 >(val2);
  result = (TreesClass::treestd4)(arg1)->treesTestH(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestI(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd5 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestI self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestI" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestI" "', argument " "2"" of type '" "TreesClass::treestd5""'");
  } 
  arg2 = static_cast< TreesClass::treestd5 >(val2);
  result = (TreesClass::treestd5)(arg1)->treesTestI(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestJ(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::trees arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::trees result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestJ self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestJ" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestJ" "', argument " "2"" of type '" "TreesClass::trees""'");
  } 
  arg2 = static_cast< TreesClass::trees >(val2);
  result = (TreesClass::trees)(arg1)->treesTestJ(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestK(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestK self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestK" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestK" "', argument " "2"" of type '" "TreesClass::treestd1""'");
  } 
  arg2 = static_cast< TreesClass::treestd1 >(val2);
  result = (TreesClass::treestd1)(arg1)->treesTestK(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestL(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestL self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestL" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestL" "', argument " "2"" of type '" "TreesClass::treestd2""'");
  } 
  arg2 = static_cast< TreesClass::treestd2 >(val2);
  result = (TreesClass::treestd2)(arg1)->treesTestL(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestM(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestM self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestM" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestM" "', argument " "2"" of type '" "TreesClass::treestd3""'");
  } 
  arg2 = static_cast< TreesClass::treestd3 >(val2);
  result = (TreesClass::treestd3)(arg1)->treesTestM(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestN(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd4 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestN self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestN" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestN" "', argument " "2"" of type '" "TreesClass::treestd4""'");
  } 
  arg2 = static_cast< TreesClass::treestd4 >(val2);
  result = (TreesClass::treestd4)(arg1)->treesTestN(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TreesClass_treesTestO(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd5 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  TreesClass::treestd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TreesClass_treesTestO self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestO" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestO" "', argument " "2"" of type '" "TreesClass::treestd5""'");
  } 
  arg2 = static_cast< TreesClass::treestd5 >(val2);
  result = (TreesClass::treestd5)(arg1)->treesTestO(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_TreesClass(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_TreesClass ") == TCL_ERROR) SWIG_fail;
  result = (TreesClass *)new TreesClass();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_TreesClass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_TreesClass(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_TreesClass self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TreesClass, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreesClass" "', argument " "1"" of type '" "TreesClass *""'"); 
  }
  arg1 = reinterpret_cast< TreesClass * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_TreesClass(void *obj) {
TreesClass *arg1 = (TreesClass *) obj;
delete arg1;
}
static swig_method swig_TreesClass_methods[] = {
    {"treesTest1", _wrap_TreesClass_treesTest1}, 
    {"treesTest2", _wrap_TreesClass_treesTest2}, 
    {"treesTest3", _wrap_TreesClass_treesTest3}, 
    {"treesTest4", _wrap_TreesClass_treesTest4}, 
    {"treesTest5", _wrap_TreesClass_treesTest5}, 
    {"treesTest6", _wrap_TreesClass_treesTest6}, 
    {"treesTest7", _wrap_TreesClass_treesTest7}, 
    {"treesTest8", _wrap_TreesClass_treesTest8}, 
    {"treesTest9", _wrap_TreesClass_treesTest9}, 
    {"treesTestA", _wrap_TreesClass_treesTestA}, 
    {"treesTestB", _wrap_TreesClass_treesTestB}, 
    {"treesTestC", _wrap_TreesClass_treesTestC}, 
    {"treesTestD", _wrap_TreesClass_treesTestD}, 
    {"treesTestE", _wrap_TreesClass_treesTestE}, 
    {"treesTestF", _wrap_TreesClass_treesTestF}, 
    {"treesTestG", _wrap_TreesClass_treesTestG}, 
    {"treesTestH", _wrap_TreesClass_treesTestH}, 
    {"treesTestI", _wrap_TreesClass_treesTestI}, 
    {"treesTestJ", _wrap_TreesClass_treesTestJ}, 
    {"treesTestK", _wrap_TreesClass_treesTestK}, 
    {"treesTestL", _wrap_TreesClass_treesTestL}, 
    {"treesTestM", _wrap_TreesClass_treesTestM}, 
    {"treesTestN", _wrap_TreesClass_treesTestN}, 
    {"treesTestO", _wrap_TreesClass_treesTestO}, 
    {0,0}
};
static swig_attribute swig_TreesClass_attributes[] = {
    {0,0,0}
};
static swig_class *swig_TreesClass_bases[] = {0};
static const char * swig_TreesClass_base_names[] = {0};
static swig_class _wrap_class_TreesClass = { "TreesClass", &SWIGTYPE_p_TreesClass,_wrap_new_TreesClass, swig_delete_TreesClass, swig_TreesClass_methods, swig_TreesClass_attributes, swig_TreesClass_bases,swig_TreesClass_base_names, &swig_module };
SWIGINTERN int
_wrap_treesTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::trees arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::trees result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTest1 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest1" "', argument " "1"" of type '" "TreesClass::trees""'");
  } 
  arg1 = static_cast< TreesClass::trees >(val1);
  result = (TreesClass::trees)treesTest1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::treestd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::treestd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTest2 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest2" "', argument " "1"" of type '" "TreesClass::treestd1""'");
  } 
  arg1 = static_cast< TreesClass::treestd1 >(val1);
  result = (TreesClass::treestd1)treesTest2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::treestd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::treestd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTest3 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest3" "', argument " "1"" of type '" "TreesClass::treestd2""'");
  } 
  arg1 = static_cast< TreesClass::treestd2 >(val1);
  result = (TreesClass::treestd2)treesTest3(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::treestd3 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::treestd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTest4 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest4" "', argument " "1"" of type '" "TreesClass::treestd3""'");
  } 
  arg1 = static_cast< TreesClass::treestd3 >(val1);
  result = (TreesClass::treestd3)treesTest4(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::treestd4 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::treestd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTest5 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest5" "', argument " "1"" of type '" "TreesClass::treestd4""'");
  } 
  arg1 = static_cast< TreesClass::treestd4 >(val1);
  result = (TreesClass::treestd4)treesTest5(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::treestd5 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::treestd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTest6 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest6" "', argument " "1"" of type '" "TreesClass::treestd5""'");
  } 
  arg1 = static_cast< TreesClass::treestd5 >(val1);
  result = (TreesClass::treestd5)treesTest6(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTest7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::trees arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::trees result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTest7 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest7" "', argument " "1"" of type '" "TreesClass::trees""'");
  } 
  arg1 = static_cast< TreesClass::trees >(val1);
  result = (TreesClass::trees)treesTest7(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTest8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::treestd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::treestd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTest8 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest8" "', argument " "1"" of type '" "TreesClass::treestd1""'");
  } 
  arg1 = static_cast< TreesClass::treestd1 >(val1);
  result = (TreesClass::treestd1)treesTest8(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTest9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::treestd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::treestd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTest9 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest9" "', argument " "1"" of type '" "TreesClass::treestd2""'");
  } 
  arg1 = static_cast< TreesClass::treestd2 >(val1);
  result = (TreesClass::treestd2)treesTest9(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::treestd3 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::treestd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestA e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestA" "', argument " "1"" of type '" "TreesClass::treestd3""'");
  } 
  arg1 = static_cast< TreesClass::treestd3 >(val1);
  result = (TreesClass::treestd3)treesTestA(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::treestd4 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::treestd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestB e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestB" "', argument " "1"" of type '" "TreesClass::treestd4""'");
  } 
  arg1 = static_cast< TreesClass::treestd4 >(val1);
  result = (TreesClass::treestd4)treesTestB(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::treestd5 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::treestd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestC e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestC" "', argument " "1"" of type '" "TreesClass::treestd5""'");
  } 
  arg1 = static_cast< TreesClass::treestd5 >(val1);
  result = (TreesClass::treestd5)treesTestC(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestD(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  treesglobaltd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  treesglobaltd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestD e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestD" "', argument " "1"" of type '" "treesglobaltd1""'");
  } 
  arg1 = static_cast< treesglobaltd1 >(val1);
  result = (treesglobaltd1)treesTestD(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestE(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  treesglobaltd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  treesglobaltd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestE e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestE" "', argument " "1"" of type '" "treesglobaltd2""'");
  } 
  arg1 = static_cast< treesglobaltd2 >(val1);
  result = (treesglobaltd2)treesTestE(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestF(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  treesglobaltd3 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  treesglobaltd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestF e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestF" "', argument " "1"" of type '" "treesglobaltd3""'");
  } 
  arg1 = static_cast< treesglobaltd3 >(val1);
  result = (treesglobaltd3)treesTestF(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestG(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  treesglobaltd4 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  treesglobaltd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestG e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestG" "', argument " "1"" of type '" "treesglobaltd4""'");
  } 
  arg1 = static_cast< treesglobaltd4 >(val1);
  result = (treesglobaltd4)treesTestG(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestH(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  treesglobaltd5 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  treesglobaltd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestH e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestH" "', argument " "1"" of type '" "treesglobaltd5""'");
  } 
  arg1 = static_cast< treesglobaltd5 >(val1);
  result = (treesglobaltd5)treesTestH(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestI(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  treesglobaltd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  treesglobaltd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestI e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestI" "', argument " "1"" of type '" "treesglobaltd1""'");
  } 
  arg1 = static_cast< treesglobaltd1 >(val1);
  result = (treesglobaltd1)treesTestI(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestJ(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  treesglobaltd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  treesglobaltd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestJ e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestJ" "', argument " "1"" of type '" "treesglobaltd2""'");
  } 
  arg1 = static_cast< treesglobaltd2 >(val1);
  result = (treesglobaltd2)treesTestJ(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestK(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  treesglobaltd3 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  treesglobaltd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestK e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestK" "', argument " "1"" of type '" "treesglobaltd3""'");
  } 
  arg1 = static_cast< treesglobaltd3 >(val1);
  result = (treesglobaltd3)treesTestK(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestL(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  treesglobaltd4 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  treesglobaltd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestL e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestL" "', argument " "1"" of type '" "treesglobaltd4""'");
  } 
  arg1 = static_cast< treesglobaltd4 >(val1);
  result = (treesglobaltd4)treesTestL(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestM(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  treesglobaltd5 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  treesglobaltd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestM e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestM" "', argument " "1"" of type '" "treesglobaltd5""'");
  } 
  arg1 = static_cast< treesglobaltd5 >(val1);
  result = (treesglobaltd5)treesTestM(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestO(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::trees arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::trees result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestO e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestO" "', argument " "1"" of type '" "TreesClass::trees""'");
  } 
  arg1 = static_cast< TreesClass::trees >(val1);
  result = (TreesClass::trees)treesTestO(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestP(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::treestd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::treestd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestP e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestP" "', argument " "1"" of type '" "TreesClass::treestd1""'");
  } 
  arg1 = static_cast< TreesClass::treestd1 >(val1);
  result = (TreesClass::treestd1)treesTestP(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestQ(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TreesClass::treestd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  TreesClass::treestd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestQ e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestQ" "', argument " "1"" of type '" "TreesClass::treestd2""'");
  } 
  arg1 = static_cast< TreesClass::treestd2 >(val1);
  result = (TreesClass::treestd2)treesTestQ(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_treesTestR(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  treesglobaltd4 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  treesglobaltd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:treesTestR e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestR" "', argument " "1"" of type '" "treesglobaltd4""'");
  } 
  arg1 = static_cast< treesglobaltd4 >(val1);
  result = (treesglobaltd4)treesTestR(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_hairTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hair arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hair result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_hairTest1 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest1" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest1" "', argument " "2"" of type '" "curly::greasy::HairStruct::hair""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hair >(val2);
  result = (curly::greasy::HairStruct::hair)(arg1)->hairTest1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_hairTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_hairTest2 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest2" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest2" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd1""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd1 >(val2);
  result = (curly::greasy::HairStruct::hairtd1)(arg1)->hairTest2(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_hairTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_hairTest3 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest3" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest3" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd2""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd2 >(val2);
  result = (curly::greasy::HairStruct::hairtd2)(arg1)->hairTest3(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_hairTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_hairTest4 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest4" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest4" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd3""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd3 >(val2);
  result = (curly::greasy::HairStruct::hairtd3)(arg1)->hairTest4(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_hairTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd4 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_hairTest5 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest5" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest5" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd4""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd4 >(val2);
  result = (curly::greasy::HairStruct::hairtd4)(arg1)->hairTest5(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_hairTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd5 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_hairTest6 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest6" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest6" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd5""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd5 >(val2);
  result = (curly::greasy::HairStruct::hairtd5)(arg1)->hairTest6(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_hairTest7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd6 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd6 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_hairTest7 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest7" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest7" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd6""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd6 >(val2);
  result = (curly::greasy::HairStruct::hairtd6)(arg1)->hairTest7(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_hairTest8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd7 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd7 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_hairTest8 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest8" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest8" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd7""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd7 >(val2);
  result = (curly::greasy::HairStruct::hairtd7)(arg1)->hairTest8(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_hairTest9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd8 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd8 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_hairTest9 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest9" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest9" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd8""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd8 >(val2);
  result = (curly::greasy::HairStruct::hairtd8)(arg1)->hairTest9(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_hairTestA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd9 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd9 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_hairTestA self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTestA" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTestA" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd9""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd9 >(val2);
  result = (curly::greasy::HairStruct::hairtd9)(arg1)->hairTestA(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_hairTestB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtdA arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtdA result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_hairTestB self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTestB" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTestB" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtdA""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtdA >(val2);
  result = (curly::greasy::HairStruct::hairtdA)(arg1)->hairTestB(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_colourTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  ::colour arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  ::colour result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_colourTest1 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_colourTest1" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_colourTest1" "', argument " "2"" of type '" "::colour""'");
  } 
  arg2 = static_cast< ::colour >(val2);
  result = (::colour)(arg1)->colourTest1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_colourTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  enum colour arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  enum colour result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_colourTest2 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_colourTest2" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_colourTest2" "', argument " "2"" of type '" "enum colour""'");
  } 
  arg2 = static_cast< enum colour >(val2);
  result = (enum colour)(arg1)->colourTest2(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_namedanonTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  namedanon arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  namedanon result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_namedanonTest1 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_namedanonTest1" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_namedanonTest1" "', argument " "2"" of type '" "namedanon""'");
  } 
  arg2 = static_cast< namedanon >(val2);
  result = (namedanon)(arg1)->namedanonTest1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_namedanonspaceTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  AnonSpace::namedanonspace arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  AnonSpace::namedanonspace result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_namedanonspaceTest1 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_namedanonspaceTest1" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_namedanonspaceTest1" "', argument " "2"" of type '" "AnonSpace::namedanonspace""'");
  } 
  arg2 = static_cast< AnonSpace::namedanonspace >(val2);
  result = (AnonSpace::namedanonspace)(arg1)->namedanonspaceTest1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_treesGlobalTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  treesglobaltd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_treesGlobalTest1 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_treesGlobalTest1" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_treesGlobalTest1" "', argument " "2"" of type '" "treesglobaltd1""'");
  } 
  arg2 = static_cast< treesglobaltd1 >(val2);
  result = (treesglobaltd1)(arg1)->treesGlobalTest1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_treesGlobalTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  treesglobaltd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_treesGlobalTest2 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_treesGlobalTest2" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_treesGlobalTest2" "', argument " "2"" of type '" "treesglobaltd2""'");
  } 
  arg2 = static_cast< treesglobaltd2 >(val2);
  result = (treesglobaltd2)(arg1)->treesGlobalTest2(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_treesGlobalTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  treesglobaltd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_treesGlobalTest3 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_treesGlobalTest3" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_treesGlobalTest3" "', argument " "2"" of type '" "treesglobaltd3""'");
  } 
  arg2 = static_cast< treesglobaltd3 >(val2);
  result = (treesglobaltd3)(arg1)->treesGlobalTest3(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_treesGlobalTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd4 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  treesglobaltd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_treesGlobalTest4 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_treesGlobalTest4" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_treesGlobalTest4" "', argument " "2"" of type '" "treesglobaltd4""'");
  } 
  arg2 = static_cast< treesglobaltd4 >(val2);
  result = (treesglobaltd4)(arg1)->treesGlobalTest4(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_HairStruct_treesGlobalTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd5 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  treesglobaltd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:HairStruct_treesGlobalTest5 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_treesGlobalTest5" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_treesGlobalTest5" "', argument " "2"" of type '" "treesglobaltd5""'");
  } 
  arg2 = static_cast< treesglobaltd5 >(val2);
  result = (treesglobaltd5)(arg1)->treesGlobalTest5(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_HairStruct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_HairStruct ") == TCL_ERROR) SWIG_fail;
  result = (curly::greasy::HairStruct *)new curly::greasy::HairStruct();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_curly__greasy__HairStruct,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_HairStruct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_HairStruct self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__HairStruct, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HairStruct" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_HairStruct(void *obj) {
curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) obj;
delete arg1;
}
static swig_method swig_curly_greasy_HairStruct_methods[] = {
    {"hairTest1", _wrap_HairStruct_hairTest1}, 
    {"hairTest2", _wrap_HairStruct_hairTest2}, 
    {"hairTest3", _wrap_HairStruct_hairTest3}, 
    {"hairTest4", _wrap_HairStruct_hairTest4}, 
    {"hairTest5", _wrap_HairStruct_hairTest5}, 
    {"hairTest6", _wrap_HairStruct_hairTest6}, 
    {"hairTest7", _wrap_HairStruct_hairTest7}, 
    {"hairTest8", _wrap_HairStruct_hairTest8}, 
    {"hairTest9", _wrap_HairStruct_hairTest9}, 
    {"hairTestA", _wrap_HairStruct_hairTestA}, 
    {"hairTestB", _wrap_HairStruct_hairTestB}, 
    {"colourTest1", _wrap_HairStruct_colourTest1}, 
    {"colourTest2", _wrap_HairStruct_colourTest2}, 
    {"namedanonTest1", _wrap_HairStruct_namedanonTest1}, 
    {"namedanonspaceTest1", _wrap_HairStruct_namedanonspaceTest1}, 
    {"treesGlobalTest1", _wrap_HairStruct_treesGlobalTest1}, 
    {"treesGlobalTest2", _wrap_HairStruct_treesGlobalTest2}, 
    {"treesGlobalTest3", _wrap_HairStruct_treesGlobalTest3}, 
    {"treesGlobalTest4", _wrap_HairStruct_treesGlobalTest4}, 
    {"treesGlobalTest5", _wrap_HairStruct_treesGlobalTest5}, 
    {0,0}
};
static swig_attribute swig_curly_greasy_HairStruct_attributes[] = {
    {0,0,0}
};
static swig_class *swig_curly_greasy_HairStruct_bases[] = {0};
static const char * swig_curly_greasy_HairStruct_base_names[] = {0};
static swig_class _wrap_class_curly_greasy_HairStruct = { "HairStruct", &SWIGTYPE_p_curly__greasy__HairStruct,_wrap_new_HairStruct, swig_delete_HairStruct, swig_curly_greasy_HairStruct_methods, swig_curly_greasy_HairStruct_attributes, swig_curly_greasy_HairStruct_bases,swig_curly_greasy_HairStruct_base_names, &swig_module };
SWIGINTERN int
_wrap_hairTest1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hair arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hair result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTest1 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest1" "', argument " "1"" of type '" "curly::greasy::HairStruct::hair""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hair >(val1);
  result = (curly::greasy::HairStruct::hair)curly::greasy::hairTest1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTest2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTest2 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest2" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd1""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd1 >(val1);
  result = (curly::greasy::HairStruct::hairtd1)curly::greasy::hairTest2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTest3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTest3 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest3" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd2""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd2 >(val1);
  result = (curly::greasy::HairStruct::hairtd2)curly::greasy::hairTest3(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTest4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd3 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTest4 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest4" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd3""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd3 >(val1);
  result = (curly::greasy::HairStruct::hairtd3)curly::greasy::hairTest4(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTest5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd4 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTest5 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest5" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd4""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd4 >(val1);
  result = (curly::greasy::HairStruct::hairtd4)curly::greasy::hairTest5(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTest6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd5 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTest6 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest6" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd5""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd5 >(val1);
  result = (curly::greasy::HairStruct::hairtd5)curly::greasy::hairTest6(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTest7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd6 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd6 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTest7 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest7" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd6""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd6 >(val1);
  result = (curly::greasy::HairStruct::hairtd6)curly::greasy::hairTest7(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTest8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd7 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd7 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTest8 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest8" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd7""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd7 >(val1);
  result = (curly::greasy::HairStruct::hairtd7)curly::greasy::hairTest8(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTest9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd8 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd8 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTest9 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest9" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd8""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd8 >(val1);
  result = (curly::greasy::HairStruct::hairtd8)curly::greasy::hairTest9(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd9 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd9 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestA e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd9""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd9 >(val1);
  result = (curly::greasy::HairStruct::hairtd9)curly::greasy::hairTestA(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtdA arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtdA result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestB e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtdA""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtdA >(val1);
  result = (curly::greasy::HairStruct::hairtdA)curly::greasy::hairTestB(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hair *arg1 = 0 ;
  int val1 ;
  int ecode1 ;
  curly::greasy::HairStruct::hair temp1 ;
  curly::greasy::HairStruct::hair *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestC e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC" "', argument " "1"" of type '" "curly::greasy::HairStruct::hair const &""'");
  } else {
    temp1 = static_cast< curly::greasy::HairStruct::hair >(val1);
    arg1 = &temp1;
  }
  result = (curly::greasy::HairStruct::hair *) &curly::greasy::hairTestC((enum curly::greasy::HairStruct::hair const &)*arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestA1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hair arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hair result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestA1 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA1" "', argument " "1"" of type '" "curly::greasy::HairStruct::hair""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hair >(val1);
  result = (curly::greasy::HairStruct::hair)curly::hairTestA1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestA2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestA2 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA2" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd1""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd1 >(val1);
  result = (curly::greasy::HairStruct::hairtd1)curly::hairTestA2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestA3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestA3 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA3" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd2""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd2 >(val1);
  result = (curly::greasy::HairStruct::hairtd2)curly::hairTestA3(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestA4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd3 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestA4 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA4" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd3""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd3 >(val1);
  result = (curly::greasy::HairStruct::hairtd3)curly::hairTestA4(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestA5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd4 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestA5 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA5" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd4""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd4 >(val1);
  result = (curly::greasy::HairStruct::hairtd4)curly::hairTestA5(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestA6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd5 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestA6 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA6" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd5""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd5 >(val1);
  result = (curly::greasy::HairStruct::hairtd5)curly::hairTestA6(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestA7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd6 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd6 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestA7 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA7" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd6""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd6 >(val1);
  result = (curly::greasy::HairStruct::hairtd6)curly::hairTestA7(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestA8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd7 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd7 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestA8 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA8" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd7""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd7 >(val1);
  result = (curly::greasy::HairStruct::hairtd7)curly::hairTestA8(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestA9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd8 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd8 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestA9 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA9" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd8""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd8 >(val1);
  result = (curly::greasy::HairStruct::hairtd8)curly::hairTestA9(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestAA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd9 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd9 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestAA e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestAA" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd9""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd9 >(val1);
  result = (curly::greasy::HairStruct::hairtd9)curly::hairTestAA(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestAB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtdA arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtdA result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestAB e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestAB" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtdA""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtdA >(val1);
  result = (curly::greasy::HairStruct::hairtdA)curly::hairTestAB(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestAC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtdA *arg1 = 0 ;
  int val1 ;
  int ecode1 ;
  curly::greasy::HairStruct::hairtdA temp1 ;
  curly::greasy::HairStruct::hairtdA *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestAC e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestAC" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtdA const &""'");
  } else {
    temp1 = static_cast< curly::greasy::HairStruct::hairtdA >(val1);
    arg1 = &temp1;
  }
  result = (curly::greasy::HairStruct::hairtdA *) &curly::hairTestAC((enum curly::greasy::HairStruct::hair const &)*arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestB1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hair arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hair result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestB1 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB1" "', argument " "1"" of type '" "curly::greasy::HairStruct::hair""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hair >(val1);
  result = (curly::greasy::HairStruct::hair)hairTestB1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestB2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestB2 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB2" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd1""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd1 >(val1);
  result = (curly::greasy::HairStruct::hairtd1)hairTestB2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestB3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestB3 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB3" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd2""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd2 >(val1);
  result = (curly::greasy::HairStruct::hairtd2)hairTestB3(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestB4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd3 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestB4 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB4" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd3""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd3 >(val1);
  result = (curly::greasy::HairStruct::hairtd3)hairTestB4(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestB5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd4 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestB5 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB5" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd4""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd4 >(val1);
  result = (curly::greasy::HairStruct::hairtd4)hairTestB5(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestB6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd5 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestB6 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB6" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd5""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd5 >(val1);
  result = (curly::greasy::HairStruct::hairtd5)hairTestB6(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestB7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd6 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd6 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestB7 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB7" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd6""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd6 >(val1);
  result = (curly::greasy::HairStruct::hairtd6)hairTestB7(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestB8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd7 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd7 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestB8 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB8" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd7""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd7 >(val1);
  result = (curly::greasy::HairStruct::hairtd7)hairTestB8(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestB9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd8 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd8 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestB9 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB9" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd8""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd8 >(val1);
  result = (curly::greasy::HairStruct::hairtd8)hairTestB9(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestBA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtd9 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtd9 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestBA e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestBA" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd9""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtd9 >(val1);
  result = (curly::greasy::HairStruct::hairtd9)hairTestBA(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestBB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtdA arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  curly::greasy::HairStruct::hairtdA result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestBB e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestBB" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtdA""'");
  } 
  arg1 = static_cast< curly::greasy::HairStruct::hairtdA >(val1);
  result = (curly::greasy::HairStruct::hairtdA)hairTestBB(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestBC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::HairStruct::hairtdA *arg1 = 0 ;
  int val1 ;
  int ecode1 ;
  curly::greasy::HairStruct::hairtdA temp1 ;
  curly::greasy::HairStruct::hairtdA *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestBC e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestBC" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtdA const &""'");
  } else {
    temp1 = static_cast< curly::greasy::HairStruct::hairtdA >(val1);
    arg1 = &temp1;
  }
  result = (curly::greasy::HairStruct::hairtdA *) &hairTestBC((enum curly::greasy::HairStruct::hair const &)*arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestC1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HairStruct::hair arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  HairStruct::hair result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestC1 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC1" "', argument " "1"" of type '" "HairStruct::hair""'");
  } 
  arg1 = static_cast< HairStruct::hair >(val1);
  result = (HairStruct::hair)hairTestC1(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestC2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HairStruct::hairtd1 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  HairStruct::hairtd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestC2 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC2" "', argument " "1"" of type '" "HairStruct::hairtd1""'");
  } 
  arg1 = static_cast< HairStruct::hairtd1 >(val1);
  result = (HairStruct::hairtd1)hairTestC2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestC3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HairStruct::hairtd2 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  HairStruct::hairtd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestC3 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC3" "', argument " "1"" of type '" "HairStruct::hairtd2""'");
  } 
  arg1 = static_cast< HairStruct::hairtd2 >(val1);
  result = (HairStruct::hairtd2)hairTestC3(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestC4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HairStruct::hairtd3 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  HairStruct::hairtd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestC4 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC4" "', argument " "1"" of type '" "HairStruct::hairtd3""'");
  } 
  arg1 = static_cast< HairStruct::hairtd3 >(val1);
  result = (HairStruct::hairtd3)hairTestC4(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestC5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HairStruct::hairtd4 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  HairStruct::hairtd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestC5 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC5" "', argument " "1"" of type '" "HairStruct::hairtd4""'");
  } 
  arg1 = static_cast< HairStruct::hairtd4 >(val1);
  result = (HairStruct::hairtd4)hairTestC5(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestC6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HairStruct::hairtd5 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  HairStruct::hairtd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestC6 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC6" "', argument " "1"" of type '" "HairStruct::hairtd5""'");
  } 
  arg1 = static_cast< HairStruct::hairtd5 >(val1);
  result = (HairStruct::hairtd5)hairTestC6(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestC7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HairStruct::hairtd6 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  HairStruct::hairtd6 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestC7 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC7" "', argument " "1"" of type '" "HairStruct::hairtd6""'");
  } 
  arg1 = static_cast< HairStruct::hairtd6 >(val1);
  result = (HairStruct::hairtd6)hairTestC7(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestC8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HairStruct::hairtd7 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  HairStruct::hairtd7 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestC8 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC8" "', argument " "1"" of type '" "HairStruct::hairtd7""'");
  } 
  arg1 = static_cast< HairStruct::hairtd7 >(val1);
  result = (HairStruct::hairtd7)hairTestC8(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestC9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HairStruct::hairtd8 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  HairStruct::hairtd8 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestC9 e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC9" "', argument " "1"" of type '" "HairStruct::hairtd8""'");
  } 
  arg1 = static_cast< HairStruct::hairtd8 >(val1);
  result = (HairStruct::hairtd8)hairTestC9(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestCA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HairStruct::hairtd9 arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  HairStruct::hairtd9 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestCA e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestCA" "', argument " "1"" of type '" "HairStruct::hairtd9""'");
  } 
  arg1 = static_cast< HairStruct::hairtd9 >(val1);
  result = (HairStruct::hairtd9)hairTestCA(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestCB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HairStruct::hairtdA arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  HairStruct::hairtdA result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestCB e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestCB" "', argument " "1"" of type '" "HairStruct::hairtdA""'");
  } 
  arg1 = static_cast< HairStruct::hairtdA >(val1);
  result = (HairStruct::hairtdA)hairTestCB(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hairTestCC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  HairStruct::hairtdA *arg1 = 0 ;
  int val1 ;
  int ecode1 ;
  HairStruct::hairtdA temp1 ;
  HairStruct::hairtdA *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hairTestCC e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestCC" "', argument " "1"" of type '" "HairStruct::hairtdA const &""'");
  } else {
    temp1 = static_cast< HairStruct::hairtdA >(val1);
    arg1 = &temp1;
  }
  result = (HairStruct::hairtdA *) &hairTestCC((enum curly::greasy::HairStruct::hair const &)*arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FirStruct_hairTestFir1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hair arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hair result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:FirStruct_hairTestFir1 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir1" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir1" "', argument " "2"" of type '" "curly::greasy::HairStruct::hair""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hair >(val2);
  result = (curly::greasy::HairStruct::hair)(arg1)->hairTestFir1(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FirStruct_hairTestFir2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd1 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:FirStruct_hairTestFir2 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir2" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir2" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd1""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd1 >(val2);
  result = (curly::greasy::HairStruct::hairtd1)(arg1)->hairTestFir2(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FirStruct_hairTestFir3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd2 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:FirStruct_hairTestFir3 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir3" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir3" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd2""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd2 >(val2);
  result = (curly::greasy::HairStruct::hairtd2)(arg1)->hairTestFir3(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FirStruct_hairTestFir4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd3 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd3 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:FirStruct_hairTestFir4 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir4" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir4" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd3""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd3 >(val2);
  result = (curly::greasy::HairStruct::hairtd3)(arg1)->hairTestFir4(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FirStruct_hairTestFir5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd4 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd4 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:FirStruct_hairTestFir5 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir5" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir5" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd4""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd4 >(val2);
  result = (curly::greasy::HairStruct::hairtd4)(arg1)->hairTestFir5(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FirStruct_hairTestFir6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd5 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd5 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:FirStruct_hairTestFir6 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir6" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir6" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd5""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd5 >(val2);
  result = (curly::greasy::HairStruct::hairtd5)(arg1)->hairTestFir6(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FirStruct_hairTestFir7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd6 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd6 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:FirStruct_hairTestFir7 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir7" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir7" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd6""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd6 >(val2);
  result = (curly::greasy::HairStruct::hairtd6)(arg1)->hairTestFir7(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FirStruct_hairTestFir8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd7 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd7 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:FirStruct_hairTestFir8 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir8" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir8" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd7""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd7 >(val2);
  result = (curly::greasy::HairStruct::hairtd7)(arg1)->hairTestFir8(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FirStruct_hairTestFir9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd8 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd8 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:FirStruct_hairTestFir9 self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir9" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir9" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd8""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd8 >(val2);
  result = (curly::greasy::HairStruct::hairtd8)(arg1)->hairTestFir9(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FirStruct_hairTestFirA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd9 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtd9 result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:FirStruct_hairTestFirA self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFirA" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFirA" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd9""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtd9 >(val2);
  result = (curly::greasy::HairStruct::hairtd9)(arg1)->hairTestFirA(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FirStruct_hairTestFirB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtdA arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  curly::greasy::HairStruct::hairtdA result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:FirStruct_hairTestFirB self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFirB" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFirB" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtdA""'");
  } 
  arg2 = static_cast< curly::greasy::HairStruct::hairtdA >(val2);
  result = (curly::greasy::HairStruct::hairtdA)(arg1)->hairTestFirB(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_FirStruct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::FirStruct *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_FirStruct ") == TCL_ERROR) SWIG_fail;
  result = (curly::greasy::FirStruct *)new curly::greasy::FirStruct();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_curly__greasy__FirStruct,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_FirStruct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_FirStruct self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_curly__greasy__FirStruct, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FirStruct" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
  }
  arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_FirStruct(void *obj) {
curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) obj;
delete arg1;
}
static swig_method swig_curly_greasy_FirStruct_methods[] = {
    {"hairTestFir1", _wrap_FirStruct_hairTestFir1}, 
    {"hairTestFir2", _wrap_FirStruct_hairTestFir2}, 
    {"hairTestFir3", _wrap_FirStruct_hairTestFir3}, 
    {"hairTestFir4", _wrap_FirStruct_hairTestFir4}, 
    {"hairTestFir5", _wrap_FirStruct_hairTestFir5}, 
    {"hairTestFir6", _wrap_FirStruct_hairTestFir6}, 
    {"hairTestFir7", _wrap_FirStruct_hairTestFir7}, 
    {"hairTestFir8", _wrap_FirStruct_hairTestFir8}, 
    {"hairTestFir9", _wrap_FirStruct_hairTestFir9}, 
    {"hairTestFirA", _wrap_FirStruct_hairTestFirA}, 
    {"hairTestFirB", _wrap_FirStruct_hairTestFirB}, 
    {0,0}
};
static swig_attribute swig_curly_greasy_FirStruct_attributes[] = {
    {0,0,0}
};
static swig_class *swig_curly_greasy_FirStruct_bases[] = {0,0};
static const char * swig_curly_greasy_FirStruct_base_names[] = {"curly::greasy::HairStruct *",0};
static swig_class _wrap_class_curly_greasy_FirStruct = { "FirStruct", &SWIGTYPE_p_curly__greasy__FirStruct,_wrap_new_FirStruct, swig_delete_FirStruct, swig_curly_greasy_FirStruct_methods, swig_curly_greasy_FirStruct_attributes, swig_curly_greasy_FirStruct_bases,swig_curly_greasy_FirStruct_base_names, &swig_module };
SWIGINTERN int
_wrap_new_Obscure(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Obscure *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Obscure ") == TCL_ERROR) SWIG_fail;
  result = (Obscure *)new Obscure();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Obscure,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Obscure(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Obscure *arg1 = (Obscure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Obscure self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Obscure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Obscure" "', argument " "1"" of type '" "Obscure *""'"); 
  }
  arg1 = reinterpret_cast< Obscure * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Obscure(void *obj) {
Obscure *arg1 = (Obscure *) obj;
delete arg1;
}
static swig_method swig_Obscure_methods[] = {
    {0,0}
};
static swig_attribute swig_Obscure_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Obscure_bases[] = {0};
static const char * swig_Obscure_base_names[] = {0};
static swig_class _wrap_class_Obscure = { "Obscure", &SWIGTYPE_p_Obscure,_wrap_new_Obscure, swig_delete_Obscure, swig_Obscure_methods, swig_Obscure_attributes, swig_Obscure_bases,swig_Obscure_base_names, &swig_module };
SWIGINTERN const char *_wrap_GlobalInstance_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(GlobalInstance));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_GlobalInstance_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  if (sizeof(int) != sizeof(GlobalInstance)) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""arch, read-only GlobalInstance""' of type '""enum $unnamed5$""'");
  }  else {
    int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(value, reinterpret_cast< int* >(&GlobalInstance));
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in variable '""GlobalInstance""' of type '""enum $unnamed5$""'");
    }
  }
  return NULL;
fail:
  return "GlobalInstance";
}


SWIGINTERN int
_wrap_Instances_MemberInstance_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Instances *arg1 = (Instances *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Instances_MemberInstance_set self MemberInstance ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Instances, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instances_MemberInstance_set" "', argument " "1"" of type '" "Instances *""'"); 
  }
  arg1 = reinterpret_cast< Instances * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instances_MemberInstance_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1 && sizeof(int) == sizeof((arg1)->MemberInstance)) *(int*)(void*)&((arg1)->MemberInstance) = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Instances_MemberInstance_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Instances *arg1 = (Instances *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Instances_MemberInstance_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Instances, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instances_MemberInstance_get" "', argument " "1"" of type '" "Instances *""'"); 
  }
  arg1 = reinterpret_cast< Instances * >(argp1);
  result = (int) ((arg1)->MemberInstance);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Instances(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Instances *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Instances ") == TCL_ERROR) SWIG_fail;
  result = (Instances *)new Instances();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Instances,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Instances(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Instances *arg1 = (Instances *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Instances self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Instances, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Instances" "', argument " "1"" of type '" "Instances *""'"); 
  }
  arg1 = reinterpret_cast< Instances * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Instances(void *obj) {
Instances *arg1 = (Instances *) obj;
delete arg1;
}
static swig_method swig_Instances_methods[] = {
    {0,0}
};
static swig_attribute swig_Instances_attributes[] = {
    { "-MemberInstance",_wrap_Instances_MemberInstance_get, _wrap_Instances_MemberInstance_set},
    {0,0,0}
};
static swig_class *swig_Instances_bases[] = {0};
static const char * swig_Instances_base_names[] = {0};
static swig_class _wrap_class_Instances = { "Instances", &SWIGTYPE_p_Instances,_wrap_new_Instances, swig_delete_Instances, swig_Instances_methods, swig_Instances_attributes, swig_Instances_bases,swig_Instances_base_names, &swig_module };
SWIGINTERN int
_wrap_new_IgnoreTest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  IgnoreTest *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_IgnoreTest ") == TCL_ERROR) SWIG_fail;
  result = (IgnoreTest *)new IgnoreTest();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_IgnoreTest,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_IgnoreTest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  IgnoreTest *arg1 = (IgnoreTest *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_IgnoreTest self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_IgnoreTest, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IgnoreTest" "', argument " "1"" of type '" "IgnoreTest *""'"); 
  }
  arg1 = reinterpret_cast< IgnoreTest * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_IgnoreTest(void *obj) {
IgnoreTest *arg1 = (IgnoreTest *) obj;
delete arg1;
}
static swig_method swig_IgnoreTest_methods[] = {
    {0,0}
};
static swig_attribute swig_IgnoreTest_attributes[] = {
    {0,0,0}
};
static swig_class *swig_IgnoreTest_bases[] = {0};
static const char * swig_IgnoreTest_base_names[] = {0};
static swig_class _wrap_class_IgnoreTest = { "IgnoreTest", &SWIGTYPE_p_IgnoreTest,_wrap_new_IgnoreTest, swig_delete_IgnoreTest, swig_IgnoreTest_methods, swig_IgnoreTest_attributes, swig_IgnoreTest_bases,swig_IgnoreTest_base_names, &swig_module };
SWIGINTERN int
_wrap_ignoreATest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  IgnoreTest::IgnoreA arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  IgnoreTest::IgnoreA result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ignoreATest n ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ignoreATest" "', argument " "1"" of type '" "IgnoreTest::IgnoreA""'");
  } 
  arg1 = static_cast< IgnoreTest::IgnoreA >(val1);
  result = (IgnoreTest::IgnoreA)ignoreATest(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ignoreBTest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  IgnoreTest::IgnoreB arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  IgnoreTest::IgnoreB result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ignoreBTest n ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ignoreBTest" "', argument " "1"" of type '" "IgnoreTest::IgnoreB""'");
  } 
  arg1 = static_cast< IgnoreTest::IgnoreB >(val1);
  result = (IgnoreTest::IgnoreB)ignoreBTest(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ignoreCTest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  IgnoreTest::IgnoreC arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  IgnoreTest::IgnoreC result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ignoreCTest n ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ignoreCTest" "', argument " "1"" of type '" "IgnoreTest::IgnoreC""'");
  } 
  arg1 = static_cast< IgnoreTest::IgnoreC >(val1);
  result = (IgnoreTest::IgnoreC)ignoreCTest(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ignoreDTest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  IgnoreTest::IgnoreD arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  IgnoreTest::IgnoreD result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ignoreDTest n ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ignoreDTest" "', argument " "1"" of type '" "IgnoreTest::IgnoreD""'");
  } 
  arg1 = static_cast< IgnoreTest::IgnoreD >(val1);
  result = (IgnoreTest::IgnoreD)ignoreDTest(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ignoreETest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  IgnoreTest::IgnoreE arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  IgnoreTest::IgnoreE result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ignoreETest n ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ignoreETest" "', argument " "1"" of type '" "IgnoreTest::IgnoreE""'");
  } 
  arg1 = static_cast< IgnoreTest::IgnoreE >(val1);
  result = (IgnoreTest::IgnoreE)ignoreETest(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_repeatTest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  RepeatSpace::repeat arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  RepeatSpace::repeat result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:repeatTest e ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "repeatTest" "', argument " "1"" of type '" "RepeatSpace::repeat""'");
  } 
  arg1 = static_cast< RepeatSpace::repeat >(val1);
  result = (RepeatSpace::repeat)RepeatSpace::repeatTest(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_differentTypesTest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DifferentSpace::DifferentTypes arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  DifferentSpace::DifferentTypes result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:differentTypesTest n ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "differentTypesTest" "', argument " "1"" of type '" "DifferentSpace::DifferentTypes""'");
  } 
  arg1 = static_cast< DifferentSpace::DifferentTypes >(val1);
  result = (DifferentSpace::DifferentTypes)DifferentSpace::differentTypesTest(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_globalDifferentTypesTest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:globalDifferentTypesTest n ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "globalDifferentTypesTest" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (int)DifferentSpace::globalDifferentTypesTest(arg1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}



static swig_command_info swig_commands[] = {
    { SWIG_prefix "new_AnonStruct", (swig_wrapper_func) _wrap_new_AnonStruct, NULL},
    { SWIG_prefix "delete_AnonStruct", (swig_wrapper_func) _wrap_delete_AnonStruct, NULL},
    { SWIG_prefix "AnonStruct", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_AnonSpace_AnonStruct},
    { SWIG_prefix "colourTest1", (swig_wrapper_func) _wrap_colourTest1, NULL},
    { SWIG_prefix "colourTest2", (swig_wrapper_func) _wrap_colourTest2, NULL},
    { SWIG_prefix "colourTest3", (swig_wrapper_func) _wrap_colourTest3, NULL},
    { SWIG_prefix "colourTest4", (swig_wrapper_func) _wrap_colourTest4, NULL},
    { SWIG_prefix "SpeedClass_speedTest0", (swig_wrapper_func) _wrap_SpeedClass_speedTest0, NULL},
    { SWIG_prefix "SpeedClass_speedTest1", (swig_wrapper_func) _wrap_SpeedClass_speedTest1, NULL},
    { SWIG_prefix "SpeedClass_speedTest2", (swig_wrapper_func) _wrap_SpeedClass_speedTest2, NULL},
    { SWIG_prefix "SpeedClass_speedTest3", (swig_wrapper_func) _wrap_SpeedClass_speedTest3, NULL},
    { SWIG_prefix "SpeedClass_speedTest4", (swig_wrapper_func) _wrap_SpeedClass_speedTest4, NULL},
    { SWIG_prefix "SpeedClass_speedTest5", (swig_wrapper_func) _wrap_SpeedClass_speedTest5, NULL},
    { SWIG_prefix "SpeedClass_speedTest6", (swig_wrapper_func) _wrap_SpeedClass_speedTest6, NULL},
    { SWIG_prefix "SpeedClass_speedTest7", (swig_wrapper_func) _wrap_SpeedClass_speedTest7, NULL},
    { SWIG_prefix "SpeedClass_speedTest8", (swig_wrapper_func) _wrap_SpeedClass_speedTest8, NULL},
    { SWIG_prefix "SpeedClass_myColour2_get", (swig_wrapper_func) _wrap_SpeedClass_myColour2_get, NULL},
    { SWIG_prefix "SpeedClass_mySpeedtd1_set", (swig_wrapper_func) _wrap_SpeedClass_mySpeedtd1_set, NULL},
    { SWIG_prefix "SpeedClass_mySpeedtd1_get", (swig_wrapper_func) _wrap_SpeedClass_mySpeedtd1_get, NULL},
    { SWIG_prefix "new_SpeedClass", (swig_wrapper_func) _wrap_new_SpeedClass, NULL},
    { SWIG_prefix "delete_SpeedClass", (swig_wrapper_func) _wrap_delete_SpeedClass, NULL},
    { SWIG_prefix "SpeedClass", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SpeedClass},
    { SWIG_prefix "speedTest0", (swig_wrapper_func) _wrap_speedTest0, NULL},
    { SWIG_prefix "speedTest1", (swig_wrapper_func) _wrap_speedTest1, NULL},
    { SWIG_prefix "speedTest2", (swig_wrapper_func) _wrap_speedTest2, NULL},
    { SWIG_prefix "speedTest3", (swig_wrapper_func) _wrap_speedTest3, NULL},
    { SWIG_prefix "speedTest4", (swig_wrapper_func) _wrap_speedTest4, NULL},
    { SWIG_prefix "speedTest5", (swig_wrapper_func) _wrap_speedTest5, NULL},
    { SWIG_prefix "namedanonTest1", (swig_wrapper_func) _wrap_namedanonTest1, NULL},
    { SWIG_prefix "twonamesTest1", (swig_wrapper_func) _wrap_twonamesTest1, NULL},
    { SWIG_prefix "twonamesTest2", (swig_wrapper_func) _wrap_twonamesTest2, NULL},
    { SWIG_prefix "twonamesTest3", (swig_wrapper_func) _wrap_twonamesTest3, NULL},
    { SWIG_prefix "TwoNamesStruct_twonamesTest1", (swig_wrapper_func) _wrap_TwoNamesStruct_twonamesTest1, NULL},
    { SWIG_prefix "TwoNamesStruct_twonamesTest2", (swig_wrapper_func) _wrap_TwoNamesStruct_twonamesTest2, NULL},
    { SWIG_prefix "TwoNamesStruct_twonamesTest3", (swig_wrapper_func) _wrap_TwoNamesStruct_twonamesTest3, NULL},
    { SWIG_prefix "new_TwoNamesStruct", (swig_wrapper_func) _wrap_new_TwoNamesStruct, NULL},
    { SWIG_prefix "delete_TwoNamesStruct", (swig_wrapper_func) _wrap_delete_TwoNamesStruct, NULL},
    { SWIG_prefix "TwoNamesStruct", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_TwoNamesStruct},
    { SWIG_prefix "namedanonspaceTest1", (swig_wrapper_func) _wrap_namedanonspaceTest1, NULL},
    { SWIG_prefix "namedanonspaceTest2", (swig_wrapper_func) _wrap_namedanonspaceTest2, NULL},
    { SWIG_prefix "namedanonspaceTest3", (swig_wrapper_func) _wrap_namedanonspaceTest3, NULL},
    { SWIG_prefix "namedanonspaceTest4", (swig_wrapper_func) _wrap_namedanonspaceTest4, NULL},
    { SWIG_prefix "scientistsTest1", (swig_wrapper_func) _wrap_scientistsTest1, NULL},
    { SWIG_prefix "scientistsTest2", (swig_wrapper_func) _wrap_scientistsTest2, NULL},
    { SWIG_prefix "scientistsTest3", (swig_wrapper_func) _wrap_scientistsTest3, NULL},
    { SWIG_prefix "scientistsTest4", (swig_wrapper_func) _wrap_scientistsTest4, NULL},
    { SWIG_prefix "scientistsTest5", (swig_wrapper_func) _wrap_scientistsTest5, NULL},
    { SWIG_prefix "scientistsTest6", (swig_wrapper_func) _wrap_scientistsTest6, NULL},
    { SWIG_prefix "scientistsTest7", (swig_wrapper_func) _wrap_scientistsTest7, NULL},
    { SWIG_prefix "scientistsTest8", (swig_wrapper_func) _wrap_scientistsTest8, NULL},
    { SWIG_prefix "scientistsNameTest1", (swig_wrapper_func) _wrap_scientistsNameTest1, NULL},
    { SWIG_prefix "scientistsNameTest2", (swig_wrapper_func) _wrap_scientistsNameTest2, NULL},
    { SWIG_prefix "scientistsNameTest3", (swig_wrapper_func) _wrap_scientistsNameTest3, NULL},
    { SWIG_prefix "scientistsNameTest4", (swig_wrapper_func) _wrap_scientistsNameTest4, NULL},
    { SWIG_prefix "scientistsNameTest5", (swig_wrapper_func) _wrap_scientistsNameTest5, NULL},
    { SWIG_prefix "scientistsNameTest6", (swig_wrapper_func) _wrap_scientistsNameTest6, NULL},
    { SWIG_prefix "scientistsNameTest7", (swig_wrapper_func) _wrap_scientistsNameTest7, NULL},
    { SWIG_prefix "scientistsNameSpaceTest1", (swig_wrapper_func) _wrap_scientistsNameSpaceTest1, NULL},
    { SWIG_prefix "scientistsNameSpaceTest2", (swig_wrapper_func) _wrap_scientistsNameSpaceTest2, NULL},
    { SWIG_prefix "scientistsNameSpaceTest3", (swig_wrapper_func) _wrap_scientistsNameSpaceTest3, NULL},
    { SWIG_prefix "scientistsNameSpaceTest4", (swig_wrapper_func) _wrap_scientistsNameSpaceTest4, NULL},
    { SWIG_prefix "scientistsNameSpaceTest5", (swig_wrapper_func) _wrap_scientistsNameSpaceTest5, NULL},
    { SWIG_prefix "scientistsNameSpaceTest6", (swig_wrapper_func) _wrap_scientistsNameSpaceTest6, NULL},
    { SWIG_prefix "scientistsNameSpaceTest7", (swig_wrapper_func) _wrap_scientistsNameSpaceTest7, NULL},
    { SWIG_prefix "scientistsNameSpaceTest8", (swig_wrapper_func) _wrap_scientistsNameSpaceTest8, NULL},
    { SWIG_prefix "scientistsNameSpaceTest9", (swig_wrapper_func) _wrap_scientistsNameSpaceTest9, NULL},
    { SWIG_prefix "scientistsNameSpaceTestA", (swig_wrapper_func) _wrap_scientistsNameSpaceTestA, NULL},
    { SWIG_prefix "scientistsNameSpaceTestB", (swig_wrapper_func) _wrap_scientistsNameSpaceTestB, NULL},
    { SWIG_prefix "scientistsNameSpaceTestC", (swig_wrapper_func) _wrap_scientistsNameSpaceTestC, NULL},
    { SWIG_prefix "scientistsNameSpaceTestD", (swig_wrapper_func) _wrap_scientistsNameSpaceTestD, NULL},
    { SWIG_prefix "scientistsNameSpaceTestE", (swig_wrapper_func) _wrap_scientistsNameSpaceTestE, NULL},
    { SWIG_prefix "scientistsNameSpaceTestF", (swig_wrapper_func) _wrap_scientistsNameSpaceTestF, NULL},
    { SWIG_prefix "scientistsNameSpaceTestG", (swig_wrapper_func) _wrap_scientistsNameSpaceTestG, NULL},
    { SWIG_prefix "scientistsNameSpaceTestH", (swig_wrapper_func) _wrap_scientistsNameSpaceTestH, NULL},
    { SWIG_prefix "scientistsNameSpaceTestI", (swig_wrapper_func) _wrap_scientistsNameSpaceTestI, NULL},
    { SWIG_prefix "scientistsNameSpaceTestJ", (swig_wrapper_func) _wrap_scientistsNameSpaceTestJ, NULL},
    { SWIG_prefix "scientistsNameSpaceTestK", (swig_wrapper_func) _wrap_scientistsNameSpaceTestK, NULL},
    { SWIG_prefix "scientistsNameSpaceTestL", (swig_wrapper_func) _wrap_scientistsNameSpaceTestL, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTest1", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTest1, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTest2", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTest2, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTest3", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTest3, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTest4", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTest4, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTest5", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTest5, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTest6", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTest6, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTest7", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTest7, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTest8", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTest8, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTest9", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTest9, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTestB", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTestB, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTestD", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTestD, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTestE", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTestE, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTestF", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTestF, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTestG", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTestG, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTestH", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTestH, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTestI", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTestI, NULL},
    { SWIG_prefix "TemplateClassInt_scientistsTestJ", (swig_wrapper_func) _wrap_TemplateClassInt_scientistsTestJ, NULL},
    { SWIG_prefix "new_TemplateClassInt", (swig_wrapper_func) _wrap_new_TemplateClassInt, NULL},
    { SWIG_prefix "delete_TemplateClassInt", (swig_wrapper_func) _wrap_delete_TemplateClassInt, NULL},
    { SWIG_prefix "TemplateClassInt", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_TemplateClass_Sl_int_Sg_},
    { SWIG_prefix "TClassInt_scientistsNameTest1", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTest1, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTest2", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTest2, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTest3", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTest3, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTest4", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTest4, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTest5", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTest5, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTest6", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTest6, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTest7", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTest7, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTest8", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTest8, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTest9", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTest9, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTestB", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTestB, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTestD", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTestD, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTestE", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTestE, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTestF", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTestF, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTestG", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTestG, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTestH", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTestH, NULL},
    { SWIG_prefix "TClassInt_scientistsNameTestI", (swig_wrapper_func) _wrap_TClassInt_scientistsNameTestI, NULL},
    { SWIG_prefix "TClassInt_scientistsNameSpaceTest1", (swig_wrapper_func) _wrap_TClassInt_scientistsNameSpaceTest1, NULL},
    { SWIG_prefix "TClassInt_scientistsNameSpaceTest2", (swig_wrapper_func) _wrap_TClassInt_scientistsNameSpaceTest2, NULL},
    { SWIG_prefix "TClassInt_scientistsNameSpaceTest3", (swig_wrapper_func) _wrap_TClassInt_scientistsNameSpaceTest3, NULL},
    { SWIG_prefix "TClassInt_scientistsNameSpaceTest4", (swig_wrapper_func) _wrap_TClassInt_scientistsNameSpaceTest4, NULL},
    { SWIG_prefix "TClassInt_scientistsNameSpaceTest5", (swig_wrapper_func) _wrap_TClassInt_scientistsNameSpaceTest5, NULL},
    { SWIG_prefix "TClassInt_scientistsNameSpaceTest6", (swig_wrapper_func) _wrap_TClassInt_scientistsNameSpaceTest6, NULL},
    { SWIG_prefix "TClassInt_scientistsNameSpaceTest7", (swig_wrapper_func) _wrap_TClassInt_scientistsNameSpaceTest7, NULL},
    { SWIG_prefix "TClassInt_scientistsOtherTest1", (swig_wrapper_func) _wrap_TClassInt_scientistsOtherTest1, NULL},
    { SWIG_prefix "TClassInt_scientistsOtherTest2", (swig_wrapper_func) _wrap_TClassInt_scientistsOtherTest2, NULL},
    { SWIG_prefix "TClassInt_scientistsOtherTest3", (swig_wrapper_func) _wrap_TClassInt_scientistsOtherTest3, NULL},
    { SWIG_prefix "TClassInt_scientistsOtherTest4", (swig_wrapper_func) _wrap_TClassInt_scientistsOtherTest4, NULL},
    { SWIG_prefix "TClassInt_scientistsOtherTest5", (swig_wrapper_func) _wrap_TClassInt_scientistsOtherTest5, NULL},
    { SWIG_prefix "TClassInt_scientistsOtherTest6", (swig_wrapper_func) _wrap_TClassInt_scientistsOtherTest6, NULL},
    { SWIG_prefix "TClassInt_scientistsOtherTest7", (swig_wrapper_func) _wrap_TClassInt_scientistsOtherTest7, NULL},
    { SWIG_prefix "new_TClassInt", (swig_wrapper_func) _wrap_new_TClassInt, NULL},
    { SWIG_prefix "delete_TClassInt", (swig_wrapper_func) _wrap_delete_TClassInt, NULL},
    { SWIG_prefix "TClassInt", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Name_TClass_Sl_int_Sg_},
    { SWIG_prefix "renameTest1", (swig_wrapper_func) _wrap_renameTest1, NULL},
    { SWIG_prefix "renameTest2", (swig_wrapper_func) _wrap_renameTest2, NULL},
    { SWIG_prefix "NewNameStruct_renameTest1", (swig_wrapper_func) _wrap_NewNameStruct_renameTest1, NULL},
    { SWIG_prefix "NewNameStruct_renameTest2", (swig_wrapper_func) _wrap_NewNameStruct_renameTest2, NULL},
    { SWIG_prefix "NewNameStruct_renameTest3", (swig_wrapper_func) _wrap_NewNameStruct_renameTest3, NULL},
    { SWIG_prefix "NewNameStruct_renameTest4", (swig_wrapper_func) _wrap_NewNameStruct_renameTest4, NULL},
    { SWIG_prefix "NewNameStruct_renameTest5", (swig_wrapper_func) _wrap_NewNameStruct_renameTest5, NULL},
    { SWIG_prefix "NewNameStruct_renameTest6", (swig_wrapper_func) _wrap_NewNameStruct_renameTest6, NULL},
    { SWIG_prefix "new_NewNameStruct", (swig_wrapper_func) _wrap_new_NewNameStruct, NULL},
    { SWIG_prefix "delete_NewNameStruct", (swig_wrapper_func) _wrap_delete_NewNameStruct, NULL},
    { SWIG_prefix "NewNameStruct", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_OldNameStruct},
    { SWIG_prefix "renameTest3", (swig_wrapper_func) _wrap_renameTest3, NULL},
    { SWIG_prefix "renameTest4", (swig_wrapper_func) _wrap_renameTest4, NULL},
    { SWIG_prefix "renameTest5", (swig_wrapper_func) _wrap_renameTest5, NULL},
    { SWIG_prefix "renameTest6", (swig_wrapper_func) _wrap_renameTest6, NULL},
    { SWIG_prefix "renameTest7", (swig_wrapper_func) _wrap_renameTest7, NULL},
    { SWIG_prefix "TreesClass_treesTest1", (swig_wrapper_func) _wrap_TreesClass_treesTest1, NULL},
    { SWIG_prefix "TreesClass_treesTest2", (swig_wrapper_func) _wrap_TreesClass_treesTest2, NULL},
    { SWIG_prefix "TreesClass_treesTest3", (swig_wrapper_func) _wrap_TreesClass_treesTest3, NULL},
    { SWIG_prefix "TreesClass_treesTest4", (swig_wrapper_func) _wrap_TreesClass_treesTest4, NULL},
    { SWIG_prefix "TreesClass_treesTest5", (swig_wrapper_func) _wrap_TreesClass_treesTest5, NULL},
    { SWIG_prefix "TreesClass_treesTest6", (swig_wrapper_func) _wrap_TreesClass_treesTest6, NULL},
    { SWIG_prefix "TreesClass_treesTest7", (swig_wrapper_func) _wrap_TreesClass_treesTest7, NULL},
    { SWIG_prefix "TreesClass_treesTest8", (swig_wrapper_func) _wrap_TreesClass_treesTest8, NULL},
    { SWIG_prefix "TreesClass_treesTest9", (swig_wrapper_func) _wrap_TreesClass_treesTest9, NULL},
    { SWIG_prefix "TreesClass_treesTestA", (swig_wrapper_func) _wrap_TreesClass_treesTestA, NULL},
    { SWIG_prefix "TreesClass_treesTestB", (swig_wrapper_func) _wrap_TreesClass_treesTestB, NULL},
    { SWIG_prefix "TreesClass_treesTestC", (swig_wrapper_func) _wrap_TreesClass_treesTestC, NULL},
    { SWIG_prefix "TreesClass_treesTestD", (swig_wrapper_func) _wrap_TreesClass_treesTestD, NULL},
    { SWIG_prefix "TreesClass_treesTestE", (swig_wrapper_func) _wrap_TreesClass_treesTestE, NULL},
    { SWIG_prefix "TreesClass_treesTestF", (swig_wrapper_func) _wrap_TreesClass_treesTestF, NULL},
    { SWIG_prefix "TreesClass_treesTestG", (swig_wrapper_func) _wrap_TreesClass_treesTestG, NULL},
    { SWIG_prefix "TreesClass_treesTestH", (swig_wrapper_func) _wrap_TreesClass_treesTestH, NULL},
    { SWIG_prefix "TreesClass_treesTestI", (swig_wrapper_func) _wrap_TreesClass_treesTestI, NULL},
    { SWIG_prefix "TreesClass_treesTestJ", (swig_wrapper_func) _wrap_TreesClass_treesTestJ, NULL},
    { SWIG_prefix "TreesClass_treesTestK", (swig_wrapper_func) _wrap_TreesClass_treesTestK, NULL},
    { SWIG_prefix "TreesClass_treesTestL", (swig_wrapper_func) _wrap_TreesClass_treesTestL, NULL},
    { SWIG_prefix "TreesClass_treesTestM", (swig_wrapper_func) _wrap_TreesClass_treesTestM, NULL},
    { SWIG_prefix "TreesClass_treesTestN", (swig_wrapper_func) _wrap_TreesClass_treesTestN, NULL},
    { SWIG_prefix "TreesClass_treesTestO", (swig_wrapper_func) _wrap_TreesClass_treesTestO, NULL},
    { SWIG_prefix "new_TreesClass", (swig_wrapper_func) _wrap_new_TreesClass, NULL},
    { SWIG_prefix "delete_TreesClass", (swig_wrapper_func) _wrap_delete_TreesClass, NULL},
    { SWIG_prefix "TreesClass", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_TreesClass},
    { SWIG_prefix "treesTest1", (swig_wrapper_func) _wrap_treesTest1, NULL},
    { SWIG_prefix "treesTest2", (swig_wrapper_func) _wrap_treesTest2, NULL},
    { SWIG_prefix "treesTest3", (swig_wrapper_func) _wrap_treesTest3, NULL},
    { SWIG_prefix "treesTest4", (swig_wrapper_func) _wrap_treesTest4, NULL},
    { SWIG_prefix "treesTest5", (swig_wrapper_func) _wrap_treesTest5, NULL},
    { SWIG_prefix "treesTest6", (swig_wrapper_func) _wrap_treesTest6, NULL},
    { SWIG_prefix "treesTest7", (swig_wrapper_func) _wrap_treesTest7, NULL},
    { SWIG_prefix "treesTest8", (swig_wrapper_func) _wrap_treesTest8, NULL},
    { SWIG_prefix "treesTest9", (swig_wrapper_func) _wrap_treesTest9, NULL},
    { SWIG_prefix "treesTestA", (swig_wrapper_func) _wrap_treesTestA, NULL},
    { SWIG_prefix "treesTestB", (swig_wrapper_func) _wrap_treesTestB, NULL},
    { SWIG_prefix "treesTestC", (swig_wrapper_func) _wrap_treesTestC, NULL},
    { SWIG_prefix "treesTestD", (swig_wrapper_func) _wrap_treesTestD, NULL},
    { SWIG_prefix "treesTestE", (swig_wrapper_func) _wrap_treesTestE, NULL},
    { SWIG_prefix "treesTestF", (swig_wrapper_func) _wrap_treesTestF, NULL},
    { SWIG_prefix "treesTestG", (swig_wrapper_func) _wrap_treesTestG, NULL},
    { SWIG_prefix "treesTestH", (swig_wrapper_func) _wrap_treesTestH, NULL},
    { SWIG_prefix "treesTestI", (swig_wrapper_func) _wrap_treesTestI, NULL},
    { SWIG_prefix "treesTestJ", (swig_wrapper_func) _wrap_treesTestJ, NULL},
    { SWIG_prefix "treesTestK", (swig_wrapper_func) _wrap_treesTestK, NULL},
    { SWIG_prefix "treesTestL", (swig_wrapper_func) _wrap_treesTestL, NULL},
    { SWIG_prefix "treesTestM", (swig_wrapper_func) _wrap_treesTestM, NULL},
    { SWIG_prefix "treesTestO", (swig_wrapper_func) _wrap_treesTestO, NULL},
    { SWIG_prefix "treesTestP", (swig_wrapper_func) _wrap_treesTestP, NULL},
    { SWIG_prefix "treesTestQ", (swig_wrapper_func) _wrap_treesTestQ, NULL},
    { SWIG_prefix "treesTestR", (swig_wrapper_func) _wrap_treesTestR, NULL},
    { SWIG_prefix "HairStruct_hairTest1", (swig_wrapper_func) _wrap_HairStruct_hairTest1, NULL},
    { SWIG_prefix "HairStruct_hairTest2", (swig_wrapper_func) _wrap_HairStruct_hairTest2, NULL},
    { SWIG_prefix "HairStruct_hairTest3", (swig_wrapper_func) _wrap_HairStruct_hairTest3, NULL},
    { SWIG_prefix "HairStruct_hairTest4", (swig_wrapper_func) _wrap_HairStruct_hairTest4, NULL},
    { SWIG_prefix "HairStruct_hairTest5", (swig_wrapper_func) _wrap_HairStruct_hairTest5, NULL},
    { SWIG_prefix "HairStruct_hairTest6", (swig_wrapper_func) _wrap_HairStruct_hairTest6, NULL},
    { SWIG_prefix "HairStruct_hairTest7", (swig_wrapper_func) _wrap_HairStruct_hairTest7, NULL},
    { SWIG_prefix "HairStruct_hairTest8", (swig_wrapper_func) _wrap_HairStruct_hairTest8, NULL},
    { SWIG_prefix "HairStruct_hairTest9", (swig_wrapper_func) _wrap_HairStruct_hairTest9, NULL},
    { SWIG_prefix "HairStruct_hairTestA", (swig_wrapper_func) _wrap_HairStruct_hairTestA, NULL},
    { SWIG_prefix "HairStruct_hairTestB", (swig_wrapper_func) _wrap_HairStruct_hairTestB, NULL},
    { SWIG_prefix "HairStruct_colourTest1", (swig_wrapper_func) _wrap_HairStruct_colourTest1, NULL},
    { SWIG_prefix "HairStruct_colourTest2", (swig_wrapper_func) _wrap_HairStruct_colourTest2, NULL},
    { SWIG_prefix "HairStruct_namedanonTest1", (swig_wrapper_func) _wrap_HairStruct_namedanonTest1, NULL},
    { SWIG_prefix "HairStruct_namedanonspaceTest1", (swig_wrapper_func) _wrap_HairStruct_namedanonspaceTest1, NULL},
    { SWIG_prefix "HairStruct_treesGlobalTest1", (swig_wrapper_func) _wrap_HairStruct_treesGlobalTest1, NULL},
    { SWIG_prefix "HairStruct_treesGlobalTest2", (swig_wrapper_func) _wrap_HairStruct_treesGlobalTest2, NULL},
    { SWIG_prefix "HairStruct_treesGlobalTest3", (swig_wrapper_func) _wrap_HairStruct_treesGlobalTest3, NULL},
    { SWIG_prefix "HairStruct_treesGlobalTest4", (swig_wrapper_func) _wrap_HairStruct_treesGlobalTest4, NULL},
    { SWIG_prefix "HairStruct_treesGlobalTest5", (swig_wrapper_func) _wrap_HairStruct_treesGlobalTest5, NULL},
    { SWIG_prefix "new_HairStruct", (swig_wrapper_func) _wrap_new_HairStruct, NULL},
    { SWIG_prefix "delete_HairStruct", (swig_wrapper_func) _wrap_delete_HairStruct, NULL},
    { SWIG_prefix "HairStruct", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_curly_greasy_HairStruct},
    { SWIG_prefix "hairTest1", (swig_wrapper_func) _wrap_hairTest1, NULL},
    { SWIG_prefix "hairTest2", (swig_wrapper_func) _wrap_hairTest2, NULL},
    { SWIG_prefix "hairTest3", (swig_wrapper_func) _wrap_hairTest3, NULL},
    { SWIG_prefix "hairTest4", (swig_wrapper_func) _wrap_hairTest4, NULL},
    { SWIG_prefix "hairTest5", (swig_wrapper_func) _wrap_hairTest5, NULL},
    { SWIG_prefix "hairTest6", (swig_wrapper_func) _wrap_hairTest6, NULL},
    { SWIG_prefix "hairTest7", (swig_wrapper_func) _wrap_hairTest7, NULL},
    { SWIG_prefix "hairTest8", (swig_wrapper_func) _wrap_hairTest8, NULL},
    { SWIG_prefix "hairTest9", (swig_wrapper_func) _wrap_hairTest9, NULL},
    { SWIG_prefix "hairTestA", (swig_wrapper_func) _wrap_hairTestA, NULL},
    { SWIG_prefix "hairTestB", (swig_wrapper_func) _wrap_hairTestB, NULL},
    { SWIG_prefix "hairTestC", (swig_wrapper_func) _wrap_hairTestC, NULL},
    { SWIG_prefix "hairTestA1", (swig_wrapper_func) _wrap_hairTestA1, NULL},
    { SWIG_prefix "hairTestA2", (swig_wrapper_func) _wrap_hairTestA2, NULL},
    { SWIG_prefix "hairTestA3", (swig_wrapper_func) _wrap_hairTestA3, NULL},
    { SWIG_prefix "hairTestA4", (swig_wrapper_func) _wrap_hairTestA4, NULL},
    { SWIG_prefix "hairTestA5", (swig_wrapper_func) _wrap_hairTestA5, NULL},
    { SWIG_prefix "hairTestA6", (swig_wrapper_func) _wrap_hairTestA6, NULL},
    { SWIG_prefix "hairTestA7", (swig_wrapper_func) _wrap_hairTestA7, NULL},
    { SWIG_prefix "hairTestA8", (swig_wrapper_func) _wrap_hairTestA8, NULL},
    { SWIG_prefix "hairTestA9", (swig_wrapper_func) _wrap_hairTestA9, NULL},
    { SWIG_prefix "hairTestAA", (swig_wrapper_func) _wrap_hairTestAA, NULL},
    { SWIG_prefix "hairTestAB", (swig_wrapper_func) _wrap_hairTestAB, NULL},
    { SWIG_prefix "hairTestAC", (swig_wrapper_func) _wrap_hairTestAC, NULL},
    { SWIG_prefix "hairTestB1", (swig_wrapper_func) _wrap_hairTestB1, NULL},
    { SWIG_prefix "hairTestB2", (swig_wrapper_func) _wrap_hairTestB2, NULL},
    { SWIG_prefix "hairTestB3", (swig_wrapper_func) _wrap_hairTestB3, NULL},
    { SWIG_prefix "hairTestB4", (swig_wrapper_func) _wrap_hairTestB4, NULL},
    { SWIG_prefix "hairTestB5", (swig_wrapper_func) _wrap_hairTestB5, NULL},
    { SWIG_prefix "hairTestB6", (swig_wrapper_func) _wrap_hairTestB6, NULL},
    { SWIG_prefix "hairTestB7", (swig_wrapper_func) _wrap_hairTestB7, NULL},
    { SWIG_prefix "hairTestB8", (swig_wrapper_func) _wrap_hairTestB8, NULL},
    { SWIG_prefix "hairTestB9", (swig_wrapper_func) _wrap_hairTestB9, NULL},
    { SWIG_prefix "hairTestBA", (swig_wrapper_func) _wrap_hairTestBA, NULL},
    { SWIG_prefix "hairTestBB", (swig_wrapper_func) _wrap_hairTestBB, NULL},
    { SWIG_prefix "hairTestBC", (swig_wrapper_func) _wrap_hairTestBC, NULL},
    { SWIG_prefix "hairTestC1", (swig_wrapper_func) _wrap_hairTestC1, NULL},
    { SWIG_prefix "hairTestC2", (swig_wrapper_func) _wrap_hairTestC2, NULL},
    { SWIG_prefix "hairTestC3", (swig_wrapper_func) _wrap_hairTestC3, NULL},
    { SWIG_prefix "hairTestC4", (swig_wrapper_func) _wrap_hairTestC4, NULL},
    { SWIG_prefix "hairTestC5", (swig_wrapper_func) _wrap_hairTestC5, NULL},
    { SWIG_prefix "hairTestC6", (swig_wrapper_func) _wrap_hairTestC6, NULL},
    { SWIG_prefix "hairTestC7", (swig_wrapper_func) _wrap_hairTestC7, NULL},
    { SWIG_prefix "hairTestC8", (swig_wrapper_func) _wrap_hairTestC8, NULL},
    { SWIG_prefix "hairTestC9", (swig_wrapper_func) _wrap_hairTestC9, NULL},
    { SWIG_prefix "hairTestCA", (swig_wrapper_func) _wrap_hairTestCA, NULL},
    { SWIG_prefix "hairTestCB", (swig_wrapper_func) _wrap_hairTestCB, NULL},
    { SWIG_prefix "hairTestCC", (swig_wrapper_func) _wrap_hairTestCC, NULL},
    { SWIG_prefix "FirStruct_hairTestFir1", (swig_wrapper_func) _wrap_FirStruct_hairTestFir1, NULL},
    { SWIG_prefix "FirStruct_hairTestFir2", (swig_wrapper_func) _wrap_FirStruct_hairTestFir2, NULL},
    { SWIG_prefix "FirStruct_hairTestFir3", (swig_wrapper_func) _wrap_FirStruct_hairTestFir3, NULL},
    { SWIG_prefix "FirStruct_hairTestFir4", (swig_wrapper_func) _wrap_FirStruct_hairTestFir4, NULL},
    { SWIG_prefix "FirStruct_hairTestFir5", (swig_wrapper_func) _wrap_FirStruct_hairTestFir5, NULL},
    { SWIG_prefix "FirStruct_hairTestFir6", (swig_wrapper_func) _wrap_FirStruct_hairTestFir6, NULL},
    { SWIG_prefix "FirStruct_hairTestFir7", (swig_wrapper_func) _wrap_FirStruct_hairTestFir7, NULL},
    { SWIG_prefix "FirStruct_hairTestFir8", (swig_wrapper_func) _wrap_FirStruct_hairTestFir8, NULL},
    { SWIG_prefix "FirStruct_hairTestFir9", (swig_wrapper_func) _wrap_FirStruct_hairTestFir9, NULL},
    { SWIG_prefix "FirStruct_hairTestFirA", (swig_wrapper_func) _wrap_FirStruct_hairTestFirA, NULL},
    { SWIG_prefix "FirStruct_hairTestFirB", (swig_wrapper_func) _wrap_FirStruct_hairTestFirB, NULL},
    { SWIG_prefix "new_FirStruct", (swig_wrapper_func) _wrap_new_FirStruct, NULL},
    { SWIG_prefix "delete_FirStruct", (swig_wrapper_func) _wrap_delete_FirStruct, NULL},
    { SWIG_prefix "FirStruct", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_curly_greasy_FirStruct},
    { SWIG_prefix "new_Obscure", (swig_wrapper_func) _wrap_new_Obscure, NULL},
    { SWIG_prefix "delete_Obscure", (swig_wrapper_func) _wrap_delete_Obscure, NULL},
    { SWIG_prefix "Obscure", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Obscure},
    { SWIG_prefix "Instances_MemberInstance_set", (swig_wrapper_func) _wrap_Instances_MemberInstance_set, NULL},
    { SWIG_prefix "Instances_MemberInstance_get", (swig_wrapper_func) _wrap_Instances_MemberInstance_get, NULL},
    { SWIG_prefix "new_Instances", (swig_wrapper_func) _wrap_new_Instances, NULL},
    { SWIG_prefix "delete_Instances", (swig_wrapper_func) _wrap_delete_Instances, NULL},
    { SWIG_prefix "Instances", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Instances},
    { SWIG_prefix "new_IgnoreTest", (swig_wrapper_func) _wrap_new_IgnoreTest, NULL},
    { SWIG_prefix "delete_IgnoreTest", (swig_wrapper_func) _wrap_delete_IgnoreTest, NULL},
    { SWIG_prefix "IgnoreTest", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_IgnoreTest},
    { SWIG_prefix "ignoreATest", (swig_wrapper_func) _wrap_ignoreATest, NULL},
    { SWIG_prefix "ignoreBTest", (swig_wrapper_func) _wrap_ignoreBTest, NULL},
    { SWIG_prefix "ignoreCTest", (swig_wrapper_func) _wrap_ignoreCTest, NULL},
    { SWIG_prefix "ignoreDTest", (swig_wrapper_func) _wrap_ignoreDTest, NULL},
    { SWIG_prefix "ignoreETest", (swig_wrapper_func) _wrap_ignoreETest, NULL},
    { SWIG_prefix "repeatTest", (swig_wrapper_func) _wrap_repeatTest, NULL},
    { SWIG_prefix "differentTypesTest", (swig_wrapper_func) _wrap_differentTypesTest, NULL},
    { SWIG_prefix "globalDifferentTypesTest", (swig_wrapper_func) _wrap_globalDifferentTypesTest, NULL},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    { SWIG_prefix "myColour", 0, (swig_variable_func) _wrap_myColour_get,(swig_variable_func) _wrap_myColour_set},
    { SWIG_prefix "GlobalInstance", 0, (swig_variable_func) _wrap_GlobalInstance_get,(swig_variable_func) _wrap_GlobalInstance_set},
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_curly__greasy__FirStructTo_p_curly__greasy__HairStruct(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((curly::greasy::HairStruct *)  ((curly::greasy::FirStruct *) x));
}
static swig_type_info _swigt__p_AlsoEmpty = {"_p_AlsoEmpty", "AlsoEmpty *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AnonSpace__AnonStruct = {"_p_AnonSpace__AnonStruct", "AnonSpace::AnonStruct *", 0, 0, (void*)&_wrap_class_AnonSpace_AnonStruct, 0};
static swig_type_info _swigt__p_AnonSpace__namedanonspace = {"_p_AnonSpace__namedanonspace", "enum AnonSpace::namedanonspace *|AnonSpace::namedanonspace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IgnoreTest = {"_p_IgnoreTest", "IgnoreTest *", 0, 0, (void*)&_wrap_class_IgnoreTest, 0};
static swig_type_info _swigt__p_Instances = {"_p_Instances", "Instances *", 0, 0, (void*)&_wrap_class_Instances, 0};
static swig_type_info _swigt__p_Name__TClassT_int_t = {"_p_Name__TClassT_int_t", "Name::TClass< int > *", 0, 0, (void*)&_wrap_class_Name_TClass_Sl_int_Sg_, 0};
static swig_type_info _swigt__p_Obscure = {"_p_Obscure", "Obscure *", 0, 0, (void*)&_wrap_class_Obscure, 0};
static swig_type_info _swigt__p_OldNameStruct = {"_p_OldNameStruct", "OldNameStruct *", 0, 0, (void*)&_wrap_class_OldNameStruct, 0};
static swig_type_info _swigt__p_RepeatSpace__repeat = {"_p_RepeatSpace__repeat", "enum RepeatSpace::repeat *|RepeatSpace::repeat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpeedClass = {"_p_SpeedClass", "SpeedClass *", 0, 0, (void*)&_wrap_class_SpeedClass, 0};
static swig_type_info _swigt__p_TemplateClassT_int_t = {"_p_TemplateClassT_int_t", "TemplateClass< int > *", 0, 0, (void*)&_wrap_class_TemplateClass_Sl_int_Sg_, 0};
static swig_type_info _swigt__p_TreesClass = {"_p_TreesClass", "TreesClass *", 0, 0, (void*)&_wrap_class_TreesClass, 0};
static swig_type_info _swigt__p_TreesClass__trees = {"_p_TreesClass__trees", "treesglobaltd7 *|treesglobaltd4 *|treesglobaltd1 *|treesglobaltd8 *|treesglobaltd5 *|enum TreesClass::trees *|treesglobaltd2 *|treesglobaltd9 *|treesglobaltd6 *|treesglobaltd3 *|treesglobaltdA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TwoNamesStruct = {"_p_TwoNamesStruct", "TwoNamesStruct *", 0, 0, (void*)&_wrap_class_TwoNamesStruct, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_curly__greasy__FirStruct = {"_p_curly__greasy__FirStruct", "curly::greasy::FirStruct *", 0, 0, (void*)&_wrap_class_curly_greasy_FirStruct, 0};
static swig_type_info _swigt__p_curly__greasy__HairStruct = {"_p_curly__greasy__HairStruct", "curly::greasy::HairStruct *", 0, 0, (void*)&_wrap_class_curly_greasy_HairStruct, 0};
static swig_type_info _swigt__p_doublename = {"_p_doublename", "doublename *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd1 = {"_p_hairtd1", "hairtd1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd2 = {"_p_hairtd2", "hairtd2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd3 = {"_p_hairtd3", "hairtd3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd4 = {"_p_hairtd4", "hairtd4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd5 = {"_p_hairtd5", "hairtd5 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd6 = {"_p_hairtd6", "hairtd6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd7 = {"_p_hairtd7", "hairtd7 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd8 = {"_p_hairtd8", "hairtd8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd9 = {"_p_hairtd9", "hairtd9 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtdA = {"_p_hairtdA", "hairtdA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_namedanon = {"_p_namedanon", "enum namedanon *|namedanon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_old_name = {"_p_old_name", "enum old_name *|old_nametd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scientiststd1 = {"_p_scientiststd1", "scientiststd1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scientiststd2 = {"_p_scientiststd2", "scientiststd2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scientiststd3 = {"_p_scientiststd3", "scientiststd3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_singlename = {"_p_singlename", "singlename *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_speedtd1 = {"_p_speedtd1", "speedtd1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd1 = {"_p_treestd1", "treestd1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd2 = {"_p_treestd2", "treestd2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd3 = {"_p_treestd3", "treestd3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd4 = {"_p_treestd4", "treestd4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd5 = {"_p_treestd5", "treestd5 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_twonamestag = {"_p_twonamestag", "enum twonamestag *|twonames *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AlsoEmpty,
  &_swigt__p_AnonSpace__AnonStruct,
  &_swigt__p_AnonSpace__namedanonspace,
  &_swigt__p_IgnoreTest,
  &_swigt__p_Instances,
  &_swigt__p_Name__TClassT_int_t,
  &_swigt__p_Obscure,
  &_swigt__p_OldNameStruct,
  &_swigt__p_RepeatSpace__repeat,
  &_swigt__p_SpeedClass,
  &_swigt__p_TemplateClassT_int_t,
  &_swigt__p_TreesClass,
  &_swigt__p_TreesClass__trees,
  &_swigt__p_TwoNamesStruct,
  &_swigt__p_char,
  &_swigt__p_curly__greasy__FirStruct,
  &_swigt__p_curly__greasy__HairStruct,
  &_swigt__p_doublename,
  &_swigt__p_hairtd1,
  &_swigt__p_hairtd2,
  &_swigt__p_hairtd3,
  &_swigt__p_hairtd4,
  &_swigt__p_hairtd5,
  &_swigt__p_hairtd6,
  &_swigt__p_hairtd7,
  &_swigt__p_hairtd8,
  &_swigt__p_hairtd9,
  &_swigt__p_hairtdA,
  &_swigt__p_namedanon,
  &_swigt__p_old_name,
  &_swigt__p_scientiststd1,
  &_swigt__p_scientiststd2,
  &_swigt__p_scientiststd3,
  &_swigt__p_singlename,
  &_swigt__p_speedtd1,
  &_swigt__p_treestd1,
  &_swigt__p_treestd2,
  &_swigt__p_treestd3,
  &_swigt__p_treestd4,
  &_swigt__p_treestd5,
  &_swigt__p_twonamestag,
};

static swig_cast_info _swigc__p_AlsoEmpty[] = {  {&_swigt__p_AlsoEmpty, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnonSpace__AnonStruct[] = {  {&_swigt__p_AnonSpace__AnonStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnonSpace__namedanonspace[] = {  {&_swigt__p_AnonSpace__namedanonspace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IgnoreTest[] = {  {&_swigt__p_IgnoreTest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Instances[] = {  {&_swigt__p_Instances, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Name__TClassT_int_t[] = {  {&_swigt__p_Name__TClassT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Obscure[] = {  {&_swigt__p_Obscure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OldNameStruct[] = {  {&_swigt__p_OldNameStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RepeatSpace__repeat[] = {  {&_swigt__p_RepeatSpace__repeat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpeedClass[] = {  {&_swigt__p_SpeedClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TemplateClassT_int_t[] = {  {&_swigt__p_TemplateClassT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TreesClass[] = {  {&_swigt__p_TreesClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TreesClass__trees[] = {  {&_swigt__p_TreesClass__trees, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TwoNamesStruct[] = {  {&_swigt__p_TwoNamesStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_curly__greasy__FirStruct[] = {  {&_swigt__p_curly__greasy__FirStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_curly__greasy__HairStruct[] = {  {&_swigt__p_curly__greasy__HairStruct, 0, 0, 0},  {&_swigt__p_curly__greasy__FirStruct, _p_curly__greasy__FirStructTo_p_curly__greasy__HairStruct, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_doublename[] = {  {&_swigt__p_doublename, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd1[] = {  {&_swigt__p_hairtd1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd2[] = {  {&_swigt__p_hairtd2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd3[] = {  {&_swigt__p_hairtd3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd4[] = {  {&_swigt__p_hairtd4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd5[] = {  {&_swigt__p_hairtd5, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd6[] = {  {&_swigt__p_hairtd6, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd7[] = {  {&_swigt__p_hairtd7, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd8[] = {  {&_swigt__p_hairtd8, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd9[] = {  {&_swigt__p_hairtd9, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtdA[] = {  {&_swigt__p_hairtdA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_namedanon[] = {  {&_swigt__p_namedanon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_old_name[] = {  {&_swigt__p_old_name, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scientiststd1[] = {  {&_swigt__p_scientiststd1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scientiststd2[] = {  {&_swigt__p_scientiststd2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scientiststd3[] = {  {&_swigt__p_scientiststd3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_singlename[] = {  {&_swigt__p_singlename, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_speedtd1[] = {  {&_swigt__p_speedtd1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd1[] = {  {&_swigt__p_treestd1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd2[] = {  {&_swigt__p_treestd2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd3[] = {  {&_swigt__p_treestd3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd4[] = {  {&_swigt__p_treestd4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd5[] = {  {&_swigt__p_treestd5, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_twonamestag[] = {  {&_swigt__p_twonamestag, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AlsoEmpty,
  _swigc__p_AnonSpace__AnonStruct,
  _swigc__p_AnonSpace__namedanonspace,
  _swigc__p_IgnoreTest,
  _swigc__p_Instances,
  _swigc__p_Name__TClassT_int_t,
  _swigc__p_Obscure,
  _swigc__p_OldNameStruct,
  _swigc__p_RepeatSpace__repeat,
  _swigc__p_SpeedClass,
  _swigc__p_TemplateClassT_int_t,
  _swigc__p_TreesClass,
  _swigc__p_TreesClass__trees,
  _swigc__p_TwoNamesStruct,
  _swigc__p_char,
  _swigc__p_curly__greasy__FirStruct,
  _swigc__p_curly__greasy__HairStruct,
  _swigc__p_doublename,
  _swigc__p_hairtd1,
  _swigc__p_hairtd2,
  _swigc__p_hairtd3,
  _swigc__p_hairtd4,
  _swigc__p_hairtd5,
  _swigc__p_hairtd6,
  _swigc__p_hairtd7,
  _swigc__p_hairtd8,
  _swigc__p_hairtd9,
  _swigc__p_hairtdA,
  _swigc__p_namedanon,
  _swigc__p_old_name,
  _swigc__p_scientiststd1,
  _swigc__p_scientiststd2,
  _swigc__p_scientiststd3,
  _swigc__p_singlename,
  _swigc__p_speedtd1,
  _swigc__p_treestd1,
  _swigc__p_treestd2,
  _swigc__p_treestd3,
  _swigc__p_treestd4,
  _swigc__p_treestd5,
  _swigc__p_twonamestag,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    size_t i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
  /* Create fast method lookup tables */
  
  SWIGINTERN void
  SWIG_Tcl_InstallMethodLookupTables(void) {
    size_t i;
    
    for (i = 0; i < swig_module.size; ++i) {
      swig_type_info *type = swig_module.type_initial[i];
      if (type->clientdata) {
        swig_class* klass = (swig_class*) type->clientdata;
        swig_method* meth;
        Tcl_InitHashTable(&(klass->hashtable), TCL_STRING_KEYS);
        for (meth = klass->methods; meth && meth->name; ++meth) {
          int newEntry;
          Tcl_HashEntry* hashentry = Tcl_CreateHashEntry(&(klass->hashtable), meth->name, &newEntry);
          Tcl_SetHashValue(hashentry, (ClientData)meth->method);
        }
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  size_t i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  /* (char*) cast is required to avoid compiler warning/error for Tcl < 8.4. */
  if (Tcl_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
#ifdef USE_TK_STUBS
  /* (char*) cast is required to avoid compiler warning/error. */
  if (Tk_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif
  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  SWIG_Tcl_InstallMethodLookupTables();
  
  
  SWIG_Tcl_SetConstantObj(interp, "AnonEnum1", SWIG_From_int(static_cast< int >(AnonEnum1)));
  SWIG_Tcl_SetConstantObj(interp, "AnonEnum2", SWIG_From_int(static_cast< int >(AnonEnum2)));
  SWIG_Tcl_SetConstantObj(interp, "ReallyAnInteger", SWIG_From_int(static_cast< int >(ReallyAnInteger)));
  SWIG_Tcl_SetConstantObj(interp, "AnonSpaceEnum1", SWIG_From_int(static_cast< int >(AnonSpace::AnonSpaceEnum1)));
  SWIG_Tcl_SetConstantObj(interp, "AnonSpaceEnum2", SWIG_From_int(static_cast< int >(AnonSpace::AnonSpaceEnum2)));
  SWIG_Tcl_SetConstantObj(interp, "AnonStruct_AnonStructEnum1", SWIG_From_int(static_cast< int >(AnonSpace::AnonStruct::AnonStructEnum1)));
  SWIG_Tcl_SetConstantObj(interp, "AnonStruct_AnonStructEnum2", SWIG_From_int(static_cast< int >(AnonSpace::AnonStruct::AnonStructEnum2)));
  SWIG_Tcl_SetConstantObj(interp, "red", SWIG_From_int(static_cast< int >(red)));
  SWIG_Tcl_SetConstantObj(interp, "blue", SWIG_From_int(static_cast< int >(blue)));
  SWIG_Tcl_SetConstantObj(interp, "green", SWIG_From_int(static_cast< int >(green)));
  SWIG_Tcl_SetConstantObj(interp, "SpeedClass_slow", SWIG_From_int(static_cast< int >(SpeedClass::slow)));
  SWIG_Tcl_SetConstantObj(interp, "SpeedClass_medium", SWIG_From_int(static_cast< int >(SpeedClass::medium)));
  SWIG_Tcl_SetConstantObj(interp, "SpeedClass_fast", SWIG_From_int(static_cast< int >(SpeedClass::fast)));
  SWIG_Tcl_SetConstantObj(interp, "SpeedClass_lightning", SWIG_From_int(static_cast< int >(SpeedClass::lightning)));
  SWIG_Tcl_SetConstantObj(interp, "NamedAnon1", SWIG_From_int(static_cast< int >(NamedAnon1)));
  SWIG_Tcl_SetConstantObj(interp, "NamedAnon2", SWIG_From_int(static_cast< int >(NamedAnon2)));
  SWIG_Tcl_SetConstantObj(interp, "TwoNames1", SWIG_From_int(static_cast< int >(TwoNames1)));
  SWIG_Tcl_SetConstantObj(interp, "TwoNames2", SWIG_From_int(static_cast< int >(TwoNames2)));
  SWIG_Tcl_SetConstantObj(interp, "TwoNames3", SWIG_From_int(static_cast< int >(TwoNames3)));
  SWIG_Tcl_SetConstantObj(interp, "TwoNamesStruct_TwoNamesStruct1", SWIG_From_int(static_cast< int >(TwoNamesStruct::TwoNamesStruct1)));
  SWIG_Tcl_SetConstantObj(interp, "TwoNamesStruct_TwoNamesStruct2", SWIG_From_int(static_cast< int >(TwoNamesStruct::TwoNamesStruct2)));
  SWIG_Tcl_SetConstantObj(interp, "NamedAnonSpace1", SWIG_From_int(static_cast< int >(AnonSpace::NamedAnonSpace1)));
  SWIG_Tcl_SetConstantObj(interp, "NamedAnonSpace2", SWIG_From_int(static_cast< int >(AnonSpace::NamedAnonSpace2)));
  SWIG_Tcl_SetConstantObj(interp, "TemplateClassInt_einstein", SWIG_From_int(static_cast< int >(TemplateClass< int >::einstein)));
  SWIG_Tcl_SetConstantObj(interp, "TemplateClassInt_galileo", SWIG_From_int(static_cast< int >(TemplateClass< int >::galileo)));
  SWIG_Tcl_SetConstantObj(interp, "TClassInt_faraday", SWIG_From_int(static_cast< int >(Name::TClass< int >::faraday)));
  SWIG_Tcl_SetConstantObj(interp, "TClassInt_bell", SWIG_From_int(static_cast< int >(Name::TClass< int >::bell)));
  SWIG_Tcl_SetConstantObj(interp, "argh", SWIG_From_int(static_cast< int >(argh)));
  SWIG_Tcl_SetConstantObj(interp, "eek", SWIG_From_int(static_cast< int >(eek)));
  SWIG_Tcl_SetConstantObj(interp, "NewNameStruct_whizz", SWIG_From_int(static_cast< int >(OldNameStruct::whizz)));
  SWIG_Tcl_SetConstantObj(interp, "NewNameStruct_bang", SWIG_From_int(static_cast< int >(OldNameStruct::kerboom)));
  SWIG_Tcl_SetConstantObj(interp, "NewNameStruct_pop", SWIG_From_int(static_cast< int >(OldNameStruct::pop)));
  SWIG_Tcl_SetConstantObj(interp, "NewNameStruct_simple1", SWIG_From_int(static_cast< int >(OldNameStruct::simple1)));
  SWIG_Tcl_SetConstantObj(interp, "NewNameStruct_doublename1", SWIG_From_int(static_cast< int >(OldNameStruct::doublename1)));
  SWIG_Tcl_SetConstantObj(interp, "NewNameStruct_singlename1", SWIG_From_int(static_cast< int >(OldNameStruct::singlename1)));
  SWIG_Tcl_SetConstantObj(interp, "TreesClass_oak", SWIG_From_int(static_cast< int >(TreesClass::oak)));
  SWIG_Tcl_SetConstantObj(interp, "TreesClass_fir", SWIG_From_int(static_cast< int >(TreesClass::fir)));
  SWIG_Tcl_SetConstantObj(interp, "TreesClass_pine", SWIG_From_int(static_cast< int >(TreesClass::pine)));
  SWIG_Tcl_SetConstantObj(interp, "HairStruct_blonde", SWIG_From_int(static_cast< int >(curly::greasy::HairStruct::blonde)));
  SWIG_Tcl_SetConstantObj(interp, "HairStruct_ginger", SWIG_From_int(static_cast< int >(curly::greasy::HairStruct::ginger)));
  SWIG_Tcl_SetConstantObj(interp, "Obscure_one", SWIG_From_int(static_cast< int >(Obscure::one)));
  SWIG_Tcl_SetConstantObj(interp, "Obscure_two", SWIG_From_int(static_cast< int >(Obscure::two)));
  SWIG_Tcl_SetConstantObj(interp, "Obscure_twoagain", SWIG_From_int(static_cast< int >(Obscure::twoagain)));
  SWIG_Tcl_SetConstantObj(interp, "globalinstance1", SWIG_From_int(static_cast< int >(globalinstance1)));
  SWIG_Tcl_SetConstantObj(interp, "globalinstance2", SWIG_From_int(static_cast< int >(globalinstance2)));
  SWIG_Tcl_SetConstantObj(interp, "globalinstance3", SWIG_From_int(static_cast< int >(globalinstance3)));
  SWIG_Tcl_SetConstantObj(interp, "Instances_memberinstance1", SWIG_From_int(static_cast< int >(Instances::memberinstance1)));
  SWIG_Tcl_SetConstantObj(interp, "Instances_memberinstance2", SWIG_From_int(static_cast< int >(Instances::memberinstance2)));
  SWIG_Tcl_SetConstantObj(interp, "Instances_memberinstance3", SWIG_From_int(static_cast< int >(Instances::memberinstance3)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreA_zero", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreA_zero)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreA_three", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreA_three)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreA_ten", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreA_ten)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreA_eleven", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreA_eleven)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreA_thirteen", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreA_thirteen)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreA_fourteen", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreA_fourteen)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreA_twenty", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreA_twenty)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreA_thirty", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreA_thirty)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreA_thirty_two", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreA_thirty_two)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreA_thirty_three", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreA_thirty_three)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreB_eleven", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreB_eleven)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreB_twelve", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreB_twelve)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreB_thirty_one", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreB_thirty_one)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreB_thirty_two", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreB_thirty_two)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreB_forty_one", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreB_forty_one)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreB_forty_two", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreB_forty_two)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreC_ten", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreC_ten)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreC_twelve", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreC_twelve)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreC_twenty", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreC_twenty)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreC_thirty", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreC_thirty)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreC_thirty_two", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreC_thirty_two)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreC_forty", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreC_forty)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreC_forty_two", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreC_forty_two)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreD_twenty_one", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreD_twenty_one)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreD_twenty_two", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreD_twenty_two)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreE_zero", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreE_zero)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreE_twenty_one", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreE_twenty_one)));
  SWIG_Tcl_SetConstantObj(interp, "IgnoreTest_ignoreE_twenty_two", SWIG_From_int(static_cast< int >(IgnoreTest::ignoreE_twenty_two)));
  SWIG_Tcl_SetConstantObj(interp, "one", SWIG_From_int(static_cast< int >(RepeatSpace::one)));
  SWIG_Tcl_SetConstantObj(interp, "initial", SWIG_From_int(static_cast< int >(RepeatSpace::initial)));
  SWIG_Tcl_SetConstantObj(interp, "two", SWIG_From_int(static_cast< int >(RepeatSpace::two)));
  SWIG_Tcl_SetConstantObj(interp, "three", SWIG_From_int(static_cast< int >(RepeatSpace::three)));
  SWIG_Tcl_SetConstantObj(interp, "llast", SWIG_From_int(static_cast< int >(RepeatSpace::llast)));
  SWIG_Tcl_SetConstantObj(interp, "end", SWIG_From_int(static_cast< int >(RepeatSpace::end)));
  SWIG_Tcl_SetConstantObj(interp, "typeint", SWIG_From_int(static_cast< int >(DifferentSpace::typeint)));
  SWIG_Tcl_SetConstantObj(interp, "typeboolfalse", SWIG_From_bool(static_cast< bool >(DifferentSpace::typeboolfalse)));
  SWIG_Tcl_SetConstantObj(interp, "typebooltrue", SWIG_From_bool(static_cast< bool >(DifferentSpace::typebooltrue)));
  SWIG_Tcl_SetConstantObj(interp, "typebooltwo", SWIG_From_int(static_cast< int >(DifferentSpace::typebooltwo)));
  SWIG_Tcl_SetConstantObj(interp, "typechar", SWIG_From_char(static_cast< char >(DifferentSpace::typechar)));
  SWIG_Tcl_SetConstantObj(interp, "typedefaultint", SWIG_From_int(static_cast< int >(DifferentSpace::typedefaultint)));
  SWIG_Tcl_SetConstantObj(interp, "global_typeint", SWIG_From_int(static_cast< int >(DifferentSpace::global_typeint)));
  SWIG_Tcl_SetConstantObj(interp, "global_typeboolfalse", SWIG_From_bool(static_cast< bool >(DifferentSpace::global_typeboolfalse)));
  SWIG_Tcl_SetConstantObj(interp, "global_typebooltrue", SWIG_From_bool(static_cast< bool >(DifferentSpace::global_typebooltrue)));
  SWIG_Tcl_SetConstantObj(interp, "global_typebooltwo", SWIG_From_int(static_cast< int >(DifferentSpace::global_typebooltwo)));
  SWIG_Tcl_SetConstantObj(interp, "global_typechar", SWIG_From_char(static_cast< char >(DifferentSpace::global_typechar)));
  SWIG_Tcl_SetConstantObj(interp, "global_typedefaultint", SWIG_From_int(static_cast< int >(DifferentSpace::global_typedefaultint)));
  SWIG_Tcl_SetConstantObj(interp, "typeint_noconst", SWIG_From_int(static_cast< int >(DifferentSpace::typeint_noconst)));
  SWIG_Tcl_SetConstantObj(interp, "typeboolfalse_noconst", SWIG_From_bool(static_cast< bool >(DifferentSpace::typeboolfalse_noconst)));
  SWIG_Tcl_SetConstantObj(interp, "typebooltrue_noconst", SWIG_From_bool(static_cast< bool >(DifferentSpace::typebooltrue_noconst)));
  SWIG_Tcl_SetConstantObj(interp, "typebooltwo_noconst", SWIG_From_int(static_cast< int >(DifferentSpace::typebooltwo_noconst)));
  SWIG_Tcl_SetConstantObj(interp, "typechar_noconst", SWIG_From_char(static_cast< char >(DifferentSpace::typechar_noconst)));
  SWIG_Tcl_SetConstantObj(interp, "typedefaultint_noconst", SWIG_From_int(static_cast< int >(DifferentSpace::typedefaultint_noconst)));
  SWIG_Tcl_SetConstantObj(interp, "global_typeint_noconst", SWIG_From_int(static_cast< int >(DifferentSpace::global_typeint_noconst)));
  SWIG_Tcl_SetConstantObj(interp, "global_typeboolfalse_noconst", SWIG_From_bool(static_cast< bool >(DifferentSpace::global_typeboolfalse_noconst)));
  SWIG_Tcl_SetConstantObj(interp, "global_typebooltrue_noconst", SWIG_From_bool(static_cast< bool >(DifferentSpace::global_typebooltrue_noconst)));
  SWIG_Tcl_SetConstantObj(interp, "global_typebooltwo_noconst", SWIG_From_int(static_cast< int >(DifferentSpace::global_typebooltwo_noconst)));
  SWIG_Tcl_SetConstantObj(interp, "global_typechar_noconst", SWIG_From_char(static_cast< char >(DifferentSpace::global_typechar_noconst)));
  SWIG_Tcl_SetConstantObj(interp, "global_typedefaultint_noconst", SWIG_From_int(static_cast< int >(DifferentSpace::global_typedefaultint_noconst)));
  return TCL_OK;
}
SWIGEXPORT int Enum_thorough_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

