/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGTCL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
  Tcl_HashTable       hashtable;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, TCL_GLOBAL_ONLY);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    Tcl_HashEntry* hashentry;
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    hashentry = Tcl_FindHashEntry(&(cls->hashtable), method);
    if (hashentry) {
        ClientData cd = Tcl_GetHashValue(hashentry);
        swig_wrapper method_wrapper = (swig_wrapper)cd;
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (method_wrapper)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if (thisvalue && (type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Foo swig_types[0]
#define SWIGTYPE_p_Test swig_types[1]
#define SWIGTYPE_p_TestDirector swig_types[2]
#define SWIGTYPE_p_a_5__char swig_types[3]
#define SWIGTYPE_p_char swig_types[4]
#define SWIGTYPE_p_unsigned_int swig_types[5]
static swig_type_info *swig_types[7];
static swig_module_info swig_module = {swig_types, 6, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Primitive_types_Init
#define SWIG_name    "primitive_types"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x020010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif

/* Compatibility version for TCL stubs */
#ifndef SWIG_TCL_STUBS_VERSION
#define SWIG_TCL_STUBS_VERSION "8.1"
#endif



#if defined(_MSC_VER)
  #pragma warning(disable: 4290) // C++ exception specification ignored except to indicate a function is not __declspec(nothrow)
#endif


#include <stddef.h>
#include <iostream>
#include <sstream>


  // Integer class, only visible in C++
  struct MyInt
  {
    char name[5];
    int val;

    MyInt(int v = 0): val(v) {
    }
    
    operator int() const { return val; }
  };

  // Template primitive type, only visible in C++
  template <class T>
  struct Param
  {
    char name[5];
    T val;

    Param(T v = 0): val(v) {
      name[0] = 0;
      name[1] = 0;
      name[2] = 0;
      name[3] = 0;
      name[4] = 0;
    }
    
    operator T() const { return val; }
  };

  typedef char namet[5];
  extern namet gbl_namet;
  namet gbl_namet;



  enum Hello {
    Hi, Hola
  };

  typedef char namet[5];
  typedef char* pchar;
  typedef const char* pcharc;
  typedef char* pint;

  char* const def_pchar = (char *const)"hello";
  const char* const def_pcharc = "hija";

  const namet def_namet = {'h','o',0, 'l','a'};

  extern namet gbl_namet;

  char fixsize[8] =  {'h','o',0, 'l','a', 0, 0, 0};


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast< int >(size)) : NULL;
}


SWIGINTERNINLINE Tcl_Obj * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(Tcl_Obj * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


  #define SWIG_From_bool   Tcl_NewBooleanObj 


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_signed_SS_char  (signed char value)
{    
  return SWIG_From_long  (value);
}


#include <stdio.h>
#if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
# ifndef snprintf
#  define snprintf _snprintf
# endif
#endif


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  if (value < (unsigned long) LONG_MAX) {
    return SWIG_From_long  (static_cast< long >(value));
  } else {
    char temp[256]; 
    sprintf(temp, "%lu", value);
    return Tcl_NewStringObj(temp,-1);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long_SS_long  (long long value)
{
  if (((long long) LONG_MIN <= value) && (value <= (long long) LONG_MAX)) {
    return SWIG_From_long  (static_cast< long >(value));
  } else {    
    char temp[256]; 
    sprintf(temp, "%lld", value);
    return Tcl_NewStringObj(temp,-1);
  }
}


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  if (value < (unsigned long long) LONG_MAX) {
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  } else {
    char temp[256]; 
    sprintf(temp, "%llu", value);
    return Tcl_NewStringObj(temp,-1);
  }
}


  #define SWIG_From_double   Tcl_NewDoubleObj 


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


  /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  bool val_bool(bool x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  signed char val_schar(signed char x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned char val_uchar(unsigned char x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  int val_int(int x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned int val_uint(unsigned int x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  short val_short(short x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned short val_ushort(unsigned short x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long val_long(long x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long val_ulong(unsigned long x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long long val_llong(long long x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long long val_ullong(unsigned long long x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  char val_char(char x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pchar val_pchar(pchar x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pcharc val_pcharc(pcharc x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pint val_pint(pint x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Hello val_hello(Hello x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  MyInt val_myint(MyInt x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<int> val_parami(Param<int> x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<double> val_paramd(Param<double> x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<char> val_paramc(Param<char> x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  size_t val_sizet(size_t x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
  /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const bool& ref_bool(const bool& x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const signed char& ref_schar(const signed char& x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned char& ref_uchar(const unsigned char& x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const int& ref_int(const int& x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned int& ref_uint(const unsigned int& x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const short& ref_short(const short& x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned short& ref_ushort(const unsigned short& x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long& ref_long(const long& x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long& ref_ulong(const unsigned long& x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long long& ref_llong(const long long& x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long long& ref_ullong(const unsigned long long& x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const char& ref_char(const char& x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pchar& ref_pchar(const pchar& x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pcharc& ref_pcharc(const pcharc& x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pint& ref_pint(const pint& x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Hello& ref_hello(const Hello& x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const MyInt& ref_myint(const MyInt& x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<int>& ref_parami(const Param<int>& x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<double>& ref_paramd(const Param<double>& x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<char>& ref_paramc(const Param<char>& x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const size_t& ref_sizet(const size_t& x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
  /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const bool cct_bool = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const signed char cct_schar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned char cct_uchar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const int cct_int = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned int cct_uint = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const short cct_short = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned short cct_ushort = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const long cct_long = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned long cct_ulong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const long long cct_llong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned long long cct_ullong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const char cct_char = 'H';
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const pchar cct_pchar = def_pchar;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const pcharc cct_pcharc = def_pcharc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const pint cct_pint = 0;
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const Hello cct_hello = Hola;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const MyInt cct_myint = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const Param<int> cct_parami = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const Param<double> cct_paramd = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const Param<char> cct_paramc = 'c';
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const size_t cct_sizet = 1;
/*@SWIG@*/
/*@SWIG@*/
  /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  bool var_bool;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  signed char var_schar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned char var_uchar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  int var_int;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned int var_uint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  short var_short;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned short var_ushort;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long var_long;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long var_ulong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long long var_llong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long long var_ullong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  char var_char;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pchar var_pchar;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pcharc var_pcharc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pint var_pint;
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Hello var_hello;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  MyInt var_myint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<int> var_parami;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<double> var_paramd;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<char> var_paramc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  size_t var_sizet;
/*@SWIG@*/
/*@SWIG@*/

  /*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  namet var_namet;
/*@SWIG@*/

  void var_init() 
  {
    var_pchar = 0;
    var_pcharc = 0;
    var_pint = 0;
    var_namet[0] = 'h';
  }
  


SWIGINTERN int
SWIG_AsVal_bool SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, bool *val)
{
  int v;
  if (Tcl_GetBooleanFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v ? true : false;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_signed_SS_char SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, signed char *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SCHAR_MIN || v > SCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< signed char >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, unsigned long *val) {
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (v >= 0) {
      if (val) *val = (unsigned long) v;
      return SWIG_OK;
    }
    /* If v is negative, then this could be a negative number, or an
       unsigned value which doesn't fit in a signed long, so try to
       get it as a string so we can distinguish these cases. */
  }
  {
    int len = 0;
    const char *nptr = Tcl_GetStringFromObj(obj, &len);
    if (nptr && len > 0) {
      char *endptr;
      unsigned long v;
      if (*nptr == '-') return SWIG_OverflowError;
      errno = 0;
      v = strtoul(nptr, &endptr,0);
      if (nptr[0] == '\0' || *endptr != '\0')
	return SWIG_TypeError;
      if (v == ULONG_MAX && errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_OK;
	}
      }
    }
  }
  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_short SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


SWIGINTERN int
SWIG_AsVal_long_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long long *val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = v;
    return SWIG_OK;
  } else {
    int len = 0;
    const char *nptr = Tcl_GetStringFromObj(obj, &len);
    if (nptr && len > 0) {
      char *endptr;
      long long v;
      errno = 0;
      v = strtoll(nptr, &endptr,0);
      if (nptr[0] == '\0' || *endptr != '\0')
	return SWIG_TypeError;
      if ((v == LLONG_MAX || v == LLONG_MIN) && errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_OK;
	}
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, unsigned long long *val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (unsigned long) v;
    return SWIG_OK;
  } else {
    int len = 0;
    const char *nptr = Tcl_GetStringFromObj(obj, &len);
    if (nptr && len > 0) {
      char *endptr;
      unsigned long long v;
      if (*nptr == '-') return SWIG_OverflowError;
      errno = 0;
      v = strtoull(nptr, &endptr,0);
      if (nptr[0] == '\0' || *endptr != '\0')
	return SWIG_TypeError;
      if (v == ULLONG_MAX && errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_OK;
	}
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}





SWIGINTERN int
SWIG_AsVal_double SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, double *val)
{
  double v;
  if (Tcl_GetDoubleFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  struct Foo
  {
    int _a;
    
    Foo (int a) : _a(a)
    {
    }
    
    Foo(const Foo&)
    {
    }

    Foo copy(Foo x) 
    {
      return x;
    }

    const Foo copy_c(const Foo x) 
    {
      return x;
    }

    const Foo& copy_r(const Foo& x) 
    {
      return x;
    }

    Foo* this_p() 
    {
      return this;
    }

    Foo& this_r() 
    {
      return *this;
    }
    
  };
  
  typedef Foo* foo_ptr;
  
  foo_ptr fptr_val(foo_ptr a) {
    return a;
  }

  const foo_ptr& fptr_ref(const foo_ptr& a) {
    return a;
  }
  
  
 struct Test 
 {
   Test()
     : var_pchar(0), var_pcharc(0), var_pint(0)
   {
   }

   virtual ~Test()
   {
   }
   
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const bool stc_bool = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const signed char stc_schar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned char stc_uchar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const int stc_int = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned int stc_uint = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const short stc_short = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned short stc_ushort = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const long stc_long = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned long stc_ulong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const long long stc_llong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned long long stc_ullong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const char stc_char = 'H';
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  bool var_bool;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  signed char var_schar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned char var_uchar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  int var_int;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned int var_uint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  short var_short;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned short var_ushort;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long var_long;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long var_ulong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long long var_llong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long long var_ullong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  char var_char;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pchar var_pchar;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pcharc var_pcharc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pint var_pint;
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Hello var_hello;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  MyInt var_myint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<int> var_parami;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<double> var_paramd;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<char> var_paramc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  size_t var_sizet;
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  namet var_namet;
/*@SWIG@*/


   const char* val_namet(namet x) throw(namet)
   {
     return x;
   }

   const char* val_cnamet(const namet x) throw(namet)
   {
     return x;
   }










   
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  bool val_bool(bool x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  signed char val_schar(signed char x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned char val_uchar(unsigned char x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  int val_int(int x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned int val_uint(unsigned int x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  short val_short(short x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned short val_ushort(unsigned short x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long val_long(long x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long val_ulong(unsigned long x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long long val_llong(long long x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long long val_ullong(unsigned long long x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  char val_char(char x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pchar val_pchar(pchar x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pcharc val_pcharc(pcharc x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pint val_pint(pint x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Hello val_hello(Hello x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  MyInt val_myint(MyInt x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<int> val_parami(Param<int> x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<double> val_paramd(Param<double> x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<char> val_paramc(Param<char> x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  size_t val_sizet(size_t x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const bool& ref_bool(const bool& x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const signed char& ref_schar(const signed char& x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned char& ref_uchar(const unsigned char& x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const int& ref_int(const int& x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned int& ref_uint(const unsigned int& x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const short& ref_short(const short& x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned short& ref_ushort(const unsigned short& x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long& ref_long(const long& x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long& ref_ulong(const unsigned long& x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long long& ref_llong(const long long& x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long long& ref_ullong(const unsigned long long& x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const char& ref_char(const char& x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pchar& ref_pchar(const pchar& x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pcharc& ref_pcharc(const pcharc& x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pint& ref_pint(const pint& x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Hello& ref_hello(const Hello& x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const MyInt& ref_myint(const MyInt& x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<int>& ref_parami(const Param<int>& x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<double>& ref_paramd(const Param<double>& x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<char>& ref_paramc(const Param<char>& x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const size_t& ref_sizet(const size_t& x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/

   int c_check() 
   {
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  bool val_tmpbool = 1;
  if (val_bool(val_tmpbool) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_bool(val_tmpbool);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  signed char val_tmpschar = 1;
  if (val_schar(val_tmpschar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_schar(val_tmpschar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned char val_tmpuchar = 1;
  if (val_uchar(val_tmpuchar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_uchar(val_tmpuchar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  int val_tmpint = 1;
  if (val_int(val_tmpint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_int(val_tmpint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned int val_tmpuint = 1;
  if (val_uint(val_tmpuint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_uint(val_tmpuint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  short val_tmpshort = 1;
  if (val_short(val_tmpshort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_short(val_tmpshort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned short val_tmpushort = 1;
  if (val_ushort(val_tmpushort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_ushort(val_tmpushort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long val_tmplong = 1;
  if (val_long(val_tmplong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_long(val_tmplong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long val_tmpulong = 1;
  if (val_ulong(val_tmpulong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_ulong(val_tmpulong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long long val_tmpllong = 1;
  if (val_llong(val_tmpllong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_llong(val_tmpllong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long long val_tmpullong = 1;
  if (val_ullong(val_tmpullong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_ullong(val_tmpullong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  char val_tmpchar = 'H';
  if (val_char(val_tmpchar) != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << val_char(val_tmpchar);
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pchar val_tmppchar = def_pchar;
  if (val_pchar(val_tmppchar) != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << val_pchar(val_tmppchar);
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pcharc val_tmppcharc = def_pcharc;
  if (val_pcharc(val_tmppcharc) != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << val_pcharc(val_tmppcharc);
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pint val_tmppint = 0;
  if (val_pint(val_tmppint) != 0) {
    std::ostringstream a; std::ostringstream b;
    a << val_pint(val_tmppint);
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Hello val_tmphello = Hola;
  if (val_hello(val_tmphello) != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << val_hello(val_tmphello);
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  MyInt val_tmpmyint = 1;
  if (val_myint(val_tmpmyint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_myint(val_tmpmyint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<int> val_tmpparami = 1;
  if (val_parami(val_tmpparami) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_parami(val_tmpparami);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<double> val_tmpparamd = 1;
  if (val_paramd(val_tmpparamd) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_paramd(val_tmpparamd);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<char> val_tmpparamc = 'c';
  if (val_paramc(val_tmpparamc) != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << val_paramc(val_tmpparamc);
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  size_t val_tmpsizet = 1;
  if (val_sizet(val_tmpsizet) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_sizet(val_tmpsizet);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  bool ref_tmpbool = 1;
  if (ref_bool(ref_tmpbool) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_bool(ref_tmpbool);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  signed char ref_tmpschar = 1;
  if (ref_schar(ref_tmpschar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_schar(ref_tmpschar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned char ref_tmpuchar = 1;
  if (ref_uchar(ref_tmpuchar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_uchar(ref_tmpuchar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  int ref_tmpint = 1;
  if (ref_int(ref_tmpint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_int(ref_tmpint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned int ref_tmpuint = 1;
  if (ref_uint(ref_tmpuint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_uint(ref_tmpuint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  short ref_tmpshort = 1;
  if (ref_short(ref_tmpshort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_short(ref_tmpshort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned short ref_tmpushort = 1;
  if (ref_ushort(ref_tmpushort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_ushort(ref_tmpushort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long ref_tmplong = 1;
  if (ref_long(ref_tmplong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_long(ref_tmplong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long ref_tmpulong = 1;
  if (ref_ulong(ref_tmpulong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_ulong(ref_tmpulong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long long ref_tmpllong = 1;
  if (ref_llong(ref_tmpllong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_llong(ref_tmpllong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long long ref_tmpullong = 1;
  if (ref_ullong(ref_tmpullong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_ullong(ref_tmpullong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  char ref_tmpchar = 'H';
  if (ref_char(ref_tmpchar) != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << ref_char(ref_tmpchar);
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pchar ref_tmppchar = def_pchar;
  if (ref_pchar(ref_tmppchar) != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << ref_pchar(ref_tmppchar);
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pcharc ref_tmppcharc = def_pcharc;
  if (ref_pcharc(ref_tmppcharc) != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << ref_pcharc(ref_tmppcharc);
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pint ref_tmppint = 0;
  if (ref_pint(ref_tmppint) != 0) {
    std::ostringstream a; std::ostringstream b;
    a << ref_pint(ref_tmppint);
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Hello ref_tmphello = Hola;
  if (ref_hello(ref_tmphello) != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << ref_hello(ref_tmphello);
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  MyInt ref_tmpmyint = 1;
  if (ref_myint(ref_tmpmyint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_myint(ref_tmpmyint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<int> ref_tmpparami = 1;
  if (ref_parami(ref_tmpparami) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_parami(ref_tmpparami);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<double> ref_tmpparamd = 1;
  if (ref_paramd(ref_tmpparamd) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_paramd(ref_tmpparamd);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<char> ref_tmpparamc = 'c';
  if (ref_paramc(ref_tmpparamc) != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << ref_paramc(ref_tmpparamc);
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  size_t ref_tmpsizet = 1;
  if (ref_sizet(ref_tmpsizet) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_sizet(ref_tmpsizet);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     return 1;
   }

   int v_check() 
   {
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << stc_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << var_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pchar != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << var_pchar;
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pcharc != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << var_pcharc;
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pint != 0) {
    std::ostringstream a; std::ostringstream b;
    a << var_pint;
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_hello != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << var_hello;
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_myint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_myint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_parami != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_parami;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramd != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_paramd;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramc != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << var_paramc;
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_sizet != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_sizet;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_namet != def_namet) {
    std::ostringstream a; std::ostringstream b;
    a << var_namet;
    b << def_namet;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""namet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/;
     return 1;
   }

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(bool x) { return 1; }
  virtual int ovr_ref(const bool& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(signed char x) { return 1; }
  virtual int ovr_ref(const signed char& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned char x) { return 1; }
  virtual int ovr_ref(const unsigned char& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(int x) { return 1; }
  virtual int ovr_ref(const int& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned int x) { return 1; }
  virtual int ovr_ref(const unsigned int& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(short x) { return 1; }
  virtual int ovr_ref(const short& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned short x) { return 1; }
  virtual int ovr_ref(const unsigned short& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(long x) { return 1; }
  virtual int ovr_ref(const long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned long x) { return 1; }
  virtual int ovr_ref(const unsigned long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(long long x) { return 1; }
  virtual int ovr_ref(const long long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned long long x) { return 1; }
  virtual int ovr_ref(const unsigned long long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(char x) { return 1; }
  virtual int ovr_ref(const char& x) { return 1; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(pchar x) { return 1; }
  virtual int ovr_ref(const pchar& x) { return 1; }
/*@SWIG@*/
/*@SWIG@*/

   static const double stc_double;
   static const double stc_float;
 };

 struct TestDirector
 {
   TestDirector()
     : var_pchar(0), var_pcharc(0), var_pint(0)
   {
   }

   
   virtual ~TestDirector()
   {
     var_namet[0]='h';
   }

   virtual const char* vval_namet(namet x) throw(namet)
   {
     return x;
   }

   virtual const char* vval_cnamet(const namet x) throw(namet)
   {
     return x;
   }











   /*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const bool stc_bool = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const signed char stc_schar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned char stc_uchar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const int stc_int = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned int stc_uint = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const short stc_short = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned short stc_ushort = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const long stc_long = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned long stc_ulong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const long long stc_llong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned long long stc_ullong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const char stc_char = 'H';
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  bool var_bool;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  signed char var_schar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned char var_uchar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  int var_int;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned int var_uint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  short var_short;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned short var_ushort;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long var_long;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long var_ulong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long long var_llong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long long var_ullong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  char var_char;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pchar var_pchar;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pcharc var_pcharc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pint var_pint;
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Hello var_hello;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  MyInt var_myint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<int> var_parami;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<double> var_paramd;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<char> var_paramc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  size_t var_sizet;
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  namet var_namet;
/*@SWIG@*/

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  bool val_bool(bool x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  signed char val_schar(signed char x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned char val_uchar(unsigned char x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  int val_int(int x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned int val_uint(unsigned int x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  short val_short(short x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned short val_ushort(unsigned short x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long val_long(long x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long val_ulong(unsigned long x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long long val_llong(long long x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long long val_ullong(unsigned long long x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  char val_char(char x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pchar val_pchar(pchar x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pcharc val_pcharc(pcharc x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pint val_pint(pint x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Hello val_hello(Hello x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  MyInt val_myint(MyInt x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<int> val_parami(Param<int> x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<double> val_paramd(Param<double> x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<char> val_paramc(Param<char> x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  size_t val_sizet(size_t x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const bool& ref_bool(const bool& x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const signed char& ref_schar(const signed char& x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned char& ref_uchar(const unsigned char& x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const int& ref_int(const int& x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned int& ref_uint(const unsigned int& x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const short& ref_short(const short& x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned short& ref_ushort(const unsigned short& x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long& ref_long(const long& x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long& ref_ulong(const unsigned long& x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long long& ref_llong(const long long& x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long long& ref_ullong(const unsigned long long& x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const char& ref_char(const char& x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pchar& ref_pchar(const pchar& x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pcharc& ref_pcharc(const pcharc& x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pint& ref_pint(const pint& x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Hello& ref_hello(const Hello& x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const MyInt& ref_myint(const MyInt& x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<int>& ref_parami(const Param<int>& x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<double>& ref_paramd(const Param<double>& x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<char>& ref_paramc(const Param<char>& x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const size_t& ref_sizet(const size_t& x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  bool vval_bool(bool x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  signed char vval_schar(signed char x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned char vval_uchar(unsigned char x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  int vval_int(int x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned int vval_uint(unsigned int x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  short vval_short(short x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned short vval_ushort(unsigned short x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long vval_long(long x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long vval_ulong(unsigned long x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long long vval_llong(long long x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long long vval_ullong(unsigned long long x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  char vval_char(char x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pchar vval_pchar(pchar x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pcharc vval_pcharc(pcharc x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pint vval_pint(pint x) throw (pint) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Hello vval_hello(Hello x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  MyInt vval_myint(MyInt x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<int> vval_parami(Param<int> x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<double> vval_paramd(Param<double> x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<char> vval_paramc(Param<char> x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  size_t vval_sizet(size_t x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const bool& vref_bool(const bool& x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const signed char& vref_schar(const signed char& x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned char& vref_uchar(const unsigned char& x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const int& vref_int(const int& x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned int& vref_uint(const unsigned int& x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const short& vref_short(const short& x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned short& vref_ushort(const unsigned short& x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long& vref_long(const long& x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long& vref_ulong(const unsigned long& x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long long& vref_llong(const long long& x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long long& vref_ullong(const unsigned long long& x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const char& vref_char(const char& x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pchar& vref_pchar(const pchar& x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pcharc& vref_pcharc(const pcharc& x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pint& vref_pint(const pint& x) throw (pint) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Hello& vref_hello(const Hello& x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const MyInt& vref_myint(const MyInt& x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<int>& vref_parami(const Param<int>& x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<double>& vref_paramd(const Param<double>& x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<char>& vref_paramc(const Param<char>& x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const size_t& vref_sizet(const size_t& x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  bool wrp_vref_bool(bool x) { 
    return vref_bool(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  signed char wrp_vref_schar(signed char x) { 
    return vref_schar(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned char wrp_vref_uchar(unsigned char x) { 
    return vref_uchar(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  int wrp_vref_int(int x) { 
    return vref_int(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned int wrp_vref_uint(unsigned int x) { 
    return vref_uint(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  short wrp_vref_short(short x) { 
    return vref_short(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned short wrp_vref_ushort(unsigned short x) { 
    return vref_ushort(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  long wrp_vref_long(long x) { 
    return vref_long(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned long wrp_vref_ulong(unsigned long x) { 
    return vref_ulong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  long long wrp_vref_llong(long long x) { 
    return vref_llong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned long long wrp_vref_ullong(unsigned long long x) { 
    return vref_ullong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  char wrp_vref_char(char x) { 
    return vref_char(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pchar wrp_vref_pchar(pchar x) { 
    return vref_pchar(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pcharc wrp_vref_pcharc(pcharc x) { 
    return vref_pcharc(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pint wrp_vref_pint(pint x) { 
    return vref_pint(x); 
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Hello wrp_vref_hello(Hello x) { 
    return vref_hello(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  MyInt wrp_vref_myint(MyInt x) { 
    return vref_myint(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<int> wrp_vref_parami(Param<int> x) { 
    return vref_parami(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<double> wrp_vref_paramd(Param<double> x) { 
    return vref_paramd(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<char> wrp_vref_paramc(Param<char> x) { 
    return vref_paramc(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  size_t wrp_vref_sizet(size_t x) { 
    return vref_sizet(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  bool wrp_vval_bool(bool x) { 
    return vval_bool(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  signed char wrp_vval_schar(signed char x) { 
    return vval_schar(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned char wrp_vval_uchar(unsigned char x) { 
    return vval_uchar(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  int wrp_vval_int(int x) { 
    return vval_int(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned int wrp_vval_uint(unsigned int x) { 
    return vval_uint(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  short wrp_vval_short(short x) { 
    return vval_short(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned short wrp_vval_ushort(unsigned short x) { 
    return vval_ushort(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  long wrp_vval_long(long x) { 
    return vval_long(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned long wrp_vval_ulong(unsigned long x) { 
    return vval_ulong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  long long wrp_vval_llong(long long x) { 
    return vval_llong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned long long wrp_vval_ullong(unsigned long long x) { 
    return vval_ullong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  char wrp_vval_char(char x) { 
    return vval_char(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pchar wrp_vval_pchar(pchar x) { 
    return vval_pchar(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pcharc wrp_vval_pcharc(pcharc x) { 
    return vval_pcharc(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pint wrp_vval_pint(pint x) { 
    return vval_pint(x); 
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Hello wrp_vval_hello(Hello x) { 
    return vval_hello(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  MyInt wrp_vval_myint(MyInt x) { 
    return vval_myint(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<int> wrp_vval_parami(Param<int> x) { 
    return vval_parami(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<double> wrp_vval_paramd(Param<double> x) { 
    return vval_paramd(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<char> wrp_vval_paramc(Param<char> x) { 
    return vval_paramc(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  size_t wrp_vval_sizet(size_t x) { 
    return vval_sizet(x); 
  }
/*@SWIG@*/
/*@SWIG@*/

   int c_check() 
   {
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  bool vval_tmpbool = 1;
  if (vval_bool(vval_tmpbool) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_bool(vval_tmpbool);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  signed char vval_tmpschar = 1;
  if (vval_schar(vval_tmpschar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_schar(vval_tmpschar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned char vval_tmpuchar = 1;
  if (vval_uchar(vval_tmpuchar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_uchar(vval_tmpuchar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  int vval_tmpint = 1;
  if (vval_int(vval_tmpint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_int(vval_tmpint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned int vval_tmpuint = 1;
  if (vval_uint(vval_tmpuint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_uint(vval_tmpuint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  short vval_tmpshort = 1;
  if (vval_short(vval_tmpshort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_short(vval_tmpshort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned short vval_tmpushort = 1;
  if (vval_ushort(vval_tmpushort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_ushort(vval_tmpushort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long vval_tmplong = 1;
  if (vval_long(vval_tmplong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_long(vval_tmplong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long vval_tmpulong = 1;
  if (vval_ulong(vval_tmpulong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_ulong(vval_tmpulong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long long vval_tmpllong = 1;
  if (vval_llong(vval_tmpllong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_llong(vval_tmpllong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long long vval_tmpullong = 1;
  if (vval_ullong(vval_tmpullong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_ullong(vval_tmpullong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  char vval_tmpchar = 'H';
  if (vval_char(vval_tmpchar) != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << vval_char(vval_tmpchar);
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pchar vval_tmppchar = def_pchar;
  if (vval_pchar(vval_tmppchar) != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << vval_pchar(vval_tmppchar);
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pcharc vval_tmppcharc = def_pcharc;
  if (vval_pcharc(vval_tmppcharc) != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << vval_pcharc(vval_tmppcharc);
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pint vval_tmppint = 0;
  if (vval_pint(vval_tmppint) != 0) {
    std::ostringstream a; std::ostringstream b;
    a << vval_pint(vval_tmppint);
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Hello vval_tmphello = Hola;
  if (vval_hello(vval_tmphello) != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << vval_hello(vval_tmphello);
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  MyInt vval_tmpmyint = 1;
  if (vval_myint(vval_tmpmyint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_myint(vval_tmpmyint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<int> vval_tmpparami = 1;
  if (vval_parami(vval_tmpparami) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_parami(vval_tmpparami);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<double> vval_tmpparamd = 1;
  if (vval_paramd(vval_tmpparamd) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_paramd(vval_tmpparamd);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<char> vval_tmpparamc = 'c';
  if (vval_paramc(vval_tmpparamc) != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << vval_paramc(vval_tmpparamc);
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  size_t vval_tmpsizet = 1;
  if (vval_sizet(vval_tmpsizet) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_sizet(vval_tmpsizet);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  bool vref_tmpbool = 1;
  if (vref_bool(vref_tmpbool) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_bool(vref_tmpbool);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  signed char vref_tmpschar = 1;
  if (vref_schar(vref_tmpschar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_schar(vref_tmpschar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned char vref_tmpuchar = 1;
  if (vref_uchar(vref_tmpuchar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_uchar(vref_tmpuchar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  int vref_tmpint = 1;
  if (vref_int(vref_tmpint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_int(vref_tmpint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned int vref_tmpuint = 1;
  if (vref_uint(vref_tmpuint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_uint(vref_tmpuint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  short vref_tmpshort = 1;
  if (vref_short(vref_tmpshort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_short(vref_tmpshort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned short vref_tmpushort = 1;
  if (vref_ushort(vref_tmpushort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_ushort(vref_tmpushort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long vref_tmplong = 1;
  if (vref_long(vref_tmplong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_long(vref_tmplong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long vref_tmpulong = 1;
  if (vref_ulong(vref_tmpulong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_ulong(vref_tmpulong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long long vref_tmpllong = 1;
  if (vref_llong(vref_tmpllong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_llong(vref_tmpllong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long long vref_tmpullong = 1;
  if (vref_ullong(vref_tmpullong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_ullong(vref_tmpullong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  char vref_tmpchar = 'H';
  if (vref_char(vref_tmpchar) != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << vref_char(vref_tmpchar);
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pchar vref_tmppchar = def_pchar;
  if (vref_pchar(vref_tmppchar) != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << vref_pchar(vref_tmppchar);
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pcharc vref_tmppcharc = def_pcharc;
  if (vref_pcharc(vref_tmppcharc) != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << vref_pcharc(vref_tmppcharc);
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pint vref_tmppint = 0;
  if (vref_pint(vref_tmppint) != 0) {
    std::ostringstream a; std::ostringstream b;
    a << vref_pint(vref_tmppint);
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Hello vref_tmphello = Hola;
  if (vref_hello(vref_tmphello) != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << vref_hello(vref_tmphello);
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  MyInt vref_tmpmyint = 1;
  if (vref_myint(vref_tmpmyint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_myint(vref_tmpmyint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<int> vref_tmpparami = 1;
  if (vref_parami(vref_tmpparami) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_parami(vref_tmpparami);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<double> vref_tmpparamd = 1;
  if (vref_paramd(vref_tmpparamd) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_paramd(vref_tmpparamd);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<char> vref_tmpparamc = 'c';
  if (vref_paramc(vref_tmpparamc) != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << vref_paramc(vref_tmpparamc);
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  size_t vref_tmpsizet = 1;
  if (vref_sizet(vref_tmpsizet) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_sizet(vref_tmpsizet);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     return 1;
   }

   int v_check() 
   {
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << stc_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << var_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pchar != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << var_pchar;
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pcharc != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << var_pcharc;
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pint != 0) {
    std::ostringstream a; std::ostringstream b;
    a << var_pint;
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_hello != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << var_hello;
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_myint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_myint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_parami != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_parami;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramd != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_paramd;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramc != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << var_paramc;
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_sizet != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_sizet;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     return 1;
   }

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(bool x) { return 1; }
  virtual int ovr_ref(const bool& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(signed char x) { return 1; }
  virtual int ovr_ref(const signed char& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned char x) { return 1; }
  virtual int ovr_ref(const unsigned char& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(int x) { return 1; }
  virtual int ovr_ref(const int& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned int x) { return 1; }
  virtual int ovr_ref(const unsigned int& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(short x) { return 1; }
  virtual int ovr_ref(const short& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned short x) { return 1; }
  virtual int ovr_ref(const unsigned short& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(long x) { return 1; }
  virtual int ovr_ref(const long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned long x) { return 1; }
  virtual int ovr_ref(const unsigned long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(long long x) { return 1; }
  virtual int ovr_ref(const long long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned long long x) { return 1; }
  virtual int ovr_ref(const unsigned long long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(char x) { return 1; }
  virtual int ovr_ref(const char& x) { return 1; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(pchar x) { return 1; }
  virtual int ovr_ref(const pchar& x) { return 1; }
/*@SWIG@*/
/*@SWIG@*/
   

   virtual Test* vtest(Test* t) const throw (Test)
   {
     return t;
   }
   
 }; 

 int v_check() 
 {
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << cct_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_pchar != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << cct_pchar;
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_pcharc != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << cct_pcharc;
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_pint != 0) {
    std::ostringstream a; std::ostringstream b;
    a << cct_pint;
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_hello != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << cct_hello;
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_myint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_myint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_parami != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_parami;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_paramd != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_paramd;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_paramc != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << cct_paramc;
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_sizet != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_sizet;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << var_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pchar != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << var_pchar;
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pcharc != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << var_pcharc;
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pint != 0) {
    std::ostringstream a; std::ostringstream b;
    a << var_pint;
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_hello != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << var_hello;
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_myint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_myint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_parami != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_parami;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramd != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_paramd;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramc != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << var_paramc;
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_sizet != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_sizet;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_namet != def_namet) {
    std::ostringstream a; std::ostringstream b;
    a << var_namet;
    b << def_namet;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""namet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/;
   return 1;
 }




  const char* char_foo(float f, const char *s) {
    return s;
  }
  
  int char_foo(double d, int i) {
    return i;
  }
  


#include <float.h>


SWIGINTERN int
SWIG_AsVal_float SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


  const double Test::stc_double = 1;
  const double Test::stc_float = 1;


    namespace DCTypes
    {
        typedef const unsigned int cuint;
    }

    namespace DCSystem
    {
        using namespace DCTypes;
        unsigned int SetPos(cuint& x, cuint& y) {return x + y;}
    }

    double val_double_2(double x, const double& y = 3.0) {
      return x + y;
    } 

    double val_double(double x) {
      return x;
    } 

    float val_float_2(float x, const float& y = 3.0) {
      return x + y;
    } 

    // Regression test for bug1699646 - we weren't handling
    // + or - after e for float constants.
    float regression_test_for_bug1699646(float f = 1e-02f) {
      return f;
    } 

    float val_float(float x) {
      return x;
    } 


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


  static char *new_pchar(size_t nelements) { 
    return (new char[nelements]);
  }

  static void delete_pchar(char *ary) {
    delete[] ary;
  }

  static char pchar_getitem(char *ary, size_t index) {
    return ary[index];
  }
  static void pchar_setitem(char *ary, size_t index, char value) {
    ary[index] = value;
  }

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN const char *_wrap_def_pchar_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_FromCharPtr(def_pchar);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *swig_readonly(ClientData clientData SWIGUNUSED, Tcl_Interp *interp SWIGUNUSED, char *name1 SWIGUNUSED, char *name2 SWIGUNUSED, int flags SWIGUNUSED) {
  return "Variable is read-only";
}


SWIGINTERN const char *_wrap_def_pcharc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_FromCharPtr(def_pcharc);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_def_namet_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  size_t size = 5;
  
  while (size && (def_namet[size - 1] == '\0')) --size;
  
  value = SWIG_FromCharPtrAndSize(def_namet, size);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_gbl_namet_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  size_t size = 5;
  
  while (size && (gbl_namet[size - 1] == '\0')) --size;
  
  value = SWIG_FromCharPtrAndSize(gbl_namet, size);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_gbl_namet_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    int res = SWIG_AsCharArray(value, gbl_namet, 5);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""gbl_namet""' of type '""char [5]""'");
    }
  }
  return NULL;
fail:
  return "gbl_namet";
}


SWIGINTERN const char *_wrap_fixsize_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_FromCharPtrAndSize(fixsize, 8);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_fixsize_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    int res = SWIG_AsCharArray(value, fixsize, 8);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""fixsize""' of type '""char [8]""'");
    }
  }
  return NULL;
fail:
  return "fixsize";
}


SWIGINTERN int
_wrap_val_bool(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_bool x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_bool" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  try {
    result = (bool)val_bool(arg1);
  }
  catch(bool &_e) {
    SWIG_Tcl_SetErrorObj(interp,"bool",SWIG_From_bool(static_cast< bool >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_schar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  signed char arg1 ;
  signed char val1 ;
  int ecode1 = 0 ;
  signed char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_schar x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_schar" "', argument " "1"" of type '" "signed char""'");
  } 
  arg1 = static_cast< signed char >(val1);
  try {
    result = (signed char)val_schar(arg1);
  }
  catch(signed char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"signed char",SWIG_From_signed_SS_char(static_cast< signed char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_signed_SS_char(static_cast< signed char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_uchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned char arg1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  unsigned char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_uchar x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_uchar" "', argument " "1"" of type '" "unsigned char""'");
  } 
  arg1 = static_cast< unsigned char >(val1);
  try {
    result = (unsigned char)val_uchar(arg1);
  }
  catch(unsigned char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned char",SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_int(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_int x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_int" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  try {
    result = (int)val_int(arg1);
  }
  catch(int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"int",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_uint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_uint x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_uint" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  try {
    result = (unsigned int)val_uint(arg1);
  }
  catch(unsigned int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned int",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_short(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  short arg1 ;
  short val1 ;
  int ecode1 = 0 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_short x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_short" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  try {
    result = (short)val_short(arg1);
  }
  catch(short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"short",SWIG_From_short(static_cast< short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_ushort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned short arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_ushort x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_ushort" "', argument " "1"" of type '" "unsigned short""'");
  } 
  arg1 = static_cast< unsigned short >(val1);
  try {
    result = (unsigned short)val_ushort(arg1);
  }
  catch(unsigned short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned short",SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_long(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_long x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_long" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  try {
    result = (long)val_long(arg1);
  }
  catch(long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long",SWIG_From_long(static_cast< long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_ulong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_ulong x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_ulong" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  try {
    result = (unsigned long)val_ulong(arg1);
  }
  catch(unsigned long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long",SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_llong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  long long arg1 ;
  long long val1 ;
  int ecode1 = 0 ;
  long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_llong x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_llong" "', argument " "1"" of type '" "long long""'");
  } 
  arg1 = static_cast< long long >(val1);
  try {
    result = (long long)val_llong(arg1);
  }
  catch(long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long long",SWIG_From_long_SS_long(static_cast< long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_ullong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned long long arg1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  unsigned long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_ullong x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_ullong" "', argument " "1"" of type '" "unsigned long long""'");
  } 
  arg1 = static_cast< unsigned long long >(val1);
  try {
    result = (unsigned long long)val_ullong(arg1);
  }
  catch(unsigned long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long long",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_char(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char arg1 ;
  char val1 ;
  int ecode1 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_char x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_char" "', argument " "1"" of type '" "char""'");
  } 
  arg1 = static_cast< char >(val1);
  try {
    result = (char)val_char(arg1);
  }
  catch(char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"char",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_pchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  pchar arg1 = (pchar) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  pchar result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_pchar x ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "val_pchar" "', argument " "1"" of type '" "pchar""'");
  }
  arg1 = reinterpret_cast< pchar >(buf1);
  try {
    result = (pchar)val_pchar(arg1);
  }
  catch(pchar _e) {
    SWIG_Tcl_SetErrorObj(interp,"pchar",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_pcharc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  pcharc arg1 = (pcharc) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  pcharc result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_pcharc x ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "val_pcharc" "', argument " "1"" of type '" "pcharc""'");
  }
  arg1 = reinterpret_cast< pcharc >(buf1);
  try {
    result = (pcharc)val_pcharc((char const *)arg1);
  }
  catch(pcharc _e) {
    SWIG_Tcl_SetErrorObj(interp,"pcharc",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_pint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  pint arg1 = (pint) 0 ;
  int res1 ;
  pint result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_pint x ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "val_pint" "', argument " "1"" of type '" "pint""'"); 
  }
  try {
    result = (pint)val_pint(arg1);
  }
  catch(pint _e) {
    SWIG_Tcl_SetErrorObj(interp,"pint",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_hello(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Hello arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Hello result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_hello x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_hello" "', argument " "1"" of type '" "Hello""'");
  } 
  arg1 = static_cast< Hello >(val1);
  try {
    result = (Hello)val_hello(arg1);
  }
  catch(Hello &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Hello",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_myint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MyInt arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  MyInt result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_myint x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_myint" "', argument " "1"" of type '" "MyInt""'");
  } 
  arg1 = static_cast< MyInt >(val1);
  try {
    result = val_myint(arg1);
  }
  catch(MyInt &_e) {
    SWIG_Tcl_SetErrorObj(interp,"MyInt",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_parami(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Param< int > arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Param< int > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_parami x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_parami" "', argument " "1"" of type '" "Param< int >""'");
  } 
  arg1 = static_cast< Param< int > >(val1);
  try {
    result = val_parami(arg1);
  }
  catch(Param< int > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< int >",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_paramd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Param< double > arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  Param< double > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_paramd x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_paramd" "', argument " "1"" of type '" "Param< double >""'");
  } 
  arg1 = static_cast< Param< double > >(val1);
  try {
    result = val_paramd(arg1);
  }
  catch(Param< double > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< double >",SWIG_From_double(static_cast< double >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_paramc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Param< char > arg1 ;
  char val1 ;
  int ecode1 = 0 ;
  Param< char > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_paramc x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_paramc" "', argument " "1"" of type '" "Param< char >""'");
  } 
  arg1 = static_cast< Param< char > >(val1);
  try {
    result = val_paramc(arg1);
  }
  catch(Param< char > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< char >",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_sizet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_sizet x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_sizet" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  try {
    result = val_sizet(arg1);
  }
  catch(size_t &_e) {
    SWIG_Tcl_SetErrorObj(interp,"size_t",SWIG_From_size_t(static_cast< size_t >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_bool(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool *arg1 = 0 ;
  bool temp1 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_bool x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_bool" "', argument " "1"" of type '" "bool""'");
  } 
  temp1 = static_cast< bool >(val1);
  arg1 = &temp1;
  try {
    result = (bool *) &ref_bool((bool const &)*arg1);
  }
  catch(bool &_e) {
    SWIG_Tcl_SetErrorObj(interp,"bool",SWIG_From_bool(static_cast< bool >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_schar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  signed char *arg1 = 0 ;
  signed char temp1 ;
  signed char val1 ;
  int ecode1 = 0 ;
  signed char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_schar x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_schar" "', argument " "1"" of type '" "signed char""'");
  } 
  temp1 = static_cast< signed char >(val1);
  arg1 = &temp1;
  try {
    result = (signed char *) &ref_schar((signed char const &)*arg1);
  }
  catch(signed char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"signed char",SWIG_From_signed_SS_char(static_cast< signed char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_signed_SS_char(static_cast< signed char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_uchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned char *arg1 = 0 ;
  unsigned char temp1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  unsigned char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_uchar x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_uchar" "', argument " "1"" of type '" "unsigned char""'");
  } 
  temp1 = static_cast< unsigned char >(val1);
  arg1 = &temp1;
  try {
    result = (unsigned char *) &ref_uchar((unsigned char const &)*arg1);
  }
  catch(unsigned char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned char",SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_int(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int *arg1 = 0 ;
  int temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  int *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_int x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_int" "', argument " "1"" of type '" "int""'");
  } 
  temp1 = static_cast< int >(val1);
  arg1 = &temp1;
  try {
    result = (int *) &ref_int((int const &)*arg1);
  }
  catch(int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"int",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_uint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_uint x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_uint" "', argument " "1"" of type '" "unsigned int""'");
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  try {
    result = (unsigned int *) &ref_uint((unsigned int const &)*arg1);
  }
  catch(unsigned int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned int",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_short(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  short *arg1 = 0 ;
  short temp1 ;
  short val1 ;
  int ecode1 = 0 ;
  short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_short x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_short" "', argument " "1"" of type '" "short""'");
  } 
  temp1 = static_cast< short >(val1);
  arg1 = &temp1;
  try {
    result = (short *) &ref_short((short const &)*arg1);
  }
  catch(short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"short",SWIG_From_short(static_cast< short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_ushort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned short *arg1 = 0 ;
  unsigned short temp1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_ushort x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_ushort" "', argument " "1"" of type '" "unsigned short""'");
  } 
  temp1 = static_cast< unsigned short >(val1);
  arg1 = &temp1;
  try {
    result = (unsigned short *) &ref_ushort((unsigned short const &)*arg1);
  }
  catch(unsigned short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned short",SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_long(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  long *arg1 = 0 ;
  long temp1 ;
  long val1 ;
  int ecode1 = 0 ;
  long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_long x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_long" "', argument " "1"" of type '" "long""'");
  } 
  temp1 = static_cast< long >(val1);
  arg1 = &temp1;
  try {
    result = (long *) &ref_long((long const &)*arg1);
  }
  catch(long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long",SWIG_From_long(static_cast< long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_ulong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned long *arg1 = 0 ;
  unsigned long temp1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_ulong x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_ulong" "', argument " "1"" of type '" "unsigned long""'");
  } 
  temp1 = static_cast< unsigned long >(val1);
  arg1 = &temp1;
  try {
    result = (unsigned long *) &ref_ulong((unsigned long const &)*arg1);
  }
  catch(unsigned long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long",SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_llong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  long long *arg1 = 0 ;
  long long temp1 ;
  long long val1 ;
  int ecode1 = 0 ;
  long long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_llong x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_llong" "', argument " "1"" of type '" "long long""'");
  } 
  temp1 = static_cast< long long >(val1);
  arg1 = &temp1;
  try {
    result = (long long *) &ref_llong((long long const &)*arg1);
  }
  catch(long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long long",SWIG_From_long_SS_long(static_cast< long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_ullong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned long long *arg1 = 0 ;
  unsigned long long temp1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  unsigned long long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_ullong x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_ullong" "', argument " "1"" of type '" "unsigned long long""'");
  } 
  temp1 = static_cast< unsigned long long >(val1);
  arg1 = &temp1;
  try {
    result = (unsigned long long *) &ref_ullong((unsigned long long const &)*arg1);
  }
  catch(unsigned long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long long",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_char(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = 0 ;
  char temp1 ;
  char val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_char x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_char" "', argument " "1"" of type '" "char""'");
  } 
  temp1 = static_cast< char >(val1);
  arg1 = &temp1;
  try {
    result = (char *) &ref_char((char const &)*arg1);
  }
  catch(char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"char",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_pchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  pchar *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pchar temp1 ;
  pchar *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_pchar x ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ref_pchar" "', argument " "1"" of type '" "pchar""'"); 
  }
  temp1 = reinterpret_cast< pchar >(argp1);
  arg1 = reinterpret_cast< pchar * >(&temp1);
  try {
    result = (pchar *) &ref_pchar((char *const &)*arg1);
  }
  catch(pchar _e) {
    SWIG_Tcl_SetErrorObj(interp,"pchar",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_pcharc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  pcharc *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pcharc temp1 ;
  pcharc *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_pcharc x ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ref_pcharc" "', argument " "1"" of type '" "pcharc""'"); 
  }
  temp1 = reinterpret_cast< pcharc >(argp1);
  arg1 = reinterpret_cast< pcharc * >(&temp1);
  try {
    result = (pcharc *) &ref_pcharc((char const *const &)*arg1);
  }
  catch(pcharc _e) {
    SWIG_Tcl_SetErrorObj(interp,"pcharc",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_pint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  pint *arg1 = 0 ;
  pint temp1 = 0 ;
  int res1 ;
  pint *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_pint x ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], SWIG_as_voidptrptr(&temp1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ref_pint" "', argument " "1"" of type '" "Stype""'"); 
  }
  arg1 =  &temp1;
  try {
    result = (pint *) &ref_pint((char *const &)*arg1);
  }
  catch(pint _e) {
    SWIG_Tcl_SetErrorObj(interp,"pint",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_hello(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Hello *arg1 = 0 ;
  int val1 ;
  int ecode1 ;
  Hello temp1 ;
  Hello *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_hello x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_hello" "', argument " "1"" of type '" "Hello const &""'");
  } else {
    temp1 = static_cast< Hello >(val1);
    arg1 = &temp1;
  }
  try {
    result = (Hello *) &ref_hello((enum Hello const &)*arg1);
  }
  catch(Hello &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Hello",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_myint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MyInt *arg1 = 0 ;
  MyInt temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  MyInt *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_myint x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_myint" "', argument " "1"" of type '" "MyInt""'");
  } 
  temp1 = static_cast< MyInt >(val1);
  arg1 = &temp1;
  try {
    result = (MyInt *) &ref_myint((MyInt const &)*arg1);
  }
  catch(MyInt &_e) {
    SWIG_Tcl_SetErrorObj(interp,"MyInt",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_parami(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Param< int > *arg1 = 0 ;
  Param< int > temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  Param< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_parami x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_parami" "', argument " "1"" of type '" "Param< int >""'");
  } 
  temp1 = static_cast< Param< int > >(val1);
  arg1 = &temp1;
  try {
    result = (Param< int > *) &ref_parami((Param< int > const &)*arg1);
  }
  catch(Param< int > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< int >",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_paramd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Param< double > *arg1 = 0 ;
  Param< double > temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  Param< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_paramd x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_paramd" "', argument " "1"" of type '" "Param< double >""'");
  } 
  temp1 = static_cast< Param< double > >(val1);
  arg1 = &temp1;
  try {
    result = (Param< double > *) &ref_paramd((Param< double > const &)*arg1);
  }
  catch(Param< double > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< double >",SWIG_From_double(static_cast< double >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_paramc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Param< char > *arg1 = 0 ;
  Param< char > temp1 ;
  char val1 ;
  int ecode1 = 0 ;
  Param< char > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_paramc x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_paramc" "', argument " "1"" of type '" "Param< char >""'");
  } 
  temp1 = static_cast< Param< char > >(val1);
  arg1 = &temp1;
  try {
    result = (Param< char > *) &ref_paramc((Param< char > const &)*arg1);
  }
  catch(Param< char > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< char >",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_sizet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  size_t *arg1 = 0 ;
  size_t temp1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ref_sizet x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_sizet" "', argument " "1"" of type '" "size_t""'");
  } 
  temp1 = static_cast< size_t >(val1);
  arg1 = &temp1;
  try {
    result = (size_t *) &ref_sizet((size_t const &)*arg1);
  }
  catch(size_t &_e) {
    SWIG_Tcl_SetErrorObj(interp,"size_t",SWIG_From_size_t(static_cast< size_t >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN const char *_wrap_cct_bool_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_bool(static_cast< bool >(cct_bool));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_schar_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_signed_SS_char(static_cast< signed char >(cct_schar));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_uchar_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(cct_uchar));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_int_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(cct_int));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_uint_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(cct_uint));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_short_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_short(static_cast< short >(cct_short));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_ushort_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(cct_ushort));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_long_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_long(static_cast< long >(cct_long));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_ulong_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(cct_ulong));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_llong_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_long_SS_long(static_cast< long long >(cct_llong));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_ullong_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(cct_ullong));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_char_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_char(static_cast< char >(cct_char));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_pchar_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_FromCharPtr(cct_pchar);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_pcharc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_FromCharPtr(cct_pcharc);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_pint_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_FromCharPtr(cct_pint);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_hello_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(cct_hello));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_myint_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(cct_myint));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_parami_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(cct_parami));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_paramd_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_double(static_cast< double >(cct_paramd));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_paramc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_char(static_cast< char >(cct_paramc));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_cct_sizet_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_size_t(static_cast< size_t >(cct_sizet));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_bool_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_bool(static_cast< bool >(var_bool));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_bool_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    bool val;
    int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_bool""' of type '""bool""'");
    }
    var_bool = static_cast< bool >(val);
  }
  return NULL;
fail:
  return "var_bool";
}


SWIGINTERN const char *_wrap_var_schar_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_signed_SS_char(static_cast< signed char >(var_schar));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_schar_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    signed char val;
    int res = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_schar""' of type '""signed char""'");
    }
    var_schar = static_cast< signed char >(val);
  }
  return NULL;
fail:
  return "var_schar";
}


SWIGINTERN const char *_wrap_var_uchar_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(var_uchar));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_uchar_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    unsigned char val;
    int res = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_uchar""' of type '""unsigned char""'");
    }
    var_uchar = static_cast< unsigned char >(val);
  }
  return NULL;
fail:
  return "var_uchar";
}


SWIGINTERN const char *_wrap_var_int_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(var_int));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_int_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    int val;
    int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_int""' of type '""int""'");
    }
    var_int = static_cast< int >(val);
  }
  return NULL;
fail:
  return "var_int";
}


SWIGINTERN const char *_wrap_var_uint_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(var_uint));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_uint_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    unsigned int val;
    int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_uint""' of type '""unsigned int""'");
    }
    var_uint = static_cast< unsigned int >(val);
  }
  return NULL;
fail:
  return "var_uint";
}


SWIGINTERN const char *_wrap_var_short_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_short(static_cast< short >(var_short));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_short_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    short val;
    int res = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_short""' of type '""short""'");
    }
    var_short = static_cast< short >(val);
  }
  return NULL;
fail:
  return "var_short";
}


SWIGINTERN const char *_wrap_var_ushort_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(var_ushort));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_ushort_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    unsigned short val;
    int res = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_ushort""' of type '""unsigned short""'");
    }
    var_ushort = static_cast< unsigned short >(val);
  }
  return NULL;
fail:
  return "var_ushort";
}


SWIGINTERN const char *_wrap_var_long_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_long(static_cast< long >(var_long));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_long_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    long val;
    int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_long""' of type '""long""'");
    }
    var_long = static_cast< long >(val);
  }
  return NULL;
fail:
  return "var_long";
}


SWIGINTERN const char *_wrap_var_ulong_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(var_ulong));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_ulong_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    unsigned long val;
    int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_ulong""' of type '""unsigned long""'");
    }
    var_ulong = static_cast< unsigned long >(val);
  }
  return NULL;
fail:
  return "var_ulong";
}


SWIGINTERN const char *_wrap_var_llong_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_long_SS_long(static_cast< long long >(var_llong));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_llong_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    long long val;
    int res = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_llong""' of type '""long long""'");
    }
    var_llong = static_cast< long long >(val);
  }
  return NULL;
fail:
  return "var_llong";
}


SWIGINTERN const char *_wrap_var_ullong_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(var_ullong));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_ullong_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    unsigned long long val;
    int res = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_ullong""' of type '""unsigned long long""'");
    }
    var_ullong = static_cast< unsigned long long >(val);
  }
  return NULL;
fail:
  return "var_ullong";
}


SWIGINTERN const char *_wrap_var_char_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_char(static_cast< char >(var_char));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_char_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    char val;
    int res = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_char""' of type '""char""'");
    }
    var_char = static_cast< char >(val);
  }
  return NULL;
fail:
  return "var_char";
}


SWIGINTERN const char *_wrap_var_pchar_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_FromCharPtr(var_pchar);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_pchar_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(value, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_pchar""' of type '""pchar""'");
    }
    if (var_pchar) delete[] var_pchar;
    if (alloc == SWIG_NEWOBJ) {
      var_pchar = cptr;
    } else {
      var_pchar = csize ? (pchar)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return NULL;
fail:
  return "var_pchar";
}


SWIGINTERN const char *_wrap_var_pcharc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_FromCharPtr(var_pcharc);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_pcharc_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(value, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_pcharc""' of type '""pcharc""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      var_pcharc = cptr;
    } else {
      var_pcharc = csize ? (pcharc)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return NULL;
fail:
  return "var_pcharc";
}


SWIGINTERN const char *_wrap_var_pint_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_FromCharPtr(var_pint);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_pint_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *temp = 0;
    int res = SWIG_ConvertPtr(value, &temp, 0, SWIG_POINTER_DISOWN);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_pint""' of type '""pint""'");
    }
    var_pint = (pint) temp;
  }
  return NULL;
fail:
  return "var_pint";
}


SWIGINTERN const char *_wrap_var_hello_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(var_hello));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_hello_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  if (sizeof(int) != sizeof(var_hello)) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""arch, read-only var_hello""' of type '""Hello""'");
  }  else {
    int ecode = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(value, reinterpret_cast< int* >(&var_hello));
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in variable '""var_hello""' of type '""Hello""'");
    }
  }
  return NULL;
fail:
  return "var_hello";
}


SWIGINTERN const char *_wrap_var_myint_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(var_myint));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_myint_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    int val;
    int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_myint""' of type '""MyInt""'");
    }
    var_myint = static_cast< MyInt >(val);
  }
  return NULL;
fail:
  return "var_myint";
}


SWIGINTERN const char *_wrap_var_parami_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(var_parami));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_parami_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    int val;
    int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_parami""' of type '""Param< int >""'");
    }
    var_parami = static_cast< Param< int > >(val);
  }
  return NULL;
fail:
  return "var_parami";
}


SWIGINTERN const char *_wrap_var_paramd_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_double(static_cast< double >(var_paramd));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_paramd_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    double val;
    int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_paramd""' of type '""Param< double >""'");
    }
    var_paramd = static_cast< Param< double > >(val);
  }
  return NULL;
fail:
  return "var_paramd";
}


SWIGINTERN const char *_wrap_var_paramc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_char(static_cast< char >(var_paramc));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_paramc_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    char val;
    int res = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_paramc""' of type '""Param< char >""'");
    }
    var_paramc = static_cast< Param< char > >(val);
  }
  return NULL;
fail:
  return "var_paramc";
}


SWIGINTERN const char *_wrap_var_sizet_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_size_t(static_cast< size_t >(var_sizet));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_sizet_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    size_t val;
    int res = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_sizet""' of type '""size_t""'");
    }
    var_sizet = static_cast< size_t >(val);
  }
  return NULL;
fail:
  return "var_sizet";
}


SWIGINTERN const char *_wrap_var_namet_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  size_t size = 5;
  
  while (size && (var_namet[size - 1] == '\0')) --size;
  
  value = SWIG_FromCharPtrAndSize(var_namet, size);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_var_namet_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    int res = SWIG_AsCharArray(value, var_namet, 5);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_namet""' of type '""char [5]""'");
    }
  }
  return NULL;
fail:
  return "var_namet";
}


SWIGINTERN int
_wrap_var_init(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":var_init ") == TCL_ERROR) SWIG_fail;
  var_init();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Foo__a_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Foo__a_set self _a ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo__a_set" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Foo__a_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_a = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Foo__a_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Foo *arg1 = (Foo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Foo__a_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo__a_get" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  result = (int) ((arg1)->_a);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Foo__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Foo *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Foo a ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Foo" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (Foo *)new Foo(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Foo,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Foo__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Foo *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Foo *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Foo Foo const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_Foo,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Foo" "', argument " "1"" of type '" "Foo const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Foo" "', argument " "1"" of type '" "Foo const &""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  result = (Foo *)new Foo((Foo const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Foo,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Foo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Foo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Foo__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Foo__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_Foo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Foo::Foo(int)\n"
    "    Foo::Foo(Foo const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Foo_copy(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Foo *arg1 = (Foo *) 0 ;
  SwigValueWrapper< Foo > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Foo > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Foo_copy self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_copy" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Foo,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Foo_copy" "', argument " "2"" of type '" "Foo""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Foo_copy" "', argument " "2"" of type '" "Foo""'");
    } else {
      arg2 = *(reinterpret_cast< Foo * >(argp2));
    }
  }
  result = (arg1)->copy(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new Foo(static_cast< const Foo& >(result))), SWIGTYPE_p_Foo, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Foo_copy_c(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Foo *arg1 = (Foo *) 0 ;
  SwigValueWrapper< Foo > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< Foo > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Foo_copy_c self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_copy_c" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Foo,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Foo_copy_c" "', argument " "2"" of type '" "Foo const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Foo_copy_c" "', argument " "2"" of type '" "Foo const""'");
    } else {
      arg2 = *(reinterpret_cast< Foo * >(argp2));
    }
  }
  result = (arg1)->copy_c(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new Foo(static_cast< const Foo& >(result))), SWIGTYPE_p_Foo, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Foo_copy_r(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Foo *arg1 = (Foo *) 0 ;
  Foo *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Foo *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Foo_copy_r self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_copy_r" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Foo,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Foo_copy_r" "', argument " "2"" of type '" "Foo const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Foo_copy_r" "', argument " "2"" of type '" "Foo const &""'"); 
  }
  arg2 = reinterpret_cast< Foo * >(argp2);
  result = (Foo *) &(arg1)->copy_r((Foo const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Foo,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Foo_this_p(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Foo *arg1 = (Foo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Foo *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Foo_this_p self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_this_p" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  result = (Foo *)(arg1)->this_p();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Foo,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Foo_this_r(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Foo *arg1 = (Foo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Foo *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Foo_this_r self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_this_r" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  result = (Foo *) &(arg1)->this_r();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Foo,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Foo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Foo *arg1 = (Foo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Foo self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Foo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Foo" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Foo(void *obj) {
Foo *arg1 = (Foo *) obj;
delete arg1;
}
static swig_method swig_Foo_methods[] = {
    {"copy", _wrap_Foo_copy}, 
    {"copy_c", _wrap_Foo_copy_c}, 
    {"copy_r", _wrap_Foo_copy_r}, 
    {"this_p", _wrap_Foo_this_p}, 
    {"this_r", _wrap_Foo_this_r}, 
    {0,0}
};
static swig_attribute swig_Foo_attributes[] = {
    { "-_a",_wrap_Foo__a_get, _wrap_Foo__a_set},
    {0,0,0}
};
static swig_class *swig_Foo_bases[] = {0};
static const char * swig_Foo_base_names[] = {0};
static swig_class _wrap_class_Foo = { "Foo", &SWIGTYPE_p_Foo,_wrap_new_Foo, swig_delete_Foo, swig_Foo_methods, swig_Foo_attributes, swig_Foo_bases,swig_Foo_base_names, &swig_module };
SWIGINTERN int
_wrap_fptr_val(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  foo_ptr arg1 = (foo_ptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  foo_ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:fptr_val a ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fptr_val" "', argument " "1"" of type '" "foo_ptr""'"); 
  }
  arg1 = reinterpret_cast< foo_ptr >(argp1);
  result = (foo_ptr)fptr_val(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Foo,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_fptr_ref(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  foo_ptr *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  foo_ptr temp1 ;
  foo_ptr *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:fptr_ref a ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fptr_ref" "', argument " "1"" of type '" "foo_ptr""'"); 
  }
  temp1 = reinterpret_cast< foo_ptr >(argp1);
  arg1 = reinterpret_cast< foo_ptr * >(&temp1);
  result = (foo_ptr *) &fptr_ref((Foo *const &)*arg1);
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_Foo, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Test(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Test ") == TCL_ERROR) SWIG_fail;
  result = (Test *)new Test();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Test,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Test(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Test self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Test" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_bool_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_bool_set self var_bool ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_bool_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_bool_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->var_bool = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_bool_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_bool_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_bool_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (bool) ((arg1)->var_bool);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_schar_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_schar_set self var_schar ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_schar_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_schar_set" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  if (arg1) (arg1)->var_schar = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_schar_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_schar_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_schar_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (signed char) ((arg1)->var_schar);
  Tcl_SetObjResult(interp,SWIG_From_signed_SS_char(static_cast< signed char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_uchar_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_uchar_set self var_uchar ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_uchar_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_uchar_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  if (arg1) (arg1)->var_uchar = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_uchar_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_uchar_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_uchar_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (unsigned char) ((arg1)->var_uchar);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_int_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_int_set self var_int ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_int_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_int_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->var_int = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_int_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_int_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_int_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (int) ((arg1)->var_int);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_uint_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_uint_set self var_uint ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_uint_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_uint_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->var_uint = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_uint_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_uint_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_uint_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (unsigned int) ((arg1)->var_uint);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_short_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_short_set self var_short ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_short_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_short_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->var_short = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_short_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_short_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_short_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (short) ((arg1)->var_short);
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_ushort_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_ushort_set self var_ushort ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ushort_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_ushort_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->var_ushort = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_ushort_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_ushort_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ushort_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (unsigned short) ((arg1)->var_ushort);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_long_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_long_set self var_long ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_long_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_long_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->var_long = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_long_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_long_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_long_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (long) ((arg1)->var_long);
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_ulong_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_ulong_set self var_ulong ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ulong_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_ulong_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  if (arg1) (arg1)->var_ulong = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_ulong_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_ulong_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ulong_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (unsigned long) ((arg1)->var_ulong);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_llong_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_llong_set self var_llong ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_llong_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_llong_set" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  if (arg1) (arg1)->var_llong = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_llong_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_llong_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_llong_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (long long) ((arg1)->var_llong);
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_ullong_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_ullong_set self var_ullong ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ullong_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_ullong_set" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  if (arg1) (arg1)->var_ullong = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_ullong_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_ullong_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ullong_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (unsigned long long) ((arg1)->var_ullong);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_char_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_char_set self var_char ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_char_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_char_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->var_char = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_char_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_char_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_char_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (char) ((arg1)->var_char);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_pchar_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_pchar_set self var_pchar ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pchar_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_var_pchar_set" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  if (arg1->var_pchar) delete[] arg1->var_pchar;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->var_pchar = (pchar)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->var_pchar = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_pchar_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pchar result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_pchar_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pchar_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (pchar) ((arg1)->var_pchar);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_pcharc_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_pcharc_set self var_pcharc ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pcharc_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_var_pcharc_set" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->var_pcharc = (pcharc)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->var_pcharc = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_pcharc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pcharc result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_pcharc_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pcharc_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (pcharc) ((arg1)->var_pcharc);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_pint_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_pint_set self var_pint ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pint_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2],SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_var_pint_set" "', argument " "2"" of type '" "pint""'"); 
  }
  if (arg1->var_pint) delete[] arg1->var_pint;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->var_pint = (pint)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->var_pint = 0;
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_pint_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pint result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_pint_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pint_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (pint) ((arg1)->var_pint);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_hello_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_hello_set self var_hello ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_hello_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_hello_set" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  if (arg1) (arg1)->var_hello = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_hello_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Hello result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_hello_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_hello_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (Hello) ((arg1)->var_hello);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_myint_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_myint_set self var_myint ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_myint_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_myint_set" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  if (arg1) (arg1)->var_myint = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_myint_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MyInt result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_myint_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_myint_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result =  ((arg1)->var_myint);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_parami_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_parami_set self var_parami ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_parami_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_parami_set" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  if (arg1) (arg1)->var_parami = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_parami_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< int > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_parami_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_parami_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result =  ((arg1)->var_parami);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_paramd_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_paramd_set self var_paramd ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_paramd_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_paramd_set" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  if (arg1) (arg1)->var_paramd = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_paramd_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< double > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_paramd_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_paramd_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result =  ((arg1)->var_paramd);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_paramc_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_paramc_set self var_paramc ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_paramc_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_paramc_set" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  if (arg1) (arg1)->var_paramc = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_paramc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< char > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_paramc_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_paramc_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result =  ((arg1)->var_paramc);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_sizet_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_sizet_set self var_sizet ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_sizet_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_sizet_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->var_sizet = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_sizet_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_sizet_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_sizet_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result =  ((arg1)->var_sizet);
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_namet_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_var_namet_set self var_namet ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_namet_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_var_namet_set" "', argument " "2"" of type '" "char [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->var_namet,arg2,5*sizeof(char));
  else memset(arg1->var_namet,0,5*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_var_namet_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_var_namet_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_namet_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (char *) ((arg1)->var_namet);
  {
    size_t size = 5;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_namet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_namet self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_namet" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_namet" "', argument " "2"" of type '" "char [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  try {
    result = (char *)(arg1)->val_namet(arg2);
  }
  catch(namet _e) {
    {
      size_t size = 5;
      
      while (size && (_e[size - 1] == '\0')) --size;
      
      SWIG_Tcl_SetErrorObj(interp,"char [5]",SWIG_FromCharPtrAndSize(_e, size)); SWIG_fail; 
    }
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_cnamet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_cnamet self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_cnamet" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_cnamet" "', argument " "2"" of type '" "char const [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  try {
    result = (char *)(arg1)->val_cnamet(arg2);
  }
  catch(namet _e) {
    {
      size_t size = 5;
      
      while (size && (_e[size - 1] == '\0')) --size;
      
      SWIG_Tcl_SetErrorObj(interp,"char [5]",SWIG_FromCharPtrAndSize(_e, size)); SWIG_fail; 
    }
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_bool(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_bool self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_bool" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_bool" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  try {
    result = (bool)(arg1)->val_bool(arg2);
  }
  catch(bool &_e) {
    SWIG_Tcl_SetErrorObj(interp,"bool",SWIG_From_bool(static_cast< bool >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_schar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_schar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_schar" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  try {
    result = (signed char)(arg1)->val_schar(arg2);
  }
  catch(signed char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"signed char",SWIG_From_signed_SS_char(static_cast< signed char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_signed_SS_char(static_cast< signed char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_uchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_uchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_uchar" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  try {
    result = (unsigned char)(arg1)->val_uchar(arg2);
  }
  catch(unsigned char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned char",SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_int(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_int self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_int" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (int)(arg1)->val_int(arg2);
  }
  catch(int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"int",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_uint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_uint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_uint" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  try {
    result = (unsigned int)(arg1)->val_uint(arg2);
  }
  catch(unsigned int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned int",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_short(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_short self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_short" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_short" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  try {
    result = (short)(arg1)->val_short(arg2);
  }
  catch(short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"short",SWIG_From_short(static_cast< short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_ushort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_ushort self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_ushort" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  try {
    result = (unsigned short)(arg1)->val_ushort(arg2);
  }
  catch(unsigned short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned short",SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_long(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_long self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_long" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_long" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  try {
    result = (long)(arg1)->val_long(arg2);
  }
  catch(long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long",SWIG_From_long(static_cast< long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_ulong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_ulong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_ulong" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  try {
    result = (unsigned long)(arg1)->val_ulong(arg2);
  }
  catch(unsigned long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long",SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_llong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_llong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_llong" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_llong" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  try {
    result = (long long)(arg1)->val_llong(arg2);
  }
  catch(long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long long",SWIG_From_long_SS_long(static_cast< long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_ullong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_ullong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_ullong" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  try {
    result = (unsigned long long)(arg1)->val_ullong(arg2);
  }
  catch(unsigned long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long long",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_char(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_char self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_char" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_char" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  try {
    result = (char)(arg1)->val_char(arg2);
  }
  catch(char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"char",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_pchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  pchar result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_pchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_pchar" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_pchar" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  try {
    result = (pchar)(arg1)->val_pchar(arg2);
  }
  catch(pchar _e) {
    SWIG_Tcl_SetErrorObj(interp,"pchar",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_pcharc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  pcharc result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_pcharc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_pcharc" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_pcharc" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  try {
    result = (pcharc)(arg1)->val_pcharc(arg2);
  }
  catch(pcharc _e) {
    SWIG_Tcl_SetErrorObj(interp,"pcharc",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_pint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  pint result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_pint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_pint" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_pint" "', argument " "2"" of type '" "pint""'"); 
  }
  try {
    result = (pint)(arg1)->val_pint(arg2);
  }
  catch(pint _e) {
    SWIG_Tcl_SetErrorObj(interp,"pint",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_hello(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Hello result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_hello self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_hello" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_hello" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  try {
    result = (Hello)(arg1)->val_hello(arg2);
  }
  catch(Hello &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Hello",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_myint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  MyInt result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_myint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_myint" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  try {
    result = (arg1)->val_myint(arg2);
  }
  catch(MyInt &_e) {
    SWIG_Tcl_SetErrorObj(interp,"MyInt",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_parami(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Param< int > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_parami self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_parami" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  try {
    result = (arg1)->val_parami(arg2);
  }
  catch(Param< int > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< int >",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_paramd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Param< double > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_paramd self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_paramd" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  try {
    result = (arg1)->val_paramd(arg2);
  }
  catch(Param< double > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< double >",SWIG_From_double(static_cast< double >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_paramc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  Param< char > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_paramc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_paramc" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  try {
    result = (arg1)->val_paramc(arg2);
  }
  catch(Param< char > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< char >",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_val_sizet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_val_sizet self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_sizet" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (arg1)->val_sizet(arg2);
  }
  catch(size_t &_e) {
    SWIG_Tcl_SetErrorObj(interp,"size_t",SWIG_From_size_t(static_cast< size_t >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_bool(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_bool self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_bool" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_bool" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  try {
    result = (bool *) &(arg1)->ref_bool((bool const &)*arg2);
  }
  catch(bool &_e) {
    SWIG_Tcl_SetErrorObj(interp,"bool",SWIG_From_bool(static_cast< bool >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_schar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  signed char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char temp2 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_schar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_schar" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  temp2 = static_cast< signed char >(val2);
  arg2 = &temp2;
  try {
    result = (signed char *) &(arg1)->ref_schar((signed char const &)*arg2);
  }
  catch(signed char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"signed char",SWIG_From_signed_SS_char(static_cast< signed char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_signed_SS_char(static_cast< signed char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_uchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_uchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_uchar" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  temp2 = static_cast< unsigned char >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned char *) &(arg1)->ref_uchar((unsigned char const &)*arg2);
  }
  catch(unsigned char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned char",SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_int(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_int self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_int" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_int" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  try {
    result = (int *) &(arg1)->ref_int((int const &)*arg2);
  }
  catch(int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"int",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_uint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_uint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_uint" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned int *) &(arg1)->ref_uint((unsigned int const &)*arg2);
  }
  catch(unsigned int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned int",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_short(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short temp2 ;
  short val2 ;
  int ecode2 = 0 ;
  short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_short self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_short" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_short" "', argument " "2"" of type '" "short""'");
  } 
  temp2 = static_cast< short >(val2);
  arg2 = &temp2;
  try {
    result = (short *) &(arg1)->ref_short((short const &)*arg2);
  }
  catch(short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"short",SWIG_From_short(static_cast< short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_ushort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_ushort self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_ushort" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  temp2 = static_cast< unsigned short >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned short *) &(arg1)->ref_ushort((unsigned short const &)*arg2);
  }
  catch(unsigned short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned short",SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_long(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_long self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_long" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_long" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  try {
    result = (long *) &(arg1)->ref_long((long const &)*arg2);
  }
  catch(long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long",SWIG_From_long(static_cast< long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_ulong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_ulong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_ulong" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  temp2 = static_cast< unsigned long >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned long *) &(arg1)->ref_ulong((unsigned long const &)*arg2);
  }
  catch(unsigned long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long",SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_llong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  long long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_llong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_llong" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_llong" "', argument " "2"" of type '" "long long""'");
  } 
  temp2 = static_cast< long long >(val2);
  arg2 = &temp2;
  try {
    result = (long long *) &(arg1)->ref_llong((long long const &)*arg2);
  }
  catch(long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long long",SWIG_From_long_SS_long(static_cast< long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_ullong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long temp2 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_ullong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_ullong" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  temp2 = static_cast< unsigned long long >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned long long *) &(arg1)->ref_ullong((unsigned long long const &)*arg2);
  }
  catch(unsigned long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long long",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_char(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_char self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_char" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_char" "', argument " "2"" of type '" "char""'");
  } 
  temp2 = static_cast< char >(val2);
  arg2 = &temp2;
  try {
    result = (char *) &(arg1)->ref_char((char const &)*arg2);
  }
  catch(char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"char",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_pchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  pchar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pchar temp2 ;
  pchar *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_pchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_pchar" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ref_pchar" "', argument " "2"" of type '" "pchar""'"); 
  }
  temp2 = reinterpret_cast< pchar >(argp2);
  arg2 = reinterpret_cast< pchar * >(&temp2);
  try {
    result = (pchar *) &(arg1)->ref_pchar((pchar const &)*arg2);
  }
  catch(pchar _e) {
    SWIG_Tcl_SetErrorObj(interp,"pchar",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_pcharc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  pcharc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pcharc temp2 ;
  pcharc *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_pcharc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_pcharc" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ref_pcharc" "', argument " "2"" of type '" "pcharc""'"); 
  }
  temp2 = reinterpret_cast< pcharc >(argp2);
  arg2 = reinterpret_cast< pcharc * >(&temp2);
  try {
    result = (pcharc *) &(arg1)->ref_pcharc((pcharc const &)*arg2);
  }
  catch(pcharc _e) {
    SWIG_Tcl_SetErrorObj(interp,"pcharc",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_pint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  pint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pint temp2 = 0 ;
  int res2 ;
  pint *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_pint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_pint" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], SWIG_as_voidptrptr(&temp2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ref_pint" "', argument " "2"" of type '" "Stype""'"); 
  }
  arg2 =  &temp2;
  try {
    result = (pint *) &(arg1)->ref_pint((pint const &)*arg2);
  }
  catch(pint _e) {
    SWIG_Tcl_SetErrorObj(interp,"pint",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_hello(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  Hello *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  Hello temp2 ;
  Hello *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_hello self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_hello" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_hello" "', argument " "2"" of type '" "Hello const &""'");
  } else {
    temp2 = static_cast< Hello >(val2);
    arg2 = &temp2;
  }
  try {
    result = (Hello *) &(arg1)->ref_hello((Hello const &)*arg2);
  }
  catch(Hello &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Hello",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_myint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  MyInt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MyInt temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  MyInt *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_myint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_myint" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  temp2 = static_cast< MyInt >(val2);
  arg2 = &temp2;
  try {
    result = (MyInt *) &(arg1)->ref_myint((MyInt const &)*arg2);
  }
  catch(MyInt &_e) {
    SWIG_Tcl_SetErrorObj(interp,"MyInt",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_parami(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  Param< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< int > temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  Param< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_parami self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_parami" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  temp2 = static_cast< Param< int > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< int > *) &(arg1)->ref_parami((Param< int > const &)*arg2);
  }
  catch(Param< int > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< int >",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_paramd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  Param< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< double > temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  Param< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_paramd self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_paramd" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  temp2 = static_cast< Param< double > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< double > *) &(arg1)->ref_paramd((Param< double > const &)*arg2);
  }
  catch(Param< double > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< double >",SWIG_From_double(static_cast< double >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_paramc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  Param< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< char > temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  Param< char > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_paramc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_paramc" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  temp2 = static_cast< Param< char > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< char > *) &(arg1)->ref_paramc((Param< char > const &)*arg2);
  }
  catch(Param< char > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< char >",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ref_sizet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  size_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ref_sizet self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_sizet" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  temp2 = static_cast< size_t >(val2);
  arg2 = &temp2;
  try {
    result = (size_t *) &(arg1)->ref_sizet((size_t const &)*arg2);
  }
  catch(size_t &_e) {
    SWIG_Tcl_SetErrorObj(interp,"size_t",SWIG_From_size_t(static_cast< size_t >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_c_check(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_c_check self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_c_check" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (int)(arg1)->c_check();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_v_check(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Test_v_check self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_v_check" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (int)(arg1)->v_check();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((bool const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  signed char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char temp2 ;
  signed char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "signed char""'");
  } 
  temp2 = static_cast< signed char >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((signed char const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned char""'");
  } 
  temp2 = static_cast< unsigned char >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned char const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((int const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned int const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short temp2 ;
  short val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "short""'");
  } 
  temp2 = static_cast< short >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((short const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val__SWIG_6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref__SWIG_6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned short""'");
  } 
  temp2 = static_cast< unsigned short >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned short const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val__SWIG_7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref__SWIG_7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((long const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val__SWIG_8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref__SWIG_8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned long""'");
  } 
  temp2 = static_cast< unsigned long >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned long const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val__SWIG_9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref__SWIG_9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "long long""'");
  } 
  temp2 = static_cast< long long >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((long long const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val__SWIG_10(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref__SWIG_10(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long temp2 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  temp2 = static_cast< unsigned long long >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned long long const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val__SWIG_11(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref__SWIG_11(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "char""'");
  } 
  temp2 = static_cast< char >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((char const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val__SWIG_12(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_val(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_6(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_5(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_4(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_3(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_8(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_7(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_10(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_9(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_11(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_12(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'Test_ovr_val'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Test::ovr_val(bool)\n"
    "    Test::ovr_val(signed char)\n"
    "    Test::ovr_val(unsigned char)\n"
    "    Test::ovr_val(int)\n"
    "    Test::ovr_val(unsigned int)\n"
    "    Test::ovr_val(short)\n"
    "    Test::ovr_val(unsigned short)\n"
    "    Test::ovr_val(long)\n"
    "    Test::ovr_val(unsigned long)\n"
    "    Test::ovr_val(long long)\n"
    "    Test::ovr_val(unsigned long long)\n"
    "    Test::ovr_val(char)\n"
    "    Test::ovr_val(pchar)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref__SWIG_12(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Test *arg1 = (Test *) 0 ;
  pchar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pchar temp2 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Test_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "pchar""'"); 
  }
  temp2 = reinterpret_cast< pchar >(argp2);
  arg2 = reinterpret_cast< pchar * >(&temp2);
  result = (int)(arg1)->ovr_ref((pchar const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Test_ovr_ref(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_char, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_12(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_6(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_5(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_4(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_3(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_8(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_7(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_10(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_9(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_11(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'Test_ovr_ref'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Test::ovr_ref(bool const &)\n"
    "    Test::ovr_ref(signed char const &)\n"
    "    Test::ovr_ref(unsigned char const &)\n"
    "    Test::ovr_ref(int const &)\n"
    "    Test::ovr_ref(unsigned int const &)\n"
    "    Test::ovr_ref(short const &)\n"
    "    Test::ovr_ref(unsigned short const &)\n"
    "    Test::ovr_ref(long const &)\n"
    "    Test::ovr_ref(unsigned long const &)\n"
    "    Test::ovr_ref(long long const &)\n"
    "    Test::ovr_ref(unsigned long long const &)\n"
    "    Test::ovr_ref(char const &)\n"
    "    Test::ovr_ref(pchar const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN const char *_wrap_Test_stc_double_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_double(static_cast< double >(Test::stc_double));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_Test_stc_float_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_double(static_cast< double >(Test::stc_float));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN void swig_delete_Test(void *obj) {
Test *arg1 = (Test *) obj;
delete arg1;
}
static swig_method swig_Test_methods[] = {
    {"val_namet", _wrap_Test_val_namet}, 
    {"val_cnamet", _wrap_Test_val_cnamet}, 
    {"val_bool", _wrap_Test_val_bool}, 
    {"val_schar", _wrap_Test_val_schar}, 
    {"val_uchar", _wrap_Test_val_uchar}, 
    {"val_int", _wrap_Test_val_int}, 
    {"val_uint", _wrap_Test_val_uint}, 
    {"val_short", _wrap_Test_val_short}, 
    {"val_ushort", _wrap_Test_val_ushort}, 
    {"val_long", _wrap_Test_val_long}, 
    {"val_ulong", _wrap_Test_val_ulong}, 
    {"val_llong", _wrap_Test_val_llong}, 
    {"val_ullong", _wrap_Test_val_ullong}, 
    {"val_char", _wrap_Test_val_char}, 
    {"val_pchar", _wrap_Test_val_pchar}, 
    {"val_pcharc", _wrap_Test_val_pcharc}, 
    {"val_pint", _wrap_Test_val_pint}, 
    {"val_hello", _wrap_Test_val_hello}, 
    {"val_myint", _wrap_Test_val_myint}, 
    {"val_parami", _wrap_Test_val_parami}, 
    {"val_paramd", _wrap_Test_val_paramd}, 
    {"val_paramc", _wrap_Test_val_paramc}, 
    {"val_sizet", _wrap_Test_val_sizet}, 
    {"ref_bool", _wrap_Test_ref_bool}, 
    {"ref_schar", _wrap_Test_ref_schar}, 
    {"ref_uchar", _wrap_Test_ref_uchar}, 
    {"ref_int", _wrap_Test_ref_int}, 
    {"ref_uint", _wrap_Test_ref_uint}, 
    {"ref_short", _wrap_Test_ref_short}, 
    {"ref_ushort", _wrap_Test_ref_ushort}, 
    {"ref_long", _wrap_Test_ref_long}, 
    {"ref_ulong", _wrap_Test_ref_ulong}, 
    {"ref_llong", _wrap_Test_ref_llong}, 
    {"ref_ullong", _wrap_Test_ref_ullong}, 
    {"ref_char", _wrap_Test_ref_char}, 
    {"ref_pchar", _wrap_Test_ref_pchar}, 
    {"ref_pcharc", _wrap_Test_ref_pcharc}, 
    {"ref_pint", _wrap_Test_ref_pint}, 
    {"ref_hello", _wrap_Test_ref_hello}, 
    {"ref_myint", _wrap_Test_ref_myint}, 
    {"ref_parami", _wrap_Test_ref_parami}, 
    {"ref_paramd", _wrap_Test_ref_paramd}, 
    {"ref_paramc", _wrap_Test_ref_paramc}, 
    {"ref_sizet", _wrap_Test_ref_sizet}, 
    {"c_check", _wrap_Test_c_check}, 
    {"v_check", _wrap_Test_v_check}, 
    {"ovr_val", _wrap_Test_ovr_val}, 
    {"ovr_ref", _wrap_Test_ovr_ref}, 
    {0,0}
};
static swig_attribute swig_Test_attributes[] = {
    { "-var_bool",_wrap_Test_var_bool_get, _wrap_Test_var_bool_set},
    { "-var_schar",_wrap_Test_var_schar_get, _wrap_Test_var_schar_set},
    { "-var_uchar",_wrap_Test_var_uchar_get, _wrap_Test_var_uchar_set},
    { "-var_int",_wrap_Test_var_int_get, _wrap_Test_var_int_set},
    { "-var_uint",_wrap_Test_var_uint_get, _wrap_Test_var_uint_set},
    { "-var_short",_wrap_Test_var_short_get, _wrap_Test_var_short_set},
    { "-var_ushort",_wrap_Test_var_ushort_get, _wrap_Test_var_ushort_set},
    { "-var_long",_wrap_Test_var_long_get, _wrap_Test_var_long_set},
    { "-var_ulong",_wrap_Test_var_ulong_get, _wrap_Test_var_ulong_set},
    { "-var_llong",_wrap_Test_var_llong_get, _wrap_Test_var_llong_set},
    { "-var_ullong",_wrap_Test_var_ullong_get, _wrap_Test_var_ullong_set},
    { "-var_char",_wrap_Test_var_char_get, _wrap_Test_var_char_set},
    { "-var_pchar",_wrap_Test_var_pchar_get, _wrap_Test_var_pchar_set},
    { "-var_pcharc",_wrap_Test_var_pcharc_get, _wrap_Test_var_pcharc_set},
    { "-var_pint",_wrap_Test_var_pint_get, _wrap_Test_var_pint_set},
    { "-var_hello",_wrap_Test_var_hello_get, _wrap_Test_var_hello_set},
    { "-var_myint",_wrap_Test_var_myint_get, _wrap_Test_var_myint_set},
    { "-var_parami",_wrap_Test_var_parami_get, _wrap_Test_var_parami_set},
    { "-var_paramd",_wrap_Test_var_paramd_get, _wrap_Test_var_paramd_set},
    { "-var_paramc",_wrap_Test_var_paramc_get, _wrap_Test_var_paramc_set},
    { "-var_sizet",_wrap_Test_var_sizet_get, _wrap_Test_var_sizet_set},
    { "-var_namet",_wrap_Test_var_namet_get, _wrap_Test_var_namet_set},
    {0,0,0}
};
static swig_class *swig_Test_bases[] = {0};
static const char * swig_Test_base_names[] = {0};
static swig_class _wrap_class_Test = { "Test", &SWIGTYPE_p_Test,_wrap_new_Test, swig_delete_Test, swig_Test_methods, swig_Test_attributes, swig_Test_bases,swig_Test_base_names, &swig_module };
SWIGINTERN int
_wrap_new_TestDirector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_TestDirector ") == TCL_ERROR) SWIG_fail;
  result = (TestDirector *)new TestDirector();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_TestDirector,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_TestDirector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_TestDirector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TestDirector" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_namet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_namet self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_namet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_namet" "', argument " "2"" of type '" "char [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  try {
    result = (char *)(arg1)->vval_namet(arg2);
  }
  catch(namet _e) {
    {
      size_t size = 5;
      
      while (size && (_e[size - 1] == '\0')) --size;
      
      SWIG_Tcl_SetErrorObj(interp,"char [5]",SWIG_FromCharPtrAndSize(_e, size)); SWIG_fail; 
    }
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_cnamet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_cnamet self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_cnamet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_cnamet" "', argument " "2"" of type '" "char const [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  try {
    result = (char *)(arg1)->vval_cnamet(arg2);
  }
  catch(namet _e) {
    {
      size_t size = 5;
      
      while (size && (_e[size - 1] == '\0')) --size;
      
      SWIG_Tcl_SetErrorObj(interp,"char [5]",SWIG_FromCharPtrAndSize(_e, size)); SWIG_fail; 
    }
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_bool_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_bool_set self var_bool ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_bool_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_bool_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->var_bool = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_bool_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_bool_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_bool_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (bool) ((arg1)->var_bool);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_schar_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_schar_set self var_schar ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_schar_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_schar_set" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  if (arg1) (arg1)->var_schar = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_schar_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_schar_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_schar_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (signed char) ((arg1)->var_schar);
  Tcl_SetObjResult(interp,SWIG_From_signed_SS_char(static_cast< signed char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_uchar_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_uchar_set self var_uchar ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_uchar_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_uchar_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  if (arg1) (arg1)->var_uchar = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_uchar_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_uchar_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_uchar_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (unsigned char) ((arg1)->var_uchar);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_int_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_int_set self var_int ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_int_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_int_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->var_int = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_int_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_int_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_int_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (int) ((arg1)->var_int);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_uint_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_uint_set self var_uint ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_uint_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_uint_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->var_uint = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_uint_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_uint_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_uint_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (unsigned int) ((arg1)->var_uint);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_short_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_short_set self var_short ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_short_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_short_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->var_short = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_short_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_short_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_short_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (short) ((arg1)->var_short);
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_ushort_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_ushort_set self var_ushort ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ushort_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_ushort_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->var_ushort = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_ushort_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_ushort_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ushort_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (unsigned short) ((arg1)->var_ushort);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_long_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_long_set self var_long ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_long_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_long_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->var_long = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_long_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_long_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_long_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (long) ((arg1)->var_long);
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_ulong_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_ulong_set self var_ulong ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ulong_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_ulong_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  if (arg1) (arg1)->var_ulong = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_ulong_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_ulong_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ulong_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (unsigned long) ((arg1)->var_ulong);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_llong_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_llong_set self var_llong ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_llong_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_llong_set" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  if (arg1) (arg1)->var_llong = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_llong_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_llong_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_llong_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (long long) ((arg1)->var_llong);
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_ullong_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_ullong_set self var_ullong ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ullong_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_ullong_set" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  if (arg1) (arg1)->var_ullong = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_ullong_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_ullong_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ullong_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (unsigned long long) ((arg1)->var_ullong);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_char_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_char_set self var_char ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_char_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_char_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->var_char = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_char_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_char_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_char_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (char) ((arg1)->var_char);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_pchar_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_pchar_set self var_pchar ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pchar_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_var_pchar_set" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  if (arg1->var_pchar) delete[] arg1->var_pchar;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->var_pchar = (pchar)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->var_pchar = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_pchar_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pchar result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_pchar_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pchar_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (pchar) ((arg1)->var_pchar);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_pcharc_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_pcharc_set self var_pcharc ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pcharc_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_var_pcharc_set" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->var_pcharc = (pcharc)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->var_pcharc = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_pcharc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pcharc result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_pcharc_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pcharc_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (pcharc) ((arg1)->var_pcharc);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_pint_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_pint_set self var_pint ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pint_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2],SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_var_pint_set" "', argument " "2"" of type '" "pint""'"); 
  }
  if (arg1->var_pint) delete[] arg1->var_pint;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->var_pint = (pint)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->var_pint = 0;
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_pint_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pint result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_pint_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pint_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (pint) ((arg1)->var_pint);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_hello_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_hello_set self var_hello ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_hello_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_hello_set" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  if (arg1) (arg1)->var_hello = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_hello_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Hello result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_hello_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_hello_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (Hello) ((arg1)->var_hello);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_myint_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_myint_set self var_myint ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_myint_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_myint_set" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  if (arg1) (arg1)->var_myint = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_myint_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MyInt result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_myint_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_myint_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result =  ((arg1)->var_myint);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_parami_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_parami_set self var_parami ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_parami_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_parami_set" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  if (arg1) (arg1)->var_parami = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_parami_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< int > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_parami_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_parami_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result =  ((arg1)->var_parami);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_paramd_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_paramd_set self var_paramd ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_paramd_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_paramd_set" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  if (arg1) (arg1)->var_paramd = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_paramd_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< double > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_paramd_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_paramd_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result =  ((arg1)->var_paramd);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_paramc_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_paramc_set self var_paramc ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_paramc_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_paramc_set" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  if (arg1) (arg1)->var_paramc = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_paramc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< char > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_paramc_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_paramc_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result =  ((arg1)->var_paramc);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_sizet_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_sizet_set self var_sizet ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_sizet_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_sizet_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->var_sizet = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_sizet_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_sizet_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_sizet_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result =  ((arg1)->var_sizet);
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_namet_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_var_namet_set self var_namet ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_namet_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_var_namet_set" "', argument " "2"" of type '" "char [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->var_namet,arg2,5*sizeof(char));
  else memset(arg1->var_namet,0,5*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_var_namet_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_var_namet_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_namet_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (char *) ((arg1)->var_namet);
  {
    size_t size = 5;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_bool(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_bool self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_bool" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  try {
    result = (bool)(arg1)->val_bool(arg2);
  }
  catch(bool &_e) {
    SWIG_Tcl_SetErrorObj(interp,"bool",SWIG_From_bool(static_cast< bool >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_schar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_schar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  try {
    result = (signed char)(arg1)->val_schar(arg2);
  }
  catch(signed char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"signed char",SWIG_From_signed_SS_char(static_cast< signed char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_signed_SS_char(static_cast< signed char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_uchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_uchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  try {
    result = (unsigned char)(arg1)->val_uchar(arg2);
  }
  catch(unsigned char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned char",SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_int(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_int self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_int" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (int)(arg1)->val_int(arg2);
  }
  catch(int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"int",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_uint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_uint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  try {
    result = (unsigned int)(arg1)->val_uint(arg2);
  }
  catch(unsigned int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned int",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_short(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_short self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_short" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_short" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  try {
    result = (short)(arg1)->val_short(arg2);
  }
  catch(short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"short",SWIG_From_short(static_cast< short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_ushort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_ushort self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  try {
    result = (unsigned short)(arg1)->val_ushort(arg2);
  }
  catch(unsigned short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned short",SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_long(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_long self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_long" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_long" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  try {
    result = (long)(arg1)->val_long(arg2);
  }
  catch(long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long",SWIG_From_long(static_cast< long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_ulong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_ulong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  try {
    result = (unsigned long)(arg1)->val_ulong(arg2);
  }
  catch(unsigned long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long",SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_llong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_llong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_llong" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  try {
    result = (long long)(arg1)->val_llong(arg2);
  }
  catch(long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long long",SWIG_From_long_SS_long(static_cast< long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_ullong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_ullong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  try {
    result = (unsigned long long)(arg1)->val_ullong(arg2);
  }
  catch(unsigned long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long long",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_char(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_char self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_char" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_char" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  try {
    result = (char)(arg1)->val_char(arg2);
  }
  catch(char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"char",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_pchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  pchar result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_pchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_val_pchar" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  try {
    result = (pchar)(arg1)->val_pchar(arg2);
  }
  catch(pchar _e) {
    SWIG_Tcl_SetErrorObj(interp,"pchar",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_pcharc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  pcharc result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_pcharc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_val_pcharc" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  try {
    result = (pcharc)(arg1)->val_pcharc(arg2);
  }
  catch(pcharc _e) {
    SWIG_Tcl_SetErrorObj(interp,"pcharc",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_pint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  pint result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_pint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_val_pint" "', argument " "2"" of type '" "pint""'"); 
  }
  try {
    result = (pint)(arg1)->val_pint(arg2);
  }
  catch(pint _e) {
    SWIG_Tcl_SetErrorObj(interp,"pint",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_hello(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Hello result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_hello self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_hello" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  try {
    result = (Hello)(arg1)->val_hello(arg2);
  }
  catch(Hello &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Hello",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_myint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  MyInt result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_myint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  try {
    result = (arg1)->val_myint(arg2);
  }
  catch(MyInt &_e) {
    SWIG_Tcl_SetErrorObj(interp,"MyInt",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_parami(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Param< int > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_parami self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  try {
    result = (arg1)->val_parami(arg2);
  }
  catch(Param< int > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< int >",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_paramd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Param< double > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_paramd self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  try {
    result = (arg1)->val_paramd(arg2);
  }
  catch(Param< double > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< double >",SWIG_From_double(static_cast< double >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_paramc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  Param< char > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_paramc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  try {
    result = (arg1)->val_paramc(arg2);
  }
  catch(Param< char > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< char >",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_val_sizet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_val_sizet self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (arg1)->val_sizet(arg2);
  }
  catch(size_t &_e) {
    SWIG_Tcl_SetErrorObj(interp,"size_t",SWIG_From_size_t(static_cast< size_t >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_bool(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_bool self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_bool" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  try {
    result = (bool *) &(arg1)->ref_bool((bool const &)*arg2);
  }
  catch(bool &_e) {
    SWIG_Tcl_SetErrorObj(interp,"bool",SWIG_From_bool(static_cast< bool >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_schar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char temp2 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_schar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  temp2 = static_cast< signed char >(val2);
  arg2 = &temp2;
  try {
    result = (signed char *) &(arg1)->ref_schar((signed char const &)*arg2);
  }
  catch(signed char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"signed char",SWIG_From_signed_SS_char(static_cast< signed char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_signed_SS_char(static_cast< signed char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_uchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_uchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  temp2 = static_cast< unsigned char >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned char *) &(arg1)->ref_uchar((unsigned char const &)*arg2);
  }
  catch(unsigned char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned char",SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_int(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_int self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_int" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_int" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  try {
    result = (int *) &(arg1)->ref_int((int const &)*arg2);
  }
  catch(int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"int",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_uint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_uint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned int *) &(arg1)->ref_uint((unsigned int const &)*arg2);
  }
  catch(unsigned int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned int",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_short(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short temp2 ;
  short val2 ;
  int ecode2 = 0 ;
  short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_short self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_short" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_short" "', argument " "2"" of type '" "short""'");
  } 
  temp2 = static_cast< short >(val2);
  arg2 = &temp2;
  try {
    result = (short *) &(arg1)->ref_short((short const &)*arg2);
  }
  catch(short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"short",SWIG_From_short(static_cast< short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_ushort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_ushort self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  temp2 = static_cast< unsigned short >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned short *) &(arg1)->ref_ushort((unsigned short const &)*arg2);
  }
  catch(unsigned short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned short",SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_long(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_long self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_long" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_long" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  try {
    result = (long *) &(arg1)->ref_long((long const &)*arg2);
  }
  catch(long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long",SWIG_From_long(static_cast< long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_ulong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_ulong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  temp2 = static_cast< unsigned long >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned long *) &(arg1)->ref_ulong((unsigned long const &)*arg2);
  }
  catch(unsigned long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long",SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_llong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  long long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_llong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_llong" "', argument " "2"" of type '" "long long""'");
  } 
  temp2 = static_cast< long long >(val2);
  arg2 = &temp2;
  try {
    result = (long long *) &(arg1)->ref_llong((long long const &)*arg2);
  }
  catch(long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long long",SWIG_From_long_SS_long(static_cast< long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_ullong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long temp2 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_ullong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  temp2 = static_cast< unsigned long long >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned long long *) &(arg1)->ref_ullong((unsigned long long const &)*arg2);
  }
  catch(unsigned long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long long",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_char(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_char self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_char" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_char" "', argument " "2"" of type '" "char""'");
  } 
  temp2 = static_cast< char >(val2);
  arg2 = &temp2;
  try {
    result = (char *) &(arg1)->ref_char((char const &)*arg2);
  }
  catch(char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"char",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_pchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pchar temp2 ;
  pchar *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_pchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ref_pchar" "', argument " "2"" of type '" "pchar""'"); 
  }
  temp2 = reinterpret_cast< pchar >(argp2);
  arg2 = reinterpret_cast< pchar * >(&temp2);
  try {
    result = (pchar *) &(arg1)->ref_pchar((pchar const &)*arg2);
  }
  catch(pchar _e) {
    SWIG_Tcl_SetErrorObj(interp,"pchar",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_pcharc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pcharc temp2 ;
  pcharc *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_pcharc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ref_pcharc" "', argument " "2"" of type '" "pcharc""'"); 
  }
  temp2 = reinterpret_cast< pcharc >(argp2);
  arg2 = reinterpret_cast< pcharc * >(&temp2);
  try {
    result = (pcharc *) &(arg1)->ref_pcharc((pcharc const &)*arg2);
  }
  catch(pcharc _e) {
    SWIG_Tcl_SetErrorObj(interp,"pcharc",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_pint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pint temp2 = 0 ;
  int res2 ;
  pint *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_pint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], SWIG_as_voidptrptr(&temp2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ref_pint" "', argument " "2"" of type '" "Stype""'"); 
  }
  arg2 =  &temp2;
  try {
    result = (pint *) &(arg1)->ref_pint((pint const &)*arg2);
  }
  catch(pint _e) {
    SWIG_Tcl_SetErrorObj(interp,"pint",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_hello(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  Hello temp2 ;
  Hello *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_hello self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_hello" "', argument " "2"" of type '" "Hello const &""'");
  } else {
    temp2 = static_cast< Hello >(val2);
    arg2 = &temp2;
  }
  try {
    result = (Hello *) &(arg1)->ref_hello((Hello const &)*arg2);
  }
  catch(Hello &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Hello",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_myint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MyInt temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  MyInt *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_myint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  temp2 = static_cast< MyInt >(val2);
  arg2 = &temp2;
  try {
    result = (MyInt *) &(arg1)->ref_myint((MyInt const &)*arg2);
  }
  catch(MyInt &_e) {
    SWIG_Tcl_SetErrorObj(interp,"MyInt",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_parami(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< int > temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  Param< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_parami self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  temp2 = static_cast< Param< int > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< int > *) &(arg1)->ref_parami((Param< int > const &)*arg2);
  }
  catch(Param< int > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< int >",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_paramd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< double > temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  Param< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_paramd self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  temp2 = static_cast< Param< double > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< double > *) &(arg1)->ref_paramd((Param< double > const &)*arg2);
  }
  catch(Param< double > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< double >",SWIG_From_double(static_cast< double >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_paramc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< char > temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  Param< char > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_paramc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  temp2 = static_cast< Param< char > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< char > *) &(arg1)->ref_paramc((Param< char > const &)*arg2);
  }
  catch(Param< char > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< char >",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ref_sizet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ref_sizet self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  temp2 = static_cast< size_t >(val2);
  arg2 = &temp2;
  try {
    result = (size_t *) &(arg1)->ref_sizet((size_t const &)*arg2);
  }
  catch(size_t &_e) {
    SWIG_Tcl_SetErrorObj(interp,"size_t",SWIG_From_size_t(static_cast< size_t >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_bool(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_bool self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_bool" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  try {
    result = (bool)(arg1)->vval_bool(arg2);
  }
  catch(bool &_e) {
    SWIG_Tcl_SetErrorObj(interp,"bool",SWIG_From_bool(static_cast< bool >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_schar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_schar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  try {
    result = (signed char)(arg1)->vval_schar(arg2);
  }
  catch(signed char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"signed char",SWIG_From_signed_SS_char(static_cast< signed char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_signed_SS_char(static_cast< signed char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_uchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_uchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  try {
    result = (unsigned char)(arg1)->vval_uchar(arg2);
  }
  catch(unsigned char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned char",SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_int(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_int self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_int" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (int)(arg1)->vval_int(arg2);
  }
  catch(int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"int",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_uint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_uint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  try {
    result = (unsigned int)(arg1)->vval_uint(arg2);
  }
  catch(unsigned int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned int",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_short(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_short self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_short" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_short" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  try {
    result = (short)(arg1)->vval_short(arg2);
  }
  catch(short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"short",SWIG_From_short(static_cast< short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_ushort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_ushort self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  try {
    result = (unsigned short)(arg1)->vval_ushort(arg2);
  }
  catch(unsigned short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned short",SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_long(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_long self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_long" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_long" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  try {
    result = (long)(arg1)->vval_long(arg2);
  }
  catch(long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long",SWIG_From_long(static_cast< long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_ulong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_ulong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  try {
    result = (unsigned long)(arg1)->vval_ulong(arg2);
  }
  catch(unsigned long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long",SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_llong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_llong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_llong" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  try {
    result = (long long)(arg1)->vval_llong(arg2);
  }
  catch(long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long long",SWIG_From_long_SS_long(static_cast< long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_ullong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_ullong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  try {
    result = (unsigned long long)(arg1)->vval_ullong(arg2);
  }
  catch(unsigned long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long long",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_char(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_char self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_char" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_char" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  try {
    result = (char)(arg1)->vval_char(arg2);
  }
  catch(char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"char",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_pchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  pchar result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_pchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_pchar" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  try {
    result = (pchar)(arg1)->vval_pchar(arg2);
  }
  catch(pchar _e) {
    SWIG_Tcl_SetErrorObj(interp,"pchar",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_pcharc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  pcharc result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_pcharc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_pcharc" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  try {
    result = (pcharc)(arg1)->vval_pcharc(arg2);
  }
  catch(pcharc _e) {
    SWIG_Tcl_SetErrorObj(interp,"pcharc",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_pint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  pint result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_pint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_pint" "', argument " "2"" of type '" "pint""'"); 
  }
  try {
    result = (pint)(arg1)->vval_pint(arg2);
  }
  catch(pint _e) {
    SWIG_Tcl_SetErrorObj(interp,"pint",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_hello(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Hello result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_hello self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_hello" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  try {
    result = (Hello)(arg1)->vval_hello(arg2);
  }
  catch(Hello &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Hello",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_myint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  MyInt result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_myint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  try {
    result = (arg1)->vval_myint(arg2);
  }
  catch(MyInt &_e) {
    SWIG_Tcl_SetErrorObj(interp,"MyInt",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_parami(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Param< int > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_parami self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  try {
    result = (arg1)->vval_parami(arg2);
  }
  catch(Param< int > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< int >",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_paramd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Param< double > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_paramd self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  try {
    result = (arg1)->vval_paramd(arg2);
  }
  catch(Param< double > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< double >",SWIG_From_double(static_cast< double >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_paramc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  Param< char > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_paramc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  try {
    result = (arg1)->vval_paramc(arg2);
  }
  catch(Param< char > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< char >",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vval_sizet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vval_sizet self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (arg1)->vval_sizet(arg2);
  }
  catch(size_t &_e) {
    SWIG_Tcl_SetErrorObj(interp,"size_t",SWIG_From_size_t(static_cast< size_t >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_bool(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_bool self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_bool" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  try {
    result = (bool *) &(arg1)->vref_bool((bool const &)*arg2);
  }
  catch(bool &_e) {
    SWIG_Tcl_SetErrorObj(interp,"bool",SWIG_From_bool(static_cast< bool >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_schar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char temp2 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_schar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  temp2 = static_cast< signed char >(val2);
  arg2 = &temp2;
  try {
    result = (signed char *) &(arg1)->vref_schar((signed char const &)*arg2);
  }
  catch(signed char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"signed char",SWIG_From_signed_SS_char(static_cast< signed char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_signed_SS_char(static_cast< signed char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_uchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_uchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  temp2 = static_cast< unsigned char >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned char *) &(arg1)->vref_uchar((unsigned char const &)*arg2);
  }
  catch(unsigned char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned char",SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_int(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_int self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_int" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_int" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  try {
    result = (int *) &(arg1)->vref_int((int const &)*arg2);
  }
  catch(int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"int",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_uint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_uint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned int *) &(arg1)->vref_uint((unsigned int const &)*arg2);
  }
  catch(unsigned int &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned int",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_short(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short temp2 ;
  short val2 ;
  int ecode2 = 0 ;
  short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_short self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_short" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_short" "', argument " "2"" of type '" "short""'");
  } 
  temp2 = static_cast< short >(val2);
  arg2 = &temp2;
  try {
    result = (short *) &(arg1)->vref_short((short const &)*arg2);
  }
  catch(short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"short",SWIG_From_short(static_cast< short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_ushort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_ushort self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  temp2 = static_cast< unsigned short >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned short *) &(arg1)->vref_ushort((unsigned short const &)*arg2);
  }
  catch(unsigned short &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned short",SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_long(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_long self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_long" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_long" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  try {
    result = (long *) &(arg1)->vref_long((long const &)*arg2);
  }
  catch(long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long",SWIG_From_long(static_cast< long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_ulong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_ulong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  temp2 = static_cast< unsigned long >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned long *) &(arg1)->vref_ulong((unsigned long const &)*arg2);
  }
  catch(unsigned long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long",SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_llong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  long long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_llong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_llong" "', argument " "2"" of type '" "long long""'");
  } 
  temp2 = static_cast< long long >(val2);
  arg2 = &temp2;
  try {
    result = (long long *) &(arg1)->vref_llong((long long const &)*arg2);
  }
  catch(long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"long long",SWIG_From_long_SS_long(static_cast< long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_ullong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long temp2 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_ullong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  temp2 = static_cast< unsigned long long >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned long long *) &(arg1)->vref_ullong((unsigned long long const &)*arg2);
  }
  catch(unsigned long long &_e) {
    SWIG_Tcl_SetErrorObj(interp,"unsigned long long",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_char(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_char self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_char" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_char" "', argument " "2"" of type '" "char""'");
  } 
  temp2 = static_cast< char >(val2);
  arg2 = &temp2;
  try {
    result = (char *) &(arg1)->vref_char((char const &)*arg2);
  }
  catch(char &_e) {
    SWIG_Tcl_SetErrorObj(interp,"char",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_pchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pchar temp2 ;
  pchar *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_pchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vref_pchar" "', argument " "2"" of type '" "pchar""'"); 
  }
  temp2 = reinterpret_cast< pchar >(argp2);
  arg2 = reinterpret_cast< pchar * >(&temp2);
  try {
    result = (pchar *) &(arg1)->vref_pchar((pchar const &)*arg2);
  }
  catch(pchar _e) {
    SWIG_Tcl_SetErrorObj(interp,"pchar",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_pcharc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pcharc temp2 ;
  pcharc *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_pcharc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vref_pcharc" "', argument " "2"" of type '" "pcharc""'"); 
  }
  temp2 = reinterpret_cast< pcharc >(argp2);
  arg2 = reinterpret_cast< pcharc * >(&temp2);
  try {
    result = (pcharc *) &(arg1)->vref_pcharc((pcharc const &)*arg2);
  }
  catch(pcharc _e) {
    SWIG_Tcl_SetErrorObj(interp,"pcharc",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_pint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pint temp2 = 0 ;
  int res2 ;
  pint *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_pint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], SWIG_as_voidptrptr(&temp2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vref_pint" "', argument " "2"" of type '" "Stype""'"); 
  }
  arg2 =  &temp2;
  try {
    result = (pint *) &(arg1)->vref_pint((pint const &)*arg2);
  }
  catch(pint _e) {
    SWIG_Tcl_SetErrorObj(interp,"pint",SWIG_FromCharPtr(_e)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_hello(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  Hello temp2 ;
  Hello *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_hello self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_hello" "', argument " "2"" of type '" "Hello const &""'");
  } else {
    temp2 = static_cast< Hello >(val2);
    arg2 = &temp2;
  }
  try {
    result = (Hello *) &(arg1)->vref_hello((Hello const &)*arg2);
  }
  catch(Hello &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Hello",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_myint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MyInt temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  MyInt *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_myint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  temp2 = static_cast< MyInt >(val2);
  arg2 = &temp2;
  try {
    result = (MyInt *) &(arg1)->vref_myint((MyInt const &)*arg2);
  }
  catch(MyInt &_e) {
    SWIG_Tcl_SetErrorObj(interp,"MyInt",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_parami(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< int > temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  Param< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_parami self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  temp2 = static_cast< Param< int > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< int > *) &(arg1)->vref_parami((Param< int > const &)*arg2);
  }
  catch(Param< int > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< int >",SWIG_From_int(static_cast< int >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_paramd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< double > temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  Param< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_paramd self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  temp2 = static_cast< Param< double > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< double > *) &(arg1)->vref_paramd((Param< double > const &)*arg2);
  }
  catch(Param< double > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< double >",SWIG_From_double(static_cast< double >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_paramc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< char > temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  Param< char > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_paramc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  temp2 = static_cast< Param< char > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< char > *) &(arg1)->vref_paramc((Param< char > const &)*arg2);
  }
  catch(Param< char > &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Param< char >",SWIG_From_char(static_cast< char >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vref_sizet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vref_sizet self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  temp2 = static_cast< size_t >(val2);
  arg2 = &temp2;
  try {
    result = (size_t *) &(arg1)->vref_sizet((size_t const &)*arg2);
  }
  catch(size_t &_e) {
    SWIG_Tcl_SetErrorObj(interp,"size_t",SWIG_From_size_t(static_cast< size_t >(_e))); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_bool(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_bool self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_bool" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->wrp_vref_bool(arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_schar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_schar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  result = (signed char)(arg1)->wrp_vref_schar(arg2);
  Tcl_SetObjResult(interp,SWIG_From_signed_SS_char(static_cast< signed char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_uchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_uchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  result = (unsigned char)(arg1)->wrp_vref_uchar(arg2);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_int(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_int self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_int" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->wrp_vref_int(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_uint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_uint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->wrp_vref_uint(arg2);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_short(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_short self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_short" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_short" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (short)(arg1)->wrp_vref_short(arg2);
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_ushort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_ushort self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  result = (unsigned short)(arg1)->wrp_vref_ushort(arg2);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_long(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_long self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_long" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_long" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)(arg1)->wrp_vref_long(arg2);
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_ulong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_ulong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (unsigned long)(arg1)->wrp_vref_ulong(arg2);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_llong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_llong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_llong" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (long long)(arg1)->wrp_vref_llong(arg2);
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_ullong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_ullong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  result = (unsigned long long)(arg1)->wrp_vref_ullong(arg2);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_char(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_char self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_char" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_char" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (char)(arg1)->wrp_vref_char(arg2);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_pchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  pchar result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_pchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vref_pchar" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  result = (pchar)(arg1)->wrp_vref_pchar(arg2);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_pcharc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  pcharc result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_pcharc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vref_pcharc" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  result = (pcharc)(arg1)->wrp_vref_pcharc(arg2);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_pint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  pint result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_pint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vref_pint" "', argument " "2"" of type '" "pint""'"); 
  }
  result = (pint)(arg1)->wrp_vref_pint(arg2);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_hello(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Hello result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_hello self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_hello" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  result = (Hello)(arg1)->wrp_vref_hello(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_myint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  MyInt result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_myint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  result = (arg1)->wrp_vref_myint(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_parami(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Param< int > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_parami self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  result = (arg1)->wrp_vref_parami(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_paramd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Param< double > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_paramd self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  result = (arg1)->wrp_vref_paramd(arg2);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_paramc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  Param< char > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_paramc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  result = (arg1)->wrp_vref_paramc(arg2);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vref_sizet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vref_sizet self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->wrp_vref_sizet(arg2);
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_bool(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_bool self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_bool" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->wrp_vval_bool(arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_schar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  signed char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_schar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  result = (signed char)(arg1)->wrp_vval_schar(arg2);
  Tcl_SetObjResult(interp,SWIG_From_signed_SS_char(static_cast< signed char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_uchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_uchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  result = (unsigned char)(arg1)->wrp_vval_uchar(arg2);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_int(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_int self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_int" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->wrp_vval_int(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_uint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_uint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->wrp_vval_uint(arg2);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_short(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_short self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_short" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_short" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (short)(arg1)->wrp_vval_short(arg2);
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_ushort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_ushort self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  result = (unsigned short)(arg1)->wrp_vval_ushort(arg2);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_long(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_long self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_long" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_long" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)(arg1)->wrp_vval_long(arg2);
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_ulong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_ulong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (unsigned long)(arg1)->wrp_vval_ulong(arg2);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_llong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_llong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_llong" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (long long)(arg1)->wrp_vval_llong(arg2);
  Tcl_SetObjResult(interp,SWIG_From_long_SS_long(static_cast< long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_ullong(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  unsigned long long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_ullong self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  result = (unsigned long long)(arg1)->wrp_vval_ullong(arg2);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_char(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_char self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_char" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_char" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (char)(arg1)->wrp_vval_char(arg2);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_pchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  pchar result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_pchar self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vval_pchar" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  result = (pchar)(arg1)->wrp_vval_pchar(arg2);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_pcharc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  pcharc result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_pcharc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vval_pcharc" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  result = (pcharc)(arg1)->wrp_vval_pcharc(arg2);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_pint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  pint result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_pint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vval_pint" "', argument " "2"" of type '" "pint""'"); 
  }
  result = (pint)(arg1)->wrp_vval_pint(arg2);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_hello(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Hello result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_hello self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_hello" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  result = (Hello)(arg1)->wrp_vval_hello(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_myint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  MyInt result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_myint self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  result = (arg1)->wrp_vval_myint(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_parami(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Param< int > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_parami self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  result = (arg1)->wrp_vval_parami(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_paramd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Param< double > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_paramd self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  result = (arg1)->wrp_vval_paramd(arg2);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_paramc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  Param< char > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_paramc self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  result = (arg1)->wrp_vval_paramc(arg2);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_wrp_vval_sizet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_wrp_vval_sizet self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->wrp_vval_sizet(arg2);
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_c_check(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_c_check self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_c_check" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (int)(arg1)->c_check();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_v_check(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TestDirector_v_check self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_v_check" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (int)(arg1)->v_check();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((bool const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char temp2 ;
  signed char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "signed char""'");
  } 
  temp2 = static_cast< signed char >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((signed char const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned char""'");
  } 
  temp2 = static_cast< unsigned char >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned char const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((int const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned int const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short temp2 ;
  short val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "short""'");
  } 
  temp2 = static_cast< short >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((short const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val__SWIG_6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref__SWIG_6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned short""'");
  } 
  temp2 = static_cast< unsigned short >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned short const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val__SWIG_7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref__SWIG_7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((long const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val__SWIG_8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref__SWIG_8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned long""'");
  } 
  temp2 = static_cast< unsigned long >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned long const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val__SWIG_9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref__SWIG_9(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "long long""'");
  } 
  temp2 = static_cast< long long >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((long long const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val__SWIG_10(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref__SWIG_10(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long temp2 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  temp2 = static_cast< unsigned long long >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned long long const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val__SWIG_11(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref__SWIG_11(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "char""'");
  } 
  temp2 = static_cast< char >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((char const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val__SWIG_12(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_val self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  result = (int)(arg1)->ovr_val(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_val(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_6(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_5(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_4(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_3(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_8(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_7(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_10(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_9(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_11(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_12(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'TestDirector_ovr_val'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TestDirector::ovr_val(bool)\n"
    "    TestDirector::ovr_val(signed char)\n"
    "    TestDirector::ovr_val(unsigned char)\n"
    "    TestDirector::ovr_val(int)\n"
    "    TestDirector::ovr_val(unsigned int)\n"
    "    TestDirector::ovr_val(short)\n"
    "    TestDirector::ovr_val(unsigned short)\n"
    "    TestDirector::ovr_val(long)\n"
    "    TestDirector::ovr_val(unsigned long)\n"
    "    TestDirector::ovr_val(long long)\n"
    "    TestDirector::ovr_val(unsigned long long)\n"
    "    TestDirector::ovr_val(char)\n"
    "    TestDirector::ovr_val(pchar)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref__SWIG_12(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pchar temp2 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_ovr_ref self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "pchar""'"); 
  }
  temp2 = reinterpret_cast< pchar >(argp2);
  arg2 = reinterpret_cast< pchar * >(&temp2);
  result = (int)(arg1)->ovr_ref((pchar const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_ovr_ref(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_char, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_12(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_signed_SS_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_6(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_5(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_4(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_3(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_8(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_7(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_10(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_9(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_11(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'TestDirector_ovr_ref'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TestDirector::ovr_ref(bool const &)\n"
    "    TestDirector::ovr_ref(signed char const &)\n"
    "    TestDirector::ovr_ref(unsigned char const &)\n"
    "    TestDirector::ovr_ref(int const &)\n"
    "    TestDirector::ovr_ref(unsigned int const &)\n"
    "    TestDirector::ovr_ref(short const &)\n"
    "    TestDirector::ovr_ref(unsigned short const &)\n"
    "    TestDirector::ovr_ref(long const &)\n"
    "    TestDirector::ovr_ref(unsigned long const &)\n"
    "    TestDirector::ovr_ref(long long const &)\n"
    "    TestDirector::ovr_ref(unsigned long long const &)\n"
    "    TestDirector::ovr_ref(char const &)\n"
    "    TestDirector::ovr_ref(pchar const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TestDirector_vtest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  TestDirector *arg1 = (TestDirector *) 0 ;
  Test *arg2 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Test *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TestDirector_vtest self t ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vtest" "', argument " "1"" of type '" "TestDirector const *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vtest" "', argument " "2"" of type '" "Test *""'"); 
  }
  arg2 = reinterpret_cast< Test * >(argp2);
  try {
    result = (Test *)((TestDirector const *)arg1)->vtest(arg2);
  }
  catch(Test &_e) {
    SWIG_Tcl_SetErrorObj(interp,"Test",SWIG_NewPointerObj((new Test(static_cast< const Test& >(_e))),SWIGTYPE_p_Test,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Test,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_TestDirector(void *obj) {
TestDirector *arg1 = (TestDirector *) obj;
delete arg1;
}
static swig_method swig_TestDirector_methods[] = {
    {"vval_namet", _wrap_TestDirector_vval_namet}, 
    {"vval_cnamet", _wrap_TestDirector_vval_cnamet}, 
    {"val_bool", _wrap_TestDirector_val_bool}, 
    {"val_schar", _wrap_TestDirector_val_schar}, 
    {"val_uchar", _wrap_TestDirector_val_uchar}, 
    {"val_int", _wrap_TestDirector_val_int}, 
    {"val_uint", _wrap_TestDirector_val_uint}, 
    {"val_short", _wrap_TestDirector_val_short}, 
    {"val_ushort", _wrap_TestDirector_val_ushort}, 
    {"val_long", _wrap_TestDirector_val_long}, 
    {"val_ulong", _wrap_TestDirector_val_ulong}, 
    {"val_llong", _wrap_TestDirector_val_llong}, 
    {"val_ullong", _wrap_TestDirector_val_ullong}, 
    {"val_char", _wrap_TestDirector_val_char}, 
    {"val_pchar", _wrap_TestDirector_val_pchar}, 
    {"val_pcharc", _wrap_TestDirector_val_pcharc}, 
    {"val_pint", _wrap_TestDirector_val_pint}, 
    {"val_hello", _wrap_TestDirector_val_hello}, 
    {"val_myint", _wrap_TestDirector_val_myint}, 
    {"val_parami", _wrap_TestDirector_val_parami}, 
    {"val_paramd", _wrap_TestDirector_val_paramd}, 
    {"val_paramc", _wrap_TestDirector_val_paramc}, 
    {"val_sizet", _wrap_TestDirector_val_sizet}, 
    {"ref_bool", _wrap_TestDirector_ref_bool}, 
    {"ref_schar", _wrap_TestDirector_ref_schar}, 
    {"ref_uchar", _wrap_TestDirector_ref_uchar}, 
    {"ref_int", _wrap_TestDirector_ref_int}, 
    {"ref_uint", _wrap_TestDirector_ref_uint}, 
    {"ref_short", _wrap_TestDirector_ref_short}, 
    {"ref_ushort", _wrap_TestDirector_ref_ushort}, 
    {"ref_long", _wrap_TestDirector_ref_long}, 
    {"ref_ulong", _wrap_TestDirector_ref_ulong}, 
    {"ref_llong", _wrap_TestDirector_ref_llong}, 
    {"ref_ullong", _wrap_TestDirector_ref_ullong}, 
    {"ref_char", _wrap_TestDirector_ref_char}, 
    {"ref_pchar", _wrap_TestDirector_ref_pchar}, 
    {"ref_pcharc", _wrap_TestDirector_ref_pcharc}, 
    {"ref_pint", _wrap_TestDirector_ref_pint}, 
    {"ref_hello", _wrap_TestDirector_ref_hello}, 
    {"ref_myint", _wrap_TestDirector_ref_myint}, 
    {"ref_parami", _wrap_TestDirector_ref_parami}, 
    {"ref_paramd", _wrap_TestDirector_ref_paramd}, 
    {"ref_paramc", _wrap_TestDirector_ref_paramc}, 
    {"ref_sizet", _wrap_TestDirector_ref_sizet}, 
    {"vval_bool", _wrap_TestDirector_vval_bool}, 
    {"vval_schar", _wrap_TestDirector_vval_schar}, 
    {"vval_uchar", _wrap_TestDirector_vval_uchar}, 
    {"vval_int", _wrap_TestDirector_vval_int}, 
    {"vval_uint", _wrap_TestDirector_vval_uint}, 
    {"vval_short", _wrap_TestDirector_vval_short}, 
    {"vval_ushort", _wrap_TestDirector_vval_ushort}, 
    {"vval_long", _wrap_TestDirector_vval_long}, 
    {"vval_ulong", _wrap_TestDirector_vval_ulong}, 
    {"vval_llong", _wrap_TestDirector_vval_llong}, 
    {"vval_ullong", _wrap_TestDirector_vval_ullong}, 
    {"vval_char", _wrap_TestDirector_vval_char}, 
    {"vval_pchar", _wrap_TestDirector_vval_pchar}, 
    {"vval_pcharc", _wrap_TestDirector_vval_pcharc}, 
    {"vval_pint", _wrap_TestDirector_vval_pint}, 
    {"vval_hello", _wrap_TestDirector_vval_hello}, 
    {"vval_myint", _wrap_TestDirector_vval_myint}, 
    {"vval_parami", _wrap_TestDirector_vval_parami}, 
    {"vval_paramd", _wrap_TestDirector_vval_paramd}, 
    {"vval_paramc", _wrap_TestDirector_vval_paramc}, 
    {"vval_sizet", _wrap_TestDirector_vval_sizet}, 
    {"vref_bool", _wrap_TestDirector_vref_bool}, 
    {"vref_schar", _wrap_TestDirector_vref_schar}, 
    {"vref_uchar", _wrap_TestDirector_vref_uchar}, 
    {"vref_int", _wrap_TestDirector_vref_int}, 
    {"vref_uint", _wrap_TestDirector_vref_uint}, 
    {"vref_short", _wrap_TestDirector_vref_short}, 
    {"vref_ushort", _wrap_TestDirector_vref_ushort}, 
    {"vref_long", _wrap_TestDirector_vref_long}, 
    {"vref_ulong", _wrap_TestDirector_vref_ulong}, 
    {"vref_llong", _wrap_TestDirector_vref_llong}, 
    {"vref_ullong", _wrap_TestDirector_vref_ullong}, 
    {"vref_char", _wrap_TestDirector_vref_char}, 
    {"vref_pchar", _wrap_TestDirector_vref_pchar}, 
    {"vref_pcharc", _wrap_TestDirector_vref_pcharc}, 
    {"vref_pint", _wrap_TestDirector_vref_pint}, 
    {"vref_hello", _wrap_TestDirector_vref_hello}, 
    {"vref_myint", _wrap_TestDirector_vref_myint}, 
    {"vref_parami", _wrap_TestDirector_vref_parami}, 
    {"vref_paramd", _wrap_TestDirector_vref_paramd}, 
    {"vref_paramc", _wrap_TestDirector_vref_paramc}, 
    {"vref_sizet", _wrap_TestDirector_vref_sizet}, 
    {"wrp_vref_bool", _wrap_TestDirector_wrp_vref_bool}, 
    {"wrp_vref_schar", _wrap_TestDirector_wrp_vref_schar}, 
    {"wrp_vref_uchar", _wrap_TestDirector_wrp_vref_uchar}, 
    {"wrp_vref_int", _wrap_TestDirector_wrp_vref_int}, 
    {"wrp_vref_uint", _wrap_TestDirector_wrp_vref_uint}, 
    {"wrp_vref_short", _wrap_TestDirector_wrp_vref_short}, 
    {"wrp_vref_ushort", _wrap_TestDirector_wrp_vref_ushort}, 
    {"wrp_vref_long", _wrap_TestDirector_wrp_vref_long}, 
    {"wrp_vref_ulong", _wrap_TestDirector_wrp_vref_ulong}, 
    {"wrp_vref_llong", _wrap_TestDirector_wrp_vref_llong}, 
    {"wrp_vref_ullong", _wrap_TestDirector_wrp_vref_ullong}, 
    {"wrp_vref_char", _wrap_TestDirector_wrp_vref_char}, 
    {"wrp_vref_pchar", _wrap_TestDirector_wrp_vref_pchar}, 
    {"wrp_vref_pcharc", _wrap_TestDirector_wrp_vref_pcharc}, 
    {"wrp_vref_pint", _wrap_TestDirector_wrp_vref_pint}, 
    {"wrp_vref_hello", _wrap_TestDirector_wrp_vref_hello}, 
    {"wrp_vref_myint", _wrap_TestDirector_wrp_vref_myint}, 
    {"wrp_vref_parami", _wrap_TestDirector_wrp_vref_parami}, 
    {"wrp_vref_paramd", _wrap_TestDirector_wrp_vref_paramd}, 
    {"wrp_vref_paramc", _wrap_TestDirector_wrp_vref_paramc}, 
    {"wrp_vref_sizet", _wrap_TestDirector_wrp_vref_sizet}, 
    {"wrp_vval_bool", _wrap_TestDirector_wrp_vval_bool}, 
    {"wrp_vval_schar", _wrap_TestDirector_wrp_vval_schar}, 
    {"wrp_vval_uchar", _wrap_TestDirector_wrp_vval_uchar}, 
    {"wrp_vval_int", _wrap_TestDirector_wrp_vval_int}, 
    {"wrp_vval_uint", _wrap_TestDirector_wrp_vval_uint}, 
    {"wrp_vval_short", _wrap_TestDirector_wrp_vval_short}, 
    {"wrp_vval_ushort", _wrap_TestDirector_wrp_vval_ushort}, 
    {"wrp_vval_long", _wrap_TestDirector_wrp_vval_long}, 
    {"wrp_vval_ulong", _wrap_TestDirector_wrp_vval_ulong}, 
    {"wrp_vval_llong", _wrap_TestDirector_wrp_vval_llong}, 
    {"wrp_vval_ullong", _wrap_TestDirector_wrp_vval_ullong}, 
    {"wrp_vval_char", _wrap_TestDirector_wrp_vval_char}, 
    {"wrp_vval_pchar", _wrap_TestDirector_wrp_vval_pchar}, 
    {"wrp_vval_pcharc", _wrap_TestDirector_wrp_vval_pcharc}, 
    {"wrp_vval_pint", _wrap_TestDirector_wrp_vval_pint}, 
    {"wrp_vval_hello", _wrap_TestDirector_wrp_vval_hello}, 
    {"wrp_vval_myint", _wrap_TestDirector_wrp_vval_myint}, 
    {"wrp_vval_parami", _wrap_TestDirector_wrp_vval_parami}, 
    {"wrp_vval_paramd", _wrap_TestDirector_wrp_vval_paramd}, 
    {"wrp_vval_paramc", _wrap_TestDirector_wrp_vval_paramc}, 
    {"wrp_vval_sizet", _wrap_TestDirector_wrp_vval_sizet}, 
    {"c_check", _wrap_TestDirector_c_check}, 
    {"v_check", _wrap_TestDirector_v_check}, 
    {"ovr_val", _wrap_TestDirector_ovr_val}, 
    {"ovr_ref", _wrap_TestDirector_ovr_ref}, 
    {"vtest", _wrap_TestDirector_vtest}, 
    {0,0}
};
static swig_attribute swig_TestDirector_attributes[] = {
    { "-var_bool",_wrap_TestDirector_var_bool_get, _wrap_TestDirector_var_bool_set},
    { "-var_schar",_wrap_TestDirector_var_schar_get, _wrap_TestDirector_var_schar_set},
    { "-var_uchar",_wrap_TestDirector_var_uchar_get, _wrap_TestDirector_var_uchar_set},
    { "-var_int",_wrap_TestDirector_var_int_get, _wrap_TestDirector_var_int_set},
    { "-var_uint",_wrap_TestDirector_var_uint_get, _wrap_TestDirector_var_uint_set},
    { "-var_short",_wrap_TestDirector_var_short_get, _wrap_TestDirector_var_short_set},
    { "-var_ushort",_wrap_TestDirector_var_ushort_get, _wrap_TestDirector_var_ushort_set},
    { "-var_long",_wrap_TestDirector_var_long_get, _wrap_TestDirector_var_long_set},
    { "-var_ulong",_wrap_TestDirector_var_ulong_get, _wrap_TestDirector_var_ulong_set},
    { "-var_llong",_wrap_TestDirector_var_llong_get, _wrap_TestDirector_var_llong_set},
    { "-var_ullong",_wrap_TestDirector_var_ullong_get, _wrap_TestDirector_var_ullong_set},
    { "-var_char",_wrap_TestDirector_var_char_get, _wrap_TestDirector_var_char_set},
    { "-var_pchar",_wrap_TestDirector_var_pchar_get, _wrap_TestDirector_var_pchar_set},
    { "-var_pcharc",_wrap_TestDirector_var_pcharc_get, _wrap_TestDirector_var_pcharc_set},
    { "-var_pint",_wrap_TestDirector_var_pint_get, _wrap_TestDirector_var_pint_set},
    { "-var_hello",_wrap_TestDirector_var_hello_get, _wrap_TestDirector_var_hello_set},
    { "-var_myint",_wrap_TestDirector_var_myint_get, _wrap_TestDirector_var_myint_set},
    { "-var_parami",_wrap_TestDirector_var_parami_get, _wrap_TestDirector_var_parami_set},
    { "-var_paramd",_wrap_TestDirector_var_paramd_get, _wrap_TestDirector_var_paramd_set},
    { "-var_paramc",_wrap_TestDirector_var_paramc_get, _wrap_TestDirector_var_paramc_set},
    { "-var_sizet",_wrap_TestDirector_var_sizet_get, _wrap_TestDirector_var_sizet_set},
    { "-var_namet",_wrap_TestDirector_var_namet_get, _wrap_TestDirector_var_namet_set},
    {0,0,0}
};
static swig_class *swig_TestDirector_bases[] = {0};
static const char * swig_TestDirector_base_names[] = {0};
static swig_class _wrap_class_TestDirector = { "TestDirector", &SWIGTYPE_p_TestDirector,_wrap_new_TestDirector, swig_delete_TestDirector, swig_TestDirector_methods, swig_TestDirector_attributes, swig_TestDirector_bases,swig_TestDirector_base_names, &swig_module };
SWIGINTERN int
_wrap_v_check(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":v_check ") == TCL_ERROR) SWIG_fail;
  result = (int)v_check();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_char_foo__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float arg1 ;
  char *arg2 = (char *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:char_foo f s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "char_foo" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "char_foo" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (char *)char_foo(arg1,(char const *)arg2);
  Tcl_SetObjResult(interp,SWIG_FromCharPtr((const char *)result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_char_foo__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  int arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:char_foo d i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "char_foo" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "char_foo" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)char_foo(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_char_foo(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_char_foo__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_char_foo__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'char_foo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    char_foo(float,char const *)\n"
    "    char_foo(double,int)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SetPos(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  DCTypes::cuint *arg1 = 0 ;
  DCTypes::cuint *arg2 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SetPos x y ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetPos" "', argument " "1"" of type '" "unsigned int""'");
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetPos" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  result = (unsigned int)DCSystem::SetPos((unsigned int const &)*arg1,(unsigned int const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_double_2__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:val_double_2 x y ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_double_2" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "val_double_2" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (double)val_double_2(arg1,(double const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_double_2__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_double_2 x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_double_2" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)val_double_2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_double_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_val_double_2__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_val_double_2__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'val_double_2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    val_double_2(double,double const &)\n"
    "    val_double_2(double)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_double(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_double x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_double" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)val_double(arg1);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_float_2__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float arg1 ;
  float *arg2 = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  float result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:val_float_2 x y ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_float_2" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "val_float_2" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  result = (float)val_float_2(arg1,(float const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_float(static_cast< float >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_float_2__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  float result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_float_2 x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_float_2" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)val_float_2(arg1);
  Tcl_SetObjResult(interp,SWIG_From_float(static_cast< float >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_float_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_val_float_2__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_val_float_2__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'val_float_2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    val_float_2(float,float const &)\n"
    "    val_float_2(float)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_regression_test_for_bug1699646__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  float result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:regression_test_for_bug1699646 f ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "regression_test_for_bug1699646" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)regression_test_for_bug1699646(arg1);
  Tcl_SetObjResult(interp,SWIG_From_float(static_cast< float >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_regression_test_for_bug1699646__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float result;
  
  if (SWIG_GetArgs(interp, objc, objv,":regression_test_for_bug1699646 ") == TCL_ERROR) SWIG_fail;
  result = (float)regression_test_for_bug1699646();
  Tcl_SetObjResult(interp,SWIG_From_float(static_cast< float >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_regression_test_for_bug1699646(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_regression_test_for_bug1699646__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_regression_test_for_bug1699646__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'regression_test_for_bug1699646'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    regression_test_for_bug1699646(float)\n"
    "    regression_test_for_bug1699646()\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_val_float(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  float result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:val_float x ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_float" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)val_float(arg1);
  Tcl_SetObjResult(interp,SWIG_From_float(static_cast< float >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_pchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_pchar nelements ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_pchar" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (char *)new_pchar(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_char,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_pchar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_pchar ary ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pchar" "', argument " "1"" of type '" "char *""'"); 
  }
  arg1 = reinterpret_cast< char * >(argp1);
  delete_pchar(arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pchar_getitem(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pchar_getitem ary index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pchar_getitem" "', argument " "1"" of type '" "char *""'"); 
  }
  arg1 = reinterpret_cast< char * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pchar_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (char)pchar_getitem(arg1,arg2);
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pchar_setitem(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:pchar_setitem ary index value ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pchar_setitem" "', argument " "1"" of type '" "char *""'"); 
  }
  arg1 = reinterpret_cast< char * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pchar_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pchar_setitem" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  pchar_setitem(arg1,arg2,arg3);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}



static swig_command_info swig_commands[] = {
    { SWIG_prefix "val_bool", (swig_wrapper_func) _wrap_val_bool, NULL},
    { SWIG_prefix "val_schar", (swig_wrapper_func) _wrap_val_schar, NULL},
    { SWIG_prefix "val_uchar", (swig_wrapper_func) _wrap_val_uchar, NULL},
    { SWIG_prefix "val_int", (swig_wrapper_func) _wrap_val_int, NULL},
    { SWIG_prefix "val_uint", (swig_wrapper_func) _wrap_val_uint, NULL},
    { SWIG_prefix "val_short", (swig_wrapper_func) _wrap_val_short, NULL},
    { SWIG_prefix "val_ushort", (swig_wrapper_func) _wrap_val_ushort, NULL},
    { SWIG_prefix "val_long", (swig_wrapper_func) _wrap_val_long, NULL},
    { SWIG_prefix "val_ulong", (swig_wrapper_func) _wrap_val_ulong, NULL},
    { SWIG_prefix "val_llong", (swig_wrapper_func) _wrap_val_llong, NULL},
    { SWIG_prefix "val_ullong", (swig_wrapper_func) _wrap_val_ullong, NULL},
    { SWIG_prefix "val_char", (swig_wrapper_func) _wrap_val_char, NULL},
    { SWIG_prefix "val_pchar", (swig_wrapper_func) _wrap_val_pchar, NULL},
    { SWIG_prefix "val_pcharc", (swig_wrapper_func) _wrap_val_pcharc, NULL},
    { SWIG_prefix "val_pint", (swig_wrapper_func) _wrap_val_pint, NULL},
    { SWIG_prefix "val_hello", (swig_wrapper_func) _wrap_val_hello, NULL},
    { SWIG_prefix "val_myint", (swig_wrapper_func) _wrap_val_myint, NULL},
    { SWIG_prefix "val_parami", (swig_wrapper_func) _wrap_val_parami, NULL},
    { SWIG_prefix "val_paramd", (swig_wrapper_func) _wrap_val_paramd, NULL},
    { SWIG_prefix "val_paramc", (swig_wrapper_func) _wrap_val_paramc, NULL},
    { SWIG_prefix "val_sizet", (swig_wrapper_func) _wrap_val_sizet, NULL},
    { SWIG_prefix "ref_bool", (swig_wrapper_func) _wrap_ref_bool, NULL},
    { SWIG_prefix "ref_schar", (swig_wrapper_func) _wrap_ref_schar, NULL},
    { SWIG_prefix "ref_uchar", (swig_wrapper_func) _wrap_ref_uchar, NULL},
    { SWIG_prefix "ref_int", (swig_wrapper_func) _wrap_ref_int, NULL},
    { SWIG_prefix "ref_uint", (swig_wrapper_func) _wrap_ref_uint, NULL},
    { SWIG_prefix "ref_short", (swig_wrapper_func) _wrap_ref_short, NULL},
    { SWIG_prefix "ref_ushort", (swig_wrapper_func) _wrap_ref_ushort, NULL},
    { SWIG_prefix "ref_long", (swig_wrapper_func) _wrap_ref_long, NULL},
    { SWIG_prefix "ref_ulong", (swig_wrapper_func) _wrap_ref_ulong, NULL},
    { SWIG_prefix "ref_llong", (swig_wrapper_func) _wrap_ref_llong, NULL},
    { SWIG_prefix "ref_ullong", (swig_wrapper_func) _wrap_ref_ullong, NULL},
    { SWIG_prefix "ref_char", (swig_wrapper_func) _wrap_ref_char, NULL},
    { SWIG_prefix "ref_pchar", (swig_wrapper_func) _wrap_ref_pchar, NULL},
    { SWIG_prefix "ref_pcharc", (swig_wrapper_func) _wrap_ref_pcharc, NULL},
    { SWIG_prefix "ref_pint", (swig_wrapper_func) _wrap_ref_pint, NULL},
    { SWIG_prefix "ref_hello", (swig_wrapper_func) _wrap_ref_hello, NULL},
    { SWIG_prefix "ref_myint", (swig_wrapper_func) _wrap_ref_myint, NULL},
    { SWIG_prefix "ref_parami", (swig_wrapper_func) _wrap_ref_parami, NULL},
    { SWIG_prefix "ref_paramd", (swig_wrapper_func) _wrap_ref_paramd, NULL},
    { SWIG_prefix "ref_paramc", (swig_wrapper_func) _wrap_ref_paramc, NULL},
    { SWIG_prefix "ref_sizet", (swig_wrapper_func) _wrap_ref_sizet, NULL},
    { SWIG_prefix "var_init", (swig_wrapper_func) _wrap_var_init, NULL},
    { SWIG_prefix "Foo__a_set", (swig_wrapper_func) _wrap_Foo__a_set, NULL},
    { SWIG_prefix "Foo__a_get", (swig_wrapper_func) _wrap_Foo__a_get, NULL},
    { SWIG_prefix "new_Foo", (swig_wrapper_func) _wrap_new_Foo, NULL},
    { SWIG_prefix "Foo_copy", (swig_wrapper_func) _wrap_Foo_copy, NULL},
    { SWIG_prefix "Foo_copy_c", (swig_wrapper_func) _wrap_Foo_copy_c, NULL},
    { SWIG_prefix "Foo_copy_r", (swig_wrapper_func) _wrap_Foo_copy_r, NULL},
    { SWIG_prefix "Foo_this_p", (swig_wrapper_func) _wrap_Foo_this_p, NULL},
    { SWIG_prefix "Foo_this_r", (swig_wrapper_func) _wrap_Foo_this_r, NULL},
    { SWIG_prefix "delete_Foo", (swig_wrapper_func) _wrap_delete_Foo, NULL},
    { SWIG_prefix "Foo", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Foo},
    { SWIG_prefix "fptr_val", (swig_wrapper_func) _wrap_fptr_val, NULL},
    { SWIG_prefix "fptr_ref", (swig_wrapper_func) _wrap_fptr_ref, NULL},
    { SWIG_prefix "new_Test", (swig_wrapper_func) _wrap_new_Test, NULL},
    { SWIG_prefix "delete_Test", (swig_wrapper_func) _wrap_delete_Test, NULL},
    { SWIG_prefix "Test_var_bool_set", (swig_wrapper_func) _wrap_Test_var_bool_set, NULL},
    { SWIG_prefix "Test_var_bool_get", (swig_wrapper_func) _wrap_Test_var_bool_get, NULL},
    { SWIG_prefix "Test_var_schar_set", (swig_wrapper_func) _wrap_Test_var_schar_set, NULL},
    { SWIG_prefix "Test_var_schar_get", (swig_wrapper_func) _wrap_Test_var_schar_get, NULL},
    { SWIG_prefix "Test_var_uchar_set", (swig_wrapper_func) _wrap_Test_var_uchar_set, NULL},
    { SWIG_prefix "Test_var_uchar_get", (swig_wrapper_func) _wrap_Test_var_uchar_get, NULL},
    { SWIG_prefix "Test_var_int_set", (swig_wrapper_func) _wrap_Test_var_int_set, NULL},
    { SWIG_prefix "Test_var_int_get", (swig_wrapper_func) _wrap_Test_var_int_get, NULL},
    { SWIG_prefix "Test_var_uint_set", (swig_wrapper_func) _wrap_Test_var_uint_set, NULL},
    { SWIG_prefix "Test_var_uint_get", (swig_wrapper_func) _wrap_Test_var_uint_get, NULL},
    { SWIG_prefix "Test_var_short_set", (swig_wrapper_func) _wrap_Test_var_short_set, NULL},
    { SWIG_prefix "Test_var_short_get", (swig_wrapper_func) _wrap_Test_var_short_get, NULL},
    { SWIG_prefix "Test_var_ushort_set", (swig_wrapper_func) _wrap_Test_var_ushort_set, NULL},
    { SWIG_prefix "Test_var_ushort_get", (swig_wrapper_func) _wrap_Test_var_ushort_get, NULL},
    { SWIG_prefix "Test_var_long_set", (swig_wrapper_func) _wrap_Test_var_long_set, NULL},
    { SWIG_prefix "Test_var_long_get", (swig_wrapper_func) _wrap_Test_var_long_get, NULL},
    { SWIG_prefix "Test_var_ulong_set", (swig_wrapper_func) _wrap_Test_var_ulong_set, NULL},
    { SWIG_prefix "Test_var_ulong_get", (swig_wrapper_func) _wrap_Test_var_ulong_get, NULL},
    { SWIG_prefix "Test_var_llong_set", (swig_wrapper_func) _wrap_Test_var_llong_set, NULL},
    { SWIG_prefix "Test_var_llong_get", (swig_wrapper_func) _wrap_Test_var_llong_get, NULL},
    { SWIG_prefix "Test_var_ullong_set", (swig_wrapper_func) _wrap_Test_var_ullong_set, NULL},
    { SWIG_prefix "Test_var_ullong_get", (swig_wrapper_func) _wrap_Test_var_ullong_get, NULL},
    { SWIG_prefix "Test_var_char_set", (swig_wrapper_func) _wrap_Test_var_char_set, NULL},
    { SWIG_prefix "Test_var_char_get", (swig_wrapper_func) _wrap_Test_var_char_get, NULL},
    { SWIG_prefix "Test_var_pchar_set", (swig_wrapper_func) _wrap_Test_var_pchar_set, NULL},
    { SWIG_prefix "Test_var_pchar_get", (swig_wrapper_func) _wrap_Test_var_pchar_get, NULL},
    { SWIG_prefix "Test_var_pcharc_set", (swig_wrapper_func) _wrap_Test_var_pcharc_set, NULL},
    { SWIG_prefix "Test_var_pcharc_get", (swig_wrapper_func) _wrap_Test_var_pcharc_get, NULL},
    { SWIG_prefix "Test_var_pint_set", (swig_wrapper_func) _wrap_Test_var_pint_set, NULL},
    { SWIG_prefix "Test_var_pint_get", (swig_wrapper_func) _wrap_Test_var_pint_get, NULL},
    { SWIG_prefix "Test_var_hello_set", (swig_wrapper_func) _wrap_Test_var_hello_set, NULL},
    { SWIG_prefix "Test_var_hello_get", (swig_wrapper_func) _wrap_Test_var_hello_get, NULL},
    { SWIG_prefix "Test_var_myint_set", (swig_wrapper_func) _wrap_Test_var_myint_set, NULL},
    { SWIG_prefix "Test_var_myint_get", (swig_wrapper_func) _wrap_Test_var_myint_get, NULL},
    { SWIG_prefix "Test_var_parami_set", (swig_wrapper_func) _wrap_Test_var_parami_set, NULL},
    { SWIG_prefix "Test_var_parami_get", (swig_wrapper_func) _wrap_Test_var_parami_get, NULL},
    { SWIG_prefix "Test_var_paramd_set", (swig_wrapper_func) _wrap_Test_var_paramd_set, NULL},
    { SWIG_prefix "Test_var_paramd_get", (swig_wrapper_func) _wrap_Test_var_paramd_get, NULL},
    { SWIG_prefix "Test_var_paramc_set", (swig_wrapper_func) _wrap_Test_var_paramc_set, NULL},
    { SWIG_prefix "Test_var_paramc_get", (swig_wrapper_func) _wrap_Test_var_paramc_get, NULL},
    { SWIG_prefix "Test_var_sizet_set", (swig_wrapper_func) _wrap_Test_var_sizet_set, NULL},
    { SWIG_prefix "Test_var_sizet_get", (swig_wrapper_func) _wrap_Test_var_sizet_get, NULL},
    { SWIG_prefix "Test_var_namet_set", (swig_wrapper_func) _wrap_Test_var_namet_set, NULL},
    { SWIG_prefix "Test_var_namet_get", (swig_wrapper_func) _wrap_Test_var_namet_get, NULL},
    { SWIG_prefix "Test_val_namet", (swig_wrapper_func) _wrap_Test_val_namet, NULL},
    { SWIG_prefix "Test_val_cnamet", (swig_wrapper_func) _wrap_Test_val_cnamet, NULL},
    { SWIG_prefix "Test_val_bool", (swig_wrapper_func) _wrap_Test_val_bool, NULL},
    { SWIG_prefix "Test_val_schar", (swig_wrapper_func) _wrap_Test_val_schar, NULL},
    { SWIG_prefix "Test_val_uchar", (swig_wrapper_func) _wrap_Test_val_uchar, NULL},
    { SWIG_prefix "Test_val_int", (swig_wrapper_func) _wrap_Test_val_int, NULL},
    { SWIG_prefix "Test_val_uint", (swig_wrapper_func) _wrap_Test_val_uint, NULL},
    { SWIG_prefix "Test_val_short", (swig_wrapper_func) _wrap_Test_val_short, NULL},
    { SWIG_prefix "Test_val_ushort", (swig_wrapper_func) _wrap_Test_val_ushort, NULL},
    { SWIG_prefix "Test_val_long", (swig_wrapper_func) _wrap_Test_val_long, NULL},
    { SWIG_prefix "Test_val_ulong", (swig_wrapper_func) _wrap_Test_val_ulong, NULL},
    { SWIG_prefix "Test_val_llong", (swig_wrapper_func) _wrap_Test_val_llong, NULL},
    { SWIG_prefix "Test_val_ullong", (swig_wrapper_func) _wrap_Test_val_ullong, NULL},
    { SWIG_prefix "Test_val_char", (swig_wrapper_func) _wrap_Test_val_char, NULL},
    { SWIG_prefix "Test_val_pchar", (swig_wrapper_func) _wrap_Test_val_pchar, NULL},
    { SWIG_prefix "Test_val_pcharc", (swig_wrapper_func) _wrap_Test_val_pcharc, NULL},
    { SWIG_prefix "Test_val_pint", (swig_wrapper_func) _wrap_Test_val_pint, NULL},
    { SWIG_prefix "Test_val_hello", (swig_wrapper_func) _wrap_Test_val_hello, NULL},
    { SWIG_prefix "Test_val_myint", (swig_wrapper_func) _wrap_Test_val_myint, NULL},
    { SWIG_prefix "Test_val_parami", (swig_wrapper_func) _wrap_Test_val_parami, NULL},
    { SWIG_prefix "Test_val_paramd", (swig_wrapper_func) _wrap_Test_val_paramd, NULL},
    { SWIG_prefix "Test_val_paramc", (swig_wrapper_func) _wrap_Test_val_paramc, NULL},
    { SWIG_prefix "Test_val_sizet", (swig_wrapper_func) _wrap_Test_val_sizet, NULL},
    { SWIG_prefix "Test_ref_bool", (swig_wrapper_func) _wrap_Test_ref_bool, NULL},
    { SWIG_prefix "Test_ref_schar", (swig_wrapper_func) _wrap_Test_ref_schar, NULL},
    { SWIG_prefix "Test_ref_uchar", (swig_wrapper_func) _wrap_Test_ref_uchar, NULL},
    { SWIG_prefix "Test_ref_int", (swig_wrapper_func) _wrap_Test_ref_int, NULL},
    { SWIG_prefix "Test_ref_uint", (swig_wrapper_func) _wrap_Test_ref_uint, NULL},
    { SWIG_prefix "Test_ref_short", (swig_wrapper_func) _wrap_Test_ref_short, NULL},
    { SWIG_prefix "Test_ref_ushort", (swig_wrapper_func) _wrap_Test_ref_ushort, NULL},
    { SWIG_prefix "Test_ref_long", (swig_wrapper_func) _wrap_Test_ref_long, NULL},
    { SWIG_prefix "Test_ref_ulong", (swig_wrapper_func) _wrap_Test_ref_ulong, NULL},
    { SWIG_prefix "Test_ref_llong", (swig_wrapper_func) _wrap_Test_ref_llong, NULL},
    { SWIG_prefix "Test_ref_ullong", (swig_wrapper_func) _wrap_Test_ref_ullong, NULL},
    { SWIG_prefix "Test_ref_char", (swig_wrapper_func) _wrap_Test_ref_char, NULL},
    { SWIG_prefix "Test_ref_pchar", (swig_wrapper_func) _wrap_Test_ref_pchar, NULL},
    { SWIG_prefix "Test_ref_pcharc", (swig_wrapper_func) _wrap_Test_ref_pcharc, NULL},
    { SWIG_prefix "Test_ref_pint", (swig_wrapper_func) _wrap_Test_ref_pint, NULL},
    { SWIG_prefix "Test_ref_hello", (swig_wrapper_func) _wrap_Test_ref_hello, NULL},
    { SWIG_prefix "Test_ref_myint", (swig_wrapper_func) _wrap_Test_ref_myint, NULL},
    { SWIG_prefix "Test_ref_parami", (swig_wrapper_func) _wrap_Test_ref_parami, NULL},
    { SWIG_prefix "Test_ref_paramd", (swig_wrapper_func) _wrap_Test_ref_paramd, NULL},
    { SWIG_prefix "Test_ref_paramc", (swig_wrapper_func) _wrap_Test_ref_paramc, NULL},
    { SWIG_prefix "Test_ref_sizet", (swig_wrapper_func) _wrap_Test_ref_sizet, NULL},
    { SWIG_prefix "Test_c_check", (swig_wrapper_func) _wrap_Test_c_check, NULL},
    { SWIG_prefix "Test_v_check", (swig_wrapper_func) _wrap_Test_v_check, NULL},
    { SWIG_prefix "Test_ovr_val", (swig_wrapper_func) _wrap_Test_ovr_val, NULL},
    { SWIG_prefix "Test_ovr_ref", (swig_wrapper_func) _wrap_Test_ovr_ref, NULL},
    { SWIG_prefix "Test", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Test},
    { SWIG_prefix "new_TestDirector", (swig_wrapper_func) _wrap_new_TestDirector, NULL},
    { SWIG_prefix "delete_TestDirector", (swig_wrapper_func) _wrap_delete_TestDirector, NULL},
    { SWIG_prefix "TestDirector_vval_namet", (swig_wrapper_func) _wrap_TestDirector_vval_namet, NULL},
    { SWIG_prefix "TestDirector_vval_cnamet", (swig_wrapper_func) _wrap_TestDirector_vval_cnamet, NULL},
    { SWIG_prefix "TestDirector_var_bool_set", (swig_wrapper_func) _wrap_TestDirector_var_bool_set, NULL},
    { SWIG_prefix "TestDirector_var_bool_get", (swig_wrapper_func) _wrap_TestDirector_var_bool_get, NULL},
    { SWIG_prefix "TestDirector_var_schar_set", (swig_wrapper_func) _wrap_TestDirector_var_schar_set, NULL},
    { SWIG_prefix "TestDirector_var_schar_get", (swig_wrapper_func) _wrap_TestDirector_var_schar_get, NULL},
    { SWIG_prefix "TestDirector_var_uchar_set", (swig_wrapper_func) _wrap_TestDirector_var_uchar_set, NULL},
    { SWIG_prefix "TestDirector_var_uchar_get", (swig_wrapper_func) _wrap_TestDirector_var_uchar_get, NULL},
    { SWIG_prefix "TestDirector_var_int_set", (swig_wrapper_func) _wrap_TestDirector_var_int_set, NULL},
    { SWIG_prefix "TestDirector_var_int_get", (swig_wrapper_func) _wrap_TestDirector_var_int_get, NULL},
    { SWIG_prefix "TestDirector_var_uint_set", (swig_wrapper_func) _wrap_TestDirector_var_uint_set, NULL},
    { SWIG_prefix "TestDirector_var_uint_get", (swig_wrapper_func) _wrap_TestDirector_var_uint_get, NULL},
    { SWIG_prefix "TestDirector_var_short_set", (swig_wrapper_func) _wrap_TestDirector_var_short_set, NULL},
    { SWIG_prefix "TestDirector_var_short_get", (swig_wrapper_func) _wrap_TestDirector_var_short_get, NULL},
    { SWIG_prefix "TestDirector_var_ushort_set", (swig_wrapper_func) _wrap_TestDirector_var_ushort_set, NULL},
    { SWIG_prefix "TestDirector_var_ushort_get", (swig_wrapper_func) _wrap_TestDirector_var_ushort_get, NULL},
    { SWIG_prefix "TestDirector_var_long_set", (swig_wrapper_func) _wrap_TestDirector_var_long_set, NULL},
    { SWIG_prefix "TestDirector_var_long_get", (swig_wrapper_func) _wrap_TestDirector_var_long_get, NULL},
    { SWIG_prefix "TestDirector_var_ulong_set", (swig_wrapper_func) _wrap_TestDirector_var_ulong_set, NULL},
    { SWIG_prefix "TestDirector_var_ulong_get", (swig_wrapper_func) _wrap_TestDirector_var_ulong_get, NULL},
    { SWIG_prefix "TestDirector_var_llong_set", (swig_wrapper_func) _wrap_TestDirector_var_llong_set, NULL},
    { SWIG_prefix "TestDirector_var_llong_get", (swig_wrapper_func) _wrap_TestDirector_var_llong_get, NULL},
    { SWIG_prefix "TestDirector_var_ullong_set", (swig_wrapper_func) _wrap_TestDirector_var_ullong_set, NULL},
    { SWIG_prefix "TestDirector_var_ullong_get", (swig_wrapper_func) _wrap_TestDirector_var_ullong_get, NULL},
    { SWIG_prefix "TestDirector_var_char_set", (swig_wrapper_func) _wrap_TestDirector_var_char_set, NULL},
    { SWIG_prefix "TestDirector_var_char_get", (swig_wrapper_func) _wrap_TestDirector_var_char_get, NULL},
    { SWIG_prefix "TestDirector_var_pchar_set", (swig_wrapper_func) _wrap_TestDirector_var_pchar_set, NULL},
    { SWIG_prefix "TestDirector_var_pchar_get", (swig_wrapper_func) _wrap_TestDirector_var_pchar_get, NULL},
    { SWIG_prefix "TestDirector_var_pcharc_set", (swig_wrapper_func) _wrap_TestDirector_var_pcharc_set, NULL},
    { SWIG_prefix "TestDirector_var_pcharc_get", (swig_wrapper_func) _wrap_TestDirector_var_pcharc_get, NULL},
    { SWIG_prefix "TestDirector_var_pint_set", (swig_wrapper_func) _wrap_TestDirector_var_pint_set, NULL},
    { SWIG_prefix "TestDirector_var_pint_get", (swig_wrapper_func) _wrap_TestDirector_var_pint_get, NULL},
    { SWIG_prefix "TestDirector_var_hello_set", (swig_wrapper_func) _wrap_TestDirector_var_hello_set, NULL},
    { SWIG_prefix "TestDirector_var_hello_get", (swig_wrapper_func) _wrap_TestDirector_var_hello_get, NULL},
    { SWIG_prefix "TestDirector_var_myint_set", (swig_wrapper_func) _wrap_TestDirector_var_myint_set, NULL},
    { SWIG_prefix "TestDirector_var_myint_get", (swig_wrapper_func) _wrap_TestDirector_var_myint_get, NULL},
    { SWIG_prefix "TestDirector_var_parami_set", (swig_wrapper_func) _wrap_TestDirector_var_parami_set, NULL},
    { SWIG_prefix "TestDirector_var_parami_get", (swig_wrapper_func) _wrap_TestDirector_var_parami_get, NULL},
    { SWIG_prefix "TestDirector_var_paramd_set", (swig_wrapper_func) _wrap_TestDirector_var_paramd_set, NULL},
    { SWIG_prefix "TestDirector_var_paramd_get", (swig_wrapper_func) _wrap_TestDirector_var_paramd_get, NULL},
    { SWIG_prefix "TestDirector_var_paramc_set", (swig_wrapper_func) _wrap_TestDirector_var_paramc_set, NULL},
    { SWIG_prefix "TestDirector_var_paramc_get", (swig_wrapper_func) _wrap_TestDirector_var_paramc_get, NULL},
    { SWIG_prefix "TestDirector_var_sizet_set", (swig_wrapper_func) _wrap_TestDirector_var_sizet_set, NULL},
    { SWIG_prefix "TestDirector_var_sizet_get", (swig_wrapper_func) _wrap_TestDirector_var_sizet_get, NULL},
    { SWIG_prefix "TestDirector_var_namet_set", (swig_wrapper_func) _wrap_TestDirector_var_namet_set, NULL},
    { SWIG_prefix "TestDirector_var_namet_get", (swig_wrapper_func) _wrap_TestDirector_var_namet_get, NULL},
    { SWIG_prefix "TestDirector_val_bool", (swig_wrapper_func) _wrap_TestDirector_val_bool, NULL},
    { SWIG_prefix "TestDirector_val_schar", (swig_wrapper_func) _wrap_TestDirector_val_schar, NULL},
    { SWIG_prefix "TestDirector_val_uchar", (swig_wrapper_func) _wrap_TestDirector_val_uchar, NULL},
    { SWIG_prefix "TestDirector_val_int", (swig_wrapper_func) _wrap_TestDirector_val_int, NULL},
    { SWIG_prefix "TestDirector_val_uint", (swig_wrapper_func) _wrap_TestDirector_val_uint, NULL},
    { SWIG_prefix "TestDirector_val_short", (swig_wrapper_func) _wrap_TestDirector_val_short, NULL},
    { SWIG_prefix "TestDirector_val_ushort", (swig_wrapper_func) _wrap_TestDirector_val_ushort, NULL},
    { SWIG_prefix "TestDirector_val_long", (swig_wrapper_func) _wrap_TestDirector_val_long, NULL},
    { SWIG_prefix "TestDirector_val_ulong", (swig_wrapper_func) _wrap_TestDirector_val_ulong, NULL},
    { SWIG_prefix "TestDirector_val_llong", (swig_wrapper_func) _wrap_TestDirector_val_llong, NULL},
    { SWIG_prefix "TestDirector_val_ullong", (swig_wrapper_func) _wrap_TestDirector_val_ullong, NULL},
    { SWIG_prefix "TestDirector_val_char", (swig_wrapper_func) _wrap_TestDirector_val_char, NULL},
    { SWIG_prefix "TestDirector_val_pchar", (swig_wrapper_func) _wrap_TestDirector_val_pchar, NULL},
    { SWIG_prefix "TestDirector_val_pcharc", (swig_wrapper_func) _wrap_TestDirector_val_pcharc, NULL},
    { SWIG_prefix "TestDirector_val_pint", (swig_wrapper_func) _wrap_TestDirector_val_pint, NULL},
    { SWIG_prefix "TestDirector_val_hello", (swig_wrapper_func) _wrap_TestDirector_val_hello, NULL},
    { SWIG_prefix "TestDirector_val_myint", (swig_wrapper_func) _wrap_TestDirector_val_myint, NULL},
    { SWIG_prefix "TestDirector_val_parami", (swig_wrapper_func) _wrap_TestDirector_val_parami, NULL},
    { SWIG_prefix "TestDirector_val_paramd", (swig_wrapper_func) _wrap_TestDirector_val_paramd, NULL},
    { SWIG_prefix "TestDirector_val_paramc", (swig_wrapper_func) _wrap_TestDirector_val_paramc, NULL},
    { SWIG_prefix "TestDirector_val_sizet", (swig_wrapper_func) _wrap_TestDirector_val_sizet, NULL},
    { SWIG_prefix "TestDirector_ref_bool", (swig_wrapper_func) _wrap_TestDirector_ref_bool, NULL},
    { SWIG_prefix "TestDirector_ref_schar", (swig_wrapper_func) _wrap_TestDirector_ref_schar, NULL},
    { SWIG_prefix "TestDirector_ref_uchar", (swig_wrapper_func) _wrap_TestDirector_ref_uchar, NULL},
    { SWIG_prefix "TestDirector_ref_int", (swig_wrapper_func) _wrap_TestDirector_ref_int, NULL},
    { SWIG_prefix "TestDirector_ref_uint", (swig_wrapper_func) _wrap_TestDirector_ref_uint, NULL},
    { SWIG_prefix "TestDirector_ref_short", (swig_wrapper_func) _wrap_TestDirector_ref_short, NULL},
    { SWIG_prefix "TestDirector_ref_ushort", (swig_wrapper_func) _wrap_TestDirector_ref_ushort, NULL},
    { SWIG_prefix "TestDirector_ref_long", (swig_wrapper_func) _wrap_TestDirector_ref_long, NULL},
    { SWIG_prefix "TestDirector_ref_ulong", (swig_wrapper_func) _wrap_TestDirector_ref_ulong, NULL},
    { SWIG_prefix "TestDirector_ref_llong", (swig_wrapper_func) _wrap_TestDirector_ref_llong, NULL},
    { SWIG_prefix "TestDirector_ref_ullong", (swig_wrapper_func) _wrap_TestDirector_ref_ullong, NULL},
    { SWIG_prefix "TestDirector_ref_char", (swig_wrapper_func) _wrap_TestDirector_ref_char, NULL},
    { SWIG_prefix "TestDirector_ref_pchar", (swig_wrapper_func) _wrap_TestDirector_ref_pchar, NULL},
    { SWIG_prefix "TestDirector_ref_pcharc", (swig_wrapper_func) _wrap_TestDirector_ref_pcharc, NULL},
    { SWIG_prefix "TestDirector_ref_pint", (swig_wrapper_func) _wrap_TestDirector_ref_pint, NULL},
    { SWIG_prefix "TestDirector_ref_hello", (swig_wrapper_func) _wrap_TestDirector_ref_hello, NULL},
    { SWIG_prefix "TestDirector_ref_myint", (swig_wrapper_func) _wrap_TestDirector_ref_myint, NULL},
    { SWIG_prefix "TestDirector_ref_parami", (swig_wrapper_func) _wrap_TestDirector_ref_parami, NULL},
    { SWIG_prefix "TestDirector_ref_paramd", (swig_wrapper_func) _wrap_TestDirector_ref_paramd, NULL},
    { SWIG_prefix "TestDirector_ref_paramc", (swig_wrapper_func) _wrap_TestDirector_ref_paramc, NULL},
    { SWIG_prefix "TestDirector_ref_sizet", (swig_wrapper_func) _wrap_TestDirector_ref_sizet, NULL},
    { SWIG_prefix "TestDirector_vval_bool", (swig_wrapper_func) _wrap_TestDirector_vval_bool, NULL},
    { SWIG_prefix "TestDirector_vval_schar", (swig_wrapper_func) _wrap_TestDirector_vval_schar, NULL},
    { SWIG_prefix "TestDirector_vval_uchar", (swig_wrapper_func) _wrap_TestDirector_vval_uchar, NULL},
    { SWIG_prefix "TestDirector_vval_int", (swig_wrapper_func) _wrap_TestDirector_vval_int, NULL},
    { SWIG_prefix "TestDirector_vval_uint", (swig_wrapper_func) _wrap_TestDirector_vval_uint, NULL},
    { SWIG_prefix "TestDirector_vval_short", (swig_wrapper_func) _wrap_TestDirector_vval_short, NULL},
    { SWIG_prefix "TestDirector_vval_ushort", (swig_wrapper_func) _wrap_TestDirector_vval_ushort, NULL},
    { SWIG_prefix "TestDirector_vval_long", (swig_wrapper_func) _wrap_TestDirector_vval_long, NULL},
    { SWIG_prefix "TestDirector_vval_ulong", (swig_wrapper_func) _wrap_TestDirector_vval_ulong, NULL},
    { SWIG_prefix "TestDirector_vval_llong", (swig_wrapper_func) _wrap_TestDirector_vval_llong, NULL},
    { SWIG_prefix "TestDirector_vval_ullong", (swig_wrapper_func) _wrap_TestDirector_vval_ullong, NULL},
    { SWIG_prefix "TestDirector_vval_char", (swig_wrapper_func) _wrap_TestDirector_vval_char, NULL},
    { SWIG_prefix "TestDirector_vval_pchar", (swig_wrapper_func) _wrap_TestDirector_vval_pchar, NULL},
    { SWIG_prefix "TestDirector_vval_pcharc", (swig_wrapper_func) _wrap_TestDirector_vval_pcharc, NULL},
    { SWIG_prefix "TestDirector_vval_pint", (swig_wrapper_func) _wrap_TestDirector_vval_pint, NULL},
    { SWIG_prefix "TestDirector_vval_hello", (swig_wrapper_func) _wrap_TestDirector_vval_hello, NULL},
    { SWIG_prefix "TestDirector_vval_myint", (swig_wrapper_func) _wrap_TestDirector_vval_myint, NULL},
    { SWIG_prefix "TestDirector_vval_parami", (swig_wrapper_func) _wrap_TestDirector_vval_parami, NULL},
    { SWIG_prefix "TestDirector_vval_paramd", (swig_wrapper_func) _wrap_TestDirector_vval_paramd, NULL},
    { SWIG_prefix "TestDirector_vval_paramc", (swig_wrapper_func) _wrap_TestDirector_vval_paramc, NULL},
    { SWIG_prefix "TestDirector_vval_sizet", (swig_wrapper_func) _wrap_TestDirector_vval_sizet, NULL},
    { SWIG_prefix "TestDirector_vref_bool", (swig_wrapper_func) _wrap_TestDirector_vref_bool, NULL},
    { SWIG_prefix "TestDirector_vref_schar", (swig_wrapper_func) _wrap_TestDirector_vref_schar, NULL},
    { SWIG_prefix "TestDirector_vref_uchar", (swig_wrapper_func) _wrap_TestDirector_vref_uchar, NULL},
    { SWIG_prefix "TestDirector_vref_int", (swig_wrapper_func) _wrap_TestDirector_vref_int, NULL},
    { SWIG_prefix "TestDirector_vref_uint", (swig_wrapper_func) _wrap_TestDirector_vref_uint, NULL},
    { SWIG_prefix "TestDirector_vref_short", (swig_wrapper_func) _wrap_TestDirector_vref_short, NULL},
    { SWIG_prefix "TestDirector_vref_ushort", (swig_wrapper_func) _wrap_TestDirector_vref_ushort, NULL},
    { SWIG_prefix "TestDirector_vref_long", (swig_wrapper_func) _wrap_TestDirector_vref_long, NULL},
    { SWIG_prefix "TestDirector_vref_ulong", (swig_wrapper_func) _wrap_TestDirector_vref_ulong, NULL},
    { SWIG_prefix "TestDirector_vref_llong", (swig_wrapper_func) _wrap_TestDirector_vref_llong, NULL},
    { SWIG_prefix "TestDirector_vref_ullong", (swig_wrapper_func) _wrap_TestDirector_vref_ullong, NULL},
    { SWIG_prefix "TestDirector_vref_char", (swig_wrapper_func) _wrap_TestDirector_vref_char, NULL},
    { SWIG_prefix "TestDirector_vref_pchar", (swig_wrapper_func) _wrap_TestDirector_vref_pchar, NULL},
    { SWIG_prefix "TestDirector_vref_pcharc", (swig_wrapper_func) _wrap_TestDirector_vref_pcharc, NULL},
    { SWIG_prefix "TestDirector_vref_pint", (swig_wrapper_func) _wrap_TestDirector_vref_pint, NULL},
    { SWIG_prefix "TestDirector_vref_hello", (swig_wrapper_func) _wrap_TestDirector_vref_hello, NULL},
    { SWIG_prefix "TestDirector_vref_myint", (swig_wrapper_func) _wrap_TestDirector_vref_myint, NULL},
    { SWIG_prefix "TestDirector_vref_parami", (swig_wrapper_func) _wrap_TestDirector_vref_parami, NULL},
    { SWIG_prefix "TestDirector_vref_paramd", (swig_wrapper_func) _wrap_TestDirector_vref_paramd, NULL},
    { SWIG_prefix "TestDirector_vref_paramc", (swig_wrapper_func) _wrap_TestDirector_vref_paramc, NULL},
    { SWIG_prefix "TestDirector_vref_sizet", (swig_wrapper_func) _wrap_TestDirector_vref_sizet, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_bool", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_bool, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_schar", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_schar, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_uchar", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_uchar, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_int", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_int, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_uint", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_uint, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_short", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_short, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_ushort", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_ushort, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_long", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_long, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_ulong", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_ulong, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_llong", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_llong, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_ullong", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_ullong, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_char", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_char, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_pchar", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_pchar, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_pcharc", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_pcharc, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_pint", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_pint, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_hello", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_hello, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_myint", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_myint, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_parami", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_parami, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_paramd", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_paramd, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_paramc", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_paramc, NULL},
    { SWIG_prefix "TestDirector_wrp_vref_sizet", (swig_wrapper_func) _wrap_TestDirector_wrp_vref_sizet, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_bool", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_bool, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_schar", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_schar, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_uchar", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_uchar, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_int", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_int, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_uint", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_uint, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_short", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_short, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_ushort", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_ushort, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_long", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_long, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_ulong", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_ulong, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_llong", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_llong, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_ullong", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_ullong, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_char", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_char, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_pchar", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_pchar, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_pcharc", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_pcharc, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_pint", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_pint, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_hello", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_hello, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_myint", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_myint, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_parami", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_parami, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_paramd", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_paramd, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_paramc", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_paramc, NULL},
    { SWIG_prefix "TestDirector_wrp_vval_sizet", (swig_wrapper_func) _wrap_TestDirector_wrp_vval_sizet, NULL},
    { SWIG_prefix "TestDirector_c_check", (swig_wrapper_func) _wrap_TestDirector_c_check, NULL},
    { SWIG_prefix "TestDirector_v_check", (swig_wrapper_func) _wrap_TestDirector_v_check, NULL},
    { SWIG_prefix "TestDirector_ovr_val", (swig_wrapper_func) _wrap_TestDirector_ovr_val, NULL},
    { SWIG_prefix "TestDirector_ovr_ref", (swig_wrapper_func) _wrap_TestDirector_ovr_ref, NULL},
    { SWIG_prefix "TestDirector_vtest", (swig_wrapper_func) _wrap_TestDirector_vtest, NULL},
    { SWIG_prefix "TestDirector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_TestDirector},
    { SWIG_prefix "v_check", (swig_wrapper_func) _wrap_v_check, NULL},
    { SWIG_prefix "char_foo", (swig_wrapper_func) _wrap_char_foo, NULL},
    { SWIG_prefix "SetPos", (swig_wrapper_func) _wrap_SetPos, NULL},
    { SWIG_prefix "val_double_2", (swig_wrapper_func) _wrap_val_double_2, NULL},
    { SWIG_prefix "val_double", (swig_wrapper_func) _wrap_val_double, NULL},
    { SWIG_prefix "val_float_2", (swig_wrapper_func) _wrap_val_float_2, NULL},
    { SWIG_prefix "regression_test_for_bug1699646", (swig_wrapper_func) _wrap_regression_test_for_bug1699646, NULL},
    { SWIG_prefix "val_float", (swig_wrapper_func) _wrap_val_float, NULL},
    { SWIG_prefix "new_pchar", (swig_wrapper_func) _wrap_new_pchar, NULL},
    { SWIG_prefix "delete_pchar", (swig_wrapper_func) _wrap_delete_pchar, NULL},
    { SWIG_prefix "pchar_getitem", (swig_wrapper_func) _wrap_pchar_getitem, NULL},
    { SWIG_prefix "pchar_setitem", (swig_wrapper_func) _wrap_pchar_setitem, NULL},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    { SWIG_prefix "def_pchar", 0, (swig_variable_func) _wrap_def_pchar_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "def_pcharc", 0, (swig_variable_func) _wrap_def_pcharc_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "def_namet", 0, (swig_variable_func) _wrap_def_namet_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "gbl_namet", 0, (swig_variable_func) _wrap_gbl_namet_get,(swig_variable_func) _wrap_gbl_namet_set},
    { SWIG_prefix "fixsize", 0, (swig_variable_func) _wrap_fixsize_get,(swig_variable_func) _wrap_fixsize_set},
    { SWIG_prefix "cct_bool", 0, (swig_variable_func) _wrap_cct_bool_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_schar", 0, (swig_variable_func) _wrap_cct_schar_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_uchar", 0, (swig_variable_func) _wrap_cct_uchar_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_int", 0, (swig_variable_func) _wrap_cct_int_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_uint", 0, (swig_variable_func) _wrap_cct_uint_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_short", 0, (swig_variable_func) _wrap_cct_short_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_ushort", 0, (swig_variable_func) _wrap_cct_ushort_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_long", 0, (swig_variable_func) _wrap_cct_long_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_ulong", 0, (swig_variable_func) _wrap_cct_ulong_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_llong", 0, (swig_variable_func) _wrap_cct_llong_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_ullong", 0, (swig_variable_func) _wrap_cct_ullong_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_char", 0, (swig_variable_func) _wrap_cct_char_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_pchar", 0, (swig_variable_func) _wrap_cct_pchar_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_pcharc", 0, (swig_variable_func) _wrap_cct_pcharc_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_pint", 0, (swig_variable_func) _wrap_cct_pint_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_hello", 0, (swig_variable_func) _wrap_cct_hello_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_myint", 0, (swig_variable_func) _wrap_cct_myint_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_parami", 0, (swig_variable_func) _wrap_cct_parami_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_paramd", 0, (swig_variable_func) _wrap_cct_paramd_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_paramc", 0, (swig_variable_func) _wrap_cct_paramc_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "cct_sizet", 0, (swig_variable_func) _wrap_cct_sizet_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "var_bool", 0, (swig_variable_func) _wrap_var_bool_get,(swig_variable_func) _wrap_var_bool_set},
    { SWIG_prefix "var_schar", 0, (swig_variable_func) _wrap_var_schar_get,(swig_variable_func) _wrap_var_schar_set},
    { SWIG_prefix "var_uchar", 0, (swig_variable_func) _wrap_var_uchar_get,(swig_variable_func) _wrap_var_uchar_set},
    { SWIG_prefix "var_int", 0, (swig_variable_func) _wrap_var_int_get,(swig_variable_func) _wrap_var_int_set},
    { SWIG_prefix "var_uint", 0, (swig_variable_func) _wrap_var_uint_get,(swig_variable_func) _wrap_var_uint_set},
    { SWIG_prefix "var_short", 0, (swig_variable_func) _wrap_var_short_get,(swig_variable_func) _wrap_var_short_set},
    { SWIG_prefix "var_ushort", 0, (swig_variable_func) _wrap_var_ushort_get,(swig_variable_func) _wrap_var_ushort_set},
    { SWIG_prefix "var_long", 0, (swig_variable_func) _wrap_var_long_get,(swig_variable_func) _wrap_var_long_set},
    { SWIG_prefix "var_ulong", 0, (swig_variable_func) _wrap_var_ulong_get,(swig_variable_func) _wrap_var_ulong_set},
    { SWIG_prefix "var_llong", 0, (swig_variable_func) _wrap_var_llong_get,(swig_variable_func) _wrap_var_llong_set},
    { SWIG_prefix "var_ullong", 0, (swig_variable_func) _wrap_var_ullong_get,(swig_variable_func) _wrap_var_ullong_set},
    { SWIG_prefix "var_char", 0, (swig_variable_func) _wrap_var_char_get,(swig_variable_func) _wrap_var_char_set},
    { SWIG_prefix "var_pchar", 0, (swig_variable_func) _wrap_var_pchar_get,(swig_variable_func) _wrap_var_pchar_set},
    { SWIG_prefix "var_pcharc", 0, (swig_variable_func) _wrap_var_pcharc_get,(swig_variable_func) _wrap_var_pcharc_set},
    { SWIG_prefix "var_pint", 0, (swig_variable_func) _wrap_var_pint_get,(swig_variable_func) _wrap_var_pint_set},
    { SWIG_prefix "var_hello", 0, (swig_variable_func) _wrap_var_hello_get,(swig_variable_func) _wrap_var_hello_set},
    { SWIG_prefix "var_myint", 0, (swig_variable_func) _wrap_var_myint_get,(swig_variable_func) _wrap_var_myint_set},
    { SWIG_prefix "var_parami", 0, (swig_variable_func) _wrap_var_parami_get,(swig_variable_func) _wrap_var_parami_set},
    { SWIG_prefix "var_paramd", 0, (swig_variable_func) _wrap_var_paramd_get,(swig_variable_func) _wrap_var_paramd_set},
    { SWIG_prefix "var_paramc", 0, (swig_variable_func) _wrap_var_paramc_get,(swig_variable_func) _wrap_var_paramc_set},
    { SWIG_prefix "var_sizet", 0, (swig_variable_func) _wrap_var_sizet_get,(swig_variable_func) _wrap_var_sizet_set},
    { SWIG_prefix "var_namet", 0, (swig_variable_func) _wrap_var_namet_get,(swig_variable_func) _wrap_var_namet_set},
    { SWIG_prefix "Test_stc_double", 0, (swig_variable_func) _wrap_Test_stc_double_get,(swig_variable_func) swig_readonly},
    { SWIG_prefix "Test_stc_float", 0, (swig_variable_func) _wrap_Test_stc_float_get,(swig_variable_func) swig_readonly},
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_Foo = {"_p_Foo", "foo_ptr|Foo *", 0, 0, (void*)&_wrap_class_Foo, 0};
static swig_type_info _swigt__p_Test = {"_p_Test", "Test *", 0, 0, (void*)&_wrap_class_Test, 0};
static swig_type_info _swigt__p_TestDirector = {"_p_TestDirector", "TestDirector *", 0, 0, (void*)&_wrap_class_TestDirector, 0};
static swig_type_info _swigt__p_a_5__char = {"_p_a_5__char", "namet *|char (*)[5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|pcharc|pint|pchar", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "DCTypes::cuint *|unsigned int *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Foo,
  &_swigt__p_Test,
  &_swigt__p_TestDirector,
  &_swigt__p_a_5__char,
  &_swigt__p_char,
  &_swigt__p_unsigned_int,
};

static swig_cast_info _swigc__p_Foo[] = {  {&_swigt__p_Foo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Test[] = {  {&_swigt__p_Test, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TestDirector[] = {  {&_swigt__p_TestDirector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_5__char[] = {  {&_swigt__p_a_5__char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Foo,
  _swigc__p_Test,
  _swigc__p_TestDirector,
  _swigc__p_a_5__char,
  _swigc__p_char,
  _swigc__p_unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    size_t i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
  /* Create fast method lookup tables */
  
  SWIGINTERN void
  SWIG_Tcl_InstallMethodLookupTables(void) {
    size_t i;
    
    for (i = 0; i < swig_module.size; ++i) {
      swig_type_info *type = swig_module.type_initial[i];
      if (type->clientdata) {
        swig_class* klass = (swig_class*) type->clientdata;
        swig_method* meth;
        Tcl_InitHashTable(&(klass->hashtable), TCL_STRING_KEYS);
        for (meth = klass->methods; meth && meth->name; ++meth) {
          int newEntry;
          Tcl_HashEntry* hashentry = Tcl_CreateHashEntry(&(klass->hashtable), meth->name, &newEntry);
          Tcl_SetHashValue(hashentry, (ClientData)meth->method);
        }
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  size_t i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  /* (char*) cast is required to avoid compiler warning/error for Tcl < 8.4. */
  if (Tcl_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
#ifdef USE_TK_STUBS
  /* (char*) cast is required to avoid compiler warning/error. */
  if (Tk_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif
  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  SWIG_Tcl_InstallMethodLookupTables();
  
  
  SWIG_Tcl_SetConstantObj(interp, "Hi", SWIG_From_int(static_cast< int >(Hi)));
  SWIG_Tcl_SetConstantObj(interp, "Hola", SWIG_From_int(static_cast< int >(Hola)));
  SWIG_Tcl_SetConstantObj(interp, "def_bool", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_schar", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_uchar", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_int", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_uint", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_short", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_ushort", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_long", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_ulong", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_llong", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_ullong", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_float", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_double", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_char", SWIG_From_char(static_cast< char >('H')));
  SWIG_Tcl_SetConstantObj(interp, "def_pint", SWIG_From_int(static_cast< int >(0)));
  SWIG_Tcl_SetConstantObj(interp, "def_sizet", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_myint", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_parami", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_paramd", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "def_paramc", SWIG_From_char(static_cast< char >('c')));
  SWIG_Tcl_SetConstantObj(interp, "sct_bool", SWIG_From_bool(static_cast< bool >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_schar", SWIG_From_signed_SS_char(static_cast< signed char >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_uchar", SWIG_From_unsigned_SS_char(static_cast< unsigned char >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_int", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_uint", SWIG_From_unsigned_SS_int(static_cast< unsigned int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_short", SWIG_From_short(static_cast< short >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_ushort", SWIG_From_unsigned_SS_short(static_cast< unsigned short >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_long", SWIG_From_long(static_cast< long >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_ulong", SWIG_From_unsigned_SS_long(static_cast< unsigned long >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_llong", SWIG_From_long_SS_long(static_cast< long long >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_ullong", SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_char", SWIG_From_char(static_cast< char >('H')));
  SWIG_Tcl_SetConstantObj(interp, "sct_pchar", SWIG_FromCharPtr(def_pchar));
  SWIG_Tcl_SetConstantObj(interp, "sct_pcharc", SWIG_FromCharPtr(def_pcharc));
  SWIG_Tcl_SetConstantObj(interp, "sct_pint", SWIG_FromCharPtr(0));
  SWIG_Tcl_SetConstantObj(interp, "sct_hello", SWIG_From_int(static_cast< int >(Hola)));
  SWIG_Tcl_SetConstantObj(interp, "sct_myint", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_parami", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_paramd", SWIG_From_double(static_cast< double >(1)));
  SWIG_Tcl_SetConstantObj(interp, "sct_paramc", SWIG_From_char(static_cast< char >('c')));
  SWIG_Tcl_SetConstantObj(interp, "sct_sizet", SWIG_From_size_t(static_cast< size_t >(1)));
  SWIG_Tcl_SetConstantObj(interp, "Test_stc_bool", SWIG_From_bool(static_cast< bool >(Test::stc_bool)));
  SWIG_Tcl_SetConstantObj(interp, "Test_stc_schar", SWIG_From_signed_SS_char(static_cast< signed char >(Test::stc_schar)));
  SWIG_Tcl_SetConstantObj(interp, "Test_stc_uchar", SWIG_From_unsigned_SS_char(static_cast< unsigned char >(Test::stc_uchar)));
  SWIG_Tcl_SetConstantObj(interp, "Test_stc_int", SWIG_From_int(static_cast< int >(Test::stc_int)));
  SWIG_Tcl_SetConstantObj(interp, "Test_stc_uint", SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Test::stc_uint)));
  SWIG_Tcl_SetConstantObj(interp, "Test_stc_short", SWIG_From_short(static_cast< short >(Test::stc_short)));
  SWIG_Tcl_SetConstantObj(interp, "Test_stc_ushort", SWIG_From_unsigned_SS_short(static_cast< unsigned short >(Test::stc_ushort)));
  SWIG_Tcl_SetConstantObj(interp, "Test_stc_long", SWIG_From_long(static_cast< long >(Test::stc_long)));
  SWIG_Tcl_SetConstantObj(interp, "Test_stc_ulong", SWIG_From_unsigned_SS_long(static_cast< unsigned long >(Test::stc_ulong)));
  SWIG_Tcl_SetConstantObj(interp, "Test_stc_llong", SWIG_From_long_SS_long(static_cast< long long >(Test::stc_llong)));
  SWIG_Tcl_SetConstantObj(interp, "Test_stc_ullong", SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(Test::stc_ullong)));
  SWIG_Tcl_SetConstantObj(interp, "Test_stc_char", SWIG_From_char(static_cast< char >(Test::stc_char)));
  SWIG_Tcl_SetConstantObj(interp, "TestDirector_stc_bool", SWIG_From_bool(static_cast< bool >(TestDirector::stc_bool)));
  SWIG_Tcl_SetConstantObj(interp, "TestDirector_stc_schar", SWIG_From_signed_SS_char(static_cast< signed char >(TestDirector::stc_schar)));
  SWIG_Tcl_SetConstantObj(interp, "TestDirector_stc_uchar", SWIG_From_unsigned_SS_char(static_cast< unsigned char >(TestDirector::stc_uchar)));
  SWIG_Tcl_SetConstantObj(interp, "TestDirector_stc_int", SWIG_From_int(static_cast< int >(TestDirector::stc_int)));
  SWIG_Tcl_SetConstantObj(interp, "TestDirector_stc_uint", SWIG_From_unsigned_SS_int(static_cast< unsigned int >(TestDirector::stc_uint)));
  SWIG_Tcl_SetConstantObj(interp, "TestDirector_stc_short", SWIG_From_short(static_cast< short >(TestDirector::stc_short)));
  SWIG_Tcl_SetConstantObj(interp, "TestDirector_stc_ushort", SWIG_From_unsigned_SS_short(static_cast< unsigned short >(TestDirector::stc_ushort)));
  SWIG_Tcl_SetConstantObj(interp, "TestDirector_stc_long", SWIG_From_long(static_cast< long >(TestDirector::stc_long)));
  SWIG_Tcl_SetConstantObj(interp, "TestDirector_stc_ulong", SWIG_From_unsigned_SS_long(static_cast< unsigned long >(TestDirector::stc_ulong)));
  SWIG_Tcl_SetConstantObj(interp, "TestDirector_stc_llong", SWIG_From_long_SS_long(static_cast< long long >(TestDirector::stc_llong)));
  SWIG_Tcl_SetConstantObj(interp, "TestDirector_stc_ullong", SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(TestDirector::stc_ullong)));
  SWIG_Tcl_SetConstantObj(interp, "TestDirector_stc_char", SWIG_From_char(static_cast< char >(TestDirector::stc_char)));
  return TCL_OK;
}
SWIGEXPORT int Primitive_types_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

