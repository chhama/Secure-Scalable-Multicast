/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGTCL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
  Tcl_HashTable       hashtable;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, TCL_GLOBAL_ONLY);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    Tcl_HashEntry* hashentry;
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    hashentry = Tcl_FindHashEntry(&(cls->hashtable), method);
    if (hashentry) {
        ClientData cd = Tcl_GetHashValue(hashentry);
        swig_wrapper method_wrapper = (swig_wrapper)cd;
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (method_wrapper)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if (thisvalue && (type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_MyClass swig_types[0]
#define SWIGTYPE_p_RetsMetadata swig_types[1]
#define SWIGTYPE_p_Struct swig_types[2]
#define SWIGTYPE_p_Structure swig_types[3]
#define SWIGTYPE_p_char swig_types[4]
#define SWIGTYPE_p_float swig_types[5]
#define SWIGTYPE_p_int swig_types[6]
#define SWIGTYPE_p_p_MyClass swig_types[7]
#define SWIGTYPE_p_p_Struct swig_types[8]
#define SWIGTYPE_p_p_int swig_types[9]
#define SWIGTYPE_p_p_std__vectorT_MyClass_p_t swig_types[10]
#define SWIGTYPE_p_p_std__vectorT_Struct_const_p_t swig_types[11]
#define SWIGTYPE_p_p_std__vectorT_Struct_p_t swig_types[12]
#define SWIGTYPE_p_p_std__vectorT_Struct_t swig_types[13]
#define SWIGTYPE_p_p_std__vectorT_int_const_p_t swig_types[14]
#define SWIGTYPE_p_p_std__vectorT_int_p_t swig_types[15]
#define SWIGTYPE_p_std__out_of_range swig_types[16]
#define SWIGTYPE_p_std__vectorT_MyClass_p_t swig_types[17]
#define SWIGTYPE_p_std__vectorT_Struct_const_p_t swig_types[18]
#define SWIGTYPE_p_std__vectorT_Struct_p_t swig_types[19]
#define SWIGTYPE_p_std__vectorT_Struct_t swig_types[20]
#define SWIGTYPE_p_std__vectorT_bool_t swig_types[21]
#define SWIGTYPE_p_std__vectorT_char_t swig_types[22]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[23]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[24]
#define SWIGTYPE_p_std__vectorT_int_const_p_t swig_types[25]
#define SWIGTYPE_p_std__vectorT_int_p_t swig_types[26]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[27]
#define SWIGTYPE_p_std__vectorT_int_t__size_type swig_types[28]
#define SWIGTYPE_p_std__vectorT_long_t swig_types[29]
#define SWIGTYPE_p_std__vectorT_short_t swig_types[30]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[31]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[32]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[33]
#define SWIGTYPE_p_std__vectorT_unsigned_long_t swig_types[34]
#define SWIGTYPE_p_std__vectorT_unsigned_short_t swig_types[35]
#define SWIGTYPE_std__ptrdiff_t swig_types[36]
#define SWIGTYPE_std__size_t swig_types[37]
static swig_type_info *swig_types[39];
static swig_module_info swig_module = {swig_types, 38, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Li_std_vector_Init
#define SWIG_name    "li_std_vector"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x020010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif

/* Compatibility version for TCL stubs */
#ifndef SWIG_TCL_STUBS_VERSION
#define SWIG_TCL_STUBS_VERSION "8.1"
#endif



#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>
#include <string>

Tcl_Obj* SwigString_FromString(const std::string &s) {
    return Tcl_NewStringObj(s.data(), (int)s.length());
}

int Tcl_GetBoolFromObj(Tcl_Interp *interp, Tcl_Obj *o, bool *val) {
  int v;
  int res = Tcl_GetBooleanFromObj(interp, o, &v);
  if (res == TCL_OK) {
    *val = v ? true : false;
  }
  return res;  
}
 
int SwigString_AsString(Tcl_Interp *interp, Tcl_Obj *o, std::string *val) {
    int len;
    const char* temp = Tcl_GetStringFromObj(o, &len);
    if (temp == NULL)
        return TCL_ERROR;
    val->assign(temp, len);
    return TCL_OK;
}

// behaviour of this is such as the real Tcl_GetIntFromObj
template <typename Type>
int SwigInt_As(Tcl_Interp *interp, Tcl_Obj *o, Type *val) {
    int temp_val, return_val;
    return_val = Tcl_GetIntFromObj(interp, o, &temp_val);
    *val = (Type) temp_val;
    return return_val;
}

// behaviour of this is such as the real Tcl_GetDoubleFromObj
template <typename Type>
int SwigDouble_As(Tcl_Interp *interp, Tcl_Obj *o, Type *val) {
    int return_val;
    double temp_val;
    return_val = Tcl_GetDoubleFromObj(interp, o, &temp_val);
    *val = (Type) temp_val;
    return return_val;
}



#include <string>


#include <algorithm>
#include <functional>
#include <numeric>


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, unsigned long *val) {
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (v >= 0) {
      if (val) *val = (unsigned long) v;
      return SWIG_OK;
    }
    /* If v is negative, then this could be a negative number, or an
       unsigned value which doesn't fit in a signed long, so try to
       get it as a string so we can distinguish these cases. */
  }
  {
    int len = 0;
    const char *nptr = Tcl_GetStringFromObj(obj, &len);
    if (nptr && len > 0) {
      char *endptr;
      unsigned long v;
      if (*nptr == '-') return SWIG_OverflowError;
      errno = 0;
      v = strtoul(nptr, &endptr,0);
      if (nptr[0] == '\0' || *endptr != '\0')
	return SWIG_TypeError;
      if (v == ULONG_MAX && errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_OK;
	}
      }
    }
  }
  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


#include <stdio.h>
#if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
# ifndef snprintf
#  define snprintf _snprintf
# endif
#endif


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  if (value < (unsigned long) LONG_MAX) {
    return SWIG_From_long  (static_cast< long >(value));
  } else {
    char temp[256]; 
    sprintf(temp, "%lu", value);
    return Tcl_NewStringObj(temp,-1);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


  #define SWIG_From_bool   Tcl_NewBooleanObj 

SWIGINTERN int std_vector_Sl_int_Sg__pop(std::vector< int > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                int x = self->back();
                self->pop_back();
                return x;
            }

SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}

SWIGINTERN int std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,int x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN int
SWIG_AsVal_bool SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, bool *val)
{
  int v;
  if (Tcl_GetBooleanFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v ? true : false;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}

SWIGINTERN bool std_vector_Sl_bool_Sg__pop(std::vector< bool > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                bool x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN bool std_vector_Sl_bool_Sg__get(std::vector< bool > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_bool_Sg__set(std::vector< bool > *self,int i,bool x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(Tcl_Obj * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}

SWIGINTERN char std_vector_Sl_char_Sg__pop(std::vector< char > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                char x = self->back();
                self->pop_back();
                return x;
            }

SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast< int >(size)) : NULL;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}

SWIGINTERN char std_vector_Sl_char_Sg__get(std::vector< char > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_char_Sg__set(std::vector< char > *self,int i,char x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN int
SWIG_AsVal_short SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}

SWIGINTERN short std_vector_Sl_short_Sg__pop(std::vector< short > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                short x = self->back();
                self->pop_back();
                return x;
            }

SWIGINTERNINLINE Tcl_Obj *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}

SWIGINTERN short std_vector_Sl_short_Sg__get(std::vector< short > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_short_Sg__set(std::vector< short > *self,int i,short x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN long std_vector_Sl_long_Sg__pop(std::vector< long > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                long x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN long std_vector_Sl_long_Sg__get(std::vector< long > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_Sg__set(std::vector< long > *self,int i,long x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_char SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}

SWIGINTERN unsigned char std_vector_Sl_unsigned_SS_char_Sg__pop(std::vector< unsigned char > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                unsigned char x = self->back();
                self->pop_back();
                return x;
            }

SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}

SWIGINTERN unsigned char std_vector_Sl_unsigned_SS_char_Sg__get(std::vector< unsigned char > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__set(std::vector< unsigned char > *self,int i,unsigned char x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN unsigned int std_vector_Sl_unsigned_SS_int_Sg__pop(std::vector< unsigned int > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                unsigned int x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN unsigned int std_vector_Sl_unsigned_SS_int_Sg__get(std::vector< unsigned int > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__set(std::vector< unsigned int > *self,int i,unsigned int x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_short SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}

SWIGINTERN unsigned short std_vector_Sl_unsigned_SS_short_Sg__pop(std::vector< unsigned short > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                unsigned short x = self->back();
                self->pop_back();
                return x;
            }

SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}

SWIGINTERN unsigned short std_vector_Sl_unsigned_SS_short_Sg__get(std::vector< unsigned short > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_short_Sg__set(std::vector< unsigned short > *self,int i,unsigned short x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN unsigned long std_vector_Sl_unsigned_SS_long_Sg__pop(std::vector< unsigned long > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                unsigned long x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN unsigned long std_vector_Sl_unsigned_SS_long_Sg__get(std::vector< unsigned long > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg__set(std::vector< unsigned long > *self,int i,unsigned long x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN int
SWIG_AsVal_double SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, double *val)
{
  double v;
  if (Tcl_GetDoubleFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}

SWIGINTERN double std_vector_Sl_double_Sg__pop(std::vector< double > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                double x = self->back();
                self->pop_back();
                return x;
            }

  #define SWIG_From_double   Tcl_NewDoubleObj 

SWIGINTERN double std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,double x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN int
SWIG_AsPtr_std_string SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

SWIGINTERN std::string std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::string x = self->back();
                self->pop_back();
                return x;
            }

SWIGINTERNINLINE Tcl_Obj *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN std::string std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::string x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

typedef float Real;
size_t typedef_test(std::vector<int>::size_type s) { return s; }


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


#include <float.h>


SWIGINTERN int
SWIG_AsVal_float SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN float std_vector_Sl_Real_Sg__pop(std::vector< Real > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                float x = self->back();
                self->pop_back();
                return x;
            }

SWIGINTERNINLINE Tcl_Obj *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}

SWIGINTERN float std_vector_Sl_Real_Sg__get(std::vector< Real > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Real_Sg__set(std::vector< Real > *self,int i,float x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }


double average(std::vector<int> v) {
    return std::accumulate(v.begin(),v.end(),0.0)/v.size();
}

std::vector<Real> half(const std::vector<Real>& v) {
    std::vector<Real> w(v);
    for (std::vector<Real>::size_type i=0; i<w.size(); i++)
        w[i] /= 2.0;
    return w;
}

void halve_in_place(std::vector<double>& v) {
    std::transform(v.begin(),v.end(),v.begin(),
                   std::bind2nd(std::divides<double>(),2.0));
}

struct Struct {
  double num;
  Struct() : num(0.0) {}
  Struct(double d) : num(d) {}
};

struct Structure {
  double num;
  Structure() : num(0.0) {}
  Structure(double d) : num(d) {}
};

const std::vector<Real> & vecreal(const std::vector<Real> & vec) { return vec; }

const std::vector<int> & vecintptr(const std::vector<int> & vec) { return vec; }
const std::vector<int *> & vecintptr(const std::vector<int *> & vec) { return vec; }
const std::vector<const int *> & vecintconstptr(const std::vector<const int *> & vec) { return vec; }

const std::vector<Struct> & vecstruct(const std::vector<Struct> & vec) { return vec; }
const std::vector<Struct *> & vecstructptr(const std::vector<Struct *> & vec) { return vec; }
const std::vector<const Struct *> & vecstructconstptr(const std::vector<const Struct *> & vec) { return vec; }

SWIGINTERN int *std_vector_Sl_int_Sm__Sg__pop(std::vector< int * > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                int * x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN int *&std_vector_Sl_int_Sm__Sg__get(std::vector< int * > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sm__Sg__set(std::vector< int * > *self,int i,int *const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN int const *std_vector_Sl_int_SS_const_Sm__Sg__pop(std::vector< int const * > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                int const * x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN int const *&std_vector_Sl_int_SS_const_Sm__Sg__get(std::vector< int const * > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_SS_const_Sm__Sg__set(std::vector< int const * > *self,int i,int const *const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN Struct std_vector_Sl_Struct_Sg__pop(std::vector< Struct > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                Struct x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN Struct &std_vector_Sl_Struct_Sg__get(std::vector< Struct > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Struct_Sg__set(std::vector< Struct > *self,int i,Struct const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN Struct *std_vector_Sl_Struct_Sm__Sg__pop(std::vector< Struct * > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                Struct * x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN Struct *&std_vector_Sl_Struct_Sm__Sg__get(std::vector< Struct * > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Struct_Sm__Sg__set(std::vector< Struct * > *self,int i,Struct *const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN Struct const *std_vector_Sl_Struct_SS_const_Sm__Sg__pop(std::vector< Struct const * > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                Struct const * x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN Struct const *&std_vector_Sl_Struct_SS_const_Sm__Sg__get(std::vector< Struct const * > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Struct_SS_const_Sm__Sg__set(std::vector< Struct const * > *self,int i,Struct const *const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

  struct MyClass {};
  typedef MyClass *MyClassPtr;
  typedef std::vector<MyClassPtr> MyClassVector;

SWIGINTERN MyClass *std_vector_Sl_MyClass_Sm__Sg__pop(std::vector< MyClass * > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                MyClass * x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN MyClass *&std_vector_Sl_MyClass_Sm__Sg__get(std::vector< MyClass * > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_MyClass_Sm__Sg__set(std::vector< MyClass * > *self,int i,MyClass *const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

  class RetsMetadata
  {
  public:
    MyClassVector GetAllResources(size_t n) const
    {
      return MyClassVector(n, 0);
    }
  };


SWIGINTERNINLINE int
SWIG_AsVal_size_t SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int
_wrap_new_IntVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_IntVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_IntVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  int *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_IntVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntVector" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(int const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *v1 ;
  std::vector< int > w1 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_IntVector std::vector< int > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_int_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< int > so it should be a list of int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< int >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetIntFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_IntVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IntVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      int         temp;
      std::vector< int > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_int_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< int > so it should be a list of int's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (Tcl_GetIntFromObj(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_IntVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IntVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_IntVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector(unsigned int)\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(unsigned int,int const &)\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *v1 ;
  std::vector< int > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_int_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< int > so it should be a list of int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< int >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetIntFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< int > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *v1 ;
  std::vector< int > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_int_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< int > so it should be a list of int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< int >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetIntFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< int > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IntVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_push" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_push" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (int)std_vector_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IntVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_get" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (int)std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:IntVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_set" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_set" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_IntVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_IntVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVector" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_IntVector(void *obj) {
std::vector< int > *arg1 = (std::vector< int > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_int_Sg__methods[] = {
    {"size", _wrap_IntVector_size}, 
    {"empty", _wrap_IntVector_empty}, 
    {"clear", _wrap_IntVector_clear}, 
    {"push", _wrap_IntVector_push}, 
    {"pop", _wrap_IntVector_pop}, 
    {"get", _wrap_IntVector_get}, 
    {"set", _wrap_IntVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_int_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_int_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_int_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_int_Sg_ = { "IntVector", &SWIGTYPE_p_std__vectorT_int_t,_wrap_new_IntVector, swig_delete_IntVector, swig_std_vector_Sl_int_Sg__methods, swig_std_vector_Sl_int_Sg__attributes, swig_std_vector_Sl_int_Sg__bases,swig_std_vector_Sl_int_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_BoolVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< bool > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_BoolVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BoolVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< bool > *)new std::vector< bool >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bool_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_BoolVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< bool > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_BoolVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< bool > *)new std::vector< bool >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bool_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_BoolVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  bool *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::vector< bool > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_BoolVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BoolVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BoolVector" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  result = (std::vector< bool > *)new std::vector< bool >(arg1,(bool const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bool_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_BoolVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< bool > *arg1 = 0 ;
  std::vector< bool > *v1 ;
  std::vector< bool > w1 ;
  std::vector< bool > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_BoolVector std::vector< bool > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    bool         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_bool_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< bool > so it should be a list of bool's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< bool >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetBoolFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< bool > *)new std::vector< bool >((std::vector< bool > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bool_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_BoolVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_BoolVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BoolVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      bool         temp;
      std::vector< bool > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_bool_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< bool > so it should be a list of bool's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (Tcl_GetBoolFromObj(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BoolVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BoolVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_BoolVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bool >::vector(unsigned int)\n"
    "    std::vector< bool >::vector()\n"
    "    std::vector< bool >::vector(unsigned int,bool const &)\n"
    "    std::vector< bool >::vector(std::vector< bool > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BoolVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool > *v1 ;
  std::vector< bool > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:BoolVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    bool         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_bool_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< bool > so it should be a list of bool's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< bool >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetBoolFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< bool > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BoolVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool > *v1 ;
  std::vector< bool > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:BoolVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    bool         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_bool_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< bool > so it should be a list of bool's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< bool >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetBoolFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< bool > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BoolVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:BoolVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_bool_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolVector_clear" "', argument " "1"" of type '" "std::vector< bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bool > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BoolVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:BoolVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_bool_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolVector_push" "', argument " "1"" of type '" "std::vector< bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bool > * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoolVector_push" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BoolVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:BoolVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_bool_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolVector_pop" "', argument " "1"" of type '" "std::vector< bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bool > * >(argp1);
  try {
    result = (bool)std_vector_Sl_bool_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BoolVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:BoolVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_bool_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolVector_get" "', argument " "1"" of type '" "std::vector< bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bool > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoolVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (bool)std_vector_Sl_bool_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BoolVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:BoolVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_bool_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolVector_set" "', argument " "1"" of type '" "std::vector< bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bool > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoolVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BoolVector_set" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    std_vector_Sl_bool_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_BoolVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_BoolVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_bool_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BoolVector" "', argument " "1"" of type '" "std::vector< bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bool > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_BoolVector(void *obj) {
std::vector< bool > *arg1 = (std::vector< bool > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_bool_Sg__methods[] = {
    {"size", _wrap_BoolVector_size}, 
    {"empty", _wrap_BoolVector_empty}, 
    {"clear", _wrap_BoolVector_clear}, 
    {"push", _wrap_BoolVector_push}, 
    {"pop", _wrap_BoolVector_pop}, 
    {"get", _wrap_BoolVector_get}, 
    {"set", _wrap_BoolVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_bool_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_bool_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_bool_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_bool_Sg_ = { "BoolVector", &SWIGTYPE_p_std__vectorT_bool_t,_wrap_new_BoolVector, swig_delete_BoolVector, swig_std_vector_Sl_bool_Sg__methods, swig_std_vector_Sl_bool_Sg__attributes, swig_std_vector_Sl_bool_Sg__bases,swig_std_vector_Sl_bool_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_CharVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< char > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_CharVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CharVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< char > *)new std::vector< char >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_CharVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< char > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CharVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< char > *)new std::vector< char >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_CharVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  char *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  char temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  std::vector< char > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_CharVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CharVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CharVector" "', argument " "2"" of type '" "char""'");
  } 
  temp2 = static_cast< char >(val2);
  arg2 = &temp2;
  result = (std::vector< char > *)new std::vector< char >(arg1,(char const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_CharVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *v1 ;
  std::vector< char > w1 ;
  std::vector< char > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_CharVector std::vector< char > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    char         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_char_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< char > so it should be a list of char's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< char >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<char>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< char > *)new std::vector< char >((std::vector< char > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_CharVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_CharVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CharVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      char         temp;
      std::vector< char > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_char_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< char > so it should be a list of char's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (SwigInt_As<char>(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CharVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CharVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_CharVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char >::vector(unsigned int)\n"
    "    std::vector< char >::vector()\n"
    "    std::vector< char >::vector(unsigned int,char const &)\n"
    "    std::vector< char >::vector(std::vector< char > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CharVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char > *v1 ;
  std::vector< char > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CharVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    char         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_char_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< char > so it should be a list of char's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< char >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<char>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< char > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CharVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char > *v1 ;
  std::vector< char > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CharVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    char         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_char_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< char > so it should be a list of char's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< char >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<char>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< char > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CharVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CharVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_clear" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CharVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CharVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_push" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector_push" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CharVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CharVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_pop" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  try {
    result = (char)std_vector_Sl_char_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CharVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CharVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_get" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (char)std_vector_Sl_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CharVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:CharVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_set" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CharVector_set" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  try {
    std_vector_Sl_char_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CharVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CharVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_char_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CharVector" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CharVector(void *obj) {
std::vector< char > *arg1 = (std::vector< char > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_char_Sg__methods[] = {
    {"size", _wrap_CharVector_size}, 
    {"empty", _wrap_CharVector_empty}, 
    {"clear", _wrap_CharVector_clear}, 
    {"push", _wrap_CharVector_push}, 
    {"pop", _wrap_CharVector_pop}, 
    {"get", _wrap_CharVector_get}, 
    {"set", _wrap_CharVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_char_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_char_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_char_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_char_Sg_ = { "CharVector", &SWIGTYPE_p_std__vectorT_char_t,_wrap_new_CharVector, swig_delete_CharVector, swig_std_vector_Sl_char_Sg__methods, swig_std_vector_Sl_char_Sg__attributes, swig_std_vector_Sl_char_Sg__bases,swig_std_vector_Sl_char_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_ShortVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< short > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_ShortVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ShortVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< short > *)new std::vector< short >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_short_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ShortVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< short > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ShortVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< short > *)new std::vector< short >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_short_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ShortVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  short *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  short temp2 ;
  short val2 ;
  int ecode2 = 0 ;
  std::vector< short > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_ShortVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ShortVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ShortVector" "', argument " "2"" of type '" "short""'");
  } 
  temp2 = static_cast< short >(val2);
  arg2 = &temp2;
  result = (std::vector< short > *)new std::vector< short >(arg1,(short const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_short_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ShortVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< short > *arg1 = 0 ;
  std::vector< short > *v1 ;
  std::vector< short > w1 ;
  std::vector< short > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_ShortVector std::vector< short > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    short         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_short_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< short > so it should be a list of short's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< short >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<short>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< short > *)new std::vector< short >((std::vector< short > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_short_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ShortVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_ShortVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ShortVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      short         temp;
      std::vector< short > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_short_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< short > so it should be a list of short's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (SwigInt_As<short>(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ShortVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ShortVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_ShortVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< short >::vector(unsigned int)\n"
    "    std::vector< short >::vector()\n"
    "    std::vector< short >::vector(unsigned int,short const &)\n"
    "    std::vector< short >::vector(std::vector< short > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ShortVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short > *v1 ;
  std::vector< short > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ShortVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    short         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_short_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< short > so it should be a list of short's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< short >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<short>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< short > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ShortVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short > *v1 ;
  std::vector< short > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ShortVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    short         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_short_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< short > so it should be a list of short's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< short >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<short>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< short > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ShortVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ShortVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortVector_clear" "', argument " "1"" of type '" "std::vector< short > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< short > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ShortVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ShortVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortVector_push" "', argument " "1"" of type '" "std::vector< short > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< short > * >(argp1);
  ecode2 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShortVector_push" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ShortVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ShortVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortVector_pop" "', argument " "1"" of type '" "std::vector< short > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< short > * >(argp1);
  try {
    result = (short)std_vector_Sl_short_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ShortVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ShortVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortVector_get" "', argument " "1"" of type '" "std::vector< short > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< short > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShortVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (short)std_vector_Sl_short_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_short(static_cast< short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ShortVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  int arg2 ;
  short arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ShortVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortVector_set" "', argument " "1"" of type '" "std::vector< short > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< short > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShortVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_short SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShortVector_set" "', argument " "3"" of type '" "short""'");
  } 
  arg3 = static_cast< short >(val3);
  try {
    std_vector_Sl_short_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ShortVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ShortVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ShortVector" "', argument " "1"" of type '" "std::vector< short > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< short > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ShortVector(void *obj) {
std::vector< short > *arg1 = (std::vector< short > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_short_Sg__methods[] = {
    {"size", _wrap_ShortVector_size}, 
    {"empty", _wrap_ShortVector_empty}, 
    {"clear", _wrap_ShortVector_clear}, 
    {"push", _wrap_ShortVector_push}, 
    {"pop", _wrap_ShortVector_pop}, 
    {"get", _wrap_ShortVector_get}, 
    {"set", _wrap_ShortVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_short_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_short_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_short_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_short_Sg_ = { "ShortVector", &SWIGTYPE_p_std__vectorT_short_t,_wrap_new_ShortVector, swig_delete_ShortVector, swig_std_vector_Sl_short_Sg__methods, swig_std_vector_Sl_short_Sg__attributes, swig_std_vector_Sl_short_Sg__bases,swig_std_vector_Sl_short_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_LongVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< long > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_LongVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LongVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< long > *)new std::vector< long >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_LongVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< long > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_LongVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< long > *)new std::vector< long >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_LongVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  long *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  std::vector< long > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_LongVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LongVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LongVector" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  result = (std::vector< long > *)new std::vector< long >(arg1,(long const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_LongVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< long > *arg1 = 0 ;
  std::vector< long > *v1 ;
  std::vector< long > w1 ;
  std::vector< long > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_LongVector std::vector< long > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    long         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_long_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< long > so it should be a list of long's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< long >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<long>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< long > *)new std::vector< long >((std::vector< long > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_LongVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_LongVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LongVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      long         temp;
      std::vector< long > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_long_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< long > so it should be a list of long's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (SwigInt_As<long>(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_LongVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LongVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_LongVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::vector(unsigned int)\n"
    "    std::vector< long >::vector()\n"
    "    std::vector< long >::vector(unsigned int,long const &)\n"
    "    std::vector< long >::vector(std::vector< long > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_LongVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long > *v1 ;
  std::vector< long > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:LongVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    long         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_long_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< long > so it should be a list of long's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< long >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<long>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< long > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_LongVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long > *v1 ;
  std::vector< long > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:LongVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    long         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_long_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< long > so it should be a list of long's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< long >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<long>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< long > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_LongVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:LongVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_clear" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_LongVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:LongVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_push" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector_push" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_LongVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:LongVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_pop" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  try {
    result = (long)std_vector_Sl_long_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_LongVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:LongVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_get" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (long)std_vector_Sl_long_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_LongVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:LongVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_set" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LongVector_set" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  try {
    std_vector_Sl_long_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_LongVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_LongVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_long_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LongVector" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_LongVector(void *obj) {
std::vector< long > *arg1 = (std::vector< long > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_long_Sg__methods[] = {
    {"size", _wrap_LongVector_size}, 
    {"empty", _wrap_LongVector_empty}, 
    {"clear", _wrap_LongVector_clear}, 
    {"push", _wrap_LongVector_push}, 
    {"pop", _wrap_LongVector_pop}, 
    {"get", _wrap_LongVector_get}, 
    {"set", _wrap_LongVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_long_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_long_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_long_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_long_Sg_ = { "LongVector", &SWIGTYPE_p_std__vectorT_long_t,_wrap_new_LongVector, swig_delete_LongVector, swig_std_vector_Sl_long_Sg__methods, swig_std_vector_Sl_long_Sg__attributes, swig_std_vector_Sl_long_Sg__bases,swig_std_vector_Sl_long_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_UCharVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_UCharVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UCharVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_UCharVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned char > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_UCharVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_UCharVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned char *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned char temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_UCharVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UCharVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UCharVector" "', argument " "2"" of type '" "unsigned char""'");
  } 
  temp2 = static_cast< unsigned char >(val2);
  arg2 = &temp2;
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >(arg1,(unsigned char const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_UCharVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned char > *arg1 = 0 ;
  std::vector< unsigned char > *v1 ;
  std::vector< unsigned char > w1 ;
  std::vector< unsigned char > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_UCharVector std::vector< unsigned char > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    unsigned char         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< unsigned char > so it should be a list of unsigned char's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< unsigned char >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<unsigned char>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >((std::vector< unsigned char > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_char_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_UCharVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_UCharVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UCharVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      unsigned char         temp;
      std::vector< unsigned char > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< unsigned char > so it should be a list of unsigned char's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (SwigInt_As<unsigned char>(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UCharVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_UCharVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_UCharVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned char >::vector(unsigned int)\n"
    "    std::vector< unsigned char >::vector()\n"
    "    std::vector< unsigned char >::vector(unsigned int,unsigned char const &)\n"
    "    std::vector< unsigned char >::vector(std::vector< unsigned char > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UCharVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char > *v1 ;
  std::vector< unsigned char > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:UCharVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    unsigned char         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< unsigned char > so it should be a list of unsigned char's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< unsigned char >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<unsigned char>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< unsigned char > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UCharVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char > *v1 ;
  std::vector< unsigned char > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:UCharVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    unsigned char         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< unsigned char > so it should be a list of unsigned char's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< unsigned char >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<unsigned char>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< unsigned char > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UCharVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:UCharVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UCharVector_clear" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UCharVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:UCharVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UCharVector_push" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UCharVector_push" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UCharVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:UCharVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UCharVector_pop" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  try {
    result = (unsigned char)std_vector_Sl_unsigned_SS_char_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UCharVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:UCharVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UCharVector_get" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UCharVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (unsigned char)std_vector_Sl_unsigned_SS_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UCharVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:UCharVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UCharVector_set" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UCharVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UCharVector_set" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  try {
    std_vector_Sl_unsigned_SS_char_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_UCharVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_UCharVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_char_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UCharVector" "', argument " "1"" of type '" "std::vector< unsigned char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned char > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_UCharVector(void *obj) {
std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_unsigned_SS_char_Sg__methods[] = {
    {"size", _wrap_UCharVector_size}, 
    {"empty", _wrap_UCharVector_empty}, 
    {"clear", _wrap_UCharVector_clear}, 
    {"push", _wrap_UCharVector_push}, 
    {"pop", _wrap_UCharVector_pop}, 
    {"get", _wrap_UCharVector_get}, 
    {"set", _wrap_UCharVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_unsigned_SS_char_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_unsigned_SS_char_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_unsigned_SS_char_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_unsigned_SS_char_Sg_ = { "UCharVector", &SWIGTYPE_p_std__vectorT_unsigned_char_t,_wrap_new_UCharVector, swig_delete_UCharVector, swig_std_vector_Sl_unsigned_SS_char_Sg__methods, swig_std_vector_Sl_unsigned_SS_char_Sg__attributes, swig_std_vector_Sl_unsigned_SS_char_Sg__bases,swig_std_vector_Sl_unsigned_SS_char_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_UIntVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_UIntVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UIntVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_UIntVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_UIntVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_UIntVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_UIntVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UIntVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UIntVector" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1,(unsigned int const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_UIntVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned int > *arg1 = 0 ;
  std::vector< unsigned int > *v1 ;
  std::vector< unsigned int > w1 ;
  std::vector< unsigned int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_UIntVector std::vector< unsigned int > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    unsigned int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< unsigned int > so it should be a list of unsigned int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< unsigned int >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<unsigned int>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >((std::vector< unsigned int > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_UIntVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_UIntVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UIntVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      unsigned int         temp;
      std::vector< unsigned int > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< unsigned int > so it should be a list of unsigned int's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (SwigInt_As<unsigned int>(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UIntVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_UIntVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_UIntVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned int >::vector(unsigned int)\n"
    "    std::vector< unsigned int >::vector()\n"
    "    std::vector< unsigned int >::vector(unsigned int,unsigned int const &)\n"
    "    std::vector< unsigned int >::vector(std::vector< unsigned int > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UIntVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int > *v1 ;
  std::vector< unsigned int > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:UIntVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    unsigned int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< unsigned int > so it should be a list of unsigned int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< unsigned int >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<unsigned int>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< unsigned int > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UIntVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int > *v1 ;
  std::vector< unsigned int > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:UIntVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    unsigned int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< unsigned int > so it should be a list of unsigned int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< unsigned int >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<unsigned int>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< unsigned int > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UIntVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:UIntVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_clear" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UIntVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:UIntVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_push" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector_push" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UIntVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:UIntVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_pop" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  try {
    result = (unsigned int)std_vector_Sl_unsigned_SS_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UIntVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:UIntVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_get" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (unsigned int)std_vector_Sl_unsigned_SS_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UIntVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:UIntVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_set" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UIntVector_set" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  try {
    std_vector_Sl_unsigned_SS_int_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_UIntVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_UIntVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UIntVector" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_UIntVector(void *obj) {
std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_unsigned_SS_int_Sg__methods[] = {
    {"size", _wrap_UIntVector_size}, 
    {"empty", _wrap_UIntVector_empty}, 
    {"clear", _wrap_UIntVector_clear}, 
    {"push", _wrap_UIntVector_push}, 
    {"pop", _wrap_UIntVector_pop}, 
    {"get", _wrap_UIntVector_get}, 
    {"set", _wrap_UIntVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_unsigned_SS_int_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_unsigned_SS_int_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_unsigned_SS_int_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_unsigned_SS_int_Sg_ = { "UIntVector", &SWIGTYPE_p_std__vectorT_unsigned_int_t,_wrap_new_UIntVector, swig_delete_UIntVector, swig_std_vector_Sl_unsigned_SS_int_Sg__methods, swig_std_vector_Sl_unsigned_SS_int_Sg__attributes, swig_std_vector_Sl_unsigned_SS_int_Sg__bases,swig_std_vector_Sl_unsigned_SS_int_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_UShortVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< unsigned short > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_UShortVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UShortVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_short_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_UShortVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned short > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_UShortVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_short_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_UShortVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned short *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned short temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned short > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_UShortVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UShortVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UShortVector" "', argument " "2"" of type '" "unsigned short""'");
  } 
  temp2 = static_cast< unsigned short >(val2);
  arg2 = &temp2;
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >(arg1,(unsigned short const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_short_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_UShortVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned short > *arg1 = 0 ;
  std::vector< unsigned short > *v1 ;
  std::vector< unsigned short > w1 ;
  std::vector< unsigned short > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_UShortVector std::vector< unsigned short > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    unsigned short         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< unsigned short > so it should be a list of unsigned short's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< unsigned short >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<unsigned short>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >((std::vector< unsigned short > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_short_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_UShortVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_UShortVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UShortVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      unsigned short         temp;
      std::vector< unsigned short > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< unsigned short > so it should be a list of unsigned short's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (SwigInt_As<unsigned short>(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_UShortVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_UShortVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_UShortVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned short >::vector(unsigned int)\n"
    "    std::vector< unsigned short >::vector()\n"
    "    std::vector< unsigned short >::vector(unsigned int,unsigned short const &)\n"
    "    std::vector< unsigned short >::vector(std::vector< unsigned short > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UShortVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  std::vector< unsigned short > *v1 ;
  std::vector< unsigned short > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:UShortVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    unsigned short         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< unsigned short > so it should be a list of unsigned short's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< unsigned short >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<unsigned short>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< unsigned short > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UShortVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  std::vector< unsigned short > *v1 ;
  std::vector< unsigned short > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:UShortVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    unsigned short         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< unsigned short > so it should be a list of unsigned short's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< unsigned short >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<unsigned short>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< unsigned short > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UShortVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:UShortVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortVector_clear" "', argument " "1"" of type '" "std::vector< unsigned short > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned short > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UShortVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:UShortVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortVector_push" "', argument " "1"" of type '" "std::vector< unsigned short > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned short > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UShortVector_push" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UShortVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:UShortVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortVector_pop" "', argument " "1"" of type '" "std::vector< unsigned short > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned short > * >(argp1);
  try {
    result = (unsigned short)std_vector_Sl_unsigned_SS_short_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UShortVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned short result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:UShortVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortVector_get" "', argument " "1"" of type '" "std::vector< unsigned short > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned short > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UShortVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (unsigned short)std_vector_Sl_unsigned_SS_short_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_UShortVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  int arg2 ;
  unsigned short arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:UShortVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortVector_set" "', argument " "1"" of type '" "std::vector< unsigned short > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned short > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UShortVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UShortVector_set" "', argument " "3"" of type '" "unsigned short""'");
  } 
  arg3 = static_cast< unsigned short >(val3);
  try {
    std_vector_Sl_unsigned_SS_short_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_UShortVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_UShortVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_short_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UShortVector" "', argument " "1"" of type '" "std::vector< unsigned short > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned short > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_UShortVector(void *obj) {
std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_unsigned_SS_short_Sg__methods[] = {
    {"size", _wrap_UShortVector_size}, 
    {"empty", _wrap_UShortVector_empty}, 
    {"clear", _wrap_UShortVector_clear}, 
    {"push", _wrap_UShortVector_push}, 
    {"pop", _wrap_UShortVector_pop}, 
    {"get", _wrap_UShortVector_get}, 
    {"set", _wrap_UShortVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_unsigned_SS_short_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_unsigned_SS_short_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_unsigned_SS_short_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_unsigned_SS_short_Sg_ = { "UShortVector", &SWIGTYPE_p_std__vectorT_unsigned_short_t,_wrap_new_UShortVector, swig_delete_UShortVector, swig_std_vector_Sl_unsigned_SS_short_Sg__methods, swig_std_vector_Sl_unsigned_SS_short_Sg__attributes, swig_std_vector_Sl_unsigned_SS_short_Sg__bases,swig_std_vector_Sl_unsigned_SS_short_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_ULongVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< unsigned long > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_ULongVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ULongVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_long_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ULongVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned long > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ULongVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_long_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ULongVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned long *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned long temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned long > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_ULongVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ULongVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ULongVector" "', argument " "2"" of type '" "unsigned long""'");
  } 
  temp2 = static_cast< unsigned long >(val2);
  arg2 = &temp2;
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >(arg1,(unsigned long const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_long_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ULongVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned long > *arg1 = 0 ;
  std::vector< unsigned long > *v1 ;
  std::vector< unsigned long > w1 ;
  std::vector< unsigned long > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_ULongVector std::vector< unsigned long > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    unsigned long         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< unsigned long > so it should be a list of unsigned long's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< unsigned long >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<unsigned long>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >((std::vector< unsigned long > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_long_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ULongVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_ULongVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ULongVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      unsigned long         temp;
      std::vector< unsigned long > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< unsigned long > so it should be a list of unsigned long's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (SwigInt_As<unsigned long>(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ULongVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ULongVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_ULongVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned long >::vector(unsigned int)\n"
    "    std::vector< unsigned long >::vector()\n"
    "    std::vector< unsigned long >::vector(unsigned int,unsigned long const &)\n"
    "    std::vector< unsigned long >::vector(std::vector< unsigned long > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ULongVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long > *v1 ;
  std::vector< unsigned long > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ULongVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    unsigned long         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< unsigned long > so it should be a list of unsigned long's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< unsigned long >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<unsigned long>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< unsigned long > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ULongVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long > *v1 ;
  std::vector< unsigned long > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ULongVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    unsigned long         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< unsigned long > so it should be a list of unsigned long's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< unsigned long >();
      for (i = 0; i < nitems; i++) {
        if (SwigInt_As<unsigned long>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< unsigned long > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ULongVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ULongVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongVector_clear" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ULongVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ULongVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongVector_push" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ULongVector_push" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ULongVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ULongVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongVector_pop" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  try {
    result = (unsigned long)std_vector_Sl_unsigned_SS_long_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ULongVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ULongVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongVector_get" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ULongVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (unsigned long)std_vector_Sl_unsigned_SS_long_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ULongVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  int arg2 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ULongVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongVector_set" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ULongVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ULongVector_set" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  try {
    std_vector_Sl_unsigned_SS_long_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ULongVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ULongVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_unsigned_long_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ULongVector" "', argument " "1"" of type '" "std::vector< unsigned long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned long > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ULongVector(void *obj) {
std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_unsigned_SS_long_Sg__methods[] = {
    {"size", _wrap_ULongVector_size}, 
    {"empty", _wrap_ULongVector_empty}, 
    {"clear", _wrap_ULongVector_clear}, 
    {"push", _wrap_ULongVector_push}, 
    {"pop", _wrap_ULongVector_pop}, 
    {"get", _wrap_ULongVector_get}, 
    {"set", _wrap_ULongVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_unsigned_SS_long_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_unsigned_SS_long_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_unsigned_SS_long_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_unsigned_SS_long_Sg_ = { "ULongVector", &SWIGTYPE_p_std__vectorT_unsigned_long_t,_wrap_new_ULongVector, swig_delete_ULongVector, swig_std_vector_Sl_unsigned_SS_long_Sg__methods, swig_std_vector_Sl_unsigned_SS_long_Sg__attributes, swig_std_vector_Sl_unsigned_SS_long_Sg__bases,swig_std_vector_Sl_unsigned_SS_long_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_DoubleVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_DoubleVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_DoubleVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_DoubleVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< double > *)new std::vector< double >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_DoubleVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  double *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_DoubleVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleVector" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(double const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_DoubleVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *v1 ;
  std::vector< double > w1 ;
  std::vector< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_DoubleVector std::vector< double > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    double         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_double_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< double > so it should be a list of double's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< double >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetDoubleFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_DoubleVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      double         temp;
      std::vector< double > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_double_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< double > so it should be a list of double's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (Tcl_GetDoubleFromObj(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DoubleVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_DoubleVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector(unsigned int)\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(unsigned int,double const &)\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DoubleVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *v1 ;
  std::vector< double > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:DoubleVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    double         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_double_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< double > so it should be a list of double's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< double >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetDoubleFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< double > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DoubleVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *v1 ;
  std::vector< double > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:DoubleVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    double         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_double_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< double > so it should be a list of double's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< double >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetDoubleFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< double > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DoubleVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:DoubleVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DoubleVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:DoubleVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_push" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_push" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DoubleVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:DoubleVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (double)std_vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DoubleVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:DoubleVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_get" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (double)std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_DoubleVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:DoubleVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_set" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_set" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_DoubleVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_DoubleVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleVector" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_DoubleVector(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_double_Sg__methods[] = {
    {"size", _wrap_DoubleVector_size}, 
    {"empty", _wrap_DoubleVector_empty}, 
    {"clear", _wrap_DoubleVector_clear}, 
    {"push", _wrap_DoubleVector_push}, 
    {"pop", _wrap_DoubleVector_pop}, 
    {"get", _wrap_DoubleVector_get}, 
    {"set", _wrap_DoubleVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_double_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_double_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_double_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_double_Sg_ = { "DoubleVector", &SWIGTYPE_p_std__vectorT_double_t,_wrap_new_DoubleVector, swig_delete_DoubleVector, swig_std_vector_Sl_double_Sg__methods, swig_std_vector_Sl_double_Sg__attributes, swig_std_vector_Sl_double_Sg__bases,swig_std_vector_Sl_double_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_StringVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_StringVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StringVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_StringVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StringVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  std::string *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_StringVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StringVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::string const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StringVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *v1 ;
  std::vector< std::string > w1 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_StringVector std::vector< std::string > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    std::string         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_std__string_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< std::string > so it should be a list of std::string's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< std::string >();
      for (i = 0; i < nitems; i++) {
        if (SwigString_AsString(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StringVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_StringVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      std::string         temp;
      std::vector< std::string > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_std__string_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< std::string > so it should be a list of std::string's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (SwigString_AsString(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StringVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_StringVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector(unsigned int)\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(unsigned int,std::string const &)\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *v1 ;
  std::vector< std::string > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StringVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    std::string         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_std__string_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< std::string > so it should be a list of std::string's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< std::string >();
      for (i = 0; i < nitems; i++) {
        if (SwigString_AsString(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< std::string > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *v1 ;
  std::vector< std::string > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StringVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    std::string         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_std__string_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< std::string > so it should be a list of std::string's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< std::string >();
      for (i = 0; i < nitems; i++) {
        if (SwigString_AsString(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StringVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StringVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_push" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringVector_push" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StringVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StringVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_get" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:StringVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_set" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringVector_set" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_StringVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_StringVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringVector" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_StringVector(void *obj) {
std::vector< std::string > *arg1 = (std::vector< std::string > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_std_string_Sg__methods[] = {
    {"size", _wrap_StringVector_size}, 
    {"empty", _wrap_StringVector_empty}, 
    {"clear", _wrap_StringVector_clear}, 
    {"push", _wrap_StringVector_push}, 
    {"pop", _wrap_StringVector_pop}, 
    {"get", _wrap_StringVector_get}, 
    {"set", _wrap_StringVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_std_string_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_std_string_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_std_string_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_std_string_Sg_ = { "StringVector", &SWIGTYPE_p_std__vectorT_std__string_t,_wrap_new_StringVector, swig_delete_StringVector, swig_std_vector_Sl_std_string_Sg__methods, swig_std_vector_Sl_std_string_Sg__attributes, swig_std_vector_Sl_std_string_Sg__bases,swig_std_vector_Sl_std_string_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_typedef_test(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigValueWrapper< std::vector< int >::size_type > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:typedef_test s ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__vectorT_int_t__size_type,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "typedef_test" "', argument " "1"" of type '" "std::vector< int >::size_type""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "typedef_test" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
    } else {
      arg1 = *(reinterpret_cast< std::vector< int >::size_type * >(argp1));
    }
  }
  result = typedef_test(arg1);
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_RealVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< Real > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_RealVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RealVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< Real > *)new std::vector< Real >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_RealVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Real > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_RealVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< Real > *)new std::vector< Real >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_RealVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  float *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  std::vector< Real > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_RealVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RealVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RealVector" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  result = (std::vector< Real > *)new std::vector< Real >(arg1,(float const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_RealVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *v1 ;
  std::vector< float > w1 ;
  std::vector< Real > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_RealVector std::vector< float > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    float         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_float_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< float > so it should be a list of float's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< float >();
      for (i = 0; i < nitems; i++) {
        if (SwigDouble_As<float>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< Real > *)new std::vector< Real >((std::vector< float > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_RealVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_RealVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RealVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      float         temp;
      std::vector< float > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_float_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< float > so it should be a list of float's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (SwigDouble_As<float>(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RealVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_RealVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_RealVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Real >::vector(unsigned int)\n"
    "    std::vector< Real >::vector()\n"
    "    std::vector< Real >::vector(unsigned int,float const &)\n"
    "    std::vector< Real >::vector(std::vector< float > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RealVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  std::vector< float > *v1 ;
  std::vector< float > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:RealVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    float         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_float_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< float > so it should be a list of float's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< float >();
      for (i = 0; i < nitems; i++) {
        if (SwigDouble_As<float>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< Real > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RealVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  std::vector< float > *v1 ;
  std::vector< float > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:RealVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    float         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_float_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< float > so it should be a list of float's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< float >();
      for (i = 0; i < nitems; i++) {
        if (SwigDouble_As<float>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< Real > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RealVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:RealVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RealVector_clear" "', argument " "1"" of type '" "std::vector< Real > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Real > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RealVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:RealVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RealVector_push" "', argument " "1"" of type '" "std::vector< Real > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Real > * >(argp1);
  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RealVector_push" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RealVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:RealVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RealVector_pop" "', argument " "1"" of type '" "std::vector< Real > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Real > * >(argp1);
  try {
    result = (float)std_vector_Sl_Real_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_float(static_cast< float >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RealVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:RealVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RealVector_get" "', argument " "1"" of type '" "std::vector< Real > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Real > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RealVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (float)std_vector_Sl_Real_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_float(static_cast< float >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_RealVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:RealVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RealVector_set" "', argument " "1"" of type '" "std::vector< Real > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Real > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RealVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RealVector_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  try {
    std_vector_Sl_Real_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_RealVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_RealVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RealVector" "', argument " "1"" of type '" "std::vector< Real > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Real > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_RealVector(void *obj) {
std::vector< Real > *arg1 = (std::vector< Real > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_Real_Sg__methods[] = {
    {"size", _wrap_RealVector_size}, 
    {"empty", _wrap_RealVector_empty}, 
    {"clear", _wrap_RealVector_clear}, 
    {"push", _wrap_RealVector_push}, 
    {"pop", _wrap_RealVector_pop}, 
    {"get", _wrap_RealVector_get}, 
    {"set", _wrap_RealVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_Real_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_Real_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_Real_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_Real_Sg_ = { "RealVector", &SWIGTYPE_p_std__vectorT_float_t,_wrap_new_RealVector, swig_delete_RealVector, swig_std_vector_Sl_Real_Sg__methods, swig_std_vector_Sl_Real_Sg__attributes, swig_std_vector_Sl_Real_Sg__bases,swig_std_vector_Sl_Real_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_average(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > arg1 ;
  std::vector< int > *v1 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:average v ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_int_t, 0) == 0) {
      arg1 = *v1;
    } else {
      // It isn't a vector< int > so it should be a list of int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;					      
      arg1 = std::vector< int >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetIntFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        (&arg1)->push_back(temp);
      } 
    }
  }
  result = (double)average(arg1);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_half(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Real > *arg1 = 0 ;
  std::vector< float > *v1 ;
  std::vector< float > w1 ;
  std::vector< Real > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:half v ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    float         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_float_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< float > so it should be a list of float's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< float >();
      for (i = 0; i < nitems; i++) {
        if (SwigDouble_As<float>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = half((std::vector< float > const &)*arg1);
  {
    for (unsigned int i=0; i<(&result)->size(); i++) {
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), \
        Tcl_NewDoubleObj(((std::vector< Real > &)result)[i]));
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_halve_in_place(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:halve_in_place v ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__vectorT_double_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "halve_in_place" "', argument " "1"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "halve_in_place" "', argument " "1"" of type '" "std::vector< double > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  halve_in_place(*arg1);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Struct_num_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Struct *arg1 = (Struct *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Struct_num_set self num ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Struct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Struct_num_set" "', argument " "1"" of type '" "Struct *""'"); 
  }
  arg1 = reinterpret_cast< Struct * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Struct_num_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->num = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Struct_num_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Struct *arg1 = (Struct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Struct_num_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Struct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Struct_num_get" "', argument " "1"" of type '" "Struct *""'"); 
  }
  arg1 = reinterpret_cast< Struct * >(argp1);
  result = (double) ((arg1)->num);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Struct__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Struct *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Struct ") == TCL_ERROR) SWIG_fail;
  result = (Struct *)new Struct();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Struct,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Struct__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  Struct *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Struct d ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Struct" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (Struct *)new Struct(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Struct,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Struct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_Struct__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Struct__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_Struct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Struct::Struct()\n"
    "    Struct::Struct(double)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Struct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Struct *arg1 = (Struct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Struct self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Struct, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Struct" "', argument " "1"" of type '" "Struct *""'"); 
  }
  arg1 = reinterpret_cast< Struct * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Struct(void *obj) {
Struct *arg1 = (Struct *) obj;
delete arg1;
}
static swig_method swig_Struct_methods[] = {
    {0,0}
};
static swig_attribute swig_Struct_attributes[] = {
    { "-num",_wrap_Struct_num_get, _wrap_Struct_num_set},
    {0,0,0}
};
static swig_class *swig_Struct_bases[] = {0};
static const char * swig_Struct_base_names[] = {0};
static swig_class _wrap_class_Struct = { "Struct", &SWIGTYPE_p_Struct,_wrap_new_Struct, swig_delete_Struct, swig_Struct_methods, swig_Struct_attributes, swig_Struct_bases,swig_Struct_base_names, &swig_module };
SWIGINTERN int
_wrap_Structure_num_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Structure *arg1 = (Structure *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Structure_num_set self num ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Structure_num_set" "', argument " "1"" of type '" "Structure *""'"); 
  }
  arg1 = reinterpret_cast< Structure * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Structure_num_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->num = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Structure_num_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Structure *arg1 = (Structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Structure_num_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Structure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Structure_num_get" "', argument " "1"" of type '" "Structure *""'"); 
  }
  arg1 = reinterpret_cast< Structure * >(argp1);
  result = (double) ((arg1)->num);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Structure__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Structure *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Structure ") == TCL_ERROR) SWIG_fail;
  result = (Structure *)new Structure();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Structure,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Structure__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  Structure *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Structure d ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Structure" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (Structure *)new Structure(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Structure,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Structure(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_Structure__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Structure__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_Structure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Structure::Structure()\n"
    "    Structure::Structure(double)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Structure(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Structure *arg1 = (Structure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Structure self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Structure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Structure" "', argument " "1"" of type '" "Structure *""'"); 
  }
  arg1 = reinterpret_cast< Structure * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Structure(void *obj) {
Structure *arg1 = (Structure *) obj;
delete arg1;
}
static swig_method swig_Structure_methods[] = {
    {0,0}
};
static swig_attribute swig_Structure_attributes[] = {
    { "-num",_wrap_Structure_num_get, _wrap_Structure_num_set},
    {0,0,0}
};
static swig_class *swig_Structure_bases[] = {0};
static const char * swig_Structure_base_names[] = {0};
static swig_class _wrap_class_Structure = { "Structure", &SWIGTYPE_p_Structure,_wrap_new_Structure, swig_delete_Structure, swig_Structure_methods, swig_Structure_attributes, swig_Structure_bases,swig_Structure_base_names, &swig_module };
SWIGINTERN int
_wrap_vecreal(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Real > *arg1 = 0 ;
  std::vector< float > *v1 ;
  std::vector< float > w1 ;
  std::vector< Real > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:vecreal vec ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    float         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_float_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< float > so it should be a list of float's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< float >();
      for (i = 0; i < nitems; i++) {
        if (SwigDouble_As<float>(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< Real > *) &vecreal((std::vector< float > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_vecintptr__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *v1 ;
  std::vector< int > w1 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:vecintptr vec ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_int_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< int > so it should be a list of int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< int >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetIntFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< int > *) &vecintptr((std::vector< int > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_vecintptr__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int * > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< int * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:vecintptr vec ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__vectorT_int_p_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecintptr" "', argument " "1"" of type '" "std::vector< int * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecintptr" "', argument " "1"" of type '" "std::vector< int * > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int * > * >(argp1);
  result = (std::vector< int * > *) &vecintptr((std::vector< int * > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_vecintptr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_int_p_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_vecintptr__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      int         temp;
      std::vector< int > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_int_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< int > so it should be a list of int's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (Tcl_GetIntFromObj(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_vecintptr__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'vecintptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    vecintptr(std::vector< int > const &)\n"
    "    vecintptr(std::vector< int * > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_vecintconstptr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int const * > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< int const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:vecintconstptr vec ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__vectorT_int_const_p_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecintconstptr" "', argument " "1"" of type '" "std::vector< int const * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecintconstptr" "', argument " "1"" of type '" "std::vector< int const * > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int const * > * >(argp1);
  result = (std::vector< int const * > *) &vecintconstptr((std::vector< int const * > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_vecstruct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< Struct > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:vecstruct vec ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__vectorT_Struct_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecstruct" "', argument " "1"" of type '" "std::vector< Struct > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecstruct" "', argument " "1"" of type '" "std::vector< Struct > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct > * >(argp1);
  result = (std::vector< Struct > *) &vecstruct((std::vector< Struct > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_vecstructptr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct * > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< Struct * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:vecstructptr vec ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__vectorT_Struct_p_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecstructptr" "', argument " "1"" of type '" "std::vector< Struct * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecstructptr" "', argument " "1"" of type '" "std::vector< Struct * > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct * > * >(argp1);
  result = (std::vector< Struct * > *) &vecstructptr((std::vector< Struct * > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_vecstructconstptr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct const * > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::vector< Struct const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:vecstructconstptr vec ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__vectorT_Struct_const_p_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vecstructconstptr" "', argument " "1"" of type '" "std::vector< Struct const * > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vecstructconstptr" "', argument " "1"" of type '" "std::vector< Struct const * > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct const * > * >(argp1);
  result = (std::vector< Struct const * > *) &vecstructconstptr((std::vector< Struct const * > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntPtrVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< int * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_IntPtrVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntPtrVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< int * > *)new std::vector< int * >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntPtrVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_IntPtrVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< int * > *)new std::vector< int * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntPtrVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  int **arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int *temp2 ;
  std::vector< int * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_IntPtrVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntPtrVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_IntPtrVector" "', argument " "2"" of type '" "int *""'"); 
  }
  temp2 = reinterpret_cast< int * >(argp2);
  arg2 = reinterpret_cast< int ** >(&temp2);
  result = (std::vector< int * > *)new std::vector< int * >(arg1,(int *const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntPtrVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int * > *arg1 = 0 ;
  std::vector< int * > *v1 ;
  std::vector< int * > w1 ;
  std::vector< int * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_IntPtrVector std::vector< int * > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_int_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< int * > so it should be a list of int *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< int * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_int,0)) != 0) {
          char message[] = 
          "list of " "int *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< int * > *)new std::vector< int * >((std::vector< int * > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntPtrVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_IntPtrVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IntPtrVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      int **         temp;
      std::vector< int * > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_int_p_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< int * > so it should be a list of int *'s
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        else if ((SWIG_ConvertPtr(listobjv[0],
              (void **) &temp,
              SWIGTYPE_p_p_int,0)) != 0)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_IntPtrVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IntPtrVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_IntPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int * >::vector(unsigned int)\n"
    "    std::vector< int * >::vector()\n"
    "    std::vector< int * >::vector(unsigned int,int *const &)\n"
    "    std::vector< int * >::vector(std::vector< int * > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntPtrVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  std::vector< int * > *v1 ;
  std::vector< int * > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntPtrVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_int_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< int * > so it should be a list of int *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< int * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_int,0)) != 0) {
          char message[] = 
          "list of " "int *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< int * > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntPtrVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  std::vector< int * > *v1 ;
  std::vector< int * > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntPtrVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_int_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< int * > so it should be a list of int *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< int * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_int,0)) != 0) {
          char message[] = 
          "list of " "int *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< int * > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntPtrVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntPtrVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntPtrVector_clear" "', argument " "1"" of type '" "std::vector< int * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int * > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntPtrVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  int **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int *temp2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IntPtrVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntPtrVector_push" "', argument " "1"" of type '" "std::vector< int * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int * > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntPtrVector_push" "', argument " "2"" of type '" "int *""'"); 
  }
  temp2 = reinterpret_cast< int * >(argp2);
  arg2 = reinterpret_cast< int ** >(&temp2);
  (arg1)->push_back((int *const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntPtrVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntPtrVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntPtrVector_pop" "', argument " "1"" of type '" "std::vector< int * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int * > * >(argp1);
  try {
    result = (int *)std_vector_Sl_int_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_int,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntPtrVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IntPtrVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntPtrVector_get" "', argument " "1"" of type '" "std::vector< int * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int * > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntPtrVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (int **) &std_vector_Sl_int_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_p_int,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntPtrVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  int arg2 ;
  int **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int *temp3 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:IntPtrVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntPtrVector_set" "', argument " "1"" of type '" "std::vector< int * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int * > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntPtrVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IntPtrVector_set" "', argument " "3"" of type '" "int *""'"); 
  }
  temp3 = reinterpret_cast< int * >(argp3);
  arg3 = reinterpret_cast< int ** >(&temp3);
  try {
    std_vector_Sl_int_Sm__Sg__set(arg1,arg2,(int *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_IntPtrVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_IntPtrVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntPtrVector" "', argument " "1"" of type '" "std::vector< int * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_IntPtrVector(void *obj) {
std::vector< int * > *arg1 = (std::vector< int * > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_int_Sm__Sg__methods[] = {
    {"size", _wrap_IntPtrVector_size}, 
    {"empty", _wrap_IntPtrVector_empty}, 
    {"clear", _wrap_IntPtrVector_clear}, 
    {"push", _wrap_IntPtrVector_push}, 
    {"pop", _wrap_IntPtrVector_pop}, 
    {"get", _wrap_IntPtrVector_get}, 
    {"set", _wrap_IntPtrVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_int_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_int_Sm__Sg__bases[] = {0};
static const char * swig_std_vector_Sl_int_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_int_Sm__Sg_ = { "IntPtrVector", &SWIGTYPE_p_std__vectorT_int_p_t,_wrap_new_IntPtrVector, swig_delete_IntPtrVector, swig_std_vector_Sl_int_Sm__Sg__methods, swig_std_vector_Sl_int_Sm__Sg__attributes, swig_std_vector_Sl_int_Sm__Sg__bases,swig_std_vector_Sl_int_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_IntConstPtrVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< int const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_IntConstPtrVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntConstPtrVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< int const * > *)new std::vector< int const * >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntConstPtrVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_IntConstPtrVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< int const * > *)new std::vector< int const * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntConstPtrVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  int **arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int *temp2 ;
  std::vector< int const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_IntConstPtrVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntConstPtrVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_IntConstPtrVector" "', argument " "2"" of type '" "int *""'"); 
  }
  temp2 = reinterpret_cast< int * >(argp2);
  arg2 = reinterpret_cast< int ** >(&temp2);
  result = (std::vector< int const * > *)new std::vector< int const * >(arg1,(int const *const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntConstPtrVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int const * > *arg1 = 0 ;
  std::vector< int const * > *v1 ;
  std::vector< int const * > w1 ;
  std::vector< int const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_IntConstPtrVector std::vector< int const * > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int const **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_int_const_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< int const * > so it should be a list of int const *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< int const * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_int,0)) != 0) {
          char message[] = 
          "list of " "int const *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< int const * > *)new std::vector< int const * >((std::vector< int const * > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntConstPtrVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_IntConstPtrVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IntConstPtrVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      int const **         temp;
      std::vector< int const * > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_int_const_p_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< int const * > so it should be a list of int const *'s
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        else if ((SWIG_ConvertPtr(listobjv[0],
              (void **) &temp,
              SWIGTYPE_p_p_int,0)) != 0)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_IntConstPtrVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IntConstPtrVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_IntConstPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int const * >::vector(unsigned int)\n"
    "    std::vector< int const * >::vector()\n"
    "    std::vector< int const * >::vector(unsigned int,int const *const &)\n"
    "    std::vector< int const * >::vector(std::vector< int const * > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntConstPtrVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  std::vector< int const * > *v1 ;
  std::vector< int const * > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntConstPtrVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int const **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_int_const_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< int const * > so it should be a list of int const *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< int const * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_int,0)) != 0) {
          char message[] = 
          "list of " "int const *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< int const * > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntConstPtrVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  std::vector< int const * > *v1 ;
  std::vector< int const * > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntConstPtrVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int const **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_int_const_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< int const * > so it should be a list of int const *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< int const * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_int,0)) != 0) {
          char message[] = 
          "list of " "int const *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< int const * > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntConstPtrVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntConstPtrVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntConstPtrVector_clear" "', argument " "1"" of type '" "std::vector< int const * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int const * > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntConstPtrVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  int **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int *temp2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IntConstPtrVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntConstPtrVector_push" "', argument " "1"" of type '" "std::vector< int const * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int const * > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntConstPtrVector_push" "', argument " "2"" of type '" "int *""'"); 
  }
  temp2 = reinterpret_cast< int * >(argp2);
  arg2 = reinterpret_cast< int ** >(&temp2);
  (arg1)->push_back((int const *const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntConstPtrVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntConstPtrVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntConstPtrVector_pop" "', argument " "1"" of type '" "std::vector< int const * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int const * > * >(argp1);
  try {
    result = (int *)std_vector_Sl_int_SS_const_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_int,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntConstPtrVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IntConstPtrVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntConstPtrVector_get" "', argument " "1"" of type '" "std::vector< int const * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int const * > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntConstPtrVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (int **) &std_vector_Sl_int_SS_const_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_p_int,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntConstPtrVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  int arg2 ;
  int **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int *temp3 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:IntConstPtrVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntConstPtrVector_set" "', argument " "1"" of type '" "std::vector< int const * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int const * > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntConstPtrVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IntConstPtrVector_set" "', argument " "3"" of type '" "int *""'"); 
  }
  temp3 = reinterpret_cast< int * >(argp3);
  arg3 = reinterpret_cast< int ** >(&temp3);
  try {
    std_vector_Sl_int_SS_const_Sm__Sg__set(arg1,arg2,(int const *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_IntConstPtrVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_IntConstPtrVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_const_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntConstPtrVector" "', argument " "1"" of type '" "std::vector< int const * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int const * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_IntConstPtrVector(void *obj) {
std::vector< int const * > *arg1 = (std::vector< int const * > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_int_SS_const_Sm__Sg__methods[] = {
    {"size", _wrap_IntConstPtrVector_size}, 
    {"empty", _wrap_IntConstPtrVector_empty}, 
    {"clear", _wrap_IntConstPtrVector_clear}, 
    {"push", _wrap_IntConstPtrVector_push}, 
    {"pop", _wrap_IntConstPtrVector_pop}, 
    {"get", _wrap_IntConstPtrVector_get}, 
    {"set", _wrap_IntConstPtrVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_int_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_int_SS_const_Sm__Sg__bases[] = {0};
static const char * swig_std_vector_Sl_int_SS_const_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_int_SS_const_Sm__Sg_ = { "IntConstPtrVector", &SWIGTYPE_p_std__vectorT_int_const_p_t,_wrap_new_IntConstPtrVector, swig_delete_IntConstPtrVector, swig_std_vector_Sl_int_SS_const_Sm__Sg__methods, swig_std_vector_Sl_int_SS_const_Sm__Sg__attributes, swig_std_vector_Sl_int_SS_const_Sm__Sg__bases,swig_std_vector_Sl_int_SS_const_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_StructVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< Struct > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_StructVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StructVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< Struct > *)new std::vector< Struct >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StructVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_StructVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< Struct > *)new std::vector< Struct >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StructVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  Struct *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< Struct > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_StructVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StructVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Struct,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StructVector" "', argument " "2"" of type '" "Struct const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StructVector" "', argument " "2"" of type '" "Struct const &""'"); 
  }
  arg2 = reinterpret_cast< Struct * >(argp2);
  result = (std::vector< Struct > *)new std::vector< Struct >(arg1,(Struct const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StructVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct > *arg1 = 0 ;
  std::vector< Struct > *v1 ;
  std::vector< Struct > w1 ;
  std::vector< Struct > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_StructVector std::vector< Struct > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Struct*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Struct_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Struct > so it should be a list of Struct's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Struct >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_Struct,0)) != 0) {
          char message[] = 
          "list of " "Struct" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< Struct > *)new std::vector< Struct >((std::vector< Struct > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StructVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_StructVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StructVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      Struct*         temp;
      std::vector< Struct > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_Struct_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< Struct > so it should be a list of Struct's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        else if ((SWIG_ConvertPtr(listobjv[0],
              (void **) &temp,
              SWIGTYPE_p_Struct,0)) != 0)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StructVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Struct, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StructVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_StructVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Struct >::vector(unsigned int)\n"
    "    std::vector< Struct >::vector()\n"
    "    std::vector< Struct >::vector(unsigned int,Struct const &)\n"
    "    std::vector< Struct >::vector(std::vector< Struct > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  std::vector< Struct > *v1 ;
  std::vector< Struct > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Struct*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Struct_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Struct > so it should be a list of Struct's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Struct >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_Struct,0)) != 0) {
          char message[] = 
          "list of " "Struct" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< Struct > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  std::vector< Struct > *v1 ;
  std::vector< Struct > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Struct*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Struct_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Struct > so it should be a list of Struct's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Struct >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_Struct,0)) != 0) {
          char message[] = 
          "list of " "Struct" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< Struct > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructVector_clear" "', argument " "1"" of type '" "std::vector< Struct > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  Struct *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StructVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructVector_push" "', argument " "1"" of type '" "std::vector< Struct > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Struct,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StructVector_push" "', argument " "2"" of type '" "Struct const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StructVector_push" "', argument " "2"" of type '" "Struct const &""'"); 
  }
  arg2 = reinterpret_cast< Struct * >(argp2);
  (arg1)->push_back((Struct const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Struct result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructVector_pop" "', argument " "1"" of type '" "std::vector< Struct > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct > * >(argp1);
  try {
    result = std_vector_Sl_Struct_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new Struct(static_cast< const Struct& >(result))), SWIGTYPE_p_Struct, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Struct *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StructVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructVector_get" "', argument " "1"" of type '" "std::vector< Struct > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StructVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (Struct *) &std_vector_Sl_Struct_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Struct,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  int arg2 ;
  Struct *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:StructVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructVector_set" "', argument " "1"" of type '" "std::vector< Struct > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StructVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_Struct,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StructVector_set" "', argument " "3"" of type '" "Struct const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StructVector_set" "', argument " "3"" of type '" "Struct const &""'"); 
  }
  arg3 = reinterpret_cast< Struct * >(argp3);
  try {
    std_vector_Sl_Struct_Sg__set(arg1,arg2,(Struct const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_StructVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_StructVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StructVector" "', argument " "1"" of type '" "std::vector< Struct > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_StructVector(void *obj) {
std::vector< Struct > *arg1 = (std::vector< Struct > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_Struct_Sg__methods[] = {
    {"size", _wrap_StructVector_size}, 
    {"empty", _wrap_StructVector_empty}, 
    {"clear", _wrap_StructVector_clear}, 
    {"push", _wrap_StructVector_push}, 
    {"pop", _wrap_StructVector_pop}, 
    {"get", _wrap_StructVector_get}, 
    {"set", _wrap_StructVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_Struct_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_Struct_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_Struct_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_Struct_Sg_ = { "StructVector", &SWIGTYPE_p_std__vectorT_Struct_t,_wrap_new_StructVector, swig_delete_StructVector, swig_std_vector_Sl_Struct_Sg__methods, swig_std_vector_Sl_Struct_Sg__attributes, swig_std_vector_Sl_Struct_Sg__bases,swig_std_vector_Sl_Struct_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_StructPtrVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< Struct * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_StructPtrVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StructPtrVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< Struct * > *)new std::vector< Struct * >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StructPtrVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_StructPtrVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< Struct * > *)new std::vector< Struct * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StructPtrVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  Struct **arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Struct *temp2 ;
  std::vector< Struct * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_StructPtrVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StructPtrVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Struct, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StructPtrVector" "', argument " "2"" of type '" "Struct *""'"); 
  }
  temp2 = reinterpret_cast< Struct * >(argp2);
  arg2 = reinterpret_cast< Struct ** >(&temp2);
  result = (std::vector< Struct * > *)new std::vector< Struct * >(arg1,(Struct *const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StructPtrVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct * > *arg1 = 0 ;
  std::vector< Struct * > *v1 ;
  std::vector< Struct * > w1 ;
  std::vector< Struct * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_StructPtrVector std::vector< Struct * > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Struct **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Struct_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Struct * > so it should be a list of Struct *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Struct * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_Struct,0)) != 0) {
          char message[] = 
          "list of " "Struct *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< Struct * > *)new std::vector< Struct * >((std::vector< Struct * > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StructPtrVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_StructPtrVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StructPtrVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      Struct **         temp;
      std::vector< Struct * > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_Struct_p_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< Struct * > so it should be a list of Struct *'s
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        else if ((SWIG_ConvertPtr(listobjv[0],
              (void **) &temp,
              SWIGTYPE_p_p_Struct,0)) != 0)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StructPtrVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Struct, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StructPtrVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_StructPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Struct * >::vector(unsigned int)\n"
    "    std::vector< Struct * >::vector()\n"
    "    std::vector< Struct * >::vector(unsigned int,Struct *const &)\n"
    "    std::vector< Struct * >::vector(std::vector< Struct * > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructPtrVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  std::vector< Struct * > *v1 ;
  std::vector< Struct * > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructPtrVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Struct **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Struct_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Struct * > so it should be a list of Struct *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Struct * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_Struct,0)) != 0) {
          char message[] = 
          "list of " "Struct *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< Struct * > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructPtrVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  std::vector< Struct * > *v1 ;
  std::vector< Struct * > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructPtrVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Struct **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Struct_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Struct * > so it should be a list of Struct *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Struct * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_Struct,0)) != 0) {
          char message[] = 
          "list of " "Struct *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< Struct * > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructPtrVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructPtrVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructPtrVector_clear" "', argument " "1"" of type '" "std::vector< Struct * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct * > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructPtrVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  Struct **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Struct *temp2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StructPtrVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructPtrVector_push" "', argument " "1"" of type '" "std::vector< Struct * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct * > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Struct, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StructPtrVector_push" "', argument " "2"" of type '" "Struct *""'"); 
  }
  temp2 = reinterpret_cast< Struct * >(argp2);
  arg2 = reinterpret_cast< Struct ** >(&temp2);
  (arg1)->push_back((Struct *const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructPtrVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Struct *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructPtrVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructPtrVector_pop" "', argument " "1"" of type '" "std::vector< Struct * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct * > * >(argp1);
  try {
    result = (Struct *)std_vector_Sl_Struct_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Struct,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructPtrVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Struct **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StructPtrVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructPtrVector_get" "', argument " "1"" of type '" "std::vector< Struct * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct * > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StructPtrVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (Struct **) &std_vector_Sl_Struct_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_p_Struct,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructPtrVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  int arg2 ;
  Struct **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Struct *temp3 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:StructPtrVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructPtrVector_set" "', argument " "1"" of type '" "std::vector< Struct * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct * > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StructPtrVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_Struct, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StructPtrVector_set" "', argument " "3"" of type '" "Struct *""'"); 
  }
  temp3 = reinterpret_cast< Struct * >(argp3);
  arg3 = reinterpret_cast< Struct ** >(&temp3);
  try {
    std_vector_Sl_Struct_Sm__Sg__set(arg1,arg2,(Struct *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_StructPtrVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_StructPtrVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StructPtrVector" "', argument " "1"" of type '" "std::vector< Struct * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_StructPtrVector(void *obj) {
std::vector< Struct * > *arg1 = (std::vector< Struct * > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_Struct_Sm__Sg__methods[] = {
    {"size", _wrap_StructPtrVector_size}, 
    {"empty", _wrap_StructPtrVector_empty}, 
    {"clear", _wrap_StructPtrVector_clear}, 
    {"push", _wrap_StructPtrVector_push}, 
    {"pop", _wrap_StructPtrVector_pop}, 
    {"get", _wrap_StructPtrVector_get}, 
    {"set", _wrap_StructPtrVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_Struct_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_Struct_Sm__Sg__bases[] = {0};
static const char * swig_std_vector_Sl_Struct_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_Struct_Sm__Sg_ = { "StructPtrVector", &SWIGTYPE_p_std__vectorT_Struct_p_t,_wrap_new_StructPtrVector, swig_delete_StructPtrVector, swig_std_vector_Sl_Struct_Sm__Sg__methods, swig_std_vector_Sl_Struct_Sm__Sg__attributes, swig_std_vector_Sl_Struct_Sm__Sg__bases,swig_std_vector_Sl_Struct_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_StructConstPtrVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< Struct const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_StructConstPtrVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StructConstPtrVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< Struct const * > *)new std::vector< Struct const * >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StructConstPtrVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_StructConstPtrVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< Struct const * > *)new std::vector< Struct const * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StructConstPtrVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  Struct **arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Struct *temp2 ;
  std::vector< Struct const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_StructConstPtrVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StructConstPtrVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Struct, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StructConstPtrVector" "', argument " "2"" of type '" "Struct *""'"); 
  }
  temp2 = reinterpret_cast< Struct * >(argp2);
  arg2 = reinterpret_cast< Struct ** >(&temp2);
  result = (std::vector< Struct const * > *)new std::vector< Struct const * >(arg1,(Struct const *const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StructConstPtrVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct const * > *arg1 = 0 ;
  std::vector< Struct const * > *v1 ;
  std::vector< Struct const * > w1 ;
  std::vector< Struct const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_StructConstPtrVector std::vector< Struct const * > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Struct const **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Struct_const_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Struct const * > so it should be a list of Struct const *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Struct const * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_Struct,0)) != 0) {
          char message[] = 
          "list of " "Struct const *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< Struct const * > *)new std::vector< Struct const * >((std::vector< Struct const * > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Struct_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StructConstPtrVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_StructConstPtrVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StructConstPtrVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      Struct const **         temp;
      std::vector< Struct const * > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< Struct const * > so it should be a list of Struct const *'s
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        else if ((SWIG_ConvertPtr(listobjv[0],
              (void **) &temp,
              SWIGTYPE_p_p_Struct,0)) != 0)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StructConstPtrVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Struct, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StructConstPtrVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_StructConstPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Struct const * >::vector(unsigned int)\n"
    "    std::vector< Struct const * >::vector()\n"
    "    std::vector< Struct const * >::vector(unsigned int,Struct const *const &)\n"
    "    std::vector< Struct const * >::vector(std::vector< Struct const * > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructConstPtrVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  std::vector< Struct const * > *v1 ;
  std::vector< Struct const * > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructConstPtrVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Struct const **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Struct_const_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Struct const * > so it should be a list of Struct const *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Struct const * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_Struct,0)) != 0) {
          char message[] = 
          "list of " "Struct const *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< Struct const * > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructConstPtrVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  std::vector< Struct const * > *v1 ;
  std::vector< Struct const * > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructConstPtrVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Struct const **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Struct_const_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Struct const * > so it should be a list of Struct const *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Struct const * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_Struct,0)) != 0) {
          char message[] = 
          "list of " "Struct const *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< Struct const * > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructConstPtrVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructConstPtrVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructConstPtrVector_clear" "', argument " "1"" of type '" "std::vector< Struct const * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct const * > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructConstPtrVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  Struct **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Struct *temp2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StructConstPtrVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructConstPtrVector_push" "', argument " "1"" of type '" "std::vector< Struct const * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct const * > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Struct, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StructConstPtrVector_push" "', argument " "2"" of type '" "Struct *""'"); 
  }
  temp2 = reinterpret_cast< Struct * >(argp2);
  arg2 = reinterpret_cast< Struct ** >(&temp2);
  (arg1)->push_back((Struct const *const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructConstPtrVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Struct *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructConstPtrVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructConstPtrVector_pop" "', argument " "1"" of type '" "std::vector< Struct const * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct const * > * >(argp1);
  try {
    result = (Struct *)std_vector_Sl_Struct_SS_const_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Struct,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructConstPtrVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Struct **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StructConstPtrVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructConstPtrVector_get" "', argument " "1"" of type '" "std::vector< Struct const * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct const * > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StructConstPtrVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (Struct **) &std_vector_Sl_Struct_SS_const_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_p_Struct,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructConstPtrVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  int arg2 ;
  Struct **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Struct *temp3 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:StructConstPtrVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructConstPtrVector_set" "', argument " "1"" of type '" "std::vector< Struct const * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct const * > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StructConstPtrVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_Struct, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StructConstPtrVector_set" "', argument " "3"" of type '" "Struct *""'"); 
  }
  temp3 = reinterpret_cast< Struct * >(argp3);
  arg3 = reinterpret_cast< Struct ** >(&temp3);
  try {
    std_vector_Sl_Struct_SS_const_Sm__Sg__set(arg1,arg2,(Struct const *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_StructConstPtrVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_StructConstPtrVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Struct_const_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StructConstPtrVector" "', argument " "1"" of type '" "std::vector< Struct const * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Struct const * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_StructConstPtrVector(void *obj) {
std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_Struct_SS_const_Sm__Sg__methods[] = {
    {"size", _wrap_StructConstPtrVector_size}, 
    {"empty", _wrap_StructConstPtrVector_empty}, 
    {"clear", _wrap_StructConstPtrVector_clear}, 
    {"push", _wrap_StructConstPtrVector_push}, 
    {"pop", _wrap_StructConstPtrVector_pop}, 
    {"get", _wrap_StructConstPtrVector_get}, 
    {"set", _wrap_StructConstPtrVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_Struct_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_Struct_SS_const_Sm__Sg__bases[] = {0};
static const char * swig_std_vector_Sl_Struct_SS_const_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_Struct_SS_const_Sm__Sg_ = { "StructConstPtrVector", &SWIGTYPE_p_std__vectorT_Struct_const_p_t,_wrap_new_StructConstPtrVector, swig_delete_StructConstPtrVector, swig_std_vector_Sl_Struct_SS_const_Sm__Sg__methods, swig_std_vector_Sl_Struct_SS_const_Sm__Sg__attributes, swig_std_vector_Sl_Struct_SS_const_Sm__Sg__bases,swig_std_vector_Sl_Struct_SS_const_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_MyClass(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MyClass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_MyClass ") == TCL_ERROR) SWIG_fail;
  result = (MyClass *)new MyClass();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_MyClass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_MyClass(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MyClass *arg1 = (MyClass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_MyClass self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MyClass, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MyClass" "', argument " "1"" of type '" "MyClass *""'"); 
  }
  arg1 = reinterpret_cast< MyClass * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_MyClass(void *obj) {
MyClass *arg1 = (MyClass *) obj;
delete arg1;
}
static swig_method swig_MyClass_methods[] = {
    {0,0}
};
static swig_attribute swig_MyClass_attributes[] = {
    {0,0,0}
};
static swig_class *swig_MyClass_bases[] = {0};
static const char * swig_MyClass_base_names[] = {0};
static swig_class _wrap_class_MyClass = { "MyClass", &SWIGTYPE_p_MyClass,_wrap_new_MyClass, swig_delete_MyClass, swig_MyClass_methods, swig_MyClass_attributes, swig_MyClass_bases,swig_MyClass_base_names, &swig_module };
SWIGINTERN int
_wrap_new_MyClassPtrVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< MyClass * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_MyClassPtrVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MyClassPtrVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< MyClass * > *)new std::vector< MyClass * >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MyClass_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_MyClassPtrVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< MyClass * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_MyClassPtrVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< MyClass * > *)new std::vector< MyClass * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MyClass_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_MyClassPtrVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  MyClass **arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  MyClass *temp2 ;
  std::vector< MyClass * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_MyClassPtrVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MyClassPtrVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_MyClass, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MyClassPtrVector" "', argument " "2"" of type '" "MyClass *""'"); 
  }
  temp2 = reinterpret_cast< MyClass * >(argp2);
  arg2 = reinterpret_cast< MyClass ** >(&temp2);
  result = (std::vector< MyClass * > *)new std::vector< MyClass * >(arg1,(MyClass *const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MyClass_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_MyClassPtrVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< MyClass * > *arg1 = 0 ;
  std::vector< MyClass * > *v1 ;
  std::vector< MyClass * > w1 ;
  std::vector< MyClass * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_MyClassPtrVector std::vector< MyClass * > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    MyClass **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_MyClass_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< MyClass * > so it should be a list of MyClass *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< MyClass * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_MyClass,0)) != 0) {
          char message[] = 
          "list of " "MyClass *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< MyClass * > *)new std::vector< MyClass * >((std::vector< MyClass * > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_MyClass_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_MyClassPtrVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_MyClassPtrVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MyClassPtrVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      MyClass **         temp;
      std::vector< MyClass * > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_MyClass_p_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< MyClass * > so it should be a list of MyClass *'s
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        else if ((SWIG_ConvertPtr(listobjv[0],
              (void **) &temp,
              SWIGTYPE_p_p_MyClass,0)) != 0)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MyClassPtrVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_MyClass, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MyClassPtrVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_MyClassPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< MyClass * >::vector(unsigned int)\n"
    "    std::vector< MyClass * >::vector()\n"
    "    std::vector< MyClass * >::vector(unsigned int,MyClass *const &)\n"
    "    std::vector< MyClass * >::vector(std::vector< MyClass * > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MyClassPtrVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  std::vector< MyClass * > *v1 ;
  std::vector< MyClass * > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MyClassPtrVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    MyClass **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_MyClass_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< MyClass * > so it should be a list of MyClass *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< MyClass * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_MyClass,0)) != 0) {
          char message[] = 
          "list of " "MyClass *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< MyClass * > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MyClassPtrVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  std::vector< MyClass * > *v1 ;
  std::vector< MyClass * > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MyClassPtrVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    MyClass **        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_MyClass_p_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< MyClass * > so it should be a list of MyClass *'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< MyClass * >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_p_MyClass,0)) != 0) {
          char message[] = 
          "list of " "MyClass *" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< MyClass * > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MyClassPtrVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MyClassPtrVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_MyClass_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MyClassPtrVector_clear" "', argument " "1"" of type '" "std::vector< MyClass * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< MyClass * > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MyClassPtrVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  MyClass **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  MyClass *temp2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MyClassPtrVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_MyClass_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MyClassPtrVector_push" "', argument " "1"" of type '" "std::vector< MyClass * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< MyClass * > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_MyClass, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MyClassPtrVector_push" "', argument " "2"" of type '" "MyClass *""'"); 
  }
  temp2 = reinterpret_cast< MyClass * >(argp2);
  arg2 = reinterpret_cast< MyClass ** >(&temp2);
  (arg1)->push_back((MyClass *const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MyClassPtrVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MyClass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MyClassPtrVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_MyClass_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MyClassPtrVector_pop" "', argument " "1"" of type '" "std::vector< MyClass * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< MyClass * > * >(argp1);
  try {
    result = (MyClass *)std_vector_Sl_MyClass_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_MyClass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MyClassPtrVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  MyClass **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MyClassPtrVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_MyClass_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MyClassPtrVector_get" "', argument " "1"" of type '" "std::vector< MyClass * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< MyClass * > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MyClassPtrVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (MyClass **) &std_vector_Sl_MyClass_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_p_MyClass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MyClassPtrVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  int arg2 ;
  MyClass **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  MyClass *temp3 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:MyClassPtrVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_MyClass_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MyClassPtrVector_set" "', argument " "1"" of type '" "std::vector< MyClass * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< MyClass * > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MyClassPtrVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_MyClass, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MyClassPtrVector_set" "', argument " "3"" of type '" "MyClass *""'"); 
  }
  temp3 = reinterpret_cast< MyClass * >(argp3);
  arg3 = reinterpret_cast< MyClass ** >(&temp3);
  try {
    std_vector_Sl_MyClass_Sm__Sg__set(arg1,arg2,(MyClass *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_MyClassPtrVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_MyClassPtrVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_MyClass_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MyClassPtrVector" "', argument " "1"" of type '" "std::vector< MyClass * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< MyClass * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_MyClassPtrVector(void *obj) {
std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_MyClass_Sm__Sg__methods[] = {
    {"size", _wrap_MyClassPtrVector_size}, 
    {"empty", _wrap_MyClassPtrVector_empty}, 
    {"clear", _wrap_MyClassPtrVector_clear}, 
    {"push", _wrap_MyClassPtrVector_push}, 
    {"pop", _wrap_MyClassPtrVector_pop}, 
    {"get", _wrap_MyClassPtrVector_get}, 
    {"set", _wrap_MyClassPtrVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_MyClass_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_MyClass_Sm__Sg__bases[] = {0};
static const char * swig_std_vector_Sl_MyClass_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_MyClass_Sm__Sg_ = { "MyClassPtrVector", &SWIGTYPE_p_std__vectorT_MyClass_p_t,_wrap_new_MyClassPtrVector, swig_delete_MyClassPtrVector, swig_std_vector_Sl_MyClass_Sm__Sg__methods, swig_std_vector_Sl_MyClass_Sm__Sg__attributes, swig_std_vector_Sl_MyClass_Sm__Sg__bases,swig_std_vector_Sl_MyClass_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_RetsMetadata_GetAllResources(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  RetsMetadata *arg1 = (RetsMetadata *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  MyClassVector result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:RetsMetadata_GetAllResources self n ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_RetsMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RetsMetadata_GetAllResources" "', argument " "1"" of type '" "RetsMetadata const *""'"); 
  }
  arg1 = reinterpret_cast< RetsMetadata * >(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RetsMetadata_GetAllResources" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((RetsMetadata const *)arg1)->GetAllResources(arg2);
  {
    for (unsigned int i=0; i<(&result)->size(); i++) {
      MyClass ** ptr = new MyClass *(((MyClassVector &)result)[i]);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), \
        SWIG_NewInstanceObj(ptr, 
          SWIGTYPE_p_p_MyClass, 
          0));
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_RetsMetadata(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  RetsMetadata *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_RetsMetadata ") == TCL_ERROR) SWIG_fail;
  result = (RetsMetadata *)new RetsMetadata();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_RetsMetadata,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_RetsMetadata(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  RetsMetadata *arg1 = (RetsMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_RetsMetadata self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_RetsMetadata, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RetsMetadata" "', argument " "1"" of type '" "RetsMetadata *""'"); 
  }
  arg1 = reinterpret_cast< RetsMetadata * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_RetsMetadata(void *obj) {
RetsMetadata *arg1 = (RetsMetadata *) obj;
delete arg1;
}
static swig_method swig_RetsMetadata_methods[] = {
    {"GetAllResources", _wrap_RetsMetadata_GetAllResources}, 
    {0,0}
};
static swig_attribute swig_RetsMetadata_attributes[] = {
    {0,0,0}
};
static swig_class *swig_RetsMetadata_bases[] = {0};
static const char * swig_RetsMetadata_base_names[] = {0};
static swig_class _wrap_class_RetsMetadata = { "RetsMetadata", &SWIGTYPE_p_RetsMetadata,_wrap_new_RetsMetadata, swig_delete_RetsMetadata, swig_RetsMetadata_methods, swig_RetsMetadata_attributes, swig_RetsMetadata_bases,swig_RetsMetadata_base_names, &swig_module };

static swig_command_info swig_commands[] = {
    { SWIG_prefix "new_IntVector", (swig_wrapper_func) _wrap_new_IntVector, NULL},
    { SWIG_prefix "IntVector_size", (swig_wrapper_func) _wrap_IntVector_size, NULL},
    { SWIG_prefix "IntVector_empty", (swig_wrapper_func) _wrap_IntVector_empty, NULL},
    { SWIG_prefix "IntVector_clear", (swig_wrapper_func) _wrap_IntVector_clear, NULL},
    { SWIG_prefix "IntVector_push", (swig_wrapper_func) _wrap_IntVector_push, NULL},
    { SWIG_prefix "IntVector_pop", (swig_wrapper_func) _wrap_IntVector_pop, NULL},
    { SWIG_prefix "IntVector_get", (swig_wrapper_func) _wrap_IntVector_get, NULL},
    { SWIG_prefix "IntVector_set", (swig_wrapper_func) _wrap_IntVector_set, NULL},
    { SWIG_prefix "delete_IntVector", (swig_wrapper_func) _wrap_delete_IntVector, NULL},
    { SWIG_prefix "IntVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_int_Sg_},
    { SWIG_prefix "new_BoolVector", (swig_wrapper_func) _wrap_new_BoolVector, NULL},
    { SWIG_prefix "BoolVector_size", (swig_wrapper_func) _wrap_BoolVector_size, NULL},
    { SWIG_prefix "BoolVector_empty", (swig_wrapper_func) _wrap_BoolVector_empty, NULL},
    { SWIG_prefix "BoolVector_clear", (swig_wrapper_func) _wrap_BoolVector_clear, NULL},
    { SWIG_prefix "BoolVector_push", (swig_wrapper_func) _wrap_BoolVector_push, NULL},
    { SWIG_prefix "BoolVector_pop", (swig_wrapper_func) _wrap_BoolVector_pop, NULL},
    { SWIG_prefix "BoolVector_get", (swig_wrapper_func) _wrap_BoolVector_get, NULL},
    { SWIG_prefix "BoolVector_set", (swig_wrapper_func) _wrap_BoolVector_set, NULL},
    { SWIG_prefix "delete_BoolVector", (swig_wrapper_func) _wrap_delete_BoolVector, NULL},
    { SWIG_prefix "BoolVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_bool_Sg_},
    { SWIG_prefix "new_CharVector", (swig_wrapper_func) _wrap_new_CharVector, NULL},
    { SWIG_prefix "CharVector_size", (swig_wrapper_func) _wrap_CharVector_size, NULL},
    { SWIG_prefix "CharVector_empty", (swig_wrapper_func) _wrap_CharVector_empty, NULL},
    { SWIG_prefix "CharVector_clear", (swig_wrapper_func) _wrap_CharVector_clear, NULL},
    { SWIG_prefix "CharVector_push", (swig_wrapper_func) _wrap_CharVector_push, NULL},
    { SWIG_prefix "CharVector_pop", (swig_wrapper_func) _wrap_CharVector_pop, NULL},
    { SWIG_prefix "CharVector_get", (swig_wrapper_func) _wrap_CharVector_get, NULL},
    { SWIG_prefix "CharVector_set", (swig_wrapper_func) _wrap_CharVector_set, NULL},
    { SWIG_prefix "delete_CharVector", (swig_wrapper_func) _wrap_delete_CharVector, NULL},
    { SWIG_prefix "CharVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_char_Sg_},
    { SWIG_prefix "new_ShortVector", (swig_wrapper_func) _wrap_new_ShortVector, NULL},
    { SWIG_prefix "ShortVector_size", (swig_wrapper_func) _wrap_ShortVector_size, NULL},
    { SWIG_prefix "ShortVector_empty", (swig_wrapper_func) _wrap_ShortVector_empty, NULL},
    { SWIG_prefix "ShortVector_clear", (swig_wrapper_func) _wrap_ShortVector_clear, NULL},
    { SWIG_prefix "ShortVector_push", (swig_wrapper_func) _wrap_ShortVector_push, NULL},
    { SWIG_prefix "ShortVector_pop", (swig_wrapper_func) _wrap_ShortVector_pop, NULL},
    { SWIG_prefix "ShortVector_get", (swig_wrapper_func) _wrap_ShortVector_get, NULL},
    { SWIG_prefix "ShortVector_set", (swig_wrapper_func) _wrap_ShortVector_set, NULL},
    { SWIG_prefix "delete_ShortVector", (swig_wrapper_func) _wrap_delete_ShortVector, NULL},
    { SWIG_prefix "ShortVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_short_Sg_},
    { SWIG_prefix "new_LongVector", (swig_wrapper_func) _wrap_new_LongVector, NULL},
    { SWIG_prefix "LongVector_size", (swig_wrapper_func) _wrap_LongVector_size, NULL},
    { SWIG_prefix "LongVector_empty", (swig_wrapper_func) _wrap_LongVector_empty, NULL},
    { SWIG_prefix "LongVector_clear", (swig_wrapper_func) _wrap_LongVector_clear, NULL},
    { SWIG_prefix "LongVector_push", (swig_wrapper_func) _wrap_LongVector_push, NULL},
    { SWIG_prefix "LongVector_pop", (swig_wrapper_func) _wrap_LongVector_pop, NULL},
    { SWIG_prefix "LongVector_get", (swig_wrapper_func) _wrap_LongVector_get, NULL},
    { SWIG_prefix "LongVector_set", (swig_wrapper_func) _wrap_LongVector_set, NULL},
    { SWIG_prefix "delete_LongVector", (swig_wrapper_func) _wrap_delete_LongVector, NULL},
    { SWIG_prefix "LongVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_long_Sg_},
    { SWIG_prefix "new_UCharVector", (swig_wrapper_func) _wrap_new_UCharVector, NULL},
    { SWIG_prefix "UCharVector_size", (swig_wrapper_func) _wrap_UCharVector_size, NULL},
    { SWIG_prefix "UCharVector_empty", (swig_wrapper_func) _wrap_UCharVector_empty, NULL},
    { SWIG_prefix "UCharVector_clear", (swig_wrapper_func) _wrap_UCharVector_clear, NULL},
    { SWIG_prefix "UCharVector_push", (swig_wrapper_func) _wrap_UCharVector_push, NULL},
    { SWIG_prefix "UCharVector_pop", (swig_wrapper_func) _wrap_UCharVector_pop, NULL},
    { SWIG_prefix "UCharVector_get", (swig_wrapper_func) _wrap_UCharVector_get, NULL},
    { SWIG_prefix "UCharVector_set", (swig_wrapper_func) _wrap_UCharVector_set, NULL},
    { SWIG_prefix "delete_UCharVector", (swig_wrapper_func) _wrap_delete_UCharVector, NULL},
    { SWIG_prefix "UCharVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_unsigned_SS_char_Sg_},
    { SWIG_prefix "new_UIntVector", (swig_wrapper_func) _wrap_new_UIntVector, NULL},
    { SWIG_prefix "UIntVector_size", (swig_wrapper_func) _wrap_UIntVector_size, NULL},
    { SWIG_prefix "UIntVector_empty", (swig_wrapper_func) _wrap_UIntVector_empty, NULL},
    { SWIG_prefix "UIntVector_clear", (swig_wrapper_func) _wrap_UIntVector_clear, NULL},
    { SWIG_prefix "UIntVector_push", (swig_wrapper_func) _wrap_UIntVector_push, NULL},
    { SWIG_prefix "UIntVector_pop", (swig_wrapper_func) _wrap_UIntVector_pop, NULL},
    { SWIG_prefix "UIntVector_get", (swig_wrapper_func) _wrap_UIntVector_get, NULL},
    { SWIG_prefix "UIntVector_set", (swig_wrapper_func) _wrap_UIntVector_set, NULL},
    { SWIG_prefix "delete_UIntVector", (swig_wrapper_func) _wrap_delete_UIntVector, NULL},
    { SWIG_prefix "UIntVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_unsigned_SS_int_Sg_},
    { SWIG_prefix "new_UShortVector", (swig_wrapper_func) _wrap_new_UShortVector, NULL},
    { SWIG_prefix "UShortVector_size", (swig_wrapper_func) _wrap_UShortVector_size, NULL},
    { SWIG_prefix "UShortVector_empty", (swig_wrapper_func) _wrap_UShortVector_empty, NULL},
    { SWIG_prefix "UShortVector_clear", (swig_wrapper_func) _wrap_UShortVector_clear, NULL},
    { SWIG_prefix "UShortVector_push", (swig_wrapper_func) _wrap_UShortVector_push, NULL},
    { SWIG_prefix "UShortVector_pop", (swig_wrapper_func) _wrap_UShortVector_pop, NULL},
    { SWIG_prefix "UShortVector_get", (swig_wrapper_func) _wrap_UShortVector_get, NULL},
    { SWIG_prefix "UShortVector_set", (swig_wrapper_func) _wrap_UShortVector_set, NULL},
    { SWIG_prefix "delete_UShortVector", (swig_wrapper_func) _wrap_delete_UShortVector, NULL},
    { SWIG_prefix "UShortVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_unsigned_SS_short_Sg_},
    { SWIG_prefix "new_ULongVector", (swig_wrapper_func) _wrap_new_ULongVector, NULL},
    { SWIG_prefix "ULongVector_size", (swig_wrapper_func) _wrap_ULongVector_size, NULL},
    { SWIG_prefix "ULongVector_empty", (swig_wrapper_func) _wrap_ULongVector_empty, NULL},
    { SWIG_prefix "ULongVector_clear", (swig_wrapper_func) _wrap_ULongVector_clear, NULL},
    { SWIG_prefix "ULongVector_push", (swig_wrapper_func) _wrap_ULongVector_push, NULL},
    { SWIG_prefix "ULongVector_pop", (swig_wrapper_func) _wrap_ULongVector_pop, NULL},
    { SWIG_prefix "ULongVector_get", (swig_wrapper_func) _wrap_ULongVector_get, NULL},
    { SWIG_prefix "ULongVector_set", (swig_wrapper_func) _wrap_ULongVector_set, NULL},
    { SWIG_prefix "delete_ULongVector", (swig_wrapper_func) _wrap_delete_ULongVector, NULL},
    { SWIG_prefix "ULongVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_unsigned_SS_long_Sg_},
    { SWIG_prefix "new_DoubleVector", (swig_wrapper_func) _wrap_new_DoubleVector, NULL},
    { SWIG_prefix "DoubleVector_size", (swig_wrapper_func) _wrap_DoubleVector_size, NULL},
    { SWIG_prefix "DoubleVector_empty", (swig_wrapper_func) _wrap_DoubleVector_empty, NULL},
    { SWIG_prefix "DoubleVector_clear", (swig_wrapper_func) _wrap_DoubleVector_clear, NULL},
    { SWIG_prefix "DoubleVector_push", (swig_wrapper_func) _wrap_DoubleVector_push, NULL},
    { SWIG_prefix "DoubleVector_pop", (swig_wrapper_func) _wrap_DoubleVector_pop, NULL},
    { SWIG_prefix "DoubleVector_get", (swig_wrapper_func) _wrap_DoubleVector_get, NULL},
    { SWIG_prefix "DoubleVector_set", (swig_wrapper_func) _wrap_DoubleVector_set, NULL},
    { SWIG_prefix "delete_DoubleVector", (swig_wrapper_func) _wrap_delete_DoubleVector, NULL},
    { SWIG_prefix "DoubleVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_double_Sg_},
    { SWIG_prefix "new_StringVector", (swig_wrapper_func) _wrap_new_StringVector, NULL},
    { SWIG_prefix "StringVector_size", (swig_wrapper_func) _wrap_StringVector_size, NULL},
    { SWIG_prefix "StringVector_empty", (swig_wrapper_func) _wrap_StringVector_empty, NULL},
    { SWIG_prefix "StringVector_clear", (swig_wrapper_func) _wrap_StringVector_clear, NULL},
    { SWIG_prefix "StringVector_push", (swig_wrapper_func) _wrap_StringVector_push, NULL},
    { SWIG_prefix "StringVector_pop", (swig_wrapper_func) _wrap_StringVector_pop, NULL},
    { SWIG_prefix "StringVector_get", (swig_wrapper_func) _wrap_StringVector_get, NULL},
    { SWIG_prefix "StringVector_set", (swig_wrapper_func) _wrap_StringVector_set, NULL},
    { SWIG_prefix "delete_StringVector", (swig_wrapper_func) _wrap_delete_StringVector, NULL},
    { SWIG_prefix "StringVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_std_string_Sg_},
    { SWIG_prefix "typedef_test", (swig_wrapper_func) _wrap_typedef_test, NULL},
    { SWIG_prefix "new_RealVector", (swig_wrapper_func) _wrap_new_RealVector, NULL},
    { SWIG_prefix "RealVector_size", (swig_wrapper_func) _wrap_RealVector_size, NULL},
    { SWIG_prefix "RealVector_empty", (swig_wrapper_func) _wrap_RealVector_empty, NULL},
    { SWIG_prefix "RealVector_clear", (swig_wrapper_func) _wrap_RealVector_clear, NULL},
    { SWIG_prefix "RealVector_push", (swig_wrapper_func) _wrap_RealVector_push, NULL},
    { SWIG_prefix "RealVector_pop", (swig_wrapper_func) _wrap_RealVector_pop, NULL},
    { SWIG_prefix "RealVector_get", (swig_wrapper_func) _wrap_RealVector_get, NULL},
    { SWIG_prefix "RealVector_set", (swig_wrapper_func) _wrap_RealVector_set, NULL},
    { SWIG_prefix "delete_RealVector", (swig_wrapper_func) _wrap_delete_RealVector, NULL},
    { SWIG_prefix "RealVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_Real_Sg_},
    { SWIG_prefix "average", (swig_wrapper_func) _wrap_average, NULL},
    { SWIG_prefix "half", (swig_wrapper_func) _wrap_half, NULL},
    { SWIG_prefix "halve_in_place", (swig_wrapper_func) _wrap_halve_in_place, NULL},
    { SWIG_prefix "Struct_num_set", (swig_wrapper_func) _wrap_Struct_num_set, NULL},
    { SWIG_prefix "Struct_num_get", (swig_wrapper_func) _wrap_Struct_num_get, NULL},
    { SWIG_prefix "new_Struct", (swig_wrapper_func) _wrap_new_Struct, NULL},
    { SWIG_prefix "delete_Struct", (swig_wrapper_func) _wrap_delete_Struct, NULL},
    { SWIG_prefix "Struct", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Struct},
    { SWIG_prefix "Structure_num_set", (swig_wrapper_func) _wrap_Structure_num_set, NULL},
    { SWIG_prefix "Structure_num_get", (swig_wrapper_func) _wrap_Structure_num_get, NULL},
    { SWIG_prefix "new_Structure", (swig_wrapper_func) _wrap_new_Structure, NULL},
    { SWIG_prefix "delete_Structure", (swig_wrapper_func) _wrap_delete_Structure, NULL},
    { SWIG_prefix "Structure", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Structure},
    { SWIG_prefix "vecreal", (swig_wrapper_func) _wrap_vecreal, NULL},
    { SWIG_prefix "vecintptr", (swig_wrapper_func) _wrap_vecintptr, NULL},
    { SWIG_prefix "vecintconstptr", (swig_wrapper_func) _wrap_vecintconstptr, NULL},
    { SWIG_prefix "vecstruct", (swig_wrapper_func) _wrap_vecstruct, NULL},
    { SWIG_prefix "vecstructptr", (swig_wrapper_func) _wrap_vecstructptr, NULL},
    { SWIG_prefix "vecstructconstptr", (swig_wrapper_func) _wrap_vecstructconstptr, NULL},
    { SWIG_prefix "new_IntPtrVector", (swig_wrapper_func) _wrap_new_IntPtrVector, NULL},
    { SWIG_prefix "IntPtrVector_size", (swig_wrapper_func) _wrap_IntPtrVector_size, NULL},
    { SWIG_prefix "IntPtrVector_empty", (swig_wrapper_func) _wrap_IntPtrVector_empty, NULL},
    { SWIG_prefix "IntPtrVector_clear", (swig_wrapper_func) _wrap_IntPtrVector_clear, NULL},
    { SWIG_prefix "IntPtrVector_push", (swig_wrapper_func) _wrap_IntPtrVector_push, NULL},
    { SWIG_prefix "IntPtrVector_pop", (swig_wrapper_func) _wrap_IntPtrVector_pop, NULL},
    { SWIG_prefix "IntPtrVector_get", (swig_wrapper_func) _wrap_IntPtrVector_get, NULL},
    { SWIG_prefix "IntPtrVector_set", (swig_wrapper_func) _wrap_IntPtrVector_set, NULL},
    { SWIG_prefix "delete_IntPtrVector", (swig_wrapper_func) _wrap_delete_IntPtrVector, NULL},
    { SWIG_prefix "IntPtrVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_int_Sm__Sg_},
    { SWIG_prefix "new_IntConstPtrVector", (swig_wrapper_func) _wrap_new_IntConstPtrVector, NULL},
    { SWIG_prefix "IntConstPtrVector_size", (swig_wrapper_func) _wrap_IntConstPtrVector_size, NULL},
    { SWIG_prefix "IntConstPtrVector_empty", (swig_wrapper_func) _wrap_IntConstPtrVector_empty, NULL},
    { SWIG_prefix "IntConstPtrVector_clear", (swig_wrapper_func) _wrap_IntConstPtrVector_clear, NULL},
    { SWIG_prefix "IntConstPtrVector_push", (swig_wrapper_func) _wrap_IntConstPtrVector_push, NULL},
    { SWIG_prefix "IntConstPtrVector_pop", (swig_wrapper_func) _wrap_IntConstPtrVector_pop, NULL},
    { SWIG_prefix "IntConstPtrVector_get", (swig_wrapper_func) _wrap_IntConstPtrVector_get, NULL},
    { SWIG_prefix "IntConstPtrVector_set", (swig_wrapper_func) _wrap_IntConstPtrVector_set, NULL},
    { SWIG_prefix "delete_IntConstPtrVector", (swig_wrapper_func) _wrap_delete_IntConstPtrVector, NULL},
    { SWIG_prefix "IntConstPtrVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_int_SS_const_Sm__Sg_},
    { SWIG_prefix "new_StructVector", (swig_wrapper_func) _wrap_new_StructVector, NULL},
    { SWIG_prefix "StructVector_size", (swig_wrapper_func) _wrap_StructVector_size, NULL},
    { SWIG_prefix "StructVector_empty", (swig_wrapper_func) _wrap_StructVector_empty, NULL},
    { SWIG_prefix "StructVector_clear", (swig_wrapper_func) _wrap_StructVector_clear, NULL},
    { SWIG_prefix "StructVector_push", (swig_wrapper_func) _wrap_StructVector_push, NULL},
    { SWIG_prefix "StructVector_pop", (swig_wrapper_func) _wrap_StructVector_pop, NULL},
    { SWIG_prefix "StructVector_get", (swig_wrapper_func) _wrap_StructVector_get, NULL},
    { SWIG_prefix "StructVector_set", (swig_wrapper_func) _wrap_StructVector_set, NULL},
    { SWIG_prefix "delete_StructVector", (swig_wrapper_func) _wrap_delete_StructVector, NULL},
    { SWIG_prefix "StructVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_Struct_Sg_},
    { SWIG_prefix "new_StructPtrVector", (swig_wrapper_func) _wrap_new_StructPtrVector, NULL},
    { SWIG_prefix "StructPtrVector_size", (swig_wrapper_func) _wrap_StructPtrVector_size, NULL},
    { SWIG_prefix "StructPtrVector_empty", (swig_wrapper_func) _wrap_StructPtrVector_empty, NULL},
    { SWIG_prefix "StructPtrVector_clear", (swig_wrapper_func) _wrap_StructPtrVector_clear, NULL},
    { SWIG_prefix "StructPtrVector_push", (swig_wrapper_func) _wrap_StructPtrVector_push, NULL},
    { SWIG_prefix "StructPtrVector_pop", (swig_wrapper_func) _wrap_StructPtrVector_pop, NULL},
    { SWIG_prefix "StructPtrVector_get", (swig_wrapper_func) _wrap_StructPtrVector_get, NULL},
    { SWIG_prefix "StructPtrVector_set", (swig_wrapper_func) _wrap_StructPtrVector_set, NULL},
    { SWIG_prefix "delete_StructPtrVector", (swig_wrapper_func) _wrap_delete_StructPtrVector, NULL},
    { SWIG_prefix "StructPtrVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_Struct_Sm__Sg_},
    { SWIG_prefix "new_StructConstPtrVector", (swig_wrapper_func) _wrap_new_StructConstPtrVector, NULL},
    { SWIG_prefix "StructConstPtrVector_size", (swig_wrapper_func) _wrap_StructConstPtrVector_size, NULL},
    { SWIG_prefix "StructConstPtrVector_empty", (swig_wrapper_func) _wrap_StructConstPtrVector_empty, NULL},
    { SWIG_prefix "StructConstPtrVector_clear", (swig_wrapper_func) _wrap_StructConstPtrVector_clear, NULL},
    { SWIG_prefix "StructConstPtrVector_push", (swig_wrapper_func) _wrap_StructConstPtrVector_push, NULL},
    { SWIG_prefix "StructConstPtrVector_pop", (swig_wrapper_func) _wrap_StructConstPtrVector_pop, NULL},
    { SWIG_prefix "StructConstPtrVector_get", (swig_wrapper_func) _wrap_StructConstPtrVector_get, NULL},
    { SWIG_prefix "StructConstPtrVector_set", (swig_wrapper_func) _wrap_StructConstPtrVector_set, NULL},
    { SWIG_prefix "delete_StructConstPtrVector", (swig_wrapper_func) _wrap_delete_StructConstPtrVector, NULL},
    { SWIG_prefix "StructConstPtrVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_Struct_SS_const_Sm__Sg_},
    { SWIG_prefix "new_MyClass", (swig_wrapper_func) _wrap_new_MyClass, NULL},
    { SWIG_prefix "delete_MyClass", (swig_wrapper_func) _wrap_delete_MyClass, NULL},
    { SWIG_prefix "MyClass", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_MyClass},
    { SWIG_prefix "new_MyClassPtrVector", (swig_wrapper_func) _wrap_new_MyClassPtrVector, NULL},
    { SWIG_prefix "MyClassPtrVector_size", (swig_wrapper_func) _wrap_MyClassPtrVector_size, NULL},
    { SWIG_prefix "MyClassPtrVector_empty", (swig_wrapper_func) _wrap_MyClassPtrVector_empty, NULL},
    { SWIG_prefix "MyClassPtrVector_clear", (swig_wrapper_func) _wrap_MyClassPtrVector_clear, NULL},
    { SWIG_prefix "MyClassPtrVector_push", (swig_wrapper_func) _wrap_MyClassPtrVector_push, NULL},
    { SWIG_prefix "MyClassPtrVector_pop", (swig_wrapper_func) _wrap_MyClassPtrVector_pop, NULL},
    { SWIG_prefix "MyClassPtrVector_get", (swig_wrapper_func) _wrap_MyClassPtrVector_get, NULL},
    { SWIG_prefix "MyClassPtrVector_set", (swig_wrapper_func) _wrap_MyClassPtrVector_set, NULL},
    { SWIG_prefix "delete_MyClassPtrVector", (swig_wrapper_func) _wrap_delete_MyClassPtrVector, NULL},
    { SWIG_prefix "MyClassPtrVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_MyClass_Sm__Sg_},
    { SWIG_prefix "RetsMetadata_GetAllResources", (swig_wrapper_func) _wrap_RetsMetadata_GetAllResources, NULL},
    { SWIG_prefix "new_RetsMetadata", (swig_wrapper_func) _wrap_new_RetsMetadata, NULL},
    { SWIG_prefix "delete_RetsMetadata", (swig_wrapper_func) _wrap_delete_RetsMetadata, NULL},
    { SWIG_prefix "RetsMetadata", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_RetsMetadata},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_MyClass = {"_p_MyClass", "MyClass *", 0, 0, (void*)&_wrap_class_MyClass, 0};
static swig_type_info _swigt__p_RetsMetadata = {"_p_RetsMetadata", "RetsMetadata *", 0, 0, (void*)&_wrap_class_RetsMetadata, 0};
static swig_type_info _swigt__p_Struct = {"_p_Struct", "Struct *", 0, 0, (void*)&_wrap_class_Struct, 0};
static swig_type_info _swigt__p_Structure = {"_p_Structure", "Structure *", 0, 0, (void*)&_wrap_class_Structure, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_MyClass = {"_p_p_MyClass", "MyClass **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_Struct = {"_p_p_Struct", "Struct **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_int = {"_p_p_int", "int **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__vectorT_MyClass_p_t = {"_p_p_std__vectorT_MyClass_p_t", "std::vector< MyClass * > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__vectorT_Struct_const_p_t = {"_p_p_std__vectorT_Struct_const_p_t", "std::vector< Struct const * > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__vectorT_Struct_p_t = {"_p_p_std__vectorT_Struct_p_t", "std::vector< Struct * > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__vectorT_Struct_t = {"_p_p_std__vectorT_Struct_t", "std::vector< Struct > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__vectorT_int_const_p_t = {"_p_p_std__vectorT_int_const_p_t", "std::vector< int const * > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__vectorT_int_p_t = {"_p_p_std__vectorT_int_p_t", "std::vector< int * > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__out_of_range = {"_p_std__out_of_range", "std::out_of_range *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MyClass_p_t = {"_p_std__vectorT_MyClass_p_t", "std::vector< MyClass * > *|MyClassVector *", 0, 0, (void*)&_wrap_class_std_vector_Sl_MyClass_Sm__Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_Struct_const_p_t = {"_p_std__vectorT_Struct_const_p_t", "std::vector< Struct const * > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_Struct_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_Struct_p_t = {"_p_std__vectorT_Struct_p_t", "std::vector< Struct * > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_Struct_Sm__Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_Struct_t = {"_p_std__vectorT_Struct_t", "std::vector< Struct > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_Struct_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_bool_t = {"_p_std__vectorT_bool_t", "std::vector< bool > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_bool_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_char_t = {"_p_std__vectorT_char_t", "std::vector< char > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_char_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_double_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *|std::vector< Real > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_Real_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_int_const_p_t = {"_p_std__vectorT_int_const_p_t", "std::vector< int const * > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_int_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_int_p_t = {"_p_std__vectorT_int_p_t", "std::vector< int * > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_int_Sm__Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_int_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_int_t__size_type = {"_p_std__vectorT_int_t__size_type", "std::vector< int >::size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_t = {"_p_std__vectorT_long_t", "std::vector< long > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_long_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_short_t = {"_p_std__vectorT_short_t", "std::vector< short > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_short_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_std_string_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< unsigned char > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_unsigned_SS_char_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< unsigned int > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_unsigned_SS_int_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_t = {"_p_std__vectorT_unsigned_long_t", "std::vector< unsigned long > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_unsigned_SS_long_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_t = {"_p_std__vectorT_unsigned_short_t", "std::vector< unsigned short > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_unsigned_SS_short_Sg_, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_MyClass,
  &_swigt__p_RetsMetadata,
  &_swigt__p_Struct,
  &_swigt__p_Structure,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_p_MyClass,
  &_swigt__p_p_Struct,
  &_swigt__p_p_int,
  &_swigt__p_p_std__vectorT_MyClass_p_t,
  &_swigt__p_p_std__vectorT_Struct_const_p_t,
  &_swigt__p_p_std__vectorT_Struct_p_t,
  &_swigt__p_p_std__vectorT_Struct_t,
  &_swigt__p_p_std__vectorT_int_const_p_t,
  &_swigt__p_p_std__vectorT_int_p_t,
  &_swigt__p_std__out_of_range,
  &_swigt__p_std__vectorT_MyClass_p_t,
  &_swigt__p_std__vectorT_Struct_const_p_t,
  &_swigt__p_std__vectorT_Struct_p_t,
  &_swigt__p_std__vectorT_Struct_t,
  &_swigt__p_std__vectorT_bool_t,
  &_swigt__p_std__vectorT_char_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int_const_p_t,
  &_swigt__p_std__vectorT_int_p_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_int_t__size_type,
  &_swigt__p_std__vectorT_long_t,
  &_swigt__p_std__vectorT_short_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_std__vectorT_unsigned_long_t,
  &_swigt__p_std__vectorT_unsigned_short_t,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_MyClass[] = {  {&_swigt__p_MyClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RetsMetadata[] = {  {&_swigt__p_RetsMetadata, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Struct[] = {  {&_swigt__p_Struct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Structure[] = {  {&_swigt__p_Structure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_MyClass[] = {  {&_swigt__p_p_MyClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_Struct[] = {  {&_swigt__p_p_Struct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_int[] = {  {&_swigt__p_p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__vectorT_MyClass_p_t[] = {  {&_swigt__p_p_std__vectorT_MyClass_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__vectorT_Struct_const_p_t[] = {  {&_swigt__p_p_std__vectorT_Struct_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__vectorT_Struct_p_t[] = {  {&_swigt__p_p_std__vectorT_Struct_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__vectorT_Struct_t[] = {  {&_swigt__p_p_std__vectorT_Struct_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__vectorT_int_const_p_t[] = {  {&_swigt__p_p_std__vectorT_int_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__vectorT_int_p_t[] = {  {&_swigt__p_p_std__vectorT_int_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__out_of_range[] = {  {&_swigt__p_std__out_of_range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MyClass_p_t[] = {  {&_swigt__p_std__vectorT_MyClass_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Struct_const_p_t[] = {  {&_swigt__p_std__vectorT_Struct_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Struct_p_t[] = {  {&_swigt__p_std__vectorT_Struct_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Struct_t[] = {  {&_swigt__p_std__vectorT_Struct_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bool_t[] = {  {&_swigt__p_std__vectorT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_t[] = {  {&_swigt__p_std__vectorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_const_p_t[] = {  {&_swigt__p_std__vectorT_int_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_p_t[] = {  {&_swigt__p_std__vectorT_int_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t__size_type[] = {  {&_swigt__p_std__vectorT_int_t__size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_t[] = {  {&_swigt__p_std__vectorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_t[] = {  {&_swigt__p_std__vectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_MyClass,
  _swigc__p_RetsMetadata,
  _swigc__p_Struct,
  _swigc__p_Structure,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_p_MyClass,
  _swigc__p_p_Struct,
  _swigc__p_p_int,
  _swigc__p_p_std__vectorT_MyClass_p_t,
  _swigc__p_p_std__vectorT_Struct_const_p_t,
  _swigc__p_p_std__vectorT_Struct_p_t,
  _swigc__p_p_std__vectorT_Struct_t,
  _swigc__p_p_std__vectorT_int_const_p_t,
  _swigc__p_p_std__vectorT_int_p_t,
  _swigc__p_std__out_of_range,
  _swigc__p_std__vectorT_MyClass_p_t,
  _swigc__p_std__vectorT_Struct_const_p_t,
  _swigc__p_std__vectorT_Struct_p_t,
  _swigc__p_std__vectorT_Struct_t,
  _swigc__p_std__vectorT_bool_t,
  _swigc__p_std__vectorT_char_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int_const_p_t,
  _swigc__p_std__vectorT_int_p_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_int_t__size_type,
  _swigc__p_std__vectorT_long_t,
  _swigc__p_std__vectorT_short_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_std__vectorT_unsigned_long_t,
  _swigc__p_std__vectorT_unsigned_short_t,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    size_t i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
  /* Create fast method lookup tables */
  
  SWIGINTERN void
  SWIG_Tcl_InstallMethodLookupTables(void) {
    size_t i;
    
    for (i = 0; i < swig_module.size; ++i) {
      swig_type_info *type = swig_module.type_initial[i];
      if (type->clientdata) {
        swig_class* klass = (swig_class*) type->clientdata;
        swig_method* meth;
        Tcl_InitHashTable(&(klass->hashtable), TCL_STRING_KEYS);
        for (meth = klass->methods; meth && meth->name; ++meth) {
          int newEntry;
          Tcl_HashEntry* hashentry = Tcl_CreateHashEntry(&(klass->hashtable), meth->name, &newEntry);
          Tcl_SetHashValue(hashentry, (ClientData)meth->method);
        }
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  size_t i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  /* (char*) cast is required to avoid compiler warning/error for Tcl < 8.4. */
  if (Tcl_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
#ifdef USE_TK_STUBS
  /* (char*) cast is required to avoid compiler warning/error. */
  if (Tk_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif
  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  SWIG_Tcl_InstallMethodLookupTables();
  
  
  return TCL_OK;
}
SWIGEXPORT int Li_std_vector_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

