/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGTCL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
  Tcl_HashTable       hashtable;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, TCL_GLOBAL_ONLY);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    Tcl_HashEntry* hashentry;
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    hashentry = Tcl_FindHashEntry(&(cls->hashtable), method);
    if (hashentry) {
        ClientData cd = Tcl_GetHashValue(hashentry);
        swig_wrapper method_wrapper = (swig_wrapper)cd;
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (method_wrapper)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if (thisvalue && (type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Concrete swig_types[0]
#define SWIGTYPE_p_FiveParmT_bool_int_int_double_short_t swig_types[1]
#define SWIGTYPE_p_One__OneParmT_bool_p_t swig_types[2]
#define SWIGTYPE_p_One__OneParmT_char_p_t swig_types[3]
#define SWIGTYPE_p_One__OneParmT_double_R_t swig_types[4]
#define SWIGTYPE_p_One__OneParmT_double_const_R_t swig_types[5]
#define SWIGTYPE_p_One__OneParmT_double_p_t swig_types[6]
#define SWIGTYPE_p_One__OneParmT_double_pconst_R_t swig_types[7]
#define SWIGTYPE_p_One__OneParmT_double_t swig_types[8]
#define SWIGTYPE_p_One__OneParmT_float_p_t swig_types[9]
#define SWIGTYPE_p_One__OneParmT_float_pp_t swig_types[10]
#define SWIGTYPE_p_One__OneParmT_float_ppp_t swig_types[11]
#define SWIGTYPE_p_One__OneParmT_float_t swig_types[12]
#define SWIGTYPE_p_One__OneParmT_int_pconst_R_t swig_types[13]
#define SWIGTYPE_p_One__OneParmT_int_pp_t swig_types[14]
#define SWIGTYPE_p_One__OneParmT_int_t swig_types[15]
#define SWIGTYPE_p_One__OneParmT_long_p_t swig_types[16]
#define SWIGTYPE_p_One__OneParmT_short_p_t swig_types[17]
#define SWIGTYPE_p_One__OneParmT_unsigned_int_const_p_t swig_types[18]
#define SWIGTYPE_p_One__OneParmT_unsigned_int_const_pp_t swig_types[19]
#define SWIGTYPE_p_One__OneParmT_unsigned_int_pp_t swig_types[20]
#define SWIGTYPE_p_One__OneParmT_unsigned_int_ppp_t swig_types[21]
#define SWIGTYPE_p_ThreeParmT_int_0_0_t swig_types[22]
#define SWIGTYPE_p_Two__TwoParmT_Concrete_Concrete_p_t swig_types[23]
#define SWIGTYPE_p_Two__TwoParmT_Concrete_p_Concrete_const_p_t swig_types[24]
#define SWIGTYPE_p_Two__TwoParmT_char_p_Concrete_p_t swig_types[25]
#define SWIGTYPE_p_Two__TwoParmT_double_double_t swig_types[26]
#define SWIGTYPE_p_Two__TwoParmT_double_p_Concrete_const_p_t swig_types[27]
#define SWIGTYPE_p_Two__TwoParmT_double_p_double_const_p_t swig_types[28]
#define SWIGTYPE_p_Two__TwoParmT_double_p_double_p_t swig_types[29]
#define SWIGTYPE_p_Two__TwoParmT_int_const_p_int_const_p_t swig_types[30]
#define SWIGTYPE_p_Two__TwoParmT_int_const_p_int_p_t swig_types[31]
#define SWIGTYPE_p_Two__TwoParmT_int_p_Concrete_const_p_t swig_types[32]
#define SWIGTYPE_p_Two__TwoParmT_int_p_int_const_p_t swig_types[33]
#define SWIGTYPE_p_Two__TwoParmT_int_p_int_p_t swig_types[34]
#define SWIGTYPE_p_Two__TwoParmT_int_p_int_t swig_types[35]
#define SWIGTYPE_p_Two__TwoParmT_int_pp_int_p_t swig_types[36]
#define SWIGTYPE_p_Two__TwoParmT_void_p_Concrete_const_p_t swig_types[37]
#define SWIGTYPE_p_char swig_types[38]
static swig_type_info *swig_types[40];
static swig_module_info swig_module = {swig_types, 39, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Template_partial_specialization_Init
#define SWIG_name    "template_partial_specialization"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x020010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif

/* Compatibility version for TCL stubs */
#ifndef SWIG_TCL_STUBS_VERSION
#define SWIG_TCL_STUBS_VERSION "8.1"
#endif



namespace One {
  template <typename T> struct OneParm                  { void a() {} };
  template <typename T> struct OneParm<T *>             { void b() {} };
  template <typename T> struct OneParm<T &>             { void c() {} };
  template <typename T> struct OneParm<T const &>       { void d() {} };
  template <typename T> struct OneParm<T * const &>     { void e() {} };

  template <>           struct OneParm<int>             { void f() {} };
  template <>           struct OneParm<int * const &>   { void g() {} };
  template <>           struct OneParm<int **>          { void h() {} };

  template <>           struct OneParm<float>           { void i() {} };
  template <>           struct OneParm<float *>         { void j() {} };
  template <>           struct OneParm<float **>        { void k() {} };
  template <>           struct OneParm<float ***>       { void l() {} };
}


struct Concrete {};
namespace Two {
  template <typename T1, typename T2> struct TwoParm                          { void a() {} };
  template <typename T1, typename T2> struct TwoParm<T1 *, T2 *>              { void b() {} };
  template <typename T1, typename T2> struct TwoParm<T1 *, const T2 *>        { void c() {} };
  template <typename T1, typename T2> struct TwoParm<const T1 *, const T2 *>  { void d() {} };
  template <typename T1>              struct TwoParm<T1 *, int *>             { void e() {} };
  template <typename T1>              struct TwoParm<T1, int>                 { void f() {} };
  template <>                         struct TwoParm<int *, const int *>      { void g() {} };
  template <>                         struct TwoParm<Concrete, Concrete *>    { void h() {} };
}


template <typename T1, typename T2, typename T3, typename T4, typename T5> struct FiveParm                               { void a() {} };
template <typename T1>                                                     struct FiveParm<T1, int, int, double, short>  { void b() {} };


template <typename T, int N = 0, int M = 0> struct ThreeParm;
template <typename T, int N, int M>         struct ThreeParm          { void a1() {} };
template <typename T>                       struct ThreeParm<T, 0, 0> { void a2() {} };
template <typename T, int N>                struct ThreeParm<T, N, N> { void a3() {} };

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int
_wrap_A_a(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double > *arg1 = (One::OneParm< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:A_a self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "A_a" "', argument " "1"" of type '" "One::OneParm< double > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< double > * >(argp1);
  (arg1)->a();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_A(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_A ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< double > *)new One::OneParm< double >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_A(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double > *arg1 = (One::OneParm< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_A self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_A" "', argument " "1"" of type '" "One::OneParm< double > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< double > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_A(void *obj) {
One::OneParm< double > *arg1 = (One::OneParm< double > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_double_Sg__methods[] = {
    {"a", _wrap_A_a}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_double_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_double_Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_double_Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_double_Sg_ = { "A", &SWIGTYPE_p_One__OneParmT_double_t,_wrap_new_A, swig_delete_A, swig_One_OneParm_Sl_double_Sg__methods, swig_One_OneParm_Sl_double_Sg__attributes, swig_One_OneParm_Sl_double_Sg__bases,swig_One_OneParm_Sl_double_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_B_b(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double * > *arg1 = (One::OneParm< double * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:B_b self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_double_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "B_b" "', argument " "1"" of type '" "One::OneParm< double * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< double * > * >(argp1);
  (arg1)->b();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_B(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_B ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< double * > *)new One::OneParm< double * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_double_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_B(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double * > *arg1 = (One::OneParm< double * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_B self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_double_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_B" "', argument " "1"" of type '" "One::OneParm< double * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< double * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_B(void *obj) {
One::OneParm< double * > *arg1 = (One::OneParm< double * > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_double_Sm__Sg__methods[] = {
    {"b", _wrap_B_b}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_double_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_double_Sm__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_double_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_double_Sm__Sg_ = { "B", &SWIGTYPE_p_One__OneParmT_double_p_t,_wrap_new_B, swig_delete_B, swig_One_OneParm_Sl_double_Sm__Sg__methods, swig_One_OneParm_Sl_double_Sm__Sg__attributes, swig_One_OneParm_Sl_double_Sm__Sg__bases,swig_One_OneParm_Sl_double_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_C_c(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double & > *arg1 = (One::OneParm< double & > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:C_c self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_double_R_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C_c" "', argument " "1"" of type '" "One::OneParm< double & > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< double & > * >(argp1);
  (arg1)->c();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_C(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double & > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_C ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< double & > *)new One::OneParm< double & >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_double_R_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_C(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double & > *arg1 = (One::OneParm< double & > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_C self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_double_R_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_C" "', argument " "1"" of type '" "One::OneParm< double & > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< double & > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_C(void *obj) {
One::OneParm< double & > *arg1 = (One::OneParm< double & > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_double_SA__Sg__methods[] = {
    {"c", _wrap_C_c}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_double_SA__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_double_SA__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_double_SA__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_double_SA__Sg_ = { "C", &SWIGTYPE_p_One__OneParmT_double_R_t,_wrap_new_C, swig_delete_C, swig_One_OneParm_Sl_double_SA__Sg__methods, swig_One_OneParm_Sl_double_SA__Sg__attributes, swig_One_OneParm_Sl_double_SA__Sg__bases,swig_One_OneParm_Sl_double_SA__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_D_d(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double const & > *arg1 = (One::OneParm< double const & > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:D_d self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_double_const_R_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D_d" "', argument " "1"" of type '" "One::OneParm< double const & > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< double const & > * >(argp1);
  (arg1)->d();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_D(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double const & > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_D ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< double const & > *)new One::OneParm< double const & >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_double_const_R_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_D(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double const & > *arg1 = (One::OneParm< double const & > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_D self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_double_const_R_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_D" "', argument " "1"" of type '" "One::OneParm< double const & > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< double const & > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_D(void *obj) {
One::OneParm< double const & > *arg1 = (One::OneParm< double const & > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_double_SS_const_SA__Sg__methods[] = {
    {"d", _wrap_D_d}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_double_SS_const_SA__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_double_SS_const_SA__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_double_SS_const_SA__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_double_SS_const_SA__Sg_ = { "D", &SWIGTYPE_p_One__OneParmT_double_const_R_t,_wrap_new_D, swig_delete_D, swig_One_OneParm_Sl_double_SS_const_SA__Sg__methods, swig_One_OneParm_Sl_double_SS_const_SA__Sg__attributes, swig_One_OneParm_Sl_double_SS_const_SA__Sg__bases,swig_One_OneParm_Sl_double_SS_const_SA__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_E_e(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double *const & > *arg1 = (One::OneParm< double *const & > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:E_e self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_double_pconst_R_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "E_e" "', argument " "1"" of type '" "One::OneParm< double *const & > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< double *const & > * >(argp1);
  (arg1)->e();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_E(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double *const & > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_E ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< double *const & > *)new One::OneParm< double *const & >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_double_pconst_R_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_E(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< double *const & > *arg1 = (One::OneParm< double *const & > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_E self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_double_pconst_R_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_E" "', argument " "1"" of type '" "One::OneParm< double *const & > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< double *const & > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_E(void *obj) {
One::OneParm< double *const & > *arg1 = (One::OneParm< double *const & > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_double_Sm_const_SA__Sg__methods[] = {
    {"e", _wrap_E_e}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_double_Sm_const_SA__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_double_Sm_const_SA__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_double_Sm_const_SA__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_double_Sm_const_SA__Sg_ = { "E", &SWIGTYPE_p_One__OneParmT_double_pconst_R_t,_wrap_new_E, swig_delete_E, swig_One_OneParm_Sl_double_Sm_const_SA__Sg__methods, swig_One_OneParm_Sl_double_Sm_const_SA__Sg__attributes, swig_One_OneParm_Sl_double_Sm_const_SA__Sg__bases,swig_One_OneParm_Sl_double_Sm_const_SA__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_F_f(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< int > *arg1 = (One::OneParm< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:F_f self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "F_f" "', argument " "1"" of type '" "One::OneParm< int > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< int > * >(argp1);
  (arg1)->f();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_F(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_F ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< int > *)new One::OneParm< int >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_F(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< int > *arg1 = (One::OneParm< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_F self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_F" "', argument " "1"" of type '" "One::OneParm< int > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< int > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_F(void *obj) {
One::OneParm< int > *arg1 = (One::OneParm< int > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_int_Sg__methods[] = {
    {"f", _wrap_F_f}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_int_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_int_Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_int_Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_int_Sg_ = { "F", &SWIGTYPE_p_One__OneParmT_int_t,_wrap_new_F, swig_delete_F, swig_One_OneParm_Sl_int_Sg__methods, swig_One_OneParm_Sl_int_Sg__attributes, swig_One_OneParm_Sl_int_Sg__bases,swig_One_OneParm_Sl_int_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_G_g(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< int *const & > *arg1 = (One::OneParm< int *const & > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:G_g self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_int_pconst_R_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "G_g" "', argument " "1"" of type '" "One::OneParm< int *const & > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< int *const & > * >(argp1);
  (arg1)->g();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_G(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< int *const & > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_G ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< int *const & > *)new One::OneParm< int *const & >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_int_pconst_R_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_G(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< int *const & > *arg1 = (One::OneParm< int *const & > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_G self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_int_pconst_R_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_G" "', argument " "1"" of type '" "One::OneParm< int *const & > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< int *const & > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_G(void *obj) {
One::OneParm< int *const & > *arg1 = (One::OneParm< int *const & > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_int_Sm_const_SA__Sg__methods[] = {
    {"g", _wrap_G_g}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_int_Sm_const_SA__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_int_Sm_const_SA__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_int_Sm_const_SA__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_int_Sm_const_SA__Sg_ = { "G", &SWIGTYPE_p_One__OneParmT_int_pconst_R_t,_wrap_new_G, swig_delete_G, swig_One_OneParm_Sl_int_Sm_const_SA__Sg__methods, swig_One_OneParm_Sl_int_Sm_const_SA__Sg__attributes, swig_One_OneParm_Sl_int_Sm_const_SA__Sg__bases,swig_One_OneParm_Sl_int_Sm_const_SA__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_H_h(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< int ** > *arg1 = (One::OneParm< int ** > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:H_h self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_int_pp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "H_h" "', argument " "1"" of type '" "One::OneParm< int ** > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< int ** > * >(argp1);
  (arg1)->h();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_H(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< int ** > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_H ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< int ** > *)new One::OneParm< int ** >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_int_pp_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_H(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< int ** > *arg1 = (One::OneParm< int ** > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_H self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_int_pp_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_H" "', argument " "1"" of type '" "One::OneParm< int ** > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< int ** > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_H(void *obj) {
One::OneParm< int ** > *arg1 = (One::OneParm< int ** > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_int_Sm__Sm__Sg__methods[] = {
    {"h", _wrap_H_h}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_int_Sm__Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_int_Sm__Sm__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_int_Sm__Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_int_Sm__Sm__Sg_ = { "H", &SWIGTYPE_p_One__OneParmT_int_pp_t,_wrap_new_H, swig_delete_H, swig_One_OneParm_Sl_int_Sm__Sm__Sg__methods, swig_One_OneParm_Sl_int_Sm__Sm__Sg__attributes, swig_One_OneParm_Sl_int_Sm__Sm__Sg__bases,swig_One_OneParm_Sl_int_Sm__Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_I_i(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< float > *arg1 = (One::OneParm< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:I_i self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "I_i" "', argument " "1"" of type '" "One::OneParm< float > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< float > * >(argp1);
  (arg1)->i();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_I(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< float > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_I ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< float > *)new One::OneParm< float >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_float_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_I(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< float > *arg1 = (One::OneParm< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_I self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_I" "', argument " "1"" of type '" "One::OneParm< float > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< float > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_I(void *obj) {
One::OneParm< float > *arg1 = (One::OneParm< float > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_float_Sg__methods[] = {
    {"i", _wrap_I_i}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_float_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_float_Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_float_Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_float_Sg_ = { "I", &SWIGTYPE_p_One__OneParmT_float_t,_wrap_new_I, swig_delete_I, swig_One_OneParm_Sl_float_Sg__methods, swig_One_OneParm_Sl_float_Sg__attributes, swig_One_OneParm_Sl_float_Sg__bases,swig_One_OneParm_Sl_float_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_J_j(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< float * > *arg1 = (One::OneParm< float * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:J_j self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_float_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "J_j" "', argument " "1"" of type '" "One::OneParm< float * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< float * > * >(argp1);
  (arg1)->j();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_J(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< float * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_J ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< float * > *)new One::OneParm< float * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_float_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_J(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< float * > *arg1 = (One::OneParm< float * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_J self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_float_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_J" "', argument " "1"" of type '" "One::OneParm< float * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< float * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_J(void *obj) {
One::OneParm< float * > *arg1 = (One::OneParm< float * > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_float_Sm__Sg__methods[] = {
    {"j", _wrap_J_j}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_float_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_float_Sm__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_float_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_float_Sm__Sg_ = { "J", &SWIGTYPE_p_One__OneParmT_float_p_t,_wrap_new_J, swig_delete_J, swig_One_OneParm_Sl_float_Sm__Sg__methods, swig_One_OneParm_Sl_float_Sm__Sg__attributes, swig_One_OneParm_Sl_float_Sm__Sg__bases,swig_One_OneParm_Sl_float_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_K_k(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< float ** > *arg1 = (One::OneParm< float ** > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:K_k self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_float_pp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "K_k" "', argument " "1"" of type '" "One::OneParm< float ** > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< float ** > * >(argp1);
  (arg1)->k();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_K(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< float ** > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_K ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< float ** > *)new One::OneParm< float ** >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_float_pp_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_K(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< float ** > *arg1 = (One::OneParm< float ** > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_K self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_float_pp_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_K" "', argument " "1"" of type '" "One::OneParm< float ** > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< float ** > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_K(void *obj) {
One::OneParm< float ** > *arg1 = (One::OneParm< float ** > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_float_Sm__Sm__Sg__methods[] = {
    {"k", _wrap_K_k}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_float_Sm__Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_float_Sm__Sm__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_float_Sm__Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_float_Sm__Sm__Sg_ = { "K", &SWIGTYPE_p_One__OneParmT_float_pp_t,_wrap_new_K, swig_delete_K, swig_One_OneParm_Sl_float_Sm__Sm__Sg__methods, swig_One_OneParm_Sl_float_Sm__Sm__Sg__attributes, swig_One_OneParm_Sl_float_Sm__Sm__Sg__bases,swig_One_OneParm_Sl_float_Sm__Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_L_l(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< float *** > *arg1 = (One::OneParm< float *** > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:L_l self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_float_ppp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "L_l" "', argument " "1"" of type '" "One::OneParm< float *** > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< float *** > * >(argp1);
  (arg1)->l();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_L(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< float *** > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_L ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< float *** > *)new One::OneParm< float *** >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_float_ppp_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_L(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< float *** > *arg1 = (One::OneParm< float *** > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_L self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_float_ppp_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_L" "', argument " "1"" of type '" "One::OneParm< float *** > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< float *** > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_L(void *obj) {
One::OneParm< float *** > *arg1 = (One::OneParm< float *** > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_float_Sm__Sm__Sm__Sg__methods[] = {
    {"l", _wrap_L_l}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_float_Sm__Sm__Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_float_Sm__Sm__Sm__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_float_Sm__Sm__Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_float_Sm__Sm__Sm__Sg_ = { "L", &SWIGTYPE_p_One__OneParmT_float_ppp_t,_wrap_new_L, swig_delete_L, swig_One_OneParm_Sl_float_Sm__Sm__Sm__Sg__methods, swig_One_OneParm_Sl_float_Sm__Sm__Sm__Sg__attributes, swig_One_OneParm_Sl_float_Sm__Sm__Sm__Sg__bases,swig_One_OneParm_Sl_float_Sm__Sm__Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_BB_b(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< bool * > *arg1 = (One::OneParm< bool * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:BB_b self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_bool_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BB_b" "', argument " "1"" of type '" "One::OneParm< bool * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< bool * > * >(argp1);
  (arg1)->b();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_BB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< bool * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_BB ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< bool * > *)new One::OneParm< bool * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_bool_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_BB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< bool * > *arg1 = (One::OneParm< bool * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_BB self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_bool_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BB" "', argument " "1"" of type '" "One::OneParm< bool * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< bool * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_BB(void *obj) {
One::OneParm< bool * > *arg1 = (One::OneParm< bool * > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_bool_Sm__Sg__methods[] = {
    {"b", _wrap_BB_b}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_bool_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_bool_Sm__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_bool_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_bool_Sm__Sg_ = { "BB", &SWIGTYPE_p_One__OneParmT_bool_p_t,_wrap_new_BB, swig_delete_BB, swig_One_OneParm_Sl_bool_Sm__Sg__methods, swig_One_OneParm_Sl_bool_Sm__Sg__attributes, swig_One_OneParm_Sl_bool_Sm__Sg__bases,swig_One_OneParm_Sl_bool_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_BBB_b(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< char * > *arg1 = (One::OneParm< char * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:BBB_b self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_char_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BBB_b" "', argument " "1"" of type '" "One::OneParm< char * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< char * > * >(argp1);
  (arg1)->b();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_BBB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< char * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_BBB ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< char * > *)new One::OneParm< char * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_char_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_BBB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< char * > *arg1 = (One::OneParm< char * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_BBB self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_char_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BBB" "', argument " "1"" of type '" "One::OneParm< char * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< char * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_BBB(void *obj) {
One::OneParm< char * > *arg1 = (One::OneParm< char * > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_char_Sm__Sg__methods[] = {
    {"b", _wrap_BBB_b}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_char_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_char_Sm__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_char_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_char_Sm__Sg_ = { "BBB", &SWIGTYPE_p_One__OneParmT_char_p_t,_wrap_new_BBB, swig_delete_BBB, swig_One_OneParm_Sl_char_Sm__Sg__methods, swig_One_OneParm_Sl_char_Sm__Sg__attributes, swig_One_OneParm_Sl_char_Sm__Sg__bases,swig_One_OneParm_Sl_char_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_BBBB_b(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< short * > *arg1 = (One::OneParm< short * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:BBBB_b self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_short_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BBBB_b" "', argument " "1"" of type '" "One::OneParm< short * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< short * > * >(argp1);
  (arg1)->b();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_BBBB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< short * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_BBBB ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< short * > *)new One::OneParm< short * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_short_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_BBBB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< short * > *arg1 = (One::OneParm< short * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_BBBB self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_short_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BBBB" "', argument " "1"" of type '" "One::OneParm< short * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< short * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_BBBB(void *obj) {
One::OneParm< short * > *arg1 = (One::OneParm< short * > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_short_Sm__Sg__methods[] = {
    {"b", _wrap_BBBB_b}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_short_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_short_Sm__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_short_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_short_Sm__Sg_ = { "BBBB", &SWIGTYPE_p_One__OneParmT_short_p_t,_wrap_new_BBBB, swig_delete_BBBB, swig_One_OneParm_Sl_short_Sm__Sg__methods, swig_One_OneParm_Sl_short_Sm__Sg__attributes, swig_One_OneParm_Sl_short_Sm__Sg__bases,swig_One_OneParm_Sl_short_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_BBBBB_b(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< long * > *arg1 = (One::OneParm< long * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:BBBBB_b self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_long_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BBBBB_b" "', argument " "1"" of type '" "One::OneParm< long * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< long * > * >(argp1);
  (arg1)->b();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_BBBBB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< long * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_BBBBB ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< long * > *)new One::OneParm< long * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_long_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_BBBBB(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< long * > *arg1 = (One::OneParm< long * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_BBBBB self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_long_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BBBBB" "', argument " "1"" of type '" "One::OneParm< long * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< long * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_BBBBB(void *obj) {
One::OneParm< long * > *arg1 = (One::OneParm< long * > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_long_Sm__Sg__methods[] = {
    {"b", _wrap_BBBBB_b}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_long_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_long_Sm__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_long_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_long_Sm__Sg_ = { "BBBBB", &SWIGTYPE_p_One__OneParmT_long_p_t,_wrap_new_BBBBB, swig_delete_BBBBB, swig_One_OneParm_Sl_long_Sm__Sg__methods, swig_One_OneParm_Sl_long_Sm__Sg__attributes, swig_One_OneParm_Sl_long_Sm__Sg__bases,swig_One_OneParm_Sl_long_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_B1_b(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< unsigned int ** > *arg1 = (One::OneParm< unsigned int ** > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:B1_b self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_unsigned_int_pp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "B1_b" "', argument " "1"" of type '" "One::OneParm< unsigned int ** > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< unsigned int ** > * >(argp1);
  (arg1)->b();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_B1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< unsigned int ** > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_B1 ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< unsigned int ** > *)new One::OneParm< unsigned int ** >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_unsigned_int_pp_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_B1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< unsigned int ** > *arg1 = (One::OneParm< unsigned int ** > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_B1 self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_unsigned_int_pp_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_B1" "', argument " "1"" of type '" "One::OneParm< unsigned int ** > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< unsigned int ** > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_B1(void *obj) {
One::OneParm< unsigned int ** > *arg1 = (One::OneParm< unsigned int ** > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sg__methods[] = {
    {"b", _wrap_B1_b}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sg_ = { "B1", &SWIGTYPE_p_One__OneParmT_unsigned_int_pp_t,_wrap_new_B1, swig_delete_B1, swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sg__methods, swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sg__attributes, swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sg__bases,swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_B2_b(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< unsigned int *** > *arg1 = (One::OneParm< unsigned int *** > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:B2_b self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_unsigned_int_ppp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "B2_b" "', argument " "1"" of type '" "One::OneParm< unsigned int *** > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< unsigned int *** > * >(argp1);
  (arg1)->b();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_B2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< unsigned int *** > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_B2 ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< unsigned int *** > *)new One::OneParm< unsigned int *** >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_unsigned_int_ppp_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_B2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< unsigned int *** > *arg1 = (One::OneParm< unsigned int *** > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_B2 self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_unsigned_int_ppp_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_B2" "', argument " "1"" of type '" "One::OneParm< unsigned int *** > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< unsigned int *** > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_B2(void *obj) {
One::OneParm< unsigned int *** > *arg1 = (One::OneParm< unsigned int *** > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sm__Sg__methods[] = {
    {"b", _wrap_B2_b}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sm__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sm__Sg_ = { "B2", &SWIGTYPE_p_One__OneParmT_unsigned_int_ppp_t,_wrap_new_B2, swig_delete_B2, swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sm__Sg__methods, swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sm__Sg__attributes, swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sm__Sg__bases,swig_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_B3_b(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< unsigned int const * > *arg1 = (One::OneParm< unsigned int const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:B3_b self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_unsigned_int_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "B3_b" "', argument " "1"" of type '" "One::OneParm< unsigned int const * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< unsigned int const * > * >(argp1);
  (arg1)->b();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_B3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< unsigned int const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_B3 ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< unsigned int const * > *)new One::OneParm< unsigned int const * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_unsigned_int_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_B3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< unsigned int const * > *arg1 = (One::OneParm< unsigned int const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_B3 self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_unsigned_int_const_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_B3" "', argument " "1"" of type '" "One::OneParm< unsigned int const * > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< unsigned int const * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_B3(void *obj) {
One::OneParm< unsigned int const * > *arg1 = (One::OneParm< unsigned int const * > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sg__methods[] = {
    {"b", _wrap_B3_b}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sg_ = { "B3", &SWIGTYPE_p_One__OneParmT_unsigned_int_const_p_t,_wrap_new_B3, swig_delete_B3, swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sg__methods, swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sg__attributes, swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sg__bases,swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_B4_b(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< unsigned int const ** > *arg1 = (One::OneParm< unsigned int const ** > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:B4_b self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_unsigned_int_const_pp_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "B4_b" "', argument " "1"" of type '" "One::OneParm< unsigned int const ** > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< unsigned int const ** > * >(argp1);
  (arg1)->b();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_B4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< unsigned int const ** > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_B4 ") == TCL_ERROR) SWIG_fail;
  result = (One::OneParm< unsigned int const ** > *)new One::OneParm< unsigned int const ** >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_One__OneParmT_unsigned_int_const_pp_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_B4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  One::OneParm< unsigned int const ** > *arg1 = (One::OneParm< unsigned int const ** > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_B4 self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_One__OneParmT_unsigned_int_const_pp_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_B4" "', argument " "1"" of type '" "One::OneParm< unsigned int const ** > *""'"); 
  }
  arg1 = reinterpret_cast< One::OneParm< unsigned int const ** > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_B4(void *obj) {
One::OneParm< unsigned int const ** > *arg1 = (One::OneParm< unsigned int const ** > *) obj;
delete arg1;
}
static swig_method swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sm__Sg__methods[] = {
    {"b", _wrap_B4_b}, 
    {0,0}
};
static swig_attribute swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sm__Sg__bases[] = {0};
static const char * swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sm__Sg_ = { "B4", &SWIGTYPE_p_One__OneParmT_unsigned_int_const_pp_t,_wrap_new_B4, swig_delete_B4, swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sm__Sg__methods, swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sm__Sg__attributes, swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sm__Sg__bases,swig_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_Concrete(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Concrete *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Concrete ") == TCL_ERROR) SWIG_fail;
  result = (Concrete *)new Concrete();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Concrete,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Concrete(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Concrete *arg1 = (Concrete *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Concrete self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Concrete, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Concrete" "', argument " "1"" of type '" "Concrete *""'"); 
  }
  arg1 = reinterpret_cast< Concrete * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Concrete(void *obj) {
Concrete *arg1 = (Concrete *) obj;
delete arg1;
}
static swig_method swig_Concrete_methods[] = {
    {0,0}
};
static swig_attribute swig_Concrete_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Concrete_bases[] = {0};
static const char * swig_Concrete_base_names[] = {0};
static swig_class _wrap_class_Concrete = { "Concrete", &SWIGTYPE_p_Concrete,_wrap_new_Concrete, swig_delete_Concrete, swig_Concrete_methods, swig_Concrete_attributes, swig_Concrete_bases,swig_Concrete_base_names, &swig_module };
SWIGINTERN int
_wrap_A__a(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< double,double > *arg1 = (Two::TwoParm< double,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:A__a self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_double_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "A__a" "', argument " "1"" of type '" "Two::TwoParm< double,double > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< double,double > * >(argp1);
  (arg1)->a();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_A_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< double,double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_A_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< double,double > *)new Two::TwoParm< double,double >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_double_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_A_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< double,double > *arg1 = (Two::TwoParm< double,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_A_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_double_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_A_" "', argument " "1"" of type '" "Two::TwoParm< double,double > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< double,double > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_A_(void *obj) {
Two::TwoParm< double,double > *arg1 = (Two::TwoParm< double,double > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_double_Sc_double_Sg__methods[] = {
    {"a", _wrap_A__a}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_double_Sc_double_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_double_Sc_double_Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_double_Sc_double_Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_double_Sc_double_Sg_ = { "A_", &SWIGTYPE_p_Two__TwoParmT_double_double_t,_wrap_new_A_, swig_delete_A_, swig_Two_TwoParm_Sl_double_Sc_double_Sg__methods, swig_Two_TwoParm_Sl_double_Sc_double_Sg__attributes, swig_Two_TwoParm_Sl_double_Sc_double_Sg__bases,swig_Two_TwoParm_Sl_double_Sc_double_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_B__b(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< double *,double * > *arg1 = (Two::TwoParm< double *,double * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:B__b self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_double_p_double_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "B__b" "', argument " "1"" of type '" "Two::TwoParm< double *,double * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< double *,double * > * >(argp1);
  (arg1)->b();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_B_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< double *,double * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_B_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< double *,double * > *)new Two::TwoParm< double *,double * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_double_p_double_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_B_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< double *,double * > *arg1 = (Two::TwoParm< double *,double * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_B_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_double_p_double_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_B_" "', argument " "1"" of type '" "Two::TwoParm< double *,double * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< double *,double * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_B_(void *obj) {
Two::TwoParm< double *,double * > *arg1 = (Two::TwoParm< double *,double * > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_double_Sm__Sc_double_Sm__Sg__methods[] = {
    {"b", _wrap_B__b}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_double_Sm__Sc_double_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_double_Sm__Sc_double_Sm__Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_double_Sm__Sc_double_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_double_Sm__Sc_double_Sm__Sg_ = { "B_", &SWIGTYPE_p_Two__TwoParmT_double_p_double_p_t,_wrap_new_B_, swig_delete_B_, swig_Two_TwoParm_Sl_double_Sm__Sc_double_Sm__Sg__methods, swig_Two_TwoParm_Sl_double_Sm__Sc_double_Sm__Sg__attributes, swig_Two_TwoParm_Sl_double_Sm__Sc_double_Sm__Sg__bases,swig_Two_TwoParm_Sl_double_Sm__Sc_double_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_C__c(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< double *,double const * > *arg1 = (Two::TwoParm< double *,double const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:C__c self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_double_p_double_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C__c" "', argument " "1"" of type '" "Two::TwoParm< double *,double const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< double *,double const * > * >(argp1);
  (arg1)->c();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_C_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< double *,double const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_C_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< double *,double const * > *)new Two::TwoParm< double *,double const * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_double_p_double_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_C_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< double *,double const * > *arg1 = (Two::TwoParm< double *,double const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_C_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_double_p_double_const_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_C_" "', argument " "1"" of type '" "Two::TwoParm< double *,double const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< double *,double const * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_C_(void *obj) {
Two::TwoParm< double *,double const * > *arg1 = (Two::TwoParm< double *,double const * > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_double_Sm__Sc_double_SS_const_Sm__Sg__methods[] = {
    {"c", _wrap_C__c}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_double_Sm__Sc_double_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_double_Sm__Sc_double_SS_const_Sm__Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_double_Sm__Sc_double_SS_const_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_double_Sm__Sc_double_SS_const_Sm__Sg_ = { "C_", &SWIGTYPE_p_Two__TwoParmT_double_p_double_const_p_t,_wrap_new_C_, swig_delete_C_, swig_Two_TwoParm_Sl_double_Sm__Sc_double_SS_const_Sm__Sg__methods, swig_Two_TwoParm_Sl_double_Sm__Sc_double_SS_const_Sm__Sg__attributes, swig_Two_TwoParm_Sl_double_Sm__Sc_double_SS_const_Sm__Sg__bases,swig_Two_TwoParm_Sl_double_Sm__Sc_double_SS_const_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_D__d(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int const *,int const * > *arg1 = (Two::TwoParm< int const *,int const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:D__d self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_const_p_int_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "D__d" "', argument " "1"" of type '" "Two::TwoParm< int const *,int const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int const *,int const * > * >(argp1);
  (arg1)->d();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_D_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int const *,int const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_D_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< int const *,int const * > *)new Two::TwoParm< int const *,int const * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_int_const_p_int_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_D_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int const *,int const * > *arg1 = (Two::TwoParm< int const *,int const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_D_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_const_p_int_const_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_D_" "', argument " "1"" of type '" "Two::TwoParm< int const *,int const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int const *,int const * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_D_(void *obj) {
Two::TwoParm< int const *,int const * > *arg1 = (Two::TwoParm< int const *,int const * > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_SS_const_Sm__Sg__methods[] = {
    {"d", _wrap_D__d}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_SS_const_Sm__Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_SS_const_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_SS_const_Sm__Sg_ = { "D_", &SWIGTYPE_p_Two__TwoParmT_int_const_p_int_const_p_t,_wrap_new_D_, swig_delete_D_, swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_SS_const_Sm__Sg__methods, swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_SS_const_Sm__Sg__attributes, swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_SS_const_Sm__Sg__bases,swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_SS_const_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_E__e(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int *,int * > *arg1 = (Two::TwoParm< int *,int * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:E__e self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_p_int_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "E__e" "', argument " "1"" of type '" "Two::TwoParm< int *,int * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int *,int * > * >(argp1);
  (arg1)->e();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_E_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int *,int * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_E_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< int *,int * > *)new Two::TwoParm< int *,int * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_int_p_int_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_E_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int *,int * > *arg1 = (Two::TwoParm< int *,int * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_E_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_p_int_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_E_" "', argument " "1"" of type '" "Two::TwoParm< int *,int * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int *,int * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_E_(void *obj) {
Two::TwoParm< int *,int * > *arg1 = (Two::TwoParm< int *,int * > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sm__Sg__methods[] = {
    {"e", _wrap_E__e}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sm__Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_int_Sm__Sc_int_Sm__Sg_ = { "E_", &SWIGTYPE_p_Two__TwoParmT_int_p_int_p_t,_wrap_new_E_, swig_delete_E_, swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sm__Sg__methods, swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sm__Sg__attributes, swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sm__Sg__bases,swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_F__f(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int *,int > *arg1 = (Two::TwoParm< int *,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:F__f self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_p_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "F__f" "', argument " "1"" of type '" "Two::TwoParm< int *,int > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int *,int > * >(argp1);
  (arg1)->f();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_F_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int *,int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_F_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< int *,int > *)new Two::TwoParm< int *,int >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_int_p_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_F_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int *,int > *arg1 = (Two::TwoParm< int *,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_F_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_p_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_F_" "', argument " "1"" of type '" "Two::TwoParm< int *,int > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int *,int > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_F_(void *obj) {
Two::TwoParm< int *,int > *arg1 = (Two::TwoParm< int *,int > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sg__methods[] = {
    {"f", _wrap_F__f}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_int_Sm__Sc_int_Sg_ = { "F_", &SWIGTYPE_p_Two__TwoParmT_int_p_int_t,_wrap_new_F_, swig_delete_F_, swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sg__methods, swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sg__attributes, swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sg__bases,swig_Two_TwoParm_Sl_int_Sm__Sc_int_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_G__g(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int *,int const * > *arg1 = (Two::TwoParm< int *,int const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:G__g self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_p_int_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "G__g" "', argument " "1"" of type '" "Two::TwoParm< int *,int const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int *,int const * > * >(argp1);
  (arg1)->g();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_G_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int *,int const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_G_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< int *,int const * > *)new Two::TwoParm< int *,int const * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_int_p_int_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_G_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int *,int const * > *arg1 = (Two::TwoParm< int *,int const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_G_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_p_int_const_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_G_" "', argument " "1"" of type '" "Two::TwoParm< int *,int const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int *,int const * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_G_(void *obj) {
Two::TwoParm< int *,int const * > *arg1 = (Two::TwoParm< int *,int const * > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_int_Sm__Sc_int_SS_const_Sm__Sg__methods[] = {
    {"g", _wrap_G__g}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_int_Sm__Sc_int_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_int_Sm__Sc_int_SS_const_Sm__Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_int_Sm__Sc_int_SS_const_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_int_Sm__Sc_int_SS_const_Sm__Sg_ = { "G_", &SWIGTYPE_p_Two__TwoParmT_int_p_int_const_p_t,_wrap_new_G_, swig_delete_G_, swig_Two_TwoParm_Sl_int_Sm__Sc_int_SS_const_Sm__Sg__methods, swig_Two_TwoParm_Sl_int_Sm__Sc_int_SS_const_Sm__Sg__attributes, swig_Two_TwoParm_Sl_int_Sm__Sc_int_SS_const_Sm__Sg__bases,swig_Two_TwoParm_Sl_int_Sm__Sc_int_SS_const_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_C1__c(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< Concrete *,Concrete const * > *arg1 = (Two::TwoParm< Concrete *,Concrete const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:C1__c self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_Concrete_p_Concrete_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C1__c" "', argument " "1"" of type '" "Two::TwoParm< Concrete *,Concrete const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< Concrete *,Concrete const * > * >(argp1);
  (arg1)->c();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_C1_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< Concrete *,Concrete const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_C1_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< Concrete *,Concrete const * > *)new Two::TwoParm< Concrete *,Concrete const * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_Concrete_p_Concrete_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_C1_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< Concrete *,Concrete const * > *arg1 = (Two::TwoParm< Concrete *,Concrete const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_C1_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_Concrete_p_Concrete_const_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_C1_" "', argument " "1"" of type '" "Two::TwoParm< Concrete *,Concrete const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< Concrete *,Concrete const * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_C1_(void *obj) {
Two::TwoParm< Concrete *,Concrete const * > *arg1 = (Two::TwoParm< Concrete *,Concrete const * > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_Concrete_Sm__Sc_Concrete_SS_const_Sm__Sg__methods[] = {
    {"c", _wrap_C1__c}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_Concrete_Sm__Sc_Concrete_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_Concrete_Sm__Sc_Concrete_SS_const_Sm__Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_Concrete_Sm__Sc_Concrete_SS_const_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_Concrete_Sm__Sc_Concrete_SS_const_Sm__Sg_ = { "C1_", &SWIGTYPE_p_Two__TwoParmT_Concrete_p_Concrete_const_p_t,_wrap_new_C1_, swig_delete_C1_, swig_Two_TwoParm_Sl_Concrete_Sm__Sc_Concrete_SS_const_Sm__Sg__methods, swig_Two_TwoParm_Sl_Concrete_Sm__Sc_Concrete_SS_const_Sm__Sg__attributes, swig_Two_TwoParm_Sl_Concrete_Sm__Sc_Concrete_SS_const_Sm__Sg__bases,swig_Two_TwoParm_Sl_Concrete_Sm__Sc_Concrete_SS_const_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_C2__c(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int *,Concrete const * > *arg1 = (Two::TwoParm< int *,Concrete const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:C2__c self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_p_Concrete_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C2__c" "', argument " "1"" of type '" "Two::TwoParm< int *,Concrete const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int *,Concrete const * > * >(argp1);
  (arg1)->c();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_C2_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int *,Concrete const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_C2_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< int *,Concrete const * > *)new Two::TwoParm< int *,Concrete const * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_int_p_Concrete_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_C2_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int *,Concrete const * > *arg1 = (Two::TwoParm< int *,Concrete const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_C2_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_p_Concrete_const_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_C2_" "', argument " "1"" of type '" "Two::TwoParm< int *,Concrete const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int *,Concrete const * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_C2_(void *obj) {
Two::TwoParm< int *,Concrete const * > *arg1 = (Two::TwoParm< int *,Concrete const * > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_int_Sm__Sc_Concrete_SS_const_Sm__Sg__methods[] = {
    {"c", _wrap_C2__c}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_int_Sm__Sc_Concrete_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_int_Sm__Sc_Concrete_SS_const_Sm__Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_int_Sm__Sc_Concrete_SS_const_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_int_Sm__Sc_Concrete_SS_const_Sm__Sg_ = { "C2_", &SWIGTYPE_p_Two__TwoParmT_int_p_Concrete_const_p_t,_wrap_new_C2_, swig_delete_C2_, swig_Two_TwoParm_Sl_int_Sm__Sc_Concrete_SS_const_Sm__Sg__methods, swig_Two_TwoParm_Sl_int_Sm__Sc_Concrete_SS_const_Sm__Sg__attributes, swig_Two_TwoParm_Sl_int_Sm__Sc_Concrete_SS_const_Sm__Sg__bases,swig_Two_TwoParm_Sl_int_Sm__Sc_Concrete_SS_const_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_C3__c(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< double *,Concrete const * > *arg1 = (Two::TwoParm< double *,Concrete const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:C3__c self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_double_p_Concrete_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C3__c" "', argument " "1"" of type '" "Two::TwoParm< double *,Concrete const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< double *,Concrete const * > * >(argp1);
  (arg1)->c();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_C3_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< double *,Concrete const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_C3_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< double *,Concrete const * > *)new Two::TwoParm< double *,Concrete const * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_double_p_Concrete_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_C3_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< double *,Concrete const * > *arg1 = (Two::TwoParm< double *,Concrete const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_C3_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_double_p_Concrete_const_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_C3_" "', argument " "1"" of type '" "Two::TwoParm< double *,Concrete const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< double *,Concrete const * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_C3_(void *obj) {
Two::TwoParm< double *,Concrete const * > *arg1 = (Two::TwoParm< double *,Concrete const * > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_double_Sm__Sc_Concrete_SS_const_Sm__Sg__methods[] = {
    {"c", _wrap_C3__c}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_double_Sm__Sc_Concrete_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_double_Sm__Sc_Concrete_SS_const_Sm__Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_double_Sm__Sc_Concrete_SS_const_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_double_Sm__Sc_Concrete_SS_const_Sm__Sg_ = { "C3_", &SWIGTYPE_p_Two__TwoParmT_double_p_Concrete_const_p_t,_wrap_new_C3_, swig_delete_C3_, swig_Two_TwoParm_Sl_double_Sm__Sc_Concrete_SS_const_Sm__Sg__methods, swig_Two_TwoParm_Sl_double_Sm__Sc_Concrete_SS_const_Sm__Sg__attributes, swig_Two_TwoParm_Sl_double_Sm__Sc_Concrete_SS_const_Sm__Sg__bases,swig_Two_TwoParm_Sl_double_Sm__Sc_Concrete_SS_const_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_C4__c(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< void *,Concrete const * > *arg1 = (Two::TwoParm< void *,Concrete const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:C4__c self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_void_p_Concrete_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "C4__c" "', argument " "1"" of type '" "Two::TwoParm< void *,Concrete const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< void *,Concrete const * > * >(argp1);
  (arg1)->c();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_C4_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< void *,Concrete const * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_C4_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< void *,Concrete const * > *)new Two::TwoParm< void *,Concrete const * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_void_p_Concrete_const_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_C4_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< void *,Concrete const * > *arg1 = (Two::TwoParm< void *,Concrete const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_C4_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_void_p_Concrete_const_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_C4_" "', argument " "1"" of type '" "Two::TwoParm< void *,Concrete const * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< void *,Concrete const * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_C4_(void *obj) {
Two::TwoParm< void *,Concrete const * > *arg1 = (Two::TwoParm< void *,Concrete const * > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_void_Sm__Sc_Concrete_SS_const_Sm__Sg__methods[] = {
    {"c", _wrap_C4__c}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_void_Sm__Sc_Concrete_SS_const_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_void_Sm__Sc_Concrete_SS_const_Sm__Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_void_Sm__Sc_Concrete_SS_const_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_void_Sm__Sc_Concrete_SS_const_Sm__Sg_ = { "C4_", &SWIGTYPE_p_Two__TwoParmT_void_p_Concrete_const_p_t,_wrap_new_C4_, swig_delete_C4_, swig_Two_TwoParm_Sl_void_Sm__Sc_Concrete_SS_const_Sm__Sg__methods, swig_Two_TwoParm_Sl_void_Sm__Sc_Concrete_SS_const_Sm__Sg__attributes, swig_Two_TwoParm_Sl_void_Sm__Sc_Concrete_SS_const_Sm__Sg__bases,swig_Two_TwoParm_Sl_void_Sm__Sc_Concrete_SS_const_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_B1__b(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< char *,Concrete * > *arg1 = (Two::TwoParm< char *,Concrete * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:B1__b self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_char_p_Concrete_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "B1__b" "', argument " "1"" of type '" "Two::TwoParm< char *,Concrete * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< char *,Concrete * > * >(argp1);
  (arg1)->b();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_B1_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< char *,Concrete * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_B1_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< char *,Concrete * > *)new Two::TwoParm< char *,Concrete * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_char_p_Concrete_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_B1_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< char *,Concrete * > *arg1 = (Two::TwoParm< char *,Concrete * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_B1_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_char_p_Concrete_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_B1_" "', argument " "1"" of type '" "Two::TwoParm< char *,Concrete * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< char *,Concrete * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_B1_(void *obj) {
Two::TwoParm< char *,Concrete * > *arg1 = (Two::TwoParm< char *,Concrete * > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_char_Sm__Sc_Concrete_Sm__Sg__methods[] = {
    {"b", _wrap_B1__b}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_char_Sm__Sc_Concrete_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_char_Sm__Sc_Concrete_Sm__Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_char_Sm__Sc_Concrete_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_char_Sm__Sc_Concrete_Sm__Sg_ = { "B1_", &SWIGTYPE_p_Two__TwoParmT_char_p_Concrete_p_t,_wrap_new_B1_, swig_delete_B1_, swig_Two_TwoParm_Sl_char_Sm__Sc_Concrete_Sm__Sg__methods, swig_Two_TwoParm_Sl_char_Sm__Sc_Concrete_Sm__Sg__attributes, swig_Two_TwoParm_Sl_char_Sm__Sc_Concrete_Sm__Sg__bases,swig_Two_TwoParm_Sl_char_Sm__Sc_Concrete_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_E1__e(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int const *,int * > *arg1 = (Two::TwoParm< int const *,int * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:E1__e self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_const_p_int_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "E1__e" "', argument " "1"" of type '" "Two::TwoParm< int const *,int * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int const *,int * > * >(argp1);
  (arg1)->e();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_E1_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int const *,int * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_E1_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< int const *,int * > *)new Two::TwoParm< int const *,int * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_int_const_p_int_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_E1_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int const *,int * > *arg1 = (Two::TwoParm< int const *,int * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_E1_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_const_p_int_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_E1_" "', argument " "1"" of type '" "Two::TwoParm< int const *,int * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int const *,int * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_E1_(void *obj) {
Two::TwoParm< int const *,int * > *arg1 = (Two::TwoParm< int const *,int * > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_Sm__Sg__methods[] = {
    {"e", _wrap_E1__e}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_Sm__Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_Sm__Sg_ = { "E1_", &SWIGTYPE_p_Two__TwoParmT_int_const_p_int_p_t,_wrap_new_E1_, swig_delete_E1_, swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_Sm__Sg__methods, swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_Sm__Sg__attributes, swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_Sm__Sg__bases,swig_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_E2__e(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int **,int * > *arg1 = (Two::TwoParm< int **,int * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:E2__e self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_pp_int_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "E2__e" "', argument " "1"" of type '" "Two::TwoParm< int **,int * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int **,int * > * >(argp1);
  (arg1)->e();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_E2_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int **,int * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_E2_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< int **,int * > *)new Two::TwoParm< int **,int * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_int_pp_int_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_E2_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< int **,int * > *arg1 = (Two::TwoParm< int **,int * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_E2_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_int_pp_int_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_E2_" "', argument " "1"" of type '" "Two::TwoParm< int **,int * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< int **,int * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_E2_(void *obj) {
Two::TwoParm< int **,int * > *arg1 = (Two::TwoParm< int **,int * > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl_int_Sm__Sm__Sc_int_Sm__Sg__methods[] = {
    {"e", _wrap_E2__e}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl_int_Sm__Sm__Sc_int_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl_int_Sm__Sm__Sc_int_Sm__Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl_int_Sm__Sm__Sc_int_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl_int_Sm__Sm__Sc_int_Sm__Sg_ = { "E2_", &SWIGTYPE_p_Two__TwoParmT_int_pp_int_p_t,_wrap_new_E2_, swig_delete_E2_, swig_Two_TwoParm_Sl_int_Sm__Sm__Sc_int_Sm__Sg__methods, swig_Two_TwoParm_Sl_int_Sm__Sm__Sc_int_Sm__Sg__attributes, swig_Two_TwoParm_Sl_int_Sm__Sm__Sc_int_Sm__Sg__bases,swig_Two_TwoParm_Sl_int_Sm__Sm__Sc_int_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_H__h(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< ::Concrete,Concrete * > *arg1 = (Two::TwoParm< ::Concrete,Concrete * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:H__h self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_Concrete_Concrete_p_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "H__h" "', argument " "1"" of type '" "Two::TwoParm< ::Concrete,Concrete * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< ::Concrete,Concrete * > * >(argp1);
  (arg1)->h();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_H_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< ::Concrete,Concrete * > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_H_ ") == TCL_ERROR) SWIG_fail;
  result = (Two::TwoParm< ::Concrete,Concrete * > *)new Two::TwoParm< ::Concrete,Concrete * >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Two__TwoParmT_Concrete_Concrete_p_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_H_(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Two::TwoParm< ::Concrete,Concrete * > *arg1 = (Two::TwoParm< ::Concrete,Concrete * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_H_ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Two__TwoParmT_Concrete_Concrete_p_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_H_" "', argument " "1"" of type '" "Two::TwoParm< ::Concrete,Concrete * > *""'"); 
  }
  arg1 = reinterpret_cast< Two::TwoParm< ::Concrete,Concrete * > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_H_(void *obj) {
Two::TwoParm< ::Concrete,Concrete * > *arg1 = (Two::TwoParm< ::Concrete,Concrete * > *) obj;
delete arg1;
}
static swig_method swig_Two_TwoParm_Sl__Concrete_Sc_Concrete_Sm__Sg__methods[] = {
    {"h", _wrap_H__h}, 
    {0,0}
};
static swig_attribute swig_Two_TwoParm_Sl__Concrete_Sc_Concrete_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_Two_TwoParm_Sl__Concrete_Sc_Concrete_Sm__Sg__bases[] = {0};
static const char * swig_Two_TwoParm_Sl__Concrete_Sc_Concrete_Sm__Sg__base_names[] = {0};
static swig_class _wrap_class_Two_TwoParm_Sl__Concrete_Sc_Concrete_Sm__Sg_ = { "H_", &SWIGTYPE_p_Two__TwoParmT_Concrete_Concrete_p_t,_wrap_new_H_, swig_delete_H_, swig_Two_TwoParm_Sl__Concrete_Sc_Concrete_Sm__Sg__methods, swig_Two_TwoParm_Sl__Concrete_Sc_Concrete_Sm__Sg__attributes, swig_Two_TwoParm_Sl__Concrete_Sc_Concrete_Sm__Sg__bases,swig_Two_TwoParm_Sl__Concrete_Sc_Concrete_Sm__Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_FiveParm1_b(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  FiveParm< bool,int,int,double,short > *arg1 = (FiveParm< bool,int,int,double,short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:FiveParm1_b self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_FiveParmT_bool_int_int_double_short_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiveParm1_b" "', argument " "1"" of type '" "FiveParm< bool,int,int,double,short > *""'"); 
  }
  arg1 = reinterpret_cast< FiveParm< bool,int,int,double,short > * >(argp1);
  (arg1)->b();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_FiveParm1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  FiveParm< bool,int,int,double,short > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_FiveParm1 ") == TCL_ERROR) SWIG_fail;
  result = (FiveParm< bool,int,int,double,short > *)new FiveParm< bool,int,int,double,short >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_FiveParmT_bool_int_int_double_short_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_FiveParm1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  FiveParm< bool,int,int,double,short > *arg1 = (FiveParm< bool,int,int,double,short > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_FiveParm1 self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_FiveParmT_bool_int_int_double_short_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FiveParm1" "', argument " "1"" of type '" "FiveParm< bool,int,int,double,short > *""'"); 
  }
  arg1 = reinterpret_cast< FiveParm< bool,int,int,double,short > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_FiveParm1(void *obj) {
FiveParm< bool,int,int,double,short > *arg1 = (FiveParm< bool,int,int,double,short > *) obj;
delete arg1;
}
static swig_method swig_FiveParm_Sl_bool_Sc_int_Sc_int_Sc_double_Sc_short_Sg__methods[] = {
    {"b", _wrap_FiveParm1_b}, 
    {0,0}
};
static swig_attribute swig_FiveParm_Sl_bool_Sc_int_Sc_int_Sc_double_Sc_short_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_FiveParm_Sl_bool_Sc_int_Sc_int_Sc_double_Sc_short_Sg__bases[] = {0};
static const char * swig_FiveParm_Sl_bool_Sc_int_Sc_int_Sc_double_Sc_short_Sg__base_names[] = {0};
static swig_class _wrap_class_FiveParm_Sl_bool_Sc_int_Sc_int_Sc_double_Sc_short_Sg_ = { "FiveParm1", &SWIGTYPE_p_FiveParmT_bool_int_int_double_short_t,_wrap_new_FiveParm1, swig_delete_FiveParm1, swig_FiveParm_Sl_bool_Sc_int_Sc_int_Sc_double_Sc_short_Sg__methods, swig_FiveParm_Sl_bool_Sc_int_Sc_int_Sc_double_Sc_short_Sg__attributes, swig_FiveParm_Sl_bool_Sc_int_Sc_int_Sc_double_Sc_short_Sg__bases,swig_FiveParm_Sl_bool_Sc_int_Sc_int_Sc_double_Sc_short_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_ThreeParmInt_a2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ThreeParm< int,0,0 > *arg1 = (ThreeParm< int,0,0 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ThreeParmInt_a2 self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ThreeParmT_int_0_0_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThreeParmInt_a2" "', argument " "1"" of type '" "ThreeParm< int,0,0 > *""'"); 
  }
  arg1 = reinterpret_cast< ThreeParm< int,0,0 > * >(argp1);
  (arg1)->a2();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ThreeParmInt(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ThreeParm< int,0,0 > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ThreeParmInt ") == TCL_ERROR) SWIG_fail;
  result = (ThreeParm< int,0,0 > *)new ThreeParm< int,0,0 >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_ThreeParmT_int_0_0_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ThreeParmInt(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  ThreeParm< int,0,0 > *arg1 = (ThreeParm< int,0,0 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ThreeParmInt self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_ThreeParmT_int_0_0_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThreeParmInt" "', argument " "1"" of type '" "ThreeParm< int,0,0 > *""'"); 
  }
  arg1 = reinterpret_cast< ThreeParm< int,0,0 > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ThreeParmInt(void *obj) {
ThreeParm< int,0,0 > *arg1 = (ThreeParm< int,0,0 > *) obj;
delete arg1;
}
static swig_method swig_ThreeParm_Sl_int_Sc_0_Sc_0_Sg__methods[] = {
    {"a2", _wrap_ThreeParmInt_a2}, 
    {0,0}
};
static swig_attribute swig_ThreeParm_Sl_int_Sc_0_Sc_0_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_ThreeParm_Sl_int_Sc_0_Sc_0_Sg__bases[] = {0};
static const char * swig_ThreeParm_Sl_int_Sc_0_Sc_0_Sg__base_names[] = {0};
static swig_class _wrap_class_ThreeParm_Sl_int_Sc_0_Sc_0_Sg_ = { "ThreeParmInt", &SWIGTYPE_p_ThreeParmT_int_0_0_t,_wrap_new_ThreeParmInt, swig_delete_ThreeParmInt, swig_ThreeParm_Sl_int_Sc_0_Sc_0_Sg__methods, swig_ThreeParm_Sl_int_Sc_0_Sc_0_Sg__attributes, swig_ThreeParm_Sl_int_Sc_0_Sc_0_Sg__bases,swig_ThreeParm_Sl_int_Sc_0_Sc_0_Sg__base_names, &swig_module };

static swig_command_info swig_commands[] = {
    { SWIG_prefix "A_a", (swig_wrapper_func) _wrap_A_a, NULL},
    { SWIG_prefix "new_A", (swig_wrapper_func) _wrap_new_A, NULL},
    { SWIG_prefix "delete_A", (swig_wrapper_func) _wrap_delete_A, NULL},
    { SWIG_prefix "A", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_double_Sg_},
    { SWIG_prefix "B_b", (swig_wrapper_func) _wrap_B_b, NULL},
    { SWIG_prefix "new_B", (swig_wrapper_func) _wrap_new_B, NULL},
    { SWIG_prefix "delete_B", (swig_wrapper_func) _wrap_delete_B, NULL},
    { SWIG_prefix "B", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_double_Sm__Sg_},
    { SWIG_prefix "C_c", (swig_wrapper_func) _wrap_C_c, NULL},
    { SWIG_prefix "new_C", (swig_wrapper_func) _wrap_new_C, NULL},
    { SWIG_prefix "delete_C", (swig_wrapper_func) _wrap_delete_C, NULL},
    { SWIG_prefix "C", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_double_SA__Sg_},
    { SWIG_prefix "D_d", (swig_wrapper_func) _wrap_D_d, NULL},
    { SWIG_prefix "new_D", (swig_wrapper_func) _wrap_new_D, NULL},
    { SWIG_prefix "delete_D", (swig_wrapper_func) _wrap_delete_D, NULL},
    { SWIG_prefix "D", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_double_SS_const_SA__Sg_},
    { SWIG_prefix "E_e", (swig_wrapper_func) _wrap_E_e, NULL},
    { SWIG_prefix "new_E", (swig_wrapper_func) _wrap_new_E, NULL},
    { SWIG_prefix "delete_E", (swig_wrapper_func) _wrap_delete_E, NULL},
    { SWIG_prefix "E", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_double_Sm_const_SA__Sg_},
    { SWIG_prefix "F_f", (swig_wrapper_func) _wrap_F_f, NULL},
    { SWIG_prefix "new_F", (swig_wrapper_func) _wrap_new_F, NULL},
    { SWIG_prefix "delete_F", (swig_wrapper_func) _wrap_delete_F, NULL},
    { SWIG_prefix "F", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_int_Sg_},
    { SWIG_prefix "G_g", (swig_wrapper_func) _wrap_G_g, NULL},
    { SWIG_prefix "new_G", (swig_wrapper_func) _wrap_new_G, NULL},
    { SWIG_prefix "delete_G", (swig_wrapper_func) _wrap_delete_G, NULL},
    { SWIG_prefix "G", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_int_Sm_const_SA__Sg_},
    { SWIG_prefix "H_h", (swig_wrapper_func) _wrap_H_h, NULL},
    { SWIG_prefix "new_H", (swig_wrapper_func) _wrap_new_H, NULL},
    { SWIG_prefix "delete_H", (swig_wrapper_func) _wrap_delete_H, NULL},
    { SWIG_prefix "H", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_int_Sm__Sm__Sg_},
    { SWIG_prefix "I_i", (swig_wrapper_func) _wrap_I_i, NULL},
    { SWIG_prefix "new_I", (swig_wrapper_func) _wrap_new_I, NULL},
    { SWIG_prefix "delete_I", (swig_wrapper_func) _wrap_delete_I, NULL},
    { SWIG_prefix "I", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_float_Sg_},
    { SWIG_prefix "J_j", (swig_wrapper_func) _wrap_J_j, NULL},
    { SWIG_prefix "new_J", (swig_wrapper_func) _wrap_new_J, NULL},
    { SWIG_prefix "delete_J", (swig_wrapper_func) _wrap_delete_J, NULL},
    { SWIG_prefix "J", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_float_Sm__Sg_},
    { SWIG_prefix "K_k", (swig_wrapper_func) _wrap_K_k, NULL},
    { SWIG_prefix "new_K", (swig_wrapper_func) _wrap_new_K, NULL},
    { SWIG_prefix "delete_K", (swig_wrapper_func) _wrap_delete_K, NULL},
    { SWIG_prefix "K", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_float_Sm__Sm__Sg_},
    { SWIG_prefix "L_l", (swig_wrapper_func) _wrap_L_l, NULL},
    { SWIG_prefix "new_L", (swig_wrapper_func) _wrap_new_L, NULL},
    { SWIG_prefix "delete_L", (swig_wrapper_func) _wrap_delete_L, NULL},
    { SWIG_prefix "L", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_float_Sm__Sm__Sm__Sg_},
    { SWIG_prefix "BB_b", (swig_wrapper_func) _wrap_BB_b, NULL},
    { SWIG_prefix "new_BB", (swig_wrapper_func) _wrap_new_BB, NULL},
    { SWIG_prefix "delete_BB", (swig_wrapper_func) _wrap_delete_BB, NULL},
    { SWIG_prefix "BB", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_bool_Sm__Sg_},
    { SWIG_prefix "BBB_b", (swig_wrapper_func) _wrap_BBB_b, NULL},
    { SWIG_prefix "new_BBB", (swig_wrapper_func) _wrap_new_BBB, NULL},
    { SWIG_prefix "delete_BBB", (swig_wrapper_func) _wrap_delete_BBB, NULL},
    { SWIG_prefix "BBB", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_char_Sm__Sg_},
    { SWIG_prefix "BBBB_b", (swig_wrapper_func) _wrap_BBBB_b, NULL},
    { SWIG_prefix "new_BBBB", (swig_wrapper_func) _wrap_new_BBBB, NULL},
    { SWIG_prefix "delete_BBBB", (swig_wrapper_func) _wrap_delete_BBBB, NULL},
    { SWIG_prefix "BBBB", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_short_Sm__Sg_},
    { SWIG_prefix "BBBBB_b", (swig_wrapper_func) _wrap_BBBBB_b, NULL},
    { SWIG_prefix "new_BBBBB", (swig_wrapper_func) _wrap_new_BBBBB, NULL},
    { SWIG_prefix "delete_BBBBB", (swig_wrapper_func) _wrap_delete_BBBBB, NULL},
    { SWIG_prefix "BBBBB", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_long_Sm__Sg_},
    { SWIG_prefix "B1_b", (swig_wrapper_func) _wrap_B1_b, NULL},
    { SWIG_prefix "new_B1", (swig_wrapper_func) _wrap_new_B1, NULL},
    { SWIG_prefix "delete_B1", (swig_wrapper_func) _wrap_delete_B1, NULL},
    { SWIG_prefix "B1", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sg_},
    { SWIG_prefix "B2_b", (swig_wrapper_func) _wrap_B2_b, NULL},
    { SWIG_prefix "new_B2", (swig_wrapper_func) _wrap_new_B2, NULL},
    { SWIG_prefix "delete_B2", (swig_wrapper_func) _wrap_delete_B2, NULL},
    { SWIG_prefix "B2", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sm__Sg_},
    { SWIG_prefix "B3_b", (swig_wrapper_func) _wrap_B3_b, NULL},
    { SWIG_prefix "new_B3", (swig_wrapper_func) _wrap_new_B3, NULL},
    { SWIG_prefix "delete_B3", (swig_wrapper_func) _wrap_delete_B3, NULL},
    { SWIG_prefix "B3", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sg_},
    { SWIG_prefix "B4_b", (swig_wrapper_func) _wrap_B4_b, NULL},
    { SWIG_prefix "new_B4", (swig_wrapper_func) _wrap_new_B4, NULL},
    { SWIG_prefix "delete_B4", (swig_wrapper_func) _wrap_delete_B4, NULL},
    { SWIG_prefix "B4", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sm__Sg_},
    { SWIG_prefix "new_Concrete", (swig_wrapper_func) _wrap_new_Concrete, NULL},
    { SWIG_prefix "delete_Concrete", (swig_wrapper_func) _wrap_delete_Concrete, NULL},
    { SWIG_prefix "Concrete", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Concrete},
    { SWIG_prefix "A__a", (swig_wrapper_func) _wrap_A__a, NULL},
    { SWIG_prefix "new_A_", (swig_wrapper_func) _wrap_new_A_, NULL},
    { SWIG_prefix "delete_A_", (swig_wrapper_func) _wrap_delete_A_, NULL},
    { SWIG_prefix "A_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_double_Sc_double_Sg_},
    { SWIG_prefix "B__b", (swig_wrapper_func) _wrap_B__b, NULL},
    { SWIG_prefix "new_B_", (swig_wrapper_func) _wrap_new_B_, NULL},
    { SWIG_prefix "delete_B_", (swig_wrapper_func) _wrap_delete_B_, NULL},
    { SWIG_prefix "B_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_double_Sm__Sc_double_Sm__Sg_},
    { SWIG_prefix "C__c", (swig_wrapper_func) _wrap_C__c, NULL},
    { SWIG_prefix "new_C_", (swig_wrapper_func) _wrap_new_C_, NULL},
    { SWIG_prefix "delete_C_", (swig_wrapper_func) _wrap_delete_C_, NULL},
    { SWIG_prefix "C_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_double_Sm__Sc_double_SS_const_Sm__Sg_},
    { SWIG_prefix "D__d", (swig_wrapper_func) _wrap_D__d, NULL},
    { SWIG_prefix "new_D_", (swig_wrapper_func) _wrap_new_D_, NULL},
    { SWIG_prefix "delete_D_", (swig_wrapper_func) _wrap_delete_D_, NULL},
    { SWIG_prefix "D_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_SS_const_Sm__Sg_},
    { SWIG_prefix "E__e", (swig_wrapper_func) _wrap_E__e, NULL},
    { SWIG_prefix "new_E_", (swig_wrapper_func) _wrap_new_E_, NULL},
    { SWIG_prefix "delete_E_", (swig_wrapper_func) _wrap_delete_E_, NULL},
    { SWIG_prefix "E_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_int_Sm__Sc_int_Sm__Sg_},
    { SWIG_prefix "F__f", (swig_wrapper_func) _wrap_F__f, NULL},
    { SWIG_prefix "new_F_", (swig_wrapper_func) _wrap_new_F_, NULL},
    { SWIG_prefix "delete_F_", (swig_wrapper_func) _wrap_delete_F_, NULL},
    { SWIG_prefix "F_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_int_Sm__Sc_int_Sg_},
    { SWIG_prefix "G__g", (swig_wrapper_func) _wrap_G__g, NULL},
    { SWIG_prefix "new_G_", (swig_wrapper_func) _wrap_new_G_, NULL},
    { SWIG_prefix "delete_G_", (swig_wrapper_func) _wrap_delete_G_, NULL},
    { SWIG_prefix "G_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_int_Sm__Sc_int_SS_const_Sm__Sg_},
    { SWIG_prefix "C1__c", (swig_wrapper_func) _wrap_C1__c, NULL},
    { SWIG_prefix "new_C1_", (swig_wrapper_func) _wrap_new_C1_, NULL},
    { SWIG_prefix "delete_C1_", (swig_wrapper_func) _wrap_delete_C1_, NULL},
    { SWIG_prefix "C1_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_Concrete_Sm__Sc_Concrete_SS_const_Sm__Sg_},
    { SWIG_prefix "C2__c", (swig_wrapper_func) _wrap_C2__c, NULL},
    { SWIG_prefix "new_C2_", (swig_wrapper_func) _wrap_new_C2_, NULL},
    { SWIG_prefix "delete_C2_", (swig_wrapper_func) _wrap_delete_C2_, NULL},
    { SWIG_prefix "C2_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_int_Sm__Sc_Concrete_SS_const_Sm__Sg_},
    { SWIG_prefix "C3__c", (swig_wrapper_func) _wrap_C3__c, NULL},
    { SWIG_prefix "new_C3_", (swig_wrapper_func) _wrap_new_C3_, NULL},
    { SWIG_prefix "delete_C3_", (swig_wrapper_func) _wrap_delete_C3_, NULL},
    { SWIG_prefix "C3_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_double_Sm__Sc_Concrete_SS_const_Sm__Sg_},
    { SWIG_prefix "C4__c", (swig_wrapper_func) _wrap_C4__c, NULL},
    { SWIG_prefix "new_C4_", (swig_wrapper_func) _wrap_new_C4_, NULL},
    { SWIG_prefix "delete_C4_", (swig_wrapper_func) _wrap_delete_C4_, NULL},
    { SWIG_prefix "C4_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_void_Sm__Sc_Concrete_SS_const_Sm__Sg_},
    { SWIG_prefix "B1__b", (swig_wrapper_func) _wrap_B1__b, NULL},
    { SWIG_prefix "new_B1_", (swig_wrapper_func) _wrap_new_B1_, NULL},
    { SWIG_prefix "delete_B1_", (swig_wrapper_func) _wrap_delete_B1_, NULL},
    { SWIG_prefix "B1_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_char_Sm__Sc_Concrete_Sm__Sg_},
    { SWIG_prefix "E1__e", (swig_wrapper_func) _wrap_E1__e, NULL},
    { SWIG_prefix "new_E1_", (swig_wrapper_func) _wrap_new_E1_, NULL},
    { SWIG_prefix "delete_E1_", (swig_wrapper_func) _wrap_delete_E1_, NULL},
    { SWIG_prefix "E1_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_Sm__Sg_},
    { SWIG_prefix "E2__e", (swig_wrapper_func) _wrap_E2__e, NULL},
    { SWIG_prefix "new_E2_", (swig_wrapper_func) _wrap_new_E2_, NULL},
    { SWIG_prefix "delete_E2_", (swig_wrapper_func) _wrap_delete_E2_, NULL},
    { SWIG_prefix "E2_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl_int_Sm__Sm__Sc_int_Sm__Sg_},
    { SWIG_prefix "H__h", (swig_wrapper_func) _wrap_H__h, NULL},
    { SWIG_prefix "new_H_", (swig_wrapper_func) _wrap_new_H_, NULL},
    { SWIG_prefix "delete_H_", (swig_wrapper_func) _wrap_delete_H_, NULL},
    { SWIG_prefix "H_", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Two_TwoParm_Sl__Concrete_Sc_Concrete_Sm__Sg_},
    { SWIG_prefix "FiveParm1_b", (swig_wrapper_func) _wrap_FiveParm1_b, NULL},
    { SWIG_prefix "new_FiveParm1", (swig_wrapper_func) _wrap_new_FiveParm1, NULL},
    { SWIG_prefix "delete_FiveParm1", (swig_wrapper_func) _wrap_delete_FiveParm1, NULL},
    { SWIG_prefix "FiveParm1", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_FiveParm_Sl_bool_Sc_int_Sc_int_Sc_double_Sc_short_Sg_},
    { SWIG_prefix "ThreeParmInt_a2", (swig_wrapper_func) _wrap_ThreeParmInt_a2, NULL},
    { SWIG_prefix "new_ThreeParmInt", (swig_wrapper_func) _wrap_new_ThreeParmInt, NULL},
    { SWIG_prefix "delete_ThreeParmInt", (swig_wrapper_func) _wrap_delete_ThreeParmInt, NULL},
    { SWIG_prefix "ThreeParmInt", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_ThreeParm_Sl_int_Sc_0_Sc_0_Sg_},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_Concrete = {"_p_Concrete", "Concrete *", 0, 0, (void*)&_wrap_class_Concrete, 0};
static swig_type_info _swigt__p_FiveParmT_bool_int_int_double_short_t = {"_p_FiveParmT_bool_int_int_double_short_t", "FiveParm< bool,int,int,double,short > *", 0, 0, (void*)&_wrap_class_FiveParm_Sl_bool_Sc_int_Sc_int_Sc_double_Sc_short_Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_bool_p_t = {"_p_One__OneParmT_bool_p_t", "One::OneParm< bool * > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_bool_Sm__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_char_p_t = {"_p_One__OneParmT_char_p_t", "One::OneParm< char * > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_char_Sm__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_double_R_t = {"_p_One__OneParmT_double_R_t", "One::OneParm< double & > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_double_SA__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_double_const_R_t = {"_p_One__OneParmT_double_const_R_t", "One::OneParm< double const & > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_double_SS_const_SA__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_double_p_t = {"_p_One__OneParmT_double_p_t", "One::OneParm< double * > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_double_Sm__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_double_pconst_R_t = {"_p_One__OneParmT_double_pconst_R_t", "One::OneParm< double *const & > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_double_Sm_const_SA__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_double_t = {"_p_One__OneParmT_double_t", "One::OneParm< double > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_double_Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_float_p_t = {"_p_One__OneParmT_float_p_t", "One::OneParm< float * > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_float_Sm__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_float_pp_t = {"_p_One__OneParmT_float_pp_t", "One::OneParm< float ** > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_float_Sm__Sm__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_float_ppp_t = {"_p_One__OneParmT_float_ppp_t", "One::OneParm< float *** > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_float_Sm__Sm__Sm__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_float_t = {"_p_One__OneParmT_float_t", "One::OneParm< float > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_float_Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_int_pconst_R_t = {"_p_One__OneParmT_int_pconst_R_t", "One::OneParm< int *const & > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_int_Sm_const_SA__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_int_pp_t = {"_p_One__OneParmT_int_pp_t", "One::OneParm< int ** > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_int_Sm__Sm__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_int_t = {"_p_One__OneParmT_int_t", "One::OneParm< int > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_int_Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_long_p_t = {"_p_One__OneParmT_long_p_t", "One::OneParm< long * > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_long_Sm__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_short_p_t = {"_p_One__OneParmT_short_p_t", "One::OneParm< short * > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_short_Sm__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_unsigned_int_const_p_t = {"_p_One__OneParmT_unsigned_int_const_p_t", "One::OneParm< unsigned int const * > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_unsigned_int_const_pp_t = {"_p_One__OneParmT_unsigned_int_const_pp_t", "One::OneParm< unsigned int const ** > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_unsigned_SS_int_SS_const_Sm__Sm__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_unsigned_int_pp_t = {"_p_One__OneParmT_unsigned_int_pp_t", "One::OneParm< unsigned int ** > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sg_, 0};
static swig_type_info _swigt__p_One__OneParmT_unsigned_int_ppp_t = {"_p_One__OneParmT_unsigned_int_ppp_t", "One::OneParm< unsigned int *** > *", 0, 0, (void*)&_wrap_class_One_OneParm_Sl_unsigned_SS_int_Sm__Sm__Sm__Sg_, 0};
static swig_type_info _swigt__p_ThreeParmT_int_0_0_t = {"_p_ThreeParmT_int_0_0_t", "ThreeParm< int,0,0 > *", 0, 0, (void*)&_wrap_class_ThreeParm_Sl_int_Sc_0_Sc_0_Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_Concrete_Concrete_p_t = {"_p_Two__TwoParmT_Concrete_Concrete_p_t", "Two::TwoParm< ::Concrete,Concrete * > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl__Concrete_Sc_Concrete_Sm__Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_Concrete_p_Concrete_const_p_t = {"_p_Two__TwoParmT_Concrete_p_Concrete_const_p_t", "Two::TwoParm< Concrete *,Concrete const * > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_Concrete_Sm__Sc_Concrete_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_char_p_Concrete_p_t = {"_p_Two__TwoParmT_char_p_Concrete_p_t", "Two::TwoParm< char *,Concrete * > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_char_Sm__Sc_Concrete_Sm__Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_double_double_t = {"_p_Two__TwoParmT_double_double_t", "Two::TwoParm< double,double > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_double_Sc_double_Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_double_p_Concrete_const_p_t = {"_p_Two__TwoParmT_double_p_Concrete_const_p_t", "Two::TwoParm< double *,Concrete const * > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_double_Sm__Sc_Concrete_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_double_p_double_const_p_t = {"_p_Two__TwoParmT_double_p_double_const_p_t", "Two::TwoParm< double *,double const * > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_double_Sm__Sc_double_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_double_p_double_p_t = {"_p_Two__TwoParmT_double_p_double_p_t", "Two::TwoParm< double *,double * > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_double_Sm__Sc_double_Sm__Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_int_const_p_int_const_p_t = {"_p_Two__TwoParmT_int_const_p_int_const_p_t", "Two::TwoParm< int const *,int const * > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_int_const_p_int_p_t = {"_p_Two__TwoParmT_int_const_p_int_p_t", "Two::TwoParm< int const *,int * > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_int_SS_const_Sm__Sc_int_Sm__Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_int_p_Concrete_const_p_t = {"_p_Two__TwoParmT_int_p_Concrete_const_p_t", "Two::TwoParm< int *,Concrete const * > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_int_Sm__Sc_Concrete_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_int_p_int_const_p_t = {"_p_Two__TwoParmT_int_p_int_const_p_t", "Two::TwoParm< int *,int const * > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_int_Sm__Sc_int_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_int_p_int_p_t = {"_p_Two__TwoParmT_int_p_int_p_t", "Two::TwoParm< int *,int * > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_int_Sm__Sc_int_Sm__Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_int_p_int_t = {"_p_Two__TwoParmT_int_p_int_t", "Two::TwoParm< int *,int > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_int_Sm__Sc_int_Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_int_pp_int_p_t = {"_p_Two__TwoParmT_int_pp_int_p_t", "Two::TwoParm< int **,int * > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_int_Sm__Sm__Sc_int_Sm__Sg_, 0};
static swig_type_info _swigt__p_Two__TwoParmT_void_p_Concrete_const_p_t = {"_p_Two__TwoParmT_void_p_Concrete_const_p_t", "Two::TwoParm< void *,Concrete const * > *", 0, 0, (void*)&_wrap_class_Two_TwoParm_Sl_void_Sm__Sc_Concrete_SS_const_Sm__Sg_, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Concrete,
  &_swigt__p_FiveParmT_bool_int_int_double_short_t,
  &_swigt__p_One__OneParmT_bool_p_t,
  &_swigt__p_One__OneParmT_char_p_t,
  &_swigt__p_One__OneParmT_double_R_t,
  &_swigt__p_One__OneParmT_double_const_R_t,
  &_swigt__p_One__OneParmT_double_p_t,
  &_swigt__p_One__OneParmT_double_pconst_R_t,
  &_swigt__p_One__OneParmT_double_t,
  &_swigt__p_One__OneParmT_float_p_t,
  &_swigt__p_One__OneParmT_float_pp_t,
  &_swigt__p_One__OneParmT_float_ppp_t,
  &_swigt__p_One__OneParmT_float_t,
  &_swigt__p_One__OneParmT_int_pconst_R_t,
  &_swigt__p_One__OneParmT_int_pp_t,
  &_swigt__p_One__OneParmT_int_t,
  &_swigt__p_One__OneParmT_long_p_t,
  &_swigt__p_One__OneParmT_short_p_t,
  &_swigt__p_One__OneParmT_unsigned_int_const_p_t,
  &_swigt__p_One__OneParmT_unsigned_int_const_pp_t,
  &_swigt__p_One__OneParmT_unsigned_int_pp_t,
  &_swigt__p_One__OneParmT_unsigned_int_ppp_t,
  &_swigt__p_ThreeParmT_int_0_0_t,
  &_swigt__p_Two__TwoParmT_Concrete_Concrete_p_t,
  &_swigt__p_Two__TwoParmT_Concrete_p_Concrete_const_p_t,
  &_swigt__p_Two__TwoParmT_char_p_Concrete_p_t,
  &_swigt__p_Two__TwoParmT_double_double_t,
  &_swigt__p_Two__TwoParmT_double_p_Concrete_const_p_t,
  &_swigt__p_Two__TwoParmT_double_p_double_const_p_t,
  &_swigt__p_Two__TwoParmT_double_p_double_p_t,
  &_swigt__p_Two__TwoParmT_int_const_p_int_const_p_t,
  &_swigt__p_Two__TwoParmT_int_const_p_int_p_t,
  &_swigt__p_Two__TwoParmT_int_p_Concrete_const_p_t,
  &_swigt__p_Two__TwoParmT_int_p_int_const_p_t,
  &_swigt__p_Two__TwoParmT_int_p_int_p_t,
  &_swigt__p_Two__TwoParmT_int_p_int_t,
  &_swigt__p_Two__TwoParmT_int_pp_int_p_t,
  &_swigt__p_Two__TwoParmT_void_p_Concrete_const_p_t,
  &_swigt__p_char,
};

static swig_cast_info _swigc__p_Concrete[] = {  {&_swigt__p_Concrete, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FiveParmT_bool_int_int_double_short_t[] = {  {&_swigt__p_FiveParmT_bool_int_int_double_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_bool_p_t[] = {  {&_swigt__p_One__OneParmT_bool_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_char_p_t[] = {  {&_swigt__p_One__OneParmT_char_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_double_R_t[] = {  {&_swigt__p_One__OneParmT_double_R_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_double_const_R_t[] = {  {&_swigt__p_One__OneParmT_double_const_R_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_double_p_t[] = {  {&_swigt__p_One__OneParmT_double_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_double_pconst_R_t[] = {  {&_swigt__p_One__OneParmT_double_pconst_R_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_double_t[] = {  {&_swigt__p_One__OneParmT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_float_p_t[] = {  {&_swigt__p_One__OneParmT_float_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_float_pp_t[] = {  {&_swigt__p_One__OneParmT_float_pp_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_float_ppp_t[] = {  {&_swigt__p_One__OneParmT_float_ppp_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_float_t[] = {  {&_swigt__p_One__OneParmT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_int_pconst_R_t[] = {  {&_swigt__p_One__OneParmT_int_pconst_R_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_int_pp_t[] = {  {&_swigt__p_One__OneParmT_int_pp_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_int_t[] = {  {&_swigt__p_One__OneParmT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_long_p_t[] = {  {&_swigt__p_One__OneParmT_long_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_short_p_t[] = {  {&_swigt__p_One__OneParmT_short_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_unsigned_int_const_p_t[] = {  {&_swigt__p_One__OneParmT_unsigned_int_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_unsigned_int_const_pp_t[] = {  {&_swigt__p_One__OneParmT_unsigned_int_const_pp_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_unsigned_int_pp_t[] = {  {&_swigt__p_One__OneParmT_unsigned_int_pp_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_One__OneParmT_unsigned_int_ppp_t[] = {  {&_swigt__p_One__OneParmT_unsigned_int_ppp_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ThreeParmT_int_0_0_t[] = {  {&_swigt__p_ThreeParmT_int_0_0_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_Concrete_Concrete_p_t[] = {  {&_swigt__p_Two__TwoParmT_Concrete_Concrete_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_Concrete_p_Concrete_const_p_t[] = {  {&_swigt__p_Two__TwoParmT_Concrete_p_Concrete_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_char_p_Concrete_p_t[] = {  {&_swigt__p_Two__TwoParmT_char_p_Concrete_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_double_double_t[] = {  {&_swigt__p_Two__TwoParmT_double_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_double_p_Concrete_const_p_t[] = {  {&_swigt__p_Two__TwoParmT_double_p_Concrete_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_double_p_double_const_p_t[] = {  {&_swigt__p_Two__TwoParmT_double_p_double_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_double_p_double_p_t[] = {  {&_swigt__p_Two__TwoParmT_double_p_double_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_int_const_p_int_const_p_t[] = {  {&_swigt__p_Two__TwoParmT_int_const_p_int_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_int_const_p_int_p_t[] = {  {&_swigt__p_Two__TwoParmT_int_const_p_int_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_int_p_Concrete_const_p_t[] = {  {&_swigt__p_Two__TwoParmT_int_p_Concrete_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_int_p_int_const_p_t[] = {  {&_swigt__p_Two__TwoParmT_int_p_int_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_int_p_int_p_t[] = {  {&_swigt__p_Two__TwoParmT_int_p_int_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_int_p_int_t[] = {  {&_swigt__p_Two__TwoParmT_int_p_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_int_pp_int_p_t[] = {  {&_swigt__p_Two__TwoParmT_int_pp_int_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Two__TwoParmT_void_p_Concrete_const_p_t[] = {  {&_swigt__p_Two__TwoParmT_void_p_Concrete_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Concrete,
  _swigc__p_FiveParmT_bool_int_int_double_short_t,
  _swigc__p_One__OneParmT_bool_p_t,
  _swigc__p_One__OneParmT_char_p_t,
  _swigc__p_One__OneParmT_double_R_t,
  _swigc__p_One__OneParmT_double_const_R_t,
  _swigc__p_One__OneParmT_double_p_t,
  _swigc__p_One__OneParmT_double_pconst_R_t,
  _swigc__p_One__OneParmT_double_t,
  _swigc__p_One__OneParmT_float_p_t,
  _swigc__p_One__OneParmT_float_pp_t,
  _swigc__p_One__OneParmT_float_ppp_t,
  _swigc__p_One__OneParmT_float_t,
  _swigc__p_One__OneParmT_int_pconst_R_t,
  _swigc__p_One__OneParmT_int_pp_t,
  _swigc__p_One__OneParmT_int_t,
  _swigc__p_One__OneParmT_long_p_t,
  _swigc__p_One__OneParmT_short_p_t,
  _swigc__p_One__OneParmT_unsigned_int_const_p_t,
  _swigc__p_One__OneParmT_unsigned_int_const_pp_t,
  _swigc__p_One__OneParmT_unsigned_int_pp_t,
  _swigc__p_One__OneParmT_unsigned_int_ppp_t,
  _swigc__p_ThreeParmT_int_0_0_t,
  _swigc__p_Two__TwoParmT_Concrete_Concrete_p_t,
  _swigc__p_Two__TwoParmT_Concrete_p_Concrete_const_p_t,
  _swigc__p_Two__TwoParmT_char_p_Concrete_p_t,
  _swigc__p_Two__TwoParmT_double_double_t,
  _swigc__p_Two__TwoParmT_double_p_Concrete_const_p_t,
  _swigc__p_Two__TwoParmT_double_p_double_const_p_t,
  _swigc__p_Two__TwoParmT_double_p_double_p_t,
  _swigc__p_Two__TwoParmT_int_const_p_int_const_p_t,
  _swigc__p_Two__TwoParmT_int_const_p_int_p_t,
  _swigc__p_Two__TwoParmT_int_p_Concrete_const_p_t,
  _swigc__p_Two__TwoParmT_int_p_int_const_p_t,
  _swigc__p_Two__TwoParmT_int_p_int_p_t,
  _swigc__p_Two__TwoParmT_int_p_int_t,
  _swigc__p_Two__TwoParmT_int_pp_int_p_t,
  _swigc__p_Two__TwoParmT_void_p_Concrete_const_p_t,
  _swigc__p_char,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    size_t i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
  /* Create fast method lookup tables */
  
  SWIGINTERN void
  SWIG_Tcl_InstallMethodLookupTables(void) {
    size_t i;
    
    for (i = 0; i < swig_module.size; ++i) {
      swig_type_info *type = swig_module.type_initial[i];
      if (type->clientdata) {
        swig_class* klass = (swig_class*) type->clientdata;
        swig_method* meth;
        Tcl_InitHashTable(&(klass->hashtable), TCL_STRING_KEYS);
        for (meth = klass->methods; meth && meth->name; ++meth) {
          int newEntry;
          Tcl_HashEntry* hashentry = Tcl_CreateHashEntry(&(klass->hashtable), meth->name, &newEntry);
          Tcl_SetHashValue(hashentry, (ClientData)meth->method);
        }
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  size_t i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  /* (char*) cast is required to avoid compiler warning/error for Tcl < 8.4. */
  if (Tcl_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
#ifdef USE_TK_STUBS
  /* (char*) cast is required to avoid compiler warning/error. */
  if (Tk_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif
  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  SWIG_Tcl_InstallMethodLookupTables();
  
  
  return TCL_OK;
}
SWIGEXPORT int Template_partial_specialization_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

