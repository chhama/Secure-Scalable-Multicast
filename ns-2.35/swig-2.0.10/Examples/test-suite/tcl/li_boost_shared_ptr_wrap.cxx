/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGTCL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
  Tcl_HashTable       hashtable;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, TCL_GLOBAL_ONLY);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    Tcl_HashEntry* hashentry;
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    hashentry = Tcl_FindHashEntry(&(cls->hashtable), method);
    if (hashentry) {
        ClientData cd = Tcl_GetHashValue(hashentry);
        swig_wrapper method_wrapper = (swig_wrapper)cd;
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (method_wrapper)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if (thisvalue && (type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BaseT_int_double_t swig_types[0]
#define SWIGTYPE_p_MemberVariables swig_types[1]
#define SWIGTYPE_p_PairT_int_double_t swig_types[2]
#define SWIGTYPE_p_Space__IgnoredMultipleInheritBase swig_types[3]
#define SWIGTYPE_p_Space__Klass swig_types[4]
#define SWIGTYPE_p_Space__Klass2ndDerived swig_types[5]
#define SWIGTYPE_p_Space__Klass3rdDerived swig_types[6]
#define SWIGTYPE_p_Space__KlassDerived swig_types[7]
#define SWIGTYPE_p_SwigBoost__shared_ptrT_PairT_int_double_t_t swig_types[8]
#define SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass2ndDerived_t swig_types[9]
#define SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass3rdDerived_t swig_types[10]
#define SWIGTYPE_p_SwigBoost__shared_ptrT_Space__KlassDerived_t swig_types[11]
#define SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_const_t swig_types[12]
#define SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t swig_types[13]
#define SWIGTYPE_p_char swig_types[14]
#define SWIGTYPE_p_p_SwigBoost__shared_ptrT_Space__KlassDerived_t swig_types[15]
#define SWIGTYPE_p_p_SwigBoost__shared_ptrT_Space__Klass_t swig_types[16]
static swig_type_info *swig_types[18];
static swig_module_info swig_module = {swig_types, 17, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Li_boost_shared_ptr_Init
#define SWIG_name    "li_boost_shared_ptr"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x020010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif

/* Compatibility version for TCL stubs */
#ifndef SWIG_TCL_STUBS_VERSION
#define SWIG_TCL_STUBS_VERSION "8.1"
#endif



#include "boost/shared_ptr.hpp"
#include "swig_examples_lock.h"

// Uncomment macro below to turn on shared_ptr memory leak checking as described above
//#define SHARED_PTR_WRAPPER

#ifdef SHARED_PTR_WRAPPER
# include "shared_ptr_wrapper.h"
#endif


#ifndef SHARED_PTR_WRAPPER
# define SwigBoost boost
#endif


#include <string>


#include <iostream>
using namespace std;

static bool debug_shared = false;

namespace Space {

struct Klass {
  Klass() : value("EMPTY") { if (debug_shared) cout << "Klass() [" << value << "]" << endl; increment(); }

  Klass(const std::string &val) : value(val) { if (debug_shared) cout << "Klass(string) [" << value << "]" << endl; increment(); }

  virtual ~Klass() { if (debug_shared) cout << "~Klass() [" << value << "]" << endl; decrement(); }
  virtual std::string getValue() const { return value; }
  void append(const std::string &s) { value += s; }
  Klass(const Klass &other) : value(other.value) { if (debug_shared) cout << "Klass(const Klass&) [" << value << "]" << endl; increment(); }

  Klass &operator=(const Klass &other) { value = other.value; return *this; }
  static int getTotal_count() { return total_count; }

private:
  // lock increment and decrement as a destructor could be called at the same time as a 
  // new object is being created - C# / Java, at least, have finalizers run in a separate thread
  static SwigExamples::CriticalSection critical_section;
  static void increment() { SwigExamples::Lock lock(critical_section); total_count++; if (debug_shared) cout << "      ++xxxxx Klass::increment tot: " << total_count << endl;}
  static void decrement() { SwigExamples::Lock lock(critical_section); total_count--; if (debug_shared) cout << "      --xxxxx Klass::decrement tot: " << total_count << endl;}
  static int total_count;
  std::string value;
  int array[1024];
};
SwigExamples::CriticalSection Space::Klass::critical_section;

struct IgnoredMultipleInheritBase { 
  IgnoredMultipleInheritBase() : d(0.0), e(0.0) {}
  virtual ~IgnoredMultipleInheritBase() {} 
  double d; 
  double e;
  virtual void AVirtualMethod() {} 
};

// For most compilers, this use of multiple inheritance results in different derived and base class 
// pointer values ... for some more challenging tests :)
struct KlassDerived : IgnoredMultipleInheritBase, Klass {
  KlassDerived() : Klass() {}
  KlassDerived(const std::string &val) : Klass(val) {}
  KlassDerived(const KlassDerived &other) : Klass(other) {}
  virtual ~KlassDerived() {}
  virtual std::string getValue() const { return Klass::getValue() + "-Derived"; }
};
KlassDerived* derivedpointertest(KlassDerived* kd) {
  if (kd)
    kd->append(" derivedpointertest");
  return kd;
}
KlassDerived& derivedreftest(KlassDerived& kd) {
  kd.append(" derivedreftest");
  return kd;
}
SwigBoost::shared_ptr<KlassDerived> derivedsmartptrtest(SwigBoost::shared_ptr<KlassDerived> kd) {
  if (kd)
    kd->append(" derivedsmartptrtest");
  return kd;
}
SwigBoost::shared_ptr<KlassDerived>* derivedsmartptrpointertest(SwigBoost::shared_ptr<KlassDerived>* kd) {
  if (kd && *kd)
    (*kd)->append(" derivedsmartptrpointertest");
  return kd;
}
SwigBoost::shared_ptr<KlassDerived>* derivedsmartptrreftest(SwigBoost::shared_ptr<KlassDerived>* kd) {
  if (kd && *kd)
    (*kd)->append(" derivedsmartptrreftest");
  return kd;
}
SwigBoost::shared_ptr<KlassDerived>*& derivedsmartptrpointerreftest(SwigBoost::shared_ptr<KlassDerived>*& kd) {
  if (kd && *kd)
    (*kd)->append(" derivedsmartptrpointerreftest");
  return kd;
}

// 3 classes in inheritance chain test
struct Klass2ndDerived : Klass {
  Klass2ndDerived() : Klass() {}
  Klass2ndDerived(const std::string &val) : Klass(val) {}
};
struct Klass3rdDerived : IgnoredMultipleInheritBase, Klass2ndDerived {
  Klass3rdDerived() : Klass2ndDerived() {}
  Klass3rdDerived(const std::string &val) : Klass2ndDerived(val) {}
  virtual ~Klass3rdDerived() {}
  virtual std::string getValue() const { return Klass2ndDerived::getValue() + "-3rdDerived"; }
};

std::string test3rdupcast( SwigBoost::shared_ptr< Klass > k) {
  return k->getValue();
}



SwigBoost::shared_ptr<Klass> factorycreate() {
  return SwigBoost::shared_ptr<Klass>(new Klass("factorycreate"));
}
// smart pointer
SwigBoost::shared_ptr<Klass> smartpointertest(SwigBoost::shared_ptr<Klass> k) {
  if (k)
    k->append(" smartpointertest");
  return SwigBoost::shared_ptr<Klass>(k);
}
SwigBoost::shared_ptr<Klass>* smartpointerpointertest(SwigBoost::shared_ptr<Klass>* k) {
  if (k && *k)
    (*k)->append(" smartpointerpointertest");
  return k;
}
SwigBoost::shared_ptr<Klass>& smartpointerreftest(SwigBoost::shared_ptr<Klass>& k) {
  if (k)
    k->append(" smartpointerreftest");
  return k;
}
SwigBoost::shared_ptr<Klass>*& smartpointerpointerreftest(SwigBoost::shared_ptr<Klass>*& k) {
  if (k && *k)
    (*k)->append(" smartpointerpointerreftest");
  return k;
}
// const
SwigBoost::shared_ptr<const Klass> constsmartpointertest(SwigBoost::shared_ptr<const Klass> k) {
  return SwigBoost::shared_ptr<const Klass>(k);
}
SwigBoost::shared_ptr<const Klass>* constsmartpointerpointertest(SwigBoost::shared_ptr<const Klass>* k) {
  return k;
}
SwigBoost::shared_ptr<const Klass>& constsmartpointerreftest(SwigBoost::shared_ptr<const Klass>& k) {
  return k;
}
// plain pointer
Klass valuetest(Klass k) {
  k.append(" valuetest");
  return k;
}
Klass *pointertest(Klass *k) {
  if (k)
    k->append(" pointertest");
  return k;
}
Klass& reftest(Klass& k) {
  k.append(" reftest");
  return k;
}
Klass *const& pointerreftest(Klass *const& k) {
  k->append(" pointerreftest");
  return k;
}
// null
std::string nullsmartpointerpointertest(SwigBoost::shared_ptr<Klass>* k) {
  if (k && *k)
    return "not null";
  else if (!k)
    return "null smartpointer pointer";
  else if (!*k)
    return "null pointer";
  else
    return "also not null";
}
// $owner
Klass *pointerownertest() {
  return new Klass("pointerownertest");
}
SwigBoost::shared_ptr<Klass>* smartpointerpointerownertest() {
  return new SwigBoost::shared_ptr<Klass>(new Klass("smartpointerpointerownertest"));
}

// Provide overloads for Klass and derived classes as some language modules, eg Python, create an extra reference in
// the marshalling if an upcast to a base class is required.
long use_count(const SwigBoost::shared_ptr<Klass3rdDerived>& sptr) {
  return sptr.use_count();
}
long use_count(const SwigBoost::shared_ptr<Klass2ndDerived>& sptr) {
  return sptr.use_count();
}
long use_count(const SwigBoost::shared_ptr<KlassDerived>& sptr) {
  return sptr.use_count();
}
long use_count(const SwigBoost::shared_ptr<Klass>& sptr) {
  return sptr.use_count();
}
const SwigBoost::shared_ptr<Klass>& ref_1() { 
  static SwigBoost::shared_ptr<Klass> sptr;
  return sptr;
}

// overloading tests
std::string overload_rawbyval(int i) { return "int"; }
std::string overload_rawbyval(Klass k) { return "rawbyval"; }

std::string overload_rawbyref(int i) { return "int"; }
std::string overload_rawbyref(Klass &k) { return "rawbyref"; }

std::string overload_rawbyptr(int i) { return "int"; }
std::string overload_rawbyptr(Klass *k) { return "rawbyptr"; }

std::string overload_rawbyptrref(int i) { return "int"; }
std::string overload_rawbyptrref(Klass *const&k) { return "rawbyptrref"; }



std::string overload_smartbyval(int i) { return "int"; }
std::string overload_smartbyval(SwigBoost::shared_ptr<Klass> k) { return "smartbyval"; }

std::string overload_smartbyref(int i) { return "int"; }
std::string overload_smartbyref(SwigBoost::shared_ptr<Klass> &k) { return "smartbyref"; }

std::string overload_smartbyptr(int i) { return "int"; }
std::string overload_smartbyptr(SwigBoost::shared_ptr<Klass> *k) { return "smartbyptr"; }

std::string overload_smartbyptrref(int i) { return "int"; }
std::string overload_smartbyptrref(SwigBoost::shared_ptr<Klass> *&k) { return "smartbyptrref"; }

} // namespace Space



  #define SWIG_From_bool   Tcl_NewBooleanObj 


SWIGINTERN int
SWIG_AsVal_bool SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, bool *val)
{
  int v;
  if (Tcl_GetBooleanFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v ? true : false;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast< int >(size)) : NULL;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  int Space::Klass::total_count = 0;


struct MemberVariables {
  MemberVariables() : SmartMemberPointer(&SmartMemberValue), SmartMemberReference(SmartMemberValue), MemberPointer(0), MemberReference(MemberValue) {}
  SwigBoost::shared_ptr<Space::Klass> SmartMemberValue;
  SwigBoost::shared_ptr<Space::Klass> * SmartMemberPointer;
  SwigBoost::shared_ptr<Space::Klass> & SmartMemberReference;
  Space::Klass MemberValue;
  Space::Klass * MemberPointer;
  Space::Klass & MemberReference;
};

// Global variables
SwigBoost::shared_ptr<Space::Klass> GlobalSmartValue;
Space::Klass GlobalValue;
Space::Klass * GlobalPointer = 0;
Space::Klass & GlobalReference = GlobalValue;



template <class T1, class T2> struct Base {
  Space::Klass klassBase;
  T1 baseVal1;
  T2 baseVal2;
  Base(T1 t1, T2 t2) : baseVal1(t1*2), baseVal2(t2*2) {}
  virtual std::string getValue() const { return "Base<>"; };
};


SWIGINTERN int
SWIG_AsVal_double SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, double *val)
{
  double v;
  if (Tcl_GetDoubleFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   Tcl_NewDoubleObj 


template <class T1, class T2> struct Pair : Base<T1, T2> {
  Space::Klass klassPair;
  T1 val1;
  T2 val2;
  Pair(T1 t1, T2 t2) : Base<T1, T2>(t1, t2), val1(t1), val2(t2) {}
  virtual std::string getValue() const { return "Pair<>"; };
};
Pair<int, double> pair_id2(Pair<int, double> p) { return p; }
SwigBoost::shared_ptr< Pair<int, double> > pair_id1(SwigBoost::shared_ptr< Pair<int, double> > p) { return p; }


namespace SwigBoost {
  const int NOT_COUNTING = -123456;
  int shared_ptr_wrapper_count() { 
  #ifdef SHARED_PTR_WRAPPER
    return SwigBoost::SharedPtrWrapper::getTotalCount(); 
  #else
    return NOT_COUNTING;
  #endif
  }
  #ifdef SHARED_PTR_WRAPPER
  template<> std::string show_message(boost::shared_ptr<Space::Klass >*t) {
    if (!t)
      return "null shared_ptr!!!";
    if (boost::get_deleter<SWIG_null_deleter>(*t))
      return "Klass NULL DELETER"; // pointer may be dangling so cannot use it
    if (*t)
      return "Klass: " + (*t)->getValue();
    else
      return "Klass: NULL";
  }
  template<> std::string show_message(boost::shared_ptr<const Space::Klass >*t) {
    if (!t)
      return "null shared_ptr!!!";
    if (boost::get_deleter<SWIG_null_deleter>(*t))
      return "Klass NULL DELETER"; // pointer may be dangling so cannot use it
    if (*t)
      return "Klass: " + (*t)->getValue();
    else
      return "Klass: NULL";
  }
  template<> std::string show_message(boost::shared_ptr<Space::KlassDerived >*t) {
    if (!t)
      return "null shared_ptr!!!";
    if (boost::get_deleter<SWIG_null_deleter>(*t))
      return "KlassDerived NULL DELETER"; // pointer may be dangling so cannot use it
    if (*t)
      return "KlassDerived: " + (*t)->getValue();
    else
      return "KlassDerived: NULL";
  }
  template<> std::string show_message(boost::shared_ptr<const Space::KlassDerived >*t) {
    if (!t)
      return "null shared_ptr!!!";
    if (boost::get_deleter<SWIG_null_deleter>(*t))
      return "KlassDerived NULL DELETER"; // pointer may be dangling so cannot use it
    if (*t)
      return "KlassDerived: " + (*t)->getValue();
    else
      return "KlassDerived: NULL";
  }
  #endif
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN const char *_wrap_debug_shared_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_bool(static_cast< bool >(debug_shared));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_debug_shared_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    bool val;
    int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""debug_shared""' of type '""bool""'");
    }
    debug_shared = static_cast< bool >(val);
  }
  return NULL;
fail:
  return "debug_shared";
}


SWIGINTERN int
_wrap_new_Klass__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Klass ") == TCL_ERROR) SWIG_fail;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass" << endl;
    }
    result = (Space::Klass *)new Space::Klass();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Klass__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  Space::Klass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Klass val ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Klass" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Klass" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass" << endl;
    }
    result = (Space::Klass *)new Space::Klass((std::string const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass,0));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Klass(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Klass self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Space__Klass, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Klass" "', argument " "1"" of type '" "Space::Klass *""'"); 
  }
  arg1 = reinterpret_cast< Space::Klass * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~Klass" << endl;
    }
    delete arg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Klass_getValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Klass_getValue self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Space__Klass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Klass_getValue" "', argument " "1"" of type '" "Space::Klass const *""'"); 
  }
  arg1 = reinterpret_cast< Space::Klass * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling getValue" << endl;
    }
    result = ((Space::Klass const *)arg1)->getValue();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Klass_append(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Klass_append self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Space__Klass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Klass_append" "', argument " "1"" of type '" "Space::Klass *""'"); 
  }
  arg1 = reinterpret_cast< Space::Klass * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Klass_append" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Klass_append" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling append" << endl;
    }
    (arg1)->append((std::string const &)*arg2);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Klass__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Space::Klass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Klass other ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_Space__Klass,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Klass" "', argument " "1"" of type '" "Space::Klass const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Klass" "', argument " "1"" of type '" "Space::Klass const &""'"); 
  }
  arg1 = reinterpret_cast< Space::Klass * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass" << endl;
    }
    result = (Space::Klass *)new Space::Klass((Space::Klass const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Klass(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_Klass__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Space__Klass, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Klass__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Klass__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_Klass'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Space::Klass::Klass()\n"
    "    Space::Klass::Klass(std::string const &)\n"
    "    Space::Klass::Klass(Space::Klass const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Klass_getTotal_count(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":Klass_getTotal_count ") == TCL_ERROR) SWIG_fail;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::Klass::getTotal_count" << endl;
    }
    result = (int)Space::Klass::getTotal_count();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Klass(void *obj) {
Space::Klass *arg1 = (Space::Klass *) obj;
delete arg1;
}
static swig_method swig_Space_Klass_methods[] = {
    {"getValue", _wrap_Klass_getValue}, 
    {"append", _wrap_Klass_append}, 
    {0,0}
};
static swig_attribute swig_Space_Klass_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Space_Klass_bases[] = {0};
static const char * swig_Space_Klass_base_names[] = {0};
static swig_class _wrap_class_Space_Klass = { "Klass", &SWIGTYPE_p_Space__Klass,_wrap_new_Klass, swig_delete_Klass, swig_Space_Klass_methods, swig_Space_Klass_attributes, swig_Space_Klass_bases,swig_Space_Klass_base_names, &swig_module };
SWIGINTERN int
_wrap_new_KlassDerived__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::KlassDerived *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_KlassDerived ") == TCL_ERROR) SWIG_fail;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling KlassDerived" << endl;
    }
    result = (Space::KlassDerived *)new Space::KlassDerived();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__KlassDerived,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_KlassDerived__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  Space::KlassDerived *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_KlassDerived val ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KlassDerived" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KlassDerived" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling KlassDerived" << endl;
    }
    result = (Space::KlassDerived *)new Space::KlassDerived((std::string const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__KlassDerived,0));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_KlassDerived__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::KlassDerived *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Space::KlassDerived *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_KlassDerived other ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_Space__KlassDerived,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KlassDerived" "', argument " "1"" of type '" "Space::KlassDerived const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KlassDerived" "', argument " "1"" of type '" "Space::KlassDerived const &""'"); 
  }
  arg1 = reinterpret_cast< Space::KlassDerived * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling KlassDerived" << endl;
    }
    result = (Space::KlassDerived *)new Space::KlassDerived((Space::KlassDerived const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__KlassDerived,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_KlassDerived(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_KlassDerived__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Space__KlassDerived, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KlassDerived__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KlassDerived__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_KlassDerived'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Space::KlassDerived::KlassDerived()\n"
    "    Space::KlassDerived::KlassDerived(std::string const &)\n"
    "    Space::KlassDerived::KlassDerived(Space::KlassDerived const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_KlassDerived(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::KlassDerived *arg1 = (Space::KlassDerived *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_KlassDerived self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Space__KlassDerived, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KlassDerived" "', argument " "1"" of type '" "Space::KlassDerived *""'"); 
  }
  arg1 = reinterpret_cast< Space::KlassDerived * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~KlassDerived" << endl;
    }
    delete arg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_KlassDerived_getValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::KlassDerived *arg1 = (Space::KlassDerived *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:KlassDerived_getValue self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Space__KlassDerived, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KlassDerived_getValue" "', argument " "1"" of type '" "Space::KlassDerived const *""'"); 
  }
  arg1 = reinterpret_cast< Space::KlassDerived * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling getValue" << endl;
    }
    result = ((Space::KlassDerived const *)arg1)->getValue();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_KlassDerived(void *obj) {
Space::KlassDerived *arg1 = (Space::KlassDerived *) obj;
delete arg1;
}
static swig_method swig_Space_KlassDerived_methods[] = {
    {"getValue", _wrap_KlassDerived_getValue}, 
    {0,0}
};
static swig_attribute swig_Space_KlassDerived_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Space_KlassDerived_bases[] = {0,0};
static const char * swig_Space_KlassDerived_base_names[] = {"Space::Klass *",0};
static swig_class _wrap_class_Space_KlassDerived = { "KlassDerived", &SWIGTYPE_p_Space__KlassDerived,_wrap_new_KlassDerived, swig_delete_KlassDerived, swig_Space_KlassDerived_methods, swig_Space_KlassDerived_attributes, swig_Space_KlassDerived_bases,swig_Space_KlassDerived_base_names, &swig_module };
SWIGINTERN int
_wrap_derivedpointertest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::KlassDerived *arg1 = (Space::KlassDerived *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Space::KlassDerived *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:derivedpointertest kd ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Space__KlassDerived, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "derivedpointertest" "', argument " "1"" of type '" "Space::KlassDerived *""'"); 
  }
  arg1 = reinterpret_cast< Space::KlassDerived * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::derivedpointertest" << endl;
    }
    result = (Space::KlassDerived *)Space::derivedpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__KlassDerived,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_derivedreftest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::KlassDerived *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Space::KlassDerived *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:derivedreftest kd ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_Space__KlassDerived,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "derivedreftest" "', argument " "1"" of type '" "Space::KlassDerived &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "derivedreftest" "', argument " "1"" of type '" "Space::KlassDerived &""'"); 
  }
  arg1 = reinterpret_cast< Space::KlassDerived * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::derivedreftest" << endl;
    }
    result = (Space::KlassDerived *) &Space::derivedreftest(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__KlassDerived,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_derivedsmartptrtest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigValueWrapper< SwigBoost::shared_ptr< Space::KlassDerived > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< SwigBoost::shared_ptr< Space::KlassDerived > > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:derivedsmartptrtest kd ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__KlassDerived_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "derivedsmartptrtest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::KlassDerived >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "derivedsmartptrtest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::KlassDerived >""'");
    } else {
      arg1 = *(reinterpret_cast< SwigBoost::shared_ptr< Space::KlassDerived > * >(argp1));
    }
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::derivedsmartptrtest" << endl;
    }
    result = Space::derivedsmartptrtest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new SwigBoost::shared_ptr< Space::KlassDerived >(static_cast< const SwigBoost::shared_ptr< Space::KlassDerived >& >(result))), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__KlassDerived_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_derivedsmartptrpointertest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::KlassDerived > *arg1 = (SwigBoost::shared_ptr< Space::KlassDerived > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:derivedsmartptrpointertest kd ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SwigBoost__shared_ptrT_Space__KlassDerived_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "derivedsmartptrpointertest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::KlassDerived > *""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::KlassDerived > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::derivedsmartptrpointertest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::KlassDerived > *)Space::derivedsmartptrpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__KlassDerived_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_derivedsmartptrreftest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::KlassDerived > *arg1 = (SwigBoost::shared_ptr< Space::KlassDerived > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:derivedsmartptrreftest kd ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SwigBoost__shared_ptrT_Space__KlassDerived_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "derivedsmartptrreftest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::KlassDerived > *""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::KlassDerived > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::derivedsmartptrreftest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::KlassDerived > *)Space::derivedsmartptrreftest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__KlassDerived_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_derivedsmartptrpointerreftest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::KlassDerived > **arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:derivedsmartptrpointerreftest kd ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_p_SwigBoost__shared_ptrT_Space__KlassDerived_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "derivedsmartptrpointerreftest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::KlassDerived > *&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "derivedsmartptrpointerreftest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::KlassDerived > *&""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::KlassDerived > ** >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::derivedsmartptrpointerreftest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::KlassDerived > **) &Space::derivedsmartptrpointerreftest(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_p_SwigBoost__shared_ptrT_Space__KlassDerived_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Klass2ndDerived__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass2ndDerived *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Klass2ndDerived ") == TCL_ERROR) SWIG_fail;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass2ndDerived" << endl;
    }
    result = (Space::Klass2ndDerived *)new Space::Klass2ndDerived();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass2ndDerived,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Klass2ndDerived__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  Space::Klass2ndDerived *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Klass2ndDerived val ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Klass2ndDerived" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Klass2ndDerived" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass2ndDerived" << endl;
    }
    result = (Space::Klass2ndDerived *)new Space::Klass2ndDerived((std::string const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass2ndDerived,0));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Klass2ndDerived(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_Klass2ndDerived__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Klass2ndDerived__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_Klass2ndDerived'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Space::Klass2ndDerived::Klass2ndDerived()\n"
    "    Space::Klass2ndDerived::Klass2ndDerived(std::string const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Klass2ndDerived(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass2ndDerived *arg1 = (Space::Klass2ndDerived *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Klass2ndDerived self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Space__Klass2ndDerived, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Klass2ndDerived" "', argument " "1"" of type '" "Space::Klass2ndDerived *""'"); 
  }
  arg1 = reinterpret_cast< Space::Klass2ndDerived * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~Klass2ndDerived" << endl;
    }
    delete arg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Klass2ndDerived(void *obj) {
Space::Klass2ndDerived *arg1 = (Space::Klass2ndDerived *) obj;
delete arg1;
}
static swig_method swig_Space_Klass2ndDerived_methods[] = {
    {0,0}
};
static swig_attribute swig_Space_Klass2ndDerived_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Space_Klass2ndDerived_bases[] = {0,0};
static const char * swig_Space_Klass2ndDerived_base_names[] = {"Space::Klass *",0};
static swig_class _wrap_class_Space_Klass2ndDerived = { "Klass2ndDerived", &SWIGTYPE_p_Space__Klass2ndDerived,_wrap_new_Klass2ndDerived, swig_delete_Klass2ndDerived, swig_Space_Klass2ndDerived_methods, swig_Space_Klass2ndDerived_attributes, swig_Space_Klass2ndDerived_bases,swig_Space_Klass2ndDerived_base_names, &swig_module };
SWIGINTERN int
_wrap_new_Klass3rdDerived__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass3rdDerived *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Klass3rdDerived ") == TCL_ERROR) SWIG_fail;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass3rdDerived" << endl;
    }
    result = (Space::Klass3rdDerived *)new Space::Klass3rdDerived();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass3rdDerived,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Klass3rdDerived__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  Space::Klass3rdDerived *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Klass3rdDerived val ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Klass3rdDerived" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Klass3rdDerived" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass3rdDerived" << endl;
    }
    result = (Space::Klass3rdDerived *)new Space::Klass3rdDerived((std::string const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass3rdDerived,0));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Klass3rdDerived(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_Klass3rdDerived__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Klass3rdDerived__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_Klass3rdDerived'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Space::Klass3rdDerived::Klass3rdDerived()\n"
    "    Space::Klass3rdDerived::Klass3rdDerived(std::string const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Klass3rdDerived(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass3rdDerived *arg1 = (Space::Klass3rdDerived *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Klass3rdDerived self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Space__Klass3rdDerived, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Klass3rdDerived" "', argument " "1"" of type '" "Space::Klass3rdDerived *""'"); 
  }
  arg1 = reinterpret_cast< Space::Klass3rdDerived * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~Klass3rdDerived" << endl;
    }
    delete arg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Klass3rdDerived_getValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass3rdDerived *arg1 = (Space::Klass3rdDerived *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Klass3rdDerived_getValue self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Space__Klass3rdDerived, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Klass3rdDerived_getValue" "', argument " "1"" of type '" "Space::Klass3rdDerived const *""'"); 
  }
  arg1 = reinterpret_cast< Space::Klass3rdDerived * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling getValue" << endl;
    }
    result = ((Space::Klass3rdDerived const *)arg1)->getValue();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Klass3rdDerived(void *obj) {
Space::Klass3rdDerived *arg1 = (Space::Klass3rdDerived *) obj;
delete arg1;
}
static swig_method swig_Space_Klass3rdDerived_methods[] = {
    {"getValue", _wrap_Klass3rdDerived_getValue}, 
    {0,0}
};
static swig_attribute swig_Space_Klass3rdDerived_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Space_Klass3rdDerived_bases[] = {0,0};
static const char * swig_Space_Klass3rdDerived_base_names[] = {"Space::Klass2ndDerived *",0};
static swig_class _wrap_class_Space_Klass3rdDerived = { "Klass3rdDerived", &SWIGTYPE_p_Space__Klass3rdDerived,_wrap_new_Klass3rdDerived, swig_delete_Klass3rdDerived, swig_Space_Klass3rdDerived_methods, swig_Space_Klass3rdDerived_attributes, swig_Space_Klass3rdDerived_bases,swig_Space_Klass3rdDerived_base_names, &swig_module };
SWIGINTERN int
_wrap_test3rdupcast(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigValueWrapper< SwigBoost::shared_ptr< Space::Klass > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:test3rdupcast k ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "test3rdupcast" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "test3rdupcast" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass >""'");
    } else {
      arg1 = *(reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > * >(argp1));
    }
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::test3rdupcast" << endl;
    }
    result = Space::test3rdupcast(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_factorycreate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigValueWrapper< SwigBoost::shared_ptr< Space::Klass > > result;
  
  if (SWIG_GetArgs(interp, objc, objv,":factorycreate ") == TCL_ERROR) SWIG_fail;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::factorycreate" << endl;
    }
    result = Space::factorycreate();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new SwigBoost::shared_ptr< Space::Klass >(static_cast< const SwigBoost::shared_ptr< Space::Klass >& >(result))), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_smartpointertest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigValueWrapper< SwigBoost::shared_ptr< Space::Klass > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< SwigBoost::shared_ptr< Space::Klass > > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:smartpointertest k ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "smartpointertest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "smartpointertest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass >""'");
    } else {
      arg1 = *(reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > * >(argp1));
    }
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::smartpointertest" << endl;
    }
    result = Space::smartpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new SwigBoost::shared_ptr< Space::Klass >(static_cast< const SwigBoost::shared_ptr< Space::Klass >& >(result))), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_smartpointerpointertest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass > *arg1 = (SwigBoost::shared_ptr< Space::Klass > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:smartpointerpointertest k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "smartpointerpointertest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass > *""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::smartpointerpointertest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass > *)Space::smartpointerpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_smartpointerreftest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:smartpointerreftest k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "smartpointerreftest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "smartpointerreftest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass > &""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::smartpointerreftest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass > *) &Space::smartpointerreftest(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_smartpointerpointerreftest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass > **arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:smartpointerpointerreftest k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_p_SwigBoost__shared_ptrT_Space__Klass_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "smartpointerpointerreftest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass > *&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "smartpointerpointerreftest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass > *&""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > ** >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::smartpointerpointerreftest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass > **) &Space::smartpointerpointerreftest(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_p_SwigBoost__shared_ptrT_Space__Klass_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_constsmartpointertest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigValueWrapper< SwigBoost::shared_ptr< Space::Klass const > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< SwigBoost::shared_ptr< Space::Klass const > > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:constsmartpointertest k ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_const_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constsmartpointertest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass const >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "constsmartpointertest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass const >""'");
    } else {
      arg1 = *(reinterpret_cast< SwigBoost::shared_ptr< Space::Klass const > * >(argp1));
    }
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::constsmartpointertest" << endl;
    }
    result = Space::constsmartpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new SwigBoost::shared_ptr< Space::Klass const >(static_cast< const SwigBoost::shared_ptr< Space::Klass const >& >(result))), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_const_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_constsmartpointerpointertest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass const > *arg1 = (SwigBoost::shared_ptr< Space::Klass const > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass const > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:constsmartpointerpointertest k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_const_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constsmartpointerpointertest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass const > *""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass const > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::constsmartpointerpointertest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass const > *)Space::constsmartpointerpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_const_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_constsmartpointerreftest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass const > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass const > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:constsmartpointerreftest k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_const_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "constsmartpointerreftest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass const > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "constsmartpointerreftest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass const > &""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass const > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::constsmartpointerreftest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass const > *) &Space::constsmartpointerreftest(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_const_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_valuetest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  Space::Klass result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:valuetest k ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_Space__Klass,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "valuetest" "', argument " "1"" of type '" "Space::Klass""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "valuetest" "', argument " "1"" of type '" "Space::Klass""'");
    } else {
      arg1 = *(reinterpret_cast< Space::Klass * >(argp1));
    }
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::valuetest" << endl;
    }
    result = Space::valuetest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new Space::Klass(static_cast< const Space::Klass& >(result))), SWIGTYPE_p_Space__Klass, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pointertest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Space::Klass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pointertest k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Space__Klass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pointertest" "', argument " "1"" of type '" "Space::Klass *""'"); 
  }
  arg1 = reinterpret_cast< Space::Klass * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::pointertest" << endl;
    }
    result = (Space::Klass *)Space::pointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_reftest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Space::Klass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:reftest k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_Space__Klass,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "reftest" "', argument " "1"" of type '" "Space::Klass &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "reftest" "', argument " "1"" of type '" "Space::Klass &""'"); 
  }
  arg1 = reinterpret_cast< Space::Klass * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::reftest" << endl;
    }
    result = (Space::Klass *) &Space::reftest(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pointerreftest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass **arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Space::Klass *temp1 ;
  Space::Klass **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pointerreftest k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_Space__Klass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pointerreftest" "', argument " "1"" of type '" "Space::Klass *""'"); 
  }
  temp1 = reinterpret_cast< Space::Klass * >(argp1);
  arg1 = reinterpret_cast< Space::Klass ** >(&temp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::pointerreftest" << endl;
    }
    result = (Space::Klass **) &Space::pointerreftest((Space::Klass *const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_Space__Klass, 0 |  0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_nullsmartpointerpointertest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass > *arg1 = (SwigBoost::shared_ptr< Space::Klass > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:nullsmartpointerpointertest k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nullsmartpointerpointertest" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass > *""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::nullsmartpointerpointertest" << endl;
    }
    result = Space::nullsmartpointerpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pointerownertest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pointerownertest ") == TCL_ERROR) SWIG_fail;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::pointerownertest" << endl;
    }
    result = (Space::Klass *)Space::pointerownertest();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_smartpointerpointerownertest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":smartpointerpointerownertest ") == TCL_ERROR) SWIG_fail;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::smartpointerpointerownertest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass > *)Space::smartpointerpointerownertest();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_use_count__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass3rdDerived > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:use_count sptr ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass3rdDerived_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "use_count" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass3rdDerived > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "use_count" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass3rdDerived > const &""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass3rdDerived > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::use_count" << endl;
    }
    result = (long)Space::use_count((SwigBoost::shared_ptr< Space::Klass3rdDerived > const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_use_count__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass2ndDerived > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:use_count sptr ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass2ndDerived_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "use_count" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass2ndDerived > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "use_count" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass2ndDerived > const &""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass2ndDerived > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::use_count" << endl;
    }
    result = (long)Space::use_count((SwigBoost::shared_ptr< Space::Klass2ndDerived > const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_use_count__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::KlassDerived > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:use_count sptr ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__KlassDerived_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "use_count" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::KlassDerived > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "use_count" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::KlassDerived > const &""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::KlassDerived > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::use_count" << endl;
    }
    result = (long)Space::use_count((SwigBoost::shared_ptr< Space::KlassDerived > const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_use_count__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:use_count sptr ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "use_count" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "use_count" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass > const &""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::use_count" << endl;
    }
    result = (long)Space::use_count((SwigBoost::shared_ptr< Space::Klass > const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_use_count(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass3rdDerived_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_use_count__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass2ndDerived_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_use_count__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__KlassDerived_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_use_count__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_use_count__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'use_count'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Space::use_count(SwigBoost::shared_ptr< Space::Klass3rdDerived > const &)\n"
    "    Space::use_count(SwigBoost::shared_ptr< Space::Klass2ndDerived > const &)\n"
    "    Space::use_count(SwigBoost::shared_ptr< Space::KlassDerived > const &)\n"
    "    Space::use_count(SwigBoost::shared_ptr< Space::Klass > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ref_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":ref_1 ") == TCL_ERROR) SWIG_fail;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::ref_1" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass > *) &Space::ref_1();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_rawbyval__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_rawbyval i ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "overload_rawbyval" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyval" << endl;
    }
    result = Space::overload_rawbyval(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_rawbyval__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_rawbyval k ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_Space__Klass,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "overload_rawbyval" "', argument " "1"" of type '" "Space::Klass""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "overload_rawbyval" "', argument " "1"" of type '" "Space::Klass""'");
    } else {
      arg1 = *(reinterpret_cast< Space::Klass * >(argp1));
    }
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyval" << endl;
    }
    result = Space::overload_rawbyval(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_rawbyval(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Space__Klass, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_overload_rawbyval__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_overload_rawbyval__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'overload_rawbyval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Space::overload_rawbyval(int)\n"
    "    Space::overload_rawbyval(Space::Klass)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_rawbyref__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_rawbyref i ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "overload_rawbyref" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyref" << endl;
    }
    result = Space::overload_rawbyref(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_rawbyref__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_rawbyref k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_Space__Klass,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "overload_rawbyref" "', argument " "1"" of type '" "Space::Klass &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "overload_rawbyref" "', argument " "1"" of type '" "Space::Klass &""'"); 
  }
  arg1 = reinterpret_cast< Space::Klass * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyref" << endl;
    }
    result = Space::overload_rawbyref(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_rawbyref(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Space__Klass, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_overload_rawbyref__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_overload_rawbyref__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'overload_rawbyref'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Space::overload_rawbyref(int)\n"
    "    Space::overload_rawbyref(Space::Klass &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_rawbyptr__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_rawbyptr i ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "overload_rawbyptr" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyptr" << endl;
    }
    result = Space::overload_rawbyptr(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_rawbyptr__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_rawbyptr k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Space__Klass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "overload_rawbyptr" "', argument " "1"" of type '" "Space::Klass *""'"); 
  }
  arg1 = reinterpret_cast< Space::Klass * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyptr" << endl;
    }
    result = Space::overload_rawbyptr(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_rawbyptr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Space__Klass, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_overload_rawbyptr__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_overload_rawbyptr__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'overload_rawbyptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Space::overload_rawbyptr(int)\n"
    "    Space::overload_rawbyptr(Space::Klass *)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_rawbyptrref__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_rawbyptrref i ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "overload_rawbyptrref" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyptrref" << endl;
    }
    result = Space::overload_rawbyptrref(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_rawbyptrref__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Space::Klass **arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Space::Klass *temp1 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_rawbyptrref k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_Space__Klass, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "overload_rawbyptrref" "', argument " "1"" of type '" "Space::Klass *""'"); 
  }
  temp1 = reinterpret_cast< Space::Klass * >(argp1);
  arg1 = reinterpret_cast< Space::Klass ** >(&temp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyptrref" << endl;
    }
    result = Space::overload_rawbyptrref((Space::Klass *const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_rawbyptrref(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Space__Klass, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_overload_rawbyptrref__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_overload_rawbyptrref__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'overload_rawbyptrref'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Space::overload_rawbyptrref(int)\n"
    "    Space::overload_rawbyptrref(Space::Klass *const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_smartbyval__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_smartbyval i ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "overload_smartbyval" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyval" << endl;
    }
    result = Space::overload_smartbyval(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_smartbyval__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigValueWrapper< SwigBoost::shared_ptr< Space::Klass > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_smartbyval k ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "overload_smartbyval" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "overload_smartbyval" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass >""'");
    } else {
      arg1 = *(reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > * >(argp1));
    }
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyval" << endl;
    }
    result = Space::overload_smartbyval(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_smartbyval(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_overload_smartbyval__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_overload_smartbyval__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'overload_smartbyval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Space::overload_smartbyval(int)\n"
    "    Space::overload_smartbyval(SwigBoost::shared_ptr< Space::Klass >)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_smartbyref__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_smartbyref i ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "overload_smartbyref" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyref" << endl;
    }
    result = Space::overload_smartbyref(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_smartbyref__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_smartbyref k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "overload_smartbyref" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "overload_smartbyref" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass > &""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyref" << endl;
    }
    result = Space::overload_smartbyref(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_smartbyref(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_overload_smartbyref__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_overload_smartbyref__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'overload_smartbyref'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Space::overload_smartbyref(int)\n"
    "    Space::overload_smartbyref(SwigBoost::shared_ptr< Space::Klass > &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_smartbyptr__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_smartbyptr i ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "overload_smartbyptr" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyptr" << endl;
    }
    result = Space::overload_smartbyptr(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_smartbyptr__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass > *arg1 = (SwigBoost::shared_ptr< Space::Klass > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_smartbyptr k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "overload_smartbyptr" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass > *""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyptr" << endl;
    }
    result = Space::overload_smartbyptr(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_smartbyptr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_overload_smartbyptr__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_overload_smartbyptr__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'overload_smartbyptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Space::overload_smartbyptr(int)\n"
    "    Space::overload_smartbyptr(SwigBoost::shared_ptr< Space::Klass > *)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_smartbyptrref__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_smartbyptrref i ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "overload_smartbyptrref" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyptrref" << endl;
    }
    result = Space::overload_smartbyptrref(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_smartbyptrref__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigBoost::shared_ptr< Space::Klass > **arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:overload_smartbyptrref k ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_p_SwigBoost__shared_ptrT_Space__Klass_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "overload_smartbyptrref" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass > *&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "overload_smartbyptrref" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Space::Klass > *&""'"); 
  }
  arg1 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > ** >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyptrref" << endl;
    }
    result = Space::overload_smartbyptrref(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_overload_smartbyptrref(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_p_SwigBoost__shared_ptrT_Space__Klass_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_overload_smartbyptrref__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_overload_smartbyptrref__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'overload_smartbyptrref'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Space::overload_smartbyptrref(int)\n"
    "    Space::overload_smartbyptrref(SwigBoost::shared_ptr< Space::Klass > *&)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_MemberVariables(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_MemberVariables ") == TCL_ERROR) SWIG_fail;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling MemberVariables" << endl;
    }
    result = (MemberVariables *)new MemberVariables();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_MemberVariables,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MemberVariables_SmartMemberValue_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *arg2 = (SwigBoost::shared_ptr< Space::Klass > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MemberVariables_SmartMemberValue_set self SmartMemberValue ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MemberVariables, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemberVariables_SmartMemberValue_set" "', argument " "1"" of type '" "MemberVariables *""'"); 
  }
  arg1 = reinterpret_cast< MemberVariables * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MemberVariables_SmartMemberValue_set" "', argument " "2"" of type '" "SwigBoost::shared_ptr< Space::Klass > *""'"); 
  }
  arg2 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > * >(argp2);
  if (arg1) (arg1)->SmartMemberValue = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MemberVariables_SmartMemberValue_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MemberVariables_SmartMemberValue_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MemberVariables, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemberVariables_SmartMemberValue_get" "', argument " "1"" of type '" "MemberVariables *""'"); 
  }
  arg1 = reinterpret_cast< MemberVariables * >(argp1);
  result = (SwigBoost::shared_ptr< Space::Klass > *)& ((arg1)->SmartMemberValue);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MemberVariables_SmartMemberPointer_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *arg2 = (SwigBoost::shared_ptr< Space::Klass > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MemberVariables_SmartMemberPointer_set self SmartMemberPointer ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MemberVariables, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemberVariables_SmartMemberPointer_set" "', argument " "1"" of type '" "MemberVariables *""'"); 
  }
  arg1 = reinterpret_cast< MemberVariables * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MemberVariables_SmartMemberPointer_set" "', argument " "2"" of type '" "SwigBoost::shared_ptr< Space::Klass > *""'"); 
  }
  arg2 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > * >(argp2);
  if (arg1) (arg1)->SmartMemberPointer = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MemberVariables_SmartMemberPointer_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MemberVariables_SmartMemberPointer_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MemberVariables, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemberVariables_SmartMemberPointer_get" "', argument " "1"" of type '" "MemberVariables *""'"); 
  }
  arg1 = reinterpret_cast< MemberVariables * >(argp1);
  result = (SwigBoost::shared_ptr< Space::Klass > *) ((arg1)->SmartMemberPointer);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MemberVariables_SmartMemberReference_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MemberVariables_SmartMemberReference_set self SmartMemberReference ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MemberVariables, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemberVariables_SmartMemberReference_set" "', argument " "1"" of type '" "MemberVariables *""'"); 
  }
  arg1 = reinterpret_cast< MemberVariables * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MemberVariables_SmartMemberReference_set" "', argument " "2"" of type '" "SwigBoost::shared_ptr< Space::Klass > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MemberVariables_SmartMemberReference_set" "', argument " "2"" of type '" "SwigBoost::shared_ptr< Space::Klass > &""'"); 
  }
  arg2 = reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > * >(argp2);
  if (arg1) (arg1)->SmartMemberReference = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MemberVariables_SmartMemberReference_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MemberVariables_SmartMemberReference_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MemberVariables, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemberVariables_SmartMemberReference_get" "', argument " "1"" of type '" "MemberVariables *""'"); 
  }
  arg1 = reinterpret_cast< MemberVariables * >(argp1);
  result = (SwigBoost::shared_ptr< Space::Klass > *) &(SwigBoost::shared_ptr< Space::Klass > &) ((arg1)->SmartMemberReference);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MemberVariables_MemberValue_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  Space::Klass *arg2 = (Space::Klass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MemberVariables_MemberValue_set self MemberValue ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MemberVariables, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemberVariables_MemberValue_set" "', argument " "1"" of type '" "MemberVariables *""'"); 
  }
  arg1 = reinterpret_cast< MemberVariables * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Space__Klass, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MemberVariables_MemberValue_set" "', argument " "2"" of type '" "Space::Klass *""'"); 
  }
  arg2 = reinterpret_cast< Space::Klass * >(argp2);
  if (arg1) (arg1)->MemberValue = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MemberVariables_MemberValue_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Space::Klass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MemberVariables_MemberValue_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MemberVariables, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemberVariables_MemberValue_get" "', argument " "1"" of type '" "MemberVariables *""'"); 
  }
  arg1 = reinterpret_cast< MemberVariables * >(argp1);
  result = (Space::Klass *)& ((arg1)->MemberValue);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MemberVariables_MemberPointer_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  Space::Klass *arg2 = (Space::Klass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MemberVariables_MemberPointer_set self MemberPointer ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MemberVariables, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemberVariables_MemberPointer_set" "', argument " "1"" of type '" "MemberVariables *""'"); 
  }
  arg1 = reinterpret_cast< MemberVariables * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Space__Klass, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MemberVariables_MemberPointer_set" "', argument " "2"" of type '" "Space::Klass *""'"); 
  }
  arg2 = reinterpret_cast< Space::Klass * >(argp2);
  if (arg1) (arg1)->MemberPointer = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MemberVariables_MemberPointer_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Space::Klass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MemberVariables_MemberPointer_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MemberVariables, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemberVariables_MemberPointer_get" "', argument " "1"" of type '" "MemberVariables *""'"); 
  }
  arg1 = reinterpret_cast< MemberVariables * >(argp1);
  result = (Space::Klass *) ((arg1)->MemberPointer);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MemberVariables_MemberReference_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  Space::Klass *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MemberVariables_MemberReference_set self MemberReference ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MemberVariables, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemberVariables_MemberReference_set" "', argument " "1"" of type '" "MemberVariables *""'"); 
  }
  arg1 = reinterpret_cast< MemberVariables * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Space__Klass,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MemberVariables_MemberReference_set" "', argument " "2"" of type '" "Space::Klass &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MemberVariables_MemberReference_set" "', argument " "2"" of type '" "Space::Klass &""'"); 
  }
  arg2 = reinterpret_cast< Space::Klass * >(argp2);
  if (arg1) (arg1)->MemberReference = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MemberVariables_MemberReference_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Space::Klass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MemberVariables_MemberReference_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MemberVariables, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemberVariables_MemberReference_get" "', argument " "1"" of type '" "MemberVariables *""'"); 
  }
  arg1 = reinterpret_cast< MemberVariables * >(argp1);
  result = (Space::Klass *) &(Space::Klass &) ((arg1)->MemberReference);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_MemberVariables(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_MemberVariables self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MemberVariables, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MemberVariables" "', argument " "1"" of type '" "MemberVariables *""'"); 
  }
  arg1 = reinterpret_cast< MemberVariables * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~MemberVariables" << endl;
    }
    delete arg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_MemberVariables(void *obj) {
MemberVariables *arg1 = (MemberVariables *) obj;
delete arg1;
}
static swig_method swig_MemberVariables_methods[] = {
    {0,0}
};
static swig_attribute swig_MemberVariables_attributes[] = {
    { "-SmartMemberValue",_wrap_MemberVariables_SmartMemberValue_get, _wrap_MemberVariables_SmartMemberValue_set},
    { "-SmartMemberPointer",_wrap_MemberVariables_SmartMemberPointer_get, _wrap_MemberVariables_SmartMemberPointer_set},
    { "-SmartMemberReference",_wrap_MemberVariables_SmartMemberReference_get, _wrap_MemberVariables_SmartMemberReference_set},
    { "-MemberValue",_wrap_MemberVariables_MemberValue_get, _wrap_MemberVariables_MemberValue_set},
    { "-MemberPointer",_wrap_MemberVariables_MemberPointer_get, _wrap_MemberVariables_MemberPointer_set},
    { "-MemberReference",_wrap_MemberVariables_MemberReference_get, _wrap_MemberVariables_MemberReference_set},
    {0,0,0}
};
static swig_class *swig_MemberVariables_bases[] = {0};
static const char * swig_MemberVariables_base_names[] = {0};
static swig_class _wrap_class_MemberVariables = { "MemberVariables", &SWIGTYPE_p_MemberVariables,_wrap_new_MemberVariables, swig_delete_MemberVariables, swig_MemberVariables_methods, swig_MemberVariables_attributes, swig_MemberVariables_bases,swig_MemberVariables_base_names, &swig_module };
SWIGINTERN const char *_wrap_GlobalSmartValue_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&GlobalSmartValue), SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_GlobalSmartValue_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_SwigBoost__shared_ptrT_Space__Klass_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""GlobalSmartValue""' of type '""SwigBoost::shared_ptr< Space::Klass >""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""GlobalSmartValue""' of type '""SwigBoost::shared_ptr< Space::Klass >""'");
    } else {
      GlobalSmartValue = *(reinterpret_cast< SwigBoost::shared_ptr< Space::Klass > * >(argp));
    }
  }
  return NULL;
fail:
  return "GlobalSmartValue";
}


SWIGINTERN const char *_wrap_GlobalValue_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&GlobalValue), SWIGTYPE_p_Space__Klass, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_GlobalValue_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_Space__Klass,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""GlobalValue""' of type '""Space::Klass""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""GlobalValue""' of type '""Space::Klass""'");
    } else {
      GlobalValue = *(reinterpret_cast< Space::Klass * >(argp));
    }
  }
  return NULL;
fail:
  return "GlobalValue";
}


SWIGINTERN const char *_wrap_GlobalPointer_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewPointerObj(SWIG_as_voidptr(GlobalPointer), SWIGTYPE_p_Space__Klass,  0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_GlobalPointer_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_Space__Klass,  0 );  
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""GlobalPointer""' of type '""Space::Klass *""'");
    }
    GlobalPointer = reinterpret_cast< Space::Klass * >(argp);
  }
  return NULL;
fail:
  return "GlobalPointer";
}


SWIGINTERN const char *_wrap_GlobalReference_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewPointerObj(SWIG_as_voidptr(&GlobalReference), SWIGTYPE_p_Space__Klass,  0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_GlobalReference_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_Space__Klass,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""GlobalReference""' of type '""Space::Klass &""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""GlobalReference""' of type '""Space::Klass &""'");
    }
    GlobalReference = *(reinterpret_cast< Space::Klass * >(argp));
  }
  return NULL;
fail:
  return "GlobalReference";
}


SWIGINTERN int
_wrap_BaseIntDouble_klassBase_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  Space::Klass *arg2 = (Space::Klass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:BaseIntDouble_klassBase_set self klassBase ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_BaseT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseIntDouble_klassBase_set" "', argument " "1"" of type '" "Base< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Base< int,double > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Space__Klass, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseIntDouble_klassBase_set" "', argument " "2"" of type '" "Space::Klass *""'"); 
  }
  arg2 = reinterpret_cast< Space::Klass * >(argp2);
  if (arg1) (arg1)->klassBase = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BaseIntDouble_klassBase_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Space::Klass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:BaseIntDouble_klassBase_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_BaseT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseIntDouble_klassBase_get" "', argument " "1"" of type '" "Base< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Base< int,double > * >(argp1);
  result = (Space::Klass *)& ((arg1)->klassBase);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BaseIntDouble_baseVal1_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:BaseIntDouble_baseVal1_set self baseVal1 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_BaseT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseIntDouble_baseVal1_set" "', argument " "1"" of type '" "Base< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Base< int,double > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseIntDouble_baseVal1_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->baseVal1 = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BaseIntDouble_baseVal1_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:BaseIntDouble_baseVal1_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_BaseT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseIntDouble_baseVal1_get" "', argument " "1"" of type '" "Base< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Base< int,double > * >(argp1);
  result = (int) ((arg1)->baseVal1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BaseIntDouble_baseVal2_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:BaseIntDouble_baseVal2_set self baseVal2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_BaseT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseIntDouble_baseVal2_set" "', argument " "1"" of type '" "Base< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Base< int,double > * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseIntDouble_baseVal2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->baseVal2 = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BaseIntDouble_baseVal2_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:BaseIntDouble_baseVal2_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_BaseT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseIntDouble_baseVal2_get" "', argument " "1"" of type '" "Base< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Base< int,double > * >(argp1);
  result = (double) ((arg1)->baseVal2);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_BaseIntDouble(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Base< int,double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_BaseIntDouble t1 t2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BaseIntDouble" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BaseIntDouble" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Base<(int,double)>" << endl;
    }
    result = (Base< int,double > *)new Base< int,double >(arg1,arg2);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_BaseT_int_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BaseIntDouble_getValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:BaseIntDouble_getValue self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_BaseT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseIntDouble_getValue" "', argument " "1"" of type '" "Base< int,double > const *""'"); 
  }
  arg1 = reinterpret_cast< Base< int,double > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling getValue" << endl;
    }
    result = ((Base< int,double > const *)arg1)->getValue();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_BaseIntDouble(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_BaseIntDouble self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_BaseT_int_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseIntDouble" "', argument " "1"" of type '" "Base< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Base< int,double > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~Base<(int,double)>" << endl;
    }
    delete arg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_BaseIntDouble(void *obj) {
Base< int,double > *arg1 = (Base< int,double > *) obj;
delete arg1;
}
static swig_method swig_Base_Sl_int_Sc_double_Sg__methods[] = {
    {"getValue", _wrap_BaseIntDouble_getValue}, 
    {0,0}
};
static swig_attribute swig_Base_Sl_int_Sc_double_Sg__attributes[] = {
    { "-klassBase",_wrap_BaseIntDouble_klassBase_get, _wrap_BaseIntDouble_klassBase_set},
    { "-baseVal1",_wrap_BaseIntDouble_baseVal1_get, _wrap_BaseIntDouble_baseVal1_set},
    { "-baseVal2",_wrap_BaseIntDouble_baseVal2_get, _wrap_BaseIntDouble_baseVal2_set},
    {0,0,0}
};
static swig_class *swig_Base_Sl_int_Sc_double_Sg__bases[] = {0};
static const char * swig_Base_Sl_int_Sc_double_Sg__base_names[] = {0};
static swig_class _wrap_class_Base_Sl_int_Sc_double_Sg_ = { "BaseIntDouble", &SWIGTYPE_p_BaseT_int_double_t,_wrap_new_BaseIntDouble, swig_delete_BaseIntDouble, swig_Base_Sl_int_Sc_double_Sg__methods, swig_Base_Sl_int_Sc_double_Sg__attributes, swig_Base_Sl_int_Sc_double_Sg__bases,swig_Base_Sl_int_Sc_double_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_pair_id2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigValueWrapper< Pair< int,double > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< Pair< int,double > > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pair_id2 p ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_PairT_int_double_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_id2" "', argument " "1"" of type '" "Pair< int,double >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pair_id2" "', argument " "1"" of type '" "Pair< int,double >""'");
    } else {
      arg1 = *(reinterpret_cast< Pair< int,double > * >(argp1));
    }
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling pair_id2" << endl;
    }
    result = pair_id2(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new Pair< int,double >(static_cast< const Pair< int,double >& >(result))), SWIGTYPE_p_PairT_int_double_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pair_id1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SwigValueWrapper< SwigBoost::shared_ptr< Pair< int,double > > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  SwigValueWrapper< SwigBoost::shared_ptr< Pair< int,double > > > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pair_id1 p ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_SwigBoost__shared_ptrT_PairT_int_double_t_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_id1" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Pair< int,double > >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pair_id1" "', argument " "1"" of type '" "SwigBoost::shared_ptr< Pair< int,double > >""'");
    } else {
      arg1 = *(reinterpret_cast< SwigBoost::shared_ptr< Pair< int,double > > * >(argp1));
    }
  }
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling pair_id1" << endl;
    }
    result = pair_id1(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new SwigBoost::shared_ptr< Pair< int,double > >(static_cast< const SwigBoost::shared_ptr< Pair< int,double > >& >(result))), SWIGTYPE_p_SwigBoost__shared_ptrT_PairT_int_double_t_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PairIntDouble_klassPair_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  Space::Klass *arg2 = (Space::Klass *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:PairIntDouble_klassPair_set self klassPair ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_PairT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairIntDouble_klassPair_set" "', argument " "1"" of type '" "Pair< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Pair< int,double > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Space__Klass, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PairIntDouble_klassPair_set" "', argument " "2"" of type '" "Space::Klass *""'"); 
  }
  arg2 = reinterpret_cast< Space::Klass * >(argp2);
  if (arg1) (arg1)->klassPair = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PairIntDouble_klassPair_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Space::Klass *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PairIntDouble_klassPair_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_PairT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairIntDouble_klassPair_get" "', argument " "1"" of type '" "Pair< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Pair< int,double > * >(argp1);
  result = (Space::Klass *)& ((arg1)->klassPair);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Space__Klass,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PairIntDouble_val1_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:PairIntDouble_val1_set self val1 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_PairT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairIntDouble_val1_set" "', argument " "1"" of type '" "Pair< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Pair< int,double > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairIntDouble_val1_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->val1 = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PairIntDouble_val1_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PairIntDouble_val1_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_PairT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairIntDouble_val1_get" "', argument " "1"" of type '" "Pair< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Pair< int,double > * >(argp1);
  result = (int) ((arg1)->val1);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PairIntDouble_val2_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:PairIntDouble_val2_set self val2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_PairT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairIntDouble_val2_set" "', argument " "1"" of type '" "Pair< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Pair< int,double > * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairIntDouble_val2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->val2 = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PairIntDouble_val2_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PairIntDouble_val2_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_PairT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairIntDouble_val2_get" "', argument " "1"" of type '" "Pair< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Pair< int,double > * >(argp1);
  result = (double) ((arg1)->val2);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_PairIntDouble(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Pair< int,double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_PairIntDouble t1 t2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PairIntDouble" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PairIntDouble" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Pair<(int,double)>" << endl;
    }
    result = (Pair< int,double > *)new Pair< int,double >(arg1,arg2);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_PairT_int_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PairIntDouble_getValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PairIntDouble_getValue self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_PairT_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairIntDouble_getValue" "', argument " "1"" of type '" "Pair< int,double > const *""'"); 
  }
  arg1 = reinterpret_cast< Pair< int,double > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling getValue" << endl;
    }
    result = ((Pair< int,double > const *)arg1)->getValue();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_PairIntDouble(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_PairIntDouble self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_PairT_int_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PairIntDouble" "', argument " "1"" of type '" "Pair< int,double > *""'"); 
  }
  arg1 = reinterpret_cast< Pair< int,double > * >(argp1);
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~Pair<(int,double)>" << endl;
    }
    delete arg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_PairIntDouble(void *obj) {
Pair< int,double > *arg1 = (Pair< int,double > *) obj;
delete arg1;
}
static swig_method swig_Pair_Sl_int_Sc_double_Sg__methods[] = {
    {"getValue", _wrap_PairIntDouble_getValue}, 
    {0,0}
};
static swig_attribute swig_Pair_Sl_int_Sc_double_Sg__attributes[] = {
    { "-klassPair",_wrap_PairIntDouble_klassPair_get, _wrap_PairIntDouble_klassPair_set},
    { "-val1",_wrap_PairIntDouble_val1_get, _wrap_PairIntDouble_val1_set},
    { "-val2",_wrap_PairIntDouble_val2_get, _wrap_PairIntDouble_val2_set},
    {0,0,0}
};
static swig_class *swig_Pair_Sl_int_Sc_double_Sg__bases[] = {0,0};
static const char * swig_Pair_Sl_int_Sc_double_Sg__base_names[] = {"Base< int,double > *",0};
static swig_class _wrap_class_Pair_Sl_int_Sc_double_Sg_ = { "PairIntDouble", &SWIGTYPE_p_PairT_int_double_t,_wrap_new_PairIntDouble, swig_delete_PairIntDouble, swig_Pair_Sl_int_Sc_double_Sg__methods, swig_Pair_Sl_int_Sc_double_Sg__attributes, swig_Pair_Sl_int_Sc_double_Sg__bases,swig_Pair_Sl_int_Sc_double_Sg__base_names, &swig_module };
SWIGINTERN const char *_wrap_NOT_COUNTING_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast< int >(SwigBoost::NOT_COUNTING));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *swig_readonly(ClientData clientData SWIGUNUSED, Tcl_Interp *interp SWIGUNUSED, char *name1 SWIGUNUSED, char *name2 SWIGUNUSED, int flags SWIGUNUSED) {
  return "Variable is read-only";
}


SWIGINTERN int
_wrap_shared_ptr_wrapper_count(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":shared_ptr_wrapper_count ") == TCL_ERROR) SWIG_fail;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling SwigBoost::shared_ptr_wrapper_count" << endl;
    }
    result = (int)SwigBoost::shared_ptr_wrapper_count();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}



static swig_command_info swig_commands[] = {
    { SWIG_prefix "delete_Klass", (swig_wrapper_func) _wrap_delete_Klass, NULL},
    { SWIG_prefix "Klass_getValue", (swig_wrapper_func) _wrap_Klass_getValue, NULL},
    { SWIG_prefix "Klass_append", (swig_wrapper_func) _wrap_Klass_append, NULL},
    { SWIG_prefix "new_Klass", (swig_wrapper_func) _wrap_new_Klass, NULL},
    { SWIG_prefix "Klass_getTotal_count", (swig_wrapper_func) _wrap_Klass_getTotal_count, NULL},
    { SWIG_prefix "Klass", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Space_Klass},
    { SWIG_prefix "new_KlassDerived", (swig_wrapper_func) _wrap_new_KlassDerived, NULL},
    { SWIG_prefix "delete_KlassDerived", (swig_wrapper_func) _wrap_delete_KlassDerived, NULL},
    { SWIG_prefix "KlassDerived_getValue", (swig_wrapper_func) _wrap_KlassDerived_getValue, NULL},
    { SWIG_prefix "KlassDerived", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Space_KlassDerived},
    { SWIG_prefix "derivedpointertest", (swig_wrapper_func) _wrap_derivedpointertest, NULL},
    { SWIG_prefix "derivedreftest", (swig_wrapper_func) _wrap_derivedreftest, NULL},
    { SWIG_prefix "derivedsmartptrtest", (swig_wrapper_func) _wrap_derivedsmartptrtest, NULL},
    { SWIG_prefix "derivedsmartptrpointertest", (swig_wrapper_func) _wrap_derivedsmartptrpointertest, NULL},
    { SWIG_prefix "derivedsmartptrreftest", (swig_wrapper_func) _wrap_derivedsmartptrreftest, NULL},
    { SWIG_prefix "derivedsmartptrpointerreftest", (swig_wrapper_func) _wrap_derivedsmartptrpointerreftest, NULL},
    { SWIG_prefix "new_Klass2ndDerived", (swig_wrapper_func) _wrap_new_Klass2ndDerived, NULL},
    { SWIG_prefix "delete_Klass2ndDerived", (swig_wrapper_func) _wrap_delete_Klass2ndDerived, NULL},
    { SWIG_prefix "Klass2ndDerived", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Space_Klass2ndDerived},
    { SWIG_prefix "new_Klass3rdDerived", (swig_wrapper_func) _wrap_new_Klass3rdDerived, NULL},
    { SWIG_prefix "delete_Klass3rdDerived", (swig_wrapper_func) _wrap_delete_Klass3rdDerived, NULL},
    { SWIG_prefix "Klass3rdDerived_getValue", (swig_wrapper_func) _wrap_Klass3rdDerived_getValue, NULL},
    { SWIG_prefix "Klass3rdDerived", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Space_Klass3rdDerived},
    { SWIG_prefix "test3rdupcast", (swig_wrapper_func) _wrap_test3rdupcast, NULL},
    { SWIG_prefix "factorycreate", (swig_wrapper_func) _wrap_factorycreate, NULL},
    { SWIG_prefix "smartpointertest", (swig_wrapper_func) _wrap_smartpointertest, NULL},
    { SWIG_prefix "smartpointerpointertest", (swig_wrapper_func) _wrap_smartpointerpointertest, NULL},
    { SWIG_prefix "smartpointerreftest", (swig_wrapper_func) _wrap_smartpointerreftest, NULL},
    { SWIG_prefix "smartpointerpointerreftest", (swig_wrapper_func) _wrap_smartpointerpointerreftest, NULL},
    { SWIG_prefix "constsmartpointertest", (swig_wrapper_func) _wrap_constsmartpointertest, NULL},
    { SWIG_prefix "constsmartpointerpointertest", (swig_wrapper_func) _wrap_constsmartpointerpointertest, NULL},
    { SWIG_prefix "constsmartpointerreftest", (swig_wrapper_func) _wrap_constsmartpointerreftest, NULL},
    { SWIG_prefix "valuetest", (swig_wrapper_func) _wrap_valuetest, NULL},
    { SWIG_prefix "pointertest", (swig_wrapper_func) _wrap_pointertest, NULL},
    { SWIG_prefix "reftest", (swig_wrapper_func) _wrap_reftest, NULL},
    { SWIG_prefix "pointerreftest", (swig_wrapper_func) _wrap_pointerreftest, NULL},
    { SWIG_prefix "nullsmartpointerpointertest", (swig_wrapper_func) _wrap_nullsmartpointerpointertest, NULL},
    { SWIG_prefix "pointerownertest", (swig_wrapper_func) _wrap_pointerownertest, NULL},
    { SWIG_prefix "smartpointerpointerownertest", (swig_wrapper_func) _wrap_smartpointerpointerownertest, NULL},
    { SWIG_prefix "use_count", (swig_wrapper_func) _wrap_use_count, NULL},
    { SWIG_prefix "ref_1", (swig_wrapper_func) _wrap_ref_1, NULL},
    { SWIG_prefix "overload_rawbyval", (swig_wrapper_func) _wrap_overload_rawbyval, NULL},
    { SWIG_prefix "overload_rawbyref", (swig_wrapper_func) _wrap_overload_rawbyref, NULL},
    { SWIG_prefix "overload_rawbyptr", (swig_wrapper_func) _wrap_overload_rawbyptr, NULL},
    { SWIG_prefix "overload_rawbyptrref", (swig_wrapper_func) _wrap_overload_rawbyptrref, NULL},
    { SWIG_prefix "overload_smartbyval", (swig_wrapper_func) _wrap_overload_smartbyval, NULL},
    { SWIG_prefix "overload_smartbyref", (swig_wrapper_func) _wrap_overload_smartbyref, NULL},
    { SWIG_prefix "overload_smartbyptr", (swig_wrapper_func) _wrap_overload_smartbyptr, NULL},
    { SWIG_prefix "overload_smartbyptrref", (swig_wrapper_func) _wrap_overload_smartbyptrref, NULL},
    { SWIG_prefix "new_MemberVariables", (swig_wrapper_func) _wrap_new_MemberVariables, NULL},
    { SWIG_prefix "MemberVariables_SmartMemberValue_set", (swig_wrapper_func) _wrap_MemberVariables_SmartMemberValue_set, NULL},
    { SWIG_prefix "MemberVariables_SmartMemberValue_get", (swig_wrapper_func) _wrap_MemberVariables_SmartMemberValue_get, NULL},
    { SWIG_prefix "MemberVariables_SmartMemberPointer_set", (swig_wrapper_func) _wrap_MemberVariables_SmartMemberPointer_set, NULL},
    { SWIG_prefix "MemberVariables_SmartMemberPointer_get", (swig_wrapper_func) _wrap_MemberVariables_SmartMemberPointer_get, NULL},
    { SWIG_prefix "MemberVariables_SmartMemberReference_set", (swig_wrapper_func) _wrap_MemberVariables_SmartMemberReference_set, NULL},
    { SWIG_prefix "MemberVariables_SmartMemberReference_get", (swig_wrapper_func) _wrap_MemberVariables_SmartMemberReference_get, NULL},
    { SWIG_prefix "MemberVariables_MemberValue_set", (swig_wrapper_func) _wrap_MemberVariables_MemberValue_set, NULL},
    { SWIG_prefix "MemberVariables_MemberValue_get", (swig_wrapper_func) _wrap_MemberVariables_MemberValue_get, NULL},
    { SWIG_prefix "MemberVariables_MemberPointer_set", (swig_wrapper_func) _wrap_MemberVariables_MemberPointer_set, NULL},
    { SWIG_prefix "MemberVariables_MemberPointer_get", (swig_wrapper_func) _wrap_MemberVariables_MemberPointer_get, NULL},
    { SWIG_prefix "MemberVariables_MemberReference_set", (swig_wrapper_func) _wrap_MemberVariables_MemberReference_set, NULL},
    { SWIG_prefix "MemberVariables_MemberReference_get", (swig_wrapper_func) _wrap_MemberVariables_MemberReference_get, NULL},
    { SWIG_prefix "delete_MemberVariables", (swig_wrapper_func) _wrap_delete_MemberVariables, NULL},
    { SWIG_prefix "MemberVariables", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_MemberVariables},
    { SWIG_prefix "BaseIntDouble_klassBase_set", (swig_wrapper_func) _wrap_BaseIntDouble_klassBase_set, NULL},
    { SWIG_prefix "BaseIntDouble_klassBase_get", (swig_wrapper_func) _wrap_BaseIntDouble_klassBase_get, NULL},
    { SWIG_prefix "BaseIntDouble_baseVal1_set", (swig_wrapper_func) _wrap_BaseIntDouble_baseVal1_set, NULL},
    { SWIG_prefix "BaseIntDouble_baseVal1_get", (swig_wrapper_func) _wrap_BaseIntDouble_baseVal1_get, NULL},
    { SWIG_prefix "BaseIntDouble_baseVal2_set", (swig_wrapper_func) _wrap_BaseIntDouble_baseVal2_set, NULL},
    { SWIG_prefix "BaseIntDouble_baseVal2_get", (swig_wrapper_func) _wrap_BaseIntDouble_baseVal2_get, NULL},
    { SWIG_prefix "new_BaseIntDouble", (swig_wrapper_func) _wrap_new_BaseIntDouble, NULL},
    { SWIG_prefix "BaseIntDouble_getValue", (swig_wrapper_func) _wrap_BaseIntDouble_getValue, NULL},
    { SWIG_prefix "delete_BaseIntDouble", (swig_wrapper_func) _wrap_delete_BaseIntDouble, NULL},
    { SWIG_prefix "BaseIntDouble", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Base_Sl_int_Sc_double_Sg_},
    { SWIG_prefix "pair_id2", (swig_wrapper_func) _wrap_pair_id2, NULL},
    { SWIG_prefix "pair_id1", (swig_wrapper_func) _wrap_pair_id1, NULL},
    { SWIG_prefix "PairIntDouble_klassPair_set", (swig_wrapper_func) _wrap_PairIntDouble_klassPair_set, NULL},
    { SWIG_prefix "PairIntDouble_klassPair_get", (swig_wrapper_func) _wrap_PairIntDouble_klassPair_get, NULL},
    { SWIG_prefix "PairIntDouble_val1_set", (swig_wrapper_func) _wrap_PairIntDouble_val1_set, NULL},
    { SWIG_prefix "PairIntDouble_val1_get", (swig_wrapper_func) _wrap_PairIntDouble_val1_get, NULL},
    { SWIG_prefix "PairIntDouble_val2_set", (swig_wrapper_func) _wrap_PairIntDouble_val2_set, NULL},
    { SWIG_prefix "PairIntDouble_val2_get", (swig_wrapper_func) _wrap_PairIntDouble_val2_get, NULL},
    { SWIG_prefix "new_PairIntDouble", (swig_wrapper_func) _wrap_new_PairIntDouble, NULL},
    { SWIG_prefix "PairIntDouble_getValue", (swig_wrapper_func) _wrap_PairIntDouble_getValue, NULL},
    { SWIG_prefix "delete_PairIntDouble", (swig_wrapper_func) _wrap_delete_PairIntDouble, NULL},
    { SWIG_prefix "PairIntDouble", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Pair_Sl_int_Sc_double_Sg_},
    { SWIG_prefix "shared_ptr_wrapper_count", (swig_wrapper_func) _wrap_shared_ptr_wrapper_count, NULL},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    { SWIG_prefix "debug_shared", 0, (swig_variable_func) _wrap_debug_shared_get,(swig_variable_func) _wrap_debug_shared_set},
    { SWIG_prefix "GlobalSmartValue", 0, (swig_variable_func) _wrap_GlobalSmartValue_get,(swig_variable_func) _wrap_GlobalSmartValue_set},
    { SWIG_prefix "GlobalValue", 0, (swig_variable_func) _wrap_GlobalValue_get,(swig_variable_func) _wrap_GlobalValue_set},
    { SWIG_prefix "GlobalPointer", 0, (swig_variable_func) _wrap_GlobalPointer_get,(swig_variable_func) _wrap_GlobalPointer_set},
    { SWIG_prefix "GlobalReference", 0, (swig_variable_func) _wrap_GlobalReference_get,(swig_variable_func) _wrap_GlobalReference_set},
    { SWIG_prefix "NOT_COUNTING", 0, (swig_variable_func) _wrap_NOT_COUNTING_get,(swig_variable_func) swig_readonly},
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Space__Klass3rdDerivedTo_p_Space__Klass2ndDerived(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Space::Klass2ndDerived *)  ((Space::Klass3rdDerived *) x));
}
static void *_p_Space__KlassDerivedTo_p_Space__IgnoredMultipleInheritBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Space::IgnoredMultipleInheritBase *)  ((Space::KlassDerived *) x));
}
static void *_p_Space__Klass3rdDerivedTo_p_Space__IgnoredMultipleInheritBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Space::IgnoredMultipleInheritBase *)  ((Space::Klass3rdDerived *) x));
}
static void *_p_PairT_int_double_tTo_p_BaseT_int_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Base< int,double > *)  ((Pair< int,double > *) x));
}
static void *_p_Space__KlassDerivedTo_p_Space__Klass(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Space::Klass *)  ((Space::KlassDerived *) x));
}
static void *_p_Space__Klass2ndDerivedTo_p_Space__Klass(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Space::Klass *)  ((Space::Klass2ndDerived *) x));
}
static void *_p_Space__Klass3rdDerivedTo_p_Space__Klass(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Space::Klass *) (Space::Klass2ndDerived *) ((Space::Klass3rdDerived *) x));
}
static swig_type_info _swigt__p_BaseT_int_double_t = {"_p_BaseT_int_double_t", "Base< int,double > *", 0, 0, (void*)&_wrap_class_Base_Sl_int_Sc_double_Sg_, 0};
static swig_type_info _swigt__p_MemberVariables = {"_p_MemberVariables", "MemberVariables *", 0, 0, (void*)&_wrap_class_MemberVariables, 0};
static swig_type_info _swigt__p_PairT_int_double_t = {"_p_PairT_int_double_t", "Pair< int,double > *", 0, 0, (void*)&_wrap_class_Pair_Sl_int_Sc_double_Sg_, 0};
static swig_type_info _swigt__p_Space__IgnoredMultipleInheritBase = {"_p_Space__IgnoredMultipleInheritBase", "Space::IgnoredMultipleInheritBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Space__Klass = {"_p_Space__Klass", "Space::Klass *", 0, 0, (void*)&_wrap_class_Space_Klass, 0};
static swig_type_info _swigt__p_Space__Klass2ndDerived = {"_p_Space__Klass2ndDerived", "Space::Klass2ndDerived *", 0, 0, (void*)&_wrap_class_Space_Klass2ndDerived, 0};
static swig_type_info _swigt__p_Space__Klass3rdDerived = {"_p_Space__Klass3rdDerived", "Space::Klass3rdDerived *", 0, 0, (void*)&_wrap_class_Space_Klass3rdDerived, 0};
static swig_type_info _swigt__p_Space__KlassDerived = {"_p_Space__KlassDerived", "Space::KlassDerived *", 0, 0, (void*)&_wrap_class_Space_KlassDerived, 0};
static swig_type_info _swigt__p_SwigBoost__shared_ptrT_PairT_int_double_t_t = {"_p_SwigBoost__shared_ptrT_PairT_int_double_t_t", "SwigBoost::shared_ptr< Pair< int,double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SwigBoost__shared_ptrT_Space__Klass2ndDerived_t = {"_p_SwigBoost__shared_ptrT_Space__Klass2ndDerived_t", "SwigBoost::shared_ptr< Space::Klass2ndDerived > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SwigBoost__shared_ptrT_Space__Klass3rdDerived_t = {"_p_SwigBoost__shared_ptrT_Space__Klass3rdDerived_t", "SwigBoost::shared_ptr< Space::Klass3rdDerived > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SwigBoost__shared_ptrT_Space__KlassDerived_t = {"_p_SwigBoost__shared_ptrT_Space__KlassDerived_t", "SwigBoost::shared_ptr< Space::KlassDerived > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SwigBoost__shared_ptrT_Space__Klass_const_t = {"_p_SwigBoost__shared_ptrT_Space__Klass_const_t", "SwigBoost::shared_ptr< Space::Klass const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SwigBoost__shared_ptrT_Space__Klass_t = {"_p_SwigBoost__shared_ptrT_Space__Klass_t", "SwigBoost::shared_ptr< Space::Klass > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_SwigBoost__shared_ptrT_Space__KlassDerived_t = {"_p_p_SwigBoost__shared_ptrT_Space__KlassDerived_t", "SwigBoost::shared_ptr< Space::KlassDerived > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_SwigBoost__shared_ptrT_Space__Klass_t = {"_p_p_SwigBoost__shared_ptrT_Space__Klass_t", "SwigBoost::shared_ptr< Space::Klass > **", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BaseT_int_double_t,
  &_swigt__p_MemberVariables,
  &_swigt__p_PairT_int_double_t,
  &_swigt__p_Space__IgnoredMultipleInheritBase,
  &_swigt__p_Space__Klass,
  &_swigt__p_Space__Klass2ndDerived,
  &_swigt__p_Space__Klass3rdDerived,
  &_swigt__p_Space__KlassDerived,
  &_swigt__p_SwigBoost__shared_ptrT_PairT_int_double_t_t,
  &_swigt__p_SwigBoost__shared_ptrT_Space__Klass2ndDerived_t,
  &_swigt__p_SwigBoost__shared_ptrT_Space__Klass3rdDerived_t,
  &_swigt__p_SwigBoost__shared_ptrT_Space__KlassDerived_t,
  &_swigt__p_SwigBoost__shared_ptrT_Space__Klass_const_t,
  &_swigt__p_SwigBoost__shared_ptrT_Space__Klass_t,
  &_swigt__p_char,
  &_swigt__p_p_SwigBoost__shared_ptrT_Space__KlassDerived_t,
  &_swigt__p_p_SwigBoost__shared_ptrT_Space__Klass_t,
};

static swig_cast_info _swigc__p_BaseT_int_double_t[] = {  {&_swigt__p_BaseT_int_double_t, 0, 0, 0},  {&_swigt__p_PairT_int_double_t, _p_PairT_int_double_tTo_p_BaseT_int_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MemberVariables[] = {  {&_swigt__p_MemberVariables, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PairT_int_double_t[] = {  {&_swigt__p_PairT_int_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Space__IgnoredMultipleInheritBase[] = {  {&_swigt__p_Space__IgnoredMultipleInheritBase, 0, 0, 0},  {&_swigt__p_Space__KlassDerived, _p_Space__KlassDerivedTo_p_Space__IgnoredMultipleInheritBase, 0, 0},  {&_swigt__p_Space__Klass3rdDerived, _p_Space__Klass3rdDerivedTo_p_Space__IgnoredMultipleInheritBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Space__Klass[] = {  {&_swigt__p_Space__KlassDerived, _p_Space__KlassDerivedTo_p_Space__Klass, 0, 0},  {&_swigt__p_Space__Klass2ndDerived, _p_Space__Klass2ndDerivedTo_p_Space__Klass, 0, 0},  {&_swigt__p_Space__Klass3rdDerived, _p_Space__Klass3rdDerivedTo_p_Space__Klass, 0, 0},  {&_swigt__p_Space__Klass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Space__Klass2ndDerived[] = {  {&_swigt__p_Space__Klass2ndDerived, 0, 0, 0},  {&_swigt__p_Space__Klass3rdDerived, _p_Space__Klass3rdDerivedTo_p_Space__Klass2ndDerived, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Space__Klass3rdDerived[] = {  {&_swigt__p_Space__Klass3rdDerived, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Space__KlassDerived[] = {  {&_swigt__p_Space__KlassDerived, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigBoost__shared_ptrT_PairT_int_double_t_t[] = {  {&_swigt__p_SwigBoost__shared_ptrT_PairT_int_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigBoost__shared_ptrT_Space__Klass2ndDerived_t[] = {  {&_swigt__p_SwigBoost__shared_ptrT_Space__Klass2ndDerived_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigBoost__shared_ptrT_Space__Klass3rdDerived_t[] = {  {&_swigt__p_SwigBoost__shared_ptrT_Space__Klass3rdDerived_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigBoost__shared_ptrT_Space__KlassDerived_t[] = {  {&_swigt__p_SwigBoost__shared_ptrT_Space__KlassDerived_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigBoost__shared_ptrT_Space__Klass_const_t[] = {  {&_swigt__p_SwigBoost__shared_ptrT_Space__Klass_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigBoost__shared_ptrT_Space__Klass_t[] = {  {&_swigt__p_SwigBoost__shared_ptrT_Space__Klass_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_SwigBoost__shared_ptrT_Space__KlassDerived_t[] = {  {&_swigt__p_p_SwigBoost__shared_ptrT_Space__KlassDerived_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_SwigBoost__shared_ptrT_Space__Klass_t[] = {  {&_swigt__p_p_SwigBoost__shared_ptrT_Space__Klass_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BaseT_int_double_t,
  _swigc__p_MemberVariables,
  _swigc__p_PairT_int_double_t,
  _swigc__p_Space__IgnoredMultipleInheritBase,
  _swigc__p_Space__Klass,
  _swigc__p_Space__Klass2ndDerived,
  _swigc__p_Space__Klass3rdDerived,
  _swigc__p_Space__KlassDerived,
  _swigc__p_SwigBoost__shared_ptrT_PairT_int_double_t_t,
  _swigc__p_SwigBoost__shared_ptrT_Space__Klass2ndDerived_t,
  _swigc__p_SwigBoost__shared_ptrT_Space__Klass3rdDerived_t,
  _swigc__p_SwigBoost__shared_ptrT_Space__KlassDerived_t,
  _swigc__p_SwigBoost__shared_ptrT_Space__Klass_const_t,
  _swigc__p_SwigBoost__shared_ptrT_Space__Klass_t,
  _swigc__p_char,
  _swigc__p_p_SwigBoost__shared_ptrT_Space__KlassDerived_t,
  _swigc__p_p_SwigBoost__shared_ptrT_Space__Klass_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    size_t i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
  /* Create fast method lookup tables */
  
  SWIGINTERN void
  SWIG_Tcl_InstallMethodLookupTables(void) {
    size_t i;
    
    for (i = 0; i < swig_module.size; ++i) {
      swig_type_info *type = swig_module.type_initial[i];
      if (type->clientdata) {
        swig_class* klass = (swig_class*) type->clientdata;
        swig_method* meth;
        Tcl_InitHashTable(&(klass->hashtable), TCL_STRING_KEYS);
        for (meth = klass->methods; meth && meth->name; ++meth) {
          int newEntry;
          Tcl_HashEntry* hashentry = Tcl_CreateHashEntry(&(klass->hashtable), meth->name, &newEntry);
          Tcl_SetHashValue(hashentry, (ClientData)meth->method);
        }
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  size_t i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  /* (char*) cast is required to avoid compiler warning/error for Tcl < 8.4. */
  if (Tcl_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
#ifdef USE_TK_STUBS
  /* (char*) cast is required to avoid compiler warning/error. */
  if (Tk_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif
  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  SWIG_Tcl_InstallMethodLookupTables();
  
  
  return TCL_OK;
}
SWIGEXPORT int Li_boost_shared_ptr_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

