# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_friends', [dirname(__file__)])
        except ImportError:
            import _friends
            return _friends
        if fp is not None:
            try:
                _mod = imp.load_module('_friends', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _friends = swig_import_helper()
    del swig_import_helper
else:
    import _friends
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def globalscope():
  return _friends.globalscope()
globalscope = _friends.globalscope
class B(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _friends.new_B(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _friends.delete_B
    __del__ = lambda self : None;
B_swigregister = _friends.B_swigregister
B_swigregister(B)

def mix(*args):
  return _friends.mix(*args)
mix = _friends.mix

class A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _friends.new_A(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _friends.delete_A
    __del__ = lambda self : None;
A_swigregister = _friends.A_swigregister
A_swigregister(A)

def get_val2(*args):
  return _friends.get_val2(*args)
get_val2 = _friends.get_val2

def get_val3(*args):
  return _friends.get_val3(*args)
get_val3 = _friends.get_val3


def bas():
  return _friends.bas()
bas = _friends.bas

def baz():
  return _friends.baz()
baz = _friends.baz
class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _friends.new_Foo()
        try: self.this.append(this)
        except: self.this = this
    def member(self): return _friends.Foo_member(self)
    __swig_destroy__ = _friends.delete_Foo
    __del__ = lambda self : None;
Foo_swigregister = _friends.Foo_swigregister
Foo_swigregister(Foo)


def bar():
  return _friends.bar()
bar = _friends.bar
class D_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, D_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, D_i, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _friends.new_D_i(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _friends.delete_D_i
    __del__ = lambda self : None;
D_i_swigregister = _friends.D_i_swigregister
D_i_swigregister(D_i)

class D_d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, D_d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, D_d, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _friends.new_D_d(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _friends.delete_D_d
    __del__ = lambda self : None;
D_d_swigregister = _friends.D_d_swigregister
D_d_swigregister(D_d)

def get_val1(*args):
  return _friends.get_val1(*args)
get_val1 = _friends.get_val1

def set(*args):
  return _friends.set(*args)
set = _friends.set

# This file is compatible with both classic and new-style classes.


