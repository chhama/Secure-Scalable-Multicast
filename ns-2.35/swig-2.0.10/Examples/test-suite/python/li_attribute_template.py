# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_attribute_template', [dirname(__file__)])
        except ImportError:
            import _li_attribute_template
            return _li_attribute_template
        if fp is not None:
            try:
                _mod = imp.load_module('_li_attribute_template', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_attribute_template = swig_import_helper()
    del swig_import_helper
else:
    import _li_attribute_template
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_attribute_template.new_Foo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["value"] = _li_attribute_template.Foo_value_set
    __swig_getmethods__["value"] = _li_attribute_template.Foo_value_get
    if _newclass:value = _swig_property(_li_attribute_template.Foo_value_get, _li_attribute_template.Foo_value_set)
    __swig_destroy__ = _li_attribute_template.delete_Foo
    __del__ = lambda self : None;
Foo_swigregister = _li_attribute_template.Foo_swigregister
Foo_swigregister(Foo)

class pair_intint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_intint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_intint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_attribute_template.new_pair_intint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_attribute_template.pair_intint_first_set
    __swig_getmethods__["first"] = _li_attribute_template.pair_intint_first_get
    if _newclass:first = _swig_property(_li_attribute_template.pair_intint_first_get, _li_attribute_template.pair_intint_first_set)
    __swig_setmethods__["second"] = _li_attribute_template.pair_intint_second_set
    __swig_getmethods__["second"] = _li_attribute_template.pair_intint_second_get
    if _newclass:second = _swig_property(_li_attribute_template.pair_intint_second_get, _li_attribute_template.pair_intint_second_set)
    __swig_destroy__ = _li_attribute_template.delete_pair_intint
    __del__ = lambda self : None;
pair_intint_swigregister = _li_attribute_template.pair_intint_swigregister
pair_intint_swigregister(pair_intint)

class Cintint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cintint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cintint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_attribute_template.new_Cintint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["a"] = _li_attribute_template.Cintint_a_set
    __swig_getmethods__["a"] = _li_attribute_template.Cintint_a_get
    if _newclass:a = _swig_property(_li_attribute_template.Cintint_a_get, _li_attribute_template.Cintint_a_set)
    __swig_setmethods__["b"] = _li_attribute_template.Cintint_b_set
    __swig_getmethods__["b"] = _li_attribute_template.Cintint_b_get
    if _newclass:b = _swig_property(_li_attribute_template.Cintint_b_get, _li_attribute_template.Cintint_b_set)
    __swig_setmethods__["str"] = _li_attribute_template.Cintint_str_set
    __swig_getmethods__["str"] = _li_attribute_template.Cintint_str_get
    if _newclass:str = _swig_property(_li_attribute_template.Cintint_str_get, _li_attribute_template.Cintint_str_set)
    __swig_setmethods__["d"] = _li_attribute_template.Cintint_d_set
    __swig_getmethods__["d"] = _li_attribute_template.Cintint_d_get
    if _newclass:d = _swig_property(_li_attribute_template.Cintint_d_get, _li_attribute_template.Cintint_d_set)
    __swig_setmethods__["e"] = _li_attribute_template.Cintint_e_set
    __swig_getmethods__["e"] = _li_attribute_template.Cintint_e_get
    if _newclass:e = _swig_property(_li_attribute_template.Cintint_e_get, _li_attribute_template.Cintint_e_set)
    __swig_setmethods__["f"] = _li_attribute_template.Cintint_f_set
    __swig_getmethods__["f"] = _li_attribute_template.Cintint_f_get
    if _newclass:f = _swig_property(_li_attribute_template.Cintint_f_get, _li_attribute_template.Cintint_f_set)
    __swig_setmethods__["g"] = _li_attribute_template.Cintint_g_set
    __swig_getmethods__["g"] = _li_attribute_template.Cintint_g_get
    if _newclass:g = _swig_property(_li_attribute_template.Cintint_g_get, _li_attribute_template.Cintint_g_set)
    __swig_destroy__ = _li_attribute_template.delete_Cintint
    __del__ = lambda self : None;
Cintint_swigregister = _li_attribute_template.Cintint_swigregister
Cintint_swigregister(Cintint)

# This file is compatible with both classic and new-style classes.


