# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_constant_pointers', [dirname(__file__)])
        except ImportError:
            import _constant_pointers
            return _constant_pointers
        if fp is not None:
            try:
                _mod = imp.load_module('_constant_pointers', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _constant_pointers = swig_import_helper()
    del swig_import_helper
else:
    import _constant_pointers
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


ARRAY_SIZE = _constant_pointers.ARRAY_SIZE
class ParametersTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParametersTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParametersTest, name)
    __repr__ = _swig_repr
    def param1(self, *args): return _constant_pointers.ParametersTest_param1(self, *args)
    def param2(self, *args): return _constant_pointers.ParametersTest_param2(self, *args)
    def param3(self, *args): return _constant_pointers.ParametersTest_param3(self, *args)
    def param4(self, *args): return _constant_pointers.ParametersTest_param4(self, *args)
    def param5(self, *args): return _constant_pointers.ParametersTest_param5(self, *args)
    def param6(self, *args): return _constant_pointers.ParametersTest_param6(self, *args)
    def param7(self, *args): return _constant_pointers.ParametersTest_param7(self, *args)
    def param8(self, *args): return _constant_pointers.ParametersTest_param8(self, *args)
    def param9(self, *args): return _constant_pointers.ParametersTest_param9(self, *args)
    def param10(self, *args): return _constant_pointers.ParametersTest_param10(self, *args)
    def param11(self, *args): return _constant_pointers.ParametersTest_param11(self, *args)
    def param_array1(self, *args): return _constant_pointers.ParametersTest_param_array1(self, *args)
    def param_array2(self, *args): return _constant_pointers.ParametersTest_param_array2(self, *args)
    def param_array3(self, *args): return _constant_pointers.ParametersTest_param_array3(self, *args)
    def param_array4(self, *args): return _constant_pointers.ParametersTest_param_array4(self, *args)
    def param_array5(self, *args): return _constant_pointers.ParametersTest_param_array5(self, *args)
    def param_array6(self, *args): return _constant_pointers.ParametersTest_param_array6(self, *args)
    def __init__(self): 
        this = _constant_pointers.new_ParametersTest()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constant_pointers.delete_ParametersTest
    __del__ = lambda self : None;
ParametersTest_swigregister = _constant_pointers.ParametersTest_swigregister
ParametersTest_swigregister(ParametersTest)
cvar = _constant_pointers.cvar
ConstInt = cvar.ConstInt
GlobalConstIntPtr = cvar.GlobalConstIntPtr

class MemberVariablesTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemberVariablesTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemberVariablesTest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["member1"] = _constant_pointers.MemberVariablesTest_member1_set
    __swig_getmethods__["member1"] = _constant_pointers.MemberVariablesTest_member1_get
    if _newclass:member1 = _swig_property(_constant_pointers.MemberVariablesTest_member1_get, _constant_pointers.MemberVariablesTest_member1_set)
    __swig_setmethods__["member2"] = _constant_pointers.MemberVariablesTest_member2_set
    __swig_getmethods__["member2"] = _constant_pointers.MemberVariablesTest_member2_get
    if _newclass:member2 = _swig_property(_constant_pointers.MemberVariablesTest_member2_get, _constant_pointers.MemberVariablesTest_member2_set)
    __swig_getmethods__["member3"] = _constant_pointers.MemberVariablesTest_member3_get
    if _newclass:member3 = _swig_property(_constant_pointers.MemberVariablesTest_member3_get)
    __swig_getmethods__["member4"] = _constant_pointers.MemberVariablesTest_member4_get
    if _newclass:member4 = _swig_property(_constant_pointers.MemberVariablesTest_member4_get)
    __swig_setmethods__["array_member1"] = _constant_pointers.MemberVariablesTest_array_member1_set
    __swig_getmethods__["array_member1"] = _constant_pointers.MemberVariablesTest_array_member1_get
    if _newclass:array_member1 = _swig_property(_constant_pointers.MemberVariablesTest_array_member1_get, _constant_pointers.MemberVariablesTest_array_member1_set)
    __swig_setmethods__["array_member2"] = _constant_pointers.MemberVariablesTest_array_member2_set
    __swig_getmethods__["array_member2"] = _constant_pointers.MemberVariablesTest_array_member2_get
    if _newclass:array_member2 = _swig_property(_constant_pointers.MemberVariablesTest_array_member2_get, _constant_pointers.MemberVariablesTest_array_member2_set)
    def __init__(self): 
        this = _constant_pointers.new_MemberVariablesTest()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constant_pointers.delete_MemberVariablesTest
    __del__ = lambda self : None;
MemberVariablesTest_swigregister = _constant_pointers.MemberVariablesTest_swigregister
MemberVariablesTest_swigregister(MemberVariablesTest)


def foofunction(*args):
  return _constant_pointers.foofunction(*args)
foofunction = _constant_pointers.foofunction
class ReturnValuesTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnValuesTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnValuesTest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["td1"] = _constant_pointers.ReturnValuesTest_td1_set
    __swig_getmethods__["td1"] = _constant_pointers.ReturnValuesTest_td1_get
    if _newclass:td1 = _swig_property(_constant_pointers.ReturnValuesTest_td1_get, _constant_pointers.ReturnValuesTest_td1_set)
    __swig_setmethods__["td2"] = _constant_pointers.ReturnValuesTest_td2_set
    __swig_getmethods__["td2"] = _constant_pointers.ReturnValuesTest_td2_get
    if _newclass:td2 = _swig_property(_constant_pointers.ReturnValuesTest_td2_get, _constant_pointers.ReturnValuesTest_td2_set)
    __swig_setmethods__["int1"] = _constant_pointers.ReturnValuesTest_int1_set
    __swig_getmethods__["int1"] = _constant_pointers.ReturnValuesTest_int1_get
    if _newclass:int1 = _swig_property(_constant_pointers.ReturnValuesTest_int1_get, _constant_pointers.ReturnValuesTest_int1_set)
    __swig_setmethods__["int2"] = _constant_pointers.ReturnValuesTest_int2_set
    __swig_getmethods__["int2"] = _constant_pointers.ReturnValuesTest_int2_get
    if _newclass:int2 = _swig_property(_constant_pointers.ReturnValuesTest_int2_get, _constant_pointers.ReturnValuesTest_int2_set)
    __swig_getmethods__["int3"] = _constant_pointers.ReturnValuesTest_int3_get
    if _newclass:int3 = _swig_property(_constant_pointers.ReturnValuesTest_int3_get)
    __swig_setmethods__["int4"] = _constant_pointers.ReturnValuesTest_int4_set
    __swig_getmethods__["int4"] = _constant_pointers.ReturnValuesTest_int4_get
    if _newclass:int4 = _swig_property(_constant_pointers.ReturnValuesTest_int4_get, _constant_pointers.ReturnValuesTest_int4_set)
    __swig_setmethods__["array1"] = _constant_pointers.ReturnValuesTest_array1_set
    __swig_getmethods__["array1"] = _constant_pointers.ReturnValuesTest_array1_get
    if _newclass:array1 = _swig_property(_constant_pointers.ReturnValuesTest_array1_get, _constant_pointers.ReturnValuesTest_array1_set)
    def ret1(self): return _constant_pointers.ReturnValuesTest_ret1(self)
    def ret2(self): return _constant_pointers.ReturnValuesTest_ret2(self)
    def ret3(self): return _constant_pointers.ReturnValuesTest_ret3(self)
    def ret4(self): return _constant_pointers.ReturnValuesTest_ret4(self)
    def ret5(self): return _constant_pointers.ReturnValuesTest_ret5(self)
    def ret6(self, *args): return _constant_pointers.ReturnValuesTest_ret6(self, *args)
    def ret7(self): return _constant_pointers.ReturnValuesTest_ret7(self)
    def ret8(self, *args): return _constant_pointers.ReturnValuesTest_ret8(self, *args)
    def ret9(self): return _constant_pointers.ReturnValuesTest_ret9(self)
    def __init__(self): 
        this = _constant_pointers.new_ReturnValuesTest()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constant_pointers.delete_ReturnValuesTest
    __del__ = lambda self : None;
ReturnValuesTest_swigregister = _constant_pointers.ReturnValuesTest_swigregister
ReturnValuesTest_swigregister(ReturnValuesTest)
int4 = cvar.int4
global_const_int_ptr_array = cvar.global_const_int_ptr_array
array_member4 = cvar.array_member4


def globalRet1():
  return _constant_pointers.globalRet1()
globalRet1 = _constant_pointers.globalRet1

def globalRet2():
  return _constant_pointers.globalRet2()
globalRet2 = _constant_pointers.globalRet2

def opaque(*args):
  return _constant_pointers.opaque(*args)
opaque = _constant_pointers.opaque
class B(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _constant_pointers.new_B()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["ca"] = _constant_pointers.B_ca_get
    if _newclass:ca = _swig_property(_constant_pointers.B_ca_get)
    __swig_setmethods__["a"] = _constant_pointers.B_a_set
    __swig_getmethods__["a"] = _constant_pointers.B_a_get
    if _newclass:a = _swig_property(_constant_pointers.B_a_get, _constant_pointers.B_a_set)
    __swig_setmethods__["ap"] = _constant_pointers.B_ap_set
    __swig_getmethods__["ap"] = _constant_pointers.B_ap_get
    if _newclass:ap = _swig_property(_constant_pointers.B_ap_get, _constant_pointers.B_ap_set)
    __swig_setmethods__["cap"] = _constant_pointers.B_cap_set
    __swig_getmethods__["cap"] = _constant_pointers.B_cap_get
    if _newclass:cap = _swig_property(_constant_pointers.B_cap_get, _constant_pointers.B_cap_set)
    __swig_setmethods__["acptr"] = _constant_pointers.B_acptr_set
    __swig_getmethods__["acptr"] = _constant_pointers.B_acptr_get
    if _newclass:acptr = _swig_property(_constant_pointers.B_acptr_get, _constant_pointers.B_acptr_set)
    __swig_destroy__ = _constant_pointers.delete_B
    __del__ = lambda self : None;
B_swigregister = _constant_pointers.B_swigregister
B_swigregister(B)


def bar(*args):
  return _constant_pointers.bar(*args)
bar = _constant_pointers.bar

def cbar(*args):
  return _constant_pointers.cbar(*args)
cbar = _constant_pointers.cbar
class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["icap"] = _constant_pointers.Foo_icap_set
    __swig_getmethods__["icap"] = _constant_pointers.Foo_icap_get
    if _newclass:icap = _swig_property(_constant_pointers.Foo_icap_get, _constant_pointers.Foo_icap_set)
    def __init__(self): 
        this = _constant_pointers.new_Foo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constant_pointers.delete_Foo
    __del__ = lambda self : None;
Foo_swigregister = _constant_pointers.Foo_swigregister
Foo_swigregister(Foo)

# This file is compatible with both classic and new-style classes.


