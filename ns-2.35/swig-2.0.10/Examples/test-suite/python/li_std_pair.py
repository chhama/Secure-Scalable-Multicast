# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_std_pair', [dirname(__file__)])
        except ImportError:
            import _li_std_pair
            return _li_std_pair
        if fp is not None:
            try:
                _mod = imp.load_module('_li_std_pair', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_std_pair = swig_import_helper()
    del swig_import_helper
else:
    import _li_std_pair
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class IntPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair.new_IntPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair.IntPair_first_set
    __swig_getmethods__["first"] = _li_std_pair.IntPair_first_get
    if _newclass:first = _swig_property(_li_std_pair.IntPair_first_get, _li_std_pair.IntPair_first_set)
    __swig_setmethods__["second"] = _li_std_pair.IntPair_second_set
    __swig_getmethods__["second"] = _li_std_pair.IntPair_second_get
    if _newclass:second = _swig_property(_li_std_pair.IntPair_second_get, _li_std_pair.IntPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair.delete_IntPair
    __del__ = lambda self : None;
IntPair_swigregister = _li_std_pair.IntPair_swigregister
IntPair_swigregister(IntPair)


def makeIntPair(*args):
  return _li_std_pair.makeIntPair(*args)
makeIntPair = _li_std_pair.makeIntPair

def makeIntPairPtr(*args):
  return _li_std_pair.makeIntPairPtr(*args)
makeIntPairPtr = _li_std_pair.makeIntPairPtr

def makeIntPairRef(*args):
  return _li_std_pair.makeIntPairRef(*args)
makeIntPairRef = _li_std_pair.makeIntPairRef

def makeIntPairConstRef(*args):
  return _li_std_pair.makeIntPairConstRef(*args)
makeIntPairConstRef = _li_std_pair.makeIntPairConstRef

def product1(*args):
  return _li_std_pair.product1(*args)
product1 = _li_std_pair.product1

def product2(*args):
  return _li_std_pair.product2(*args)
product2 = _li_std_pair.product2

def product3(*args):
  return _li_std_pair.product3(*args)
product3 = _li_std_pair.product3
# This file is compatible with both classic and new-style classes.


