# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_template_default_arg', [dirname(__file__)])
        except ImportError:
            import _template_default_arg
            return _template_default_arg
        if fp is not None:
            try:
                _mod = imp.load_module('_template_default_arg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _template_default_arg = swig_import_helper()
    del swig_import_helper
else:
    import _template_default_arg
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def foob(*args):
  return _template_default_arg.foob(*args)
foob = _template_default_arg.foob
class Foo_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo_int, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _template_default_arg.new_Foo_int(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default_arg.delete_Foo_int
    __del__ = lambda self : None;
Foo_int_swigregister = _template_default_arg.Foo_int_swigregister
Foo_int_swigregister(Foo_int)

class Hello_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hello_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hello_int, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _template_default_arg.new_Hello_int(*args)
        try: self.this.append(this)
        except: self.this = this
    hi = _template_default_arg.Hello_int_hi
    hello = _template_default_arg.Hello_int_hello
    def foo(self, *args): return _template_default_arg.Hello_int_foo(self, *args)
    __swig_destroy__ = _template_default_arg.delete_Hello_int
    __del__ = lambda self : None;
Hello_int_swigregister = _template_default_arg.Hello_int_swigregister
Hello_int_swigregister(Hello_int)

class X_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X_int, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _template_default_arg.new_X_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def meth(self, *args): return _template_default_arg.X_int_meth(self, *args)
    __swig_destroy__ = _template_default_arg.delete_X_int
    __del__ = lambda self : None;
X_int_swigregister = _template_default_arg.X_int_swigregister
X_int_swigregister(X_int)

class X_longlong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X_longlong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X_longlong, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _template_default_arg.new_X_longlong(*args)
        try: self.this.append(this)
        except: self.this = this
    def meth(self, *args): return _template_default_arg.X_longlong_meth(self, *args)
    __swig_destroy__ = _template_default_arg.delete_X_longlong
    __del__ = lambda self : None;
X_longlong_swigregister = _template_default_arg.X_longlong_swigregister
X_longlong_swigregister(X_longlong)

class X_unsigned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X_unsigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X_unsigned, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _template_default_arg.new_X_unsigned(*args)
        try: self.this.append(this)
        except: self.this = this
    def meth(self, *args): return _template_default_arg.X_unsigned_meth(self, *args)
    __swig_destroy__ = _template_default_arg.delete_X_unsigned
    __del__ = lambda self : None;
X_unsigned_swigregister = _template_default_arg.X_unsigned_swigregister
X_unsigned_swigregister(X_unsigned)

class Y_unsigned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Y_unsigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Y_unsigned, name)
    __repr__ = _swig_repr
    def meth(self, *args): return _template_default_arg.Y_unsigned_meth(self, *args)
    def __init__(self): 
        this = _template_default_arg.new_Y_unsigned()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default_arg.delete_Y_unsigned
    __del__ = lambda self : None;
Y_unsigned_swigregister = _template_default_arg.Y_unsigned_swigregister
Y_unsigned_swigregister(Y_unsigned)

class X_hello_unsigned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X_hello_unsigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X_hello_unsigned, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _template_default_arg.new_X_hello_unsigned(*args)
        try: self.this.append(this)
        except: self.this = this
    def meth(self, *args): return _template_default_arg.X_hello_unsigned_meth(self, *args)
    __swig_destroy__ = _template_default_arg.delete_X_hello_unsigned
    __del__ = lambda self : None;
X_hello_unsigned_swigregister = _template_default_arg.X_hello_unsigned_swigregister
X_hello_unsigned_swigregister(X_hello_unsigned)

class Y_hello_unsigned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Y_hello_unsigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Y_hello_unsigned, name)
    __repr__ = _swig_repr
    def meth(self, *args): return _template_default_arg.Y_hello_unsigned_meth(self, *args)
    def __init__(self): 
        this = _template_default_arg.new_Y_hello_unsigned()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default_arg.delete_Y_hello_unsigned
    __del__ = lambda self : None;
Y_hello_unsigned_swigregister = _template_default_arg.Y_hello_unsigned_swigregister
Y_hello_unsigned_swigregister(Y_hello_unsigned)

class X_Foo_Foo_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X_Foo_Foo_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X_Foo_Foo_int, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _template_default_arg.new_X_Foo_Foo_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def meth(self, *args): return _template_default_arg.X_Foo_Foo_int_meth(self, *args)
    __swig_destroy__ = _template_default_arg.delete_X_Foo_Foo_int
    __del__ = lambda self : None;
X_Foo_Foo_int_swigregister = _template_default_arg.X_Foo_Foo_int_swigregister
X_Foo_Foo_int_swigregister(X_Foo_Foo_int)

class Z_8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Z_8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Z_8, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _template_default_arg.new_Z_8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default_arg.delete_Z_8
    __del__ = lambda self : None;
Z_8_swigregister = _template_default_arg.Z_8_swigregister
Z_8_swigregister(Z_8)

class Foo_Z_8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo_Z_8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo_Z_8, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _template_default_arg.new_Foo_Z_8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default_arg.delete_Foo_Z_8
    __del__ = lambda self : None;
Foo_Z_8_swigregister = _template_default_arg.Foo_Z_8_swigregister
Foo_Z_8_swigregister(Foo_Z_8)

class X_Foo_Z_8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, X_Foo_Z_8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, X_Foo_Z_8, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _template_default_arg.new_X_Foo_Z_8(*args)
        try: self.this.append(this)
        except: self.this = this
    def meth(self, *args): return _template_default_arg.X_Foo_Z_8_meth(self, *args)
    __swig_destroy__ = _template_default_arg.delete_X_Foo_Z_8
    __del__ = lambda self : None;
X_Foo_Z_8_swigregister = _template_default_arg.X_Foo_Z_8_swigregister
X_Foo_Z_8_swigregister(X_Foo_Z_8)

class Bar(Hello_int):
    __swig_setmethods__ = {}
    for _s in [Hello_int]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bar, name, value)
    __swig_getmethods__ = {}
    for _s in [Hello_int]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _template_default_arg.new_Bar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default_arg.delete_Bar
    __del__ = lambda self : None;
Bar_swigregister = _template_default_arg.Bar_swigregister
Bar_swigregister(Bar)


def ott(*args):
  return _template_default_arg.ott(*args)
ott = _template_default_arg.ott

def ottint(*args):
  return _template_default_arg.ottint(*args)
ottint = _template_default_arg.ottint

def ottstring(*args):
  return _template_default_arg.ottstring(*args)
ottstring = _template_default_arg.ottstring

def nsott(*args):
  return _template_default_arg.nsott(*args)
nsott = _template_default_arg.nsott

def nsottint(*args):
  return _template_default_arg.nsottint(*args)
nsottint = _template_default_arg.nsottint

def nsottstring(*args):
  return _template_default_arg.nsottstring(*args)
nsottstring = _template_default_arg.nsottstring
# This file is compatible with both classic and new-style classes.


