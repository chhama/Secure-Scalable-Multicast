# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_std_stream', [dirname(__file__)])
        except ImportError:
            import _li_std_stream
            return _li_std_stream
        if fp is not None:
            try:
                _mod = imp.load_module('_li_std_stream', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_std_stream = swig_import_helper()
    del swig_import_helper
else:
    import _li_std_stream
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _li_std_stream.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _li_std_stream.SwigPyIterator_value(self)
    def incr(self, n=1): return _li_std_stream.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _li_std_stream.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _li_std_stream.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _li_std_stream.SwigPyIterator_equal(self, *args)
    def copy(self): return _li_std_stream.SwigPyIterator_copy(self)
    def next(self): return _li_std_stream.SwigPyIterator_next(self)
    def __next__(self): return _li_std_stream.SwigPyIterator___next__(self)
    def previous(self): return _li_std_stream.SwigPyIterator_previous(self)
    def advance(self, *args): return _li_std_stream.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _li_std_stream.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _li_std_stream.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _li_std_stream.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _li_std_stream.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _li_std_stream.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _li_std_stream.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _li_std_stream.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _li_std_stream.ios_base_erase_event
    imbue_event = _li_std_stream.ios_base_imbue_event
    copyfmt_event = _li_std_stream.ios_base_copyfmt_event
    def register_callback(self, *args): return _li_std_stream.ios_base_register_callback(self, *args)
    def flags(self, *args): return _li_std_stream.ios_base_flags(self, *args)
    def setf(self, *args): return _li_std_stream.ios_base_setf(self, *args)
    def unsetf(self, *args): return _li_std_stream.ios_base_unsetf(self, *args)
    def precision(self, *args): return _li_std_stream.ios_base_precision(self, *args)
    def width(self, *args): return _li_std_stream.ios_base_width(self, *args)
    __swig_getmethods__["sync_with_stdio"] = lambda x: _li_std_stream.ios_base_sync_with_stdio
    if _newclass:sync_with_stdio = staticmethod(_li_std_stream.ios_base_sync_with_stdio)
    def imbue(self, *args): return _li_std_stream.ios_base_imbue(self, *args)
    def getloc(self): return _li_std_stream.ios_base_getloc(self)
    __swig_getmethods__["xalloc"] = lambda x: _li_std_stream.ios_base_xalloc
    if _newclass:xalloc = staticmethod(_li_std_stream.ios_base_xalloc)
    def iword(self, *args): return _li_std_stream.ios_base_iword(self, *args)
    def pword(self, *args): return _li_std_stream.ios_base_pword(self, *args)
    __swig_destroy__ = _li_std_stream.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _li_std_stream.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _li_std_stream.cvar
ios_base.boolalpha = _li_std_stream.cvar.ios_base_boolalpha
ios_base.dec = _li_std_stream.cvar.ios_base_dec
ios_base.fixed = _li_std_stream.cvar.ios_base_fixed
ios_base.hex = _li_std_stream.cvar.ios_base_hex
ios_base.internal = _li_std_stream.cvar.ios_base_internal
ios_base.left = _li_std_stream.cvar.ios_base_left
ios_base.oct = _li_std_stream.cvar.ios_base_oct
ios_base.right = _li_std_stream.cvar.ios_base_right
ios_base.scientific = _li_std_stream.cvar.ios_base_scientific
ios_base.showbase = _li_std_stream.cvar.ios_base_showbase
ios_base.showpoint = _li_std_stream.cvar.ios_base_showpoint
ios_base.showpos = _li_std_stream.cvar.ios_base_showpos
ios_base.skipws = _li_std_stream.cvar.ios_base_skipws
ios_base.unitbuf = _li_std_stream.cvar.ios_base_unitbuf
ios_base.uppercase = _li_std_stream.cvar.ios_base_uppercase
ios_base.adjustfield = _li_std_stream.cvar.ios_base_adjustfield
ios_base.basefield = _li_std_stream.cvar.ios_base_basefield
ios_base.floatfield = _li_std_stream.cvar.ios_base_floatfield
ios_base.badbit = _li_std_stream.cvar.ios_base_badbit
ios_base.eofbit = _li_std_stream.cvar.ios_base_eofbit
ios_base.failbit = _li_std_stream.cvar.ios_base_failbit
ios_base.goodbit = _li_std_stream.cvar.ios_base_goodbit
ios_base.app = _li_std_stream.cvar.ios_base_app
ios_base.ate = _li_std_stream.cvar.ios_base_ate
ios_base.binary = _li_std_stream.cvar.ios_base_binary
ios_base.ios_base_in = _li_std_stream.cvar.ios_base_ios_base_in
ios_base.out = _li_std_stream.cvar.ios_base_out
ios_base.trunc = _li_std_stream.cvar.ios_base_trunc
ios_base.beg = _li_std_stream.cvar.ios_base_beg
ios_base.cur = _li_std_stream.cvar.ios_base_cur
ios_base.end = _li_std_stream.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
  return _li_std_stream.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _li_std_stream.ios_base_sync_with_stdio

def ios_base_xalloc():
  return _li_std_stream.ios_base_xalloc()
ios_base_xalloc = _li_std_stream.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(self): return _li_std_stream.ios_rdstate(self)
    def clear(self, *args): return _li_std_stream.ios_clear(self, *args)
    def setstate(self, *args): return _li_std_stream.ios_setstate(self, *args)
    def good(self): return _li_std_stream.ios_good(self)
    def eof(self): return _li_std_stream.ios_eof(self)
    def fail(self): return _li_std_stream.ios_fail(self)
    def bad(self): return _li_std_stream.ios_bad(self)
    def exceptions(self, *args): return _li_std_stream.ios_exceptions(self, *args)
    def __init__(self, *args): 
        this = _li_std_stream.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_stream.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args): return _li_std_stream.ios_tie(self, *args)
    def rdbuf(self, *args): return _li_std_stream.ios_rdbuf(self, *args)
    def copyfmt(self, *args): return _li_std_stream.ios_copyfmt(self, *args)
    def fill(self, *args): return _li_std_stream.ios_fill(self, *args)
    def imbue(self, *args): return _li_std_stream.ios_imbue(self, *args)
    def narrow(self, *args): return _li_std_stream.ios_narrow(self, *args)
    def widen(self, *args): return _li_std_stream.ios_widen(self, *args)
ios_swigregister = _li_std_stream.ios_swigregister
ios_swigregister(ios)

class string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string, name)
    __repr__ = _swig_repr
    def length(self): return _li_std_stream.string_length(self)
    def max_size(self): return _li_std_stream.string_max_size(self)
    def capacity(self): return _li_std_stream.string_capacity(self)
    def reserve(self, __res_arg=0): return _li_std_stream.string_reserve(self, __res_arg)
    def copy(self, *args): return _li_std_stream.string_copy(self, *args)
    def c_str(self): return _li_std_stream.string_c_str(self)
    def find(self, *args): return _li_std_stream.string_find(self, *args)
    def rfind(self, *args): return _li_std_stream.string_rfind(self, *args)
    def find_first_of(self, *args): return _li_std_stream.string_find_first_of(self, *args)
    def find_last_of(self, *args): return _li_std_stream.string_find_last_of(self, *args)
    def find_first_not_of(self, *args): return _li_std_stream.string_find_first_not_of(self, *args)
    def find_last_not_of(self, *args): return _li_std_stream.string_find_last_not_of(self, *args)
    def substr(self, *args): return _li_std_stream.string_substr(self, *args)
    def empty(self): return _li_std_stream.string_empty(self)
    def size(self): return _li_std_stream.string_size(self)
    def swap(self, *args): return _li_std_stream.string_swap(self, *args)
    def get_allocator(self): return _li_std_stream.string_get_allocator(self)
    def begin(self): return _li_std_stream.string_begin(self)
    def end(self): return _li_std_stream.string_end(self)
    def rbegin(self): return _li_std_stream.string_rbegin(self)
    def rend(self): return _li_std_stream.string_rend(self)
    def erase(self, *args): return _li_std_stream.string_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_stream.new_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _li_std_stream.string_assign(self, *args)
    def resize(self, *args): return _li_std_stream.string_resize(self, *args)
    def iterator(self): return _li_std_stream.string_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_stream.string___nonzero__(self)
    def __bool__(self): return _li_std_stream.string___bool__(self)
    def __len__(self): return _li_std_stream.string___len__(self)
    def __getslice__(self, *args): return _li_std_stream.string___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_stream.string___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_stream.string___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_stream.string___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_stream.string___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_stream.string___setitem__(self, *args)
    def insert(self, *args): return _li_std_stream.string_insert(self, *args)
    def replace(self, *args): return _li_std_stream.string_replace(self, *args)
    def __iadd__(self, *args): return _li_std_stream.string___iadd__(self, *args)
    def __add__(self, *args): return _li_std_stream.string___add__(self, *args)
    def __radd__(self, *args): return _li_std_stream.string___radd__(self, *args)
    def __str__(self): return _li_std_stream.string___str__(self)
    def __rlshift__(self, *args): return _li_std_stream.string___rlshift__(self, *args)
    def __eq__(self, *args): return _li_std_stream.string___eq__(self, *args)
    def __ne__(self, *args): return _li_std_stream.string___ne__(self, *args)
    def __gt__(self, *args): return _li_std_stream.string___gt__(self, *args)
    def __lt__(self, *args): return _li_std_stream.string___lt__(self, *args)
    def __ge__(self, *args): return _li_std_stream.string___ge__(self, *args)
    def __le__(self, *args): return _li_std_stream.string___le__(self, *args)
    __swig_destroy__ = _li_std_stream.delete_string
    __del__ = lambda self : None;
string_swigregister = _li_std_stream.string_swigregister
string_swigregister(string)
string.npos = _li_std_stream.cvar.string_npos

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_stream.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_stream.delete_ostream
    __del__ = lambda self : None;
    def put(self, *args): return _li_std_stream.ostream_put(self, *args)
    def write(self, *args): return _li_std_stream.ostream_write(self, *args)
    def flush(self): return _li_std_stream.ostream_flush(self)
    def tellp(self): return _li_std_stream.ostream_tellp(self)
    def seekp(self, *args): return _li_std_stream.ostream_seekp(self, *args)
    def __lshift__(self, *args): return _li_std_stream.ostream___lshift__(self, *args)
ostream_swigregister = _li_std_stream.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_stream.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_stream.delete_istream
    __del__ = lambda self : None;
    def __rshift__(self, *args): return _li_std_stream.istream___rshift__(self, *args)
    def gcount(self): return _li_std_stream.istream_gcount(self)
    def get(self, *args): return _li_std_stream.istream_get(self, *args)
    def getline(self, *args): return _li_std_stream.istream_getline(self, *args)
    def ignore(self, *args): return _li_std_stream.istream_ignore(self, *args)
    def peek(self): return _li_std_stream.istream_peek(self)
    def read(self, *args): return _li_std_stream.istream_read(self, *args)
    def readsome(self, *args): return _li_std_stream.istream_readsome(self, *args)
    def putback(self, *args): return _li_std_stream.istream_putback(self, *args)
    def unget(self): return _li_std_stream.istream_unget(self)
    def sync(self): return _li_std_stream.istream_sync(self)
    def tellg(self): return _li_std_stream.istream_tellg(self)
    def seekg(self, *args): return _li_std_stream.istream_seekg(self, *args)
istream_swigregister = _li_std_stream.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_stream.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_stream.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _li_std_stream.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _li_std_stream.endl_cb_ptr

def endl(*args):
  return _li_std_stream.endl(*args)
endl = _li_std_stream.endl
ends_cb_ptr = _li_std_stream.ends_cb_ptr

def ends(*args):
  return _li_std_stream.ends(*args)
ends = _li_std_stream.ends
flush_cb_ptr = _li_std_stream.flush_cb_ptr

def flush(*args):
  return _li_std_stream.flush(*args)
flush = _li_std_stream.flush
class streambuf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, streambuf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, streambuf, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _li_std_stream.delete_streambuf
    __del__ = lambda self : None;
    def pubimbue(self, *args): return _li_std_stream.streambuf_pubimbue(self, *args)
    def getloc(self): return _li_std_stream.streambuf_getloc(self)
    def pubsetbuf(self, *args): return _li_std_stream.streambuf_pubsetbuf(self, *args)
    def pubseekoff(self, *args): return _li_std_stream.streambuf_pubseekoff(self, *args)
    def pubseekpos(self, *args): return _li_std_stream.streambuf_pubseekpos(self, *args)
    def pubsync(self): return _li_std_stream.streambuf_pubsync(self)
    def in_avail(self): return _li_std_stream.streambuf_in_avail(self)
    def snextc(self): return _li_std_stream.streambuf_snextc(self)
    def sbumpc(self): return _li_std_stream.streambuf_sbumpc(self)
    def sgetc(self): return _li_std_stream.streambuf_sgetc(self)
    def sgetn(self, *args): return _li_std_stream.streambuf_sgetn(self, *args)
    def sputbackc(self, *args): return _li_std_stream.streambuf_sputbackc(self, *args)
    def sungetc(self): return _li_std_stream.streambuf_sungetc(self)
    def sputc(self, *args): return _li_std_stream.streambuf_sputc(self, *args)
    def sputn(self, *args): return _li_std_stream.streambuf_sputn(self, *args)
streambuf_swigregister = _li_std_stream.streambuf_swigregister
streambuf_swigregister(streambuf)

class istringstream(istream):
    __swig_setmethods__ = {}
    for _s in [istream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istringstream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istringstream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_stream.new_istringstream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_stream.delete_istringstream
    __del__ = lambda self : None;
    def rdbuf(self): return _li_std_stream.istringstream_rdbuf(self)
    def str(self, *args): return _li_std_stream.istringstream_str(self, *args)
istringstream_swigregister = _li_std_stream.istringstream_swigregister
istringstream_swigregister(istringstream)

class ostringstream(ostream):
    __swig_setmethods__ = {}
    for _s in [ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostringstream, name, value)
    __swig_getmethods__ = {}
    for _s in [ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostringstream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_stream.new_ostringstream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_stream.delete_ostringstream
    __del__ = lambda self : None;
    def rdbuf(self): return _li_std_stream.ostringstream_rdbuf(self)
    def str(self): return _li_std_stream.ostringstream_str(self)
ostringstream_swigregister = _li_std_stream.ostringstream_swigregister
ostringstream_swigregister(ostringstream)

class stringstream(iostream):
    __swig_setmethods__ = {}
    for _s in [iostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, stringstream, name, value)
    __swig_getmethods__ = {}
    for _s in [iostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, stringstream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_stream.new_stringstream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_stream.delete_stringstream
    __del__ = lambda self : None;
    def rdbuf(self): return _li_std_stream.stringstream_rdbuf(self)
    def str(self, *args): return _li_std_stream.stringstream_str(self, *args)
stringstream_swigregister = _li_std_stream.stringstream_swigregister
stringstream_swigregister(stringstream)

class B(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _li_std_stream.delete_B
    __del__ = lambda self : None;
    def __init__(self): 
        this = _li_std_stream.new_B()
        try: self.this.append(this)
        except: self.this = this
B_swigregister = _li_std_stream.B_swigregister
B_swigregister(B)

class A(B):
    __swig_setmethods__ = {}
    for _s in [B]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    for _s in [B]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    def __add__(self, *args): return _li_std_stream.A___add__(self, *args)
    __swig_getmethods__["bar"] = lambda x: _li_std_stream.A_bar
    if _newclass:bar = staticmethod(_li_std_stream.A_bar)
    __swig_getmethods__["foo"] = lambda x: _li_std_stream.A_foo
    if _newclass:foo = staticmethod(_li_std_stream.A_foo)
    def __rlshift__(self, *args): return _li_std_stream.A___rlshift__(self, *args)
    def __init__(self): 
        this = _li_std_stream.new_A()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_stream.delete_A
    __del__ = lambda self : None;
A_swigregister = _li_std_stream.A_swigregister
A_swigregister(A)

def A_bar(*args):
  return _li_std_stream.A_bar(*args)
A_bar = _li_std_stream.A_bar

def A_foo(*args):
  return _li_std_stream.A_foo(*args)
A_foo = _li_std_stream.A_foo

# This file is compatible with both classic and new-style classes.


