# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_template_default_class_parms', [dirname(__file__)])
        except ImportError:
            import _template_default_class_parms
            return _template_default_class_parms
        if fp is not None:
            try:
                _mod = imp.load_module('_template_default_class_parms', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _template_default_class_parms = swig_import_helper()
    del swig_import_helper
else:
    import _template_default_class_parms
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SomeType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SomeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SomeType, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_default_class_parms.new_SomeType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default_class_parms.delete_SomeType
    __del__ = lambda self : None;
SomeType_swigregister = _template_default_class_parms.SomeType_swigregister
SomeType_swigregister(SomeType)

class AnotherType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnotherType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnotherType, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_default_class_parms.new_AnotherType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default_class_parms.delete_AnotherType
    __del__ = lambda self : None;
AnotherType_swigregister = _template_default_class_parms.AnotherType_swigregister
AnotherType_swigregister(AnotherType)

class DefaultBar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultBar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultBar, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CType"] = _template_default_class_parms.DefaultBar_CType_set
    __swig_getmethods__["CType"] = _template_default_class_parms.DefaultBar_CType_get
    if _newclass:CType = _swig_property(_template_default_class_parms.DefaultBar_CType_get, _template_default_class_parms.DefaultBar_CType_set)
    __swig_setmethods__["DType"] = _template_default_class_parms.DefaultBar_DType_set
    __swig_getmethods__["DType"] = _template_default_class_parms.DefaultBar_DType_get
    if _newclass:DType = _swig_property(_template_default_class_parms.DefaultBar_DType_get, _template_default_class_parms.DefaultBar_DType_set)
    __swig_setmethods__["EType"] = _template_default_class_parms.DefaultBar_EType_set
    __swig_getmethods__["EType"] = _template_default_class_parms.DefaultBar_EType_get
    if _newclass:EType = _swig_property(_template_default_class_parms.DefaultBar_EType_get, _template_default_class_parms.DefaultBar_EType_set)
    def __init__(self, *args): 
        this = _template_default_class_parms.new_DefaultBar(*args)
        try: self.this.append(this)
        except: self.this = this
    def method(self, *args): return _template_default_class_parms.DefaultBar_method(self, *args)
    __swig_destroy__ = _template_default_class_parms.delete_DefaultBar
    __del__ = lambda self : None;
DefaultBar_swigregister = _template_default_class_parms.DefaultBar_swigregister
DefaultBar_swigregister(DefaultBar)

class DefaultFoo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultFoo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultFoo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TType"] = _template_default_class_parms.DefaultFoo_TType_set
    __swig_getmethods__["TType"] = _template_default_class_parms.DefaultFoo_TType_get
    if _newclass:TType = _swig_property(_template_default_class_parms.DefaultFoo_TType_get, _template_default_class_parms.DefaultFoo_TType_set)
    def __init__(self, *args): 
        this = _template_default_class_parms.new_DefaultFoo(*args)
        try: self.this.append(this)
        except: self.this = this
    def method(self, *args): return _template_default_class_parms.DefaultFoo_method(self, *args)
    __swig_destroy__ = _template_default_class_parms.delete_DefaultFoo
    __del__ = lambda self : None;
DefaultFoo_swigregister = _template_default_class_parms.DefaultFoo_swigregister
DefaultFoo_swigregister(DefaultFoo)

class BarAnotherTypeBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarAnotherTypeBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BarAnotherTypeBool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CType"] = _template_default_class_parms.BarAnotherTypeBool_CType_set
    __swig_getmethods__["CType"] = _template_default_class_parms.BarAnotherTypeBool_CType_get
    if _newclass:CType = _swig_property(_template_default_class_parms.BarAnotherTypeBool_CType_get, _template_default_class_parms.BarAnotherTypeBool_CType_set)
    __swig_setmethods__["DType"] = _template_default_class_parms.BarAnotherTypeBool_DType_set
    __swig_getmethods__["DType"] = _template_default_class_parms.BarAnotherTypeBool_DType_get
    if _newclass:DType = _swig_property(_template_default_class_parms.BarAnotherTypeBool_DType_get, _template_default_class_parms.BarAnotherTypeBool_DType_set)
    __swig_setmethods__["EType"] = _template_default_class_parms.BarAnotherTypeBool_EType_set
    __swig_getmethods__["EType"] = _template_default_class_parms.BarAnotherTypeBool_EType_get
    if _newclass:EType = _swig_property(_template_default_class_parms.BarAnotherTypeBool_EType_get, _template_default_class_parms.BarAnotherTypeBool_EType_set)
    def __init__(self, *args): 
        this = _template_default_class_parms.new_BarAnotherTypeBool(*args)
        try: self.this.append(this)
        except: self.this = this
    def method(self, *args): return _template_default_class_parms.BarAnotherTypeBool_method(self, *args)
    __swig_destroy__ = _template_default_class_parms.delete_BarAnotherTypeBool
    __del__ = lambda self : None;
BarAnotherTypeBool_swigregister = _template_default_class_parms.BarAnotherTypeBool_swigregister
BarAnotherTypeBool_swigregister(BarAnotherTypeBool)

class FooAnotherType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FooAnotherType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FooAnotherType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TType"] = _template_default_class_parms.FooAnotherType_TType_set
    __swig_getmethods__["TType"] = _template_default_class_parms.FooAnotherType_TType_get
    if _newclass:TType = _swig_property(_template_default_class_parms.FooAnotherType_TType_get, _template_default_class_parms.FooAnotherType_TType_set)
    def __init__(self, *args): 
        this = _template_default_class_parms.new_FooAnotherType(*args)
        try: self.this.append(this)
        except: self.this = this
    def method(self, *args): return _template_default_class_parms.FooAnotherType_method(self, *args)
    __swig_destroy__ = _template_default_class_parms.delete_FooAnotherType
    __del__ = lambda self : None;
FooAnotherType_swigregister = _template_default_class_parms.FooAnotherType_swigregister
FooAnotherType_swigregister(FooAnotherType)

# This file is compatible with both classic and new-style classes.


