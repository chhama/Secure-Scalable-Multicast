# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_template_inherit', [dirname(__file__)])
        except ImportError:
            import _template_inherit
            return _template_inherit
        if fp is not None:
            try:
                _mod = imp.load_module('_template_inherit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _template_inherit = swig_import_helper()
    del swig_import_helper
else:
    import _template_inherit
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class FooInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FooInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FooInt, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _template_inherit.delete_FooInt
    __del__ = lambda self : None;
    def blah(self): return _template_inherit.FooInt_blah(self)
    def foomethod(self): return _template_inherit.FooInt_foomethod(self)
    def __init__(self): 
        this = _template_inherit.new_FooInt()
        try: self.this.append(this)
        except: self.this = this
FooInt_swigregister = _template_inherit.FooInt_swigregister
FooInt_swigregister(FooInt)

class FooDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FooDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FooDouble, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _template_inherit.delete_FooDouble
    __del__ = lambda self : None;
    def blah(self): return _template_inherit.FooDouble_blah(self)
    def foomethod(self): return _template_inherit.FooDouble_foomethod(self)
    def __init__(self): 
        this = _template_inherit.new_FooDouble()
        try: self.this.append(this)
        except: self.this = this
FooDouble_swigregister = _template_inherit.FooDouble_swigregister
FooDouble_swigregister(FooDouble)

class FooUInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FooUInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FooUInt, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _template_inherit.delete_FooUInt
    __del__ = lambda self : None;
    def blah(self): return _template_inherit.FooUInt_blah(self)
    def foomethod(self): return _template_inherit.FooUInt_foomethod(self)
    def __init__(self): 
        this = _template_inherit.new_FooUInt()
        try: self.this.append(this)
        except: self.this = this
FooUInt_swigregister = _template_inherit.FooUInt_swigregister
FooUInt_swigregister(FooUInt)

class BarInt(FooInt):
    __swig_setmethods__ = {}
    for _s in [FooInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarInt, name, value)
    __swig_getmethods__ = {}
    for _s in [FooInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BarInt, name)
    __repr__ = _swig_repr
    def blah(self): return _template_inherit.BarInt_blah(self)
    def __init__(self): 
        this = _template_inherit.new_BarInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_inherit.delete_BarInt
    __del__ = lambda self : None;
BarInt_swigregister = _template_inherit.BarInt_swigregister
BarInt_swigregister(BarInt)

class BarDouble(FooDouble):
    __swig_setmethods__ = {}
    for _s in [FooDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [FooDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BarDouble, name)
    __repr__ = _swig_repr
    def blah(self): return _template_inherit.BarDouble_blah(self)
    def __init__(self): 
        this = _template_inherit.new_BarDouble()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_inherit.delete_BarDouble
    __del__ = lambda self : None;
BarDouble_swigregister = _template_inherit.BarDouble_swigregister
BarDouble_swigregister(BarDouble)

class BarUInt(FooUInt):
    __swig_setmethods__ = {}
    for _s in [FooUInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarUInt, name, value)
    __swig_getmethods__ = {}
    for _s in [FooUInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BarUInt, name)
    __repr__ = _swig_repr
    def blah(self): return _template_inherit.BarUInt_blah(self)
    def __init__(self): 
        this = _template_inherit.new_BarUInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_inherit.delete_BarUInt
    __del__ = lambda self : None;
BarUInt_swigregister = _template_inherit.BarUInt_swigregister
BarUInt_swigregister(BarUInt)


def invoke_blah_int(*args):
  return _template_inherit.invoke_blah_int(*args)
invoke_blah_int = _template_inherit.invoke_blah_int

def invoke_blah_double(*args):
  return _template_inherit.invoke_blah_double(*args)
invoke_blah_double = _template_inherit.invoke_blah_double

def invoke_blah_uint(*args):
  return _template_inherit.invoke_blah_uint(*args)
invoke_blah_uint = _template_inherit.invoke_blah_uint
# This file is compatible with both classic and new-style classes.


