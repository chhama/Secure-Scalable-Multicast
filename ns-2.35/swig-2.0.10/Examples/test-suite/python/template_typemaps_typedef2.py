# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_template_typemaps_typedef2', [dirname(__file__)])
        except ImportError:
            import _template_typemaps_typedef2
            return _template_typemaps_typedef2
        if fp is not None:
            try:
                _mod = imp.load_module('_template_typemaps_typedef2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _template_typemaps_typedef2 = swig_import_helper()
    del swig_import_helper
else:
    import _template_typemaps_typedef2
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _template_typemaps_typedef2.A_val_set
    __swig_getmethods__["val"] = _template_typemaps_typedef2.A_val_get
    if _newclass:val = _swig_property(_template_typemaps_typedef2.A_val_get, _template_typemaps_typedef2.A_val_set)
    def __init__(self, v=0): 
        this = _template_typemaps_typedef2.new_A(v)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_typemaps_typedef2.delete_A
    __del__ = lambda self : None;
A_swigregister = _template_typemaps_typedef2.A_swigregister
A_swigregister(A)

class PairIntA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first"] = _template_typemaps_typedef2.PairIntA_first_set
    __swig_getmethods__["first"] = _template_typemaps_typedef2.PairIntA_first_get
    if _newclass:first = _swig_property(_template_typemaps_typedef2.PairIntA_first_get, _template_typemaps_typedef2.PairIntA_first_set)
    __swig_setmethods__["second"] = _template_typemaps_typedef2.PairIntA_second_set
    __swig_getmethods__["second"] = _template_typemaps_typedef2.PairIntA_second_get
    if _newclass:second = _swig_property(_template_typemaps_typedef2.PairIntA_second_get, _template_typemaps_typedef2.PairIntA_second_set)
    def __init__(self): 
        this = _template_typemaps_typedef2.new_PairIntA()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_typemaps_typedef2.delete_PairIntA
    __del__ = lambda self : None;
PairIntA_swigregister = _template_typemaps_typedef2.PairIntA_swigregister
PairIntA_swigregister(PairIntA)

class MultimapIntA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultimapIntA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultimapIntA, name)
    __repr__ = _swig_repr
    def typemap_test(self, *args): return _template_typemaps_typedef2.MultimapIntA_typemap_test(self, *args)
    def make_dummy_pair(self): return _template_typemaps_typedef2.MultimapIntA_make_dummy_pair(self)
    def __init__(self): 
        this = _template_typemaps_typedef2.new_MultimapIntA()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_typemaps_typedef2.delete_MultimapIntA
    __del__ = lambda self : None;
MultimapIntA_swigregister = _template_typemaps_typedef2.MultimapIntA_swigregister
MultimapIntA_swigregister(MultimapIntA)

class PairAInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairAInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairAInt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first"] = _template_typemaps_typedef2.PairAInt_first_set
    __swig_getmethods__["first"] = _template_typemaps_typedef2.PairAInt_first_get
    if _newclass:first = _swig_property(_template_typemaps_typedef2.PairAInt_first_get, _template_typemaps_typedef2.PairAInt_first_set)
    __swig_setmethods__["second"] = _template_typemaps_typedef2.PairAInt_second_set
    __swig_getmethods__["second"] = _template_typemaps_typedef2.PairAInt_second_get
    if _newclass:second = _swig_property(_template_typemaps_typedef2.PairAInt_second_get, _template_typemaps_typedef2.PairAInt_second_set)
    def __init__(self): 
        this = _template_typemaps_typedef2.new_PairAInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_typemaps_typedef2.delete_PairAInt
    __del__ = lambda self : None;
PairAInt_swigregister = _template_typemaps_typedef2.PairAInt_swigregister
PairAInt_swigregister(PairAInt)

class MultimapAInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultimapAInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MultimapAInt, name)
    __repr__ = _swig_repr
    def typemap_test(self, *args): return _template_typemaps_typedef2.MultimapAInt_typemap_test(self, *args)
    def make_dummy_pair(self): return _template_typemaps_typedef2.MultimapAInt_make_dummy_pair(self)
    def __init__(self): 
        this = _template_typemaps_typedef2.new_MultimapAInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_typemaps_typedef2.delete_MultimapAInt
    __del__ = lambda self : None;
MultimapAInt_swigregister = _template_typemaps_typedef2.MultimapAInt_swigregister
MultimapAInt_swigregister(MultimapAInt)


def typedef_test1(*args):
  return _template_typemaps_typedef2.typedef_test1(*args)
typedef_test1 = _template_typemaps_typedef2.typedef_test1

def typedef_test2(*args):
  return _template_typemaps_typedef2.typedef_test2(*args)
typedef_test2 = _template_typemaps_typedef2.typedef_test2

def typedef_test3(*args):
  return _template_typemaps_typedef2.typedef_test3(*args)
typedef_test3 = _template_typemaps_typedef2.typedef_test3

def typedef_test4(*args):
  return _template_typemaps_typedef2.typedef_test4(*args)
typedef_test4 = _template_typemaps_typedef2.typedef_test4

def typedef_test5(*args):
  return _template_typemaps_typedef2.typedef_test5(*args)
typedef_test5 = _template_typemaps_typedef2.typedef_test5

def typedef_test6(*args):
  return _template_typemaps_typedef2.typedef_test6(*args)
typedef_test6 = _template_typemaps_typedef2.typedef_test6
# This file is compatible with both classic and new-style classes.


