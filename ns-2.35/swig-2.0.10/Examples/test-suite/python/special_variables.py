# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_special_variables', [dirname(__file__)])
        except ImportError:
            import _special_variables
            return _special_variables
        if fp is not None:
            try:
                _mod = imp.load_module('_special_variables', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _special_variables = swig_import_helper()
    del swig_import_helper
else:
    import _special_variables
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x



def testmethod(*args):
  return _special_variables.testmethod(*args)
testmethod = _special_variables.testmethod
class KKK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KKK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KKK, name)
    __repr__ = _swig_repr
    def testmethod(self, *args): return _special_variables.KKK_testmethod(self, *args)
    __swig_getmethods__["teststaticmethod"] = lambda x: _special_variables.KKK_teststaticmethod
    if _newclass:teststaticmethod = staticmethod(_special_variables.KKK_teststaticmethod)
    def __init__(self): 
        this = _special_variables.new_KKK()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _special_variables.delete_KKK
    __del__ = lambda self : None;
KKK_swigregister = _special_variables.KKK_swigregister
KKK_swigregister(KKK)

def KKK_teststaticmethod(*args):
  return _special_variables.KKK_teststaticmethod(*args)
KKK_teststaticmethod = _special_variables.KKK_teststaticmethod


def ExceptionVars(*args):
  return _special_variables.ExceptionVars(*args)
ExceptionVars = _special_variables.ExceptionVars

def overloadedmethod(*args):
  return _special_variables.overloadedmethod(*args)
overloadedmethod = _special_variables.overloadedmethod
class ABC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ABC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ABC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _special_variables.new_ABC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["staticmethod"] = lambda x: _special_variables.ABC_staticmethod
    if _newclass:staticmethod = staticmethod(_special_variables.ABC_staticmethod)
    def instancemethod(self, *args): return _special_variables.ABC_instancemethod(self, *args)
    def constmethod(self, *args): return _special_variables.ABC_constmethod(self, *args)
    __swig_destroy__ = _special_variables.delete_ABC
    __del__ = lambda self : None;
ABC_swigregister = _special_variables.ABC_swigregister
ABC_swigregister(ABC)
cvar = _special_variables.cvar

def ABC_staticmethod(*args):
  return _special_variables.ABC_staticmethod(*args)
ABC_staticmethod = _special_variables.ABC_staticmethod


def globtemplate(*args):
  return _special_variables.globtemplate(*args)
globtemplate = _special_variables.globtemplate
class TemplateABC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TemplateABC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TemplateABC, name)
    __repr__ = _swig_repr
    def tmethod(self, *args): return _special_variables.TemplateABC_tmethod(self, *args)
    def __init__(self): 
        this = _special_variables.new_TemplateABC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _special_variables.delete_TemplateABC
    __del__ = lambda self : None;
TemplateABC_swigregister = _special_variables.TemplateABC_swigregister
TemplateABC_swigregister(TemplateABC)


def director_testmethod(*args):
  return _special_variables.director_testmethod(*args)
director_testmethod = _special_variables.director_testmethod
class DirectorTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectorTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirectorTest, name)
    __repr__ = _swig_repr
    def director_testmethod(self, *args): return _special_variables.DirectorTest_director_testmethod(self, *args)
    __swig_destroy__ = _special_variables.delete_DirectorTest
    __del__ = lambda self : None;
    def __init__(self): 
        if self.__class__ == DirectorTest:
            _self = None
        else:
            _self = self
        this = _special_variables.new_DirectorTest(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _special_variables.disown_DirectorTest(self)
        return weakref_proxy(self)
DirectorTest_swigregister = _special_variables.DirectorTest_swigregister
DirectorTest_swigregister(DirectorTest)

class DEFNewName(ABC):
    __swig_setmethods__ = {}
    for _s in [ABC]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DEFNewName, name, value)
    __swig_getmethods__ = {}
    for _s in [ABC]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DEFNewName, name)
    __repr__ = _swig_repr
    def instance_def(self): return _special_variables.DEFNewName_instance_def(self)
    __swig_getmethods__["static_def"] = lambda x: _special_variables.DEFNewName_static_def
    if _newclass:static_def = staticmethod(_special_variables.DEFNewName_static_def)
    def __init__(self): 
        this = _special_variables.new_DEFNewName()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _special_variables.delete_DEFNewName
    __del__ = lambda self : None;
DEFNewName_swigregister = _special_variables.DEFNewName_swigregister
DEFNewName_swigregister(DEFNewName)

def DEFNewName_static_def():
  return _special_variables.DEFNewName_static_def()
DEFNewName_static_def = _special_variables.DEFNewName_static_def

# This file is compatible with both classic and new-style classes.


