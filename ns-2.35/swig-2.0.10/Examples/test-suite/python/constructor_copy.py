# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_constructor_copy', [dirname(__file__)])
        except ImportError:
            import _constructor_copy
            return _constructor_copy
        if fp is not None:
            try:
                _mod = imp.load_module('_constructor_copy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _constructor_copy = swig_import_helper()
    del swig_import_helper
else:
    import _constructor_copy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Foo1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _constructor_copy.Foo1_x_set
    __swig_getmethods__["x"] = _constructor_copy.Foo1_x_get
    if _newclass:x = _swig_property(_constructor_copy.Foo1_x_get, _constructor_copy.Foo1_x_set)
    def __init__(self, *args): 
        this = _constructor_copy.new_Foo1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Foo1
    __del__ = lambda self : None;
Foo1_swigregister = _constructor_copy.Foo1_swigregister
Foo1_swigregister(Foo1)

class Foo2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _constructor_copy.new_Foo2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Foo2
    __del__ = lambda self : None;
Foo2_swigregister = _constructor_copy.Foo2_swigregister
Foo2_swigregister(Foo2)

class Foo3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _constructor_copy.new_Foo3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Foo3
    __del__ = lambda self : None;
Foo3_swigregister = _constructor_copy.Foo3_swigregister
Foo3_swigregister(Foo3)

class Foo4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo4, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _constructor_copy.new_Foo4()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Foo4
    __del__ = lambda self : None;
Foo4_swigregister = _constructor_copy.Foo4_swigregister
Foo4_swigregister(Foo4)

class Foo4a(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo4a, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo4a, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _constructor_copy.new_Foo4a()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Foo4a
    __del__ = lambda self : None;
Foo4a_swigregister = _constructor_copy.Foo4a_swigregister
Foo4a_swigregister(Foo4a)

class Foo5(Foo4):
    __swig_setmethods__ = {}
    for _s in [Foo4]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo5, name, value)
    __swig_getmethods__ = {}
    for _s in [Foo4]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Foo5, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _constructor_copy.new_Foo5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Foo5
    __del__ = lambda self : None;
Foo5_swigregister = _constructor_copy.Foo5_swigregister
Foo5_swigregister(Foo5)

class Foo6(Foo4):
    __swig_setmethods__ = {}
    for _s in [Foo4]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo6, name, value)
    __swig_getmethods__ = {}
    for _s in [Foo4]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Foo6, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _constructor_copy.new_Foo6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Foo6
    __del__ = lambda self : None;
Foo6_swigregister = _constructor_copy.Foo6_swigregister
Foo6_swigregister(Foo6)

class Foo7(Foo5):
    __swig_setmethods__ = {}
    for _s in [Foo5]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo7, name, value)
    __swig_getmethods__ = {}
    for _s in [Foo5]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Foo7, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _constructor_copy.new_Foo7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Foo7
    __del__ = lambda self : None;
Foo7_swigregister = _constructor_copy.Foo7_swigregister
Foo7_swigregister(Foo7)

class Foo8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo8, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _constructor_copy.new_Foo8()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Foo8
    __del__ = lambda self : None;
Foo8_swigregister = _constructor_copy.Foo8_swigregister
Foo8_swigregister(Foo8)

class Bari(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bari, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bari, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _constructor_copy.Bari_x_set
    __swig_getmethods__["x"] = _constructor_copy.Bari_x_get
    if _newclass:x = _swig_property(_constructor_copy.Bari_x_get, _constructor_copy.Bari_x_set)
    def __init__(self, *args): 
        this = _constructor_copy.new_Bari(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Bari
    __del__ = lambda self : None;
Bari_swigregister = _constructor_copy.Bari_swigregister
Bari_swigregister(Bari)

class Bard(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bard, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bard, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _constructor_copy.Bard_x_set
    __swig_getmethods__["x"] = _constructor_copy.Bard_x_get
    if _newclass:x = _swig_property(_constructor_copy.Bard_x_get, _constructor_copy.Bard_x_set)
    def __init__(self, _x=0): 
        this = _constructor_copy.new_Bard(_x)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Bard
    __del__ = lambda self : None;
Bard_swigregister = _constructor_copy.Bard_swigregister
Bard_swigregister(Bard)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _constructor_copy.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _constructor_copy.SwigPyIterator_value(self)
    def incr(self, n=1): return _constructor_copy.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _constructor_copy.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _constructor_copy.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _constructor_copy.SwigPyIterator_equal(self, *args)
    def copy(self): return _constructor_copy.SwigPyIterator_copy(self)
    def next(self): return _constructor_copy.SwigPyIterator_next(self)
    def __next__(self): return _constructor_copy.SwigPyIterator___next__(self)
    def previous(self): return _constructor_copy.SwigPyIterator_previous(self)
    def advance(self, *args): return _constructor_copy.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _constructor_copy.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _constructor_copy.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _constructor_copy.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _constructor_copy.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _constructor_copy.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _constructor_copy.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _constructor_copy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Flow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Flow, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _constructor_copy.new_Flow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Flow
    __del__ = lambda self : None;
Flow_swigregister = _constructor_copy.Flow_swigregister
Flow_swigregister(Flow)

class FlowFlow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlowFlow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FlowFlow, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _constructor_copy.new_FlowFlow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_FlowFlow
    __del__ = lambda self : None;
FlowFlow_swigregister = _constructor_copy.FlowFlow_swigregister
FlowFlow_swigregister(FlowFlow)

class VectFlow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectFlow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectFlow, name)
    __repr__ = _swig_repr
    def iterator(self): return _constructor_copy.VectFlow_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _constructor_copy.VectFlow___nonzero__(self)
    def __bool__(self): return _constructor_copy.VectFlow___bool__(self)
    def __len__(self): return _constructor_copy.VectFlow___len__(self)
    def pop(self): return _constructor_copy.VectFlow_pop(self)
    def __getslice__(self, *args): return _constructor_copy.VectFlow___getslice__(self, *args)
    def __setslice__(self, *args): return _constructor_copy.VectFlow___setslice__(self, *args)
    def __delslice__(self, *args): return _constructor_copy.VectFlow___delslice__(self, *args)
    def __delitem__(self, *args): return _constructor_copy.VectFlow___delitem__(self, *args)
    def __getitem__(self, *args): return _constructor_copy.VectFlow___getitem__(self, *args)
    def __setitem__(self, *args): return _constructor_copy.VectFlow___setitem__(self, *args)
    def append(self, *args): return _constructor_copy.VectFlow_append(self, *args)
    def empty(self): return _constructor_copy.VectFlow_empty(self)
    def size(self): return _constructor_copy.VectFlow_size(self)
    def clear(self): return _constructor_copy.VectFlow_clear(self)
    def swap(self, *args): return _constructor_copy.VectFlow_swap(self, *args)
    def get_allocator(self): return _constructor_copy.VectFlow_get_allocator(self)
    def begin(self): return _constructor_copy.VectFlow_begin(self)
    def end(self): return _constructor_copy.VectFlow_end(self)
    def rbegin(self): return _constructor_copy.VectFlow_rbegin(self)
    def rend(self): return _constructor_copy.VectFlow_rend(self)
    def pop_back(self): return _constructor_copy.VectFlow_pop_back(self)
    def erase(self, *args): return _constructor_copy.VectFlow_erase(self, *args)
    def __init__(self, *args): 
        this = _constructor_copy.new_VectFlow(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _constructor_copy.VectFlow_push_back(self, *args)
    def front(self): return _constructor_copy.VectFlow_front(self)
    def back(self): return _constructor_copy.VectFlow_back(self)
    def assign(self, *args): return _constructor_copy.VectFlow_assign(self, *args)
    def resize(self, *args): return _constructor_copy.VectFlow_resize(self, *args)
    def insert(self, *args): return _constructor_copy.VectFlow_insert(self, *args)
    def reserve(self, *args): return _constructor_copy.VectFlow_reserve(self, *args)
    def capacity(self): return _constructor_copy.VectFlow_capacity(self)
    __swig_destroy__ = _constructor_copy.delete_VectFlow
    __del__ = lambda self : None;
VectFlow_swigregister = _constructor_copy.VectFlow_swigregister
VectFlow_swigregister(VectFlow)

class ABC_Libor_ModelUtils(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ABC_Libor_ModelUtils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ABC_Libor_ModelUtils, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _constructor_copy.new_ABC_Libor_ModelUtils(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_ABC_Libor_ModelUtils
    __del__ = lambda self : None;
ABC_Libor_ModelUtils_swigregister = _constructor_copy.ABC_Libor_ModelUtils_swigregister
ABC_Libor_ModelUtils_swigregister(ABC_Libor_ModelUtils)

class ModelUtils_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelUtils_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelUtils_i, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _constructor_copy.new_ModelUtils_i(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_ModelUtils_i
    __del__ = lambda self : None;
ModelUtils_i_swigregister = _constructor_copy.ModelUtils_i_swigregister
ModelUtils_i_swigregister(ModelUtils_i)

class Space1Space2_TotalReturnSwap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Space1Space2_TotalReturnSwap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Space1Space2_TotalReturnSwap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _constructor_copy.new_Space1Space2_TotalReturnSwap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Space1Space2_TotalReturnSwap
    __del__ = lambda self : None;
Space1Space2_TotalReturnSwap_swigregister = _constructor_copy.Space1Space2_TotalReturnSwap_swigregister
Space1Space2_TotalReturnSwap_swigregister(Space1Space2_TotalReturnSwap)

class Total_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Total_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Total_i, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _constructor_copy.new_Total_i(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _constructor_copy.delete_Total_i
    __del__ = lambda self : None;
Total_i_swigregister = _constructor_copy.Total_i_swigregister
Total_i_swigregister(Total_i)

# This file is compatible with both classic and new-style classes.


