# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_std_vector', [dirname(__file__)])
        except ImportError:
            import _li_std_vector
            return _li_std_vector
        if fp is not None:
            try:
                _mod = imp.load_module('_li_std_vector', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_std_vector = swig_import_helper()
    del swig_import_helper
else:
    import _li_std_vector
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _li_std_vector.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _li_std_vector.SwigPyIterator_value(self)
    def incr(self, n=1): return _li_std_vector.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _li_std_vector.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _li_std_vector.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _li_std_vector.SwigPyIterator_equal(self, *args)
    def copy(self): return _li_std_vector.SwigPyIterator_copy(self)
    def next(self): return _li_std_vector.SwigPyIterator_next(self)
    def __next__(self): return _li_std_vector.SwigPyIterator___next__(self)
    def previous(self): return _li_std_vector.SwigPyIterator_previous(self)
    def advance(self, *args): return _li_std_vector.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _li_std_vector.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _li_std_vector.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _li_std_vector.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _li_std_vector.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _li_std_vector.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _li_std_vector.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _li_std_vector.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.IntVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.IntVector___bool__(self)
    def __len__(self): return _li_std_vector.IntVector___len__(self)
    def pop(self): return _li_std_vector.IntVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.IntVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.IntVector_append(self, *args)
    def empty(self): return _li_std_vector.IntVector_empty(self)
    def size(self): return _li_std_vector.IntVector_size(self)
    def clear(self): return _li_std_vector.IntVector_clear(self)
    def swap(self, *args): return _li_std_vector.IntVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.IntVector_get_allocator(self)
    def begin(self): return _li_std_vector.IntVector_begin(self)
    def end(self): return _li_std_vector.IntVector_end(self)
    def rbegin(self): return _li_std_vector.IntVector_rbegin(self)
    def rend(self): return _li_std_vector.IntVector_rend(self)
    def pop_back(self): return _li_std_vector.IntVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.IntVector_push_back(self, *args)
    def front(self): return _li_std_vector.IntVector_front(self)
    def back(self): return _li_std_vector.IntVector_back(self)
    def assign(self, *args): return _li_std_vector.IntVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.IntVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.IntVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.IntVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.IntVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _li_std_vector.IntVector_swigregister
IntVector_swigregister(IntVector)

class BoolVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.BoolVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.BoolVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.BoolVector___bool__(self)
    def __len__(self): return _li_std_vector.BoolVector___len__(self)
    def pop(self): return _li_std_vector.BoolVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.BoolVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.BoolVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.BoolVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.BoolVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.BoolVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.BoolVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.BoolVector_append(self, *args)
    def empty(self): return _li_std_vector.BoolVector_empty(self)
    def size(self): return _li_std_vector.BoolVector_size(self)
    def clear(self): return _li_std_vector.BoolVector_clear(self)
    def swap(self, *args): return _li_std_vector.BoolVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.BoolVector_get_allocator(self)
    def begin(self): return _li_std_vector.BoolVector_begin(self)
    def end(self): return _li_std_vector.BoolVector_end(self)
    def rbegin(self): return _li_std_vector.BoolVector_rbegin(self)
    def rend(self): return _li_std_vector.BoolVector_rend(self)
    def pop_back(self): return _li_std_vector.BoolVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.BoolVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_BoolVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.BoolVector_push_back(self, *args)
    def front(self): return _li_std_vector.BoolVector_front(self)
    def back(self): return _li_std_vector.BoolVector_back(self)
    def assign(self, *args): return _li_std_vector.BoolVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.BoolVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.BoolVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.BoolVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.BoolVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_BoolVector
    __del__ = lambda self : None;
BoolVector_swigregister = _li_std_vector.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class CharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.CharVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.CharVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.CharVector___bool__(self)
    def __len__(self): return _li_std_vector.CharVector___len__(self)
    def pop(self): return _li_std_vector.CharVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.CharVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.CharVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.CharVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.CharVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.CharVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.CharVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.CharVector_append(self, *args)
    def empty(self): return _li_std_vector.CharVector_empty(self)
    def size(self): return _li_std_vector.CharVector_size(self)
    def clear(self): return _li_std_vector.CharVector_clear(self)
    def swap(self, *args): return _li_std_vector.CharVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.CharVector_get_allocator(self)
    def begin(self): return _li_std_vector.CharVector_begin(self)
    def end(self): return _li_std_vector.CharVector_end(self)
    def rbegin(self): return _li_std_vector.CharVector_rbegin(self)
    def rend(self): return _li_std_vector.CharVector_rend(self)
    def pop_back(self): return _li_std_vector.CharVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.CharVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_CharVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.CharVector_push_back(self, *args)
    def front(self): return _li_std_vector.CharVector_front(self)
    def back(self): return _li_std_vector.CharVector_back(self)
    def assign(self, *args): return _li_std_vector.CharVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.CharVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.CharVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.CharVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.CharVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_CharVector
    __del__ = lambda self : None;
CharVector_swigregister = _li_std_vector.CharVector_swigregister
CharVector_swigregister(CharVector)

class ShortVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.ShortVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.ShortVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.ShortVector___bool__(self)
    def __len__(self): return _li_std_vector.ShortVector___len__(self)
    def pop(self): return _li_std_vector.ShortVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.ShortVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.ShortVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.ShortVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.ShortVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.ShortVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.ShortVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.ShortVector_append(self, *args)
    def empty(self): return _li_std_vector.ShortVector_empty(self)
    def size(self): return _li_std_vector.ShortVector_size(self)
    def clear(self): return _li_std_vector.ShortVector_clear(self)
    def swap(self, *args): return _li_std_vector.ShortVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.ShortVector_get_allocator(self)
    def begin(self): return _li_std_vector.ShortVector_begin(self)
    def end(self): return _li_std_vector.ShortVector_end(self)
    def rbegin(self): return _li_std_vector.ShortVector_rbegin(self)
    def rend(self): return _li_std_vector.ShortVector_rend(self)
    def pop_back(self): return _li_std_vector.ShortVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.ShortVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_ShortVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.ShortVector_push_back(self, *args)
    def front(self): return _li_std_vector.ShortVector_front(self)
    def back(self): return _li_std_vector.ShortVector_back(self)
    def assign(self, *args): return _li_std_vector.ShortVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.ShortVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.ShortVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.ShortVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.ShortVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_ShortVector
    __del__ = lambda self : None;
ShortVector_swigregister = _li_std_vector.ShortVector_swigregister
ShortVector_swigregister(ShortVector)

class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.LongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.LongVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.LongVector___bool__(self)
    def __len__(self): return _li_std_vector.LongVector___len__(self)
    def pop(self): return _li_std_vector.LongVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.LongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.LongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.LongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.LongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.LongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.LongVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.LongVector_append(self, *args)
    def empty(self): return _li_std_vector.LongVector_empty(self)
    def size(self): return _li_std_vector.LongVector_size(self)
    def clear(self): return _li_std_vector.LongVector_clear(self)
    def swap(self, *args): return _li_std_vector.LongVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.LongVector_get_allocator(self)
    def begin(self): return _li_std_vector.LongVector_begin(self)
    def end(self): return _li_std_vector.LongVector_end(self)
    def rbegin(self): return _li_std_vector.LongVector_rbegin(self)
    def rend(self): return _li_std_vector.LongVector_rend(self)
    def pop_back(self): return _li_std_vector.LongVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.LongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_LongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.LongVector_push_back(self, *args)
    def front(self): return _li_std_vector.LongVector_front(self)
    def back(self): return _li_std_vector.LongVector_back(self)
    def assign(self, *args): return _li_std_vector.LongVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.LongVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.LongVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.LongVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.LongVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_LongVector
    __del__ = lambda self : None;
LongVector_swigregister = _li_std_vector.LongVector_swigregister
LongVector_swigregister(LongVector)

class UCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UCharVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.UCharVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.UCharVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.UCharVector___bool__(self)
    def __len__(self): return _li_std_vector.UCharVector___len__(self)
    def pop(self): return _li_std_vector.UCharVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.UCharVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.UCharVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.UCharVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.UCharVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.UCharVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.UCharVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.UCharVector_append(self, *args)
    def empty(self): return _li_std_vector.UCharVector_empty(self)
    def size(self): return _li_std_vector.UCharVector_size(self)
    def clear(self): return _li_std_vector.UCharVector_clear(self)
    def swap(self, *args): return _li_std_vector.UCharVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.UCharVector_get_allocator(self)
    def begin(self): return _li_std_vector.UCharVector_begin(self)
    def end(self): return _li_std_vector.UCharVector_end(self)
    def rbegin(self): return _li_std_vector.UCharVector_rbegin(self)
    def rend(self): return _li_std_vector.UCharVector_rend(self)
    def pop_back(self): return _li_std_vector.UCharVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.UCharVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_UCharVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.UCharVector_push_back(self, *args)
    def front(self): return _li_std_vector.UCharVector_front(self)
    def back(self): return _li_std_vector.UCharVector_back(self)
    def assign(self, *args): return _li_std_vector.UCharVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.UCharVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.UCharVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.UCharVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.UCharVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_UCharVector
    __del__ = lambda self : None;
UCharVector_swigregister = _li_std_vector.UCharVector_swigregister
UCharVector_swigregister(UCharVector)

class UIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.UIntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.UIntVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.UIntVector___bool__(self)
    def __len__(self): return _li_std_vector.UIntVector___len__(self)
    def pop(self): return _li_std_vector.UIntVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.UIntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.UIntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.UIntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.UIntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.UIntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.UIntVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.UIntVector_append(self, *args)
    def empty(self): return _li_std_vector.UIntVector_empty(self)
    def size(self): return _li_std_vector.UIntVector_size(self)
    def clear(self): return _li_std_vector.UIntVector_clear(self)
    def swap(self, *args): return _li_std_vector.UIntVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.UIntVector_get_allocator(self)
    def begin(self): return _li_std_vector.UIntVector_begin(self)
    def end(self): return _li_std_vector.UIntVector_end(self)
    def rbegin(self): return _li_std_vector.UIntVector_rbegin(self)
    def rend(self): return _li_std_vector.UIntVector_rend(self)
    def pop_back(self): return _li_std_vector.UIntVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.UIntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_UIntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.UIntVector_push_back(self, *args)
    def front(self): return _li_std_vector.UIntVector_front(self)
    def back(self): return _li_std_vector.UIntVector_back(self)
    def assign(self, *args): return _li_std_vector.UIntVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.UIntVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.UIntVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.UIntVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.UIntVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_UIntVector
    __del__ = lambda self : None;
UIntVector_swigregister = _li_std_vector.UIntVector_swigregister
UIntVector_swigregister(UIntVector)

class UShortVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UShortVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UShortVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.UShortVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.UShortVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.UShortVector___bool__(self)
    def __len__(self): return _li_std_vector.UShortVector___len__(self)
    def pop(self): return _li_std_vector.UShortVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.UShortVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.UShortVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.UShortVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.UShortVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.UShortVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.UShortVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.UShortVector_append(self, *args)
    def empty(self): return _li_std_vector.UShortVector_empty(self)
    def size(self): return _li_std_vector.UShortVector_size(self)
    def clear(self): return _li_std_vector.UShortVector_clear(self)
    def swap(self, *args): return _li_std_vector.UShortVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.UShortVector_get_allocator(self)
    def begin(self): return _li_std_vector.UShortVector_begin(self)
    def end(self): return _li_std_vector.UShortVector_end(self)
    def rbegin(self): return _li_std_vector.UShortVector_rbegin(self)
    def rend(self): return _li_std_vector.UShortVector_rend(self)
    def pop_back(self): return _li_std_vector.UShortVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.UShortVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_UShortVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.UShortVector_push_back(self, *args)
    def front(self): return _li_std_vector.UShortVector_front(self)
    def back(self): return _li_std_vector.UShortVector_back(self)
    def assign(self, *args): return _li_std_vector.UShortVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.UShortVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.UShortVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.UShortVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.UShortVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_UShortVector
    __del__ = lambda self : None;
UShortVector_swigregister = _li_std_vector.UShortVector_swigregister
UShortVector_swigregister(UShortVector)

class ULongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.ULongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.ULongVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.ULongVector___bool__(self)
    def __len__(self): return _li_std_vector.ULongVector___len__(self)
    def pop(self): return _li_std_vector.ULongVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.ULongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.ULongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.ULongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.ULongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.ULongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.ULongVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.ULongVector_append(self, *args)
    def empty(self): return _li_std_vector.ULongVector_empty(self)
    def size(self): return _li_std_vector.ULongVector_size(self)
    def clear(self): return _li_std_vector.ULongVector_clear(self)
    def swap(self, *args): return _li_std_vector.ULongVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.ULongVector_get_allocator(self)
    def begin(self): return _li_std_vector.ULongVector_begin(self)
    def end(self): return _li_std_vector.ULongVector_end(self)
    def rbegin(self): return _li_std_vector.ULongVector_rbegin(self)
    def rend(self): return _li_std_vector.ULongVector_rend(self)
    def pop_back(self): return _li_std_vector.ULongVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.ULongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_ULongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.ULongVector_push_back(self, *args)
    def front(self): return _li_std_vector.ULongVector_front(self)
    def back(self): return _li_std_vector.ULongVector_back(self)
    def assign(self, *args): return _li_std_vector.ULongVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.ULongVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.ULongVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.ULongVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.ULongVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_ULongVector
    __del__ = lambda self : None;
ULongVector_swigregister = _li_std_vector.ULongVector_swigregister
ULongVector_swigregister(ULongVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.DoubleVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.DoubleVector___bool__(self)
    def __len__(self): return _li_std_vector.DoubleVector___len__(self)
    def pop(self): return _li_std_vector.DoubleVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.DoubleVector_append(self, *args)
    def empty(self): return _li_std_vector.DoubleVector_empty(self)
    def size(self): return _li_std_vector.DoubleVector_size(self)
    def clear(self): return _li_std_vector.DoubleVector_clear(self)
    def swap(self, *args): return _li_std_vector.DoubleVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.DoubleVector_get_allocator(self)
    def begin(self): return _li_std_vector.DoubleVector_begin(self)
    def end(self): return _li_std_vector.DoubleVector_end(self)
    def rbegin(self): return _li_std_vector.DoubleVector_rbegin(self)
    def rend(self): return _li_std_vector.DoubleVector_rend(self)
    def pop_back(self): return _li_std_vector.DoubleVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.DoubleVector_push_back(self, *args)
    def front(self): return _li_std_vector.DoubleVector_front(self)
    def back(self): return _li_std_vector.DoubleVector_back(self)
    def assign(self, *args): return _li_std_vector.DoubleVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.DoubleVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.DoubleVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.DoubleVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _li_std_vector.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.StringVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.StringVector___bool__(self)
    def __len__(self): return _li_std_vector.StringVector___len__(self)
    def pop(self): return _li_std_vector.StringVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.StringVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.StringVector_append(self, *args)
    def empty(self): return _li_std_vector.StringVector_empty(self)
    def size(self): return _li_std_vector.StringVector_size(self)
    def clear(self): return _li_std_vector.StringVector_clear(self)
    def swap(self, *args): return _li_std_vector.StringVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.StringVector_get_allocator(self)
    def begin(self): return _li_std_vector.StringVector_begin(self)
    def end(self): return _li_std_vector.StringVector_end(self)
    def rbegin(self): return _li_std_vector.StringVector_rbegin(self)
    def rend(self): return _li_std_vector.StringVector_rend(self)
    def pop_back(self): return _li_std_vector.StringVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.StringVector_push_back(self, *args)
    def front(self): return _li_std_vector.StringVector_front(self)
    def back(self): return _li_std_vector.StringVector_back(self)
    def assign(self, *args): return _li_std_vector.StringVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.StringVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.StringVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.StringVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.StringVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _li_std_vector.StringVector_swigregister
StringVector_swigregister(StringVector)


def typedef_test(*args):
  return _li_std_vector.typedef_test(*args)
typedef_test = _li_std_vector.typedef_test
class RealVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.RealVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.RealVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.RealVector___bool__(self)
    def __len__(self): return _li_std_vector.RealVector___len__(self)
    def pop(self): return _li_std_vector.RealVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.RealVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.RealVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.RealVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.RealVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.RealVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.RealVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.RealVector_append(self, *args)
    def empty(self): return _li_std_vector.RealVector_empty(self)
    def size(self): return _li_std_vector.RealVector_size(self)
    def clear(self): return _li_std_vector.RealVector_clear(self)
    def swap(self, *args): return _li_std_vector.RealVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.RealVector_get_allocator(self)
    def begin(self): return _li_std_vector.RealVector_begin(self)
    def end(self): return _li_std_vector.RealVector_end(self)
    def rbegin(self): return _li_std_vector.RealVector_rbegin(self)
    def rend(self): return _li_std_vector.RealVector_rend(self)
    def pop_back(self): return _li_std_vector.RealVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.RealVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_RealVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.RealVector_push_back(self, *args)
    def front(self): return _li_std_vector.RealVector_front(self)
    def back(self): return _li_std_vector.RealVector_back(self)
    def assign(self, *args): return _li_std_vector.RealVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.RealVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.RealVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.RealVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.RealVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_RealVector
    __del__ = lambda self : None;
RealVector_swigregister = _li_std_vector.RealVector_swigregister
RealVector_swigregister(RealVector)


def average(*args):
  return _li_std_vector.average(*args)
average = _li_std_vector.average

def half(*args):
  return _li_std_vector.half(*args)
half = _li_std_vector.half

def halve_in_place(*args):
  return _li_std_vector.halve_in_place(*args)
halve_in_place = _li_std_vector.halve_in_place
class Struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _li_std_vector.Struct_num_set
    __swig_getmethods__["num"] = _li_std_vector.Struct_num_get
    if _newclass:num = _swig_property(_li_std_vector.Struct_num_get, _li_std_vector.Struct_num_set)
    def __init__(self, *args): 
        this = _li_std_vector.new_Struct(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_vector.delete_Struct
    __del__ = lambda self : None;
Struct_swigregister = _li_std_vector.Struct_swigregister
Struct_swigregister(Struct)

class Structure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Structure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Structure, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _li_std_vector.Structure_num_set
    __swig_getmethods__["num"] = _li_std_vector.Structure_num_get
    if _newclass:num = _swig_property(_li_std_vector.Structure_num_get, _li_std_vector.Structure_num_set)
    def __init__(self, *args): 
        this = _li_std_vector.new_Structure(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_vector.delete_Structure
    __del__ = lambda self : None;
Structure_swigregister = _li_std_vector.Structure_swigregister
Structure_swigregister(Structure)


def vecreal(*args):
  return _li_std_vector.vecreal(*args)
vecreal = _li_std_vector.vecreal

def vecintptr(*args):
  return _li_std_vector.vecintptr(*args)
vecintptr = _li_std_vector.vecintptr

def vecintconstptr(*args):
  return _li_std_vector.vecintconstptr(*args)
vecintconstptr = _li_std_vector.vecintconstptr

def vecstruct(*args):
  return _li_std_vector.vecstruct(*args)
vecstruct = _li_std_vector.vecstruct

def vecstructptr(*args):
  return _li_std_vector.vecstructptr(*args)
vecstructptr = _li_std_vector.vecstructptr

def vecstructconstptr(*args):
  return _li_std_vector.vecstructconstptr(*args)
vecstructconstptr = _li_std_vector.vecstructconstptr
class IntPtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntPtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntPtrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.IntPtrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.IntPtrVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.IntPtrVector___bool__(self)
    def __len__(self): return _li_std_vector.IntPtrVector___len__(self)
    def pop(self): return _li_std_vector.IntPtrVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.IntPtrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.IntPtrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.IntPtrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.IntPtrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.IntPtrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.IntPtrVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.IntPtrVector_append(self, *args)
    def empty(self): return _li_std_vector.IntPtrVector_empty(self)
    def size(self): return _li_std_vector.IntPtrVector_size(self)
    def clear(self): return _li_std_vector.IntPtrVector_clear(self)
    def swap(self, *args): return _li_std_vector.IntPtrVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.IntPtrVector_get_allocator(self)
    def begin(self): return _li_std_vector.IntPtrVector_begin(self)
    def end(self): return _li_std_vector.IntPtrVector_end(self)
    def rbegin(self): return _li_std_vector.IntPtrVector_rbegin(self)
    def rend(self): return _li_std_vector.IntPtrVector_rend(self)
    def pop_back(self): return _li_std_vector.IntPtrVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.IntPtrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_IntPtrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.IntPtrVector_push_back(self, *args)
    def front(self): return _li_std_vector.IntPtrVector_front(self)
    def back(self): return _li_std_vector.IntPtrVector_back(self)
    def assign(self, *args): return _li_std_vector.IntPtrVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.IntPtrVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.IntPtrVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.IntPtrVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.IntPtrVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_IntPtrVector
    __del__ = lambda self : None;
IntPtrVector_swigregister = _li_std_vector.IntPtrVector_swigregister
IntPtrVector_swigregister(IntPtrVector)

class IntConstPtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntConstPtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntConstPtrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.IntConstPtrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.IntConstPtrVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.IntConstPtrVector___bool__(self)
    def __len__(self): return _li_std_vector.IntConstPtrVector___len__(self)
    def pop(self): return _li_std_vector.IntConstPtrVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.IntConstPtrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.IntConstPtrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.IntConstPtrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.IntConstPtrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.IntConstPtrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.IntConstPtrVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.IntConstPtrVector_append(self, *args)
    def empty(self): return _li_std_vector.IntConstPtrVector_empty(self)
    def size(self): return _li_std_vector.IntConstPtrVector_size(self)
    def clear(self): return _li_std_vector.IntConstPtrVector_clear(self)
    def swap(self, *args): return _li_std_vector.IntConstPtrVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.IntConstPtrVector_get_allocator(self)
    def begin(self): return _li_std_vector.IntConstPtrVector_begin(self)
    def end(self): return _li_std_vector.IntConstPtrVector_end(self)
    def rbegin(self): return _li_std_vector.IntConstPtrVector_rbegin(self)
    def rend(self): return _li_std_vector.IntConstPtrVector_rend(self)
    def pop_back(self): return _li_std_vector.IntConstPtrVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.IntConstPtrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_IntConstPtrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.IntConstPtrVector_push_back(self, *args)
    def front(self): return _li_std_vector.IntConstPtrVector_front(self)
    def back(self): return _li_std_vector.IntConstPtrVector_back(self)
    def assign(self, *args): return _li_std_vector.IntConstPtrVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.IntConstPtrVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.IntConstPtrVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.IntConstPtrVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.IntConstPtrVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_IntConstPtrVector
    __del__ = lambda self : None;
IntConstPtrVector_swigregister = _li_std_vector.IntConstPtrVector_swigregister
IntConstPtrVector_swigregister(IntConstPtrVector)

class StructVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StructVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.StructVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.StructVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.StructVector___bool__(self)
    def __len__(self): return _li_std_vector.StructVector___len__(self)
    def pop(self): return _li_std_vector.StructVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.StructVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.StructVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.StructVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.StructVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.StructVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.StructVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.StructVector_append(self, *args)
    def empty(self): return _li_std_vector.StructVector_empty(self)
    def size(self): return _li_std_vector.StructVector_size(self)
    def clear(self): return _li_std_vector.StructVector_clear(self)
    def swap(self, *args): return _li_std_vector.StructVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.StructVector_get_allocator(self)
    def begin(self): return _li_std_vector.StructVector_begin(self)
    def end(self): return _li_std_vector.StructVector_end(self)
    def rbegin(self): return _li_std_vector.StructVector_rbegin(self)
    def rend(self): return _li_std_vector.StructVector_rend(self)
    def pop_back(self): return _li_std_vector.StructVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.StructVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_StructVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.StructVector_push_back(self, *args)
    def front(self): return _li_std_vector.StructVector_front(self)
    def back(self): return _li_std_vector.StructVector_back(self)
    def assign(self, *args): return _li_std_vector.StructVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.StructVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.StructVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.StructVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.StructVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_StructVector
    __del__ = lambda self : None;
StructVector_swigregister = _li_std_vector.StructVector_swigregister
StructVector_swigregister(StructVector)

class StructPtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructPtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StructPtrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.StructPtrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.StructPtrVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.StructPtrVector___bool__(self)
    def __len__(self): return _li_std_vector.StructPtrVector___len__(self)
    def pop(self): return _li_std_vector.StructPtrVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.StructPtrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.StructPtrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.StructPtrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.StructPtrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.StructPtrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.StructPtrVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.StructPtrVector_append(self, *args)
    def empty(self): return _li_std_vector.StructPtrVector_empty(self)
    def size(self): return _li_std_vector.StructPtrVector_size(self)
    def clear(self): return _li_std_vector.StructPtrVector_clear(self)
    def swap(self, *args): return _li_std_vector.StructPtrVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.StructPtrVector_get_allocator(self)
    def begin(self): return _li_std_vector.StructPtrVector_begin(self)
    def end(self): return _li_std_vector.StructPtrVector_end(self)
    def rbegin(self): return _li_std_vector.StructPtrVector_rbegin(self)
    def rend(self): return _li_std_vector.StructPtrVector_rend(self)
    def pop_back(self): return _li_std_vector.StructPtrVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.StructPtrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_StructPtrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.StructPtrVector_push_back(self, *args)
    def front(self): return _li_std_vector.StructPtrVector_front(self)
    def back(self): return _li_std_vector.StructPtrVector_back(self)
    def assign(self, *args): return _li_std_vector.StructPtrVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.StructPtrVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.StructPtrVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.StructPtrVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.StructPtrVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_StructPtrVector
    __del__ = lambda self : None;
StructPtrVector_swigregister = _li_std_vector.StructPtrVector_swigregister
StructPtrVector_swigregister(StructPtrVector)

class StructConstPtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructConstPtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StructConstPtrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.StructConstPtrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.StructConstPtrVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.StructConstPtrVector___bool__(self)
    def __len__(self): return _li_std_vector.StructConstPtrVector___len__(self)
    def pop(self): return _li_std_vector.StructConstPtrVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.StructConstPtrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.StructConstPtrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.StructConstPtrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.StructConstPtrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.StructConstPtrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.StructConstPtrVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.StructConstPtrVector_append(self, *args)
    def empty(self): return _li_std_vector.StructConstPtrVector_empty(self)
    def size(self): return _li_std_vector.StructConstPtrVector_size(self)
    def clear(self): return _li_std_vector.StructConstPtrVector_clear(self)
    def swap(self, *args): return _li_std_vector.StructConstPtrVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.StructConstPtrVector_get_allocator(self)
    def begin(self): return _li_std_vector.StructConstPtrVector_begin(self)
    def end(self): return _li_std_vector.StructConstPtrVector_end(self)
    def rbegin(self): return _li_std_vector.StructConstPtrVector_rbegin(self)
    def rend(self): return _li_std_vector.StructConstPtrVector_rend(self)
    def pop_back(self): return _li_std_vector.StructConstPtrVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.StructConstPtrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_StructConstPtrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.StructConstPtrVector_push_back(self, *args)
    def front(self): return _li_std_vector.StructConstPtrVector_front(self)
    def back(self): return _li_std_vector.StructConstPtrVector_back(self)
    def assign(self, *args): return _li_std_vector.StructConstPtrVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.StructConstPtrVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.StructConstPtrVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.StructConstPtrVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.StructConstPtrVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_StructConstPtrVector
    __del__ = lambda self : None;
StructConstPtrVector_swigregister = _li_std_vector.StructConstPtrVector_swigregister
StructConstPtrVector_swigregister(StructConstPtrVector)

class MyClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MyClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _li_std_vector.new_MyClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_vector.delete_MyClass
    __del__ = lambda self : None;
MyClass_swigregister = _li_std_vector.MyClass_swigregister
MyClass_swigregister(MyClass)

class MyClassPtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyClassPtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MyClassPtrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector.MyClassPtrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector.MyClassPtrVector___nonzero__(self)
    def __bool__(self): return _li_std_vector.MyClassPtrVector___bool__(self)
    def __len__(self): return _li_std_vector.MyClassPtrVector___len__(self)
    def pop(self): return _li_std_vector.MyClassPtrVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector.MyClassPtrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector.MyClassPtrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector.MyClassPtrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector.MyClassPtrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector.MyClassPtrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector.MyClassPtrVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector.MyClassPtrVector_append(self, *args)
    def empty(self): return _li_std_vector.MyClassPtrVector_empty(self)
    def size(self): return _li_std_vector.MyClassPtrVector_size(self)
    def clear(self): return _li_std_vector.MyClassPtrVector_clear(self)
    def swap(self, *args): return _li_std_vector.MyClassPtrVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector.MyClassPtrVector_get_allocator(self)
    def begin(self): return _li_std_vector.MyClassPtrVector_begin(self)
    def end(self): return _li_std_vector.MyClassPtrVector_end(self)
    def rbegin(self): return _li_std_vector.MyClassPtrVector_rbegin(self)
    def rend(self): return _li_std_vector.MyClassPtrVector_rend(self)
    def pop_back(self): return _li_std_vector.MyClassPtrVector_pop_back(self)
    def erase(self, *args): return _li_std_vector.MyClassPtrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector.new_MyClassPtrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector.MyClassPtrVector_push_back(self, *args)
    def front(self): return _li_std_vector.MyClassPtrVector_front(self)
    def back(self): return _li_std_vector.MyClassPtrVector_back(self)
    def assign(self, *args): return _li_std_vector.MyClassPtrVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector.MyClassPtrVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector.MyClassPtrVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector.MyClassPtrVector_reserve(self, *args)
    def capacity(self): return _li_std_vector.MyClassPtrVector_capacity(self)
    __swig_destroy__ = _li_std_vector.delete_MyClassPtrVector
    __del__ = lambda self : None;
MyClassPtrVector_swigregister = _li_std_vector.MyClassPtrVector_swigregister
MyClassPtrVector_swigregister(MyClassPtrVector)

class RetsMetadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RetsMetadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RetsMetadata, name)
    __repr__ = _swig_repr
    def GetAllResources(self, *args): return _li_std_vector.RetsMetadata_GetAllResources(self, *args)
    def __init__(self): 
        this = _li_std_vector.new_RetsMetadata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_vector.delete_RetsMetadata
    __del__ = lambda self : None;
RetsMetadata_swigregister = _li_std_vector.RetsMetadata_swigregister
RetsMetadata_swigregister(RetsMetadata)

# This file is compatible with both classic and new-style classes.


