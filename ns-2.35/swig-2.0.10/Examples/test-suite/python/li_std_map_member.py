# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_std_map_member', [dirname(__file__)])
        except ImportError:
            import _li_std_map_member
            return _li_std_map_member
        if fp is not None:
            try:
                _mod = imp.load_module('_li_std_map_member', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_std_map_member = swig_import_helper()
    del swig_import_helper
else:
    import _li_std_map_member
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class TestA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TestA, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _li_std_map_member.new_TestA()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["i"] = _li_std_map_member.TestA_i_set
    __swig_getmethods__["i"] = _li_std_map_member.TestA_i_get
    if _newclass:i = _swig_property(_li_std_map_member.TestA_i_get, _li_std_map_member.TestA_i_set)
    __swig_destroy__ = _li_std_map_member.delete_TestA
    __del__ = lambda self : None;
TestA_swigregister = _li_std_map_member.TestA_swigregister
TestA_swigregister(TestA)
cvar = _li_std_map_member.cvar

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _li_std_map_member.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _li_std_map_member.SwigPyIterator_value(self)
    def incr(self, n=1): return _li_std_map_member.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _li_std_map_member.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _li_std_map_member.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _li_std_map_member.SwigPyIterator_equal(self, *args)
    def copy(self): return _li_std_map_member.SwigPyIterator_copy(self)
    def next(self): return _li_std_map_member.SwigPyIterator_next(self)
    def __next__(self): return _li_std_map_member.SwigPyIterator___next__(self)
    def previous(self): return _li_std_map_member.SwigPyIterator_previous(self)
    def advance(self, *args): return _li_std_map_member.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _li_std_map_member.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _li_std_map_member.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _li_std_map_member.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _li_std_map_member.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _li_std_map_member.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _li_std_map_member.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _li_std_map_member.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class pairii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairii, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_map_member.new_pairii(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_map_member.pairii_first_set
    __swig_getmethods__["first"] = _li_std_map_member.pairii_first_get
    if _newclass:first = _swig_property(_li_std_map_member.pairii_first_get, _li_std_map_member.pairii_first_set)
    __swig_setmethods__["second"] = _li_std_map_member.pairii_second_set
    __swig_getmethods__["second"] = _li_std_map_member.pairii_second_get
    if _newclass:second = _swig_property(_li_std_map_member.pairii_second_get, _li_std_map_member.pairii_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_map_member.delete_pairii
    __del__ = lambda self : None;
pairii_swigregister = _li_std_map_member.pairii_swigregister
pairii_swigregister(pairii)

class mapii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapii, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_map_member.mapii_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_map_member.mapii___nonzero__(self)
    def __bool__(self): return _li_std_map_member.mapii___bool__(self)
    def __len__(self): return _li_std_map_member.mapii___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _li_std_map_member.mapii___getitem__(self, *args)
    def __delitem__(self, *args): return _li_std_map_member.mapii___delitem__(self, *args)
    def has_key(self, *args): return _li_std_map_member.mapii_has_key(self, *args)
    def keys(self): return _li_std_map_member.mapii_keys(self)
    def values(self): return _li_std_map_member.mapii_values(self)
    def items(self): return _li_std_map_member.mapii_items(self)
    def __contains__(self, *args): return _li_std_map_member.mapii___contains__(self, *args)
    def key_iterator(self): return _li_std_map_member.mapii_key_iterator(self)
    def value_iterator(self): return _li_std_map_member.mapii_value_iterator(self)
    def __setitem__(self, *args): return _li_std_map_member.mapii___setitem__(self, *args)
    def asdict(self): return _li_std_map_member.mapii_asdict(self)
    def __init__(self, *args): 
        this = _li_std_map_member.new_mapii(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _li_std_map_member.mapii_empty(self)
    def size(self): return _li_std_map_member.mapii_size(self)
    def clear(self): return _li_std_map_member.mapii_clear(self)
    def swap(self, *args): return _li_std_map_member.mapii_swap(self, *args)
    def get_allocator(self): return _li_std_map_member.mapii_get_allocator(self)
    def begin(self): return _li_std_map_member.mapii_begin(self)
    def end(self): return _li_std_map_member.mapii_end(self)
    def rbegin(self): return _li_std_map_member.mapii_rbegin(self)
    def rend(self): return _li_std_map_member.mapii_rend(self)
    def count(self, *args): return _li_std_map_member.mapii_count(self, *args)
    def erase(self, *args): return _li_std_map_member.mapii_erase(self, *args)
    def find(self, *args): return _li_std_map_member.mapii_find(self, *args)
    def lower_bound(self, *args): return _li_std_map_member.mapii_lower_bound(self, *args)
    def upper_bound(self, *args): return _li_std_map_member.mapii_upper_bound(self, *args)
    __swig_destroy__ = _li_std_map_member.delete_mapii
    __del__ = lambda self : None;
mapii_swigregister = _li_std_map_member.mapii_swigregister
mapii_swigregister(mapii)

class pairita(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairita, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairita, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_map_member.new_pairita(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_map_member.pairita_first_set
    __swig_getmethods__["first"] = _li_std_map_member.pairita_first_get
    if _newclass:first = _swig_property(_li_std_map_member.pairita_first_get, _li_std_map_member.pairita_first_set)
    __swig_setmethods__["second"] = _li_std_map_member.pairita_second_set
    __swig_getmethods__["second"] = _li_std_map_member.pairita_second_get
    if _newclass:second = _swig_property(_li_std_map_member.pairita_second_get, _li_std_map_member.pairita_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_map_member.delete_pairita
    __del__ = lambda self : None;
pairita_swigregister = _li_std_map_member.pairita_swigregister
pairita_swigregister(pairita)

class mapita(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapita, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapita, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_map_member.mapita_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_map_member.mapita___nonzero__(self)
    def __bool__(self): return _li_std_map_member.mapita___bool__(self)
    def __len__(self): return _li_std_map_member.mapita___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _li_std_map_member.mapita___getitem__(self, *args)
    def __delitem__(self, *args): return _li_std_map_member.mapita___delitem__(self, *args)
    def has_key(self, *args): return _li_std_map_member.mapita_has_key(self, *args)
    def keys(self): return _li_std_map_member.mapita_keys(self)
    def values(self): return _li_std_map_member.mapita_values(self)
    def items(self): return _li_std_map_member.mapita_items(self)
    def __contains__(self, *args): return _li_std_map_member.mapita___contains__(self, *args)
    def key_iterator(self): return _li_std_map_member.mapita_key_iterator(self)
    def value_iterator(self): return _li_std_map_member.mapita_value_iterator(self)
    def __setitem__(self, *args): return _li_std_map_member.mapita___setitem__(self, *args)
    def asdict(self): return _li_std_map_member.mapita_asdict(self)
    def __init__(self, *args): 
        this = _li_std_map_member.new_mapita(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _li_std_map_member.mapita_empty(self)
    def size(self): return _li_std_map_member.mapita_size(self)
    def clear(self): return _li_std_map_member.mapita_clear(self)
    def swap(self, *args): return _li_std_map_member.mapita_swap(self, *args)
    def get_allocator(self): return _li_std_map_member.mapita_get_allocator(self)
    def begin(self): return _li_std_map_member.mapita_begin(self)
    def end(self): return _li_std_map_member.mapita_end(self)
    def rbegin(self): return _li_std_map_member.mapita_rbegin(self)
    def rend(self): return _li_std_map_member.mapita_rend(self)
    def count(self, *args): return _li_std_map_member.mapita_count(self, *args)
    def erase(self, *args): return _li_std_map_member.mapita_erase(self, *args)
    def find(self, *args): return _li_std_map_member.mapita_find(self, *args)
    def lower_bound(self, *args): return _li_std_map_member.mapita_lower_bound(self, *args)
    def upper_bound(self, *args): return _li_std_map_member.mapita_upper_bound(self, *args)
    __swig_destroy__ = _li_std_map_member.delete_mapita
    __del__ = lambda self : None;
mapita_swigregister = _li_std_map_member.mapita_swigregister
mapita_swigregister(mapita)

# This file is compatible with both classic and new-style classes.


