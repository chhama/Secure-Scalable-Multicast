# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_template_specialization_enum', [dirname(__file__)])
        except ImportError:
            import _template_specialization_enum
            return _template_specialization_enum
        if fp is not None:
            try:
                _mod = imp.load_module('_template_specialization_enum', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _template_specialization_enum = swig_import_helper()
    del swig_import_helper
else:
    import _template_specialization_enum
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


hi = _template_specialization_enum.hi
hello = _template_specialization_enum.hello
class Base_dd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base_dd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Base_dd, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_specialization_enum.new_Base_dd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_specialization_enum.delete_Base_dd
    __del__ = lambda self : None;
Base_dd_swigregister = _template_specialization_enum.Base_dd_swigregister
Base_dd_swigregister(Base_dd)

class Base_ii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base_ii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Base_ii, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_specialization_enum.new_Base_ii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_specialization_enum.delete_Base_ii
    __del__ = lambda self : None;
Base_ii_swigregister = _template_specialization_enum.Base_ii_swigregister
Base_ii_swigregister(Base_ii)

class C_i(Base_dd):
    __swig_setmethods__ = {}
    for _s in [Base_dd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, C_i, name, value)
    __swig_getmethods__ = {}
    for _s in [Base_dd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, C_i, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def fhi(self): return _template_specialization_enum.C_i_fhi(self)
    __swig_destroy__ = _template_specialization_enum.delete_C_i
    __del__ = lambda self : None;
C_i_swigregister = _template_specialization_enum.C_i_swigregister
C_i_swigregister(C_i)

class C_d(Base_ii):
    __swig_setmethods__ = {}
    for _s in [Base_ii]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, C_d, name, value)
    __swig_getmethods__ = {}
    for _s in [Base_ii]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, C_d, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def fhello(self): return _template_specialization_enum.C_d_fhello(self)
    __swig_destroy__ = _template_specialization_enum.delete_C_d
    __del__ = lambda self : None;
C_d_swigregister = _template_specialization_enum.C_d_swigregister
C_d_swigregister(C_d)

# This file is compatible with both classic and new-style classes.


