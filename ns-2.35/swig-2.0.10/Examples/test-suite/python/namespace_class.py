# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_namespace_class', [dirname(__file__)])
        except ImportError:
            import _namespace_class
            return _namespace_class
        if fp is not None:
            try:
                _mod = imp.load_module('_namespace_class', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _namespace_class = swig_import_helper()
    del swig_import_helper
else:
    import _namespace_class
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def FooBarInt(*args):
  return _namespace_class.FooBarInt(*args)
FooBarInt = _namespace_class.FooBarInt

def BarFooInt(*args):
  return _namespace_class.BarFooInt(*args)
BarFooInt = _namespace_class.BarFooInt
Hi = _namespace_class.Hi
class Bar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bar, name)
    __repr__ = _swig_repr
    def foo(self, *args): return _namespace_class.Bar_foo(self, *args)
    def __init__(self): 
        this = _namespace_class.new_Bar()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_Bar
    __del__ = lambda self : None;
Bar_swigregister = _namespace_class.Bar_swigregister
Bar_swigregister(Bar)

class Foo(Bar):
    __swig_setmethods__ = {}
    for _s in [Bar]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    for _s in [Bar]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    def bar(self, *args): return _namespace_class.Foo_bar(self, *args)
    def __init__(self): 
        this = _namespace_class.new_Foo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_Foo
    __del__ = lambda self : None;
Foo_swigregister = _namespace_class.Foo_swigregister
Foo_swigregister(Foo)
cvar = _namespace_class.cvar

class Test(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Test, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Test, name)
    __repr__ = _swig_repr
    def foo(self, *args): return _namespace_class.Test_foo(self, *args)
    def __init__(self): 
        this = _namespace_class.new_Test()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_Test
    __del__ = lambda self : None;
Test_swigregister = _namespace_class.Test_swigregister
Test_swigregister(Test)

class Bor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bor, name)
    __repr__ = _swig_repr
    def foo(self, *args): return _namespace_class.Bor_foo(self, *args)
    def __init__(self): 
        this = _namespace_class.new_Bor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_Bor
    __del__ = lambda self : None;
Bor_swigregister = _namespace_class.Bor_swigregister
Bor_swigregister(Bor)

class Foobar(Bar):
    __swig_setmethods__ = {}
    for _s in [Bar]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foobar, name, value)
    __swig_getmethods__ = {}
    for _s in [Bar]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Foobar, name)
    __repr__ = _swig_repr
    def bar(self, *args): return _namespace_class.Foobar_bar(self, *args)
    def __init__(self): 
        this = _namespace_class.new_Foobar()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_Foobar
    __del__ = lambda self : None;
Foobar_swigregister = _namespace_class.Foobar_swigregister
Foobar_swigregister(Foobar)

class FooT_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FooT_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FooT_i, name)
    __repr__ = _swig_repr
    def quack(self, *args): return _namespace_class.FooT_i_quack(self, *args)
    def __init__(self): 
        this = _namespace_class.new_FooT_i()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_FooT_i
    __del__ = lambda self : None;
FooT_i_swigregister = _namespace_class.FooT_i_swigregister
FooT_i_swigregister(FooT_i)

class FooT_H(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FooT_H, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FooT_H, name)
    __repr__ = _swig_repr
    def foo(self, *args): return _namespace_class.FooT_H_foo(self, *args)
    def bar(self, *args): return _namespace_class.FooT_H_bar(self, *args)
    def __init__(self): 
        this = _namespace_class.new_FooT_H()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_FooT_H
    __del__ = lambda self : None;
FooT_H_swigregister = _namespace_class.FooT_H_swigregister
FooT_H_swigregister(FooT_H)

class FooT_d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FooT_d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FooT_d, name)
    __repr__ = _swig_repr
    def moo(self, *args): return _namespace_class.FooT_d_moo(self, *args)
    def __init__(self): 
        this = _namespace_class.new_FooT_d()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_FooT_d
    __del__ = lambda self : None;
FooT_d_swigregister = _namespace_class.FooT_d_swigregister
FooT_d_swigregister(FooT_d)

class BarT_H(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarT_H, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BarT_H, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _namespace_class.new_BarT_H()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_BarT_H
    __del__ = lambda self : None;
BarT_H_swigregister = _namespace_class.BarT_H_swigregister
BarT_H_swigregister(BarT_H)

class Poo_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poo_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Poo_i, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _namespace_class.new_Poo_i()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_Poo_i
    __del__ = lambda self : None;
Poo_i_swigregister = _namespace_class.Poo_i_swigregister
Poo_i_swigregister(Poo_i)

class BooT_H(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BooT_H, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BooT_H, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _namespace_class.new_BooT_H()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_BooT_H
    __del__ = lambda self : None;
BooT_H_swigregister = _namespace_class.BooT_H_swigregister
BooT_H_swigregister(BooT_H)

class BooT_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BooT_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BooT_i, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _namespace_class.new_BooT_i()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_BooT_i
    __del__ = lambda self : None;
BooT_i_swigregister = _namespace_class.BooT_i_swigregister
BooT_i_swigregister(BooT_i)

class EulerT3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EulerT3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EulerT3D, name)
    __repr__ = _swig_repr
    __swig_getmethods__["hello"] = lambda x: _namespace_class.EulerT3D_hello
    if _newclass:hello = staticmethod(_namespace_class.EulerT3D_hello)
    __swig_getmethods__["toFrame"] = lambda x: _namespace_class.EulerT3D_toFrame
    if _newclass:toFrame = staticmethod(_namespace_class.EulerT3D_toFrame)
    def __call__(self, *args): return _namespace_class.EulerT3D___call__(self, *args)
    def __lt__(self, *args): return _namespace_class.EulerT3D___lt__(self, *args)
    def __init__(self): 
        this = _namespace_class.new_EulerT3D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_EulerT3D
    __del__ = lambda self : None;
EulerT3D_swigregister = _namespace_class.EulerT3D_swigregister
EulerT3D_swigregister(EulerT3D)

def EulerT3D_hello():
  return _namespace_class.EulerT3D_hello()
EulerT3D_hello = _namespace_class.EulerT3D_hello

def EulerT3D_toFrame(*args):
  return _namespace_class.EulerT3D_toFrame(*args)
EulerT3D_toFrame = _namespace_class.EulerT3D_toFrame

class Ala(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ala, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ala, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _namespace_class.new_Ala()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["hi"] = lambda x: _namespace_class.Ala_hi
    if _newclass:hi = staticmethod(_namespace_class.Ala_hi)
    __swig_destroy__ = _namespace_class.delete_Ala
    __del__ = lambda self : None;
Ala_swigregister = _namespace_class.Ala_swigregister
Ala_swigregister(Ala)

def Ala_hi():
  return _namespace_class.Ala_hi()
Ala_hi = _namespace_class.Ala_hi

class Ala__Ola(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ala__Ola, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ala__Ola, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _namespace_class.new_Ala__Ola()
        try: self.this.append(this)
        except: self.this = this
    def eek(self): return _namespace_class.Ala__Ola_eek(self)
    __swig_destroy__ = _namespace_class.delete_Ala__Ola
    __del__ = lambda self : None;
Ala__Ola_swigregister = _namespace_class.Ala__Ola_swigregister
Ala__Ola_swigregister(Ala__Ola)

class File(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, File, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, File, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _namespace_class.new_File()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_File
    __del__ = lambda self : None;
File_swigregister = _namespace_class.File_swigregister
File_swigregister(File)

class AudioProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioProperties, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _namespace_class.new_AudioProperties()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_AudioProperties
    __del__ = lambda self : None;
AudioProperties_swigregister = _namespace_class.AudioProperties_swigregister
AudioProperties_swigregister(AudioProperties)

class AudioPropertiesFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioPropertiesFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioPropertiesFile, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _namespace_class.new_AudioPropertiesFile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_AudioPropertiesFile
    __del__ = lambda self : None;
AudioPropertiesFile_swigregister = _namespace_class.AudioPropertiesFile_swigregister
AudioPropertiesFile_swigregister(AudioPropertiesFile)

class Properties(AudioProperties):
    __swig_setmethods__ = {}
    for _s in [AudioProperties]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Properties, name, value)
    __swig_getmethods__ = {}
    for _s in [AudioProperties]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Properties, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _namespace_class.new_Properties(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_Properties
    __del__ = lambda self : None;
Properties_swigregister = _namespace_class.Properties_swigregister
Properties_swigregister(Properties)

class PropertiesFile(AudioPropertiesFile):
    __swig_setmethods__ = {}
    for _s in [AudioPropertiesFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertiesFile, name, value)
    __swig_getmethods__ = {}
    for _s in [AudioPropertiesFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PropertiesFile, name)
    __repr__ = _swig_repr
    def __init__(self, arg2=None): 
        this = _namespace_class.new_PropertiesFile(arg2)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_PropertiesFile
    __del__ = lambda self : None;
PropertiesFile_swigregister = _namespace_class.PropertiesFile_swigregister
PropertiesFile_swigregister(PropertiesFile)

class PropertiesFree(AudioProperties):
    __swig_setmethods__ = {}
    for _s in [AudioProperties]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertiesFree, name, value)
    __swig_getmethods__ = {}
    for _s in [AudioProperties]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PropertiesFree, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _namespace_class.new_PropertiesFree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_PropertiesFree
    __del__ = lambda self : None;
PropertiesFree_swigregister = _namespace_class.PropertiesFree_swigregister
PropertiesFree_swigregister(PropertiesFree)

class FooFilePrivate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FooFilePrivate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FooFilePrivate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _namespace_class.new_FooFilePrivate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_FooFilePrivate
    __del__ = lambda self : None;
FooFilePrivate_swigregister = _namespace_class.FooFilePrivate_swigregister
FooFilePrivate_swigregister(FooFilePrivate)

class FooFile(PropertiesFile):
    __swig_setmethods__ = {}
    for _s in [PropertiesFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FooFile, name, value)
    __swig_getmethods__ = {}
    for _s in [PropertiesFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FooFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _namespace_class.new_FooFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_FooFile
    __del__ = lambda self : None;
FooFile_swigregister = _namespace_class.FooFile_swigregister
FooFile_swigregister(FooFile)

class FLACFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FLACFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FLACFile, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _namespace_class.new_FLACFile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _namespace_class.delete_FLACFile
    __del__ = lambda self : None;
FLACFile_swigregister = _namespace_class.FLACFile_swigregister
FLACFile_swigregister(FLACFile)

# This file is compatible with both classic and new-style classes.


