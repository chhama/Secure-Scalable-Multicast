# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_valuewrapper_opaque', [dirname(__file__)])
        except ImportError:
            import _valuewrapper_opaque
            return _valuewrapper_opaque
        if fp is not None:
            try:
                _mod = imp.load_module('_valuewrapper_opaque', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _valuewrapper_opaque = swig_import_helper()
    del swig_import_helper
else:
    import _valuewrapper_opaque
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _valuewrapper_opaque.new_A(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _valuewrapper_opaque.delete_A
    __del__ = lambda self : None;
A_swigregister = _valuewrapper_opaque.A_swigregister
A_swigregister(A)

class D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _valuewrapper_opaque.new_D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _valuewrapper_opaque.delete_D
    __del__ = lambda self : None;
D_swigregister = _valuewrapper_opaque.D_swigregister
D_swigregister(D)

class Klass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Klass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Klass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _valuewrapper_opaque.new_Klass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _valuewrapper_opaque.delete_Klass
    __del__ = lambda self : None;
Klass_swigregister = _valuewrapper_opaque.Klass_swigregister
Klass_swigregister(Klass)


def getKlass(*args):
  return _valuewrapper_opaque.getKlass(*args)
getKlass = _valuewrapper_opaque.getKlass

def getA(*args):
  return _valuewrapper_opaque.getA(*args)
getA = _valuewrapper_opaque.getA

def getC(*args):
  return _valuewrapper_opaque.getC(*args)
getC = _valuewrapper_opaque.getC

def getInt(*args):
  return _valuewrapper_opaque.getInt(*args)
getInt = _valuewrapper_opaque.getInt

def sgetA(*args):
  return _valuewrapper_opaque.sgetA(*args)
sgetA = _valuewrapper_opaque.sgetA

def sgetKlass(*args):
  return _valuewrapper_opaque.sgetKlass(*args)
sgetKlass = _valuewrapper_opaque.sgetKlass

def getPtrA(*args):
  return _valuewrapper_opaque.getPtrA(*args)
getPtrA = _valuewrapper_opaque.getPtrA

def getB(*args):
  return _valuewrapper_opaque.getB(*args)
getB = _valuewrapper_opaque.getB

def getD(*args):
  return _valuewrapper_opaque.getD(*args)
getD = _valuewrapper_opaque.getD
class AA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AA, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _valuewrapper_opaque.new_AA()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["innerObj"] = _valuewrapper_opaque.AA_innerObj_set
    __swig_getmethods__["innerObj"] = _valuewrapper_opaque.AA_innerObj_get
    if _newclass:innerObj = _swig_property(_valuewrapper_opaque.AA_innerObj_get, _valuewrapper_opaque.AA_innerObj_set)
    __swig_destroy__ = _valuewrapper_opaque.delete_AA
    __del__ = lambda self : None;
AA_swigregister = _valuewrapper_opaque.AA_swigregister
AA_swigregister(AA)

class Quux(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quux, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quux, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _valuewrapper_opaque.new_Quux()
        try: self.this.append(this)
        except: self.this = this
    def method(self): return _valuewrapper_opaque.Quux_method(self)
    __swig_destroy__ = _valuewrapper_opaque.delete_Quux
    __del__ = lambda self : None;
Quux_swigregister = _valuewrapper_opaque.Quux_swigregister
Quux_swigregister(Quux)


def getv_i(*args):
  return _valuewrapper_opaque.getv_i(*args)
getv_i = _valuewrapper_opaque.getv_i

def getp_i(*args):
  return _valuewrapper_opaque.getp_i(*args)
getp_i = _valuewrapper_opaque.getp_i

def getv_d(*args):
  return _valuewrapper_opaque.getv_d(*args)
getv_d = _valuewrapper_opaque.getv_d

def getp_d(*args):
  return _valuewrapper_opaque.getp_d(*args)
getp_d = _valuewrapper_opaque.getp_d
# This file is compatible with both classic and new-style classes.


