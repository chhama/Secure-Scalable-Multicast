# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_refcount', [dirname(__file__)])
        except ImportError:
            import _refcount
            return _refcount
        if fp is not None:
            try:
                _mod = imp.load_module('_refcount', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _refcount = swig_import_helper()
    del swig_import_helper
else:
    import _refcount
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class RCObjBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCObjBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCObjBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def ref_count(self): return _refcount.RCObjBase_ref_count(self)
    def addref(self): return _refcount.RCObjBase_addref(self)
    def delref(self): return _refcount.RCObjBase_delref(self)
RCObjBase_swigregister = _refcount.RCObjBase_swigregister
RCObjBase_swigregister(RCObjBase)

class RCObj(RCObjBase):
    __swig_setmethods__ = {}
    for _s in [RCObjBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCObj, name, value)
    __swig_getmethods__ = {}
    for _s in [RCObjBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RCObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _refcount.delete_RCObj
    __del__ = lambda self : None;
RCObj_swigregister = _refcount.RCObj_swigregister
RCObj_swigregister(RCObj)

class A(RCObj):
    __swig_setmethods__ = {}
    for _s in [RCObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    for _s in [RCObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _refcount.new_A()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _refcount.delete_A
    __del__ = lambda self : None;
A_swigregister = _refcount.A_swigregister
A_swigregister(A)

class A1(A):
    __swig_setmethods__ = {}
    for _s in [A]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, A1, name, value)
    __swig_getmethods__ = {}
    for _s in [A]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, A1, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _refcount.delete_A1
    __del__ = lambda self : None;
A1_swigregister = _refcount.A1_swigregister
A1_swigregister(A1)

class A2(A):
    __swig_setmethods__ = {}
    for _s in [A]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, A2, name, value)
    __swig_getmethods__ = {}
    for _s in [A]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, A2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _refcount.new_A2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _refcount.delete_A2
    __del__ = lambda self : None;
A2_swigregister = _refcount.A2_swigregister
A2_swigregister(A2)

class A3(A1):
    __swig_setmethods__ = {}
    for _s in [A1]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, A3, name, value)
    __swig_getmethods__ = {}
    for _s in [A1]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, A3, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _refcount.new_A3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _refcount.delete_A3
    __del__ = lambda self : None;
A3_swigregister = _refcount.A3_swigregister
A3_swigregister(A3)

class RCPtr_A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCPtr_A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCPtr_A, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _refcount.new_RCPtr_A(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _refcount.delete_RCPtr_A
    __del__ = lambda self : None;
    def __deref__(self, *args): return _refcount.RCPtr_A___deref__(self, *args)
    def __ref__(self, *args): return _refcount.RCPtr_A___ref__(self, *args)
    def get(self, *args): return _refcount.RCPtr_A_get(self, *args)
    def ref_count(self): return _refcount.RCPtr_A_ref_count(self)
    def addref(self): return _refcount.RCPtr_A_addref(self)
    def delref(self): return _refcount.RCPtr_A_delref(self)
RCPtr_A_swigregister = _refcount.RCPtr_A_swigregister
RCPtr_A_swigregister(RCPtr_A)

class B(RCObj):
    __swig_setmethods__ = {}
    for _s in [RCObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    for _s in [RCObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _refcount.new_B(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_a(self): return _refcount.B_get_a(self)
    __swig_getmethods__["create"] = lambda x: _refcount.B_create
    if _newclass:create = staticmethod(_refcount.B_create)
    def cloner(self): return _refcount.B_cloner(self)
    __swig_destroy__ = _refcount.delete_B
    __del__ = lambda self : None;
    def get_rca(self): return _refcount.B_get_rca(self)
B_swigregister = _refcount.B_swigregister
B_swigregister(B)

def B_create(*args):
  return _refcount.B_create(*args)
B_create = _refcount.B_create


def global_create(*args):
  return _refcount.global_create(*args)
global_create = _refcount.global_create
class Factory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Factory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Factory, name)
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _refcount.Factory_create
    if _newclass:create = staticmethod(_refcount.Factory_create)
    def create2(self, *args): return _refcount.Factory_create2(self, *args)
    def __init__(self): 
        this = _refcount.new_Factory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _refcount.delete_Factory
    __del__ = lambda self : None;
Factory_swigregister = _refcount.Factory_swigregister
Factory_swigregister(Factory)

def Factory_create(*args):
  return _refcount.Factory_create(*args)
Factory_create = _refcount.Factory_create

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _refcount.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _refcount.SwigPyIterator_value(self)
    def incr(self, n=1): return _refcount.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _refcount.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _refcount.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _refcount.SwigPyIterator_equal(self, *args)
    def copy(self): return _refcount.SwigPyIterator_copy(self)
    def next(self): return _refcount.SwigPyIterator_next(self)
    def __next__(self): return _refcount.SwigPyIterator___next__(self)
    def previous(self): return _refcount.SwigPyIterator_previous(self)
    def advance(self, *args): return _refcount.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _refcount.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _refcount.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _refcount.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _refcount.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _refcount.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _refcount.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _refcount.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_A, name)
    __repr__ = _swig_repr
    def iterator(self): return _refcount.vector_A_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _refcount.vector_A___nonzero__(self)
    def __bool__(self): return _refcount.vector_A___bool__(self)
    def __len__(self): return _refcount.vector_A___len__(self)
    def pop(self): return _refcount.vector_A_pop(self)
    def __getslice__(self, *args): return _refcount.vector_A___getslice__(self, *args)
    def __setslice__(self, *args): return _refcount.vector_A___setslice__(self, *args)
    def __delslice__(self, *args): return _refcount.vector_A___delslice__(self, *args)
    def __delitem__(self, *args): return _refcount.vector_A___delitem__(self, *args)
    def __getitem__(self, *args): return _refcount.vector_A___getitem__(self, *args)
    def __setitem__(self, *args): return _refcount.vector_A___setitem__(self, *args)
    def append(self, *args): return _refcount.vector_A_append(self, *args)
    def empty(self): return _refcount.vector_A_empty(self)
    def size(self): return _refcount.vector_A_size(self)
    def clear(self): return _refcount.vector_A_clear(self)
    def swap(self, *args): return _refcount.vector_A_swap(self, *args)
    def get_allocator(self): return _refcount.vector_A_get_allocator(self)
    def begin(self): return _refcount.vector_A_begin(self)
    def end(self): return _refcount.vector_A_end(self)
    def rbegin(self): return _refcount.vector_A_rbegin(self)
    def rend(self): return _refcount.vector_A_rend(self)
    def pop_back(self): return _refcount.vector_A_pop_back(self)
    def erase(self, *args): return _refcount.vector_A_erase(self, *args)
    def __init__(self, *args): 
        this = _refcount.new_vector_A(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _refcount.vector_A_push_back(self, *args)
    def front(self): return _refcount.vector_A_front(self)
    def back(self): return _refcount.vector_A_back(self)
    def assign(self, *args): return _refcount.vector_A_assign(self, *args)
    def resize(self, *args): return _refcount.vector_A_resize(self, *args)
    def insert(self, *args): return _refcount.vector_A_insert(self, *args)
    def reserve(self, *args): return _refcount.vector_A_reserve(self, *args)
    def capacity(self): return _refcount.vector_A_capacity(self)
    __swig_destroy__ = _refcount.delete_vector_A
    __del__ = lambda self : None;
vector_A_swigregister = _refcount.vector_A_swigregister
vector_A_swigregister(vector_A)

# This file is compatible with both classic and new-style classes.


