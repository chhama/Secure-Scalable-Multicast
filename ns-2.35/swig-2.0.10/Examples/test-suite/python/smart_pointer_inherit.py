# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_smart_pointer_inherit', [dirname(__file__)])
        except ImportError:
            import _smart_pointer_inherit
            return _smart_pointer_inherit
        if fp is not None:
            try:
                _mod = imp.load_module('_smart_pointer_inherit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _smart_pointer_inherit = swig_import_helper()
    del swig_import_helper
else:
    import _smart_pointer_inherit
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _smart_pointer_inherit.delete_Base
    __del__ = lambda self : None;
    def value(self): return _smart_pointer_inherit.Base_value(self)
    def value2(self): return _smart_pointer_inherit.Base_value2(self)
    def value3(self): return _smart_pointer_inherit.Base_value3(self)
    def valuehide(self): return _smart_pointer_inherit.Base_valuehide(self)
    __swig_setmethods__["val"] = _smart_pointer_inherit.Base_val_set
    __swig_getmethods__["val"] = _smart_pointer_inherit.Base_val_get
    if _newclass:val = _swig_property(_smart_pointer_inherit.Base_val_get, _smart_pointer_inherit.Base_val_set)
Base_swigregister = _smart_pointer_inherit.Base_swigregister
Base_swigregister(Base)

class Derived(Base):
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Derived, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Derived, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _smart_pointer_inherit.new_Derived(*args)
        try: self.this.append(this)
        except: self.this = this
    def value(self): return _smart_pointer_inherit.Derived_value(self)
    def value3(self): return _smart_pointer_inherit.Derived_value3(self)
    def valuehide(self): return _smart_pointer_inherit.Derived_valuehide(self)
    __swig_destroy__ = _smart_pointer_inherit.delete_Derived
    __del__ = lambda self : None;
Derived_swigregister = _smart_pointer_inherit.Derived_swigregister
Derived_swigregister(Derived)

class SmartBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmartBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SmartBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _smart_pointer_inherit.new_SmartBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self): return _smart_pointer_inherit.SmartBase___deref__(self)
    __swig_destroy__ = _smart_pointer_inherit.delete_SmartBase
    __del__ = lambda self : None;
    def value(self): return _smart_pointer_inherit.SmartBase_value(self)
    def value2(self): return _smart_pointer_inherit.SmartBase_value2(self)
    def value3(self): return _smart_pointer_inherit.SmartBase_value3(self)
    def valuehide(self): return _smart_pointer_inherit.SmartBase_valuehide(self)
    __swig_setmethods__["val"] = _smart_pointer_inherit.SmartBase_val_set
    __swig_getmethods__["val"] = _smart_pointer_inherit.SmartBase_val_get
    if _newclass:val = _swig_property(_smart_pointer_inherit.SmartBase_val_get, _smart_pointer_inherit.SmartBase_val_set)
SmartBase_swigregister = _smart_pointer_inherit.SmartBase_swigregister
SmartBase_swigregister(SmartBase)

class SmartDerived(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmartDerived, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SmartDerived, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _smart_pointer_inherit.new_SmartDerived(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self): return _smart_pointer_inherit.SmartDerived___deref__(self)
    __swig_destroy__ = _smart_pointer_inherit.delete_SmartDerived
    __del__ = lambda self : None;
    def value(self): return _smart_pointer_inherit.SmartDerived_value(self)
    def value3(self): return _smart_pointer_inherit.SmartDerived_value3(self)
    def valuehide(self): return _smart_pointer_inherit.SmartDerived_valuehide(self)
    def value2(self): return _smart_pointer_inherit.SmartDerived_value2(self)
    __swig_setmethods__["val"] = _smart_pointer_inherit.SmartDerived_val_set
    __swig_getmethods__["val"] = _smart_pointer_inherit.SmartDerived_val_get
    if _newclass:val = _swig_property(_smart_pointer_inherit.SmartDerived_val_get, _smart_pointer_inherit.SmartDerived_val_set)
SmartDerived_swigregister = _smart_pointer_inherit.SmartDerived_swigregister
SmartDerived_swigregister(SmartDerived)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _smart_pointer_inherit.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _smart_pointer_inherit.SwigPyIterator_value(self)
    def incr(self, n=1): return _smart_pointer_inherit.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _smart_pointer_inherit.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _smart_pointer_inherit.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _smart_pointer_inherit.SwigPyIterator_equal(self, *args)
    def copy(self): return _smart_pointer_inherit.SwigPyIterator_copy(self)
    def next(self): return _smart_pointer_inherit.SwigPyIterator_next(self)
    def __next__(self): return _smart_pointer_inherit.SwigPyIterator___next__(self)
    def previous(self): return _smart_pointer_inherit.SwigPyIterator_previous(self)
    def advance(self, *args): return _smart_pointer_inherit.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _smart_pointer_inherit.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _smart_pointer_inherit.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _smart_pointer_inherit.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _smart_pointer_inherit.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _smart_pointer_inherit.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _smart_pointer_inherit.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _smart_pointer_inherit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ItkLevelSetNodeUS2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ItkLevelSetNodeUS2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ItkLevelSetNodeUS2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _smart_pointer_inherit.new_ItkLevelSetNodeUS2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smart_pointer_inherit.delete_ItkLevelSetNodeUS2
    __del__ = lambda self : None;
ItkLevelSetNodeUS2_swigregister = _smart_pointer_inherit.ItkLevelSetNodeUS2_swigregister
ItkLevelSetNodeUS2_swigregister(ItkLevelSetNodeUS2)

class VectorLevelSetNodeUS2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorLevelSetNodeUS2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorLevelSetNodeUS2, name)
    __repr__ = _swig_repr
    def iterator(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2___nonzero__(self)
    def __bool__(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2___bool__(self)
    def __len__(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2___len__(self)
    def pop(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_pop(self)
    def __getslice__(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2___getslice__(self, *args)
    def __setslice__(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2___setslice__(self, *args)
    def __delslice__(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2___delslice__(self, *args)
    def __delitem__(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2___delitem__(self, *args)
    def __getitem__(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2___getitem__(self, *args)
    def __setitem__(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2___setitem__(self, *args)
    def append(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2_append(self, *args)
    def empty(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_empty(self)
    def size(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_size(self)
    def clear(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_clear(self)
    def swap(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2_swap(self, *args)
    def get_allocator(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_get_allocator(self)
    def begin(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_begin(self)
    def end(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_end(self)
    def rbegin(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_rbegin(self)
    def rend(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_rend(self)
    def pop_back(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_pop_back(self)
    def erase(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2_erase(self, *args)
    def __init__(self, *args): 
        this = _smart_pointer_inherit.new_VectorLevelSetNodeUS2(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2_push_back(self, *args)
    def front(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_front(self)
    def back(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_back(self)
    def assign(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2_assign(self, *args)
    def resize(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2_resize(self, *args)
    def insert(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2_insert(self, *args)
    def reserve(self, *args): return _smart_pointer_inherit.VectorLevelSetNodeUS2_reserve(self, *args)
    def capacity(self): return _smart_pointer_inherit.VectorLevelSetNodeUS2_capacity(self)
    __swig_destroy__ = _smart_pointer_inherit.delete_VectorLevelSetNodeUS2
    __del__ = lambda self : None;
VectorLevelSetNodeUS2_swigregister = _smart_pointer_inherit.VectorLevelSetNodeUS2_swigregister
VectorLevelSetNodeUS2_swigregister(VectorLevelSetNodeUS2)

class ItkVectorContainerUILSNUS2(VectorLevelSetNodeUS2):
    __swig_setmethods__ = {}
    for _s in [VectorLevelSetNodeUS2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ItkVectorContainerUILSNUS2, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorLevelSetNodeUS2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ItkVectorContainerUILSNUS2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _smart_pointer_inherit.new_ItkVectorContainerUILSNUS2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smart_pointer_inherit.delete_ItkVectorContainerUILSNUS2
    __del__ = lambda self : None;
ItkVectorContainerUILSNUS2_swigregister = _smart_pointer_inherit.ItkVectorContainerUILSNUS2_swigregister
ItkVectorContainerUILSNUS2_swigregister(ItkVectorContainerUILSNUS2)

class ItkVectorContainerUILSNUS2_Pointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ItkVectorContainerUILSNUS2_Pointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ItkVectorContainerUILSNUS2_Pointer, name)
    __repr__ = _swig_repr
    def __deref__(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer___deref__(self)
    def __init__(self): 
        this = _smart_pointer_inherit.new_ItkVectorContainerUILSNUS2_Pointer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smart_pointer_inherit.delete_ItkVectorContainerUILSNUS2_Pointer
    __del__ = lambda self : None;
    def iterator(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_iterator(self)
    def __nonzero__(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer___nonzero__(self)
    def __bool__(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer___bool__(self)
    def __len__(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer___len__(self)
    def pop(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_pop(self)
    def __getslice__(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer___getslice__(self, *args)
    def __setslice__(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer___setslice__(self, *args)
    def __delslice__(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer___delslice__(self, *args)
    def __delitem__(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer___delitem__(self, *args)
    def __getitem__(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer___getitem__(self, *args)
    def __setitem__(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer___setitem__(self, *args)
    def append(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_append(self, *args)
    def empty(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_empty(self)
    def size(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_size(self)
    def clear(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_clear(self)
    def swap(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_swap(self, *args)
    def get_allocator(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_get_allocator(self)
    def begin(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_begin(self)
    def end(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_end(self)
    def rbegin(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_rbegin(self)
    def rend(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_rend(self)
    def pop_back(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_pop_back(self)
    def resize(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_resize(self, *args)
    def erase(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_erase(self, *args)
    def push_back(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_push_back(self, *args)
    def front(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_front(self)
    def back(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_back(self)
    def assign(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_assign(self, *args)
    def insert(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_insert(self, *args)
    def reserve(self, *args): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_reserve(self, *args)
    def capacity(self): return _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_capacity(self)
ItkVectorContainerUILSNUS2_Pointer_swigregister = _smart_pointer_inherit.ItkVectorContainerUILSNUS2_Pointer_swigregister
ItkVectorContainerUILSNUS2_Pointer_swigregister(ItkVectorContainerUILSNUS2_Pointer)

# This file is compatible with both classic and new-style classes.


