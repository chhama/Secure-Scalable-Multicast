# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_features', [dirname(__file__)])
        except ImportError:
            import _features
            return _features
        if fp is not None:
            try:
                _mod = imp.load_module('_features', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _features = swig_import_helper()
    del swig_import_helper
else:
    import _features
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Simple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Simple, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _features.new_Simple()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _features.delete_Simple
    __del__ = lambda self : None;
Simple_swigregister = _features.Simple_swigregister
Simple_swigregister(Simple)

class SimpleNS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleNS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleNS, name)
    __repr__ = _swig_repr
    def method(self): return _features.SimpleNS_method(self)
    def afunction(self): return _features.SimpleNS_afunction(self)
    def __init__(self): 
        this = _features.new_SimpleNS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _features.delete_SimpleNS
    __del__ = lambda self : None;
SimpleNS_swigregister = _features.SimpleNS_swigregister
SimpleNS_swigregister(SimpleNS)


def FooBarInt(*args):
  return _features.FooBarInt(*args)
FooBarInt = _features.FooBarInt
class SimpleInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleInt, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _features.new_SimpleInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _features.delete_SimpleInt
    __del__ = lambda self : None;
SimpleInt_swigregister = _features.SimpleInt_swigregister
SimpleInt_swigregister(SimpleInt)

class TemplateInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TemplateInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TemplateInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _features.new_TemplateInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _features.delete_TemplateInt
    __del__ = lambda self : None;
    def foo(self): return _features.TemplateInt_foo(self)
    def bar(self, *args): return _features.TemplateInt_bar(self, *args)
    def get(self, *args): return _features.TemplateInt_get(self, *args)
    def set(self, *args): return _features.TemplateInt_set(self, *args)
TemplateInt_swigregister = _features.TemplateInt_swigregister
TemplateInt_swigregister(TemplateInt)

class WildCards(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WildCards, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WildCards, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _features.delete_WildCards
    __del__ = lambda self : None;
    def incy(self, *args): return _features.WildCards_incy(self, *args)
    def wincy(self, *args): return _features.WildCards_wincy(self, *args)
    def spider(self, *args): return _features.WildCards_spider(self, *args)
    def __init__(self): 
        this = _features.new_WildCards()
        try: self.this.append(this)
        except: self.this = this
WildCards_swigregister = _features.WildCards_swigregister
WildCards_swigregister(WildCards)

class Animals(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Animals, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Animals, name)
    __repr__ = _swig_repr
    def __init__(self, a=0, d=0.0): 
        this = _features.new_Animals(a, d)
        try: self.this.append(this)
        except: self.this = this
    def lions(self, a=0, d=0.0): return _features.Animals_lions(self, a, d)
    def leopards(self, a=0, d=0.0): return _features.Animals_leopards(self, a, d)
    def cheetahs(self, a=0, d=0.0): return _features.Animals_cheetahs(self, a, d)
    def jackal(self, a=0, d=0.0): return _features.Animals_jackal(self, a, d)
    __swig_destroy__ = _features.delete_Animals
    __del__ = lambda self : None;
Animals_swigregister = _features.Animals_swigregister
Animals_swigregister(Animals)

class Base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Base, name)
    __repr__ = _swig_repr
    def __iadd__(self, *args): return _features.Base___iadd__(self, *args)
    def virtualmethod(self, *args): return _features.Base_virtualmethod(self, *args)
    __swig_destroy__ = _features.delete_Base
    __del__ = lambda self : None;
    def __init__(self): 
        this = _features.new_Base()
        try: self.this.append(this)
        except: self.this = this
Base_swigregister = _features.Base_swigregister
Base_swigregister(Base)

class Derived(Base):
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Derived, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Derived, name)
    __repr__ = _swig_repr
    def virtualmethod(self, *args): return _features.Derived_virtualmethod(self, *args)
    def __init__(self): 
        this = _features.new_Derived()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _features.delete_Derived
    __del__ = lambda self : None;
Derived_swigregister = _features.Derived_swigregister
Derived_swigregister(Derived)

class ConversionOperators(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConversionOperators, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConversionOperators, name)
    __repr__ = _swig_repr
    def __nonzero__(self):
        return _features.ConversionOperators___nonzero__(self)
    __bool__ = __nonzero__


    def opuint(self): return _features.ConversionOperators_opuint(self)
    def __init__(self): 
        this = _features.new_ConversionOperators()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _features.delete_ConversionOperators
    __del__ = lambda self : None;
ConversionOperators_swigregister = _features.ConversionOperators_swigregister
ConversionOperators_swigregister(ConversionOperators)

# This file is compatible with both classic and new-style classes.


