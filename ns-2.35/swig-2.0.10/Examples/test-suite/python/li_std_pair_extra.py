# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_std_pair_extra', [dirname(__file__)])
        except ImportError:
            import _li_std_pair_extra
            return _li_std_pair_extra
        if fp is not None:
            try:
                _mod = imp.load_module('_li_std_pair_extra', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_std_pair_extra = swig_import_helper()
    del swig_import_helper
else:
    import _li_std_pair_extra
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _li_std_pair_extra.A_val_set
    __swig_getmethods__["val"] = _li_std_pair_extra.A_val_get
    if _newclass:val = _swig_property(_li_std_pair_extra.A_val_get, _li_std_pair_extra.A_val_set)
    def __init__(self, v=0): 
        this = _li_std_pair_extra.new_A(v)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_pair_extra.delete_A
    __del__ = lambda self : None;
A_swigregister = _li_std_pair_extra.A_swigregister
A_swigregister(A)

class B(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _li_std_pair_extra.new_B()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_pair_extra.delete_B
    __del__ = lambda self : None;
B_swigregister = _li_std_pair_extra.B_swigregister
B_swigregister(B)

class CIntPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CIntPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CIntPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_CIntPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["first"] = _li_std_pair_extra.CIntPair_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.CIntPair_first_get)
    __swig_getmethods__["second"] = _li_std_pair_extra.CIntPair_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.CIntPair_second_get)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_CIntPair
    __del__ = lambda self : None;
CIntPair_swigregister = _li_std_pair_extra.CIntPair_swigregister
CIntPair_swigregister(CIntPair)

class ShortPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_ShortPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.ShortPair_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.ShortPair_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.ShortPair_first_get, _li_std_pair_extra.ShortPair_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.ShortPair_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.ShortPair_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.ShortPair_second_get, _li_std_pair_extra.ShortPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_ShortPair
    __del__ = lambda self : None;
ShortPair_swigregister = _li_std_pair_extra.ShortPair_swigregister
ShortPair_swigregister(ShortPair)

class IntPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_IntPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.IntPair_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.IntPair_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.IntPair_first_get, _li_std_pair_extra.IntPair_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.IntPair_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.IntPair_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.IntPair_second_get, _li_std_pair_extra.IntPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_IntPair
    __del__ = lambda self : None;
IntPair_swigregister = _li_std_pair_extra.IntPair_swigregister
IntPair_swigregister(IntPair)

def pair(*args):
    val = _li_std_pair_extra.new_pair(*args)
    return val

class SIPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_SIPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.SIPair_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.SIPair_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.SIPair_first_get, _li_std_pair_extra.SIPair_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.SIPair_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.SIPair_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.SIPair_second_get, _li_std_pair_extra.SIPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    def __eq__(self, *args): return _li_std_pair_extra.SIPair___eq__(self, *args)
    def __ne__(self, *args): return _li_std_pair_extra.SIPair___ne__(self, *args)
    def __gt__(self, *args): return _li_std_pair_extra.SIPair___gt__(self, *args)
    def __lt__(self, *args): return _li_std_pair_extra.SIPair___lt__(self, *args)
    def __ge__(self, *args): return _li_std_pair_extra.SIPair___ge__(self, *args)
    def __le__(self, *args): return _li_std_pair_extra.SIPair___le__(self, *args)
    __swig_destroy__ = _li_std_pair_extra.delete_SIPair
    __del__ = lambda self : None;
SIPair_swigregister = _li_std_pair_extra.SIPair_swigregister
SIPair_swigregister(SIPair)

class CIPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CIPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CIPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_CIPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.CIPair_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.CIPair_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.CIPair_first_get, _li_std_pair_extra.CIPair_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.CIPair_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.CIPair_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.CIPair_second_get, _li_std_pair_extra.CIPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_CIPair
    __del__ = lambda self : None;
CIPair_swigregister = _li_std_pair_extra.CIPair_swigregister
CIPair_swigregister(CIPair)

class SIIPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SIIPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SIIPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_SIIPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.SIIPair_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.SIIPair_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.SIIPair_first_get, _li_std_pair_extra.SIIPair_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.SIIPair_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.SIIPair_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.SIIPair_second_get, _li_std_pair_extra.SIIPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    def __eq__(self, *args): return _li_std_pair_extra.SIIPair___eq__(self, *args)
    def __ne__(self, *args): return _li_std_pair_extra.SIIPair___ne__(self, *args)
    def __gt__(self, *args): return _li_std_pair_extra.SIIPair___gt__(self, *args)
    def __lt__(self, *args): return _li_std_pair_extra.SIIPair___lt__(self, *args)
    def __ge__(self, *args): return _li_std_pair_extra.SIIPair___ge__(self, *args)
    def __le__(self, *args): return _li_std_pair_extra.SIIPair___le__(self, *args)
    __swig_destroy__ = _li_std_pair_extra.delete_SIIPair
    __del__ = lambda self : None;
SIIPair_swigregister = _li_std_pair_extra.SIIPair_swigregister
SIIPair_swigregister(SIIPair)

class AIntPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AIntPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AIntPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_AIntPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.AIntPair_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.AIntPair_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.AIntPair_first_get, _li_std_pair_extra.AIntPair_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.AIntPair_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.AIntPair_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.AIntPair_second_get, _li_std_pair_extra.AIntPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_AIntPair
    __del__ = lambda self : None;
AIntPair_swigregister = _li_std_pair_extra.AIntPair_swigregister
AIntPair_swigregister(AIntPair)

class CCIntPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCIntPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCIntPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_CCIntPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["first"] = _li_std_pair_extra.CCIntPair_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.CCIntPair_first_get)
    __swig_getmethods__["second"] = _li_std_pair_extra.CCIntPair_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.CCIntPair_second_get)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_CCIntPair
    __del__ = lambda self : None;
CCIntPair_swigregister = _li_std_pair_extra.CCIntPair_swigregister
CCIntPair_swigregister(CCIntPair)

class ABPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ABPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ABPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_ABPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.ABPair_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.ABPair_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.ABPair_first_get, _li_std_pair_extra.ABPair_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.ABPair_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.ABPair_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.ABPair_second_get, _li_std_pair_extra.ABPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_ABPair
    __del__ = lambda self : None;
ABPair_swigregister = _li_std_pair_extra.ABPair_swigregister
ABPair_swigregister(ABPair)

class IntAPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntAPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntAPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_IntAPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.IntAPair_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.IntAPair_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.IntAPair_first_get, _li_std_pair_extra.IntAPair_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.IntAPair_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.IntAPair_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.IntAPair_second_get, _li_std_pair_extra.IntAPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_IntAPair
    __del__ = lambda self : None;
IntAPair_swigregister = _li_std_pair_extra.IntAPair_swigregister
IntAPair_swigregister(IntAPair)

class pairP1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairP1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairP1, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_pairP1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.pairP1_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.pairP1_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.pairP1_first_get, _li_std_pair_extra.pairP1_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.pairP1_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.pairP1_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.pairP1_second_get, _li_std_pair_extra.pairP1_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_pairP1
    __del__ = lambda self : None;
pairP1_swigregister = _li_std_pair_extra.pairP1_swigregister
pairP1_swigregister(pairP1)

class pairP2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairP2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairP2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_pairP2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.pairP2_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.pairP2_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.pairP2_first_get, _li_std_pair_extra.pairP2_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.pairP2_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.pairP2_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.pairP2_second_get, _li_std_pair_extra.pairP2_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_pairP2
    __del__ = lambda self : None;
pairP2_swigregister = _li_std_pair_extra.pairP2_swigregister
pairP2_swigregister(pairP2)

class pairP3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairP3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairP3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_pairP3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.pairP3_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.pairP3_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.pairP3_first_get, _li_std_pair_extra.pairP3_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.pairP3_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.pairP3_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.pairP3_second_get, _li_std_pair_extra.pairP3_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_pairP3
    __del__ = lambda self : None;
pairP3_swigregister = _li_std_pair_extra.pairP3_swigregister
pairP3_swigregister(pairP3)

class pairP4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairP4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairP4, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_pairP4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.pairP4_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.pairP4_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.pairP4_first_get, _li_std_pair_extra.pairP4_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.pairP4_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.pairP4_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.pairP4_second_get, _li_std_pair_extra.pairP4_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_pairP4
    __del__ = lambda self : None;
pairP4_swigregister = _li_std_pair_extra.pairP4_swigregister
pairP4_swigregister(pairP4)

class pairP5(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairP5, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairP5, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_pairP5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.pairP5_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.pairP5_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.pairP5_first_get, _li_std_pair_extra.pairP5_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.pairP5_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.pairP5_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.pairP5_second_get, _li_std_pair_extra.pairP5_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_pairP5
    __del__ = lambda self : None;
pairP5_swigregister = _li_std_pair_extra.pairP5_swigregister
pairP5_swigregister(pairP5)

class pairP6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairP6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairP6, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_pairP6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.pairP6_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.pairP6_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.pairP6_first_get, _li_std_pair_extra.pairP6_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.pairP6_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.pairP6_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.pairP6_second_get, _li_std_pair_extra.pairP6_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_pairP6
    __del__ = lambda self : None;
pairP6_swigregister = _li_std_pair_extra.pairP6_swigregister
pairP6_swigregister(pairP6)


def makeIntPair(*args):
  return _li_std_pair_extra.makeIntPair(*args)
makeIntPair = _li_std_pair_extra.makeIntPair

def makeIntPairPtr(*args):
  return _li_std_pair_extra.makeIntPairPtr(*args)
makeIntPairPtr = _li_std_pair_extra.makeIntPairPtr

def makeIntPairRef(*args):
  return _li_std_pair_extra.makeIntPairRef(*args)
makeIntPairRef = _li_std_pair_extra.makeIntPairRef

def makeIntPairConstRef(*args):
  return _li_std_pair_extra.makeIntPairConstRef(*args)
makeIntPairConstRef = _li_std_pair_extra.makeIntPairConstRef

def product1(*args):
  return _li_std_pair_extra.product1(*args)
product1 = _li_std_pair_extra.product1

def product2(*args):
  return _li_std_pair_extra.product2(*args)
product2 = _li_std_pair_extra.product2

def p_ident(*args):
  return _li_std_pair_extra.p_ident(*args)
p_ident = _li_std_pair_extra.p_ident

def p_identa(*args):
  return _li_std_pair_extra.p_identa(*args)
p_identa = _li_std_pair_extra.p_identa

def d_inout(*args):
  return _li_std_pair_extra.d_inout(*args)
d_inout = _li_std_pair_extra.d_inout

def d_inout2(*args):
  return _li_std_pair_extra.d_inout2(*args)
d_inout2 = _li_std_pair_extra.d_inout2

def p_inout(*args):
  return _li_std_pair_extra.p_inout(*args)
p_inout = _li_std_pair_extra.p_inout

def p_inout2(*args):
  return _li_std_pair_extra.p_inout2(*args)
p_inout2 = _li_std_pair_extra.p_inout2

def p_inout3(*args):
  return _li_std_pair_extra.p_inout3(*args)
p_inout3 = _li_std_pair_extra.p_inout3

def p_inoutd(*args):
  return _li_std_pair_extra.p_inoutd(*args)
p_inoutd = _li_std_pair_extra.p_inoutd

def s_ident(*args):
  return _li_std_pair_extra.s_ident(*args)
s_ident = _li_std_pair_extra.s_ident
class paircA1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, paircA1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, paircA1, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_paircA1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["first"] = _li_std_pair_extra.paircA1_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.paircA1_first_get)
    __swig_setmethods__["second"] = _li_std_pair_extra.paircA1_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.paircA1_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.paircA1_second_get, _li_std_pair_extra.paircA1_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_paircA1
    __del__ = lambda self : None;
paircA1_swigregister = _li_std_pair_extra.paircA1_swigregister
paircA1_swigregister(paircA1)

class paircA2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, paircA2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, paircA2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_paircA2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["first"] = _li_std_pair_extra.paircA2_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.paircA2_first_get)
    __swig_setmethods__["second"] = _li_std_pair_extra.paircA2_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.paircA2_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.paircA2_second_get, _li_std_pair_extra.paircA2_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_paircA2
    __del__ = lambda self : None;
paircA2_swigregister = _li_std_pair_extra.paircA2_swigregister
paircA2_swigregister(paircA2)

class pairiiA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairiiA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairiiA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_pair_extra.new_pairiiA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_pair_extra.pairiiA_first_set
    __swig_getmethods__["first"] = _li_std_pair_extra.pairiiA_first_get
    if _newclass:first = _swig_property(_li_std_pair_extra.pairiiA_first_get, _li_std_pair_extra.pairiiA_first_set)
    __swig_setmethods__["second"] = _li_std_pair_extra.pairiiA_second_set
    __swig_getmethods__["second"] = _li_std_pair_extra.pairiiA_second_get
    if _newclass:second = _swig_property(_li_std_pair_extra.pairiiA_second_get, _li_std_pair_extra.pairiiA_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_pair_extra.delete_pairiiA
    __del__ = lambda self : None;
pairiiA_swigregister = _li_std_pair_extra.pairiiA_swigregister
pairiiA_swigregister(pairiiA)

# This file is compatible with both classic and new-style classes.


