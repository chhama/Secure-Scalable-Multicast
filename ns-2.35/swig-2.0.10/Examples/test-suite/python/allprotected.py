# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_allprotected', [dirname(__file__)])
        except ImportError:
            import _allprotected
            return _allprotected
        if fp is not None:
            try:
                _mod = imp.load_module('_allprotected', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _allprotected = swig_import_helper()
    del swig_import_helper
else:
    import _allprotected
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class Klass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Klass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Klass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _allprotected.new_Klass(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _allprotected.Klass_getName(self)
    __swig_destroy__ = _allprotected.delete_Klass
    __del__ = lambda self : None;
Klass_swigregister = _allprotected.Klass_swigregister
Klass_swigregister(Klass)

class PublicBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PublicBase, name)
    __repr__ = _swig_repr
    EnumVal1 = _allprotected.PublicBase_EnumVal1
    EnumVal2 = _allprotected.PublicBase_EnumVal2
    def __init__(self, *args): 
        if self.__class__ == PublicBase:
            _self = None
        else:
            _self = self
        this = _allprotected.new_PublicBase(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _allprotected.delete_PublicBase
    __del__ = lambda self : None;
    def virtualMethod(self): return _allprotected.PublicBase_virtualMethod(self)
    def instanceMethod(self, *args): return _allprotected.PublicBase_instanceMethod(self, *args)
    def instanceOverloaded(self, *args): return _allprotected.PublicBase_instanceOverloaded(self, *args)
    __swig_getmethods__["staticMethod"] = lambda x: _allprotected.PublicBase_staticMethod
    if _newclass:staticMethod = staticmethod(_allprotected.PublicBase_staticMethod)
    __swig_getmethods__["staticOverloaded"] = lambda x: _allprotected.PublicBase_staticOverloaded
    if _newclass:staticOverloaded = staticmethod(_allprotected.PublicBase_staticOverloaded)
    __swig_setmethods__["instanceMemberVariable"] = _allprotected.PublicBase_instanceMemberVariable_set
    __swig_getmethods__["instanceMemberVariable"] = _allprotected.PublicBase_instanceMemberVariable_get
    if _newclass:instanceMemberVariable = _swig_property(_allprotected.PublicBase_instanceMemberVariable_get, _allprotected.PublicBase_instanceMemberVariable_set)
    __swig_setmethods__["staticMemberVariable"] = _allprotected.PublicBase_staticMemberVariable_set
    __swig_getmethods__["staticMemberVariable"] = _allprotected.PublicBase_staticMemberVariable_get
    if _newclass:staticMemberVariable = _swig_property(_allprotected.PublicBase_staticMemberVariable_get, _allprotected.PublicBase_staticMemberVariable_set)
    staticConstMemberVariable = _allprotected.PublicBase_staticConstMemberVariable
    __swig_setmethods__["anEnum"] = _allprotected.PublicBase_anEnum_set
    __swig_getmethods__["anEnum"] = _allprotected.PublicBase_anEnum_get
    if _newclass:anEnum = _swig_property(_allprotected.PublicBase_anEnum_get, _allprotected.PublicBase_anEnum_set)
    __swig_setmethods__["stringMember"] = _allprotected.PublicBase_stringMember_set
    __swig_getmethods__["stringMember"] = _allprotected.PublicBase_stringMember_get
    if _newclass:stringMember = _swig_property(_allprotected.PublicBase_stringMember_get, _allprotected.PublicBase_stringMember_set)
    def __disown__(self):
        self.this.disown()
        _allprotected.disown_PublicBase(self)
        return weakref_proxy(self)
PublicBase_swigregister = _allprotected.PublicBase_swigregister
PublicBase_swigregister(PublicBase)

def PublicBase_staticMethod(*args):
  return _allprotected.PublicBase_staticMethod(*args)
PublicBase_staticMethod = _allprotected.PublicBase_staticMethod

def PublicBase_staticOverloaded(*args):
  return _allprotected.PublicBase_staticOverloaded(*args)
PublicBase_staticOverloaded = _allprotected.PublicBase_staticOverloaded
cvar = _allprotected.cvar

class ProtectedBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProtectedBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProtectedBase, name)
    __repr__ = _swig_repr
    EnumVal1 = _allprotected.ProtectedBase_EnumVal1
    EnumVal2 = _allprotected.ProtectedBase_EnumVal2
    def getName(self): return _allprotected.ProtectedBase_getName(self)
    def __init__(self, *args): 
        if self.__class__ == ProtectedBase:
            _self = None
        else:
            _self = self
        this = _allprotected.new_ProtectedBase(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def virtualMethod(self): return _allprotected.ProtectedBase_virtualMethod(self)
    def instanceMethod(self, *args): return _allprotected.ProtectedBase_instanceMethod(self, *args)
    def instanceOverloaded(self, *args): return _allprotected.ProtectedBase_instanceOverloaded(self, *args)
    __swig_getmethods__["staticMethod"] = lambda x: _allprotected.ProtectedBase_staticMethod
    if _newclass:staticMethod = staticmethod(_allprotected.ProtectedBase_staticMethod)
    __swig_getmethods__["staticOverloaded"] = lambda x: _allprotected.ProtectedBase_staticOverloaded
    if _newclass:staticOverloaded = staticmethod(_allprotected.ProtectedBase_staticOverloaded)
    __swig_setmethods__["instanceMemberVariable"] = _allprotected.ProtectedBase_instanceMemberVariable_set
    __swig_getmethods__["instanceMemberVariable"] = _allprotected.ProtectedBase_instanceMemberVariable_get
    if _newclass:instanceMemberVariable = _swig_property(_allprotected.ProtectedBase_instanceMemberVariable_get, _allprotected.ProtectedBase_instanceMemberVariable_set)
    __swig_setmethods__["staticMemberVariable"] = _allprotected.ProtectedBase_staticMemberVariable_set
    __swig_getmethods__["staticMemberVariable"] = _allprotected.ProtectedBase_staticMemberVariable_get
    if _newclass:staticMemberVariable = _swig_property(_allprotected.ProtectedBase_staticMemberVariable_get, _allprotected.ProtectedBase_staticMemberVariable_set)
    staticConstMemberVariable = _allprotected.ProtectedBase_staticConstMemberVariable
    __swig_setmethods__["anEnum"] = _allprotected.ProtectedBase_anEnum_set
    __swig_getmethods__["anEnum"] = _allprotected.ProtectedBase_anEnum_get
    if _newclass:anEnum = _swig_property(_allprotected.ProtectedBase_anEnum_get, _allprotected.ProtectedBase_anEnum_set)
    __swig_setmethods__["stringMember"] = _allprotected.ProtectedBase_stringMember_set
    __swig_getmethods__["stringMember"] = _allprotected.ProtectedBase_stringMember_get
    if _newclass:stringMember = _swig_property(_allprotected.ProtectedBase_stringMember_get, _allprotected.ProtectedBase_stringMember_set)
    def __disown__(self):
        self.this.disown()
        _allprotected.disown_ProtectedBase(self)
        return weakref_proxy(self)
ProtectedBase_swigregister = _allprotected.ProtectedBase_swigregister
ProtectedBase_swigregister(ProtectedBase)

def ProtectedBase_staticMethod(*args):
  return _allprotected.ProtectedBase_staticMethod(*args)
ProtectedBase_staticMethod = _allprotected.ProtectedBase_staticMethod

def ProtectedBase_staticOverloaded(*args):
  return _allprotected.ProtectedBase_staticOverloaded(*args)
ProtectedBase_staticOverloaded = _allprotected.ProtectedBase_staticOverloaded

# This file is compatible with both classic and new-style classes.


