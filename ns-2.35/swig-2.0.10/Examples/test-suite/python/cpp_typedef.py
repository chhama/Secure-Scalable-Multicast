# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cpp_typedef', [dirname(__file__)])
        except ImportError:
            import _cpp_typedef
            return _cpp_typedef
        if fp is not None:
            try:
                _mod = imp.load_module('_cpp_typedef', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cpp_typedef = swig_import_helper()
    del swig_import_helper
else:
    import _cpp_typedef
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    def bar(self): return _cpp_typedef.Foo_bar(self)
    __swig_getmethods__["sbar"] = lambda x: _cpp_typedef.Foo_sbar
    if _newclass:sbar = staticmethod(_cpp_typedef.Foo_sbar)
    def __init__(self): 
        this = _cpp_typedef.new_Foo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp_typedef.delete_Foo
    __del__ = lambda self : None;
Foo_swigregister = _cpp_typedef.Foo_swigregister
Foo_swigregister(Foo)

def Foo_sbar():
  return _cpp_typedef.Foo_sbar()
Foo_sbar = _cpp_typedef.Foo_sbar

class UnnamedStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnnamedStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnnamedStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["something"] = _cpp_typedef.UnnamedStruct_something_set
    __swig_getmethods__["something"] = _cpp_typedef.UnnamedStruct_something_get
    if _newclass:something = _swig_property(_cpp_typedef.UnnamedStruct_something_get, _cpp_typedef.UnnamedStruct_something_set)
    def m(self): return _cpp_typedef.UnnamedStruct_m(self)
    def __init__(self): 
        this = _cpp_typedef.new_UnnamedStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp_typedef.delete_UnnamedStruct
    __del__ = lambda self : None;
UnnamedStruct_swigregister = _cpp_typedef.UnnamedStruct_swigregister
UnnamedStruct_swigregister(UnnamedStruct)

class TypedefNamedStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypedefNamedStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypedefNamedStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["something"] = _cpp_typedef.TypedefNamedStruct_something_set
    __swig_getmethods__["something"] = _cpp_typedef.TypedefNamedStruct_something_get
    if _newclass:something = _swig_property(_cpp_typedef.TypedefNamedStruct_something_get, _cpp_typedef.TypedefNamedStruct_something_set)
    def m(self): return _cpp_typedef.TypedefNamedStruct_m(self)
    def __init__(self): 
        this = _cpp_typedef.new_TypedefNamedStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp_typedef.delete_TypedefNamedStruct
    __del__ = lambda self : None;
TypedefNamedStruct_swigregister = _cpp_typedef.TypedefNamedStruct_swigregister
TypedefNamedStruct_swigregister(TypedefNamedStruct)

class Test(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Test, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Test, name)
    __repr__ = _swig_repr
    def test1(self, *args): return _cpp_typedef.Test_test1(self, *args)
    def test2(self, *args): return _cpp_typedef.Test_test2(self, *args)
    def test3(self, *args): return _cpp_typedef.Test_test3(self, *args)
    def test4(self, *args): return _cpp_typedef.Test_test4(self, *args)
    def __init__(self): 
        this = _cpp_typedef.new_Test()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp_typedef.delete_Test
    __del__ = lambda self : None;
Test_swigregister = _cpp_typedef.Test_swigregister
Test_swigregister(Test)

# This file is compatible with both classic and new-style classes.


