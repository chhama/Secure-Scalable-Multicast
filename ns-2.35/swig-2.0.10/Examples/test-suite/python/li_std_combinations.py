# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_std_combinations', [dirname(__file__)])
        except ImportError:
            import _li_std_combinations
            return _li_std_combinations
        if fp is not None:
            try:
                _mod = imp.load_module('_li_std_combinations', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_std_combinations = swig_import_helper()
    del swig_import_helper
else:
    import _li_std_combinations
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _li_std_combinations.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _li_std_combinations.SwigPyIterator_value(self)
    def incr(self, n=1): return _li_std_combinations.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _li_std_combinations.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _li_std_combinations.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _li_std_combinations.SwigPyIterator_equal(self, *args)
    def copy(self): return _li_std_combinations.SwigPyIterator_copy(self)
    def next(self): return _li_std_combinations.SwigPyIterator_next(self)
    def __next__(self): return _li_std_combinations.SwigPyIterator___next__(self)
    def previous(self): return _li_std_combinations.SwigPyIterator_previous(self)
    def advance(self, *args): return _li_std_combinations.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _li_std_combinations.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _li_std_combinations.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _li_std_combinations.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _li_std_combinations.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _li_std_combinations.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _li_std_combinations.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _li_std_combinations.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_combinations.VectorInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_combinations.VectorInt___nonzero__(self)
    def __bool__(self): return _li_std_combinations.VectorInt___bool__(self)
    def __len__(self): return _li_std_combinations.VectorInt___len__(self)
    def pop(self): return _li_std_combinations.VectorInt_pop(self)
    def __getslice__(self, *args): return _li_std_combinations.VectorInt___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_combinations.VectorInt___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_combinations.VectorInt___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_combinations.VectorInt___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_combinations.VectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_combinations.VectorInt___setitem__(self, *args)
    def append(self, *args): return _li_std_combinations.VectorInt_append(self, *args)
    def empty(self): return _li_std_combinations.VectorInt_empty(self)
    def size(self): return _li_std_combinations.VectorInt_size(self)
    def clear(self): return _li_std_combinations.VectorInt_clear(self)
    def swap(self, *args): return _li_std_combinations.VectorInt_swap(self, *args)
    def get_allocator(self): return _li_std_combinations.VectorInt_get_allocator(self)
    def begin(self): return _li_std_combinations.VectorInt_begin(self)
    def end(self): return _li_std_combinations.VectorInt_end(self)
    def rbegin(self): return _li_std_combinations.VectorInt_rbegin(self)
    def rend(self): return _li_std_combinations.VectorInt_rend(self)
    def pop_back(self): return _li_std_combinations.VectorInt_pop_back(self)
    def erase(self, *args): return _li_std_combinations.VectorInt_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_combinations.new_VectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_combinations.VectorInt_push_back(self, *args)
    def front(self): return _li_std_combinations.VectorInt_front(self)
    def back(self): return _li_std_combinations.VectorInt_back(self)
    def assign(self, *args): return _li_std_combinations.VectorInt_assign(self, *args)
    def resize(self, *args): return _li_std_combinations.VectorInt_resize(self, *args)
    def insert(self, *args): return _li_std_combinations.VectorInt_insert(self, *args)
    def reserve(self, *args): return _li_std_combinations.VectorInt_reserve(self, *args)
    def capacity(self): return _li_std_combinations.VectorInt_capacity(self)
    __swig_destroy__ = _li_std_combinations.delete_VectorInt
    __del__ = lambda self : None;
VectorInt_swigregister = _li_std_combinations.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_combinations.VectorString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_combinations.VectorString___nonzero__(self)
    def __bool__(self): return _li_std_combinations.VectorString___bool__(self)
    def __len__(self): return _li_std_combinations.VectorString___len__(self)
    def pop(self): return _li_std_combinations.VectorString_pop(self)
    def __getslice__(self, *args): return _li_std_combinations.VectorString___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_combinations.VectorString___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_combinations.VectorString___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_combinations.VectorString___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_combinations.VectorString___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_combinations.VectorString___setitem__(self, *args)
    def append(self, *args): return _li_std_combinations.VectorString_append(self, *args)
    def empty(self): return _li_std_combinations.VectorString_empty(self)
    def size(self): return _li_std_combinations.VectorString_size(self)
    def clear(self): return _li_std_combinations.VectorString_clear(self)
    def swap(self, *args): return _li_std_combinations.VectorString_swap(self, *args)
    def get_allocator(self): return _li_std_combinations.VectorString_get_allocator(self)
    def begin(self): return _li_std_combinations.VectorString_begin(self)
    def end(self): return _li_std_combinations.VectorString_end(self)
    def rbegin(self): return _li_std_combinations.VectorString_rbegin(self)
    def rend(self): return _li_std_combinations.VectorString_rend(self)
    def pop_back(self): return _li_std_combinations.VectorString_pop_back(self)
    def erase(self, *args): return _li_std_combinations.VectorString_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_combinations.new_VectorString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_combinations.VectorString_push_back(self, *args)
    def front(self): return _li_std_combinations.VectorString_front(self)
    def back(self): return _li_std_combinations.VectorString_back(self)
    def assign(self, *args): return _li_std_combinations.VectorString_assign(self, *args)
    def resize(self, *args): return _li_std_combinations.VectorString_resize(self, *args)
    def insert(self, *args): return _li_std_combinations.VectorString_insert(self, *args)
    def reserve(self, *args): return _li_std_combinations.VectorString_reserve(self, *args)
    def capacity(self): return _li_std_combinations.VectorString_capacity(self)
    __swig_destroy__ = _li_std_combinations.delete_VectorString
    __del__ = lambda self : None;
VectorString_swigregister = _li_std_combinations.VectorString_swigregister
VectorString_swigregister(VectorString)

class PairIntString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_combinations.new_PairIntString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_combinations.PairIntString_first_set
    __swig_getmethods__["first"] = _li_std_combinations.PairIntString_first_get
    if _newclass:first = _swig_property(_li_std_combinations.PairIntString_first_get, _li_std_combinations.PairIntString_first_set)
    __swig_setmethods__["second"] = _li_std_combinations.PairIntString_second_set
    __swig_getmethods__["second"] = _li_std_combinations.PairIntString_second_get
    if _newclass:second = _swig_property(_li_std_combinations.PairIntString_second_get, _li_std_combinations.PairIntString_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_combinations.delete_PairIntString
    __del__ = lambda self : None;
PairIntString_swigregister = _li_std_combinations.PairIntString_swigregister
PairIntString_swigregister(PairIntString)

class VectorPairIntString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPairIntString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPairIntString, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_combinations.VectorPairIntString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_combinations.VectorPairIntString___nonzero__(self)
    def __bool__(self): return _li_std_combinations.VectorPairIntString___bool__(self)
    def __len__(self): return _li_std_combinations.VectorPairIntString___len__(self)
    def pop(self): return _li_std_combinations.VectorPairIntString_pop(self)
    def __getslice__(self, *args): return _li_std_combinations.VectorPairIntString___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_combinations.VectorPairIntString___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_combinations.VectorPairIntString___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_combinations.VectorPairIntString___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_combinations.VectorPairIntString___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_combinations.VectorPairIntString___setitem__(self, *args)
    def append(self, *args): return _li_std_combinations.VectorPairIntString_append(self, *args)
    def empty(self): return _li_std_combinations.VectorPairIntString_empty(self)
    def size(self): return _li_std_combinations.VectorPairIntString_size(self)
    def clear(self): return _li_std_combinations.VectorPairIntString_clear(self)
    def swap(self, *args): return _li_std_combinations.VectorPairIntString_swap(self, *args)
    def get_allocator(self): return _li_std_combinations.VectorPairIntString_get_allocator(self)
    def begin(self): return _li_std_combinations.VectorPairIntString_begin(self)
    def end(self): return _li_std_combinations.VectorPairIntString_end(self)
    def rbegin(self): return _li_std_combinations.VectorPairIntString_rbegin(self)
    def rend(self): return _li_std_combinations.VectorPairIntString_rend(self)
    def pop_back(self): return _li_std_combinations.VectorPairIntString_pop_back(self)
    def erase(self, *args): return _li_std_combinations.VectorPairIntString_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_combinations.new_VectorPairIntString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_combinations.VectorPairIntString_push_back(self, *args)
    def front(self): return _li_std_combinations.VectorPairIntString_front(self)
    def back(self): return _li_std_combinations.VectorPairIntString_back(self)
    def assign(self, *args): return _li_std_combinations.VectorPairIntString_assign(self, *args)
    def resize(self, *args): return _li_std_combinations.VectorPairIntString_resize(self, *args)
    def insert(self, *args): return _li_std_combinations.VectorPairIntString_insert(self, *args)
    def reserve(self, *args): return _li_std_combinations.VectorPairIntString_reserve(self, *args)
    def capacity(self): return _li_std_combinations.VectorPairIntString_capacity(self)
    __swig_destroy__ = _li_std_combinations.delete_VectorPairIntString
    __del__ = lambda self : None;
VectorPairIntString_swigregister = _li_std_combinations.VectorPairIntString_swigregister
VectorPairIntString_swigregister(VectorPairIntString)

class PairIntVectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntVectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntVectorString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_combinations.new_PairIntVectorString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_combinations.PairIntVectorString_first_set
    __swig_getmethods__["first"] = _li_std_combinations.PairIntVectorString_first_get
    if _newclass:first = _swig_property(_li_std_combinations.PairIntVectorString_first_get, _li_std_combinations.PairIntVectorString_first_set)
    __swig_setmethods__["second"] = _li_std_combinations.PairIntVectorString_second_set
    __swig_getmethods__["second"] = _li_std_combinations.PairIntVectorString_second_get
    if _newclass:second = _swig_property(_li_std_combinations.PairIntVectorString_second_get, _li_std_combinations.PairIntVectorString_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_combinations.delete_PairIntVectorString
    __del__ = lambda self : None;
PairIntVectorString_swigregister = _li_std_combinations.PairIntVectorString_swigregister
PairIntVectorString_swigregister(PairIntVectorString)

class VectorVectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVectorString, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_combinations.VectorVectorString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_combinations.VectorVectorString___nonzero__(self)
    def __bool__(self): return _li_std_combinations.VectorVectorString___bool__(self)
    def __len__(self): return _li_std_combinations.VectorVectorString___len__(self)
    def pop(self): return _li_std_combinations.VectorVectorString_pop(self)
    def __getslice__(self, *args): return _li_std_combinations.VectorVectorString___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_combinations.VectorVectorString___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_combinations.VectorVectorString___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_combinations.VectorVectorString___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_combinations.VectorVectorString___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_combinations.VectorVectorString___setitem__(self, *args)
    def append(self, *args): return _li_std_combinations.VectorVectorString_append(self, *args)
    def empty(self): return _li_std_combinations.VectorVectorString_empty(self)
    def size(self): return _li_std_combinations.VectorVectorString_size(self)
    def clear(self): return _li_std_combinations.VectorVectorString_clear(self)
    def swap(self, *args): return _li_std_combinations.VectorVectorString_swap(self, *args)
    def get_allocator(self): return _li_std_combinations.VectorVectorString_get_allocator(self)
    def begin(self): return _li_std_combinations.VectorVectorString_begin(self)
    def end(self): return _li_std_combinations.VectorVectorString_end(self)
    def rbegin(self): return _li_std_combinations.VectorVectorString_rbegin(self)
    def rend(self): return _li_std_combinations.VectorVectorString_rend(self)
    def pop_back(self): return _li_std_combinations.VectorVectorString_pop_back(self)
    def erase(self, *args): return _li_std_combinations.VectorVectorString_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_combinations.new_VectorVectorString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_combinations.VectorVectorString_push_back(self, *args)
    def front(self): return _li_std_combinations.VectorVectorString_front(self)
    def back(self): return _li_std_combinations.VectorVectorString_back(self)
    def assign(self, *args): return _li_std_combinations.VectorVectorString_assign(self, *args)
    def resize(self, *args): return _li_std_combinations.VectorVectorString_resize(self, *args)
    def insert(self, *args): return _li_std_combinations.VectorVectorString_insert(self, *args)
    def reserve(self, *args): return _li_std_combinations.VectorVectorString_reserve(self, *args)
    def capacity(self): return _li_std_combinations.VectorVectorString_capacity(self)
    __swig_destroy__ = _li_std_combinations.delete_VectorVectorString
    __del__ = lambda self : None;
VectorVectorString_swigregister = _li_std_combinations.VectorVectorString_swigregister
VectorVectorString_swigregister(VectorVectorString)

class PairIntPairIntString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntPairIntString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntPairIntString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_combinations.new_PairIntPairIntString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_combinations.PairIntPairIntString_first_set
    __swig_getmethods__["first"] = _li_std_combinations.PairIntPairIntString_first_get
    if _newclass:first = _swig_property(_li_std_combinations.PairIntPairIntString_first_get, _li_std_combinations.PairIntPairIntString_first_set)
    __swig_setmethods__["second"] = _li_std_combinations.PairIntPairIntString_second_set
    __swig_getmethods__["second"] = _li_std_combinations.PairIntPairIntString_second_get
    if _newclass:second = _swig_property(_li_std_combinations.PairIntPairIntString_second_get, _li_std_combinations.PairIntPairIntString_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_combinations.delete_PairIntPairIntString
    __del__ = lambda self : None;
PairIntPairIntString_swigregister = _li_std_combinations.PairIntPairIntString_swigregister
PairIntPairIntString_swigregister(PairIntPairIntString)

class PairDoubleString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDoubleString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDoubleString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_combinations.new_PairDoubleString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_combinations.PairDoubleString_first_set
    __swig_getmethods__["first"] = _li_std_combinations.PairDoubleString_first_get
    if _newclass:first = _swig_property(_li_std_combinations.PairDoubleString_first_get, _li_std_combinations.PairDoubleString_first_set)
    __swig_setmethods__["second"] = _li_std_combinations.PairDoubleString_second_set
    __swig_getmethods__["second"] = _li_std_combinations.PairDoubleString_second_get
    if _newclass:second = _swig_property(_li_std_combinations.PairDoubleString_second_get, _li_std_combinations.PairDoubleString_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_combinations.delete_PairDoubleString
    __del__ = lambda self : None;
PairDoubleString_swigregister = _li_std_combinations.PairDoubleString_swigregister
PairDoubleString_swigregister(PairDoubleString)

class VectorPairDoubleString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPairDoubleString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPairDoubleString, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_combinations.VectorPairDoubleString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_combinations.VectorPairDoubleString___nonzero__(self)
    def __bool__(self): return _li_std_combinations.VectorPairDoubleString___bool__(self)
    def __len__(self): return _li_std_combinations.VectorPairDoubleString___len__(self)
    def pop(self): return _li_std_combinations.VectorPairDoubleString_pop(self)
    def __getslice__(self, *args): return _li_std_combinations.VectorPairDoubleString___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_combinations.VectorPairDoubleString___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_combinations.VectorPairDoubleString___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_combinations.VectorPairDoubleString___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_combinations.VectorPairDoubleString___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_combinations.VectorPairDoubleString___setitem__(self, *args)
    def append(self, *args): return _li_std_combinations.VectorPairDoubleString_append(self, *args)
    def empty(self): return _li_std_combinations.VectorPairDoubleString_empty(self)
    def size(self): return _li_std_combinations.VectorPairDoubleString_size(self)
    def clear(self): return _li_std_combinations.VectorPairDoubleString_clear(self)
    def swap(self, *args): return _li_std_combinations.VectorPairDoubleString_swap(self, *args)
    def get_allocator(self): return _li_std_combinations.VectorPairDoubleString_get_allocator(self)
    def begin(self): return _li_std_combinations.VectorPairDoubleString_begin(self)
    def end(self): return _li_std_combinations.VectorPairDoubleString_end(self)
    def rbegin(self): return _li_std_combinations.VectorPairDoubleString_rbegin(self)
    def rend(self): return _li_std_combinations.VectorPairDoubleString_rend(self)
    def pop_back(self): return _li_std_combinations.VectorPairDoubleString_pop_back(self)
    def erase(self, *args): return _li_std_combinations.VectorPairDoubleString_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_combinations.new_VectorPairDoubleString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_combinations.VectorPairDoubleString_push_back(self, *args)
    def front(self): return _li_std_combinations.VectorPairDoubleString_front(self)
    def back(self): return _li_std_combinations.VectorPairDoubleString_back(self)
    def assign(self, *args): return _li_std_combinations.VectorPairDoubleString_assign(self, *args)
    def resize(self, *args): return _li_std_combinations.VectorPairDoubleString_resize(self, *args)
    def insert(self, *args): return _li_std_combinations.VectorPairDoubleString_insert(self, *args)
    def reserve(self, *args): return _li_std_combinations.VectorPairDoubleString_reserve(self, *args)
    def capacity(self): return _li_std_combinations.VectorPairDoubleString_capacity(self)
    __swig_destroy__ = _li_std_combinations.delete_VectorPairDoubleString
    __del__ = lambda self : None;
VectorPairDoubleString_swigregister = _li_std_combinations.VectorPairDoubleString_swigregister
VectorPairDoubleString_swigregister(VectorPairDoubleString)

# This file is compatible with both classic and new-style classes.


