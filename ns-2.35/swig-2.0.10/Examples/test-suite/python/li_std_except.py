# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_std_except', [dirname(__file__)])
        except ImportError:
            import _li_std_except
            return _li_std_except
        if fp is not None:
            try:
                _mod = imp.load_module('_li_std_except', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_std_except = swig_import_helper()
    del swig_import_helper
else:
    import _li_std_except
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class E1(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, E1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, E1, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _li_std_except.new_E1()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_except.delete_E1
    __del__ = lambda self : None;
E1_swigregister = _li_std_except.E1_swigregister
E1_swigregister(E1)

class E2(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, E2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, E2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _li_std_except.new_E2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_except.delete_E2
    __del__ = lambda self : None;
E2_swigregister = _li_std_except.E2_swigregister
E2_swigregister(E2)

class Test(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Test, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Test, name)
    __repr__ = _swig_repr
    def foo1(self): return _li_std_except.Test_foo1(self)
    def foo2(self): return _li_std_except.Test_foo2(self)
    def foo3(self): return _li_std_except.Test_foo3(self)
    def foo4(self): return _li_std_except.Test_foo4(self)
    def throw_bad_exception(self): return _li_std_except.Test_throw_bad_exception(self)
    def throw_domain_error(self): return _li_std_except.Test_throw_domain_error(self)
    def throw_exception(self): return _li_std_except.Test_throw_exception(self)
    def throw_invalid_argument(self): return _li_std_except.Test_throw_invalid_argument(self)
    def throw_length_error(self): return _li_std_except.Test_throw_length_error(self)
    def throw_logic_error(self): return _li_std_except.Test_throw_logic_error(self)
    def throw_out_of_range(self): return _li_std_except.Test_throw_out_of_range(self)
    def throw_overflow_error(self): return _li_std_except.Test_throw_overflow_error(self)
    def throw_range_error(self): return _li_std_except.Test_throw_range_error(self)
    def throw_runtime_error(self): return _li_std_except.Test_throw_runtime_error(self)
    def throw_underflow_error(self): return _li_std_except.Test_throw_underflow_error(self)
    def __init__(self): 
        this = _li_std_except.new_Test()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_except.delete_Test
    __del__ = lambda self : None;
Test_swigregister = _li_std_except.Test_swigregister
Test_swigregister(Test)

# This file is compatible with both classic and new-style classes.


