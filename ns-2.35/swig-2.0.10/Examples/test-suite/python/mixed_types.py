# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mixed_types', [dirname(__file__)])
        except ImportError:
            import _mixed_types
            return _mixed_types
        if fp is not None:
            try:
                _mod = imp.load_module('_mixed_types', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mixed_types = swig_import_helper()
    del swig_import_helper
else:
    import _mixed_types
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _mixed_types.new_A()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mixed_types.delete_A
    __del__ = lambda self : None;
A_swigregister = _mixed_types.A_swigregister
A_swigregister(A)


def ref_pointer(*args):
  return _mixed_types.ref_pointer(*args)
ref_pointer = _mixed_types.ref_pointer

def ref_pointer_1(*args):
  return _mixed_types.ref_pointer_1(*args)
ref_pointer_1 = _mixed_types.ref_pointer_1

def pointer_1(*args):
  return _mixed_types.pointer_1(*args)
pointer_1 = _mixed_types.pointer_1

def ref_const(*args):
  return _mixed_types.ref_const(*args)
ref_const = _mixed_types.ref_const
hi = _mixed_types.hi
hello = _mixed_types.hello

def sint(*args):
  return _mixed_types.sint(*args)
sint = _mixed_types.sint

def ref_int(*args):
  return _mixed_types.ref_int(*args)
ref_int = _mixed_types.ref_int

def senum(*args):
  return _mixed_types.senum(*args)
senum = _mixed_types.senum

def ref_enum(*args):
  return _mixed_types.ref_enum(*args)
ref_enum = _mixed_types.ref_enum

def rptr_const(*args):
  return _mixed_types.rptr_const(*args)
rptr_const = _mixed_types.rptr_const

def rptr_const2(*args):
  return _mixed_types.rptr_const2(*args)
rptr_const2 = _mixed_types.rptr_const2

def rptr_void(*args):
  return _mixed_types.rptr_void(*args)
rptr_void = _mixed_types.rptr_void

def cref_a(*args):
  return _mixed_types.cref_a(*args)
cref_a = _mixed_types.cref_a

def ref_a(*args):
  return _mixed_types.ref_a(*args)
ref_a = _mixed_types.ref_a

def test_a(*args):
  return _mixed_types.test_a(*args)
test_a = _mixed_types.test_a

def test_b(*args):
  return _mixed_types.test_b(*args)
test_b = _mixed_types.test_b

def test_c(*args):
  return _mixed_types.test_c(*args)
test_c = _mixed_types.test_c

def test_d(*args):
  return _mixed_types.test_d(*args)
test_d = _mixed_types.test_d

def test_e(*args):
  return _mixed_types.test_e(*args)
test_e = _mixed_types.test_e

def test_f(*args):
  return _mixed_types.test_f(*args)
test_f = _mixed_types.test_f

def test_g(*args):
  return _mixed_types.test_g(*args)
test_g = _mixed_types.test_g
class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    def foo(self, *args): return _mixed_types.Foo_foo(self, *args)
    def foon(self, *args): return _mixed_types.Foo_foon(self, *args)
    def __init__(self): 
        this = _mixed_types.new_Foo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mixed_types.delete_Foo
    __del__ = lambda self : None;
Foo_swigregister = _mixed_types.Foo_swigregister
Foo_swigregister(Foo)

ARRAY_LEN_X = _mixed_types.ARRAY_LEN_X
ARRAY_LEN_Y = _mixed_types.ARRAY_LEN_Y
One = _mixed_types.One
Two = _mixed_types.Two
Three = _mixed_types.Three
Four = _mixed_types.Four
Five = _mixed_types.Five
class SimpleStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["double_field"] = _mixed_types.SimpleStruct_double_field_set
    __swig_getmethods__["double_field"] = _mixed_types.SimpleStruct_double_field_get
    if _newclass:double_field = _swig_property(_mixed_types.SimpleStruct_double_field_get, _mixed_types.SimpleStruct_double_field_set)
    def __init__(self): 
        this = _mixed_types.new_SimpleStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mixed_types.delete_SimpleStruct
    __del__ = lambda self : None;
SimpleStruct_swigregister = _mixed_types.SimpleStruct_swigregister
SimpleStruct_swigregister(SimpleStruct)


def fn_taking_arrays(*args):
  return _mixed_types.fn_taking_arrays(*args)
fn_taking_arrays = _mixed_types.fn_taking_arrays

def get_2d_array(*args):
  return _mixed_types.get_2d_array(*args)
get_2d_array = _mixed_types.get_2d_array
# This file is compatible with both classic and new-style classes.

cvar = _mixed_types.cvar
array_const_i = cvar.array_const_i

