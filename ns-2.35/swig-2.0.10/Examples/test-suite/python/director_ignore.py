# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_director_ignore', [dirname(__file__)])
        except ImportError:
            import _director_ignore
            return _director_ignore
        if fp is not None:
            try:
                _mod = imp.load_module('_director_ignore', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _director_ignore = swig_import_helper()
    del swig_import_helper
else:
    import _director_ignore
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class DIgnores(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIgnores, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIgnores, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _director_ignore.delete_DIgnores
    __del__ = lambda self : None;
    def OverloadedMethod(self, *args): return _director_ignore.DIgnores_OverloadedMethod(self, *args)
    def Triple(self, *args): return _director_ignore.DIgnores_Triple(self, *args)
    def TempMethod(self): return _director_ignore.DIgnores_TempMethod(self)
    def OverloadedProtectedMethod(self): return _director_ignore.DIgnores_OverloadedProtectedMethod(self)
    def __init__(self): 
        if self.__class__ == DIgnores:
            _self = None
        else:
            _self = self
        this = _director_ignore.new_DIgnores(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _director_ignore.disown_DIgnores(self)
        return weakref_proxy(self)
DIgnores_swigregister = _director_ignore.DIgnores_swigregister
DIgnores_swigregister(DIgnores)

class DAbstractIgnores(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DAbstractIgnores, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DAbstractIgnores, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _director_ignore.delete_DAbstractIgnores
    __del__ = lambda self : None;
    def OverloadedMethod(self, *args): return _director_ignore.DAbstractIgnores_OverloadedMethod(self, *args)
    def Quadruple(self, *args): return _director_ignore.DAbstractIgnores_Quadruple(self, *args)
    def OverloadedProtectedMethod(self): return _director_ignore.DAbstractIgnores_OverloadedProtectedMethod(self)
    def __init__(self): 
        if self.__class__ == DAbstractIgnores:
            _self = None
        else:
            _self = self
        this = _director_ignore.new_DAbstractIgnores(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _director_ignore.disown_DAbstractIgnores(self)
        return weakref_proxy(self)
DAbstractIgnores_swigregister = _director_ignore.DAbstractIgnores_swigregister
DAbstractIgnores_swigregister(DAbstractIgnores)

class DTemplateAbstractIgnoresInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DTemplateAbstractIgnoresInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DTemplateAbstractIgnoresInt, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _director_ignore.delete_DTemplateAbstractIgnoresInt
    __del__ = lambda self : None;
    def OverloadedMethod(self, *args): return _director_ignore.DTemplateAbstractIgnoresInt_OverloadedMethod(self, *args)
    def Quadruple(self, *args): return _director_ignore.DTemplateAbstractIgnoresInt_Quadruple(self, *args)
    def OverloadedProtectedMethod(self): return _director_ignore.DTemplateAbstractIgnoresInt_OverloadedProtectedMethod(self)
    def __init__(self): 
        if self.__class__ == DTemplateAbstractIgnoresInt:
            _self = None
        else:
            _self = self
        this = _director_ignore.new_DTemplateAbstractIgnoresInt(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _director_ignore.disown_DTemplateAbstractIgnoresInt(self)
        return weakref_proxy(self)
DTemplateAbstractIgnoresInt_swigregister = _director_ignore.DTemplateAbstractIgnoresInt_swigregister
DTemplateAbstractIgnoresInt_swigregister(DTemplateAbstractIgnoresInt)

class DIgnoreConstructor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIgnoreConstructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIgnoreConstructor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _director_ignore.delete_DIgnoreConstructor
    __del__ = lambda self : None;
    def __init__(self, *args): 
        if self.__class__ == DIgnoreConstructor:
            _self = None
        else:
            _self = self
        this = _director_ignore.new_DIgnoreConstructor(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _director_ignore.disown_DIgnoreConstructor(self)
        return weakref_proxy(self)
DIgnoreConstructor_swigregister = _director_ignore.DIgnoreConstructor_swigregister
DIgnoreConstructor_swigregister(DIgnoreConstructor)

class DIgnoreOnlyConstructor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIgnoreOnlyConstructor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIgnoreOnlyConstructor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _director_ignore.delete_DIgnoreOnlyConstructor
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _director_ignore.disown_DIgnoreOnlyConstructor(self)
        return weakref_proxy(self)
DIgnoreOnlyConstructor_swigregister = _director_ignore.DIgnoreOnlyConstructor_swigregister
DIgnoreOnlyConstructor_swigregister(DIgnoreOnlyConstructor)

# This file is compatible with both classic and new-style classes.


