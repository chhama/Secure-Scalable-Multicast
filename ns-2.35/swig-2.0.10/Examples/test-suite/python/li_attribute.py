# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_attribute', [dirname(__file__)])
        except ImportError:
            import _li_attribute
            return _li_attribute
        if fp is not None:
            try:
                _mod = imp.load_module('_li_attribute', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_attribute = swig_import_helper()
    del swig_import_helper
else:
    import _li_attribute
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_attribute.new_A(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["a"] = _li_attribute.A_a_set
    __swig_getmethods__["a"] = _li_attribute.A_a_get
    if _newclass:a = _swig_property(_li_attribute.A_a_get, _li_attribute.A_a_set)
    __swig_setmethods__["b"] = _li_attribute.A_b_set
    __swig_getmethods__["b"] = _li_attribute.A_b_get
    if _newclass:b = _swig_property(_li_attribute.A_b_get, _li_attribute.A_b_set)
    __swig_getmethods__["c"] = _li_attribute.A_c_get
    if _newclass:c = _swig_property(_li_attribute.A_c_get)
    __swig_setmethods__["d"] = _li_attribute.A_d_set
    __swig_getmethods__["d"] = _li_attribute.A_d_get
    if _newclass:d = _swig_property(_li_attribute.A_d_get, _li_attribute.A_d_set)
    __swig_destroy__ = _li_attribute.delete_A
    __del__ = lambda self : None;
A_swigregister = _li_attribute.A_swigregister
A_swigregister(A)

class B(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_attribute.new_B(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["a"] = _li_attribute.B_a_set
    __swig_getmethods__["a"] = _li_attribute.B_a_get
    if _newclass:a = _swig_property(_li_attribute.B_a_get, _li_attribute.B_a_set)
    __swig_destroy__ = _li_attribute.delete_B
    __del__ = lambda self : None;
B_swigregister = _li_attribute.B_swigregister
B_swigregister(B)

class Param_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Param_i, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_attribute.new_Param_i(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["value"] = _li_attribute.Param_i_value_set
    __swig_getmethods__["value"] = _li_attribute.Param_i_value_get
    if _newclass:value = _swig_property(_li_attribute.Param_i_value_get, _li_attribute.Param_i_value_set)
    __swig_destroy__ = _li_attribute.delete_Param_i
    __del__ = lambda self : None;
Param_i_swigregister = _li_attribute.Param_i_swigregister
Param_i_swigregister(Param_i)

class MyFoo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyFoo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MyFoo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _li_attribute.new_MyFoo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["x"] = _li_attribute.MyFoo_x_set
    __swig_getmethods__["x"] = _li_attribute.MyFoo_x_get
    if _newclass:x = _swig_property(_li_attribute.MyFoo_x_get, _li_attribute.MyFoo_x_set)
    __swig_destroy__ = _li_attribute.delete_MyFoo
    __del__ = lambda self : None;
MyFoo_swigregister = _li_attribute.MyFoo_swigregister
MyFoo_swigregister(MyFoo)

class MyClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MyClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Foo"] = _li_attribute.MyClass_Foo_set
    __swig_getmethods__["Foo"] = _li_attribute.MyClass_Foo_get
    if _newclass:Foo = _swig_property(_li_attribute.MyClass_Foo_get, _li_attribute.MyClass_Foo_set)
    def __init__(self): 
        this = _li_attribute.new_MyClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_attribute.delete_MyClass
    __del__ = lambda self : None;
MyClass_swigregister = _li_attribute.MyClass_swigregister
MyClass_swigregister(MyClass)

class MyClassVal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyClassVal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MyClassVal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ReadWriteFoo"] = _li_attribute.MyClassVal_ReadWriteFoo_set
    __swig_getmethods__["ReadWriteFoo"] = _li_attribute.MyClassVal_ReadWriteFoo_get
    if _newclass:ReadWriteFoo = _swig_property(_li_attribute.MyClassVal_ReadWriteFoo_get, _li_attribute.MyClassVal_ReadWriteFoo_set)
    __swig_getmethods__["ReadOnlyFoo"] = _li_attribute.MyClassVal_ReadOnlyFoo_get
    if _newclass:ReadOnlyFoo = _swig_property(_li_attribute.MyClassVal_ReadOnlyFoo_get)
    def __init__(self): 
        this = _li_attribute.new_MyClassVal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_attribute.delete_MyClassVal
    __del__ = lambda self : None;
MyClassVal_swigregister = _li_attribute.MyClassVal_swigregister
MyClassVal_swigregister(MyClassVal)

class MyStringyClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyStringyClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MyStringyClass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_attribute.new_MyStringyClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["ReadWriteString"] = _li_attribute.MyStringyClass_ReadWriteString_set
    __swig_getmethods__["ReadWriteString"] = _li_attribute.MyStringyClass_ReadWriteString_get
    if _newclass:ReadWriteString = _swig_property(_li_attribute.MyStringyClass_ReadWriteString_get, _li_attribute.MyStringyClass_ReadWriteString_set)
    __swig_getmethods__["ReadOnlyString"] = _li_attribute.MyStringyClass_ReadOnlyString_get
    if _newclass:ReadOnlyString = _swig_property(_li_attribute.MyStringyClass_ReadOnlyString_get)
    __swig_destroy__ = _li_attribute.delete_MyStringyClass
    __del__ = lambda self : None;
MyStringyClass_swigregister = _li_attribute.MyStringyClass_swigregister
MyStringyClass_swigregister(MyStringyClass)

# This file is compatible with both classic and new-style classes.


