# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_preproc_line_file', [dirname(__file__)])
        except ImportError:
            import _preproc_line_file
            return _preproc_line_file
        if fp is not None:
            try:
                _mod = imp.load_module('_preproc_line_file', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _preproc_line_file = swig_import_helper()
    del swig_import_helper
else:
    import _preproc_line_file
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


MYLINE = _preproc_line_file.MYLINE
MYLINE_ADJUSTED = _preproc_line_file.MYLINE_ADJUSTED
MYFILE = _preproc_line_file.MYFILE
MYFILE_ADJUSTED = _preproc_line_file.MYFILE_ADJUSTED
MY_STRINGNUM_A = _preproc_line_file.MY_STRINGNUM_A
MY_STRINGNUM_B = _preproc_line_file.MY_STRINGNUM_B
MYLINE2 = _preproc_line_file.MYLINE2
class SillyStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SillyStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SillyStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _preproc_line_file.SillyStruct_num_set
    __swig_getmethods__["num"] = _preproc_line_file.SillyStruct_num_get
    if _newclass:num = _swig_property(_preproc_line_file.SillyStruct_num_get, _preproc_line_file.SillyStruct_num_set)
    def __init__(self): 
        this = _preproc_line_file.new_SillyStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _preproc_line_file.delete_SillyStruct
    __del__ = lambda self : None;
SillyStruct_swigregister = _preproc_line_file.SillyStruct_swigregister
SillyStruct_swigregister(SillyStruct)
cvar = _preproc_line_file.cvar
thing27 = cvar.thing27
thing28 = cvar.thing28

class SillyMacroClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SillyMacroClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SillyMacroClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _preproc_line_file.SillyMacroClass_num_set
    __swig_getmethods__["num"] = _preproc_line_file.SillyMacroClass_num_get
    if _newclass:num = _swig_property(_preproc_line_file.SillyMacroClass_num_get, _preproc_line_file.SillyMacroClass_num_set)
    def __init__(self): 
        this = _preproc_line_file.new_SillyMacroClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _preproc_line_file.delete_SillyMacroClass
    __del__ = lambda self : None;
SillyMacroClass_swigregister = _preproc_line_file.SillyMacroClass_swigregister
SillyMacroClass_swigregister(SillyMacroClass)

class SillyMultipleMacroStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SillyMultipleMacroStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SillyMultipleMacroStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _preproc_line_file.SillyMultipleMacroStruct_num_set
    __swig_getmethods__["num"] = _preproc_line_file.SillyMultipleMacroStruct_num_get
    if _newclass:num = _swig_property(_preproc_line_file.SillyMultipleMacroStruct_num_get, _preproc_line_file.SillyMultipleMacroStruct_num_set)
    def __init__(self): 
        this = _preproc_line_file.new_SillyMultipleMacroStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _preproc_line_file.delete_SillyMultipleMacroStruct
    __del__ = lambda self : None;
SillyMultipleMacroStruct_swigregister = _preproc_line_file.SillyMultipleMacroStruct_swigregister
SillyMultipleMacroStruct_swigregister(SillyMultipleMacroStruct)

INLINE_FILE = _preproc_line_file.INLINE_FILE
INLINE_LINE = _preproc_line_file.INLINE_LINE
class Slash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Slash, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _preproc_line_file.Slash_num_set
    __swig_getmethods__["num"] = _preproc_line_file.Slash_num_get
    if _newclass:num = _swig_property(_preproc_line_file.Slash_num_get, _preproc_line_file.Slash_num_set)
    def __init__(self): 
        this = _preproc_line_file.new_Slash()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _preproc_line_file.delete_Slash
    __del__ = lambda self : None;
Slash_swigregister = _preproc_line_file.Slash_swigregister
Slash_swigregister(Slash)

# This file is compatible with both classic and new-style classes.


