# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_default_constructor', [dirname(__file__)])
        except ImportError:
            import _default_constructor
            return _default_constructor
        if fp is not None:
            try:
                _mod = imp.load_module('_default_constructor', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _default_constructor = swig_import_helper()
    del swig_import_helper
else:
    import _default_constructor
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _default_constructor.new_A()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_constructor.delete_A
    __del__ = lambda self : None;
A_swigregister = _default_constructor.A_swigregister
A_swigregister(A)

class AA(A):
    __swig_setmethods__ = {}
    for _s in [A]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AA, name, value)
    __swig_getmethods__ = {}
    for _s in [A]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AA, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _default_constructor.new_AA()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_constructor.delete_AA
    __del__ = lambda self : None;
AA_swigregister = _default_constructor.AA_swigregister
AA_swigregister(AA)

class B(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _default_constructor.new_B(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_constructor.delete_B
    __del__ = lambda self : None;
B_swigregister = _default_constructor.B_swigregister
B_swigregister(B)

class BB(B):
    __swig_setmethods__ = {}
    for _s in [B]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BB, name, value)
    __swig_getmethods__ = {}
    for _s in [B]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BB, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _default_constructor.delete_BB
    __del__ = lambda self : None;
BB_swigregister = _default_constructor.BB_swigregister
BB_swigregister(BB)

class C(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, C, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, C, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _default_constructor.delete_C
    __del__ = lambda self : None;
C_swigregister = _default_constructor.C_swigregister
C_swigregister(C)

class CC(C):
    __swig_setmethods__ = {}
    for _s in [C]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CC, name, value)
    __swig_getmethods__ = {}
    for _s in [C]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _default_constructor.new_CC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_constructor.delete_CC
    __del__ = lambda self : None;
CC_swigregister = _default_constructor.CC_swigregister
CC_swigregister(CC)

class D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, D, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def foo(self): return _default_constructor.D_foo(self)
    __swig_destroy__ = _default_constructor.delete_D
    __del__ = lambda self : None;
D_swigregister = _default_constructor.D_swigregister
D_swigregister(D)

class DD(D):
    __swig_setmethods__ = {}
    for _s in [D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DD, name, value)
    __swig_getmethods__ = {}
    for _s in [D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DD, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _default_constructor.delete_DD
    __del__ = lambda self : None;
DD_swigregister = _default_constructor.DD_swigregister
DD_swigregister(DD)

class AD(A,D):
    __swig_setmethods__ = {}
    for _s in [A,D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AD, name, value)
    __swig_getmethods__ = {}
    for _s in [A,D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AD, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _default_constructor.delete_AD
    __del__ = lambda self : None;
AD_swigregister = _default_constructor.AD_swigregister
AD_swigregister(AD)

class E(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, E, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, E, name)
    __repr__ = _swig_repr
    def __init__(self, x=0, y=0): 
        this = _default_constructor.new_E(x, y)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_constructor.delete_E
    __del__ = lambda self : None;
E_swigregister = _default_constructor.E_swigregister
E_swigregister(E)

class EE(E):
    __swig_setmethods__ = {}
    for _s in [E]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EE, name, value)
    __swig_getmethods__ = {}
    for _s in [E]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EE, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _default_constructor.new_EE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_constructor.delete_EE
    __del__ = lambda self : None;
EE_swigregister = _default_constructor.EE_swigregister
EE_swigregister(EE)

class EB(E,B):
    __swig_setmethods__ = {}
    for _s in [E,B]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EB, name, value)
    __swig_getmethods__ = {}
    for _s in [E,B]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EB, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _default_constructor.delete_EB
    __del__ = lambda self : None;
EB_swigregister = _default_constructor.EB_swigregister
EB_swigregister(EB)

class F(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, F, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, F, name)
    __repr__ = _swig_repr
    def foo(self, *args): return _default_constructor.F_foo(self, *args)
    def destroy(self): return _default_constructor.F_destroy(self)
    def __init__(self): 
        this = _default_constructor.new_F()
        try: self.this.append(this)
        except: self.this = this
F_swigregister = _default_constructor.F_swigregister
F_swigregister(F)

def bar(*args):
  return _default_constructor.bar(*args)
bar = _default_constructor.bar

class FFF(F):
    __swig_setmethods__ = {}
    for _s in [F]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFF, name, value)
    __swig_getmethods__ = {}
    for _s in [F]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FFF, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _default_constructor.new_FFF()
        try: self.this.append(this)
        except: self.this = this
FFF_swigregister = _default_constructor.FFF_swigregister
FFF_swigregister(FFF)

class G(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, G, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, G, name)
    __repr__ = _swig_repr
    __swig_getmethods__["destroy"] = lambda x: _default_constructor.G_destroy
    if _newclass:destroy = staticmethod(_default_constructor.G_destroy)
    def __init__(self): 
        this = _default_constructor.new_G()
        try: self.this.append(this)
        except: self.this = this
G_swigregister = _default_constructor.G_swigregister
G_swigregister(G)

def G_destroy(*args):
  return _default_constructor.G_destroy(*args)
G_destroy = _default_constructor.G_destroy

class GG(G):
    __swig_setmethods__ = {}
    for _s in [G]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GG, name, value)
    __swig_getmethods__ = {}
    for _s in [G]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GG, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _default_constructor.new_GG()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_constructor.delete_GG
    __del__ = lambda self : None;
GG_swigregister = _default_constructor.GG_swigregister
GG_swigregister(GG)

class HH(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HH, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _default_constructor.new_HH(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_constructor.delete_HH
    __del__ = lambda self : None;
HH_swigregister = _default_constructor.HH_swigregister
HH_swigregister(HH)

class OSRSpatialReferenceShadow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OSRSpatialReferenceShadow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OSRSpatialReferenceShadow, name)
    __repr__ = _swig_repr
    def __init__(self, wkt=""): 
        this = _default_constructor.new_OSRSpatialReferenceShadow(wkt)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_constructor.delete_OSRSpatialReferenceShadow
    __del__ = lambda self : None;
OSRSpatialReferenceShadow_swigregister = _default_constructor.OSRSpatialReferenceShadow_swigregister
OSRSpatialReferenceShadow_swigregister(OSRSpatialReferenceShadow)

# This file is compatible with both classic and new-style classes.


