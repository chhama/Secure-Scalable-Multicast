# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_std_vector_extra', [dirname(__file__)])
        except ImportError:
            import _li_std_vector_extra
            return _li_std_vector_extra
        if fp is not None:
            try:
                _mod = imp.load_module('_li_std_vector_extra', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_std_vector_extra = swig_import_helper()
    del swig_import_helper
else:
    import _li_std_vector_extra
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _li_std_vector_extra.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _li_std_vector_extra.SwigPyIterator_value(self)
    def incr(self, n=1): return _li_std_vector_extra.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _li_std_vector_extra.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _li_std_vector_extra.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _li_std_vector_extra.SwigPyIterator_equal(self, *args)
    def copy(self): return _li_std_vector_extra.SwigPyIterator_copy(self)
    def next(self): return _li_std_vector_extra.SwigPyIterator_next(self)
    def __next__(self): return _li_std_vector_extra.SwigPyIterator___next__(self)
    def previous(self): return _li_std_vector_extra.SwigPyIterator_previous(self)
    def advance(self, *args): return _li_std_vector_extra.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _li_std_vector_extra.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _li_std_vector_extra.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _li_std_vector_extra.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _li_std_vector_extra.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _li_std_vector_extra.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _li_std_vector_extra.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _li_std_vector_extra.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector_extra.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector_extra.IntVector___nonzero__(self)
    def __bool__(self): return _li_std_vector_extra.IntVector___bool__(self)
    def __len__(self): return _li_std_vector_extra.IntVector___len__(self)
    def pop(self): return _li_std_vector_extra.IntVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector_extra.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector_extra.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector_extra.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector_extra.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector_extra.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector_extra.IntVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector_extra.IntVector_append(self, *args)
    def empty(self): return _li_std_vector_extra.IntVector_empty(self)
    def size(self): return _li_std_vector_extra.IntVector_size(self)
    def clear(self): return _li_std_vector_extra.IntVector_clear(self)
    def swap(self, *args): return _li_std_vector_extra.IntVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector_extra.IntVector_get_allocator(self)
    def begin(self): return _li_std_vector_extra.IntVector_begin(self)
    def end(self): return _li_std_vector_extra.IntVector_end(self)
    def rbegin(self): return _li_std_vector_extra.IntVector_rbegin(self)
    def rend(self): return _li_std_vector_extra.IntVector_rend(self)
    def pop_back(self): return _li_std_vector_extra.IntVector_pop_back(self)
    def erase(self, *args): return _li_std_vector_extra.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector_extra.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector_extra.IntVector_push_back(self, *args)
    def front(self): return _li_std_vector_extra.IntVector_front(self)
    def back(self): return _li_std_vector_extra.IntVector_back(self)
    def assign(self, *args): return _li_std_vector_extra.IntVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector_extra.IntVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector_extra.IntVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector_extra.IntVector_reserve(self, *args)
    def capacity(self): return _li_std_vector_extra.IntVector_capacity(self)
    __swig_destroy__ = _li_std_vector_extra.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _li_std_vector_extra.IntVector_swigregister
IntVector_swigregister(IntVector)

class BoolVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector_extra.BoolVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector_extra.BoolVector___nonzero__(self)
    def __bool__(self): return _li_std_vector_extra.BoolVector___bool__(self)
    def __len__(self): return _li_std_vector_extra.BoolVector___len__(self)
    def pop(self): return _li_std_vector_extra.BoolVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector_extra.BoolVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector_extra.BoolVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector_extra.BoolVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector_extra.BoolVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector_extra.BoolVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector_extra.BoolVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector_extra.BoolVector_append(self, *args)
    def empty(self): return _li_std_vector_extra.BoolVector_empty(self)
    def size(self): return _li_std_vector_extra.BoolVector_size(self)
    def clear(self): return _li_std_vector_extra.BoolVector_clear(self)
    def swap(self, *args): return _li_std_vector_extra.BoolVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector_extra.BoolVector_get_allocator(self)
    def begin(self): return _li_std_vector_extra.BoolVector_begin(self)
    def end(self): return _li_std_vector_extra.BoolVector_end(self)
    def rbegin(self): return _li_std_vector_extra.BoolVector_rbegin(self)
    def rend(self): return _li_std_vector_extra.BoolVector_rend(self)
    def pop_back(self): return _li_std_vector_extra.BoolVector_pop_back(self)
    def erase(self, *args): return _li_std_vector_extra.BoolVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector_extra.new_BoolVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector_extra.BoolVector_push_back(self, *args)
    def front(self): return _li_std_vector_extra.BoolVector_front(self)
    def back(self): return _li_std_vector_extra.BoolVector_back(self)
    def assign(self, *args): return _li_std_vector_extra.BoolVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector_extra.BoolVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector_extra.BoolVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector_extra.BoolVector_reserve(self, *args)
    def capacity(self): return _li_std_vector_extra.BoolVector_capacity(self)
    __swig_destroy__ = _li_std_vector_extra.delete_BoolVector
    __del__ = lambda self : None;
BoolVector_swigregister = _li_std_vector_extra.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector_extra.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector_extra.DoubleVector___nonzero__(self)
    def __bool__(self): return _li_std_vector_extra.DoubleVector___bool__(self)
    def __len__(self): return _li_std_vector_extra.DoubleVector___len__(self)
    def pop(self): return _li_std_vector_extra.DoubleVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector_extra.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector_extra.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector_extra.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector_extra.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector_extra.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector_extra.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector_extra.DoubleVector_append(self, *args)
    def empty(self): return _li_std_vector_extra.DoubleVector_empty(self)
    def size(self): return _li_std_vector_extra.DoubleVector_size(self)
    def clear(self): return _li_std_vector_extra.DoubleVector_clear(self)
    def swap(self, *args): return _li_std_vector_extra.DoubleVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector_extra.DoubleVector_get_allocator(self)
    def begin(self): return _li_std_vector_extra.DoubleVector_begin(self)
    def end(self): return _li_std_vector_extra.DoubleVector_end(self)
    def rbegin(self): return _li_std_vector_extra.DoubleVector_rbegin(self)
    def rend(self): return _li_std_vector_extra.DoubleVector_rend(self)
    def pop_back(self): return _li_std_vector_extra.DoubleVector_pop_back(self)
    def erase(self, *args): return _li_std_vector_extra.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector_extra.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector_extra.DoubleVector_push_back(self, *args)
    def front(self): return _li_std_vector_extra.DoubleVector_front(self)
    def back(self): return _li_std_vector_extra.DoubleVector_back(self)
    def assign(self, *args): return _li_std_vector_extra.DoubleVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector_extra.DoubleVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector_extra.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector_extra.DoubleVector_reserve(self, *args)
    def capacity(self): return _li_std_vector_extra.DoubleVector_capacity(self)
    __swig_destroy__ = _li_std_vector_extra.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _li_std_vector_extra.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class sizeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sizeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sizeVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector_extra.sizeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector_extra.sizeVector___nonzero__(self)
    def __bool__(self): return _li_std_vector_extra.sizeVector___bool__(self)
    def __len__(self): return _li_std_vector_extra.sizeVector___len__(self)
    def pop(self): return _li_std_vector_extra.sizeVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector_extra.sizeVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector_extra.sizeVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector_extra.sizeVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector_extra.sizeVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector_extra.sizeVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector_extra.sizeVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector_extra.sizeVector_append(self, *args)
    def empty(self): return _li_std_vector_extra.sizeVector_empty(self)
    def size(self): return _li_std_vector_extra.sizeVector_size(self)
    def clear(self): return _li_std_vector_extra.sizeVector_clear(self)
    def swap(self, *args): return _li_std_vector_extra.sizeVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector_extra.sizeVector_get_allocator(self)
    def begin(self): return _li_std_vector_extra.sizeVector_begin(self)
    def end(self): return _li_std_vector_extra.sizeVector_end(self)
    def rbegin(self): return _li_std_vector_extra.sizeVector_rbegin(self)
    def rend(self): return _li_std_vector_extra.sizeVector_rend(self)
    def pop_back(self): return _li_std_vector_extra.sizeVector_pop_back(self)
    def erase(self, *args): return _li_std_vector_extra.sizeVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector_extra.new_sizeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector_extra.sizeVector_push_back(self, *args)
    def front(self): return _li_std_vector_extra.sizeVector_front(self)
    def back(self): return _li_std_vector_extra.sizeVector_back(self)
    def assign(self, *args): return _li_std_vector_extra.sizeVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector_extra.sizeVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector_extra.sizeVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector_extra.sizeVector_reserve(self, *args)
    def capacity(self): return _li_std_vector_extra.sizeVector_capacity(self)
    __swig_destroy__ = _li_std_vector_extra.delete_sizeVector
    __del__ = lambda self : None;
sizeVector_swigregister = _li_std_vector_extra.sizeVector_swigregister
sizeVector_swigregister(sizeVector)

class PIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PIntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector_extra.PIntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector_extra.PIntVector___nonzero__(self)
    def __bool__(self): return _li_std_vector_extra.PIntVector___bool__(self)
    def __len__(self): return _li_std_vector_extra.PIntVector___len__(self)
    def pop(self): return _li_std_vector_extra.PIntVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector_extra.PIntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector_extra.PIntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector_extra.PIntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector_extra.PIntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector_extra.PIntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector_extra.PIntVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector_extra.PIntVector_append(self, *args)
    def empty(self): return _li_std_vector_extra.PIntVector_empty(self)
    def size(self): return _li_std_vector_extra.PIntVector_size(self)
    def clear(self): return _li_std_vector_extra.PIntVector_clear(self)
    def swap(self, *args): return _li_std_vector_extra.PIntVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector_extra.PIntVector_get_allocator(self)
    def begin(self): return _li_std_vector_extra.PIntVector_begin(self)
    def end(self): return _li_std_vector_extra.PIntVector_end(self)
    def rbegin(self): return _li_std_vector_extra.PIntVector_rbegin(self)
    def rend(self): return _li_std_vector_extra.PIntVector_rend(self)
    def pop_back(self): return _li_std_vector_extra.PIntVector_pop_back(self)
    def erase(self, *args): return _li_std_vector_extra.PIntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector_extra.new_PIntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector_extra.PIntVector_push_back(self, *args)
    def front(self): return _li_std_vector_extra.PIntVector_front(self)
    def back(self): return _li_std_vector_extra.PIntVector_back(self)
    def assign(self, *args): return _li_std_vector_extra.PIntVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector_extra.PIntVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector_extra.PIntVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector_extra.PIntVector_reserve(self, *args)
    def capacity(self): return _li_std_vector_extra.PIntVector_capacity(self)
    __swig_destroy__ = _li_std_vector_extra.delete_PIntVector
    __del__ = lambda self : None;
PIntVector_swigregister = _li_std_vector_extra.PIntVector_swigregister
PIntVector_swigregister(PIntVector)

class RealVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector_extra.RealVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector_extra.RealVector___nonzero__(self)
    def __bool__(self): return _li_std_vector_extra.RealVector___bool__(self)
    def __len__(self): return _li_std_vector_extra.RealVector___len__(self)
    def pop(self): return _li_std_vector_extra.RealVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector_extra.RealVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector_extra.RealVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector_extra.RealVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector_extra.RealVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector_extra.RealVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector_extra.RealVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector_extra.RealVector_append(self, *args)
    def empty(self): return _li_std_vector_extra.RealVector_empty(self)
    def size(self): return _li_std_vector_extra.RealVector_size(self)
    def clear(self): return _li_std_vector_extra.RealVector_clear(self)
    def swap(self, *args): return _li_std_vector_extra.RealVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector_extra.RealVector_get_allocator(self)
    def begin(self): return _li_std_vector_extra.RealVector_begin(self)
    def end(self): return _li_std_vector_extra.RealVector_end(self)
    def rbegin(self): return _li_std_vector_extra.RealVector_rbegin(self)
    def rend(self): return _li_std_vector_extra.RealVector_rend(self)
    def pop_back(self): return _li_std_vector_extra.RealVector_pop_back(self)
    def erase(self, *args): return _li_std_vector_extra.RealVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector_extra.new_RealVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector_extra.RealVector_push_back(self, *args)
    def front(self): return _li_std_vector_extra.RealVector_front(self)
    def back(self): return _li_std_vector_extra.RealVector_back(self)
    def assign(self, *args): return _li_std_vector_extra.RealVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector_extra.RealVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector_extra.RealVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector_extra.RealVector_reserve(self, *args)
    def capacity(self): return _li_std_vector_extra.RealVector_capacity(self)
    __swig_destroy__ = _li_std_vector_extra.delete_RealVector
    __del__ = lambda self : None;
RealVector_swigregister = _li_std_vector_extra.RealVector_swigregister
RealVector_swigregister(RealVector)


def average(*args):
  return _li_std_vector_extra.average(*args)
average = _li_std_vector_extra.average

def half(*args):
  return _li_std_vector_extra.half(*args)
half = _li_std_vector_extra.half

def halve_in_place(*args):
  return _li_std_vector_extra.halve_in_place(*args)
halve_in_place = _li_std_vector_extra.halve_in_place
class IntPtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntPtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntPtrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector_extra.IntPtrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector_extra.IntPtrVector___nonzero__(self)
    def __bool__(self): return _li_std_vector_extra.IntPtrVector___bool__(self)
    def __len__(self): return _li_std_vector_extra.IntPtrVector___len__(self)
    def pop(self): return _li_std_vector_extra.IntPtrVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector_extra.IntPtrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector_extra.IntPtrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector_extra.IntPtrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector_extra.IntPtrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector_extra.IntPtrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector_extra.IntPtrVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector_extra.IntPtrVector_append(self, *args)
    def empty(self): return _li_std_vector_extra.IntPtrVector_empty(self)
    def size(self): return _li_std_vector_extra.IntPtrVector_size(self)
    def clear(self): return _li_std_vector_extra.IntPtrVector_clear(self)
    def swap(self, *args): return _li_std_vector_extra.IntPtrVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector_extra.IntPtrVector_get_allocator(self)
    def begin(self): return _li_std_vector_extra.IntPtrVector_begin(self)
    def end(self): return _li_std_vector_extra.IntPtrVector_end(self)
    def rbegin(self): return _li_std_vector_extra.IntPtrVector_rbegin(self)
    def rend(self): return _li_std_vector_extra.IntPtrVector_rend(self)
    def pop_back(self): return _li_std_vector_extra.IntPtrVector_pop_back(self)
    def erase(self, *args): return _li_std_vector_extra.IntPtrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector_extra.new_IntPtrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector_extra.IntPtrVector_push_back(self, *args)
    def front(self): return _li_std_vector_extra.IntPtrVector_front(self)
    def back(self): return _li_std_vector_extra.IntPtrVector_back(self)
    def assign(self, *args): return _li_std_vector_extra.IntPtrVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector_extra.IntPtrVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector_extra.IntPtrVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector_extra.IntPtrVector_reserve(self, *args)
    def capacity(self): return _li_std_vector_extra.IntPtrVector_capacity(self)
    __swig_destroy__ = _li_std_vector_extra.delete_IntPtrVector
    __del__ = lambda self : None;
IntPtrVector_swigregister = _li_std_vector_extra.IntPtrVector_swigregister
IntPtrVector_swigregister(IntPtrVector)

class A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _li_std_vector_extra.delete_A
    __del__ = lambda self : None;
    def f(self, *args): return _li_std_vector_extra.A_f(self, *args)
A_swigregister = _li_std_vector_extra.A_swigregister
A_swigregister(A)

class B(A):
    __swig_setmethods__ = {}
    for _s in [A]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    for _s in [A]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _li_std_vector_extra.B_val_set
    __swig_getmethods__["val"] = _li_std_vector_extra.B_val_get
    if _newclass:val = _swig_property(_li_std_vector_extra.B_val_get, _li_std_vector_extra.B_val_set)
    def __init__(self, i=0): 
        this = _li_std_vector_extra.new_B(i)
        try: self.this.append(this)
        except: self.this = this
    def f(self, *args): return _li_std_vector_extra.B_f(self, *args)
    __swig_destroy__ = _li_std_vector_extra.delete_B
    __del__ = lambda self : None;
B_swigregister = _li_std_vector_extra.B_swigregister
B_swigregister(B)


def vecAptr(*args):
  return _li_std_vector_extra.vecAptr(*args)
vecAptr = _li_std_vector_extra.vecAptr

def halfs(*args):
  return _li_std_vector_extra.halfs(*args)
halfs = _li_std_vector_extra.halfs

def vecStr(*args):
  return _li_std_vector_extra.vecStr(*args)
vecStr = _li_std_vector_extra.vecStr
class VecB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecB, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector_extra.VecB_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector_extra.VecB___nonzero__(self)
    def __bool__(self): return _li_std_vector_extra.VecB___bool__(self)
    def __len__(self): return _li_std_vector_extra.VecB___len__(self)
    def pop(self): return _li_std_vector_extra.VecB_pop(self)
    def __getslice__(self, *args): return _li_std_vector_extra.VecB___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector_extra.VecB___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector_extra.VecB___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector_extra.VecB___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector_extra.VecB___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector_extra.VecB___setitem__(self, *args)
    def append(self, *args): return _li_std_vector_extra.VecB_append(self, *args)
    def empty(self): return _li_std_vector_extra.VecB_empty(self)
    def size(self): return _li_std_vector_extra.VecB_size(self)
    def clear(self): return _li_std_vector_extra.VecB_clear(self)
    def swap(self, *args): return _li_std_vector_extra.VecB_swap(self, *args)
    def get_allocator(self): return _li_std_vector_extra.VecB_get_allocator(self)
    def begin(self): return _li_std_vector_extra.VecB_begin(self)
    def end(self): return _li_std_vector_extra.VecB_end(self)
    def rbegin(self): return _li_std_vector_extra.VecB_rbegin(self)
    def rend(self): return _li_std_vector_extra.VecB_rend(self)
    def pop_back(self): return _li_std_vector_extra.VecB_pop_back(self)
    def erase(self, *args): return _li_std_vector_extra.VecB_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector_extra.new_VecB(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector_extra.VecB_push_back(self, *args)
    def front(self): return _li_std_vector_extra.VecB_front(self)
    def back(self): return _li_std_vector_extra.VecB_back(self)
    def assign(self, *args): return _li_std_vector_extra.VecB_assign(self, *args)
    def resize(self, *args): return _li_std_vector_extra.VecB_resize(self, *args)
    def insert(self, *args): return _li_std_vector_extra.VecB_insert(self, *args)
    def reserve(self, *args): return _li_std_vector_extra.VecB_reserve(self, *args)
    def capacity(self): return _li_std_vector_extra.VecB_capacity(self)
    __swig_destroy__ = _li_std_vector_extra.delete_VecB
    __del__ = lambda self : None;
VecB_swigregister = _li_std_vector_extra.VecB_swigregister
VecB_swigregister(VecB)

class VecA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecA, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector_extra.VecA_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector_extra.VecA___nonzero__(self)
    def __bool__(self): return _li_std_vector_extra.VecA___bool__(self)
    def __len__(self): return _li_std_vector_extra.VecA___len__(self)
    def pop(self): return _li_std_vector_extra.VecA_pop(self)
    def __getslice__(self, *args): return _li_std_vector_extra.VecA___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector_extra.VecA___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector_extra.VecA___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector_extra.VecA___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector_extra.VecA___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector_extra.VecA___setitem__(self, *args)
    def append(self, *args): return _li_std_vector_extra.VecA_append(self, *args)
    def empty(self): return _li_std_vector_extra.VecA_empty(self)
    def size(self): return _li_std_vector_extra.VecA_size(self)
    def clear(self): return _li_std_vector_extra.VecA_clear(self)
    def swap(self, *args): return _li_std_vector_extra.VecA_swap(self, *args)
    def get_allocator(self): return _li_std_vector_extra.VecA_get_allocator(self)
    def begin(self): return _li_std_vector_extra.VecA_begin(self)
    def end(self): return _li_std_vector_extra.VecA_end(self)
    def rbegin(self): return _li_std_vector_extra.VecA_rbegin(self)
    def rend(self): return _li_std_vector_extra.VecA_rend(self)
    def pop_back(self): return _li_std_vector_extra.VecA_pop_back(self)
    def erase(self, *args): return _li_std_vector_extra.VecA_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector_extra.new_VecA(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector_extra.VecA_push_back(self, *args)
    def front(self): return _li_std_vector_extra.VecA_front(self)
    def back(self): return _li_std_vector_extra.VecA_back(self)
    def assign(self, *args): return _li_std_vector_extra.VecA_assign(self, *args)
    def resize(self, *args): return _li_std_vector_extra.VecA_resize(self, *args)
    def insert(self, *args): return _li_std_vector_extra.VecA_insert(self, *args)
    def reserve(self, *args): return _li_std_vector_extra.VecA_reserve(self, *args)
    def capacity(self): return _li_std_vector_extra.VecA_capacity(self)
    __swig_destroy__ = _li_std_vector_extra.delete_VecA
    __del__ = lambda self : None;
VecA_swigregister = _li_std_vector_extra.VecA_swigregister
VecA_swigregister(VecA)

class PtrInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PtrInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PtrInt, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _li_std_vector_extra.new_PtrInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_vector_extra.delete_PtrInt
    __del__ = lambda self : None;
    def assign(self, *args): return _li_std_vector_extra.PtrInt_assign(self, *args)
    def value(self): return _li_std_vector_extra.PtrInt_value(self)
    def cast(self): return _li_std_vector_extra.PtrInt_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _li_std_vector_extra.PtrInt_frompointer
    if _newclass:frompointer = staticmethod(_li_std_vector_extra.PtrInt_frompointer)
PtrInt_swigregister = _li_std_vector_extra.PtrInt_swigregister
PtrInt_swigregister(PtrInt)

def PtrInt_frompointer(*args):
  return _li_std_vector_extra.PtrInt_frompointer(*args)
PtrInt_frompointer = _li_std_vector_extra.PtrInt_frompointer


def new_ArrInt(*args):
  return _li_std_vector_extra.new_ArrInt(*args)
new_ArrInt = _li_std_vector_extra.new_ArrInt

def delete_ArrInt(*args):
  return _li_std_vector_extra.delete_ArrInt(*args)
delete_ArrInt = _li_std_vector_extra.delete_ArrInt

def ArrInt_getitem(*args):
  return _li_std_vector_extra.ArrInt_getitem(*args)
ArrInt_getitem = _li_std_vector_extra.ArrInt_getitem

def ArrInt_setitem(*args):
  return _li_std_vector_extra.ArrInt_setitem(*args)
ArrInt_setitem = _li_std_vector_extra.ArrInt_setitem

def makeIntPtr(*args):
  return _li_std_vector_extra.makeIntPtr(*args)
makeIntPtr = _li_std_vector_extra.makeIntPtr

def makeConstShortPtr(*args):
  return _li_std_vector_extra.makeConstShortPtr(*args)
makeConstShortPtr = _li_std_vector_extra.makeConstShortPtr

def makeDoublePtr(*args):
  return _li_std_vector_extra.makeDoublePtr(*args)
makeDoublePtr = _li_std_vector_extra.makeDoublePtr

def extractInt(*args):
  return _li_std_vector_extra.extractInt(*args)
extractInt = _li_std_vector_extra.extractInt

def extractConstShort(*args):
  return _li_std_vector_extra.extractConstShort(*args)
extractConstShort = _li_std_vector_extra.extractConstShort
class pyvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pyvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pyvector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector_extra.pyvector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector_extra.pyvector___nonzero__(self)
    def __bool__(self): return _li_std_vector_extra.pyvector___bool__(self)
    def __len__(self): return _li_std_vector_extra.pyvector___len__(self)
    def pop(self): return _li_std_vector_extra.pyvector_pop(self)
    def __getslice__(self, *args): return _li_std_vector_extra.pyvector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector_extra.pyvector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector_extra.pyvector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector_extra.pyvector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector_extra.pyvector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector_extra.pyvector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector_extra.pyvector_append(self, *args)
    def empty(self): return _li_std_vector_extra.pyvector_empty(self)
    def size(self): return _li_std_vector_extra.pyvector_size(self)
    def clear(self): return _li_std_vector_extra.pyvector_clear(self)
    def swap(self, *args): return _li_std_vector_extra.pyvector_swap(self, *args)
    def get_allocator(self): return _li_std_vector_extra.pyvector_get_allocator(self)
    def begin(self): return _li_std_vector_extra.pyvector_begin(self)
    def end(self): return _li_std_vector_extra.pyvector_end(self)
    def rbegin(self): return _li_std_vector_extra.pyvector_rbegin(self)
    def rend(self): return _li_std_vector_extra.pyvector_rend(self)
    def pop_back(self): return _li_std_vector_extra.pyvector_pop_back(self)
    def erase(self, *args): return _li_std_vector_extra.pyvector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector_extra.new_pyvector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector_extra.pyvector_push_back(self, *args)
    def front(self): return _li_std_vector_extra.pyvector_front(self)
    def back(self): return _li_std_vector_extra.pyvector_back(self)
    def assign(self, *args): return _li_std_vector_extra.pyvector_assign(self, *args)
    def resize(self, *args): return _li_std_vector_extra.pyvector_resize(self, *args)
    def insert(self, *args): return _li_std_vector_extra.pyvector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector_extra.pyvector_reserve(self, *args)
    def capacity(self): return _li_std_vector_extra.pyvector_capacity(self)
    __swig_destroy__ = _li_std_vector_extra.delete_pyvector
    __del__ = lambda self : None;
pyvector_swigregister = _li_std_vector_extra.pyvector_swigregister
pyvector_swigregister(pyvector)

class ConstShortPtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstShortPtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstShortPtrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_vector_extra.ConstShortPtrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_vector_extra.ConstShortPtrVector___nonzero__(self)
    def __bool__(self): return _li_std_vector_extra.ConstShortPtrVector___bool__(self)
    def __len__(self): return _li_std_vector_extra.ConstShortPtrVector___len__(self)
    def pop(self): return _li_std_vector_extra.ConstShortPtrVector_pop(self)
    def __getslice__(self, *args): return _li_std_vector_extra.ConstShortPtrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_vector_extra.ConstShortPtrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_vector_extra.ConstShortPtrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_vector_extra.ConstShortPtrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_vector_extra.ConstShortPtrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_vector_extra.ConstShortPtrVector___setitem__(self, *args)
    def append(self, *args): return _li_std_vector_extra.ConstShortPtrVector_append(self, *args)
    def empty(self): return _li_std_vector_extra.ConstShortPtrVector_empty(self)
    def size(self): return _li_std_vector_extra.ConstShortPtrVector_size(self)
    def clear(self): return _li_std_vector_extra.ConstShortPtrVector_clear(self)
    def swap(self, *args): return _li_std_vector_extra.ConstShortPtrVector_swap(self, *args)
    def get_allocator(self): return _li_std_vector_extra.ConstShortPtrVector_get_allocator(self)
    def begin(self): return _li_std_vector_extra.ConstShortPtrVector_begin(self)
    def end(self): return _li_std_vector_extra.ConstShortPtrVector_end(self)
    def rbegin(self): return _li_std_vector_extra.ConstShortPtrVector_rbegin(self)
    def rend(self): return _li_std_vector_extra.ConstShortPtrVector_rend(self)
    def pop_back(self): return _li_std_vector_extra.ConstShortPtrVector_pop_back(self)
    def erase(self, *args): return _li_std_vector_extra.ConstShortPtrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_vector_extra.new_ConstShortPtrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _li_std_vector_extra.ConstShortPtrVector_push_back(self, *args)
    def front(self): return _li_std_vector_extra.ConstShortPtrVector_front(self)
    def back(self): return _li_std_vector_extra.ConstShortPtrVector_back(self)
    def assign(self, *args): return _li_std_vector_extra.ConstShortPtrVector_assign(self, *args)
    def resize(self, *args): return _li_std_vector_extra.ConstShortPtrVector_resize(self, *args)
    def insert(self, *args): return _li_std_vector_extra.ConstShortPtrVector_insert(self, *args)
    def reserve(self, *args): return _li_std_vector_extra.ConstShortPtrVector_reserve(self, *args)
    def capacity(self): return _li_std_vector_extra.ConstShortPtrVector_capacity(self)
    __swig_destroy__ = _li_std_vector_extra.delete_ConstShortPtrVector
    __del__ = lambda self : None;
ConstShortPtrVector_swigregister = _li_std_vector_extra.ConstShortPtrVector_swigregister
ConstShortPtrVector_swigregister(ConstShortPtrVector)


def overloaded1(*args):
  return _li_std_vector_extra.overloaded1(*args)
overloaded1 = _li_std_vector_extra.overloaded1

def overloaded2(*args):
  return _li_std_vector_extra.overloaded2(*args)
overloaded2 = _li_std_vector_extra.overloaded2

def overloaded3(*args):
  return _li_std_vector_extra.overloaded3(*args)
overloaded3 = _li_std_vector_extra.overloaded3
# This file is compatible with both classic and new-style classes.


