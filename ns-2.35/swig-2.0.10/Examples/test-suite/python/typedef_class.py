# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_typedef_class', [dirname(__file__)])
        except ImportError:
            import _typedef_class
            return _typedef_class
        if fp is not None:
            try:
                _mod = imp.load_module('_typedef_class', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _typedef_class = swig_import_helper()
    del swig_import_helper
else:
    import _typedef_class
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class RealA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _typedef_class.RealA_a_set
    __swig_getmethods__["a"] = _typedef_class.RealA_a_get
    if _newclass:a = _swig_property(_typedef_class.RealA_a_get, _typedef_class.RealA_a_set)
    def __init__(self): 
        this = _typedef_class.new_RealA()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _typedef_class.delete_RealA
    __del__ = lambda self : None;
RealA_swigregister = _typedef_class.RealA_swigregister
RealA_swigregister(RealA)

class B(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    def testA(self, *args): return _typedef_class.B_testA(self, *args)
    def __init__(self): 
        this = _typedef_class.new_B()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _typedef_class.delete_B
    __del__ = lambda self : None;
B_swigregister = _typedef_class.B_swigregister
B_swigregister(B)

class BBB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BBB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BBB, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _typedef_class.new_BBB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _typedef_class.delete_BBB
    __del__ = lambda self : None;
BBB_swigregister = _typedef_class.BBB_swigregister
BBB_swigregister(BBB)

class BB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _typedef_class.new_BB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["aa_var"] = _typedef_class.BB_aa_var_set
    __swig_getmethods__["aa_var"] = _typedef_class.BB_aa_var_get
    if _newclass:aa_var = _swig_property(_typedef_class.BB_aa_var_get, _typedef_class.BB_aa_var_set)
    def aa_method(self, *args): return _typedef_class.BB_aa_method(self, *args)
    __swig_getmethods__["aa_static_method"] = lambda x: _typedef_class.BB_aa_static_method
    if _newclass:aa_static_method = staticmethod(_typedef_class.BB_aa_static_method)
    __swig_destroy__ = _typedef_class.delete_BB
    __del__ = lambda self : None;
BB_swigregister = _typedef_class.BB_swigregister
BB_swigregister(BB)

def BB_aa_static_method(*args):
  return _typedef_class.BB_aa_static_method(*args)
BB_aa_static_method = _typedef_class.BB_aa_static_method

# This file is compatible with both classic and new-style classes.


