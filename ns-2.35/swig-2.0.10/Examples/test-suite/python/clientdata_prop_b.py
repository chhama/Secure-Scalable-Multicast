# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_clientdata_prop_b', [dirname(__file__)])
        except ImportError:
            import _clientdata_prop_b
            return _clientdata_prop_b
        if fp is not None:
            try:
                _mod = imp.load_module('_clientdata_prop_b', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _clientdata_prop_b = swig_import_helper()
    del swig_import_helper
else:
    import _clientdata_prop_b
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import clientdata_prop_a
class B(clientdata_prop_a.A):
    __swig_setmethods__ = {}
    for _s in [clientdata_prop_a.A]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    for _s in [clientdata_prop_a.A]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    def fB(self): return _clientdata_prop_b.B_fB(self)
    def __init__(self): 
        this = _clientdata_prop_b.new_B()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clientdata_prop_b.delete_B
    __del__ = lambda self : None;
B_swigregister = _clientdata_prop_b.B_swigregister
B_swigregister(B)

class C(clientdata_prop_a.A):
    __swig_setmethods__ = {}
    for _s in [clientdata_prop_a.A]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, C, name, value)
    __swig_getmethods__ = {}
    for _s in [clientdata_prop_a.A]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, C, name)
    __repr__ = _swig_repr
    def fC(self): return _clientdata_prop_b.C_fC(self)
    def __init__(self): 
        this = _clientdata_prop_b.new_C()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clientdata_prop_b.delete_C
    __del__ = lambda self : None;
C_swigregister = _clientdata_prop_b.C_swigregister
C_swigregister(C)

class D(clientdata_prop_a.A):
    __swig_setmethods__ = {}
    for _s in [clientdata_prop_a.A]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, D, name, value)
    __swig_getmethods__ = {}
    for _s in [clientdata_prop_a.A]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, D, name)
    __repr__ = _swig_repr
    def fD(self): return _clientdata_prop_b.D_fD(self)
    def __init__(self): 
        this = _clientdata_prop_b.new_D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clientdata_prop_b.delete_D
    __del__ = lambda self : None;
D_swigregister = _clientdata_prop_b.D_swigregister
D_swigregister(D)


def test_t2A(*args):
  return _clientdata_prop_b.test_t2A(*args)
test_t2A = _clientdata_prop_b.test_t2A

def test_t3A(*args):
  return _clientdata_prop_b.test_t3A(*args)
test_t3A = _clientdata_prop_b.test_t3A

def test_B(*args):
  return _clientdata_prop_b.test_B(*args)
test_B = _clientdata_prop_b.test_B

def test_C(*args):
  return _clientdata_prop_b.test_C(*args)
test_C = _clientdata_prop_b.test_C

def test_D(*args):
  return _clientdata_prop_b.test_D(*args)
test_D = _clientdata_prop_b.test_D

def test_tD(*args):
  return _clientdata_prop_b.test_tD(*args)
test_tD = _clientdata_prop_b.test_tD

def test_t2D(*args):
  return _clientdata_prop_b.test_t2D(*args)
test_t2D = _clientdata_prop_b.test_t2D

def new_t2A():
  return _clientdata_prop_b.new_t2A()
new_t2A = _clientdata_prop_b.new_t2A

def new_t3A():
  return _clientdata_prop_b.new_t3A()
new_t3A = _clientdata_prop_b.new_t3A

def new_tD():
  return _clientdata_prop_b.new_tD()
new_tD = _clientdata_prop_b.new_tD

def new_t2D():
  return _clientdata_prop_b.new_t2D()
new_t2D = _clientdata_prop_b.new_t2D
# This file is compatible with both classic and new-style classes.


