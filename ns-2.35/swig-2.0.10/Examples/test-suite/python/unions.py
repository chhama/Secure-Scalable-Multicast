# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_unions', [dirname(__file__)])
        except ImportError:
            import _unions
            return _unions
        if fp is not None:
            try:
                _mod = imp.load_module('_unions', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _unions = swig_import_helper()
    del swig_import_helper
else:
    import _unions
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SmallStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmallStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SmallStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["jill"] = _unions.SmallStruct_jill_set
    __swig_getmethods__["jill"] = _unions.SmallStruct_jill_get
    if _newclass:jill = _swig_property(_unions.SmallStruct_jill_get, _unions.SmallStruct_jill_set)
    def __init__(self): 
        this = _unions.new_SmallStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _unions.delete_SmallStruct
    __del__ = lambda self : None;
SmallStruct_swigregister = _unions.SmallStruct_swigregister
SmallStruct_swigregister(SmallStruct)

class BigStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BigStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BigStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["jack"] = _unions.BigStruct_jack_set
    __swig_getmethods__["jack"] = _unions.BigStruct_jack_get
    if _newclass:jack = _swig_property(_unions.BigStruct_jack_get, _unions.BigStruct_jack_set)
    __swig_setmethods__["smallstruct"] = _unions.BigStruct_smallstruct_set
    __swig_getmethods__["smallstruct"] = _unions.BigStruct_smallstruct_get
    if _newclass:smallstruct = _swig_property(_unions.BigStruct_smallstruct_get, _unions.BigStruct_smallstruct_set)
    def __init__(self): 
        this = _unions.new_BigStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _unions.delete_BigStruct
    __del__ = lambda self : None;
BigStruct_swigregister = _unions.BigStruct_swigregister
BigStruct_swigregister(BigStruct)

class UnionTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnionTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnionTest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bs"] = _unions.UnionTest_bs_set
    __swig_getmethods__["bs"] = _unions.UnionTest_bs_get
    if _newclass:bs = _swig_property(_unions.UnionTest_bs_get, _unions.UnionTest_bs_set)
    __swig_setmethods__["ss"] = _unions.UnionTest_ss_set
    __swig_getmethods__["ss"] = _unions.UnionTest_ss_get
    if _newclass:ss = _swig_property(_unions.UnionTest_ss_get, _unions.UnionTest_ss_set)
    def __init__(self): 
        this = _unions.new_UnionTest()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _unions.delete_UnionTest
    __del__ = lambda self : None;
UnionTest_swigregister = _unions.UnionTest_swigregister
UnionTest_swigregister(UnionTest)

class EmbeddedUnionTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmbeddedUnionTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EmbeddedUnionTest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["number"] = _unions.EmbeddedUnionTest_number_set
    __swig_getmethods__["number"] = _unions.EmbeddedUnionTest_number_get
    if _newclass:number = _swig_property(_unions.EmbeddedUnionTest_number_get, _unions.EmbeddedUnionTest_number_set)
    __swig_getmethods__["uni"] = _unions.EmbeddedUnionTest_uni_get
    if _newclass:uni = _swig_property(_unions.EmbeddedUnionTest_uni_get)
    def __init__(self): 
        this = _unions.new_EmbeddedUnionTest()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _unions.delete_EmbeddedUnionTest
    __del__ = lambda self : None;
EmbeddedUnionTest_swigregister = _unions.EmbeddedUnionTest_swigregister
EmbeddedUnionTest_swigregister(EmbeddedUnionTest)

class EmbeddedUnionTest_uni(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmbeddedUnionTest_uni, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EmbeddedUnionTest_uni, name)
    __repr__ = _swig_repr
    __swig_setmethods__["big"] = _unions.EmbeddedUnionTest_uni_big_set
    __swig_getmethods__["big"] = _unions.EmbeddedUnionTest_uni_big_get
    if _newclass:big = _swig_property(_unions.EmbeddedUnionTest_uni_big_get, _unions.EmbeddedUnionTest_uni_big_set)
    __swig_setmethods__["small"] = _unions.EmbeddedUnionTest_uni_small_set
    __swig_getmethods__["small"] = _unions.EmbeddedUnionTest_uni_small_get
    if _newclass:small = _swig_property(_unions.EmbeddedUnionTest_uni_small_get, _unions.EmbeddedUnionTest_uni_small_set)
    def __init__(self): 
        this = _unions.new_EmbeddedUnionTest_uni()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _unions.delete_EmbeddedUnionTest_uni
    __del__ = lambda self : None;
EmbeddedUnionTest_uni_swigregister = _unions.EmbeddedUnionTest_uni_swigregister
EmbeddedUnionTest_uni_swigregister(EmbeddedUnionTest_uni)

# This file is compatible with both classic and new-style classes.


