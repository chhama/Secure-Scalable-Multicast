# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_virtual_poly', [dirname(__file__)])
        except ImportError:
            import _virtual_poly
            return _virtual_poly
        if fp is not None:
            try:
                _mod = imp.load_module('_virtual_poly', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _virtual_poly = swig_import_helper()
    del swig_import_helper
else:
    import _virtual_poly
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class NNumber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NNumber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NNumber, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _virtual_poly.delete_NNumber
    __del__ = lambda self : None;
    def copy(self): return _virtual_poly.NNumber_copy(self)
    def ref_this(self): return _virtual_poly.NNumber_ref_this(self)
    def nnumber(self): return _virtual_poly.NNumber_nnumber(self)
NNumber_swigregister = _virtual_poly.NNumber_swigregister
NNumber_swigregister(NNumber)

class NInt(NNumber):
    __swig_setmethods__ = {}
    for _s in [NNumber]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NInt, name, value)
    __swig_getmethods__ = {}
    for _s in [NNumber]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _virtual_poly.new_NInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self): return _virtual_poly.NInt_get(self)
    def copy(self): return _virtual_poly.NInt_copy(self)
    def ref_this(self): return _virtual_poly.NInt_ref_this(self)
    __swig_getmethods__["narrow"] = lambda x: _virtual_poly.NInt_narrow
    if _newclass:narrow = staticmethod(_virtual_poly.NInt_narrow)
    __swig_destroy__ = _virtual_poly.delete_NInt
    __del__ = lambda self : None;
NInt_swigregister = _virtual_poly.NInt_swigregister
NInt_swigregister(NInt)

def NInt_narrow(*args):
  return _virtual_poly.NInt_narrow(*args)
NInt_narrow = _virtual_poly.NInt_narrow


def incr(*args):
  return _virtual_poly.incr(*args)
incr = _virtual_poly.incr
class NDouble(NNumber):
    __swig_setmethods__ = {}
    for _s in [NNumber]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [NNumber]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _virtual_poly.new_NDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def get(self): return _virtual_poly.NDouble_get(self)
    def copy(self): return _virtual_poly.NDouble_copy(self)
    def ref_this(self): return _virtual_poly.NDouble_ref_this(self)
    __swig_getmethods__["narrow"] = lambda x: _virtual_poly.NDouble_narrow
    if _newclass:narrow = staticmethod(_virtual_poly.NDouble_narrow)
    __swig_destroy__ = _virtual_poly.delete_NDouble
    __del__ = lambda self : None;
NDouble_swigregister = _virtual_poly.NDouble_swigregister
NDouble_swigregister(NDouble)

def NDouble_narrow(*args):
  return _virtual_poly.NDouble_narrow(*args)
NDouble_narrow = _virtual_poly.NDouble_narrow

class BaseInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseInt, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["t"] = _virtual_poly.BaseInt_t_set
    __swig_getmethods__["t"] = _virtual_poly.BaseInt_t_get
    if _newclass:t = _swig_property(_virtual_poly.BaseInt_t_get, _virtual_poly.BaseInt_t_set)
    def method(self): return _virtual_poly.BaseInt_method(self)
    def foxy(self, *args): return _virtual_poly.BaseInt_foxy(self, *args)
    def afunction(self): return _virtual_poly.BaseInt_afunction(self)
    def defaultargs(self, *args): return _virtual_poly.BaseInt_defaultargs(self, *args)
    __swig_getmethods__["StaticHidden"] = lambda x: _virtual_poly.BaseInt_StaticHidden
    if _newclass:StaticHidden = staticmethod(_virtual_poly.BaseInt_StaticHidden)
    def AmIAmINotVirtual(self): return _virtual_poly.BaseInt_AmIAmINotVirtual(self)
    def NotVirtual(self, *args): return _virtual_poly.BaseInt_NotVirtual(self, *args)
    def covariant(self, a=0, i=None): return _virtual_poly.BaseInt_covariant(self, a, i)
    def covariant2(self): return _virtual_poly.BaseInt_covariant2(self)
    def covariant3(self): return _virtual_poly.BaseInt_covariant3(self)
    __swig_destroy__ = _virtual_poly.delete_BaseInt
    __del__ = lambda self : None;
BaseInt_swigregister = _virtual_poly.BaseInt_swigregister
BaseInt_swigregister(BaseInt)

def BaseInt_StaticHidden():
  return _virtual_poly.BaseInt_StaticHidden()
BaseInt_StaticHidden = _virtual_poly.BaseInt_StaticHidden

class DerivedInt(BaseInt):
    __swig_setmethods__ = {}
    for _s in [BaseInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivedInt, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivedInt, name)
    __repr__ = _swig_repr
    def method(self): return _virtual_poly.DerivedInt_method(self)
    def foxy(self, *args): return _virtual_poly.DerivedInt_foxy(self, *args)
    def afunction(self): return _virtual_poly.DerivedInt_afunction(self)
    def defaultargs(self, *args): return _virtual_poly.DerivedInt_defaultargs(self, *args)
    def AmIAmINotVirtual(self): return _virtual_poly.DerivedInt_AmIAmINotVirtual(self)
    def NotVirtual(self, *args): return _virtual_poly.DerivedInt_NotVirtual(self, *args)
    def covariant(self, a=0, i=0): return _virtual_poly.DerivedInt_covariant(self, a, i)
    def covariant2(self): return _virtual_poly.DerivedInt_covariant2(self)
    def covariant3(self): return _virtual_poly.DerivedInt_covariant3(self)
    def covariant4(self, *args): return _virtual_poly.DerivedInt_covariant4(self, *args)
    def IsVirtual(self): return _virtual_poly.DerivedInt_IsVirtual(self)
    def __init__(self): 
        this = _virtual_poly.new_DerivedInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _virtual_poly.delete_DerivedInt
    __del__ = lambda self : None;
DerivedInt_swigregister = _virtual_poly.DerivedInt_swigregister
DerivedInt_swigregister(DerivedInt)

class BottomInt(DerivedInt):
    __swig_setmethods__ = {}
    for _s in [DerivedInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BottomInt, name, value)
    __swig_getmethods__ = {}
    for _s in [DerivedInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BottomInt, name)
    __repr__ = _swig_repr
    def method(self): return _virtual_poly.BottomInt_method(self)
    __swig_getmethods__["StaticHidden"] = lambda x: _virtual_poly.BottomInt_StaticHidden
    if _newclass:StaticHidden = staticmethod(_virtual_poly.BottomInt_StaticHidden)
    def AmIAmINotVirtual(self): return _virtual_poly.BottomInt_AmIAmINotVirtual(self)
    def NotVirtual(self, *args): return _virtual_poly.BottomInt_NotVirtual(self, *args)
    __swig_setmethods__["funcptr"] = _virtual_poly.BottomInt_funcptr_set
    __swig_getmethods__["funcptr"] = _virtual_poly.BottomInt_funcptr_get
    if _newclass:funcptr = _swig_property(_virtual_poly.BottomInt_funcptr_get, _virtual_poly.BottomInt_funcptr_set)
    def covariant(self, a=0, i=0): return _virtual_poly.BottomInt_covariant(self, a, i)
    def covariant2(self): return _virtual_poly.BottomInt_covariant2(self)
    def covariant3(self): return _virtual_poly.BottomInt_covariant3(self)
    def covariant4(self, *args): return _virtual_poly.BottomInt_covariant4(self, *args)
    def IsVirtual(self): return _virtual_poly.BottomInt_IsVirtual(self)
    def __init__(self): 
        this = _virtual_poly.new_BottomInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _virtual_poly.delete_BottomInt
    __del__ = lambda self : None;
BottomInt_swigregister = _virtual_poly.BottomInt_swigregister
BottomInt_swigregister(BottomInt)

def BottomInt_StaticHidden():
  return _virtual_poly.BottomInt_StaticHidden()
BottomInt_StaticHidden = _virtual_poly.BottomInt_StaticHidden

# This file is compatible with both classic and new-style classes.


