# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_multiple_inheritance', [dirname(__file__)])
        except ImportError:
            import _multiple_inheritance
            return _multiple_inheritance
        if fp is not None:
            try:
                _mod = imp.load_module('_multiple_inheritance', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _multiple_inheritance = swig_import_helper()
    del swig_import_helper
else:
    import _multiple_inheritance
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Bar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bar, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _multiple_inheritance.delete_Bar
    __del__ = lambda self : None;
    def bar(self): return _multiple_inheritance.Bar_bar(self)
    def __init__(self): 
        this = _multiple_inheritance.new_Bar()
        try: self.this.append(this)
        except: self.this = this
Bar_swigregister = _multiple_inheritance.Bar_swigregister
Bar_swigregister(Bar)

class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _multiple_inheritance.delete_Foo
    __del__ = lambda self : None;
    def foo(self): return _multiple_inheritance.Foo_foo(self)
    def __init__(self): 
        this = _multiple_inheritance.new_Foo()
        try: self.this.append(this)
        except: self.this = this
Foo_swigregister = _multiple_inheritance.Foo_swigregister
Foo_swigregister(Foo)

class SpamInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpamInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpamInt, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _multiple_inheritance.delete_SpamInt
    __del__ = lambda self : None;
    def spam(self, *args): return _multiple_inheritance.SpamInt_spam(self, *args)
    def __init__(self): 
        this = _multiple_inheritance.new_SpamInt()
        try: self.this.append(this)
        except: self.this = this
SpamInt_swigregister = _multiple_inheritance.SpamInt_swigregister
SpamInt_swigregister(SpamInt)

class FooBar(Foo,Bar):
    __swig_setmethods__ = {}
    for _s in [Foo,Bar]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FooBar, name, value)
    __swig_getmethods__ = {}
    for _s in [Foo,Bar]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FooBar, name)
    __repr__ = _swig_repr
    def fooBar(self): return _multiple_inheritance.FooBar_fooBar(self)
    def __init__(self): 
        this = _multiple_inheritance.new_FooBar()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _multiple_inheritance.delete_FooBar
    __del__ = lambda self : None;
FooBar_swigregister = _multiple_inheritance.FooBar_swigregister
FooBar_swigregister(FooBar)

class FooBarSpam(Foo,Bar,SpamInt):
    __swig_setmethods__ = {}
    for _s in [Foo,Bar,SpamInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FooBarSpam, name, value)
    __swig_getmethods__ = {}
    for _s in [Foo,Bar,SpamInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FooBarSpam, name)
    __repr__ = _swig_repr
    def fooBarSpam(self): return _multiple_inheritance.FooBarSpam_fooBarSpam(self)
    def __init__(self): 
        this = _multiple_inheritance.new_FooBarSpam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _multiple_inheritance.delete_FooBarSpam
    __del__ = lambda self : None;
FooBarSpam_swigregister = _multiple_inheritance.FooBarSpam_swigregister
FooBarSpam_swigregister(FooBarSpam)

class IgnoreDerived1(Bar):
    __swig_setmethods__ = {}
    for _s in [Bar]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IgnoreDerived1, name, value)
    __swig_getmethods__ = {}
    for _s in [Bar]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IgnoreDerived1, name)
    __repr__ = _swig_repr
    def ignorederived1(self): return _multiple_inheritance.IgnoreDerived1_ignorederived1(self)
    def __init__(self): 
        this = _multiple_inheritance.new_IgnoreDerived1()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _multiple_inheritance.delete_IgnoreDerived1
    __del__ = lambda self : None;
IgnoreDerived1_swigregister = _multiple_inheritance.IgnoreDerived1_swigregister
IgnoreDerived1_swigregister(IgnoreDerived1)

class IgnoreDerived2(Bar):
    __swig_setmethods__ = {}
    for _s in [Bar]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IgnoreDerived2, name, value)
    __swig_getmethods__ = {}
    for _s in [Bar]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IgnoreDerived2, name)
    __repr__ = _swig_repr
    def ignorederived2(self): return _multiple_inheritance.IgnoreDerived2_ignorederived2(self)
    def __init__(self): 
        this = _multiple_inheritance.new_IgnoreDerived2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _multiple_inheritance.delete_IgnoreDerived2
    __del__ = lambda self : None;
IgnoreDerived2_swigregister = _multiple_inheritance.IgnoreDerived2_swigregister
IgnoreDerived2_swigregister(IgnoreDerived2)

class IgnoreDerived3(Bar,):
    __swig_setmethods__ = {}
    for _s in [Bar,]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IgnoreDerived3, name, value)
    __swig_getmethods__ = {}
    for _s in [Bar,]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IgnoreDerived3, name)
    __repr__ = _swig_repr
    def ignorederived3(self): return _multiple_inheritance.IgnoreDerived3_ignorederived3(self)
    def __init__(self): 
        this = _multiple_inheritance.new_IgnoreDerived3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _multiple_inheritance.delete_IgnoreDerived3
    __del__ = lambda self : None;
IgnoreDerived3_swigregister = _multiple_inheritance.IgnoreDerived3_swigregister
IgnoreDerived3_swigregister(IgnoreDerived3)

class IgnoreDerived4(Bar,):
    __swig_setmethods__ = {}
    for _s in [Bar,]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IgnoreDerived4, name, value)
    __swig_getmethods__ = {}
    for _s in [Bar,]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IgnoreDerived4, name)
    __repr__ = _swig_repr
    def ignorederived4(self): return _multiple_inheritance.IgnoreDerived4_ignorederived4(self)
    def __init__(self): 
        this = _multiple_inheritance.new_IgnoreDerived4()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _multiple_inheritance.delete_IgnoreDerived4
    __del__ = lambda self : None;
IgnoreDerived4_swigregister = _multiple_inheritance.IgnoreDerived4_swigregister
IgnoreDerived4_swigregister(IgnoreDerived4)

# This file is compatible with both classic and new-style classes.


