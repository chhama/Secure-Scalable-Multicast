# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cpp_basic', [dirname(__file__)])
        except ImportError:
            import _cpp_basic
            return _cpp_basic
        if fp is not None:
            try:
                _mod = imp.load_module('_cpp_basic', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cpp_basic = swig_import_helper()
    del swig_import_helper
else:
    import _cpp_basic
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cpp_basic.new_Foo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["num"] = _cpp_basic.Foo_num_set
    __swig_getmethods__["num"] = _cpp_basic.Foo_num_get
    if _newclass:num = _swig_property(_cpp_basic.Foo_num_get, _cpp_basic.Foo_num_set)
    def func1(self, *args): return _cpp_basic.Foo_func1(self, *args)
    def func2(self, *args): return _cpp_basic.Foo_func2(self, *args)
    __swig_setmethods__["func_ptr"] = _cpp_basic.Foo_func_ptr_set
    __swig_getmethods__["func_ptr"] = _cpp_basic.Foo_func_ptr_get
    if _newclass:func_ptr = _swig_property(_cpp_basic.Foo_func_ptr_get, _cpp_basic.Foo_func_ptr_set)
    __swig_destroy__ = _cpp_basic.delete_Foo
    __del__ = lambda self : None;
Foo_swigregister = _cpp_basic.Foo_swigregister
Foo_swigregister(Foo)

class Bar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bar, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cpp_basic.new_Bar()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["fptr"] = _cpp_basic.Bar_fptr_set
    __swig_getmethods__["fptr"] = _cpp_basic.Bar_fptr_get
    if _newclass:fptr = _swig_property(_cpp_basic.Bar_fptr_get, _cpp_basic.Bar_fptr_set)
    __swig_setmethods__["fref"] = _cpp_basic.Bar_fref_set
    __swig_getmethods__["fref"] = _cpp_basic.Bar_fref_get
    if _newclass:fref = _swig_property(_cpp_basic.Bar_fref_get, _cpp_basic.Bar_fref_set)
    __swig_setmethods__["fval"] = _cpp_basic.Bar_fval_set
    __swig_getmethods__["fval"] = _cpp_basic.Bar_fval_get
    if _newclass:fval = _swig_property(_cpp_basic.Bar_fval_get, _cpp_basic.Bar_fval_set)
    __swig_getmethods__["cint"] = _cpp_basic.Bar_cint_get
    if _newclass:cint = _swig_property(_cpp_basic.Bar_cint_get)
    global_cint = _cpp_basic.Bar_global_cint
    __swig_setmethods__["global_fptr"] = _cpp_basic.Bar_global_fptr_set
    __swig_getmethods__["global_fptr"] = _cpp_basic.Bar_global_fptr_get
    if _newclass:global_fptr = _swig_property(_cpp_basic.Bar_global_fptr_get, _cpp_basic.Bar_global_fptr_set)
    __swig_setmethods__["global_fref"] = _cpp_basic.Bar_global_fref_set
    __swig_getmethods__["global_fref"] = _cpp_basic.Bar_global_fref_get
    if _newclass:global_fref = _swig_property(_cpp_basic.Bar_global_fref_get, _cpp_basic.Bar_global_fref_set)
    __swig_setmethods__["global_fval"] = _cpp_basic.Bar_global_fval_set
    __swig_getmethods__["global_fval"] = _cpp_basic.Bar_global_fval_get
    if _newclass:global_fval = _swig_property(_cpp_basic.Bar_global_fval_get, _cpp_basic.Bar_global_fval_set)
    def test(self, *args): return _cpp_basic.Bar_test(self, *args)
    def testFoo(self, *args): return _cpp_basic.Bar_testFoo(self, *args)
    __swig_destroy__ = _cpp_basic.delete_Bar
    __del__ = lambda self : None;
Bar_swigregister = _cpp_basic.Bar_swigregister
Bar_swigregister(Bar)
cvar = _cpp_basic.cvar


def get_func1_ptr():
  return _cpp_basic.get_func1_ptr()
get_func1_ptr = _cpp_basic.get_func1_ptr

def get_func2_ptr():
  return _cpp_basic.get_func2_ptr()
get_func2_ptr = _cpp_basic.get_func2_ptr

def test_func_ptr(*args):
  return _cpp_basic.test_func_ptr(*args)
test_func_ptr = _cpp_basic.test_func_ptr
class Fl_Window(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fl_Window, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fl_Window, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cpp_basic.new_Fl_Window()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp_basic.delete_Fl_Window
    __del__ = lambda self : None;
    def show(self, count=None, data=None): return _cpp_basic.Fl_Window_show(self, count, data)
Fl_Window_swigregister = _cpp_basic.Fl_Window_swigregister
Fl_Window_swigregister(Fl_Window)

# This file is compatible with both classic and new-style classes.


