# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_member_pointer', [dirname(__file__)])
        except ImportError:
            import _member_pointer
            return _member_pointer
        if fp is not None:
            try:
                _mod = imp.load_module('_member_pointer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _member_pointer = swig_import_helper()
    del swig_import_helper
else:
    import _member_pointer
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Shape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shape, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _member_pointer.delete_Shape
    __del__ = lambda self : None;
    __swig_setmethods__["x"] = _member_pointer.Shape_x_set
    __swig_getmethods__["x"] = _member_pointer.Shape_x_get
    if _newclass:x = _swig_property(_member_pointer.Shape_x_get, _member_pointer.Shape_x_set)
    __swig_setmethods__["y"] = _member_pointer.Shape_y_set
    __swig_getmethods__["y"] = _member_pointer.Shape_y_get
    if _newclass:y = _swig_property(_member_pointer.Shape_y_get, _member_pointer.Shape_y_set)
    __swig_setmethods__["z"] = _member_pointer.Shape_z_set
    __swig_getmethods__["z"] = _member_pointer.Shape_z_get
    if _newclass:z = _swig_property(_member_pointer.Shape_z_get, _member_pointer.Shape_z_set)
    def move(self, *args): return _member_pointer.Shape_move(self, *args)
    def area(self): return _member_pointer.Shape_area(self)
    def perimeter(self): return _member_pointer.Shape_perimeter(self)
    __swig_setmethods__["nshapes"] = _member_pointer.Shape_nshapes_set
    __swig_getmethods__["nshapes"] = _member_pointer.Shape_nshapes_get
    if _newclass:nshapes = _swig_property(_member_pointer.Shape_nshapes_get, _member_pointer.Shape_nshapes_set)
Shape_swigregister = _member_pointer.Shape_swigregister
Shape_swigregister(Shape)
cvar = _member_pointer.cvar

class Circle(Shape):
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Circle, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Circle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _member_pointer.new_Circle(*args)
        try: self.this.append(this)
        except: self.this = this
    def area(self): return _member_pointer.Circle_area(self)
    def perimeter(self): return _member_pointer.Circle_perimeter(self)
    __swig_destroy__ = _member_pointer.delete_Circle
    __del__ = lambda self : None;
Circle_swigregister = _member_pointer.Circle_swigregister
Circle_swigregister(Circle)

class Square(Shape):
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Square, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Square, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _member_pointer.new_Square(*args)
        try: self.this.append(this)
        except: self.this = this
    def area(self): return _member_pointer.Square_area(self)
    def perimeter(self): return _member_pointer.Square_perimeter(self)
    __swig_destroy__ = _member_pointer.delete_Square
    __del__ = lambda self : None;
Square_swigregister = _member_pointer.Square_swigregister
Square_swigregister(Square)


def do_op(*args):
  return _member_pointer.do_op(*args)
do_op = _member_pointer.do_op

def areapt():
  return _member_pointer.areapt()
areapt = _member_pointer.areapt

def perimeterpt():
  return _member_pointer.perimeterpt()
perimeterpt = _member_pointer.perimeterpt
AREAPT = _member_pointer.AREAPT
PERIMPT = _member_pointer.PERIMPT
NULLPT = _member_pointer.NULLPT
class Funktions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Funktions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Funktions, name)
    __repr__ = _swig_repr
    def addByValue(self, *args): return _member_pointer.Funktions_addByValue(self, *args)
    def addByPointer(self, *args): return _member_pointer.Funktions_addByPointer(self, *args)
    def addByReference(self, *args): return _member_pointer.Funktions_addByReference(self, *args)
    def __init__(self): 
        this = _member_pointer.new_Funktions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _member_pointer.delete_Funktions
    __del__ = lambda self : None;
Funktions_swigregister = _member_pointer.Funktions_swigregister
Funktions_swigregister(Funktions)


def call1(*args):
  return _member_pointer.call1(*args)
call1 = _member_pointer.call1

def call2(*args):
  return _member_pointer.call2(*args)
call2 = _member_pointer.call2

def call3(*args):
  return _member_pointer.call3(*args)
call3 = _member_pointer.call3
ADD_BY_VALUE = _member_pointer.ADD_BY_VALUE
ADD_BY_POINTER = _member_pointer.ADD_BY_POINTER
ADD_BY_REFERENCE = _member_pointer.ADD_BY_REFERENCE
# This file is compatible with both classic and new-style classes.


