# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_python_abstractbase', [dirname(__file__)])
        except ImportError:
            import _python_abstractbase
            return _python_abstractbase
        if fp is not None:
            try:
                _mod = imp.load_module('_python_abstractbase', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _python_abstractbase = swig_import_helper()
    del swig_import_helper
else:
    import _python_abstractbase
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import collections
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _python_abstractbase.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _python_abstractbase.SwigPyIterator_value(self)
    def incr(self, n=1): return _python_abstractbase.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _python_abstractbase.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _python_abstractbase.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _python_abstractbase.SwigPyIterator_equal(self, *args)
    def copy(self): return _python_abstractbase.SwigPyIterator_copy(self)
    def next(self): return _python_abstractbase.SwigPyIterator_next(self)
    def __next__(self): return _python_abstractbase.SwigPyIterator___next__(self)
    def previous(self): return _python_abstractbase.SwigPyIterator_previous(self)
    def advance(self, *args): return _python_abstractbase.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _python_abstractbase.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _python_abstractbase.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _python_abstractbase.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _python_abstractbase.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _python_abstractbase.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _python_abstractbase.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _python_abstractbase.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Mapii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mapii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mapii, name)
    __repr__ = _swig_repr
    def iterator(self): return _python_abstractbase.Mapii_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _python_abstractbase.Mapii___nonzero__(self)
    def __bool__(self): return _python_abstractbase.Mapii___bool__(self)
    def __len__(self): return _python_abstractbase.Mapii___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _python_abstractbase.Mapii___getitem__(self, *args)
    def __delitem__(self, *args): return _python_abstractbase.Mapii___delitem__(self, *args)
    def has_key(self, *args): return _python_abstractbase.Mapii_has_key(self, *args)
    def keys(self): return _python_abstractbase.Mapii_keys(self)
    def values(self): return _python_abstractbase.Mapii_values(self)
    def items(self): return _python_abstractbase.Mapii_items(self)
    def __contains__(self, *args): return _python_abstractbase.Mapii___contains__(self, *args)
    def key_iterator(self): return _python_abstractbase.Mapii_key_iterator(self)
    def value_iterator(self): return _python_abstractbase.Mapii_value_iterator(self)
    def __setitem__(self, *args): return _python_abstractbase.Mapii___setitem__(self, *args)
    def asdict(self): return _python_abstractbase.Mapii_asdict(self)
    def __init__(self, *args): 
        this = _python_abstractbase.new_Mapii(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _python_abstractbase.Mapii_empty(self)
    def size(self): return _python_abstractbase.Mapii_size(self)
    def clear(self): return _python_abstractbase.Mapii_clear(self)
    def swap(self, *args): return _python_abstractbase.Mapii_swap(self, *args)
    def get_allocator(self): return _python_abstractbase.Mapii_get_allocator(self)
    def begin(self): return _python_abstractbase.Mapii_begin(self)
    def end(self): return _python_abstractbase.Mapii_end(self)
    def rbegin(self): return _python_abstractbase.Mapii_rbegin(self)
    def rend(self): return _python_abstractbase.Mapii_rend(self)
    def count(self, *args): return _python_abstractbase.Mapii_count(self, *args)
    def erase(self, *args): return _python_abstractbase.Mapii_erase(self, *args)
    def find(self, *args): return _python_abstractbase.Mapii_find(self, *args)
    def lower_bound(self, *args): return _python_abstractbase.Mapii_lower_bound(self, *args)
    def upper_bound(self, *args): return _python_abstractbase.Mapii_upper_bound(self, *args)
    __swig_destroy__ = _python_abstractbase.delete_Mapii
    __del__ = lambda self : None;
Mapii_swigregister = _python_abstractbase.Mapii_swigregister
Mapii_swigregister(Mapii)

class Multimapii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Multimapii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Multimapii, name)
    __repr__ = _swig_repr
    def iterator(self): return _python_abstractbase.Multimapii_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _python_abstractbase.Multimapii___nonzero__(self)
    def __bool__(self): return _python_abstractbase.Multimapii___bool__(self)
    def __len__(self): return _python_abstractbase.Multimapii___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _python_abstractbase.Multimapii___getitem__(self, *args)
    def __delitem__(self, *args): return _python_abstractbase.Multimapii___delitem__(self, *args)
    def has_key(self, *args): return _python_abstractbase.Multimapii_has_key(self, *args)
    def keys(self): return _python_abstractbase.Multimapii_keys(self)
    def values(self): return _python_abstractbase.Multimapii_values(self)
    def items(self): return _python_abstractbase.Multimapii_items(self)
    def __contains__(self, *args): return _python_abstractbase.Multimapii___contains__(self, *args)
    def key_iterator(self): return _python_abstractbase.Multimapii_key_iterator(self)
    def value_iterator(self): return _python_abstractbase.Multimapii_value_iterator(self)
    def __setitem__(self, *args): return _python_abstractbase.Multimapii___setitem__(self, *args)
    def __init__(self, *args): 
        this = _python_abstractbase.new_Multimapii(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _python_abstractbase.Multimapii_empty(self)
    def size(self): return _python_abstractbase.Multimapii_size(self)
    def clear(self): return _python_abstractbase.Multimapii_clear(self)
    def swap(self, *args): return _python_abstractbase.Multimapii_swap(self, *args)
    def get_allocator(self): return _python_abstractbase.Multimapii_get_allocator(self)
    def begin(self): return _python_abstractbase.Multimapii_begin(self)
    def end(self): return _python_abstractbase.Multimapii_end(self)
    def rbegin(self): return _python_abstractbase.Multimapii_rbegin(self)
    def rend(self): return _python_abstractbase.Multimapii_rend(self)
    def count(self, *args): return _python_abstractbase.Multimapii_count(self, *args)
    def erase(self, *args): return _python_abstractbase.Multimapii_erase(self, *args)
    def find(self, *args): return _python_abstractbase.Multimapii_find(self, *args)
    def lower_bound(self, *args): return _python_abstractbase.Multimapii_lower_bound(self, *args)
    def upper_bound(self, *args): return _python_abstractbase.Multimapii_upper_bound(self, *args)
    def equal_range(self, *args): return _python_abstractbase.Multimapii_equal_range(self, *args)
    __swig_destroy__ = _python_abstractbase.delete_Multimapii
    __del__ = lambda self : None;
Multimapii_swigregister = _python_abstractbase.Multimapii_swigregister
Multimapii_swigregister(Multimapii)

class IntSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntSet, name)
    __repr__ = _swig_repr
    def iterator(self): return _python_abstractbase.IntSet_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _python_abstractbase.IntSet___nonzero__(self)
    def __bool__(self): return _python_abstractbase.IntSet___bool__(self)
    def __len__(self): return _python_abstractbase.IntSet___len__(self)
    def append(self, *args): return _python_abstractbase.IntSet_append(self, *args)
    def __contains__(self, *args): return _python_abstractbase.IntSet___contains__(self, *args)
    def __getitem__(self, *args): return _python_abstractbase.IntSet___getitem__(self, *args)
    def add(self, *args): return _python_abstractbase.IntSet_add(self, *args)
    def discard(self, *args): return _python_abstractbase.IntSet_discard(self, *args)
    def __init__(self, *args): 
        this = _python_abstractbase.new_IntSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _python_abstractbase.IntSet_empty(self)
    def size(self): return _python_abstractbase.IntSet_size(self)
    def clear(self): return _python_abstractbase.IntSet_clear(self)
    def swap(self, *args): return _python_abstractbase.IntSet_swap(self, *args)
    def count(self, *args): return _python_abstractbase.IntSet_count(self, *args)
    def begin(self): return _python_abstractbase.IntSet_begin(self)
    def end(self): return _python_abstractbase.IntSet_end(self)
    def rbegin(self): return _python_abstractbase.IntSet_rbegin(self)
    def rend(self): return _python_abstractbase.IntSet_rend(self)
    def erase(self, *args): return _python_abstractbase.IntSet_erase(self, *args)
    def find(self, *args): return _python_abstractbase.IntSet_find(self, *args)
    def lower_bound(self, *args): return _python_abstractbase.IntSet_lower_bound(self, *args)
    def upper_bound(self, *args): return _python_abstractbase.IntSet_upper_bound(self, *args)
    def equal_range(self, *args): return _python_abstractbase.IntSet_equal_range(self, *args)
    def insert(self, *args): return _python_abstractbase.IntSet_insert(self, *args)
    __swig_destroy__ = _python_abstractbase.delete_IntSet
    __del__ = lambda self : None;
IntSet_swigregister = _python_abstractbase.IntSet_swigregister
IntSet_swigregister(IntSet)

class IntMultiset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntMultiset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntMultiset, name)
    __repr__ = _swig_repr
    def iterator(self): return _python_abstractbase.IntMultiset_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _python_abstractbase.IntMultiset___nonzero__(self)
    def __bool__(self): return _python_abstractbase.IntMultiset___bool__(self)
    def __len__(self): return _python_abstractbase.IntMultiset___len__(self)
    def append(self, *args): return _python_abstractbase.IntMultiset_append(self, *args)
    def __contains__(self, *args): return _python_abstractbase.IntMultiset___contains__(self, *args)
    def __getitem__(self, *args): return _python_abstractbase.IntMultiset___getitem__(self, *args)
    def add(self, *args): return _python_abstractbase.IntMultiset_add(self, *args)
    def discard(self, *args): return _python_abstractbase.IntMultiset_discard(self, *args)
    def __init__(self, *args): 
        this = _python_abstractbase.new_IntMultiset(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _python_abstractbase.IntMultiset_empty(self)
    def size(self): return _python_abstractbase.IntMultiset_size(self)
    def clear(self): return _python_abstractbase.IntMultiset_clear(self)
    def swap(self, *args): return _python_abstractbase.IntMultiset_swap(self, *args)
    def count(self, *args): return _python_abstractbase.IntMultiset_count(self, *args)
    def begin(self): return _python_abstractbase.IntMultiset_begin(self)
    def end(self): return _python_abstractbase.IntMultiset_end(self)
    def rbegin(self): return _python_abstractbase.IntMultiset_rbegin(self)
    def rend(self): return _python_abstractbase.IntMultiset_rend(self)
    def erase(self, *args): return _python_abstractbase.IntMultiset_erase(self, *args)
    def find(self, *args): return _python_abstractbase.IntMultiset_find(self, *args)
    def lower_bound(self, *args): return _python_abstractbase.IntMultiset_lower_bound(self, *args)
    def upper_bound(self, *args): return _python_abstractbase.IntMultiset_upper_bound(self, *args)
    def equal_range(self, *args): return _python_abstractbase.IntMultiset_equal_range(self, *args)
    __swig_destroy__ = _python_abstractbase.delete_IntMultiset
    __del__ = lambda self : None;
IntMultiset_swigregister = _python_abstractbase.IntMultiset_swigregister
IntMultiset_swigregister(IntMultiset)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _python_abstractbase.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _python_abstractbase.IntVector___nonzero__(self)
    def __bool__(self): return _python_abstractbase.IntVector___bool__(self)
    def __len__(self): return _python_abstractbase.IntVector___len__(self)
    def pop(self): return _python_abstractbase.IntVector_pop(self)
    def __getslice__(self, *args): return _python_abstractbase.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _python_abstractbase.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _python_abstractbase.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _python_abstractbase.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _python_abstractbase.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _python_abstractbase.IntVector___setitem__(self, *args)
    def append(self, *args): return _python_abstractbase.IntVector_append(self, *args)
    def empty(self): return _python_abstractbase.IntVector_empty(self)
    def size(self): return _python_abstractbase.IntVector_size(self)
    def clear(self): return _python_abstractbase.IntVector_clear(self)
    def swap(self, *args): return _python_abstractbase.IntVector_swap(self, *args)
    def get_allocator(self): return _python_abstractbase.IntVector_get_allocator(self)
    def begin(self): return _python_abstractbase.IntVector_begin(self)
    def end(self): return _python_abstractbase.IntVector_end(self)
    def rbegin(self): return _python_abstractbase.IntVector_rbegin(self)
    def rend(self): return _python_abstractbase.IntVector_rend(self)
    def pop_back(self): return _python_abstractbase.IntVector_pop_back(self)
    def erase(self, *args): return _python_abstractbase.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _python_abstractbase.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _python_abstractbase.IntVector_push_back(self, *args)
    def front(self): return _python_abstractbase.IntVector_front(self)
    def back(self): return _python_abstractbase.IntVector_back(self)
    def assign(self, *args): return _python_abstractbase.IntVector_assign(self, *args)
    def resize(self, *args): return _python_abstractbase.IntVector_resize(self, *args)
    def insert(self, *args): return _python_abstractbase.IntVector_insert(self, *args)
    def reserve(self, *args): return _python_abstractbase.IntVector_reserve(self, *args)
    def capacity(self): return _python_abstractbase.IntVector_capacity(self)
    __swig_destroy__ = _python_abstractbase.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _python_abstractbase.IntVector_swigregister
IntVector_swigregister(IntVector)

class IntList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntList, name)
    __repr__ = _swig_repr
    def iterator(self): return _python_abstractbase.IntList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _python_abstractbase.IntList___nonzero__(self)
    def __bool__(self): return _python_abstractbase.IntList___bool__(self)
    def __len__(self): return _python_abstractbase.IntList___len__(self)
    def pop(self): return _python_abstractbase.IntList_pop(self)
    def __getslice__(self, *args): return _python_abstractbase.IntList___getslice__(self, *args)
    def __setslice__(self, *args): return _python_abstractbase.IntList___setslice__(self, *args)
    def __delslice__(self, *args): return _python_abstractbase.IntList___delslice__(self, *args)
    def __delitem__(self, *args): return _python_abstractbase.IntList___delitem__(self, *args)
    def __getitem__(self, *args): return _python_abstractbase.IntList___getitem__(self, *args)
    def __setitem__(self, *args): return _python_abstractbase.IntList___setitem__(self, *args)
    def append(self, *args): return _python_abstractbase.IntList_append(self, *args)
    def empty(self): return _python_abstractbase.IntList_empty(self)
    def size(self): return _python_abstractbase.IntList_size(self)
    def clear(self): return _python_abstractbase.IntList_clear(self)
    def swap(self, *args): return _python_abstractbase.IntList_swap(self, *args)
    def get_allocator(self): return _python_abstractbase.IntList_get_allocator(self)
    def begin(self): return _python_abstractbase.IntList_begin(self)
    def end(self): return _python_abstractbase.IntList_end(self)
    def rbegin(self): return _python_abstractbase.IntList_rbegin(self)
    def rend(self): return _python_abstractbase.IntList_rend(self)
    def pop_back(self): return _python_abstractbase.IntList_pop_back(self)
    def erase(self, *args): return _python_abstractbase.IntList_erase(self, *args)
    def __init__(self, *args): 
        this = _python_abstractbase.new_IntList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _python_abstractbase.IntList_push_back(self, *args)
    def front(self): return _python_abstractbase.IntList_front(self)
    def back(self): return _python_abstractbase.IntList_back(self)
    def assign(self, *args): return _python_abstractbase.IntList_assign(self, *args)
    def resize(self, *args): return _python_abstractbase.IntList_resize(self, *args)
    def insert(self, *args): return _python_abstractbase.IntList_insert(self, *args)
    def pop_front(self): return _python_abstractbase.IntList_pop_front(self)
    def push_front(self, *args): return _python_abstractbase.IntList_push_front(self, *args)
    def reverse(self): return _python_abstractbase.IntList_reverse(self)
    __swig_destroy__ = _python_abstractbase.delete_IntList
    __del__ = lambda self : None;
IntList_swigregister = _python_abstractbase.IntList_swigregister
IntList_swigregister(IntList)

# This file is compatible with both classic and new-style classes.


