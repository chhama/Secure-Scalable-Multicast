/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyObject_print,        /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyObject_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (flags & SWIG_POINTER_IMPLICIT_CONV) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  res = -1;
  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 


/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Python extensions.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#ifdef __cplusplus

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/* 
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR
#include <map>

namespace Swig {
  class Director;
  SWIGINTERN std::map<void*,Director*>& get_rtdir_map() {
    static std::map<void*,Director*> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void*,Director*>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void*>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void*>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {  

  /* memory handler */
  struct GCItem 
  {
    virtual ~GCItem() {}

    virtual int get_own() const
    {
      return 0;
    }
  };

  struct GCItem_var
  {
    GCItem_var(GCItem *item = 0) : _item(item)
    {
    }

    GCItem_var& operator=(GCItem *item)
    {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() 
    {
      delete _item;
    }
    
    GCItem * operator->() const
    {
      return _item;
    }
    
  private:
    GCItem *_item;
  };
  
  struct GCItem_Object : GCItem
  {
    GCItem_Object(int own) : _own(own)
    {
    }
    
    virtual ~GCItem_Object() 
    {
    }

    int get_own() const
    {
      return _own;
    }
    
  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem
  {
    GCItem_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCItem_T() 
    {
      delete _ptr;
    }
    
  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem
  {
    GCArray_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCArray_T() 
    {
      delete[] _ptr;
    }
    
  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char* hdr ="", const char* msg ="") 
      : swig_msg(hdr)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
      if (strlen(msg)) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, getMessage());
      }
      SWIG_PYTHON_THREAD_END_BLOCK; 
    }

    const char *getMessage() const
    { 
      return swig_msg.c_str(); 
    }

    static void raise(PyObject *error, const char *msg) 
    {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) 
    {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler 
  {
#ifdef SWIG_DIRECTOR_UEH
    static void handler()  {
      try {
        throw;
      } catch (DirectorException& e) {
        std::cerr << "SWIG Director exception caught:" << std::endl
                  << e.getMessage() << std::endl;
      } catch (std::exception& e) {
        std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
        std::cerr << "Unknown exception caught." << std::endl;
      }
      
      std::cerr << std::endl
                << "Python interpreter traceback:" << std::endl;
      PyErr_Print();
      std::cerr << std::endl;
      
      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
                << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
                << std::endl
                << "Exception is being re-thrown, program will likely abort/terminate." << std::endl;
      throw;
    }

  public:
    
    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler)
    {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler()
    {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char* msg="") 
      : Swig::DirectorException(error, "SWIG director type mismatch", msg)
    {
    }

    DirectorTypeMismatchException(const char* msg="") 
      : Swig::DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg)
    {
    }

    static void raise(PyObject *error, const char *msg)
    {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg)
    {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
  public:
    DirectorMethodException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg)
    {
    }    

    static void raise(const char *msg)
    {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException
  {
  public:
    DirectorPureVirtualException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg)
    { 
    }

    static void raise(const char *msg) 
    {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard
  {
    PyThread_type_lock & mutex_;
    
  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex)
    {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }
    
    ~Guard()
    {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex) 
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject* swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const { 
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
        Py_DECREF(swig_self); 
        SWIG_PYTHON_THREAD_END_BLOCK; 
      }
    }

  public:
    /* wrap a python object, optionally taking ownership */
    Director(PyObject* self) : swig_self(self), swig_disown_flag(false) {
      swig_incref();
    }


    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref(); 
    }


    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const { 
      return swig_self; 
    }

    /* acquire ownership of the wrapped python object (the sense of "disown"
     * is from python) */
    void swig_disown() const { 
      if (!swig_disown_flag) { 
        swig_disown_flag=true;
        swig_incref(); 
      } 
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const { 
      if (swig_disown_flag) {
        Py_INCREF(swig_self); 
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char* /* swig_protected_method_name */) const {
      return true;
    }
    
    virtual void swig_set_inner(const char* /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void*, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }
    
    template <typename Type>
    void swig_acquire_ownership(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const
    {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }
    
    int swig_release_ownership(void *vptr) const
    {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject* swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args))
    {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }

  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif /* __cplusplus */


#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Foo swig_types[0]
#define SWIGTYPE_p_Test swig_types[1]
#define SWIGTYPE_p_TestDirector swig_types[2]
#define SWIGTYPE_p_a_5__char swig_types[3]
#define SWIGTYPE_p_char swig_types[4]
#define SWIGTYPE_p_p_char swig_types[5]
#define SWIGTYPE_p_unsigned_int swig_types[6]
static swig_type_info *swig_types[8];
static swig_module_info swig_module = {swig_types, 7, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _primitive_types.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__primitive_types

#else
#  define SWIG_init    init_primitive_types

#endif
#define SWIG_name    "_primitive_types"

#define SWIGVERSION 0x020010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#if defined(_MSC_VER)
  #pragma warning(disable: 4290) // C++ exception specification ignored except to indicate a function is not __declspec(nothrow)
#endif


#include <stddef.h>
#include <iostream>
#include <sstream>


  // Integer class, only visible in C++
  struct MyInt
  {
    char name[5];
    int val;

    MyInt(int v = 0): val(v) {
    }
    
    operator int() const { return val; }
  };

  // Template primitive type, only visible in C++
  template <class T>
  struct Param
  {
    char name[5];
    T val;

    Param(T v = 0): val(v) {
      name[0] = 0;
      name[1] = 0;
      name[2] = 0;
      name[3] = 0;
      name[4] = 0;
    }
    
    operator T() const { return val; }
  };

  typedef char namet[5];
  extern namet gbl_namet;
  namet gbl_namet;



  enum Hello {
    Hi, Hola
  };

  typedef char namet[5];
  typedef char* pchar;
  typedef const char* pcharc;
  typedef char* pint;

  char* const def_pchar = (char *const)"hello";
  const char* const def_pcharc = "hija";

  const namet def_namet = {'h','o',0, 'l','a'};

  extern namet gbl_namet;

  char fixsize[8] =  {'h','o',0, 'l','a', 0, 0, 0};


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


  #define SWIG_From_long   PyLong_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_signed_SS_char  (signed char value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


  /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  bool val_bool(bool x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  signed char val_schar(signed char x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned char val_uchar(unsigned char x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  int val_int(int x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned int val_uint(unsigned int x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  short val_short(short x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned short val_ushort(unsigned short x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long val_long(long x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long val_ulong(unsigned long x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long long val_llong(long long x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long long val_ullong(unsigned long long x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  char val_char(char x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pchar val_pchar(pchar x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pcharc val_pcharc(pcharc x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pint val_pint(pint x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Hello val_hello(Hello x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  MyInt val_myint(MyInt x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<int> val_parami(Param<int> x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<double> val_paramd(Param<double> x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<char> val_paramc(Param<char> x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  size_t val_sizet(size_t x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
  /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const bool& ref_bool(const bool& x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const signed char& ref_schar(const signed char& x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned char& ref_uchar(const unsigned char& x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const int& ref_int(const int& x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned int& ref_uint(const unsigned int& x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const short& ref_short(const short& x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned short& ref_ushort(const unsigned short& x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long& ref_long(const long& x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long& ref_ulong(const unsigned long& x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long long& ref_llong(const long long& x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long long& ref_ullong(const unsigned long long& x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const char& ref_char(const char& x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pchar& ref_pchar(const pchar& x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pcharc& ref_pcharc(const pcharc& x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pint& ref_pint(const pint& x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Hello& ref_hello(const Hello& x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const MyInt& ref_myint(const MyInt& x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<int>& ref_parami(const Param<int>& x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<double>& ref_paramd(const Param<double>& x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<char>& ref_paramc(const Param<char>& x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const size_t& ref_sizet(const size_t& x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
  /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const bool cct_bool = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const signed char cct_schar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned char cct_uchar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const int cct_int = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned int cct_uint = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const short cct_short = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned short cct_ushort = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const long cct_long = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned long cct_ulong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const long long cct_llong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned long long cct_ullong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const char cct_char = 'H';
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const pchar cct_pchar = def_pchar;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const pcharc cct_pcharc = def_pcharc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const pint cct_pint = 0;
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const Hello cct_hello = Hola;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const MyInt cct_myint = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const Param<int> cct_parami = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const Param<double> cct_paramd = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const Param<char> cct_paramc = 'c';
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const size_t cct_sizet = 1;
/*@SWIG@*/
/*@SWIG@*/
  /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  bool var_bool;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  signed char var_schar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned char var_uchar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  int var_int;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned int var_uint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  short var_short;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned short var_ushort;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long var_long;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long var_ulong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long long var_llong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long long var_ullong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  char var_char;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pchar var_pchar;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pcharc var_pcharc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pint var_pint;
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Hello var_hello;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  MyInt var_myint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<int> var_parami;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<double> var_paramd;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<char> var_paramc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  size_t var_sizet;
/*@SWIG@*/
/*@SWIG@*/

  /*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  namet var_namet;
/*@SWIG@*/

  void var_init() 
  {
    var_pchar = 0;
    var_pcharc = 0;
    var_pint = 0;
    var_namet[0] = 'h';
  }
  


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_signed_SS_char (PyObject * obj, signed char *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SCHAR_MIN || v > SCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< signed char >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
#if PY_VERSION_HEX >= 0x03000000
      {
        long v = PyLong_AsLong(obj);
        if (!PyErr_Occurred()) {
          if (v < 0) {
            return SWIG_OverflowError;
          }
        } else {
          PyErr_Clear();
        }
      }
#endif
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}





SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  struct Foo
  {
    int _a;
    
    Foo (int a) : _a(a)
    {
    }
    
    Foo(const Foo&)
    {
    }

    Foo copy(Foo x) 
    {
      return x;
    }

    const Foo copy_c(const Foo x) 
    {
      return x;
    }

    const Foo& copy_r(const Foo& x) 
    {
      return x;
    }

    Foo* this_p() 
    {
      return this;
    }

    Foo& this_r() 
    {
      return *this;
    }
    
  };
  
  typedef Foo* foo_ptr;
  
  foo_ptr fptr_val(foo_ptr a) {
    return a;
  }

  const foo_ptr& fptr_ref(const foo_ptr& a) {
    return a;
  }
  
  
 struct Test 
 {
   Test()
     : var_pchar(0), var_pcharc(0), var_pint(0)
   {
   }

   virtual ~Test()
   {
   }
   
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const bool stc_bool = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const signed char stc_schar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned char stc_uchar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const int stc_int = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned int stc_uint = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const short stc_short = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned short stc_ushort = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const long stc_long = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned long stc_ulong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const long long stc_llong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned long long stc_ullong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const char stc_char = 'H';
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  bool var_bool;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  signed char var_schar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned char var_uchar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  int var_int;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned int var_uint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  short var_short;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned short var_ushort;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long var_long;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long var_ulong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long long var_llong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long long var_ullong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  char var_char;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pchar var_pchar;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pcharc var_pcharc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pint var_pint;
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Hello var_hello;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  MyInt var_myint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<int> var_parami;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<double> var_paramd;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<char> var_paramc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  size_t var_sizet;
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  namet var_namet;
/*@SWIG@*/


   const char* val_namet(namet x) throw(namet)
   {
     return x;
   }

   const char* val_cnamet(const namet x) throw(namet)
   {
     return x;
   }










   
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  bool val_bool(bool x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  signed char val_schar(signed char x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned char val_uchar(unsigned char x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  int val_int(int x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned int val_uint(unsigned int x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  short val_short(short x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned short val_ushort(unsigned short x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long val_long(long x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long val_ulong(unsigned long x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long long val_llong(long long x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long long val_ullong(unsigned long long x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  char val_char(char x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pchar val_pchar(pchar x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pcharc val_pcharc(pcharc x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pint val_pint(pint x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Hello val_hello(Hello x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  MyInt val_myint(MyInt x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<int> val_parami(Param<int> x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<double> val_paramd(Param<double> x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<char> val_paramc(Param<char> x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  size_t val_sizet(size_t x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const bool& ref_bool(const bool& x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const signed char& ref_schar(const signed char& x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned char& ref_uchar(const unsigned char& x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const int& ref_int(const int& x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned int& ref_uint(const unsigned int& x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const short& ref_short(const short& x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned short& ref_ushort(const unsigned short& x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long& ref_long(const long& x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long& ref_ulong(const unsigned long& x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long long& ref_llong(const long long& x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long long& ref_ullong(const unsigned long long& x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const char& ref_char(const char& x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pchar& ref_pchar(const pchar& x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pcharc& ref_pcharc(const pcharc& x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pint& ref_pint(const pint& x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Hello& ref_hello(const Hello& x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const MyInt& ref_myint(const MyInt& x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<int>& ref_parami(const Param<int>& x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<double>& ref_paramd(const Param<double>& x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<char>& ref_paramc(const Param<char>& x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const size_t& ref_sizet(const size_t& x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/

   int c_check() 
   {
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  bool val_tmpbool = 1;
  if (val_bool(val_tmpbool) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_bool(val_tmpbool);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  signed char val_tmpschar = 1;
  if (val_schar(val_tmpschar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_schar(val_tmpschar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned char val_tmpuchar = 1;
  if (val_uchar(val_tmpuchar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_uchar(val_tmpuchar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  int val_tmpint = 1;
  if (val_int(val_tmpint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_int(val_tmpint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned int val_tmpuint = 1;
  if (val_uint(val_tmpuint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_uint(val_tmpuint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  short val_tmpshort = 1;
  if (val_short(val_tmpshort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_short(val_tmpshort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned short val_tmpushort = 1;
  if (val_ushort(val_tmpushort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_ushort(val_tmpushort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long val_tmplong = 1;
  if (val_long(val_tmplong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_long(val_tmplong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long val_tmpulong = 1;
  if (val_ulong(val_tmpulong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_ulong(val_tmpulong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long long val_tmpllong = 1;
  if (val_llong(val_tmpllong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_llong(val_tmpllong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long long val_tmpullong = 1;
  if (val_ullong(val_tmpullong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_ullong(val_tmpullong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  char val_tmpchar = 'H';
  if (val_char(val_tmpchar) != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << val_char(val_tmpchar);
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pchar val_tmppchar = def_pchar;
  if (val_pchar(val_tmppchar) != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << val_pchar(val_tmppchar);
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pcharc val_tmppcharc = def_pcharc;
  if (val_pcharc(val_tmppcharc) != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << val_pcharc(val_tmppcharc);
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pint val_tmppint = 0;
  if (val_pint(val_tmppint) != 0) {
    std::ostringstream a; std::ostringstream b;
    a << val_pint(val_tmppint);
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Hello val_tmphello = Hola;
  if (val_hello(val_tmphello) != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << val_hello(val_tmphello);
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  MyInt val_tmpmyint = 1;
  if (val_myint(val_tmpmyint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_myint(val_tmpmyint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<int> val_tmpparami = 1;
  if (val_parami(val_tmpparami) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_parami(val_tmpparami);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<double> val_tmpparamd = 1;
  if (val_paramd(val_tmpparamd) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_paramd(val_tmpparamd);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<char> val_tmpparamc = 'c';
  if (val_paramc(val_tmpparamc) != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << val_paramc(val_tmpparamc);
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  size_t val_tmpsizet = 1;
  if (val_sizet(val_tmpsizet) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_sizet(val_tmpsizet);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  bool ref_tmpbool = 1;
  if (ref_bool(ref_tmpbool) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_bool(ref_tmpbool);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  signed char ref_tmpschar = 1;
  if (ref_schar(ref_tmpschar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_schar(ref_tmpschar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned char ref_tmpuchar = 1;
  if (ref_uchar(ref_tmpuchar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_uchar(ref_tmpuchar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  int ref_tmpint = 1;
  if (ref_int(ref_tmpint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_int(ref_tmpint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned int ref_tmpuint = 1;
  if (ref_uint(ref_tmpuint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_uint(ref_tmpuint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  short ref_tmpshort = 1;
  if (ref_short(ref_tmpshort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_short(ref_tmpshort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned short ref_tmpushort = 1;
  if (ref_ushort(ref_tmpushort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_ushort(ref_tmpushort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long ref_tmplong = 1;
  if (ref_long(ref_tmplong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_long(ref_tmplong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long ref_tmpulong = 1;
  if (ref_ulong(ref_tmpulong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_ulong(ref_tmpulong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long long ref_tmpllong = 1;
  if (ref_llong(ref_tmpllong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_llong(ref_tmpllong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long long ref_tmpullong = 1;
  if (ref_ullong(ref_tmpullong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_ullong(ref_tmpullong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  char ref_tmpchar = 'H';
  if (ref_char(ref_tmpchar) != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << ref_char(ref_tmpchar);
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pchar ref_tmppchar = def_pchar;
  if (ref_pchar(ref_tmppchar) != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << ref_pchar(ref_tmppchar);
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pcharc ref_tmppcharc = def_pcharc;
  if (ref_pcharc(ref_tmppcharc) != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << ref_pcharc(ref_tmppcharc);
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pint ref_tmppint = 0;
  if (ref_pint(ref_tmppint) != 0) {
    std::ostringstream a; std::ostringstream b;
    a << ref_pint(ref_tmppint);
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Hello ref_tmphello = Hola;
  if (ref_hello(ref_tmphello) != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << ref_hello(ref_tmphello);
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  MyInt ref_tmpmyint = 1;
  if (ref_myint(ref_tmpmyint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_myint(ref_tmpmyint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<int> ref_tmpparami = 1;
  if (ref_parami(ref_tmpparami) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_parami(ref_tmpparami);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<double> ref_tmpparamd = 1;
  if (ref_paramd(ref_tmpparamd) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_paramd(ref_tmpparamd);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<char> ref_tmpparamc = 'c';
  if (ref_paramc(ref_tmpparamc) != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << ref_paramc(ref_tmpparamc);
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  size_t ref_tmpsizet = 1;
  if (ref_sizet(ref_tmpsizet) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_sizet(ref_tmpsizet);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     return 1;
   }

   int v_check() 
   {
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << stc_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << var_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pchar != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << var_pchar;
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pcharc != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << var_pcharc;
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pint != 0) {
    std::ostringstream a; std::ostringstream b;
    a << var_pint;
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_hello != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << var_hello;
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_myint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_myint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_parami != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_parami;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramd != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_paramd;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramc != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << var_paramc;
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_sizet != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_sizet;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_namet != def_namet) {
    std::ostringstream a; std::ostringstream b;
    a << var_namet;
    b << def_namet;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""namet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/;
     return 1;
   }

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(bool x) { return 1; }
  virtual int ovr_ref(const bool& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(signed char x) { return 1; }
  virtual int ovr_ref(const signed char& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned char x) { return 1; }
  virtual int ovr_ref(const unsigned char& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(int x) { return 1; }
  virtual int ovr_ref(const int& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned int x) { return 1; }
  virtual int ovr_ref(const unsigned int& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(short x) { return 1; }
  virtual int ovr_ref(const short& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned short x) { return 1; }
  virtual int ovr_ref(const unsigned short& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(long x) { return 1; }
  virtual int ovr_ref(const long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned long x) { return 1; }
  virtual int ovr_ref(const unsigned long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(long long x) { return 1; }
  virtual int ovr_ref(const long long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned long long x) { return 1; }
  virtual int ovr_ref(const unsigned long long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(char x) { return 1; }
  virtual int ovr_ref(const char& x) { return 1; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(pchar x) { return 1; }
  virtual int ovr_ref(const pchar& x) { return 1; }
/*@SWIG@*/
/*@SWIG@*/

   static const double stc_double;
   static const double stc_float;
 };

 struct TestDirector
 {
   TestDirector()
     : var_pchar(0), var_pcharc(0), var_pint(0)
   {
   }

   
   virtual ~TestDirector()
   {
     var_namet[0]='h';
   }

   virtual const char* vval_namet(namet x) throw(namet)
   {
     return x;
   }

   virtual const char* vval_cnamet(const namet x) throw(namet)
   {
     return x;
   }











   /*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const bool stc_bool = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const signed char stc_schar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned char stc_uchar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const int stc_int = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned int stc_uint = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const short stc_short = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned short stc_ushort = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const long stc_long = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned long stc_ulong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const long long stc_llong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned long long stc_ullong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const char stc_char = 'H';
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  bool var_bool;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  signed char var_schar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned char var_uchar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  int var_int;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned int var_uint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  short var_short;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned short var_ushort;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long var_long;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long var_ulong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long long var_llong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long long var_ullong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  char var_char;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pchar var_pchar;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pcharc var_pcharc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pint var_pint;
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Hello var_hello;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  MyInt var_myint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<int> var_parami;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<double> var_paramd;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<char> var_paramc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  size_t var_sizet;
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  namet var_namet;
/*@SWIG@*/

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  bool val_bool(bool x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  signed char val_schar(signed char x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned char val_uchar(unsigned char x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  int val_int(int x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned int val_uint(unsigned int x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  short val_short(short x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned short val_ushort(unsigned short x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long val_long(long x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long val_ulong(unsigned long x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long long val_llong(long long x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long long val_ullong(unsigned long long x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  char val_char(char x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pchar val_pchar(pchar x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pcharc val_pcharc(pcharc x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pint val_pint(pint x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Hello val_hello(Hello x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  MyInt val_myint(MyInt x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<int> val_parami(Param<int> x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<double> val_paramd(Param<double> x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<char> val_paramc(Param<char> x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  size_t val_sizet(size_t x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const bool& ref_bool(const bool& x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const signed char& ref_schar(const signed char& x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned char& ref_uchar(const unsigned char& x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const int& ref_int(const int& x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned int& ref_uint(const unsigned int& x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const short& ref_short(const short& x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned short& ref_ushort(const unsigned short& x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long& ref_long(const long& x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long& ref_ulong(const unsigned long& x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long long& ref_llong(const long long& x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long long& ref_ullong(const unsigned long long& x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const char& ref_char(const char& x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pchar& ref_pchar(const pchar& x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pcharc& ref_pcharc(const pcharc& x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pint& ref_pint(const pint& x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Hello& ref_hello(const Hello& x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const MyInt& ref_myint(const MyInt& x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<int>& ref_parami(const Param<int>& x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<double>& ref_paramd(const Param<double>& x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<char>& ref_paramc(const Param<char>& x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const size_t& ref_sizet(const size_t& x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  bool vval_bool(bool x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  signed char vval_schar(signed char x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned char vval_uchar(unsigned char x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  int vval_int(int x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned int vval_uint(unsigned int x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  short vval_short(short x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned short vval_ushort(unsigned short x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long vval_long(long x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long vval_ulong(unsigned long x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long long vval_llong(long long x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long long vval_ullong(unsigned long long x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  char vval_char(char x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pchar vval_pchar(pchar x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pcharc vval_pcharc(pcharc x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pint vval_pint(pint x) throw (pint) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Hello vval_hello(Hello x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  MyInt vval_myint(MyInt x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<int> vval_parami(Param<int> x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<double> vval_paramd(Param<double> x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<char> vval_paramc(Param<char> x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  size_t vval_sizet(size_t x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const bool& vref_bool(const bool& x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const signed char& vref_schar(const signed char& x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned char& vref_uchar(const unsigned char& x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const int& vref_int(const int& x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned int& vref_uint(const unsigned int& x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const short& vref_short(const short& x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned short& vref_ushort(const unsigned short& x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long& vref_long(const long& x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long& vref_ulong(const unsigned long& x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long long& vref_llong(const long long& x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long long& vref_ullong(const unsigned long long& x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const char& vref_char(const char& x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pchar& vref_pchar(const pchar& x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pcharc& vref_pcharc(const pcharc& x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pint& vref_pint(const pint& x) throw (pint) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Hello& vref_hello(const Hello& x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const MyInt& vref_myint(const MyInt& x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<int>& vref_parami(const Param<int>& x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<double>& vref_paramd(const Param<double>& x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<char>& vref_paramc(const Param<char>& x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const size_t& vref_sizet(const size_t& x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  bool wrp_vref_bool(bool x) { 
    return vref_bool(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  signed char wrp_vref_schar(signed char x) { 
    return vref_schar(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned char wrp_vref_uchar(unsigned char x) { 
    return vref_uchar(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  int wrp_vref_int(int x) { 
    return vref_int(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned int wrp_vref_uint(unsigned int x) { 
    return vref_uint(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  short wrp_vref_short(short x) { 
    return vref_short(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned short wrp_vref_ushort(unsigned short x) { 
    return vref_ushort(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  long wrp_vref_long(long x) { 
    return vref_long(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned long wrp_vref_ulong(unsigned long x) { 
    return vref_ulong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  long long wrp_vref_llong(long long x) { 
    return vref_llong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned long long wrp_vref_ullong(unsigned long long x) { 
    return vref_ullong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  char wrp_vref_char(char x) { 
    return vref_char(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pchar wrp_vref_pchar(pchar x) { 
    return vref_pchar(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pcharc wrp_vref_pcharc(pcharc x) { 
    return vref_pcharc(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pint wrp_vref_pint(pint x) { 
    return vref_pint(x); 
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Hello wrp_vref_hello(Hello x) { 
    return vref_hello(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  MyInt wrp_vref_myint(MyInt x) { 
    return vref_myint(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<int> wrp_vref_parami(Param<int> x) { 
    return vref_parami(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<double> wrp_vref_paramd(Param<double> x) { 
    return vref_paramd(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<char> wrp_vref_paramc(Param<char> x) { 
    return vref_paramc(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  size_t wrp_vref_sizet(size_t x) { 
    return vref_sizet(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  bool wrp_vval_bool(bool x) { 
    return vval_bool(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  signed char wrp_vval_schar(signed char x) { 
    return vval_schar(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned char wrp_vval_uchar(unsigned char x) { 
    return vval_uchar(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  int wrp_vval_int(int x) { 
    return vval_int(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned int wrp_vval_uint(unsigned int x) { 
    return vval_uint(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  short wrp_vval_short(short x) { 
    return vval_short(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned short wrp_vval_ushort(unsigned short x) { 
    return vval_ushort(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  long wrp_vval_long(long x) { 
    return vval_long(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned long wrp_vval_ulong(unsigned long x) { 
    return vval_ulong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  long long wrp_vval_llong(long long x) { 
    return vval_llong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned long long wrp_vval_ullong(unsigned long long x) { 
    return vval_ullong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  char wrp_vval_char(char x) { 
    return vval_char(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pchar wrp_vval_pchar(pchar x) { 
    return vval_pchar(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pcharc wrp_vval_pcharc(pcharc x) { 
    return vval_pcharc(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pint wrp_vval_pint(pint x) { 
    return vval_pint(x); 
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Hello wrp_vval_hello(Hello x) { 
    return vval_hello(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  MyInt wrp_vval_myint(MyInt x) { 
    return vval_myint(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<int> wrp_vval_parami(Param<int> x) { 
    return vval_parami(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<double> wrp_vval_paramd(Param<double> x) { 
    return vval_paramd(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<char> wrp_vval_paramc(Param<char> x) { 
    return vval_paramc(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  size_t wrp_vval_sizet(size_t x) { 
    return vval_sizet(x); 
  }
/*@SWIG@*/
/*@SWIG@*/

   int c_check() 
   {
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  bool vval_tmpbool = 1;
  if (vval_bool(vval_tmpbool) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_bool(vval_tmpbool);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  signed char vval_tmpschar = 1;
  if (vval_schar(vval_tmpschar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_schar(vval_tmpschar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned char vval_tmpuchar = 1;
  if (vval_uchar(vval_tmpuchar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_uchar(vval_tmpuchar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  int vval_tmpint = 1;
  if (vval_int(vval_tmpint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_int(vval_tmpint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned int vval_tmpuint = 1;
  if (vval_uint(vval_tmpuint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_uint(vval_tmpuint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  short vval_tmpshort = 1;
  if (vval_short(vval_tmpshort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_short(vval_tmpshort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned short vval_tmpushort = 1;
  if (vval_ushort(vval_tmpushort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_ushort(vval_tmpushort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long vval_tmplong = 1;
  if (vval_long(vval_tmplong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_long(vval_tmplong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long vval_tmpulong = 1;
  if (vval_ulong(vval_tmpulong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_ulong(vval_tmpulong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long long vval_tmpllong = 1;
  if (vval_llong(vval_tmpllong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_llong(vval_tmpllong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long long vval_tmpullong = 1;
  if (vval_ullong(vval_tmpullong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_ullong(vval_tmpullong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  char vval_tmpchar = 'H';
  if (vval_char(vval_tmpchar) != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << vval_char(vval_tmpchar);
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pchar vval_tmppchar = def_pchar;
  if (vval_pchar(vval_tmppchar) != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << vval_pchar(vval_tmppchar);
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pcharc vval_tmppcharc = def_pcharc;
  if (vval_pcharc(vval_tmppcharc) != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << vval_pcharc(vval_tmppcharc);
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pint vval_tmppint = 0;
  if (vval_pint(vval_tmppint) != 0) {
    std::ostringstream a; std::ostringstream b;
    a << vval_pint(vval_tmppint);
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Hello vval_tmphello = Hola;
  if (vval_hello(vval_tmphello) != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << vval_hello(vval_tmphello);
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  MyInt vval_tmpmyint = 1;
  if (vval_myint(vval_tmpmyint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_myint(vval_tmpmyint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<int> vval_tmpparami = 1;
  if (vval_parami(vval_tmpparami) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_parami(vval_tmpparami);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<double> vval_tmpparamd = 1;
  if (vval_paramd(vval_tmpparamd) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_paramd(vval_tmpparamd);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<char> vval_tmpparamc = 'c';
  if (vval_paramc(vval_tmpparamc) != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << vval_paramc(vval_tmpparamc);
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  size_t vval_tmpsizet = 1;
  if (vval_sizet(vval_tmpsizet) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_sizet(vval_tmpsizet);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  bool vref_tmpbool = 1;
  if (vref_bool(vref_tmpbool) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_bool(vref_tmpbool);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  signed char vref_tmpschar = 1;
  if (vref_schar(vref_tmpschar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_schar(vref_tmpschar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned char vref_tmpuchar = 1;
  if (vref_uchar(vref_tmpuchar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_uchar(vref_tmpuchar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  int vref_tmpint = 1;
  if (vref_int(vref_tmpint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_int(vref_tmpint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned int vref_tmpuint = 1;
  if (vref_uint(vref_tmpuint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_uint(vref_tmpuint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  short vref_tmpshort = 1;
  if (vref_short(vref_tmpshort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_short(vref_tmpshort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned short vref_tmpushort = 1;
  if (vref_ushort(vref_tmpushort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_ushort(vref_tmpushort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long vref_tmplong = 1;
  if (vref_long(vref_tmplong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_long(vref_tmplong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long vref_tmpulong = 1;
  if (vref_ulong(vref_tmpulong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_ulong(vref_tmpulong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long long vref_tmpllong = 1;
  if (vref_llong(vref_tmpllong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_llong(vref_tmpllong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long long vref_tmpullong = 1;
  if (vref_ullong(vref_tmpullong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_ullong(vref_tmpullong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  char vref_tmpchar = 'H';
  if (vref_char(vref_tmpchar) != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << vref_char(vref_tmpchar);
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pchar vref_tmppchar = def_pchar;
  if (vref_pchar(vref_tmppchar) != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << vref_pchar(vref_tmppchar);
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pcharc vref_tmppcharc = def_pcharc;
  if (vref_pcharc(vref_tmppcharc) != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << vref_pcharc(vref_tmppcharc);
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pint vref_tmppint = 0;
  if (vref_pint(vref_tmppint) != 0) {
    std::ostringstream a; std::ostringstream b;
    a << vref_pint(vref_tmppint);
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Hello vref_tmphello = Hola;
  if (vref_hello(vref_tmphello) != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << vref_hello(vref_tmphello);
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  MyInt vref_tmpmyint = 1;
  if (vref_myint(vref_tmpmyint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_myint(vref_tmpmyint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<int> vref_tmpparami = 1;
  if (vref_parami(vref_tmpparami) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_parami(vref_tmpparami);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<double> vref_tmpparamd = 1;
  if (vref_paramd(vref_tmpparamd) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_paramd(vref_tmpparamd);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<char> vref_tmpparamc = 'c';
  if (vref_paramc(vref_tmpparamc) != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << vref_paramc(vref_tmpparamc);
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  size_t vref_tmpsizet = 1;
  if (vref_sizet(vref_tmpsizet) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_sizet(vref_tmpsizet);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     return 1;
   }

   int v_check() 
   {
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << stc_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << var_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pchar != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << var_pchar;
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pcharc != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << var_pcharc;
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pint != 0) {
    std::ostringstream a; std::ostringstream b;
    a << var_pint;
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_hello != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << var_hello;
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_myint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_myint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_parami != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_parami;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramd != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_paramd;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramc != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << var_paramc;
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_sizet != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_sizet;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     return 1;
   }

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(bool x) { return 1; }
  virtual int ovr_ref(const bool& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(signed char x) { return 1; }
  virtual int ovr_ref(const signed char& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned char x) { return 1; }
  virtual int ovr_ref(const unsigned char& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(int x) { return 1; }
  virtual int ovr_ref(const int& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned int x) { return 1; }
  virtual int ovr_ref(const unsigned int& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(short x) { return 1; }
  virtual int ovr_ref(const short& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned short x) { return 1; }
  virtual int ovr_ref(const unsigned short& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(long x) { return 1; }
  virtual int ovr_ref(const long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned long x) { return 1; }
  virtual int ovr_ref(const unsigned long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(long long x) { return 1; }
  virtual int ovr_ref(const long long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned long long x) { return 1; }
  virtual int ovr_ref(const unsigned long long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(char x) { return 1; }
  virtual int ovr_ref(const char& x) { return 1; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(pchar x) { return 1; }
  virtual int ovr_ref(const pchar& x) { return 1; }
/*@SWIG@*/
/*@SWIG@*/
   

   virtual Test* vtest(Test* t) const throw (Test)
   {
     return t;
   }
   
 }; 

 int v_check() 
 {
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << cct_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_pchar != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << cct_pchar;
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_pcharc != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << cct_pcharc;
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_pint != 0) {
    std::ostringstream a; std::ostringstream b;
    a << cct_pint;
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_hello != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << cct_hello;
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_myint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_myint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_parami != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_parami;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_paramd != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_paramd;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_paramc != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << cct_paramc;
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_sizet != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_sizet;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << var_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pchar != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << var_pchar;
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pcharc != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << var_pcharc;
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pint != 0) {
    std::ostringstream a; std::ostringstream b;
    a << var_pint;
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_hello != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << var_hello;
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_myint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_myint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_parami != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_parami;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramd != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_paramd;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramc != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << var_paramc;
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_sizet != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_sizet;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_namet != def_namet) {
    std::ostringstream a; std::ostringstream b;
    a << var_namet;
    b << def_namet;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""namet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/;
   return 1;
 }




  const char* char_foo(float f, const char *s) {
    return s;
  }
  
  int char_foo(double d, int i) {
    return i;
  }
  


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


  const double Test::stc_double = 1;
  const double Test::stc_float = 1;


    namespace DCTypes
    {
        typedef const unsigned int cuint;
    }

    namespace DCSystem
    {
        using namespace DCTypes;
        unsigned int SetPos(cuint& x, cuint& y) {return x + y;}
    }

    double val_double_2(double x, const double& y = 3.0) {
      return x + y;
    } 

    double val_double(double x) {
      return x;
    } 

    float val_float_2(float x, const float& y = 3.0) {
      return x + y;
    } 

    // Regression test for bug1699646 - we weren't handling
    // + or - after e for float constants.
    float regression_test_for_bug1699646(float f = 1e-02f) {
      return f;
    } 

    float val_float(float x) {
      return x;
    } 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


  static char *new_pchar(size_t nelements) { 
    return (new char[nelements]);
  }

  static void delete_pchar(char *ary) {
    delete[] ary;
  }

  static char pchar_getitem(char *ary, size_t index) {
    return ary[index];
  }
  static void pchar_setitem(char *ary, size_t index, char value) {
    ary[index] = value;
  }



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "primitive_types_wrap.h"

SwigDirector_TestDirector::SwigDirector_TestDirector(PyObject *self): TestDirector(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((TestDirector *)this, this); 
}




SwigDirector_TestDirector::~SwigDirector_TestDirector() {
}

char const *SwigDirector_TestDirector::vval_namet(namet x) throw(namet) {
  int res ;
  char *buf = 0 ;
  int alloc = SWIG_NEWOBJ ;
  
  char *c_result;
  swig::SwigVar_PyObject obj0;
  {
    size_t size = 5;
    
    while (size && (x[size - 1] == '\0')) --size;
    
    obj0 = SWIG_FromCharPtrAndSize(x, size);
  }
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "vval_namet";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_namet", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_namet'");
    }
  }
  res = SWIG_AsCharPtrAndSize(result, &buf, NULL, &alloc);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""char const *""'");
  }
  if (alloc == SWIG_NEWOBJ) {
    swig_acquire_ownership_array(buf);
  }
  c_result = reinterpret_cast< char * >(buf);
  return (char const *) c_result;
}


char const *SwigDirector_TestDirector::vval_cnamet(namet const x) throw(namet) {
  int res ;
  char *buf = 0 ;
  int alloc = SWIG_NEWOBJ ;
  
  char *c_result;
  swig::SwigVar_PyObject obj0;
  {
    size_t size = 5;
    
    while (size && (x[size - 1] == '\0')) --size;
    
    obj0 = SWIG_FromCharPtrAndSize(x, size);
  }
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char * const swig_method_name = "vval_cnamet";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_cnamet", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_cnamet'");
    }
  }
  res = SWIG_AsCharPtrAndSize(result, &buf, NULL, &alloc);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""char const *""'");
  }
  if (alloc == SWIG_NEWOBJ) {
    swig_acquire_ownership_array(buf);
  }
  c_result = reinterpret_cast< char * >(buf);
  return (char const *) c_result;
}


bool SwigDirector_TestDirector::vval_bool(bool x) throw(bool) {
  bool c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_bool(static_cast< bool >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char * const swig_method_name = "vval_bool";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_bool", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_bool'");
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


signed char SwigDirector_TestDirector::vval_schar(signed char x) throw(signed char) {
  signed char c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_signed_SS_char(static_cast< signed char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char * const swig_method_name = "vval_schar";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_schar", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_schar'");
    }
  }
  signed char swig_val;
  int swig_res = SWIG_AsVal_signed_SS_char(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""signed char""'");
  }
  c_result = static_cast< signed char >(swig_val);
  return (signed char) c_result;
}


unsigned char SwigDirector_TestDirector::vval_uchar(unsigned char x) throw(unsigned char) {
  unsigned char c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char * const swig_method_name = "vval_uchar";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_uchar", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_uchar'");
    }
  }
  unsigned char swig_val;
  int swig_res = SWIG_AsVal_unsigned_SS_char(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""unsigned char""'");
  }
  c_result = static_cast< unsigned char >(swig_val);
  return (unsigned char) c_result;
}


int SwigDirector_TestDirector::vval_int(int x) throw(int) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char * const swig_method_name = "vval_int";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_int", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_int'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


unsigned int SwigDirector_TestDirector::vval_uint(unsigned int x) throw(unsigned int) {
  unsigned int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char * const swig_method_name = "vval_uint";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_uint", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_uint'");
    }
  }
  unsigned int swig_val;
  int swig_res = SWIG_AsVal_unsigned_SS_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""unsigned int""'");
  }
  c_result = static_cast< unsigned int >(swig_val);
  return (unsigned int) c_result;
}


short SwigDirector_TestDirector::vval_short(short x) throw(short) {
  short c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_short(static_cast< short >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 7;
  const char * const swig_method_name = "vval_short";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_short", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_short'");
    }
  }
  short swig_val;
  int swig_res = SWIG_AsVal_short(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""short""'");
  }
  c_result = static_cast< short >(swig_val);
  return (short) c_result;
}


unsigned short SwigDirector_TestDirector::vval_ushort(unsigned short x) throw(unsigned short) {
  unsigned short c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 8;
  const char * const swig_method_name = "vval_ushort";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_ushort", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_ushort'");
    }
  }
  unsigned short swig_val;
  int swig_res = SWIG_AsVal_unsigned_SS_short(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""unsigned short""'");
  }
  c_result = static_cast< unsigned short >(swig_val);
  return (unsigned short) c_result;
}


long SwigDirector_TestDirector::vval_long(long x) throw(long) {
  long c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_long(static_cast< long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 9;
  const char * const swig_method_name = "vval_long";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_long", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_long'");
    }
  }
  long swig_val;
  int swig_res = SWIG_AsVal_long(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""long""'");
  }
  c_result = static_cast< long >(swig_val);
  return (long) c_result;
}


unsigned long SwigDirector_TestDirector::vval_ulong(unsigned long x) throw(unsigned long) {
  unsigned long c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 10;
  const char * const swig_method_name = "vval_ulong";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_ulong", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_ulong'");
    }
  }
  unsigned long swig_val;
  int swig_res = SWIG_AsVal_unsigned_SS_long(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""unsigned long""'");
  }
  c_result = static_cast< unsigned long >(swig_val);
  return (unsigned long) c_result;
}


long long SwigDirector_TestDirector::vval_llong(long long x) throw(long long) {
  long long c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_long_SS_long(static_cast< long long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 11;
  const char * const swig_method_name = "vval_llong";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_llong", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_llong'");
    }
  }
  long long swig_val;
  int swig_res = SWIG_AsVal_long_SS_long(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""long long""'");
  }
  c_result = static_cast< long long >(swig_val);
  return (long long) c_result;
}


unsigned long long SwigDirector_TestDirector::vval_ullong(unsigned long long x) throw(unsigned long long) {
  unsigned long long c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 12;
  const char * const swig_method_name = "vval_ullong";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_ullong", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_ullong'");
    }
  }
  unsigned long long swig_val;
  int swig_res = SWIG_AsVal_unsigned_SS_long_SS_long(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""unsigned long long""'");
  }
  c_result = static_cast< unsigned long long >(swig_val);
  return (unsigned long long) c_result;
}


char SwigDirector_TestDirector::vval_char(char x) throw(char) {
  char c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_char(static_cast< char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 13;
  const char * const swig_method_name = "vval_char";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_char", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_char'");
    }
  }
  char swig_val;
  int swig_res = SWIG_AsVal_char(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""char""'");
  }
  c_result = static_cast< char >(swig_val);
  return (char) c_result;
}


pchar SwigDirector_TestDirector::vval_pchar(pchar x) throw(pchar) {
  int res ;
  char *buf = 0 ;
  int alloc = SWIG_NEWOBJ ;
  
  pchar c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)x);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 14;
  const char * const swig_method_name = "vval_pchar";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_pchar", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_pchar'");
    }
  }
  res = SWIG_AsCharPtrAndSize(result, &buf, NULL, &alloc);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""pchar""'");
  }
  if (alloc == SWIG_NEWOBJ) {
    swig_acquire_ownership_array(buf);
  }
  c_result = reinterpret_cast< pchar >(buf);
  return (pchar) c_result;
}


pcharc SwigDirector_TestDirector::vval_pcharc(pcharc x) throw(pcharc) {
  int res ;
  char *buf = 0 ;
  int alloc = SWIG_NEWOBJ ;
  
  pcharc c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)x);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 15;
  const char * const swig_method_name = "vval_pcharc";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_pcharc", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_pcharc'");
    }
  }
  res = SWIG_AsCharPtrAndSize(result, &buf, NULL, &alloc);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""pcharc""'");
  }
  if (alloc == SWIG_NEWOBJ) {
    swig_acquire_ownership_array(buf);
  }
  c_result = reinterpret_cast< pcharc >(buf);
  return (pcharc) c_result;
}


pint SwigDirector_TestDirector::vval_pint(pint x) throw(pint) {
  void *argp ;
  int res ;
  
  pint c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(x), SWIGTYPE_p_char,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 16;
  const char * const swig_method_name = "vval_pint";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_pint", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_pint'");
    }
  }
  res = SWIG_ConvertPtr(result, &argp, 0, 0);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""pint""'");
  }
  c_result = reinterpret_cast< pint >(argp);
  return (pint) c_result;
}


Hello SwigDirector_TestDirector::vval_hello(Hello x) throw(Hello) {
  Hello c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 17;
  const char * const swig_method_name = "vval_hello";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_hello", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_hello'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""Hello""'");
  }
  c_result = static_cast< Hello >(swig_val);
  return (Hello) c_result;
}


MyInt SwigDirector_TestDirector::vval_myint(MyInt x) throw(MyInt) {
  MyInt c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 18;
  const char * const swig_method_name = "vval_myint";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_myint", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_myint'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""MyInt""'");
  }
  c_result = static_cast< MyInt >(swig_val);
  return (MyInt) c_result;
}


Param< int > SwigDirector_TestDirector::vval_parami(Param< int > x) throw(Param< int >) {
  Param< int > c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 19;
  const char * const swig_method_name = "vval_parami";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_parami", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_parami'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""Param< int >""'");
  }
  c_result = static_cast< Param< int > >(swig_val);
  return (Param< int >) c_result;
}


Param< double > SwigDirector_TestDirector::vval_paramd(Param< double > x) throw(Param< double >) {
  Param< double > c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_double(static_cast< double >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 20;
  const char * const swig_method_name = "vval_paramd";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_paramd", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_paramd'");
    }
  }
  double swig_val;
  int swig_res = SWIG_AsVal_double(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""Param< double >""'");
  }
  c_result = static_cast< Param< double > >(swig_val);
  return (Param< double >) c_result;
}


Param< char > SwigDirector_TestDirector::vval_paramc(Param< char > x) throw(Param< char >) {
  Param< char > c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_char(static_cast< char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 21;
  const char * const swig_method_name = "vval_paramc";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_paramc", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_paramc'");
    }
  }
  char swig_val;
  int swig_res = SWIG_AsVal_char(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""Param< char >""'");
  }
  c_result = static_cast< Param< char > >(swig_val);
  return (Param< char >) c_result;
}


size_t SwigDirector_TestDirector::vval_sizet(size_t x) throw(size_t) {
  size_t c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_size_t(static_cast< size_t >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 22;
  const char * const swig_method_name = "vval_sizet";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vval_sizet", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vval_sizet'");
    }
  }
  size_t swig_val;
  int swig_res = SWIG_AsVal_size_t(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""size_t""'");
  }
  c_result = static_cast< size_t >(swig_val);
  return (size_t) c_result;
}


bool const &SwigDirector_TestDirector::vref_bool(bool const &x) throw(bool) {
  bool *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_bool(static_cast< bool >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 23;
  const char * const swig_method_name = "vref_bool";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_bool", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_bool'");
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool const &""'");
  } 
  bool *temp = new bool((bool)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (bool const &) *c_result;
}


signed char const &SwigDirector_TestDirector::vref_schar(signed char const &x) throw(signed char) {
  signed char *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_signed_SS_char(static_cast< signed char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 24;
  const char * const swig_method_name = "vref_schar";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_schar", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_schar'");
    }
  }
  signed char swig_val;
  int swig_res = SWIG_AsVal_signed_SS_char(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""signed char const &""'");
  } 
  signed char *temp = new signed char((signed char)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (signed char const &) *c_result;
}


unsigned char const &SwigDirector_TestDirector::vref_uchar(unsigned char const &x) throw(unsigned char) {
  unsigned char *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 25;
  const char * const swig_method_name = "vref_uchar";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_uchar", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_uchar'");
    }
  }
  unsigned char swig_val;
  int swig_res = SWIG_AsVal_unsigned_SS_char(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""unsigned char const &""'");
  } 
  unsigned char *temp = new unsigned char((unsigned char)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (unsigned char const &) *c_result;
}


int const &SwigDirector_TestDirector::vref_int(int const &x) throw(int) {
  int *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 26;
  const char * const swig_method_name = "vref_int";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_int", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_int'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int const &""'");
  } 
  int *temp = new int((int)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (int const &) *c_result;
}


unsigned int const &SwigDirector_TestDirector::vref_uint(unsigned int const &x) throw(unsigned int) {
  unsigned int *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 27;
  const char * const swig_method_name = "vref_uint";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_uint", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_uint'");
    }
  }
  unsigned int swig_val;
  int swig_res = SWIG_AsVal_unsigned_SS_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""unsigned int const &""'");
  } 
  unsigned int *temp = new unsigned int((unsigned int)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (unsigned int const &) *c_result;
}


short const &SwigDirector_TestDirector::vref_short(short const &x) throw(short) {
  short *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_short(static_cast< short >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 28;
  const char * const swig_method_name = "vref_short";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_short", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_short'");
    }
  }
  short swig_val;
  int swig_res = SWIG_AsVal_short(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""short const &""'");
  } 
  short *temp = new short((short)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (short const &) *c_result;
}


unsigned short const &SwigDirector_TestDirector::vref_ushort(unsigned short const &x) throw(unsigned short) {
  unsigned short *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 29;
  const char * const swig_method_name = "vref_ushort";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_ushort", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_ushort'");
    }
  }
  unsigned short swig_val;
  int swig_res = SWIG_AsVal_unsigned_SS_short(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""unsigned short const &""'");
  } 
  unsigned short *temp = new unsigned short((unsigned short)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (unsigned short const &) *c_result;
}


long const &SwigDirector_TestDirector::vref_long(long const &x) throw(long) {
  long *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_long(static_cast< long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 30;
  const char * const swig_method_name = "vref_long";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_long", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_long'");
    }
  }
  long swig_val;
  int swig_res = SWIG_AsVal_long(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""long const &""'");
  } 
  long *temp = new long((long)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (long const &) *c_result;
}


unsigned long const &SwigDirector_TestDirector::vref_ulong(unsigned long const &x) throw(unsigned long) {
  unsigned long *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 31;
  const char * const swig_method_name = "vref_ulong";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_ulong", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_ulong'");
    }
  }
  unsigned long swig_val;
  int swig_res = SWIG_AsVal_unsigned_SS_long(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""unsigned long const &""'");
  } 
  unsigned long *temp = new unsigned long((unsigned long)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (unsigned long const &) *c_result;
}


long long const &SwigDirector_TestDirector::vref_llong(long long const &x) throw(long long) {
  long long *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_long_SS_long(static_cast< long long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 32;
  const char * const swig_method_name = "vref_llong";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_llong", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_llong'");
    }
  }
  long long swig_val;
  int swig_res = SWIG_AsVal_long_SS_long(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""long long const &""'");
  } 
  long long *temp = new long long((long long)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (long long const &) *c_result;
}


unsigned long long const &SwigDirector_TestDirector::vref_ullong(unsigned long long const &x) throw(unsigned long long) {
  unsigned long long *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 33;
  const char * const swig_method_name = "vref_ullong";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_ullong", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_ullong'");
    }
  }
  unsigned long long swig_val;
  int swig_res = SWIG_AsVal_unsigned_SS_long_SS_long(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""unsigned long long const &""'");
  } 
  unsigned long long *temp = new unsigned long long((unsigned long long)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (unsigned long long const &) *c_result;
}


char const &SwigDirector_TestDirector::vref_char(char const &x) throw(char) {
  char *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_char(static_cast< char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 34;
  const char * const swig_method_name = "vref_char";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_char", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_char'");
    }
  }
  char swig_val;
  int swig_res = SWIG_AsVal_char(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""char const &""'");
  } 
  char *temp = new char((char)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (char const &) *c_result;
}


pchar const &SwigDirector_TestDirector::vref_pchar(pchar const &x) throw(pchar) {
  int res ;
  char *buf = 0 ;
  int alloc = SWIG_NEWOBJ ;
  
  pchar *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)x);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 35;
  const char * const swig_method_name = "vref_pchar";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_pchar", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_pchar'");
    }
  }
  res = SWIG_AsCharPtrAndSize(result, &buf, NULL, &alloc);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""pchar const &""'");
  }
  static pchar tmp = buf;
  c_result = &tmp;
  if (alloc == SWIG_NEWOBJ) {
    swig_acquire_ownership_array(buf);
  }
  return (pchar const &) *c_result;
}


pcharc const &SwigDirector_TestDirector::vref_pcharc(pcharc const &x) throw(pcharc) {
  int res ;
  char *buf = 0 ;
  int alloc = SWIG_NEWOBJ ;
  
  pcharc *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)x);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 36;
  const char * const swig_method_name = "vref_pcharc";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_pcharc", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_pcharc'");
    }
  }
  res = SWIG_AsCharPtrAndSize(result, &buf, NULL, &alloc);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""pcharc const &""'");
  }
  static pcharc tmp = buf;
  c_result = &tmp;
  if (alloc == SWIG_NEWOBJ) {
    swig_acquire_ownership_array(buf);
  }
  return (pcharc const &) *c_result;
}


pint const &SwigDirector_TestDirector::vref_pint(pint const &x) throw(pint) {
  void *argp ;
  int res ;
  
  pint *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(x), SWIGTYPE_p_p_char,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 37;
  const char * const swig_method_name = "vref_pint";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_pint", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_pint'");
    }
  }
  res = SWIG_ConvertPtr(result, &argp, 0, 0);
  if (!SWIG_IsOK(res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(res)), "in output value of type '""pint const &""'");
  }
  static pint temp = reinterpret_cast< pint >(argp);
  c_result =  &temp;
  return (pint const &) *c_result;
}


Hello const &SwigDirector_TestDirector::vref_hello(Hello const &x) throw(Hello) {
  Hello *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 38;
  const char * const swig_method_name = "vref_hello";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_hello", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_hello'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""Hello const &""'");
  } 
  Hello *temp = new Hello((Hello)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (Hello const &) *c_result;
}


MyInt const &SwigDirector_TestDirector::vref_myint(MyInt const &x) throw(MyInt) {
  MyInt *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 39;
  const char * const swig_method_name = "vref_myint";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_myint", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_myint'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""MyInt const &""'");
  } 
  MyInt *temp = new MyInt((MyInt)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (MyInt const &) *c_result;
}


Param< int > const &SwigDirector_TestDirector::vref_parami(Param< int > const &x) throw(Param< int >) {
  Param< int > *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 40;
  const char * const swig_method_name = "vref_parami";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_parami", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_parami'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""Param< int > const &""'");
  } 
  Param< int > *temp = new Param< int >((Param< int >)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (Param< int > const &) *c_result;
}


Param< double > const &SwigDirector_TestDirector::vref_paramd(Param< double > const &x) throw(Param< double >) {
  Param< double > *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_double(static_cast< double >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 41;
  const char * const swig_method_name = "vref_paramd";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_paramd", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_paramd'");
    }
  }
  double swig_val;
  int swig_res = SWIG_AsVal_double(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""Param< double > const &""'");
  } 
  Param< double > *temp = new Param< double >((Param< double >)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (Param< double > const &) *c_result;
}


Param< char > const &SwigDirector_TestDirector::vref_paramc(Param< char > const &x) throw(Param< char >) {
  Param< char > *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_char(static_cast< char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 42;
  const char * const swig_method_name = "vref_paramc";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_paramc", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_paramc'");
    }
  }
  char swig_val;
  int swig_res = SWIG_AsVal_char(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""Param< char > const &""'");
  } 
  Param< char > *temp = new Param< char >((Param< char >)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (Param< char > const &) *c_result;
}


size_t const &SwigDirector_TestDirector::vref_sizet(size_t const &x) throw(size_t) {
  size_t *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_size_t(static_cast< size_t >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 43;
  const char * const swig_method_name = "vref_sizet";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vref_sizet", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vref_sizet'");
    }
  }
  size_t swig_val;
  int swig_res = SWIG_AsVal_size_t(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""size_t const &""'");
  } 
  size_t *temp = new size_t((size_t)swig_val);
  swig_acquire_ownership(temp);
  c_result = temp;
  return (size_t const &) *c_result;
}


int SwigDirector_TestDirector::ovr_val(bool x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_bool(static_cast< bool >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 44;
  const char * const swig_method_name = "ovr_val";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_val", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_val'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_ref(bool const &x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_bool(static_cast< bool >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 45;
  const char * const swig_method_name = "ovr_ref";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_ref", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_ref'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_val(signed char x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_signed_SS_char(static_cast< signed char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 46;
  const char * const swig_method_name = "ovr_val";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_val", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_val'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_ref(signed char const &x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_signed_SS_char(static_cast< signed char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 47;
  const char * const swig_method_name = "ovr_ref";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_ref", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_ref'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_val(unsigned char x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 48;
  const char * const swig_method_name = "ovr_val";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_val", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_val'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_ref(unsigned char const &x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 49;
  const char * const swig_method_name = "ovr_ref";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_ref", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_ref'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_val(int x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 50;
  const char * const swig_method_name = "ovr_val";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_val", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_val'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_ref(int const &x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 51;
  const char * const swig_method_name = "ovr_ref";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_ref", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_ref'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_val(unsigned int x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 52;
  const char * const swig_method_name = "ovr_val";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_val", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_val'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_ref(unsigned int const &x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 53;
  const char * const swig_method_name = "ovr_ref";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_ref", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_ref'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_val(short x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_short(static_cast< short >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 54;
  const char * const swig_method_name = "ovr_val";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_val", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_val'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_ref(short const &x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_short(static_cast< short >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 55;
  const char * const swig_method_name = "ovr_ref";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_ref", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_ref'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_val(unsigned short x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 56;
  const char * const swig_method_name = "ovr_val";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_val", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_val'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_ref(unsigned short const &x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 57;
  const char * const swig_method_name = "ovr_ref";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_ref", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_ref'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_val(long x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_long(static_cast< long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 58;
  const char * const swig_method_name = "ovr_val";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_val", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_val'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_ref(long const &x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_long(static_cast< long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 59;
  const char * const swig_method_name = "ovr_ref";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_ref", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_ref'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_val(unsigned long x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 60;
  const char * const swig_method_name = "ovr_val";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_val", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_val'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_ref(unsigned long const &x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 61;
  const char * const swig_method_name = "ovr_ref";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_ref", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_ref'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_val(long long x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_long_SS_long(static_cast< long long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 62;
  const char * const swig_method_name = "ovr_val";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_val", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_val'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_ref(long long const &x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_long_SS_long(static_cast< long long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 63;
  const char * const swig_method_name = "ovr_ref";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_ref", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_ref'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_val(unsigned long long x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 64;
  const char * const swig_method_name = "ovr_val";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_val", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_val'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_ref(unsigned long long const &x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 65;
  const char * const swig_method_name = "ovr_ref";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_ref", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_ref'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_val(char x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_char(static_cast< char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 66;
  const char * const swig_method_name = "ovr_val";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_val", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_val'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_ref(char const &x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_char(static_cast< char >(x));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 67;
  const char * const swig_method_name = "ovr_ref";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_ref", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_ref'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_val(pchar x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)x);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 68;
  const char * const swig_method_name = "ovr_val";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_val", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_val'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


int SwigDirector_TestDirector::ovr_ref(pchar const &x) {
  int c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)x);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 69;
  const char * const swig_method_name = "ovr_ref";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ovr_ref", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.ovr_ref'");
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


Test *SwigDirector_TestDirector::vtest(Test *t) const throw(Test) {
  void *swig_argp ;
  int swig_res ;
  swig_owntype own ;
  
  Test *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(t), SWIGTYPE_p_Test,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call TestDirector.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 70;
  const char * const swig_method_name = "vtest";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"vtest", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'TestDirector.vtest'");
    }
  }
  swig_res = SWIG_ConvertPtrAndOwn(result, &swig_argp, SWIGTYPE_p_Test,  0  | SWIG_POINTER_DISOWN, &own);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""Test *""'");
  }
  c_result = reinterpret_cast< Test * >(swig_argp);
  swig_acquire_ownership_obj(SWIG_as_voidptr(c_result), own /* & TODO: SWIG_POINTER_OWN */);
  return (Test *) c_result;
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int Swig_var_def_pchar_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable def_pchar is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_def_pchar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(def_pchar);
  return pyobj;
}


SWIGINTERN int Swig_var_def_pcharc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable def_pcharc is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_def_pcharc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(def_pcharc);
  return pyobj;
}


SWIGINTERN int Swig_var_def_namet_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable def_namet is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_def_namet_get(void) {
  PyObject *pyobj = 0;
  
  size_t size = 5;
  
  while (size && (def_namet[size - 1] == '\0')) --size;
  
  pyobj = SWIG_FromCharPtrAndSize(def_namet, size);
  return pyobj;
}


SWIGINTERN int Swig_var_gbl_namet_set(PyObject *_val) {
  {
    int res = SWIG_AsCharArray(_val, gbl_namet, 5);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""gbl_namet""' of type '""char [5]""'");
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_gbl_namet_get(void) {
  PyObject *pyobj = 0;
  
  size_t size = 5;
  
  while (size && (gbl_namet[size - 1] == '\0')) --size;
  
  pyobj = SWIG_FromCharPtrAndSize(gbl_namet, size);
  return pyobj;
}


SWIGINTERN int Swig_var_fixsize_set(PyObject *_val) {
  {
    int res = SWIG_AsCharArray(_val, fixsize, 8);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""fixsize""' of type '""char [8]""'");
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_fixsize_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtrAndSize(fixsize, 8);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_val_bool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_bool",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_bool" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  try {
    result = (bool)val_bool(arg1);
  }
  catch(bool &_e) {
    SWIG_Python_Raise(SWIG_From_bool(static_cast< bool >(_e)), "bool", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_schar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  signed char arg1 ;
  signed char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  signed char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_schar",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_signed_SS_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_schar" "', argument " "1"" of type '" "signed char""'");
  } 
  arg1 = static_cast< signed char >(val1);
  try {
    result = (signed char)val_schar(arg1);
  }
  catch(signed char &_e) {
    SWIG_Python_Raise(SWIG_From_signed_SS_char(static_cast< signed char >(_e)), "signed char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_uchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned char arg1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_uchar",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_uchar" "', argument " "1"" of type '" "unsigned char""'");
  } 
  arg1 = static_cast< unsigned char >(val1);
  try {
    result = (unsigned char)val_uchar(arg1);
  }
  catch(unsigned char &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e)), "unsigned char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_int",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_int" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  try {
    result = (int)val_int(arg1);
  }
  catch(int &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "int", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_uint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_uint",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_uint" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  try {
    result = (unsigned int)val_uint(arg1);
  }
  catch(unsigned int &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e)), "unsigned int", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_short(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  short arg1 ;
  short val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_short",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_short" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = static_cast< short >(val1);
  try {
    result = (short)val_short(arg1);
  }
  catch(short &_e) {
    SWIG_Python_Raise(SWIG_From_short(static_cast< short >(_e)), "short", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_ushort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned short arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_ushort",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_ushort" "', argument " "1"" of type '" "unsigned short""'");
  } 
  arg1 = static_cast< unsigned short >(val1);
  try {
    result = (unsigned short)val_ushort(arg1);
  }
  catch(unsigned short &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e)), "unsigned short", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_long",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_long" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  try {
    result = (long)val_long(arg1);
  }
  catch(long &_e) {
    SWIG_Python_Raise(SWIG_From_long(static_cast< long >(_e)), "long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_ulong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_ulong",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_ulong" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  try {
    result = (unsigned long)val_ulong(arg1);
  }
  catch(unsigned long &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e)), "unsigned long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_llong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long long arg1 ;
  long long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_llong",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_llong" "', argument " "1"" of type '" "long long""'");
  } 
  arg1 = static_cast< long long >(val1);
  try {
    result = (long long)val_llong(arg1);
  }
  catch(long long &_e) {
    SWIG_Python_Raise(SWIG_From_long_SS_long(static_cast< long long >(_e)), "long long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_ullong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long long arg1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_ullong",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_ullong" "', argument " "1"" of type '" "unsigned long long""'");
  } 
  arg1 = static_cast< unsigned long long >(val1);
  try {
    result = (unsigned long long)val_ullong(arg1);
  }
  catch(unsigned long long &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e)), "unsigned long long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_char(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char arg1 ;
  char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_char",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_char" "', argument " "1"" of type '" "char""'");
  } 
  arg1 = static_cast< char >(val1);
  try {
    result = (char)val_char(arg1);
  }
  catch(char &_e) {
    SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_pchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pchar arg1 = (pchar) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  pchar result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_pchar",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "val_pchar" "', argument " "1"" of type '" "pchar""'");
  }
  arg1 = reinterpret_cast< pchar >(buf1);
  try {
    result = (pchar)val_pchar(arg1);
  }
  catch(pchar _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pchar", 0); SWIG_fail;
  }
  
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_pcharc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pcharc arg1 = (pcharc) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  pcharc result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_pcharc",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "val_pcharc" "', argument " "1"" of type '" "pcharc""'");
  }
  arg1 = reinterpret_cast< pcharc >(buf1);
  try {
    result = (pcharc)val_pcharc((char const *)arg1);
  }
  catch(pcharc _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pcharc", 0); SWIG_fail;
  }
  
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_pint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pint arg1 = (pint) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  pint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_pint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "val_pint" "', argument " "1"" of type '" "pint""'"); 
  }
  try {
    result = (pint)val_pint(arg1);
  }
  catch(pint _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pint", 0); SWIG_fail;
  }
  
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_hello(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hello arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Hello result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_hello",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_hello" "', argument " "1"" of type '" "Hello""'");
  } 
  arg1 = static_cast< Hello >(val1);
  try {
    result = (Hello)val_hello(arg1);
  }
  catch(Hello &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Hello", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_myint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MyInt arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  MyInt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_myint",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_myint" "', argument " "1"" of type '" "MyInt""'");
  } 
  arg1 = static_cast< MyInt >(val1);
  try {
    result = val_myint(arg1);
  }
  catch(MyInt &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "MyInt", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_parami(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Param< int > arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Param< int > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_parami",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_parami" "', argument " "1"" of type '" "Param< int >""'");
  } 
  arg1 = static_cast< Param< int > >(val1);
  try {
    result = val_parami(arg1);
  }
  catch(Param< int > &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Param< int >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_paramd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Param< double > arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Param< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_paramd",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_paramd" "', argument " "1"" of type '" "Param< double >""'");
  } 
  arg1 = static_cast< Param< double > >(val1);
  try {
    result = val_paramd(arg1);
  }
  catch(Param< double > &_e) {
    SWIG_Python_Raise(SWIG_From_double(static_cast< double >(_e)), "Param< double >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_paramc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Param< char > arg1 ;
  char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Param< char > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_paramc",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_paramc" "', argument " "1"" of type '" "Param< char >""'");
  } 
  arg1 = static_cast< Param< char > >(val1);
  try {
    result = val_paramc(arg1);
  }
  catch(Param< char > &_e) {
    SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "Param< char >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_sizet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_sizet",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_sizet" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  try {
    result = val_sizet(arg1);
  }
  catch(size_t &_e) {
    SWIG_Python_Raise(SWIG_From_size_t(static_cast< size_t >(_e)), "size_t", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_bool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool *arg1 = 0 ;
  bool temp1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_bool",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_bool" "', argument " "1"" of type '" "bool""'");
  } 
  temp1 = static_cast< bool >(val1);
  arg1 = &temp1;
  try {
    result = (bool *) &ref_bool((bool const &)*arg1);
  }
  catch(bool &_e) {
    SWIG_Python_Raise(SWIG_From_bool(static_cast< bool >(_e)), "bool", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_schar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  signed char *arg1 = 0 ;
  signed char temp1 ;
  signed char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  signed char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_schar",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_signed_SS_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_schar" "', argument " "1"" of type '" "signed char""'");
  } 
  temp1 = static_cast< signed char >(val1);
  arg1 = &temp1;
  try {
    result = (signed char *) &ref_schar((signed char const &)*arg1);
  }
  catch(signed char &_e) {
    SWIG_Python_Raise(SWIG_From_signed_SS_char(static_cast< signed char >(_e)), "signed char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_uchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned char *arg1 = 0 ;
  unsigned char temp1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_uchar",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_uchar" "', argument " "1"" of type '" "unsigned char""'");
  } 
  temp1 = static_cast< unsigned char >(val1);
  arg1 = &temp1;
  try {
    result = (unsigned char *) &ref_uchar((unsigned char const &)*arg1);
  }
  catch(unsigned char &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e)), "unsigned char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = 0 ;
  int temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_int",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_int" "', argument " "1"" of type '" "int""'");
  } 
  temp1 = static_cast< int >(val1);
  arg1 = &temp1;
  try {
    result = (int *) &ref_int((int const &)*arg1);
  }
  catch(int &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "int", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_uint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_uint",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_uint" "', argument " "1"" of type '" "unsigned int""'");
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  try {
    result = (unsigned int *) &ref_uint((unsigned int const &)*arg1);
  }
  catch(unsigned int &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e)), "unsigned int", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_short(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  short *arg1 = 0 ;
  short temp1 ;
  short val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  short *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_short",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_short" "', argument " "1"" of type '" "short""'");
  } 
  temp1 = static_cast< short >(val1);
  arg1 = &temp1;
  try {
    result = (short *) &ref_short((short const &)*arg1);
  }
  catch(short &_e) {
    SWIG_Python_Raise(SWIG_From_short(static_cast< short >(_e)), "short", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_short(static_cast< short >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_ushort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned short *arg1 = 0 ;
  unsigned short temp1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned short *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_ushort",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_ushort" "', argument " "1"" of type '" "unsigned short""'");
  } 
  temp1 = static_cast< unsigned short >(val1);
  arg1 = &temp1;
  try {
    result = (unsigned short *) &ref_ushort((unsigned short const &)*arg1);
  }
  catch(unsigned short &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e)), "unsigned short", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long *arg1 = 0 ;
  long temp1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_long",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_long" "', argument " "1"" of type '" "long""'");
  } 
  temp1 = static_cast< long >(val1);
  arg1 = &temp1;
  try {
    result = (long *) &ref_long((long const &)*arg1);
  }
  catch(long &_e) {
    SWIG_Python_Raise(SWIG_From_long(static_cast< long >(_e)), "long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_ulong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long *arg1 = 0 ;
  unsigned long temp1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_ulong",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_ulong" "', argument " "1"" of type '" "unsigned long""'");
  } 
  temp1 = static_cast< unsigned long >(val1);
  arg1 = &temp1;
  try {
    result = (unsigned long *) &ref_ulong((unsigned long const &)*arg1);
  }
  catch(unsigned long &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e)), "unsigned long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_llong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long long *arg1 = 0 ;
  long long temp1 ;
  long long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  long long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_llong",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_llong" "', argument " "1"" of type '" "long long""'");
  } 
  temp1 = static_cast< long long >(val1);
  arg1 = &temp1;
  try {
    result = (long long *) &ref_llong((long long const &)*arg1);
  }
  catch(long long &_e) {
    SWIG_Python_Raise(SWIG_From_long_SS_long(static_cast< long long >(_e)), "long long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_ullong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long long *arg1 = 0 ;
  unsigned long long temp1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_ullong",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_ullong" "', argument " "1"" of type '" "unsigned long long""'");
  } 
  temp1 = static_cast< unsigned long long >(val1);
  arg1 = &temp1;
  try {
    result = (unsigned long long *) &ref_ullong((unsigned long long const &)*arg1);
  }
  catch(unsigned long long &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e)), "unsigned long long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_char(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = 0 ;
  char temp1 ;
  char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_char",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_char" "', argument " "1"" of type '" "char""'");
  } 
  temp1 = static_cast< char >(val1);
  arg1 = &temp1;
  try {
    result = (char *) &ref_char((char const &)*arg1);
  }
  catch(char &_e) {
    SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_char(static_cast< char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_pchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pchar *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pchar temp1 ;
  PyObject * obj0 = 0 ;
  pchar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_pchar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ref_pchar" "', argument " "1"" of type '" "pchar""'"); 
  }
  temp1 = reinterpret_cast< pchar >(argp1);
  arg1 = reinterpret_cast< pchar * >(&temp1);
  try {
    result = (pchar *) &ref_pchar((char *const &)*arg1);
  }
  catch(pchar _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pchar", 0); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_pcharc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pcharc *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pcharc temp1 ;
  PyObject * obj0 = 0 ;
  pcharc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_pcharc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ref_pcharc" "', argument " "1"" of type '" "pcharc""'"); 
  }
  temp1 = reinterpret_cast< pcharc >(argp1);
  arg1 = reinterpret_cast< pcharc * >(&temp1);
  try {
    result = (pcharc *) &ref_pcharc((char const *const &)*arg1);
  }
  catch(pcharc _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pcharc", 0); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_pint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pint *arg1 = 0 ;
  pint temp1 = 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  pint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_pint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, SWIG_as_voidptrptr(&temp1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ref_pint" "', argument " "1"" of type '" "Stype""'"); 
  }
  arg1 =  &temp1;
  try {
    result = (pint *) &ref_pint((char *const &)*arg1);
  }
  catch(pint _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pint", 0); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_hello(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Hello *arg1 = 0 ;
  int val1 ;
  int ecode1 ;
  Hello temp1 ;
  PyObject * obj0 = 0 ;
  Hello *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_hello",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int (obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_hello" "', argument " "1"" of type '" "Hello const &""'");
  } else {
    temp1 = static_cast< Hello >(val1);
    arg1 = &temp1;
  }
  try {
    result = (Hello *) &ref_hello((enum Hello const &)*arg1);
  }
  catch(Hello &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Hello", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_myint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MyInt *arg1 = 0 ;
  MyInt temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  MyInt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_myint",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_myint" "', argument " "1"" of type '" "MyInt""'");
  } 
  temp1 = static_cast< MyInt >(val1);
  arg1 = &temp1;
  try {
    result = (MyInt *) &ref_myint((MyInt const &)*arg1);
  }
  catch(MyInt &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "MyInt", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_parami(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Param< int > *arg1 = 0 ;
  Param< int > temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Param< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_parami",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_parami" "', argument " "1"" of type '" "Param< int >""'");
  } 
  temp1 = static_cast< Param< int > >(val1);
  arg1 = &temp1;
  try {
    result = (Param< int > *) &ref_parami((Param< int > const &)*arg1);
  }
  catch(Param< int > &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Param< int >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_paramd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Param< double > *arg1 = 0 ;
  Param< double > temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Param< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_paramd",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_paramd" "', argument " "1"" of type '" "Param< double >""'");
  } 
  temp1 = static_cast< Param< double > >(val1);
  arg1 = &temp1;
  try {
    result = (Param< double > *) &ref_paramd((Param< double > const &)*arg1);
  }
  catch(Param< double > &_e) {
    SWIG_Python_Raise(SWIG_From_double(static_cast< double >(_e)), "Param< double >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_paramc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Param< char > *arg1 = 0 ;
  Param< char > temp1 ;
  char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Param< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_paramc",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_paramc" "', argument " "1"" of type '" "Param< char >""'");
  } 
  temp1 = static_cast< Param< char > >(val1);
  arg1 = &temp1;
  try {
    result = (Param< char > *) &ref_paramc((Param< char > const &)*arg1);
  }
  catch(Param< char > &_e) {
    SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "Param< char >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_char(static_cast< char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ref_sizet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t *arg1 = 0 ;
  size_t temp1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ref_sizet",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_sizet" "', argument " "1"" of type '" "size_t""'");
  } 
  temp1 = static_cast< size_t >(val1);
  arg1 = &temp1;
  try {
    result = (size_t *) &ref_sizet((size_t const &)*arg1);
  }
  catch(size_t &_e) {
    SWIG_Python_Raise(SWIG_From_size_t(static_cast< size_t >(_e)), "size_t", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_cct_bool_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_bool is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_bool_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_bool(static_cast< bool >(cct_bool));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_schar_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_schar is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_schar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_signed_SS_char(static_cast< signed char >(cct_schar));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_uchar_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_uchar is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_uchar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(cct_uchar));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_int_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_int is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_int_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(cct_int));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_uint_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_uint is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_uint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(cct_uint));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_short_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_short is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_short_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_short(static_cast< short >(cct_short));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_ushort_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_ushort is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_ushort_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(cct_ushort));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_long_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_long is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_long_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long(static_cast< long >(cct_long));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_ulong_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_ulong is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_ulong_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(cct_ulong));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_llong_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_llong is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_llong_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long_SS_long(static_cast< long long >(cct_llong));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_ullong_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_ullong is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_ullong_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(cct_ullong));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_char_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_char is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_char_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(cct_char));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_pchar_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_pchar is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_pchar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(cct_pchar);
  return pyobj;
}


SWIGINTERN int Swig_var_cct_pcharc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_pcharc is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_pcharc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(cct_pcharc);
  return pyobj;
}


SWIGINTERN int Swig_var_cct_pint_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_pint is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_pint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(cct_pint);
  return pyobj;
}


SWIGINTERN int Swig_var_cct_hello_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_hello is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_hello_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(cct_hello));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_myint_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_myint is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_myint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(cct_myint));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_parami_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_parami is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_parami_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(cct_parami));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_paramd_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_paramd is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_paramd_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(cct_paramd));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_paramc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_paramc is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_paramc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(cct_paramc));
  return pyobj;
}


SWIGINTERN int Swig_var_cct_sizet_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cct_sizet is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cct_sizet_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(cct_sizet));
  return pyobj;
}


SWIGINTERN int Swig_var_var_bool_set(PyObject *_val) {
  {
    bool val;
    int res = SWIG_AsVal_bool(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_bool""' of type '""bool""'");
    }
    var_bool = static_cast< bool >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_bool_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_bool(static_cast< bool >(var_bool));
  return pyobj;
}


SWIGINTERN int Swig_var_var_schar_set(PyObject *_val) {
  {
    signed char val;
    int res = SWIG_AsVal_signed_SS_char(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_schar""' of type '""signed char""'");
    }
    var_schar = static_cast< signed char >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_schar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_signed_SS_char(static_cast< signed char >(var_schar));
  return pyobj;
}


SWIGINTERN int Swig_var_var_uchar_set(PyObject *_val) {
  {
    unsigned char val;
    int res = SWIG_AsVal_unsigned_SS_char(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_uchar""' of type '""unsigned char""'");
    }
    var_uchar = static_cast< unsigned char >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_uchar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(var_uchar));
  return pyobj;
}


SWIGINTERN int Swig_var_var_int_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_int""' of type '""int""'");
    }
    var_int = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_int_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(var_int));
  return pyobj;
}


SWIGINTERN int Swig_var_var_uint_set(PyObject *_val) {
  {
    unsigned int val;
    int res = SWIG_AsVal_unsigned_SS_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_uint""' of type '""unsigned int""'");
    }
    var_uint = static_cast< unsigned int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_uint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(var_uint));
  return pyobj;
}


SWIGINTERN int Swig_var_var_short_set(PyObject *_val) {
  {
    short val;
    int res = SWIG_AsVal_short(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_short""' of type '""short""'");
    }
    var_short = static_cast< short >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_short_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_short(static_cast< short >(var_short));
  return pyobj;
}


SWIGINTERN int Swig_var_var_ushort_set(PyObject *_val) {
  {
    unsigned short val;
    int res = SWIG_AsVal_unsigned_SS_short(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_ushort""' of type '""unsigned short""'");
    }
    var_ushort = static_cast< unsigned short >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_ushort_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(var_ushort));
  return pyobj;
}


SWIGINTERN int Swig_var_var_long_set(PyObject *_val) {
  {
    long val;
    int res = SWIG_AsVal_long(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_long""' of type '""long""'");
    }
    var_long = static_cast< long >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_long_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long(static_cast< long >(var_long));
  return pyobj;
}


SWIGINTERN int Swig_var_var_ulong_set(PyObject *_val) {
  {
    unsigned long val;
    int res = SWIG_AsVal_unsigned_SS_long(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_ulong""' of type '""unsigned long""'");
    }
    var_ulong = static_cast< unsigned long >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_ulong_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(var_ulong));
  return pyobj;
}


SWIGINTERN int Swig_var_var_llong_set(PyObject *_val) {
  {
    long long val;
    int res = SWIG_AsVal_long_SS_long(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_llong""' of type '""long long""'");
    }
    var_llong = static_cast< long long >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_llong_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long_SS_long(static_cast< long long >(var_llong));
  return pyobj;
}


SWIGINTERN int Swig_var_var_ullong_set(PyObject *_val) {
  {
    unsigned long long val;
    int res = SWIG_AsVal_unsigned_SS_long_SS_long(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_ullong""' of type '""unsigned long long""'");
    }
    var_ullong = static_cast< unsigned long long >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_ullong_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(var_ullong));
  return pyobj;
}


SWIGINTERN int Swig_var_var_char_set(PyObject *_val) {
  {
    char val;
    int res = SWIG_AsVal_char(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_char""' of type '""char""'");
    }
    var_char = static_cast< char >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_char_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(var_char));
  return pyobj;
}


SWIGINTERN int Swig_var_var_pchar_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_pchar""' of type '""pchar""'");
    }
    if (var_pchar) delete[] var_pchar;
    if (alloc == SWIG_NEWOBJ) {
      var_pchar = cptr;
    } else {
      var_pchar = csize ? (pchar)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_pchar_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(var_pchar);
  return pyobj;
}


SWIGINTERN int Swig_var_var_pcharc_set(PyObject *_val) {
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(_val, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_pcharc""' of type '""pcharc""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      var_pcharc = cptr;
    } else {
      var_pcharc = csize ? (pcharc)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_pcharc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(var_pcharc);
  return pyobj;
}


SWIGINTERN int Swig_var_var_pint_set(PyObject *_val) {
  {
    void *temp = 0;
    int res = SWIG_ConvertPtr(_val, &temp, 0, SWIG_POINTER_DISOWN);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_pint""' of type '""pint""'");
    }
    var_pint = (pint) temp;
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_pint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(var_pint);
  return pyobj;
}


SWIGINTERN int Swig_var_var_hello_set(PyObject *_val) {
  if (sizeof(int) != sizeof(var_hello)) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""arch, read-only var_hello""' of type '""Hello""'");
  }  else {
    int ecode = SWIG_AsVal_int (_val, reinterpret_cast< int* >(&var_hello));
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in variable '""var_hello""' of type '""Hello""'");
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_hello_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(var_hello));
  return pyobj;
}


SWIGINTERN int Swig_var_var_myint_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_myint""' of type '""MyInt""'");
    }
    var_myint = static_cast< MyInt >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_myint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(var_myint));
  return pyobj;
}


SWIGINTERN int Swig_var_var_parami_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_parami""' of type '""Param< int >""'");
    }
    var_parami = static_cast< Param< int > >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_parami_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(var_parami));
  return pyobj;
}


SWIGINTERN int Swig_var_var_paramd_set(PyObject *_val) {
  {
    double val;
    int res = SWIG_AsVal_double(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_paramd""' of type '""Param< double >""'");
    }
    var_paramd = static_cast< Param< double > >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_paramd_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(var_paramd));
  return pyobj;
}


SWIGINTERN int Swig_var_var_paramc_set(PyObject *_val) {
  {
    char val;
    int res = SWIG_AsVal_char(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_paramc""' of type '""Param< char >""'");
    }
    var_paramc = static_cast< Param< char > >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_paramc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(var_paramc));
  return pyobj;
}


SWIGINTERN int Swig_var_var_sizet_set(PyObject *_val) {
  {
    size_t val;
    int res = SWIG_AsVal_size_t(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_sizet""' of type '""size_t""'");
    }
    var_sizet = static_cast< size_t >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_sizet_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(var_sizet));
  return pyobj;
}


SWIGINTERN int Swig_var_var_namet_set(PyObject *_val) {
  {
    int res = SWIG_AsCharArray(_val, var_namet, 5);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_namet""' of type '""char [5]""'");
    }
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_var_namet_get(void) {
  PyObject *pyobj = 0;
  
  size_t size = 5;
  
  while (size && (var_namet[size - 1] == '\0')) --size;
  
  pyobj = SWIG_FromCharPtrAndSize(var_namet, size);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_var_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":var_init")) SWIG_fail;
  var_init();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Foo__a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Foo__a_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo__a_set" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Foo__a_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->_a = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Foo__a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Foo *arg1 = (Foo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Foo__a_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo__a_get" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  result = (int) ((arg1)->_a);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Foo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Foo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Foo",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Foo" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (Foo *)new Foo(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Foo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Foo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Foo *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Foo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Foo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Foo,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Foo" "', argument " "1"" of type '" "Foo const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Foo" "', argument " "1"" of type '" "Foo const &""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  result = (Foo *)new Foo((Foo const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Foo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Foo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Foo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Foo__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Foo__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Foo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Foo::Foo(int)\n"
    "    Foo::Foo(Foo const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Foo_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Foo *arg1 = (Foo *) 0 ;
  SwigValueWrapper< Foo > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< Foo > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Foo_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_copy" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Foo,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Foo_copy" "', argument " "2"" of type '" "Foo""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Foo_copy" "', argument " "2"" of type '" "Foo""'");
    } else {
      Foo * temp = reinterpret_cast< Foo * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->copy(arg2);
  resultobj = SWIG_NewPointerObj((new Foo(static_cast< const Foo& >(result))), SWIGTYPE_p_Foo, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Foo_copy_c(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Foo *arg1 = (Foo *) 0 ;
  SwigValueWrapper< Foo > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< Foo > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Foo_copy_c",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_copy_c" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Foo,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Foo_copy_c" "', argument " "2"" of type '" "Foo const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Foo_copy_c" "', argument " "2"" of type '" "Foo const""'");
    } else {
      Foo * temp = reinterpret_cast< Foo * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->copy_c(arg2);
  resultobj = SWIG_NewPointerObj((new Foo(static_cast< const Foo& >(result))), SWIGTYPE_p_Foo, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Foo_copy_r(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Foo *arg1 = (Foo *) 0 ;
  Foo *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Foo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Foo_copy_r",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_copy_r" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Foo,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Foo_copy_r" "', argument " "2"" of type '" "Foo const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Foo_copy_r" "', argument " "2"" of type '" "Foo const &""'"); 
  }
  arg2 = reinterpret_cast< Foo * >(argp2);
  result = (Foo *) &(arg1)->copy_r((Foo const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Foo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Foo_this_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Foo *arg1 = (Foo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Foo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Foo_this_p",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_this_p" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  result = (Foo *)(arg1)->this_p();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Foo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Foo_this_r(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Foo *arg1 = (Foo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Foo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Foo_this_r",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_this_r" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  result = (Foo *) &(arg1)->this_r();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Foo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Foo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Foo *arg1 = (Foo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Foo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Foo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Foo" "', argument " "1"" of type '" "Foo *""'"); 
  }
  arg1 = reinterpret_cast< Foo * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Foo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Foo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_fptr_val(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  foo_ptr arg1 = (foo_ptr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  foo_ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fptr_val",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fptr_val" "', argument " "1"" of type '" "foo_ptr""'"); 
  }
  arg1 = reinterpret_cast< foo_ptr >(argp1);
  result = (foo_ptr)fptr_val(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Foo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fptr_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  foo_ptr *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  foo_ptr temp1 ;
  PyObject * obj0 = 0 ;
  foo_ptr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:fptr_ref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Foo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fptr_ref" "', argument " "1"" of type '" "foo_ptr""'"); 
  }
  temp1 = reinterpret_cast< foo_ptr >(argp1);
  arg1 = reinterpret_cast< foo_ptr * >(&temp1);
  result = (foo_ptr *) &fptr_ref((Foo *const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_Foo, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Test(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Test")) SWIG_fail;
  result = (Test *)new Test();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Test, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Test(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Test",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Test" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_bool_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_bool_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_bool_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_bool_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->var_bool = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_bool_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_bool_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_bool_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (bool) ((arg1)->var_bool);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_schar_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_schar_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_schar_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_schar_set" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  if (arg1) (arg1)->var_schar = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_schar_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  signed char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_schar_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_schar_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (signed char) ((arg1)->var_schar);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_uchar_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_uchar_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_uchar_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_uchar_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  if (arg1) (arg1)->var_uchar = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_uchar_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_uchar_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_uchar_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (unsigned char) ((arg1)->var_uchar);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_int_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_int_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_int_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_int_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->var_int = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_int_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_int_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_int_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (int) ((arg1)->var_int);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_uint_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_uint_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_uint_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_uint_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->var_uint = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_uint_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_uint_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_uint_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (unsigned int) ((arg1)->var_uint);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_short_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_short_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_short_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_short_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->var_short = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_short_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_short_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_short_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (short) ((arg1)->var_short);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_ushort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_ushort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ushort_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_ushort_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->var_ushort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_ushort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_ushort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ushort_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (unsigned short) ((arg1)->var_ushort);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_long_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_long_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_long_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_long_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->var_long = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_long_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_long_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_long_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (long) ((arg1)->var_long);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_ulong_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_ulong_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ulong_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_ulong_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  if (arg1) (arg1)->var_ulong = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_ulong_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_ulong_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ulong_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (unsigned long) ((arg1)->var_ulong);
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_llong_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_llong_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_llong_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_llong_set" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  if (arg1) (arg1)->var_llong = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_llong_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_llong_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_llong_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (long long) ((arg1)->var_llong);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_ullong_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_ullong_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ullong_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_ullong_set" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  if (arg1) (arg1)->var_ullong = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_ullong_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_ullong_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ullong_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (unsigned long long) ((arg1)->var_ullong);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_char_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_char_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_char_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_char_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->var_char = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_char_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_char_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_char_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (char) ((arg1)->var_char);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_pchar_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_pchar_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pchar_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_var_pchar_set" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  if (arg1->var_pchar) delete[] arg1->var_pchar;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->var_pchar = (pchar)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->var_pchar = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_pchar_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pchar result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_pchar_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pchar_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (pchar) ((arg1)->var_pchar);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_pcharc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_pcharc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pcharc_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_var_pcharc_set" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->var_pcharc = (pcharc)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->var_pcharc = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_pcharc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pcharc result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_pcharc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pcharc_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (pcharc) ((arg1)->var_pcharc);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_pint_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_pint_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pint_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_var_pint_set" "', argument " "2"" of type '" "pint""'"); 
  }
  if (arg1->var_pint) delete[] arg1->var_pint;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->var_pint = (pint)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->var_pint = 0;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_pint_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_pint_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pint_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (pint) ((arg1)->var_pint);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_hello_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_hello_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_hello_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_hello_set" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  if (arg1) (arg1)->var_hello = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_hello_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Hello result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_hello_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_hello_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (Hello) ((arg1)->var_hello);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_myint_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_myint_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_myint_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_myint_set" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  if (arg1) (arg1)->var_myint = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_myint_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MyInt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_myint_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_myint_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result =  ((arg1)->var_myint);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_parami_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_parami_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_parami_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_parami_set" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  if (arg1) (arg1)->var_parami = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_parami_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Param< int > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_parami_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_parami_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result =  ((arg1)->var_parami);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_paramd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_paramd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_paramd_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_paramd_set" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  if (arg1) (arg1)->var_paramd = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_paramd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Param< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_paramd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_paramd_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result =  ((arg1)->var_paramd);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_paramc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_paramc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_paramc_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_paramc_set" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  if (arg1) (arg1)->var_paramc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_paramc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Param< char > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_paramc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_paramc_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result =  ((arg1)->var_paramc);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_sizet_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_sizet_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_sizet_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_sizet_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->var_sizet = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_sizet_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_sizet_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_sizet_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result =  ((arg1)->var_sizet);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_namet_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_var_namet_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_namet_set" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_var_namet_set" "', argument " "2"" of type '" "char [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->var_namet,arg2,5*sizeof(char));
  else memset(arg1->var_namet,0,5*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_var_namet_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_var_namet_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_namet_get" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (char *) ((arg1)->var_namet);
  {
    size_t size = 5;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_namet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_namet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_namet" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_namet" "', argument " "2"" of type '" "char [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  try {
    result = (char *)(arg1)->val_namet(arg2);
  }
  catch(namet _e) {
    {
      size_t size = 5;
      
      while (size && (_e[size - 1] == '\0')) --size;
      
      SWIG_Python_Raise(SWIG_FromCharPtrAndSize(_e, size), "char [5]", 0); SWIG_fail; 
    }
  }
  
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_cnamet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_cnamet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_cnamet" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_cnamet" "', argument " "2"" of type '" "char const [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  try {
    result = (char *)(arg1)->val_cnamet(arg2);
  }
  catch(namet _e) {
    {
      size_t size = 5;
      
      while (size && (_e[size - 1] == '\0')) --size;
      
      SWIG_Python_Raise(SWIG_FromCharPtrAndSize(_e, size), "char [5]", 0); SWIG_fail; 
    }
  }
  
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_bool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_bool",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_bool" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_bool" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  try {
    result = (bool)(arg1)->val_bool(arg2);
  }
  catch(bool &_e) {
    SWIG_Python_Raise(SWIG_From_bool(static_cast< bool >(_e)), "bool", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_schar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  signed char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_schar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_schar" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  try {
    result = (signed char)(arg1)->val_schar(arg2);
  }
  catch(signed char &_e) {
    SWIG_Python_Raise(SWIG_From_signed_SS_char(static_cast< signed char >(_e)), "signed char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_uchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_uchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_uchar" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  try {
    result = (unsigned char)(arg1)->val_uchar(arg2);
  }
  catch(unsigned char &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e)), "unsigned char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_int",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_int" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (int)(arg1)->val_int(arg2);
  }
  catch(int &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "int", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_uint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_uint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_uint" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  try {
    result = (unsigned int)(arg1)->val_uint(arg2);
  }
  catch(unsigned int &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e)), "unsigned int", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_short(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_short",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_short" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_short" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  try {
    result = (short)(arg1)->val_short(arg2);
  }
  catch(short &_e) {
    SWIG_Python_Raise(SWIG_From_short(static_cast< short >(_e)), "short", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_ushort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_ushort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_ushort" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  try {
    result = (unsigned short)(arg1)->val_ushort(arg2);
  }
  catch(unsigned short &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e)), "unsigned short", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_long",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_long" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_long" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  try {
    result = (long)(arg1)->val_long(arg2);
  }
  catch(long &_e) {
    SWIG_Python_Raise(SWIG_From_long(static_cast< long >(_e)), "long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_ulong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_ulong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_ulong" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  try {
    result = (unsigned long)(arg1)->val_ulong(arg2);
  }
  catch(unsigned long &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e)), "unsigned long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_llong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_llong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_llong" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_llong" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  try {
    result = (long long)(arg1)->val_llong(arg2);
  }
  catch(long long &_e) {
    SWIG_Python_Raise(SWIG_From_long_SS_long(static_cast< long long >(_e)), "long long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_ullong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_ullong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_ullong" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  try {
    result = (unsigned long long)(arg1)->val_ullong(arg2);
  }
  catch(unsigned long long &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e)), "unsigned long long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_char(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_char",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_char" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_char" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  try {
    result = (char)(arg1)->val_char(arg2);
  }
  catch(char &_e) {
    SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_pchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pchar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_pchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_pchar" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_pchar" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  try {
    result = (pchar)(arg1)->val_pchar(arg2);
  }
  catch(pchar _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pchar", 0); SWIG_fail;
  }
  
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_pcharc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pcharc result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_pcharc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_pcharc" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_pcharc" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  try {
    result = (pcharc)(arg1)->val_pcharc(arg2);
  }
  catch(pcharc _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pcharc", 0); SWIG_fail;
  }
  
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_pint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_pint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_pint" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_pint" "', argument " "2"" of type '" "pint""'"); 
  }
  try {
    result = (pint)(arg1)->val_pint(arg2);
  }
  catch(pint _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pint", 0); SWIG_fail;
  }
  
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_hello(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Hello result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_hello",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_hello" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_hello" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  try {
    result = (Hello)(arg1)->val_hello(arg2);
  }
  catch(Hello &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Hello", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_myint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MyInt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_myint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_myint" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  try {
    result = (arg1)->val_myint(arg2);
  }
  catch(MyInt &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "MyInt", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_parami(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< int > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_parami",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_parami" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  try {
    result = (arg1)->val_parami(arg2);
  }
  catch(Param< int > &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Param< int >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_paramd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_paramd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_paramd" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  try {
    result = (arg1)->val_paramd(arg2);
  }
  catch(Param< double > &_e) {
    SWIG_Python_Raise(SWIG_From_double(static_cast< double >(_e)), "Param< double >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_paramc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< char > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_paramc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_paramc" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  try {
    result = (arg1)->val_paramc(arg2);
  }
  catch(Param< char > &_e) {
    SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "Param< char >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_val_sizet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_val_sizet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_sizet" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (arg1)->val_sizet(arg2);
  }
  catch(size_t &_e) {
    SWIG_Python_Raise(SWIG_From_size_t(static_cast< size_t >(_e)), "size_t", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_bool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_bool",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_bool" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_bool" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  try {
    result = (bool *) &(arg1)->ref_bool((bool const &)*arg2);
  }
  catch(bool &_e) {
    SWIG_Python_Raise(SWIG_From_bool(static_cast< bool >(_e)), "bool", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_schar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  signed char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char temp2 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  signed char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_schar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_schar" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  temp2 = static_cast< signed char >(val2);
  arg2 = &temp2;
  try {
    result = (signed char *) &(arg1)->ref_schar((signed char const &)*arg2);
  }
  catch(signed char &_e) {
    SWIG_Python_Raise(SWIG_From_signed_SS_char(static_cast< signed char >(_e)), "signed char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_uchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_uchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_uchar" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  temp2 = static_cast< unsigned char >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned char *) &(arg1)->ref_uchar((unsigned char const &)*arg2);
  }
  catch(unsigned char &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e)), "unsigned char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_int",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_int" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_int" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  try {
    result = (int *) &(arg1)->ref_int((int const &)*arg2);
  }
  catch(int &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "int", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_uint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_uint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_uint" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned int *) &(arg1)->ref_uint((unsigned int const &)*arg2);
  }
  catch(unsigned int &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e)), "unsigned int", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_short(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short temp2 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  short *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_short",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_short" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_short" "', argument " "2"" of type '" "short""'");
  } 
  temp2 = static_cast< short >(val2);
  arg2 = &temp2;
  try {
    result = (short *) &(arg1)->ref_short((short const &)*arg2);
  }
  catch(short &_e) {
    SWIG_Python_Raise(SWIG_From_short(static_cast< short >(_e)), "short", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_short(static_cast< short >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_ushort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned short *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_ushort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_ushort" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  temp2 = static_cast< unsigned short >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned short *) &(arg1)->ref_ushort((unsigned short const &)*arg2);
  }
  catch(unsigned short &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e)), "unsigned short", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_long",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_long" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_long" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  try {
    result = (long *) &(arg1)->ref_long((long const &)*arg2);
  }
  catch(long &_e) {
    SWIG_Python_Raise(SWIG_From_long(static_cast< long >(_e)), "long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_ulong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_ulong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_ulong" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  temp2 = static_cast< unsigned long >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned long *) &(arg1)->ref_ulong((unsigned long const &)*arg2);
  }
  catch(unsigned long &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e)), "unsigned long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_llong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_llong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_llong" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_llong" "', argument " "2"" of type '" "long long""'");
  } 
  temp2 = static_cast< long long >(val2);
  arg2 = &temp2;
  try {
    result = (long long *) &(arg1)->ref_llong((long long const &)*arg2);
  }
  catch(long long &_e) {
    SWIG_Python_Raise(SWIG_From_long_SS_long(static_cast< long long >(_e)), "long long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_ullong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long temp2 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned long long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_ullong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_ullong" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  temp2 = static_cast< unsigned long long >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned long long *) &(arg1)->ref_ullong((unsigned long long const &)*arg2);
  }
  catch(unsigned long long &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e)), "unsigned long long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_char(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_char",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_char" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_char" "', argument " "2"" of type '" "char""'");
  } 
  temp2 = static_cast< char >(val2);
  arg2 = &temp2;
  try {
    result = (char *) &(arg1)->ref_char((char const &)*arg2);
  }
  catch(char &_e) {
    SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_char(static_cast< char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_pchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  pchar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pchar temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pchar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_pchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_pchar" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ref_pchar" "', argument " "2"" of type '" "pchar""'"); 
  }
  temp2 = reinterpret_cast< pchar >(argp2);
  arg2 = reinterpret_cast< pchar * >(&temp2);
  try {
    result = (pchar *) &(arg1)->ref_pchar((pchar const &)*arg2);
  }
  catch(pchar _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pchar", 0); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_pcharc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  pcharc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pcharc temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pcharc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_pcharc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_pcharc" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ref_pcharc" "', argument " "2"" of type '" "pcharc""'"); 
  }
  temp2 = reinterpret_cast< pcharc >(argp2);
  arg2 = reinterpret_cast< pcharc * >(&temp2);
  try {
    result = (pcharc *) &(arg1)->ref_pcharc((pcharc const &)*arg2);
  }
  catch(pcharc _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pcharc", 0); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_pint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  pint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pint temp2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_pint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_pint" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&temp2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ref_pint" "', argument " "2"" of type '" "Stype""'"); 
  }
  arg2 =  &temp2;
  try {
    result = (pint *) &(arg1)->ref_pint((pint const &)*arg2);
  }
  catch(pint _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pint", 0); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_hello(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  Hello *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  Hello temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Hello *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_hello",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_hello" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_hello" "', argument " "2"" of type '" "Hello const &""'");
  } else {
    temp2 = static_cast< Hello >(val2);
    arg2 = &temp2;
  }
  try {
    result = (Hello *) &(arg1)->ref_hello((Hello const &)*arg2);
  }
  catch(Hello &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Hello", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_myint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  MyInt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MyInt temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MyInt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_myint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_myint" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  temp2 = static_cast< MyInt >(val2);
  arg2 = &temp2;
  try {
    result = (MyInt *) &(arg1)->ref_myint((MyInt const &)*arg2);
  }
  catch(MyInt &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "MyInt", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_parami(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  Param< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< int > temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_parami",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_parami" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  temp2 = static_cast< Param< int > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< int > *) &(arg1)->ref_parami((Param< int > const &)*arg2);
  }
  catch(Param< int > &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Param< int >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_paramd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  Param< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< double > temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_paramd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_paramd" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  temp2 = static_cast< Param< double > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< double > *) &(arg1)->ref_paramd((Param< double > const &)*arg2);
  }
  catch(Param< double > &_e) {
    SWIG_Python_Raise(SWIG_From_double(static_cast< double >(_e)), "Param< double >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_paramc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  Param< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< char > temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_paramc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_paramc" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  temp2 = static_cast< Param< char > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< char > *) &(arg1)->ref_paramc((Param< char > const &)*arg2);
  }
  catch(Param< char > &_e) {
    SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "Param< char >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_char(static_cast< char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ref_sizet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  size_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ref_sizet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_sizet" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  temp2 = static_cast< size_t >(val2);
  arg2 = &temp2;
  try {
    result = (size_t *) &(arg1)->ref_sizet((size_t const &)*arg2);
  }
  catch(size_t &_e) {
    SWIG_Python_Raise(SWIG_From_size_t(static_cast< size_t >(_e)), "size_t", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_c_check(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_c_check",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_c_check" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (int)(arg1)->c_check();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_v_check(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Test_v_check",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_v_check" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  result = (int)(arg1)->v_check();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((bool const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  signed char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char temp2 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "signed char""'");
  } 
  temp2 = static_cast< signed char >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((signed char const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned char""'");
  } 
  temp2 = static_cast< unsigned char >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned char const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((int const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned int const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short temp2 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "short""'");
  } 
  temp2 = static_cast< short >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((short const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned short""'");
  } 
  temp2 = static_cast< unsigned short >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned short const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((long const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned long""'");
  } 
  temp2 = static_cast< unsigned long >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned long const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "long long""'");
  } 
  temp2 = static_cast< long long >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((long long const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long temp2 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  temp2 = static_cast< unsigned long long >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((unsigned long long const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (int)(arg1)->ovr_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "char""'");
  } 
  temp2 = static_cast< char >(val2);
  arg2 = &temp2;
  result = (int)(arg1)->ovr_ref((char const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  result = (int)(arg1)->ovr_val(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_val(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_signed_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_val__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Test_ovr_val'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Test::ovr_val(bool)\n"
    "    Test::ovr_val(signed char)\n"
    "    Test::ovr_val(unsigned char)\n"
    "    Test::ovr_val(int)\n"
    "    Test::ovr_val(unsigned int)\n"
    "    Test::ovr_val(short)\n"
    "    Test::ovr_val(unsigned short)\n"
    "    Test::ovr_val(long)\n"
    "    Test::ovr_val(unsigned long)\n"
    "    Test::ovr_val(long long)\n"
    "    Test::ovr_val(unsigned long long)\n"
    "    Test::ovr_val(char)\n"
    "    Test::ovr_val(pchar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Test *arg1 = (Test *) 0 ;
  pchar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pchar temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Test_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
  }
  arg1 = reinterpret_cast< Test * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "pchar""'"); 
  }
  temp2 = reinterpret_cast< pchar >(argp2);
  arg2 = reinterpret_cast< pchar * >(&temp2);
  result = (int)(arg1)->ovr_ref((pchar const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Test_ovr_ref(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_char, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_signed_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Test, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Test_ovr_ref__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Test_ovr_ref'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Test::ovr_ref(bool const &)\n"
    "    Test::ovr_ref(signed char const &)\n"
    "    Test::ovr_ref(unsigned char const &)\n"
    "    Test::ovr_ref(int const &)\n"
    "    Test::ovr_ref(unsigned int const &)\n"
    "    Test::ovr_ref(short const &)\n"
    "    Test::ovr_ref(unsigned short const &)\n"
    "    Test::ovr_ref(long const &)\n"
    "    Test::ovr_ref(unsigned long const &)\n"
    "    Test::ovr_ref(long long const &)\n"
    "    Test::ovr_ref(unsigned long long const &)\n"
    "    Test::ovr_ref(char const &)\n"
    "    Test::ovr_ref(pchar const &)\n");
  return 0;
}


SWIGINTERN int Swig_var_Test_stc_double_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Test_stc_double is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Test_stc_double_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Test::stc_double));
  return pyobj;
}


SWIGINTERN int Swig_var_Test_stc_float_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Test_stc_float is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Test_stc_float_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Test::stc_float));
  return pyobj;
}


SWIGINTERN PyObject *Test_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Test, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TestDirector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  TestDirector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TestDirector",&obj0)) SWIG_fail;
  arg1 = obj0;
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (TestDirector *)new SwigDirector_TestDirector(arg1); 
  } else {
    result = (TestDirector *)new TestDirector(); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TestDirector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TestDirector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TestDirector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TestDirector" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_namet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_namet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_namet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_namet" "', argument " "2"" of type '" "char [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (char *)(arg1)->TestDirector::vval_namet(arg2);
      } else {
        result = (char *)(arg1)->vval_namet(arg2);
      }
    }
    catch(namet _e) {
      {
        size_t size = 5;
        
        while (size && (_e[size - 1] == '\0')) --size;
        
        SWIG_Python_Raise(SWIG_FromCharPtrAndSize(_e, size), "char [5]", 0); SWIG_fail; 
      }
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_cnamet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_cnamet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_cnamet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_cnamet" "', argument " "2"" of type '" "char const [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (char *)(arg1)->TestDirector::vval_cnamet(arg2);
      } else {
        result = (char *)(arg1)->vval_cnamet(arg2);
      }
    }
    catch(namet _e) {
      {
        size_t size = 5;
        
        while (size && (_e[size - 1] == '\0')) --size;
        
        SWIG_Python_Raise(SWIG_FromCharPtrAndSize(_e, size), "char [5]", 0); SWIG_fail; 
      }
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_bool_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_bool_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_bool_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_bool_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->var_bool = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_bool_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_bool_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_bool_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (bool) ((arg1)->var_bool);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_schar_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_schar_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_schar_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_schar_set" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  if (arg1) (arg1)->var_schar = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_schar_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  signed char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_schar_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_schar_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (signed char) ((arg1)->var_schar);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_uchar_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_uchar_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_uchar_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_uchar_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  if (arg1) (arg1)->var_uchar = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_uchar_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_uchar_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_uchar_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (unsigned char) ((arg1)->var_uchar);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_int_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_int_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_int_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_int_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->var_int = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_int_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_int_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_int_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (int) ((arg1)->var_int);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_uint_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_uint_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_uint_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_uint_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->var_uint = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_uint_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_uint_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_uint_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (unsigned int) ((arg1)->var_uint);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_short_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_short_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_short_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_short_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  if (arg1) (arg1)->var_short = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_short_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_short_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_short_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (short) ((arg1)->var_short);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_ushort_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_ushort_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ushort_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_ushort_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  if (arg1) (arg1)->var_ushort = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_ushort_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_ushort_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ushort_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (unsigned short) ((arg1)->var_ushort);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_long_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_long_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_long_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_long_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->var_long = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_long_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_long_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_long_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (long) ((arg1)->var_long);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_ulong_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_ulong_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ulong_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_ulong_set" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  if (arg1) (arg1)->var_ulong = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_ulong_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_ulong_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ulong_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (unsigned long) ((arg1)->var_ulong);
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_llong_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_llong_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_llong_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_llong_set" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  if (arg1) (arg1)->var_llong = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_llong_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_llong_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_llong_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (long long) ((arg1)->var_llong);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_ullong_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_ullong_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ullong_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_ullong_set" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  if (arg1) (arg1)->var_ullong = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_ullong_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_ullong_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ullong_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (unsigned long long) ((arg1)->var_ullong);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_char_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_char_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_char_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_char_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  if (arg1) (arg1)->var_char = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_char_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_char_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_char_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (char) ((arg1)->var_char);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_pchar_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_pchar_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pchar_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_var_pchar_set" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  if (arg1->var_pchar) delete[] arg1->var_pchar;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->var_pchar = (pchar)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->var_pchar = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_pchar_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pchar result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_pchar_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pchar_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (pchar) ((arg1)->var_pchar);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_pcharc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_pcharc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pcharc_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_var_pcharc_set" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->var_pcharc = (pcharc)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
  } else {
    arg1->var_pcharc = 0;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_pcharc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pcharc result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_pcharc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pcharc_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (pcharc) ((arg1)->var_pcharc);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_pint_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_pint_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pint_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_var_pint_set" "', argument " "2"" of type '" "pint""'"); 
  }
  if (arg1->var_pint) delete[] arg1->var_pint;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->var_pint = (pint)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->var_pint = 0;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_pint_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pint result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_pint_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pint_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (pint) ((arg1)->var_pint);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_hello_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_hello_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_hello_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_hello_set" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  if (arg1) (arg1)->var_hello = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_hello_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Hello result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_hello_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_hello_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (Hello) ((arg1)->var_hello);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_myint_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_myint_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_myint_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_myint_set" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  if (arg1) (arg1)->var_myint = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_myint_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MyInt result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_myint_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_myint_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result =  ((arg1)->var_myint);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_parami_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_parami_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_parami_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_parami_set" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  if (arg1) (arg1)->var_parami = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_parami_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Param< int > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_parami_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_parami_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result =  ((arg1)->var_parami);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_paramd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_paramd_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_paramd_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_paramd_set" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  if (arg1) (arg1)->var_paramd = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_paramd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Param< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_paramd_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_paramd_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result =  ((arg1)->var_paramd);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_paramc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_paramc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_paramc_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_paramc_set" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  if (arg1) (arg1)->var_paramc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_paramc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Param< char > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_paramc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_paramc_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result =  ((arg1)->var_paramc);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_sizet_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_sizet_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_sizet_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_sizet_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->var_sizet = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_sizet_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_sizet_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_sizet_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result =  ((arg1)->var_sizet);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_namet_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_var_namet_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_namet_set" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_var_namet_set" "', argument " "2"" of type '" "char [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->var_namet,arg2,5*sizeof(char));
  else memset(arg1->var_namet,0,5*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_var_namet_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_var_namet_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_namet_get" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (char *) ((arg1)->var_namet);
  {
    size_t size = 5;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_bool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_bool",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_bool" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  try {
    result = (bool)(arg1)->val_bool(arg2);
  }
  catch(bool &_e) {
    SWIG_Python_Raise(SWIG_From_bool(static_cast< bool >(_e)), "bool", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_schar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  signed char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_schar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  try {
    result = (signed char)(arg1)->val_schar(arg2);
  }
  catch(signed char &_e) {
    SWIG_Python_Raise(SWIG_From_signed_SS_char(static_cast< signed char >(_e)), "signed char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_uchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_uchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  try {
    result = (unsigned char)(arg1)->val_uchar(arg2);
  }
  catch(unsigned char &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e)), "unsigned char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_int",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_int" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (int)(arg1)->val_int(arg2);
  }
  catch(int &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "int", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_uint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_uint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  try {
    result = (unsigned int)(arg1)->val_uint(arg2);
  }
  catch(unsigned int &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e)), "unsigned int", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_short(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_short",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_short" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_short" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  try {
    result = (short)(arg1)->val_short(arg2);
  }
  catch(short &_e) {
    SWIG_Python_Raise(SWIG_From_short(static_cast< short >(_e)), "short", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_ushort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_ushort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  try {
    result = (unsigned short)(arg1)->val_ushort(arg2);
  }
  catch(unsigned short &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e)), "unsigned short", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_long",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_long" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_long" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  try {
    result = (long)(arg1)->val_long(arg2);
  }
  catch(long &_e) {
    SWIG_Python_Raise(SWIG_From_long(static_cast< long >(_e)), "long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_ulong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_ulong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  try {
    result = (unsigned long)(arg1)->val_ulong(arg2);
  }
  catch(unsigned long &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e)), "unsigned long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_llong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_llong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_llong" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  try {
    result = (long long)(arg1)->val_llong(arg2);
  }
  catch(long long &_e) {
    SWIG_Python_Raise(SWIG_From_long_SS_long(static_cast< long long >(_e)), "long long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_ullong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_ullong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  try {
    result = (unsigned long long)(arg1)->val_ullong(arg2);
  }
  catch(unsigned long long &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e)), "unsigned long long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_char(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_char",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_char" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_char" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  try {
    result = (char)(arg1)->val_char(arg2);
  }
  catch(char &_e) {
    SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_pchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pchar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_pchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_val_pchar" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  try {
    result = (pchar)(arg1)->val_pchar(arg2);
  }
  catch(pchar _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pchar", 0); SWIG_fail;
  }
  
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_pcharc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pcharc result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_pcharc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_val_pcharc" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  try {
    result = (pcharc)(arg1)->val_pcharc(arg2);
  }
  catch(pcharc _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pcharc", 0); SWIG_fail;
  }
  
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_pint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_pint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_val_pint" "', argument " "2"" of type '" "pint""'"); 
  }
  try {
    result = (pint)(arg1)->val_pint(arg2);
  }
  catch(pint _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pint", 0); SWIG_fail;
  }
  
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_hello(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Hello result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_hello",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_hello" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  try {
    result = (Hello)(arg1)->val_hello(arg2);
  }
  catch(Hello &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Hello", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_myint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MyInt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_myint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  try {
    result = (arg1)->val_myint(arg2);
  }
  catch(MyInt &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "MyInt", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_parami(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< int > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_parami",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  try {
    result = (arg1)->val_parami(arg2);
  }
  catch(Param< int > &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Param< int >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_paramd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_paramd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  try {
    result = (arg1)->val_paramd(arg2);
  }
  catch(Param< double > &_e) {
    SWIG_Python_Raise(SWIG_From_double(static_cast< double >(_e)), "Param< double >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_paramc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< char > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_paramc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  try {
    result = (arg1)->val_paramc(arg2);
  }
  catch(Param< char > &_e) {
    SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "Param< char >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_val_sizet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_val_sizet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (arg1)->val_sizet(arg2);
  }
  catch(size_t &_e) {
    SWIG_Python_Raise(SWIG_From_size_t(static_cast< size_t >(_e)), "size_t", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_bool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_bool",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_bool" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  try {
    result = (bool *) &(arg1)->ref_bool((bool const &)*arg2);
  }
  catch(bool &_e) {
    SWIG_Python_Raise(SWIG_From_bool(static_cast< bool >(_e)), "bool", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_schar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char temp2 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  signed char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_schar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  temp2 = static_cast< signed char >(val2);
  arg2 = &temp2;
  try {
    result = (signed char *) &(arg1)->ref_schar((signed char const &)*arg2);
  }
  catch(signed char &_e) {
    SWIG_Python_Raise(SWIG_From_signed_SS_char(static_cast< signed char >(_e)), "signed char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_uchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_uchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  temp2 = static_cast< unsigned char >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned char *) &(arg1)->ref_uchar((unsigned char const &)*arg2);
  }
  catch(unsigned char &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e)), "unsigned char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_int",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_int" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_int" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  try {
    result = (int *) &(arg1)->ref_int((int const &)*arg2);
  }
  catch(int &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "int", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_uint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_uint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned int *) &(arg1)->ref_uint((unsigned int const &)*arg2);
  }
  catch(unsigned int &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e)), "unsigned int", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_short(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short temp2 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  short *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_short",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_short" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_short" "', argument " "2"" of type '" "short""'");
  } 
  temp2 = static_cast< short >(val2);
  arg2 = &temp2;
  try {
    result = (short *) &(arg1)->ref_short((short const &)*arg2);
  }
  catch(short &_e) {
    SWIG_Python_Raise(SWIG_From_short(static_cast< short >(_e)), "short", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_short(static_cast< short >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_ushort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned short *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_ushort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  temp2 = static_cast< unsigned short >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned short *) &(arg1)->ref_ushort((unsigned short const &)*arg2);
  }
  catch(unsigned short &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e)), "unsigned short", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_long",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_long" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_long" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  try {
    result = (long *) &(arg1)->ref_long((long const &)*arg2);
  }
  catch(long &_e) {
    SWIG_Python_Raise(SWIG_From_long(static_cast< long >(_e)), "long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_ulong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_ulong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  temp2 = static_cast< unsigned long >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned long *) &(arg1)->ref_ulong((unsigned long const &)*arg2);
  }
  catch(unsigned long &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e)), "unsigned long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_llong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_llong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_llong" "', argument " "2"" of type '" "long long""'");
  } 
  temp2 = static_cast< long long >(val2);
  arg2 = &temp2;
  try {
    result = (long long *) &(arg1)->ref_llong((long long const &)*arg2);
  }
  catch(long long &_e) {
    SWIG_Python_Raise(SWIG_From_long_SS_long(static_cast< long long >(_e)), "long long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_ullong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long temp2 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned long long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_ullong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  temp2 = static_cast< unsigned long long >(val2);
  arg2 = &temp2;
  try {
    result = (unsigned long long *) &(arg1)->ref_ullong((unsigned long long const &)*arg2);
  }
  catch(unsigned long long &_e) {
    SWIG_Python_Raise(SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e)), "unsigned long long", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_char(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_char",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_char" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_char" "', argument " "2"" of type '" "char""'");
  } 
  temp2 = static_cast< char >(val2);
  arg2 = &temp2;
  try {
    result = (char *) &(arg1)->ref_char((char const &)*arg2);
  }
  catch(char &_e) {
    SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "char", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_char(static_cast< char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_pchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pchar temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pchar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_pchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ref_pchar" "', argument " "2"" of type '" "pchar""'"); 
  }
  temp2 = reinterpret_cast< pchar >(argp2);
  arg2 = reinterpret_cast< pchar * >(&temp2);
  try {
    result = (pchar *) &(arg1)->ref_pchar((pchar const &)*arg2);
  }
  catch(pchar _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pchar", 0); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_pcharc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pcharc temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pcharc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_pcharc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ref_pcharc" "', argument " "2"" of type '" "pcharc""'"); 
  }
  temp2 = reinterpret_cast< pcharc >(argp2);
  arg2 = reinterpret_cast< pcharc * >(&temp2);
  try {
    result = (pcharc *) &(arg1)->ref_pcharc((pcharc const &)*arg2);
  }
  catch(pcharc _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pcharc", 0); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_pint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pint temp2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_pint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&temp2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ref_pint" "', argument " "2"" of type '" "Stype""'"); 
  }
  arg2 =  &temp2;
  try {
    result = (pint *) &(arg1)->ref_pint((pint const &)*arg2);
  }
  catch(pint _e) {
    SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pint", 0); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_hello(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  Hello temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Hello *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_hello",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_hello" "', argument " "2"" of type '" "Hello const &""'");
  } else {
    temp2 = static_cast< Hello >(val2);
    arg2 = &temp2;
  }
  try {
    result = (Hello *) &(arg1)->ref_hello((Hello const &)*arg2);
  }
  catch(Hello &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Hello", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_myint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MyInt temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MyInt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_myint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  temp2 = static_cast< MyInt >(val2);
  arg2 = &temp2;
  try {
    result = (MyInt *) &(arg1)->ref_myint((MyInt const &)*arg2);
  }
  catch(MyInt &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "MyInt", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_parami(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< int > temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_parami",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  temp2 = static_cast< Param< int > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< int > *) &(arg1)->ref_parami((Param< int > const &)*arg2);
  }
  catch(Param< int > &_e) {
    SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Param< int >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_paramd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< double > temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_paramd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  temp2 = static_cast< Param< double > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< double > *) &(arg1)->ref_paramd((Param< double > const &)*arg2);
  }
  catch(Param< double > &_e) {
    SWIG_Python_Raise(SWIG_From_double(static_cast< double >(_e)), "Param< double >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_paramc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< char > temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_paramc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  temp2 = static_cast< Param< char > >(val2);
  arg2 = &temp2;
  try {
    result = (Param< char > *) &(arg1)->ref_paramc((Param< char > const &)*arg2);
  }
  catch(Param< char > &_e) {
    SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "Param< char >", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_char(static_cast< char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ref_sizet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ref_sizet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  temp2 = static_cast< size_t >(val2);
  arg2 = &temp2;
  try {
    result = (size_t *) &(arg1)->ref_sizet((size_t const &)*arg2);
  }
  catch(size_t &_e) {
    SWIG_Python_Raise(SWIG_From_size_t(static_cast< size_t >(_e)), "size_t", 0); SWIG_fail;
  }
  
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_bool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_bool",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_bool" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (bool)(arg1)->TestDirector::vval_bool(arg2);
      } else {
        result = (bool)(arg1)->vval_bool(arg2);
      }
    }
    catch(bool &_e) {
      SWIG_Python_Raise(SWIG_From_bool(static_cast< bool >(_e)), "bool", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_schar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  signed char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_schar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (signed char)(arg1)->TestDirector::vval_schar(arg2);
      } else {
        result = (signed char)(arg1)->vval_schar(arg2);
      }
    }
    catch(signed char &_e) {
      SWIG_Python_Raise(SWIG_From_signed_SS_char(static_cast< signed char >(_e)), "signed char", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_uchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  unsigned char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_uchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (unsigned char)(arg1)->TestDirector::vval_uchar(arg2);
      } else {
        result = (unsigned char)(arg1)->vval_uchar(arg2);
      }
    }
    catch(unsigned char &_e) {
      SWIG_Python_Raise(SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e)), "unsigned char", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_int",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_int" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (int)(arg1)->TestDirector::vval_int(arg2);
      } else {
        result = (int)(arg1)->vval_int(arg2);
      }
    }
    catch(int &_e) {
      SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "int", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_uint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_uint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (unsigned int)(arg1)->TestDirector::vval_uint(arg2);
      } else {
        result = (unsigned int)(arg1)->vval_uint(arg2);
      }
    }
    catch(unsigned int &_e) {
      SWIG_Python_Raise(SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e)), "unsigned int", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_short(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_short",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_short" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_short" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (short)(arg1)->TestDirector::vval_short(arg2);
      } else {
        result = (short)(arg1)->vval_short(arg2);
      }
    }
    catch(short &_e) {
      SWIG_Python_Raise(SWIG_From_short(static_cast< short >(_e)), "short", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_ushort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_ushort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (unsigned short)(arg1)->TestDirector::vval_ushort(arg2);
      } else {
        result = (unsigned short)(arg1)->vval_ushort(arg2);
      }
    }
    catch(unsigned short &_e) {
      SWIG_Python_Raise(SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e)), "unsigned short", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_long",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_long" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_long" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (long)(arg1)->TestDirector::vval_long(arg2);
      } else {
        result = (long)(arg1)->vval_long(arg2);
      }
    }
    catch(long &_e) {
      SWIG_Python_Raise(SWIG_From_long(static_cast< long >(_e)), "long", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_ulong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_ulong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (unsigned long)(arg1)->TestDirector::vval_ulong(arg2);
      } else {
        result = (unsigned long)(arg1)->vval_ulong(arg2);
      }
    }
    catch(unsigned long &_e) {
      SWIG_Python_Raise(SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e)), "unsigned long", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_llong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_llong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_llong" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (long long)(arg1)->TestDirector::vval_llong(arg2);
      } else {
        result = (long long)(arg1)->vval_llong(arg2);
      }
    }
    catch(long long &_e) {
      SWIG_Python_Raise(SWIG_From_long_SS_long(static_cast< long long >(_e)), "long long", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_ullong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  unsigned long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_ullong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (unsigned long long)(arg1)->TestDirector::vval_ullong(arg2);
      } else {
        result = (unsigned long long)(arg1)->vval_ullong(arg2);
      }
    }
    catch(unsigned long long &_e) {
      SWIG_Python_Raise(SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e)), "unsigned long long", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_char(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_char",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_char" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_char" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (char)(arg1)->TestDirector::vval_char(arg2);
      } else {
        result = (char)(arg1)->vval_char(arg2);
      }
    }
    catch(char &_e) {
      SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "char", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_pchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  pchar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_pchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_pchar" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (pchar)(arg1)->TestDirector::vval_pchar(arg2);
      } else {
        result = (pchar)(arg1)->vval_pchar(arg2);
      }
    }
    catch(pchar _e) {
      SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pchar", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_pcharc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  pcharc result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_pcharc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_pcharc" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (pcharc)(arg1)->TestDirector::vval_pcharc(arg2);
      } else {
        result = (pcharc)(arg1)->vval_pcharc(arg2);
      }
    }
    catch(pcharc _e) {
      SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pcharc", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_pint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  pint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_pint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_pint" "', argument " "2"" of type '" "pint""'"); 
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (pint)(arg1)->TestDirector::vval_pint(arg2);
      } else {
        result = (pint)(arg1)->vval_pint(arg2);
      }
    }
    catch(pint _e) {
      SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pint", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_hello(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  Hello result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_hello",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_hello" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (Hello)(arg1)->TestDirector::vval_hello(arg2);
      } else {
        result = (Hello)(arg1)->vval_hello(arg2);
      }
    }
    catch(Hello &_e) {
      SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Hello", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_myint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  MyInt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_myint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (arg1)->TestDirector::vval_myint(arg2);
      } else {
        result = (arg1)->vval_myint(arg2);
      }
    }
    catch(MyInt &_e) {
      SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "MyInt", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_parami(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  Param< int > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_parami",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (arg1)->TestDirector::vval_parami(arg2);
      } else {
        result = (arg1)->vval_parami(arg2);
      }
    }
    catch(Param< int > &_e) {
      SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Param< int >", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_paramd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  Param< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_paramd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (arg1)->TestDirector::vval_paramd(arg2);
      } else {
        result = (arg1)->vval_paramd(arg2);
      }
    }
    catch(Param< double > &_e) {
      SWIG_Python_Raise(SWIG_From_double(static_cast< double >(_e)), "Param< double >", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_paramc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  Param< char > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_paramc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (arg1)->TestDirector::vval_paramc(arg2);
      } else {
        result = (arg1)->vval_paramc(arg2);
      }
    }
    catch(Param< char > &_e) {
      SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "Param< char >", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vval_sizet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vval_sizet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (arg1)->TestDirector::vval_sizet(arg2);
      } else {
        result = (arg1)->vval_sizet(arg2);
      }
    }
    catch(size_t &_e) {
      SWIG_Python_Raise(SWIG_From_size_t(static_cast< size_t >(_e)), "size_t", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_bool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_bool",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_bool" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (bool *) &(arg1)->TestDirector::vref_bool((bool const &)*arg2);
      } else {
        result = (bool *) &(arg1)->vref_bool((bool const &)*arg2);
      }
    }
    catch(bool &_e) {
      SWIG_Python_Raise(SWIG_From_bool(static_cast< bool >(_e)), "bool", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_schar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char temp2 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  signed char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_schar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  temp2 = static_cast< signed char >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (signed char *) &(arg1)->TestDirector::vref_schar((signed char const &)*arg2);
      } else {
        result = (signed char *) &(arg1)->vref_schar((signed char const &)*arg2);
      }
    }
    catch(signed char &_e) {
      SWIG_Python_Raise(SWIG_From_signed_SS_char(static_cast< signed char >(_e)), "signed char", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_uchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  unsigned char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_uchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  temp2 = static_cast< unsigned char >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (unsigned char *) &(arg1)->TestDirector::vref_uchar((unsigned char const &)*arg2);
      } else {
        result = (unsigned char *) &(arg1)->vref_uchar((unsigned char const &)*arg2);
      }
    }
    catch(unsigned char &_e) {
      SWIG_Python_Raise(SWIG_From_unsigned_SS_char(static_cast< unsigned char >(_e)), "unsigned char", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_int",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_int" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_int" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (int *) &(arg1)->TestDirector::vref_int((int const &)*arg2);
      } else {
        result = (int *) &(arg1)->vref_int((int const &)*arg2);
      }
    }
    catch(int &_e) {
      SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "int", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_uint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  unsigned int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_uint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (unsigned int *) &(arg1)->TestDirector::vref_uint((unsigned int const &)*arg2);
      } else {
        result = (unsigned int *) &(arg1)->vref_uint((unsigned int const &)*arg2);
      }
    }
    catch(unsigned int &_e) {
      SWIG_Python_Raise(SWIG_From_unsigned_SS_int(static_cast< unsigned int >(_e)), "unsigned int", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_short(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short temp2 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  short *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_short",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_short" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_short" "', argument " "2"" of type '" "short""'");
  } 
  temp2 = static_cast< short >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (short *) &(arg1)->TestDirector::vref_short((short const &)*arg2);
      } else {
        result = (short *) &(arg1)->vref_short((short const &)*arg2);
      }
    }
    catch(short &_e) {
      SWIG_Python_Raise(SWIG_From_short(static_cast< short >(_e)), "short", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_short(static_cast< short >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_ushort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  unsigned short *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_ushort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  temp2 = static_cast< unsigned short >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (unsigned short *) &(arg1)->TestDirector::vref_ushort((unsigned short const &)*arg2);
      } else {
        result = (unsigned short *) &(arg1)->vref_ushort((unsigned short const &)*arg2);
      }
    }
    catch(unsigned short &_e) {
      SWIG_Python_Raise(SWIG_From_unsigned_SS_short(static_cast< unsigned short >(_e)), "unsigned short", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_long",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_long" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_long" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (long *) &(arg1)->TestDirector::vref_long((long const &)*arg2);
      } else {
        result = (long *) &(arg1)->vref_long((long const &)*arg2);
      }
    }
    catch(long &_e) {
      SWIG_Python_Raise(SWIG_From_long(static_cast< long >(_e)), "long", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_long(static_cast< long >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_ulong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  unsigned long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_ulong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  temp2 = static_cast< unsigned long >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (unsigned long *) &(arg1)->TestDirector::vref_ulong((unsigned long const &)*arg2);
      } else {
        result = (unsigned long *) &(arg1)->vref_ulong((unsigned long const &)*arg2);
      }
    }
    catch(unsigned long &_e) {
      SWIG_Python_Raise(SWIG_From_unsigned_SS_long(static_cast< unsigned long >(_e)), "unsigned long", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_llong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  long long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_llong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_llong" "', argument " "2"" of type '" "long long""'");
  } 
  temp2 = static_cast< long long >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (long long *) &(arg1)->TestDirector::vref_llong((long long const &)*arg2);
      } else {
        result = (long long *) &(arg1)->vref_llong((long long const &)*arg2);
      }
    }
    catch(long long &_e) {
      SWIG_Python_Raise(SWIG_From_long_SS_long(static_cast< long long >(_e)), "long long", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_ullong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long temp2 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  unsigned long long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_ullong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  temp2 = static_cast< unsigned long long >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (unsigned long long *) &(arg1)->TestDirector::vref_ullong((unsigned long long const &)*arg2);
      } else {
        result = (unsigned long long *) &(arg1)->vref_ullong((unsigned long long const &)*arg2);
      }
    }
    catch(unsigned long long &_e) {
      SWIG_Python_Raise(SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(_e)), "unsigned long long", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_char(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_char",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_char" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_char" "', argument " "2"" of type '" "char""'");
  } 
  temp2 = static_cast< char >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (char *) &(arg1)->TestDirector::vref_char((char const &)*arg2);
      } else {
        result = (char *) &(arg1)->vref_char((char const &)*arg2);
      }
    }
    catch(char &_e) {
      SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "char", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_char(static_cast< char >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_pchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pchar temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  pchar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_pchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vref_pchar" "', argument " "2"" of type '" "pchar""'"); 
  }
  temp2 = reinterpret_cast< pchar >(argp2);
  arg2 = reinterpret_cast< pchar * >(&temp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (pchar *) &(arg1)->TestDirector::vref_pchar((pchar const &)*arg2);
      } else {
        result = (pchar *) &(arg1)->vref_pchar((pchar const &)*arg2);
      }
    }
    catch(pchar _e) {
      SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pchar", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 );
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(*result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_pcharc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pcharc temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  pcharc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_pcharc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vref_pcharc" "', argument " "2"" of type '" "pcharc""'"); 
  }
  temp2 = reinterpret_cast< pcharc >(argp2);
  arg2 = reinterpret_cast< pcharc * >(&temp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (pcharc *) &(arg1)->TestDirector::vref_pcharc((pcharc const &)*arg2);
      } else {
        result = (pcharc *) &(arg1)->vref_pcharc((pcharc const &)*arg2);
      }
    }
    catch(pcharc _e) {
      SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pcharc", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 );
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(*result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_pint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  pint temp2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  pint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_pint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&temp2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vref_pint" "', argument " "2"" of type '" "Stype""'"); 
  }
  arg2 =  &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (pint *) &(arg1)->TestDirector::vref_pint((pint const &)*arg2);
      } else {
        result = (pint *) &(arg1)->vref_pint((pint const &)*arg2);
      }
    }
    catch(pint _e) {
      SWIG_Python_Raise(SWIG_FromCharPtr(_e), "pint", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 |  0 );
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(*result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_hello(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  Hello temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  Hello *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_hello",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_hello" "', argument " "2"" of type '" "Hello const &""'");
  } else {
    temp2 = static_cast< Hello >(val2);
    arg2 = &temp2;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (Hello *) &(arg1)->TestDirector::vref_hello((Hello const &)*arg2);
      } else {
        result = (Hello *) &(arg1)->vref_hello((Hello const &)*arg2);
      }
    }
    catch(Hello &_e) {
      SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Hello", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_myint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MyInt temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  MyInt *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_myint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  temp2 = static_cast< MyInt >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (MyInt *) &(arg1)->TestDirector::vref_myint((MyInt const &)*arg2);
      } else {
        result = (MyInt *) &(arg1)->vref_myint((MyInt const &)*arg2);
      }
    }
    catch(MyInt &_e) {
      SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "MyInt", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_parami(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< int > temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  Param< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_parami",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  temp2 = static_cast< Param< int > >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (Param< int > *) &(arg1)->TestDirector::vref_parami((Param< int > const &)*arg2);
      } else {
        result = (Param< int > *) &(arg1)->vref_parami((Param< int > const &)*arg2);
      }
    }
    catch(Param< int > &_e) {
      SWIG_Python_Raise(SWIG_From_int(static_cast< int >(_e)), "Param< int >", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_paramd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< double > temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  Param< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_paramd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  temp2 = static_cast< Param< double > >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (Param< double > *) &(arg1)->TestDirector::vref_paramd((Param< double > const &)*arg2);
      } else {
        result = (Param< double > *) &(arg1)->vref_paramd((Param< double > const &)*arg2);
      }
    }
    catch(Param< double > &_e) {
      SWIG_Python_Raise(SWIG_From_double(static_cast< double >(_e)), "Param< double >", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_paramc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Param< char > temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  Param< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_paramc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  temp2 = static_cast< Param< char > >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (Param< char > *) &(arg1)->TestDirector::vref_paramc((Param< char > const &)*arg2);
      } else {
        result = (Param< char > *) &(arg1)->vref_paramc((Param< char > const &)*arg2);
      }
    }
    catch(Param< char > &_e) {
      SWIG_Python_Raise(SWIG_From_char(static_cast< char >(_e)), "Param< char >", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_char(static_cast< char >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_vref_sizet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  size_t *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vref_sizet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  temp2 = static_cast< size_t >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (size_t *) &(arg1)->TestDirector::vref_sizet((size_t const &)*arg2);
      } else {
        result = (size_t *) &(arg1)->vref_sizet((size_t const &)*arg2);
      }
    }
    catch(size_t &_e) {
      SWIG_Python_Raise(SWIG_From_size_t(static_cast< size_t >(_e)), "size_t", 0); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  if (director) {
    director->swig_release_ownership(SWIG_as_voidptr(result));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_bool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_bool",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_bool" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->wrp_vref_bool(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_schar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  signed char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_schar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  result = (signed char)(arg1)->wrp_vref_schar(arg2);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_uchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_uchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  result = (unsigned char)(arg1)->wrp_vref_uchar(arg2);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_int",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_int" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->wrp_vref_int(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_uint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_uint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->wrp_vref_uint(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_short(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_short",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_short" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_short" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (short)(arg1)->wrp_vref_short(arg2);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_ushort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_ushort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  result = (unsigned short)(arg1)->wrp_vref_ushort(arg2);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_long",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_long" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_long" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)(arg1)->wrp_vref_long(arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_ulong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_ulong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (unsigned long)(arg1)->wrp_vref_ulong(arg2);
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_llong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_llong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_llong" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (long long)(arg1)->wrp_vref_llong(arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_ullong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_ullong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  result = (unsigned long long)(arg1)->wrp_vref_ullong(arg2);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_char(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_char",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_char" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_char" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (char)(arg1)->wrp_vref_char(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_pchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pchar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_pchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vref_pchar" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  result = (pchar)(arg1)->wrp_vref_pchar(arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_pcharc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pcharc result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_pcharc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vref_pcharc" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  result = (pcharc)(arg1)->wrp_vref_pcharc(arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_pint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_pint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vref_pint" "', argument " "2"" of type '" "pint""'"); 
  }
  result = (pint)(arg1)->wrp_vref_pint(arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_hello(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Hello result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_hello",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_hello" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  result = (Hello)(arg1)->wrp_vref_hello(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_myint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MyInt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_myint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  result = (arg1)->wrp_vref_myint(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_parami(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< int > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_parami",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  result = (arg1)->wrp_vref_parami(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_paramd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_paramd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  result = (arg1)->wrp_vref_paramd(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_paramc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< char > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_paramc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  result = (arg1)->wrp_vref_paramc(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vref_sizet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vref_sizet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->wrp_vref_sizet(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_bool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_bool",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_bool" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->wrp_vval_bool(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_schar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  signed char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_schar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_schar" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  result = (signed char)(arg1)->wrp_vval_schar(arg2);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_uchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_uchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_uchar" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  result = (unsigned char)(arg1)->wrp_vval_uchar(arg2);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_int",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_int" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_int" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->wrp_vval_int(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_uint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_uint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_uint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(arg1)->wrp_vval_uint(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_short(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  short result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_short",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_short" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_short" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (short)(arg1)->wrp_vval_short(arg2);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_ushort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned short result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_ushort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_ushort" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  result = (unsigned short)(arg1)->wrp_vval_ushort(arg2);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_long",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_long" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_long" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (long)(arg1)->wrp_vval_long(arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_ulong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_ulong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_ulong" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (unsigned long)(arg1)->wrp_vval_ulong(arg2);
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_llong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_llong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_llong" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (long long)(arg1)->wrp_vval_llong(arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_ullong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned long long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_ullong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_ullong" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  result = (unsigned long long)(arg1)->wrp_vval_ullong(arg2);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_char(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_char",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_char" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_char" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (char)(arg1)->wrp_vval_char(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_pchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pchar result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_pchar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vval_pchar" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  result = (pchar)(arg1)->wrp_vval_pchar(arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_pcharc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pcharc arg2 = (pcharc) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pcharc result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_pcharc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vval_pcharc" "', argument " "2"" of type '" "pcharc""'");
  }
  arg2 = reinterpret_cast< pcharc >(buf2);
  result = (pcharc)(arg1)->wrp_vval_pcharc(arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_pint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pint arg2 = (pint) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  pint result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_pint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vval_pint" "', argument " "2"" of type '" "pint""'"); 
  }
  result = (pint)(arg1)->wrp_vval_pint(arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_hello(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Hello arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Hello result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_hello",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_hello" "', argument " "2"" of type '" "Hello""'");
  } 
  arg2 = static_cast< Hello >(val2);
  result = (Hello)(arg1)->wrp_vval_hello(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_myint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  MyInt arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MyInt result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_myint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_myint" "', argument " "2"" of type '" "MyInt""'");
  } 
  arg2 = static_cast< MyInt >(val2);
  result = (arg1)->wrp_vval_myint(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_parami(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< int > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< int > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_parami",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_parami" "', argument " "2"" of type '" "Param< int >""'");
  } 
  arg2 = static_cast< Param< int > >(val2);
  result = (arg1)->wrp_vval_parami(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_paramd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_paramd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_paramd" "', argument " "2"" of type '" "Param< double >""'");
  } 
  arg2 = static_cast< Param< double > >(val2);
  result = (arg1)->wrp_vval_paramd(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_paramc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Param< char > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Param< char > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_paramc",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_paramc" "', argument " "2"" of type '" "Param< char >""'");
  } 
  arg2 = static_cast< Param< char > >(val2);
  result = (arg1)->wrp_vval_paramc(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_wrp_vval_sizet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_wrp_vval_sizet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_sizet" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->wrp_vval_sizet(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_c_check(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_c_check",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_c_check" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (int)(arg1)->c_check();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_v_check(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TestDirector_v_check",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_v_check" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  result = (int)(arg1)->v_check();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_val(arg2);
    } else {
      result = (int)(arg1)->ovr_val(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "bool""'");
  } 
  temp2 = static_cast< bool >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_ref((bool const &)*arg2);
    } else {
      result = (int)(arg1)->ovr_ref((bool const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "signed char""'");
  } 
  arg2 = static_cast< signed char >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_val(arg2);
    } else {
      result = (int)(arg1)->ovr_val(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  signed char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  signed char temp2 ;
  signed char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_signed_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "signed char""'");
  } 
  temp2 = static_cast< signed char >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_ref((signed char const &)*arg2);
    } else {
      result = (int)(arg1)->ovr_ref((signed char const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_val(arg2);
    } else {
      result = (int)(arg1)->ovr_val(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char temp2 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned char""'");
  } 
  temp2 = static_cast< unsigned char >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_ref((unsigned char const &)*arg2);
    } else {
      result = (int)(arg1)->ovr_ref((unsigned char const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_val(arg2);
    } else {
      result = (int)(arg1)->ovr_val(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_ref((int const &)*arg2);
    } else {
      result = (int)(arg1)->ovr_ref((int const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_val(arg2);
    } else {
      result = (int)(arg1)->ovr_val(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_ref((unsigned int const &)*arg2);
    } else {
      result = (int)(arg1)->ovr_ref((unsigned int const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_val(arg2);
    } else {
      result = (int)(arg1)->ovr_val(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short temp2 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "short""'");
  } 
  temp2 = static_cast< short >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_ref((short const &)*arg2);
    } else {
      result = (int)(arg1)->ovr_ref((short const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_val(arg2);
    } else {
      result = (int)(arg1)->ovr_val(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short temp2 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned short""'");
  } 
  temp2 = static_cast< unsigned short >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_ref((unsigned short const &)*arg2);
    } else {
      result = (int)(arg1)->ovr_ref((unsigned short const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_val(arg2);
    } else {
      result = (int)(arg1)->ovr_val(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "long""'");
  } 
  temp2 = static_cast< long >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_ref((long const &)*arg2);
    } else {
      result = (int)(arg1)->ovr_ref((long const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_val(arg2);
    } else {
      result = (int)(arg1)->ovr_val(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned long""'");
  } 
  temp2 = static_cast< unsigned long >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_ref((unsigned long const &)*arg2);
    } else {
      result = (int)(arg1)->ovr_ref((unsigned long const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_val(arg2);
    } else {
      result = (int)(arg1)->ovr_val(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "long long""'");
  } 
  temp2 = static_cast< long long >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_ref((long long const &)*arg2);
    } else {
      result = (int)(arg1)->ovr_ref((long long const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_val(arg2);
    } else {
      result = (int)(arg1)->ovr_val(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long temp2 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  temp2 = static_cast< unsigned long long >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_ref((unsigned long long const &)*arg2);
    } else {
      result = (int)(arg1)->ovr_ref((unsigned long long const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_val(arg2);
    } else {
      result = (int)(arg1)->ovr_val(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  char *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "char""'");
  } 
  temp2 = static_cast< char >(val2);
  arg2 = &temp2;
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_ref((char const &)*arg2);
    } else {
      result = (int)(arg1)->ovr_ref((char const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar arg2 = (pchar) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_val",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "pchar""'");
  }
  arg2 = reinterpret_cast< pchar >(buf2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_val(arg2);
    } else {
      result = (int)(arg1)->ovr_val(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_val(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_signed_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_val__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TestDirector_ovr_val'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TestDirector::ovr_val(bool)\n"
    "    TestDirector::ovr_val(signed char)\n"
    "    TestDirector::ovr_val(unsigned char)\n"
    "    TestDirector::ovr_val(int)\n"
    "    TestDirector::ovr_val(unsigned int)\n"
    "    TestDirector::ovr_val(short)\n"
    "    TestDirector::ovr_val(unsigned short)\n"
    "    TestDirector::ovr_val(long)\n"
    "    TestDirector::ovr_val(unsigned long)\n"
    "    TestDirector::ovr_val(long long)\n"
    "    TestDirector::ovr_val(unsigned long long)\n"
    "    TestDirector::ovr_val(char)\n"
    "    TestDirector::ovr_val(pchar)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  pchar *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  pchar temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_ovr_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "pchar""'"); 
  }
  temp2 = reinterpret_cast< pchar >(argp2);
  arg2 = reinterpret_cast< pchar * >(&temp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      result = (int)(arg1)->TestDirector::ovr_ref((pchar const &)*arg2);
    } else {
      result = (int)(arg1)->ovr_ref((pchar const &)*arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestDirector_ovr_ref(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_char, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_12(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_signed_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_11(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_TestDirector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TestDirector_ovr_ref__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TestDirector_ovr_ref'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TestDirector::ovr_ref(bool const &)\n"
    "    TestDirector::ovr_ref(signed char const &)\n"
    "    TestDirector::ovr_ref(unsigned char const &)\n"
    "    TestDirector::ovr_ref(int const &)\n"
    "    TestDirector::ovr_ref(unsigned int const &)\n"
    "    TestDirector::ovr_ref(short const &)\n"
    "    TestDirector::ovr_ref(unsigned short const &)\n"
    "    TestDirector::ovr_ref(long const &)\n"
    "    TestDirector::ovr_ref(unsigned long const &)\n"
    "    TestDirector::ovr_ref(long long const &)\n"
    "    TestDirector::ovr_ref(unsigned long long const &)\n"
    "    TestDirector::ovr_ref(char const &)\n"
    "    TestDirector::ovr_ref(pchar const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TestDirector_vtest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  Test *arg2 = (Test *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  Test *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestDirector_vtest",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vtest" "', argument " "1"" of type '" "TestDirector const *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Test, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vtest" "', argument " "2"" of type '" "Test *""'"); 
  }
  arg2 = reinterpret_cast< Test * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    try {
      if (upcall) {
        result = (Test *)((TestDirector const *)arg1)->TestDirector::vtest(arg2);
      } else {
        result = (Test *)((TestDirector const *)arg1)->vtest(arg2);
      }
    }
    catch(Test &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new Test(static_cast< const Test& >(_e))),SWIGTYPE_p_Test,SWIG_POINTER_OWN), "Test", SWIGTYPE_p_Test); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Test, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_TestDirector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TestDirector *arg1 = (TestDirector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_TestDirector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_TestDirector" "', argument " "1"" of type '" "TestDirector *""'"); 
  }
  arg1 = reinterpret_cast< TestDirector * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TestDirector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TestDirector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_v_check(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":v_check")) SWIG_fail;
  result = (int)v_check();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_char_foo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  char *arg2 = (char *) 0 ;
  float val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:char_foo",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "char_foo" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "char_foo" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (char *)char_foo(arg1,(char const *)arg2);
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_char_foo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:char_foo",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "char_foo" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "char_foo" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)char_foo(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_char_foo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_char_foo__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_char_foo__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'char_foo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    char_foo(float,char const *)\n"
    "    char_foo(double,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SetPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DCTypes::cuint *arg1 = 0 ;
  DCTypes::cuint *arg2 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetPos",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetPos" "', argument " "1"" of type '" "unsigned int""'");
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetPos" "', argument " "2"" of type '" "unsigned int""'");
  } 
  temp2 = static_cast< unsigned int >(val2);
  arg2 = &temp2;
  result = (unsigned int)DCSystem::SetPos((unsigned int const &)*arg1,(unsigned int const &)*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_double_2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double *arg2 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:val_double_2",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_double_2" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "val_double_2" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (double)val_double_2(arg1,(double const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_double_2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_double_2",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_double_2" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)val_double_2(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_double_2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_val_double_2__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_val_double_2__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'val_double_2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    val_double_2(double,double const &)\n"
    "    val_double_2(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_val_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_double",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_double" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)val_double(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_float_2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float *arg2 = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:val_float_2",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_float_2" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "val_float_2" "', argument " "2"" of type '" "float""'");
  } 
  temp2 = static_cast< float >(val2);
  arg2 = &temp2;
  result = (float)val_float_2(arg1,(float const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_float_2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_float_2",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_float_2" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)val_float_2(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_val_float_2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_val_float_2__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_val_float_2__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'val_float_2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    val_float_2(float,float const &)\n"
    "    val_float_2(float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_regression_test_for_bug1699646__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:regression_test_for_bug1699646",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "regression_test_for_bug1699646" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)regression_test_for_bug1699646(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_regression_test_for_bug1699646__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)":regression_test_for_bug1699646")) SWIG_fail;
  result = (float)regression_test_for_bug1699646();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_regression_test_for_bug1699646(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_regression_test_for_bug1699646__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_regression_test_for_bug1699646__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'regression_test_for_bug1699646'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    regression_test_for_bug1699646(float)\n"
    "    regression_test_for_bug1699646()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_val_float(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:val_float",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_float" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  result = (float)val_float(arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_pchar",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_pchar" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (char *)new_pchar(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pchar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_pchar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pchar" "', argument " "1"" of type '" "char *""'"); 
  }
  arg1 = reinterpret_cast< char * >(argp1);
  delete_pchar(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pchar_getitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pchar_getitem",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pchar_getitem" "', argument " "1"" of type '" "char *""'"); 
  }
  arg1 = reinterpret_cast< char * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pchar_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (char)pchar_getitem(arg1,arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pchar_setitem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pchar_setitem",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pchar_setitem" "', argument " "1"" of type '" "char *""'"); 
  }
  arg1 = reinterpret_cast< char * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pchar_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pchar_setitem" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  pchar_setitem(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"val_bool", _wrap_val_bool, METH_VARARGS, NULL},
	 { (char *)"val_schar", _wrap_val_schar, METH_VARARGS, NULL},
	 { (char *)"val_uchar", _wrap_val_uchar, METH_VARARGS, NULL},
	 { (char *)"val_int", _wrap_val_int, METH_VARARGS, NULL},
	 { (char *)"val_uint", _wrap_val_uint, METH_VARARGS, NULL},
	 { (char *)"val_short", _wrap_val_short, METH_VARARGS, NULL},
	 { (char *)"val_ushort", _wrap_val_ushort, METH_VARARGS, NULL},
	 { (char *)"val_long", _wrap_val_long, METH_VARARGS, NULL},
	 { (char *)"val_ulong", _wrap_val_ulong, METH_VARARGS, NULL},
	 { (char *)"val_llong", _wrap_val_llong, METH_VARARGS, NULL},
	 { (char *)"val_ullong", _wrap_val_ullong, METH_VARARGS, NULL},
	 { (char *)"val_char", _wrap_val_char, METH_VARARGS, NULL},
	 { (char *)"val_pchar", _wrap_val_pchar, METH_VARARGS, NULL},
	 { (char *)"val_pcharc", _wrap_val_pcharc, METH_VARARGS, NULL},
	 { (char *)"val_pint", _wrap_val_pint, METH_VARARGS, NULL},
	 { (char *)"val_hello", _wrap_val_hello, METH_VARARGS, NULL},
	 { (char *)"val_myint", _wrap_val_myint, METH_VARARGS, NULL},
	 { (char *)"val_parami", _wrap_val_parami, METH_VARARGS, NULL},
	 { (char *)"val_paramd", _wrap_val_paramd, METH_VARARGS, NULL},
	 { (char *)"val_paramc", _wrap_val_paramc, METH_VARARGS, NULL},
	 { (char *)"val_sizet", _wrap_val_sizet, METH_VARARGS, NULL},
	 { (char *)"ref_bool", _wrap_ref_bool, METH_VARARGS, NULL},
	 { (char *)"ref_schar", _wrap_ref_schar, METH_VARARGS, NULL},
	 { (char *)"ref_uchar", _wrap_ref_uchar, METH_VARARGS, NULL},
	 { (char *)"ref_int", _wrap_ref_int, METH_VARARGS, NULL},
	 { (char *)"ref_uint", _wrap_ref_uint, METH_VARARGS, NULL},
	 { (char *)"ref_short", _wrap_ref_short, METH_VARARGS, NULL},
	 { (char *)"ref_ushort", _wrap_ref_ushort, METH_VARARGS, NULL},
	 { (char *)"ref_long", _wrap_ref_long, METH_VARARGS, NULL},
	 { (char *)"ref_ulong", _wrap_ref_ulong, METH_VARARGS, NULL},
	 { (char *)"ref_llong", _wrap_ref_llong, METH_VARARGS, NULL},
	 { (char *)"ref_ullong", _wrap_ref_ullong, METH_VARARGS, NULL},
	 { (char *)"ref_char", _wrap_ref_char, METH_VARARGS, NULL},
	 { (char *)"ref_pchar", _wrap_ref_pchar, METH_VARARGS, NULL},
	 { (char *)"ref_pcharc", _wrap_ref_pcharc, METH_VARARGS, NULL},
	 { (char *)"ref_pint", _wrap_ref_pint, METH_VARARGS, NULL},
	 { (char *)"ref_hello", _wrap_ref_hello, METH_VARARGS, NULL},
	 { (char *)"ref_myint", _wrap_ref_myint, METH_VARARGS, NULL},
	 { (char *)"ref_parami", _wrap_ref_parami, METH_VARARGS, NULL},
	 { (char *)"ref_paramd", _wrap_ref_paramd, METH_VARARGS, NULL},
	 { (char *)"ref_paramc", _wrap_ref_paramc, METH_VARARGS, NULL},
	 { (char *)"ref_sizet", _wrap_ref_sizet, METH_VARARGS, NULL},
	 { (char *)"var_init", _wrap_var_init, METH_VARARGS, NULL},
	 { (char *)"Foo__a_set", _wrap_Foo__a_set, METH_VARARGS, NULL},
	 { (char *)"Foo__a_get", _wrap_Foo__a_get, METH_VARARGS, NULL},
	 { (char *)"new_Foo", _wrap_new_Foo, METH_VARARGS, NULL},
	 { (char *)"Foo_copy", _wrap_Foo_copy, METH_VARARGS, NULL},
	 { (char *)"Foo_copy_c", _wrap_Foo_copy_c, METH_VARARGS, NULL},
	 { (char *)"Foo_copy_r", _wrap_Foo_copy_r, METH_VARARGS, NULL},
	 { (char *)"Foo_this_p", _wrap_Foo_this_p, METH_VARARGS, NULL},
	 { (char *)"Foo_this_r", _wrap_Foo_this_r, METH_VARARGS, NULL},
	 { (char *)"delete_Foo", _wrap_delete_Foo, METH_VARARGS, NULL},
	 { (char *)"Foo_swigregister", Foo_swigregister, METH_VARARGS, NULL},
	 { (char *)"fptr_val", _wrap_fptr_val, METH_VARARGS, NULL},
	 { (char *)"fptr_ref", _wrap_fptr_ref, METH_VARARGS, NULL},
	 { (char *)"new_Test", _wrap_new_Test, METH_VARARGS, NULL},
	 { (char *)"delete_Test", _wrap_delete_Test, METH_VARARGS, NULL},
	 { (char *)"Test_var_bool_set", _wrap_Test_var_bool_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_bool_get", _wrap_Test_var_bool_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_schar_set", _wrap_Test_var_schar_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_schar_get", _wrap_Test_var_schar_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_uchar_set", _wrap_Test_var_uchar_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_uchar_get", _wrap_Test_var_uchar_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_int_set", _wrap_Test_var_int_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_int_get", _wrap_Test_var_int_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_uint_set", _wrap_Test_var_uint_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_uint_get", _wrap_Test_var_uint_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_short_set", _wrap_Test_var_short_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_short_get", _wrap_Test_var_short_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_ushort_set", _wrap_Test_var_ushort_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_ushort_get", _wrap_Test_var_ushort_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_long_set", _wrap_Test_var_long_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_long_get", _wrap_Test_var_long_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_ulong_set", _wrap_Test_var_ulong_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_ulong_get", _wrap_Test_var_ulong_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_llong_set", _wrap_Test_var_llong_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_llong_get", _wrap_Test_var_llong_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_ullong_set", _wrap_Test_var_ullong_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_ullong_get", _wrap_Test_var_ullong_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_char_set", _wrap_Test_var_char_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_char_get", _wrap_Test_var_char_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_pchar_set", _wrap_Test_var_pchar_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_pchar_get", _wrap_Test_var_pchar_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_pcharc_set", _wrap_Test_var_pcharc_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_pcharc_get", _wrap_Test_var_pcharc_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_pint_set", _wrap_Test_var_pint_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_pint_get", _wrap_Test_var_pint_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_hello_set", _wrap_Test_var_hello_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_hello_get", _wrap_Test_var_hello_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_myint_set", _wrap_Test_var_myint_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_myint_get", _wrap_Test_var_myint_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_parami_set", _wrap_Test_var_parami_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_parami_get", _wrap_Test_var_parami_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_paramd_set", _wrap_Test_var_paramd_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_paramd_get", _wrap_Test_var_paramd_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_paramc_set", _wrap_Test_var_paramc_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_paramc_get", _wrap_Test_var_paramc_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_sizet_set", _wrap_Test_var_sizet_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_sizet_get", _wrap_Test_var_sizet_get, METH_VARARGS, NULL},
	 { (char *)"Test_var_namet_set", _wrap_Test_var_namet_set, METH_VARARGS, NULL},
	 { (char *)"Test_var_namet_get", _wrap_Test_var_namet_get, METH_VARARGS, NULL},
	 { (char *)"Test_val_namet", _wrap_Test_val_namet, METH_VARARGS, NULL},
	 { (char *)"Test_val_cnamet", _wrap_Test_val_cnamet, METH_VARARGS, NULL},
	 { (char *)"Test_val_bool", _wrap_Test_val_bool, METH_VARARGS, NULL},
	 { (char *)"Test_val_schar", _wrap_Test_val_schar, METH_VARARGS, NULL},
	 { (char *)"Test_val_uchar", _wrap_Test_val_uchar, METH_VARARGS, NULL},
	 { (char *)"Test_val_int", _wrap_Test_val_int, METH_VARARGS, NULL},
	 { (char *)"Test_val_uint", _wrap_Test_val_uint, METH_VARARGS, NULL},
	 { (char *)"Test_val_short", _wrap_Test_val_short, METH_VARARGS, NULL},
	 { (char *)"Test_val_ushort", _wrap_Test_val_ushort, METH_VARARGS, NULL},
	 { (char *)"Test_val_long", _wrap_Test_val_long, METH_VARARGS, NULL},
	 { (char *)"Test_val_ulong", _wrap_Test_val_ulong, METH_VARARGS, NULL},
	 { (char *)"Test_val_llong", _wrap_Test_val_llong, METH_VARARGS, NULL},
	 { (char *)"Test_val_ullong", _wrap_Test_val_ullong, METH_VARARGS, NULL},
	 { (char *)"Test_val_char", _wrap_Test_val_char, METH_VARARGS, NULL},
	 { (char *)"Test_val_pchar", _wrap_Test_val_pchar, METH_VARARGS, NULL},
	 { (char *)"Test_val_pcharc", _wrap_Test_val_pcharc, METH_VARARGS, NULL},
	 { (char *)"Test_val_pint", _wrap_Test_val_pint, METH_VARARGS, NULL},
	 { (char *)"Test_val_hello", _wrap_Test_val_hello, METH_VARARGS, NULL},
	 { (char *)"Test_val_myint", _wrap_Test_val_myint, METH_VARARGS, NULL},
	 { (char *)"Test_val_parami", _wrap_Test_val_parami, METH_VARARGS, NULL},
	 { (char *)"Test_val_paramd", _wrap_Test_val_paramd, METH_VARARGS, NULL},
	 { (char *)"Test_val_paramc", _wrap_Test_val_paramc, METH_VARARGS, NULL},
	 { (char *)"Test_val_sizet", _wrap_Test_val_sizet, METH_VARARGS, NULL},
	 { (char *)"Test_ref_bool", _wrap_Test_ref_bool, METH_VARARGS, NULL},
	 { (char *)"Test_ref_schar", _wrap_Test_ref_schar, METH_VARARGS, NULL},
	 { (char *)"Test_ref_uchar", _wrap_Test_ref_uchar, METH_VARARGS, NULL},
	 { (char *)"Test_ref_int", _wrap_Test_ref_int, METH_VARARGS, NULL},
	 { (char *)"Test_ref_uint", _wrap_Test_ref_uint, METH_VARARGS, NULL},
	 { (char *)"Test_ref_short", _wrap_Test_ref_short, METH_VARARGS, NULL},
	 { (char *)"Test_ref_ushort", _wrap_Test_ref_ushort, METH_VARARGS, NULL},
	 { (char *)"Test_ref_long", _wrap_Test_ref_long, METH_VARARGS, NULL},
	 { (char *)"Test_ref_ulong", _wrap_Test_ref_ulong, METH_VARARGS, NULL},
	 { (char *)"Test_ref_llong", _wrap_Test_ref_llong, METH_VARARGS, NULL},
	 { (char *)"Test_ref_ullong", _wrap_Test_ref_ullong, METH_VARARGS, NULL},
	 { (char *)"Test_ref_char", _wrap_Test_ref_char, METH_VARARGS, NULL},
	 { (char *)"Test_ref_pchar", _wrap_Test_ref_pchar, METH_VARARGS, NULL},
	 { (char *)"Test_ref_pcharc", _wrap_Test_ref_pcharc, METH_VARARGS, NULL},
	 { (char *)"Test_ref_pint", _wrap_Test_ref_pint, METH_VARARGS, NULL},
	 { (char *)"Test_ref_hello", _wrap_Test_ref_hello, METH_VARARGS, NULL},
	 { (char *)"Test_ref_myint", _wrap_Test_ref_myint, METH_VARARGS, NULL},
	 { (char *)"Test_ref_parami", _wrap_Test_ref_parami, METH_VARARGS, NULL},
	 { (char *)"Test_ref_paramd", _wrap_Test_ref_paramd, METH_VARARGS, NULL},
	 { (char *)"Test_ref_paramc", _wrap_Test_ref_paramc, METH_VARARGS, NULL},
	 { (char *)"Test_ref_sizet", _wrap_Test_ref_sizet, METH_VARARGS, NULL},
	 { (char *)"Test_c_check", _wrap_Test_c_check, METH_VARARGS, NULL},
	 { (char *)"Test_v_check", _wrap_Test_v_check, METH_VARARGS, NULL},
	 { (char *)"Test_ovr_val", _wrap_Test_ovr_val, METH_VARARGS, NULL},
	 { (char *)"Test_ovr_ref", _wrap_Test_ovr_ref, METH_VARARGS, NULL},
	 { (char *)"Test_swigregister", Test_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TestDirector", _wrap_new_TestDirector, METH_VARARGS, NULL},
	 { (char *)"delete_TestDirector", _wrap_delete_TestDirector, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_namet", _wrap_TestDirector_vval_namet, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_cnamet", _wrap_TestDirector_vval_cnamet, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_bool_set", _wrap_TestDirector_var_bool_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_bool_get", _wrap_TestDirector_var_bool_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_schar_set", _wrap_TestDirector_var_schar_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_schar_get", _wrap_TestDirector_var_schar_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_uchar_set", _wrap_TestDirector_var_uchar_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_uchar_get", _wrap_TestDirector_var_uchar_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_int_set", _wrap_TestDirector_var_int_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_int_get", _wrap_TestDirector_var_int_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_uint_set", _wrap_TestDirector_var_uint_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_uint_get", _wrap_TestDirector_var_uint_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_short_set", _wrap_TestDirector_var_short_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_short_get", _wrap_TestDirector_var_short_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_ushort_set", _wrap_TestDirector_var_ushort_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_ushort_get", _wrap_TestDirector_var_ushort_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_long_set", _wrap_TestDirector_var_long_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_long_get", _wrap_TestDirector_var_long_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_ulong_set", _wrap_TestDirector_var_ulong_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_ulong_get", _wrap_TestDirector_var_ulong_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_llong_set", _wrap_TestDirector_var_llong_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_llong_get", _wrap_TestDirector_var_llong_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_ullong_set", _wrap_TestDirector_var_ullong_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_ullong_get", _wrap_TestDirector_var_ullong_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_char_set", _wrap_TestDirector_var_char_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_char_get", _wrap_TestDirector_var_char_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_pchar_set", _wrap_TestDirector_var_pchar_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_pchar_get", _wrap_TestDirector_var_pchar_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_pcharc_set", _wrap_TestDirector_var_pcharc_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_pcharc_get", _wrap_TestDirector_var_pcharc_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_pint_set", _wrap_TestDirector_var_pint_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_pint_get", _wrap_TestDirector_var_pint_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_hello_set", _wrap_TestDirector_var_hello_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_hello_get", _wrap_TestDirector_var_hello_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_myint_set", _wrap_TestDirector_var_myint_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_myint_get", _wrap_TestDirector_var_myint_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_parami_set", _wrap_TestDirector_var_parami_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_parami_get", _wrap_TestDirector_var_parami_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_paramd_set", _wrap_TestDirector_var_paramd_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_paramd_get", _wrap_TestDirector_var_paramd_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_paramc_set", _wrap_TestDirector_var_paramc_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_paramc_get", _wrap_TestDirector_var_paramc_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_sizet_set", _wrap_TestDirector_var_sizet_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_sizet_get", _wrap_TestDirector_var_sizet_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_namet_set", _wrap_TestDirector_var_namet_set, METH_VARARGS, NULL},
	 { (char *)"TestDirector_var_namet_get", _wrap_TestDirector_var_namet_get, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_bool", _wrap_TestDirector_val_bool, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_schar", _wrap_TestDirector_val_schar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_uchar", _wrap_TestDirector_val_uchar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_int", _wrap_TestDirector_val_int, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_uint", _wrap_TestDirector_val_uint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_short", _wrap_TestDirector_val_short, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_ushort", _wrap_TestDirector_val_ushort, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_long", _wrap_TestDirector_val_long, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_ulong", _wrap_TestDirector_val_ulong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_llong", _wrap_TestDirector_val_llong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_ullong", _wrap_TestDirector_val_ullong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_char", _wrap_TestDirector_val_char, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_pchar", _wrap_TestDirector_val_pchar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_pcharc", _wrap_TestDirector_val_pcharc, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_pint", _wrap_TestDirector_val_pint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_hello", _wrap_TestDirector_val_hello, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_myint", _wrap_TestDirector_val_myint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_parami", _wrap_TestDirector_val_parami, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_paramd", _wrap_TestDirector_val_paramd, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_paramc", _wrap_TestDirector_val_paramc, METH_VARARGS, NULL},
	 { (char *)"TestDirector_val_sizet", _wrap_TestDirector_val_sizet, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_bool", _wrap_TestDirector_ref_bool, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_schar", _wrap_TestDirector_ref_schar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_uchar", _wrap_TestDirector_ref_uchar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_int", _wrap_TestDirector_ref_int, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_uint", _wrap_TestDirector_ref_uint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_short", _wrap_TestDirector_ref_short, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_ushort", _wrap_TestDirector_ref_ushort, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_long", _wrap_TestDirector_ref_long, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_ulong", _wrap_TestDirector_ref_ulong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_llong", _wrap_TestDirector_ref_llong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_ullong", _wrap_TestDirector_ref_ullong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_char", _wrap_TestDirector_ref_char, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_pchar", _wrap_TestDirector_ref_pchar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_pcharc", _wrap_TestDirector_ref_pcharc, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_pint", _wrap_TestDirector_ref_pint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_hello", _wrap_TestDirector_ref_hello, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_myint", _wrap_TestDirector_ref_myint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_parami", _wrap_TestDirector_ref_parami, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_paramd", _wrap_TestDirector_ref_paramd, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_paramc", _wrap_TestDirector_ref_paramc, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ref_sizet", _wrap_TestDirector_ref_sizet, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_bool", _wrap_TestDirector_vval_bool, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_schar", _wrap_TestDirector_vval_schar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_uchar", _wrap_TestDirector_vval_uchar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_int", _wrap_TestDirector_vval_int, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_uint", _wrap_TestDirector_vval_uint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_short", _wrap_TestDirector_vval_short, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_ushort", _wrap_TestDirector_vval_ushort, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_long", _wrap_TestDirector_vval_long, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_ulong", _wrap_TestDirector_vval_ulong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_llong", _wrap_TestDirector_vval_llong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_ullong", _wrap_TestDirector_vval_ullong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_char", _wrap_TestDirector_vval_char, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_pchar", _wrap_TestDirector_vval_pchar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_pcharc", _wrap_TestDirector_vval_pcharc, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_pint", _wrap_TestDirector_vval_pint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_hello", _wrap_TestDirector_vval_hello, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_myint", _wrap_TestDirector_vval_myint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_parami", _wrap_TestDirector_vval_parami, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_paramd", _wrap_TestDirector_vval_paramd, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_paramc", _wrap_TestDirector_vval_paramc, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vval_sizet", _wrap_TestDirector_vval_sizet, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_bool", _wrap_TestDirector_vref_bool, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_schar", _wrap_TestDirector_vref_schar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_uchar", _wrap_TestDirector_vref_uchar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_int", _wrap_TestDirector_vref_int, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_uint", _wrap_TestDirector_vref_uint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_short", _wrap_TestDirector_vref_short, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_ushort", _wrap_TestDirector_vref_ushort, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_long", _wrap_TestDirector_vref_long, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_ulong", _wrap_TestDirector_vref_ulong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_llong", _wrap_TestDirector_vref_llong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_ullong", _wrap_TestDirector_vref_ullong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_char", _wrap_TestDirector_vref_char, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_pchar", _wrap_TestDirector_vref_pchar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_pcharc", _wrap_TestDirector_vref_pcharc, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_pint", _wrap_TestDirector_vref_pint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_hello", _wrap_TestDirector_vref_hello, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_myint", _wrap_TestDirector_vref_myint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_parami", _wrap_TestDirector_vref_parami, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_paramd", _wrap_TestDirector_vref_paramd, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_paramc", _wrap_TestDirector_vref_paramc, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vref_sizet", _wrap_TestDirector_vref_sizet, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_bool", _wrap_TestDirector_wrp_vref_bool, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_schar", _wrap_TestDirector_wrp_vref_schar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_uchar", _wrap_TestDirector_wrp_vref_uchar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_int", _wrap_TestDirector_wrp_vref_int, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_uint", _wrap_TestDirector_wrp_vref_uint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_short", _wrap_TestDirector_wrp_vref_short, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_ushort", _wrap_TestDirector_wrp_vref_ushort, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_long", _wrap_TestDirector_wrp_vref_long, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_ulong", _wrap_TestDirector_wrp_vref_ulong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_llong", _wrap_TestDirector_wrp_vref_llong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_ullong", _wrap_TestDirector_wrp_vref_ullong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_char", _wrap_TestDirector_wrp_vref_char, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_pchar", _wrap_TestDirector_wrp_vref_pchar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_pcharc", _wrap_TestDirector_wrp_vref_pcharc, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_pint", _wrap_TestDirector_wrp_vref_pint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_hello", _wrap_TestDirector_wrp_vref_hello, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_myint", _wrap_TestDirector_wrp_vref_myint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_parami", _wrap_TestDirector_wrp_vref_parami, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_paramd", _wrap_TestDirector_wrp_vref_paramd, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_paramc", _wrap_TestDirector_wrp_vref_paramc, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vref_sizet", _wrap_TestDirector_wrp_vref_sizet, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_bool", _wrap_TestDirector_wrp_vval_bool, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_schar", _wrap_TestDirector_wrp_vval_schar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_uchar", _wrap_TestDirector_wrp_vval_uchar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_int", _wrap_TestDirector_wrp_vval_int, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_uint", _wrap_TestDirector_wrp_vval_uint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_short", _wrap_TestDirector_wrp_vval_short, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_ushort", _wrap_TestDirector_wrp_vval_ushort, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_long", _wrap_TestDirector_wrp_vval_long, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_ulong", _wrap_TestDirector_wrp_vval_ulong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_llong", _wrap_TestDirector_wrp_vval_llong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_ullong", _wrap_TestDirector_wrp_vval_ullong, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_char", _wrap_TestDirector_wrp_vval_char, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_pchar", _wrap_TestDirector_wrp_vval_pchar, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_pcharc", _wrap_TestDirector_wrp_vval_pcharc, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_pint", _wrap_TestDirector_wrp_vval_pint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_hello", _wrap_TestDirector_wrp_vval_hello, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_myint", _wrap_TestDirector_wrp_vval_myint, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_parami", _wrap_TestDirector_wrp_vval_parami, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_paramd", _wrap_TestDirector_wrp_vval_paramd, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_paramc", _wrap_TestDirector_wrp_vval_paramc, METH_VARARGS, NULL},
	 { (char *)"TestDirector_wrp_vval_sizet", _wrap_TestDirector_wrp_vval_sizet, METH_VARARGS, NULL},
	 { (char *)"TestDirector_c_check", _wrap_TestDirector_c_check, METH_VARARGS, NULL},
	 { (char *)"TestDirector_v_check", _wrap_TestDirector_v_check, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ovr_val", _wrap_TestDirector_ovr_val, METH_VARARGS, NULL},
	 { (char *)"TestDirector_ovr_ref", _wrap_TestDirector_ovr_ref, METH_VARARGS, NULL},
	 { (char *)"TestDirector_vtest", _wrap_TestDirector_vtest, METH_VARARGS, NULL},
	 { (char *)"disown_TestDirector", _wrap_disown_TestDirector, METH_VARARGS, NULL},
	 { (char *)"TestDirector_swigregister", TestDirector_swigregister, METH_VARARGS, NULL},
	 { (char *)"v_check", _wrap_v_check, METH_VARARGS, NULL},
	 { (char *)"char_foo", _wrap_char_foo, METH_VARARGS, NULL},
	 { (char *)"SetPos", _wrap_SetPos, METH_VARARGS, NULL},
	 { (char *)"val_double_2", _wrap_val_double_2, METH_VARARGS, NULL},
	 { (char *)"val_double", _wrap_val_double, METH_VARARGS, NULL},
	 { (char *)"val_float_2", _wrap_val_float_2, METH_VARARGS, NULL},
	 { (char *)"regression_test_for_bug1699646", _wrap_regression_test_for_bug1699646, METH_VARARGS, NULL},
	 { (char *)"val_float", _wrap_val_float, METH_VARARGS, NULL},
	 { (char *)"new_pchar", _wrap_new_pchar, METH_VARARGS, NULL},
	 { (char *)"delete_pchar", _wrap_delete_pchar, METH_VARARGS, NULL},
	 { (char *)"pchar_getitem", _wrap_pchar_getitem, METH_VARARGS, NULL},
	 { (char *)"pchar_setitem", _wrap_pchar_setitem, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_Foo = {"_p_Foo", "foo_ptr|Foo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Test = {"_p_Test", "Test *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TestDirector = {"_p_TestDirector", "TestDirector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_5__char = {"_p_a_5__char", "namet *|char (*)[5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|pcharc|pint|pchar", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **|pint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "DCTypes::cuint *|unsigned int *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Foo,
  &_swigt__p_Test,
  &_swigt__p_TestDirector,
  &_swigt__p_a_5__char,
  &_swigt__p_char,
  &_swigt__p_p_char,
  &_swigt__p_unsigned_int,
};

static swig_cast_info _swigc__p_Foo[] = {  {&_swigt__p_Foo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Test[] = {  {&_swigt__p_Test, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TestDirector[] = {  {&_swigt__p_TestDirector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_5__char[] = {  {&_swigt__p_a_5__char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Foo,
  _swigc__p_Test,
  _swigc__p_TestDirector,
  _swigc__p_a_5__char,
  _swigc__p_char,
  _swigc__p_p_char,
  _swigc__p_unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "Hi",SWIG_From_int(static_cast< int >(Hi)));
  SWIG_Python_SetConstant(d, "Hola",SWIG_From_int(static_cast< int >(Hola)));
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"def_pchar",Swig_var_def_pchar_get, Swig_var_def_pchar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"def_pcharc",Swig_var_def_pcharc_get, Swig_var_def_pcharc_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"def_namet",Swig_var_def_namet_get, Swig_var_def_namet_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"gbl_namet",Swig_var_gbl_namet_get, Swig_var_gbl_namet_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"fixsize",Swig_var_fixsize_get, Swig_var_fixsize_set);
  SWIG_Python_SetConstant(d, "def_bool",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_schar",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_uchar",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_int",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_uint",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_short",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_ushort",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_long",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_ulong",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_llong",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_ullong",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_float",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_double",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_char",SWIG_From_char(static_cast< char >('H')));
  SWIG_Python_SetConstant(d, "def_pint",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "def_sizet",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_myint",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_parami",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_paramd",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "def_paramc",SWIG_From_char(static_cast< char >('c')));
  SWIG_Python_SetConstant(d, "sct_bool",SWIG_From_bool(static_cast< bool >(1)));
  SWIG_Python_SetConstant(d, "sct_schar",SWIG_From_signed_SS_char(static_cast< signed char >(1)));
  SWIG_Python_SetConstant(d, "sct_uchar",SWIG_From_unsigned_SS_char(static_cast< unsigned char >(1)));
  SWIG_Python_SetConstant(d, "sct_int",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "sct_uint",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(1)));
  SWIG_Python_SetConstant(d, "sct_short",SWIG_From_short(static_cast< short >(1)));
  SWIG_Python_SetConstant(d, "sct_ushort",SWIG_From_unsigned_SS_short(static_cast< unsigned short >(1)));
  SWIG_Python_SetConstant(d, "sct_long",SWIG_From_long(static_cast< long >(1)));
  SWIG_Python_SetConstant(d, "sct_ulong",SWIG_From_unsigned_SS_long(static_cast< unsigned long >(1)));
  SWIG_Python_SetConstant(d, "sct_llong",SWIG_From_long_SS_long(static_cast< long long >(1)));
  SWIG_Python_SetConstant(d, "sct_ullong",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(1)));
  SWIG_Python_SetConstant(d, "sct_char",SWIG_From_char(static_cast< char >('H')));
  SWIG_Python_SetConstant(d, "sct_pchar",SWIG_FromCharPtr(def_pchar));
  SWIG_Python_SetConstant(d, "sct_pcharc",SWIG_FromCharPtr(def_pcharc));
  SWIG_Python_SetConstant(d, "sct_pint",SWIG_FromCharPtr(0));
  SWIG_Python_SetConstant(d, "sct_hello",SWIG_From_int(static_cast< int >(Hola)));
  SWIG_Python_SetConstant(d, "sct_myint",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "sct_parami",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "sct_paramd",SWIG_From_double(static_cast< double >(1)));
  SWIG_Python_SetConstant(d, "sct_paramc",SWIG_From_char(static_cast< char >('c')));
  SWIG_Python_SetConstant(d, "sct_sizet",SWIG_From_size_t(static_cast< size_t >(1)));
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_bool",Swig_var_cct_bool_get, Swig_var_cct_bool_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_schar",Swig_var_cct_schar_get, Swig_var_cct_schar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_uchar",Swig_var_cct_uchar_get, Swig_var_cct_uchar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_int",Swig_var_cct_int_get, Swig_var_cct_int_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_uint",Swig_var_cct_uint_get, Swig_var_cct_uint_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_short",Swig_var_cct_short_get, Swig_var_cct_short_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_ushort",Swig_var_cct_ushort_get, Swig_var_cct_ushort_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_long",Swig_var_cct_long_get, Swig_var_cct_long_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_ulong",Swig_var_cct_ulong_get, Swig_var_cct_ulong_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_llong",Swig_var_cct_llong_get, Swig_var_cct_llong_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_ullong",Swig_var_cct_ullong_get, Swig_var_cct_ullong_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_char",Swig_var_cct_char_get, Swig_var_cct_char_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_pchar",Swig_var_cct_pchar_get, Swig_var_cct_pchar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_pcharc",Swig_var_cct_pcharc_get, Swig_var_cct_pcharc_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_pint",Swig_var_cct_pint_get, Swig_var_cct_pint_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_hello",Swig_var_cct_hello_get, Swig_var_cct_hello_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_myint",Swig_var_cct_myint_get, Swig_var_cct_myint_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_parami",Swig_var_cct_parami_get, Swig_var_cct_parami_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_paramd",Swig_var_cct_paramd_get, Swig_var_cct_paramd_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_paramc",Swig_var_cct_paramc_get, Swig_var_cct_paramc_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"cct_sizet",Swig_var_cct_sizet_get, Swig_var_cct_sizet_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_bool",Swig_var_var_bool_get, Swig_var_var_bool_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_schar",Swig_var_var_schar_get, Swig_var_var_schar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_uchar",Swig_var_var_uchar_get, Swig_var_var_uchar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_int",Swig_var_var_int_get, Swig_var_var_int_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_uint",Swig_var_var_uint_get, Swig_var_var_uint_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_short",Swig_var_var_short_get, Swig_var_var_short_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_ushort",Swig_var_var_ushort_get, Swig_var_var_ushort_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_long",Swig_var_var_long_get, Swig_var_var_long_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_ulong",Swig_var_var_ulong_get, Swig_var_var_ulong_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_llong",Swig_var_var_llong_get, Swig_var_var_llong_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_ullong",Swig_var_var_ullong_get, Swig_var_var_ullong_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_char",Swig_var_var_char_get, Swig_var_var_char_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_pchar",Swig_var_var_pchar_get, Swig_var_var_pchar_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_pcharc",Swig_var_var_pcharc_get, Swig_var_var_pcharc_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_pint",Swig_var_var_pint_get, Swig_var_var_pint_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_hello",Swig_var_var_hello_get, Swig_var_var_hello_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_myint",Swig_var_var_myint_get, Swig_var_var_myint_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_parami",Swig_var_var_parami_get, Swig_var_var_parami_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_paramd",Swig_var_var_paramd_get, Swig_var_var_paramd_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_paramc",Swig_var_var_paramc_get, Swig_var_var_paramc_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_sizet",Swig_var_var_sizet_get, Swig_var_var_sizet_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"var_namet",Swig_var_var_namet_get, Swig_var_var_namet_set);
  SWIG_Python_SetConstant(d, "Test_stc_bool",SWIG_From_bool(static_cast< bool >(Test::stc_bool)));
  SWIG_Python_SetConstant(d, "Test_stc_schar",SWIG_From_signed_SS_char(static_cast< signed char >(Test::stc_schar)));
  SWIG_Python_SetConstant(d, "Test_stc_uchar",SWIG_From_unsigned_SS_char(static_cast< unsigned char >(Test::stc_uchar)));
  SWIG_Python_SetConstant(d, "Test_stc_int",SWIG_From_int(static_cast< int >(Test::stc_int)));
  SWIG_Python_SetConstant(d, "Test_stc_uint",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Test::stc_uint)));
  SWIG_Python_SetConstant(d, "Test_stc_short",SWIG_From_short(static_cast< short >(Test::stc_short)));
  SWIG_Python_SetConstant(d, "Test_stc_ushort",SWIG_From_unsigned_SS_short(static_cast< unsigned short >(Test::stc_ushort)));
  SWIG_Python_SetConstant(d, "Test_stc_long",SWIG_From_long(static_cast< long >(Test::stc_long)));
  SWIG_Python_SetConstant(d, "Test_stc_ulong",SWIG_From_unsigned_SS_long(static_cast< unsigned long >(Test::stc_ulong)));
  SWIG_Python_SetConstant(d, "Test_stc_llong",SWIG_From_long_SS_long(static_cast< long long >(Test::stc_llong)));
  SWIG_Python_SetConstant(d, "Test_stc_ullong",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(Test::stc_ullong)));
  SWIG_Python_SetConstant(d, "Test_stc_char",SWIG_From_char(static_cast< char >(Test::stc_char)));
  SWIG_addvarlink(SWIG_globals(),(char*)"Test_stc_double",Swig_var_Test_stc_double_get, Swig_var_Test_stc_double_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Test_stc_float",Swig_var_Test_stc_float_get, Swig_var_Test_stc_float_set);
  SWIG_Python_SetConstant(d, "TestDirector_stc_bool",SWIG_From_bool(static_cast< bool >(TestDirector::stc_bool)));
  SWIG_Python_SetConstant(d, "TestDirector_stc_schar",SWIG_From_signed_SS_char(static_cast< signed char >(TestDirector::stc_schar)));
  SWIG_Python_SetConstant(d, "TestDirector_stc_uchar",SWIG_From_unsigned_SS_char(static_cast< unsigned char >(TestDirector::stc_uchar)));
  SWIG_Python_SetConstant(d, "TestDirector_stc_int",SWIG_From_int(static_cast< int >(TestDirector::stc_int)));
  SWIG_Python_SetConstant(d, "TestDirector_stc_uint",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(TestDirector::stc_uint)));
  SWIG_Python_SetConstant(d, "TestDirector_stc_short",SWIG_From_short(static_cast< short >(TestDirector::stc_short)));
  SWIG_Python_SetConstant(d, "TestDirector_stc_ushort",SWIG_From_unsigned_SS_short(static_cast< unsigned short >(TestDirector::stc_ushort)));
  SWIG_Python_SetConstant(d, "TestDirector_stc_long",SWIG_From_long(static_cast< long >(TestDirector::stc_long)));
  SWIG_Python_SetConstant(d, "TestDirector_stc_ulong",SWIG_From_unsigned_SS_long(static_cast< unsigned long >(TestDirector::stc_ulong)));
  SWIG_Python_SetConstant(d, "TestDirector_stc_llong",SWIG_From_long_SS_long(static_cast< long long >(TestDirector::stc_llong)));
  SWIG_Python_SetConstant(d, "TestDirector_stc_ullong",SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(TestDirector::stc_ullong)));
  SWIG_Python_SetConstant(d, "TestDirector_stc_char",SWIG_From_char(static_cast< char >(TestDirector::stc_char)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

