# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
hello
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_autodoc', [dirname(__file__)])
        except ImportError:
            import _autodoc
            return _autodoc
        if fp is not None:
            try:
                _mod = imp.load_module('_autodoc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _autodoc = swig_import_helper()
    del swig_import_helper
else:
    import _autodoc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


hi = _autodoc.hi
hello = _autodoc.hello
class A(_object):
    """Proxy of C++ A class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(A self, int a, short b, Hola h) -> A"""
        this = _autodoc.new_A(*args)
        try: self.this.append(this)
        except: self.this = this
    def funk(self, *args):
        """just a string"""
        return _autodoc.A_funk(self, *args)

    def func0(self, *args):
        """func0(self, arg2, hello) -> int"""
        return _autodoc.A_func0(self, *args)

    def func1(self, *args):
        """func1(A self, short arg2, Tuple hello) -> int"""
        return _autodoc.A_func1(self, *args)

    def func2(self, *args):
        """
        func2(self, arg2, hello) -> int

        Parameters:
            arg2: short
            hello: int tuple[2]

        """
        return _autodoc.A_func2(self, *args)

    def func3(self, *args):
        """
        func3(A self, short arg2, Tuple hello) -> int

        Parameters:
            arg2: short
            hello: int tuple[2]

        """
        return _autodoc.A_func3(self, *args)

    def func0default(self, *args):
        """
        func0default(self, e, arg3, hello, f=2) -> int
        func0default(self, e, arg3, hello) -> int
        """
        return _autodoc.A_func0default(self, *args)

    def func1default(self, *args):
        """
        func1default(A self, A e, short arg3, Tuple hello, double f=2) -> int
        func1default(A self, A e, short arg3, Tuple hello) -> int
        """
        return _autodoc.A_func1default(self, *args)

    def func2default(self, *args):
        """
        func2default(self, e, arg3, hello, f=2) -> int

        Parameters:
            e: A *
            arg3: short
            hello: int tuple[2]
            f: double

        func2default(self, e, arg3, hello) -> int

        Parameters:
            e: A *
            arg3: short
            hello: int tuple[2]

        """
        return _autodoc.A_func2default(self, *args)

    def func3default(self, *args):
        """
        func3default(A self, A e, short arg3, Tuple hello, double f=2) -> int

        Parameters:
            e: A *
            arg3: short
            hello: int tuple[2]
            f: double

        func3default(A self, A e, short arg3, Tuple hello) -> int

        Parameters:
            e: A *
            arg3: short
            hello: int tuple[2]

        """
        return _autodoc.A_func3default(self, *args)

    def func0static(*args):
        """
        func0static(e, arg2, hello, f=2) -> int
        func0static(e, arg2, hello) -> int
        """
        return _autodoc.A_func0static(*args)

    if _newclass:func0static = staticmethod(func0static)
    __swig_getmethods__["func0static"] = lambda x: func0static
    def func1static(*args):
        """
        func1static(A e, short arg2, Tuple hello, double f=2) -> int
        func1static(A e, short arg2, Tuple hello) -> int
        """
        return _autodoc.A_func1static(*args)

    if _newclass:func1static = staticmethod(func1static)
    __swig_getmethods__["func1static"] = lambda x: func1static
    def func2static(*args):
        """
        func2static(e, arg2, hello, f=2) -> int

        Parameters:
            e: A *
            arg2: short
            hello: int tuple[2]
            f: double

        func2static(e, arg2, hello) -> int

        Parameters:
            e: A *
            arg2: short
            hello: int tuple[2]

        """
        return _autodoc.A_func2static(*args)

    if _newclass:func2static = staticmethod(func2static)
    __swig_getmethods__["func2static"] = lambda x: func2static
    def func3static(*args):
        """
        func3static(A e, short arg2, Tuple hello, double f=2) -> int

        Parameters:
            e: A *
            arg2: short
            hello: int tuple[2]
            f: double

        func3static(A e, short arg2, Tuple hello) -> int

        Parameters:
            e: A *
            arg2: short
            hello: int tuple[2]

        """
        return _autodoc.A_func3static(*args)

    if _newclass:func3static = staticmethod(func3static)
    __swig_getmethods__["func3static"] = lambda x: func3static
    __swig_setmethods__["variable_a"] = _autodoc.A_variable_a_set
    __swig_getmethods__["variable_a"] = _autodoc.A_variable_a_get
    if _newclass:variable_a = _swig_property(_autodoc.A_variable_a_get, _autodoc.A_variable_a_set)
    __swig_setmethods__["variable_b"] = _autodoc.A_variable_b_set
    __swig_getmethods__["variable_b"] = _autodoc.A_variable_b_get
    if _newclass:variable_b = _swig_property(_autodoc.A_variable_b_get, _autodoc.A_variable_b_set)
    __swig_setmethods__["variable_c"] = _autodoc.A_variable_c_set
    __swig_getmethods__["variable_c"] = _autodoc.A_variable_c_get
    if _newclass:variable_c = _swig_property(_autodoc.A_variable_c_get, _autodoc.A_variable_c_set)
    __swig_setmethods__["variable_d"] = _autodoc.A_variable_d_set
    __swig_getmethods__["variable_d"] = _autodoc.A_variable_d_get
    if _newclass:variable_d = _swig_property(_autodoc.A_variable_d_get, _autodoc.A_variable_d_set)
    __swig_destroy__ = _autodoc.delete_A
    __del__ = lambda self : None;
A_swigregister = _autodoc.A_swigregister
A_swigregister(A)

def A_func0static(*args):
  """
    func0static(e, arg2, hello, f=2) -> int
    A_func0static(e, arg2, hello) -> int
    """
  return _autodoc.A_func0static(*args)

def A_func1static(*args):
  """
    func1static(A e, short arg2, Tuple hello, double f=2) -> int
    A_func1static(A e, short arg2, Tuple hello) -> int
    """
  return _autodoc.A_func1static(*args)

def A_func2static(*args):
  """
    func2static(e, arg2, hello, f=2) -> int

    Parameters:
        e: A *
        arg2: short
        hello: int tuple[2]
        f: double

    A_func2static(e, arg2, hello) -> int

    Parameters:
        e: A *
        arg2: short
        hello: int tuple[2]

    """
  return _autodoc.A_func2static(*args)

def A_func3static(*args):
  """
    func3static(A e, short arg2, Tuple hello, double f=2) -> int

    Parameters:
        e: A *
        arg2: short
        hello: int tuple[2]
        f: double

    A_func3static(A e, short arg2, Tuple hello) -> int

    Parameters:
        e: A *
        arg2: short
        hello: int tuple[2]

    """
  return _autodoc.A_func3static(*args)

class B(_object):
    """Proxy of C++ B class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(B self, int a, int b, Hola h) -> B"""
        this = _autodoc.new_B(*args)
        try: self.this.append(this)
        except: self.this = this
    def funk(self, *args):
        """funk(B self, int c, int d) -> int"""
        return _autodoc.B_funk(self, *args)

    __swig_destroy__ = _autodoc.delete_B
    __del__ = lambda self : None;
B_swigregister = _autodoc.B_swigregister
B_swigregister(B)

class C(_object):
    """Proxy of C++ C class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, C, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, C, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, a, b, h) -> C"""
        this = _autodoc.new_C(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _autodoc.delete_C
    __del__ = lambda self : None;
C_swigregister = _autodoc.C_swigregister
C_swigregister(C)

class D(_object):
    """Proxy of C++ D class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(D self, int a, int b, Hola h) -> D"""
        this = _autodoc.new_D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _autodoc.delete_D
    __del__ = lambda self : None;
D_swigregister = _autodoc.D_swigregister
D_swigregister(D)

class E(_object):
    """Proxy of C++ E class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, E, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, E, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, a, b, h) -> E

        Parameters:
            a: special comment for parameter a
            b: another special comment for parameter b
            h: enum Hola

        """
        this = _autodoc.new_E(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _autodoc.delete_E
    __del__ = lambda self : None;
E_swigregister = _autodoc.E_swigregister
E_swigregister(E)

class F(_object):
    """Proxy of C++ F class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, F, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, F, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(F self, int a, int b, Hola h) -> F

        Parameters:
            a: special comment for parameter a
            b: another special comment for parameter b
            h: enum Hola

        """
        this = _autodoc.new_F(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _autodoc.delete_F
    __del__ = lambda self : None;
F_swigregister = _autodoc.F_swigregister
F_swigregister(F)


def funk(*args):
  """funk(A e, short arg2, int c, int d) -> int"""
  return _autodoc.funk(*args)

def funkdefaults(*args):
  """
    funkdefaults(A e, short arg2, int c, int d, double f=2) -> int
    funkdefaults(A e, short arg2, int c, int d) -> int
    """
  return _autodoc.funkdefaults(*args)

def func_input(*args):
  """func_input(int * INPUT) -> int"""
  return _autodoc.func_input(*args)

def func_output():
  """func_output() -> int"""
  return _autodoc.func_output()

def func_inout(*args):
  """func_inout(int * INOUT) -> int"""
  return _autodoc.func_inout(*args)
FUNC_CB_CALLBACK = _autodoc.FUNC_CB_CALLBACK

def func_cb(*args):
  """func_cb(int c, int d) -> int"""
  return _autodoc.func_cb(*args)
func_cb = _autodoc.func_cb
class S(_object):
    """Proxy of C++ tagS class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _autodoc.S_a_set
    __swig_getmethods__["a"] = _autodoc.S_a_get
    if _newclass:a = _swig_property(_autodoc.S_a_get, _autodoc.S_a_set)
    __swig_setmethods__["b"] = _autodoc.S_b_set
    __swig_getmethods__["b"] = _autodoc.S_b_get
    if _newclass:b = _swig_property(_autodoc.S_b_get, _autodoc.S_b_set)
    def __init__(self): 
        """__init__(tagS self) -> S"""
        this = _autodoc.new_S()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _autodoc.delete_S
    __del__ = lambda self : None;
S_swigregister = _autodoc.S_swigregister
S_swigregister(S)


def banana(*args):
  """banana(S a, S b, int c, Integer d)"""
  return _autodoc.banana(*args)
# This file is compatible with both classic and new-style classes.


