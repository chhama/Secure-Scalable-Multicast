# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_overload_simple', [dirname(__file__)])
        except ImportError:
            import _overload_simple
            return _overload_simple
        if fp is not None:
            try:
                _mod = imp.load_module('_overload_simple', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _overload_simple = swig_import_helper()
    del swig_import_helper
else:
    import _overload_simple
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _overload_simple.new_Foo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _overload_simple.delete_Foo
    __del__ = lambda self : None;
Foo_swigregister = _overload_simple.Foo_swigregister
Foo_swigregister(Foo)

class Bar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bar, name)
    __repr__ = _swig_repr
    def __init__(self, i=0): 
        this = _overload_simple.new_Bar(i)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["foo"] = lambda x: _overload_simple.Bar_foo
    if _newclass:foo = staticmethod(_overload_simple.Bar_foo)
    __swig_setmethods__["num"] = _overload_simple.Bar_num_set
    __swig_getmethods__["num"] = _overload_simple.Bar_num_get
    if _newclass:num = _swig_property(_overload_simple.Bar_num_get, _overload_simple.Bar_num_set)
    __swig_destroy__ = _overload_simple.delete_Bar
    __del__ = lambda self : None;
Bar_swigregister = _overload_simple.Bar_swigregister
Bar_swigregister(Bar)

def Bar_foo(a=0, b=0):
  return _overload_simple.Bar_foo(a, b)
Bar_foo = _overload_simple.Bar_foo


def foo(*args):
  return _overload_simple.foo(*args)
foo = _overload_simple.foo

def blah(*args):
  return _overload_simple.blah(*args)
blah = _overload_simple.blah
class Spam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Spam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Spam, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _overload_simple.new_Spam(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["type"] = _overload_simple.Spam_type_get
    if _newclass:type = _swig_property(_overload_simple.Spam_type_get)
    def foo(self, *args): return _overload_simple.Spam_foo(self, *args)
    __swig_getmethods__["bar"] = lambda x: _overload_simple.Spam_bar
    if _newclass:bar = staticmethod(_overload_simple.Spam_bar)
    __swig_destroy__ = _overload_simple.delete_Spam
    __del__ = lambda self : None;
Spam_swigregister = _overload_simple.Spam_swigregister
Spam_swigregister(Spam)

def Spam_bar(*args):
  return _overload_simple.Spam_bar(*args)
Spam_bar = _overload_simple.Spam_bar


def fbool(*args):
  return _overload_simple.fbool(*args)
fbool = _overload_simple.fbool

def fint(*args):
  return _overload_simple.fint(*args)
fint = _overload_simple.fint

def fdouble(*args):
  return _overload_simple.fdouble(*args)
fdouble = _overload_simple.fdouble

def num(*args):
  return _overload_simple.num(*args)
num = _overload_simple.num

def fid(*args):
  return _overload_simple.fid(*args)
fid = _overload_simple.fid

def ull(*args):
  return _overload_simple.ull(*args)
ull = _overload_simple.ull

def ll(*args):
  return _overload_simple.ll(*args)
ll = _overload_simple.ll

def malloc_void(*args):
  return _overload_simple.malloc_void(*args)
malloc_void = _overload_simple.malloc_void

def free_void(*args):
  return _overload_simple.free_void(*args)
free_void = _overload_simple.free_void
class ClassA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassA, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _overload_simple.new_ClassA()
        try: self.this.append(this)
        except: self.this = this
    def method1(self, *args): return _overload_simple.ClassA_method1(self, *args)
    __swig_destroy__ = _overload_simple.delete_ClassA
    __del__ = lambda self : None;
ClassA_swigregister = _overload_simple.ClassA_swigregister
ClassA_swigregister(ClassA)

class Graph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Graph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Graph, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _overload_simple.Graph_val_set
    __swig_getmethods__["val"] = _overload_simple.Graph_val_get
    if _newclass:val = _swig_property(_overload_simple.Graph_val_get, _overload_simple.Graph_val_set)
    def __init__(self, *args): 
        this = _overload_simple.new_Graph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _overload_simple.delete_Graph
    __del__ = lambda self : None;
Graph_swigregister = _overload_simple.Graph_swigregister
Graph_swigregister(Graph)


def int_object(*args):
  return _overload_simple.int_object(*args)
int_object = _overload_simple.int_object
# This file is compatible with both classic and new-style classes.


