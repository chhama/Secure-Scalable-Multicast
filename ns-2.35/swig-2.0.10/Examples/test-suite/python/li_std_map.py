# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_std_map', [dirname(__file__)])
        except ImportError:
            import _li_std_map
            return _li_std_map
        if fp is not None:
            try:
                _mod = imp.load_module('_li_std_map', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_std_map = swig_import_helper()
    del swig_import_helper
else:
    import _li_std_map
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _li_std_map.map_val_set
    __swig_getmethods__["val"] = _li_std_map.map_val_get
    if _newclass:val = _swig_property(_li_std_map.map_val_get, _li_std_map.map_val_set)
    def __init__(self, *args): 
        this = _li_std_map.new_map(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_map.delete_map
    __del__ = lambda self : None;
map_swigregister = _li_std_map.map_swigregister
map_swigregister(map)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _li_std_map.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _li_std_map.SwigPyIterator_value(self)
    def incr(self, n=1): return _li_std_map.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _li_std_map.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _li_std_map.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _li_std_map.SwigPyIterator_equal(self, *args)
    def copy(self): return _li_std_map.SwigPyIterator_copy(self)
    def next(self): return _li_std_map.SwigPyIterator_next(self)
    def __next__(self): return _li_std_map.SwigPyIterator___next__(self)
    def previous(self): return _li_std_map.SwigPyIterator_previous(self)
    def advance(self, *args): return _li_std_map.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _li_std_map.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _li_std_map.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _li_std_map.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _li_std_map.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _li_std_map.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _li_std_map.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _li_std_map.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntIntMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntIntMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntIntMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_map.IntIntMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_map.IntIntMap___nonzero__(self)
    def __bool__(self): return _li_std_map.IntIntMap___bool__(self)
    def __len__(self): return _li_std_map.IntIntMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _li_std_map.IntIntMap___getitem__(self, *args)
    def __delitem__(self, *args): return _li_std_map.IntIntMap___delitem__(self, *args)
    def has_key(self, *args): return _li_std_map.IntIntMap_has_key(self, *args)
    def keys(self): return _li_std_map.IntIntMap_keys(self)
    def values(self): return _li_std_map.IntIntMap_values(self)
    def items(self): return _li_std_map.IntIntMap_items(self)
    def __contains__(self, *args): return _li_std_map.IntIntMap___contains__(self, *args)
    def key_iterator(self): return _li_std_map.IntIntMap_key_iterator(self)
    def value_iterator(self): return _li_std_map.IntIntMap_value_iterator(self)
    def __setitem__(self, *args): return _li_std_map.IntIntMap___setitem__(self, *args)
    def asdict(self): return _li_std_map.IntIntMap_asdict(self)
    def __init__(self, *args): 
        this = _li_std_map.new_IntIntMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _li_std_map.IntIntMap_empty(self)
    def size(self): return _li_std_map.IntIntMap_size(self)
    def clear(self): return _li_std_map.IntIntMap_clear(self)
    def swap(self, *args): return _li_std_map.IntIntMap_swap(self, *args)
    def get_allocator(self): return _li_std_map.IntIntMap_get_allocator(self)
    def begin(self): return _li_std_map.IntIntMap_begin(self)
    def end(self): return _li_std_map.IntIntMap_end(self)
    def rbegin(self): return _li_std_map.IntIntMap_rbegin(self)
    def rend(self): return _li_std_map.IntIntMap_rend(self)
    def count(self, *args): return _li_std_map.IntIntMap_count(self, *args)
    def erase(self, *args): return _li_std_map.IntIntMap_erase(self, *args)
    def find(self, *args): return _li_std_map.IntIntMap_find(self, *args)
    def lower_bound(self, *args): return _li_std_map.IntIntMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _li_std_map.IntIntMap_upper_bound(self, *args)
    __swig_destroy__ = _li_std_map.delete_IntIntMap
    __del__ = lambda self : None;
IntIntMap_swigregister = _li_std_map.IntIntMap_swigregister
IntIntMap_swigregister(IntIntMap)

class StringIntMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringIntMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringIntMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_map.StringIntMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_map.StringIntMap___nonzero__(self)
    def __bool__(self): return _li_std_map.StringIntMap___bool__(self)
    def __len__(self): return _li_std_map.StringIntMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _li_std_map.StringIntMap___getitem__(self, *args)
    def __delitem__(self, *args): return _li_std_map.StringIntMap___delitem__(self, *args)
    def has_key(self, *args): return _li_std_map.StringIntMap_has_key(self, *args)
    def keys(self): return _li_std_map.StringIntMap_keys(self)
    def values(self): return _li_std_map.StringIntMap_values(self)
    def items(self): return _li_std_map.StringIntMap_items(self)
    def __contains__(self, *args): return _li_std_map.StringIntMap___contains__(self, *args)
    def key_iterator(self): return _li_std_map.StringIntMap_key_iterator(self)
    def value_iterator(self): return _li_std_map.StringIntMap_value_iterator(self)
    def __setitem__(self, *args): return _li_std_map.StringIntMap___setitem__(self, *args)
    def asdict(self): return _li_std_map.StringIntMap_asdict(self)
    def __init__(self, *args): 
        this = _li_std_map.new_StringIntMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _li_std_map.StringIntMap_empty(self)
    def size(self): return _li_std_map.StringIntMap_size(self)
    def clear(self): return _li_std_map.StringIntMap_clear(self)
    def swap(self, *args): return _li_std_map.StringIntMap_swap(self, *args)
    def get_allocator(self): return _li_std_map.StringIntMap_get_allocator(self)
    def begin(self): return _li_std_map.StringIntMap_begin(self)
    def end(self): return _li_std_map.StringIntMap_end(self)
    def rbegin(self): return _li_std_map.StringIntMap_rbegin(self)
    def rend(self): return _li_std_map.StringIntMap_rend(self)
    def count(self, *args): return _li_std_map.StringIntMap_count(self, *args)
    def erase(self, *args): return _li_std_map.StringIntMap_erase(self, *args)
    def find(self, *args): return _li_std_map.StringIntMap_find(self, *args)
    def lower_bound(self, *args): return _li_std_map.StringIntMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _li_std_map.StringIntMap_upper_bound(self, *args)
    __swig_destroy__ = _li_std_map.delete_StringIntMap
    __del__ = lambda self : None;
StringIntMap_swigregister = _li_std_map.StringIntMap_swigregister
StringIntMap_swigregister(StringIntMap)


def valueAverage(*args):
  return _li_std_map.valueAverage(*args)
valueAverage = _li_std_map.valueAverage

def stringifyKeys(*args):
  return _li_std_map.stringifyKeys(*args)
stringifyKeys = _li_std_map.stringifyKeys
class Struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _li_std_map.Struct_num_set
    __swig_getmethods__["num"] = _li_std_map.Struct_num_get
    if _newclass:num = _swig_property(_li_std_map.Struct_num_get, _li_std_map.Struct_num_set)
    def __init__(self, *args): 
        this = _li_std_map.new_Struct(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_map.delete_Struct
    __del__ = lambda self : None;
Struct_swigregister = _li_std_map.Struct_swigregister
Struct_swigregister(Struct)

class IntIntPtrMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntIntPtrMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntIntPtrMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_map.IntIntPtrMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_map.IntIntPtrMap___nonzero__(self)
    def __bool__(self): return _li_std_map.IntIntPtrMap___bool__(self)
    def __len__(self): return _li_std_map.IntIntPtrMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _li_std_map.IntIntPtrMap___getitem__(self, *args)
    def __delitem__(self, *args): return _li_std_map.IntIntPtrMap___delitem__(self, *args)
    def has_key(self, *args): return _li_std_map.IntIntPtrMap_has_key(self, *args)
    def keys(self): return _li_std_map.IntIntPtrMap_keys(self)
    def values(self): return _li_std_map.IntIntPtrMap_values(self)
    def items(self): return _li_std_map.IntIntPtrMap_items(self)
    def __contains__(self, *args): return _li_std_map.IntIntPtrMap___contains__(self, *args)
    def key_iterator(self): return _li_std_map.IntIntPtrMap_key_iterator(self)
    def value_iterator(self): return _li_std_map.IntIntPtrMap_value_iterator(self)
    def __setitem__(self, *args): return _li_std_map.IntIntPtrMap___setitem__(self, *args)
    def asdict(self): return _li_std_map.IntIntPtrMap_asdict(self)
    def __init__(self, *args): 
        this = _li_std_map.new_IntIntPtrMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _li_std_map.IntIntPtrMap_empty(self)
    def size(self): return _li_std_map.IntIntPtrMap_size(self)
    def clear(self): return _li_std_map.IntIntPtrMap_clear(self)
    def swap(self, *args): return _li_std_map.IntIntPtrMap_swap(self, *args)
    def get_allocator(self): return _li_std_map.IntIntPtrMap_get_allocator(self)
    def begin(self): return _li_std_map.IntIntPtrMap_begin(self)
    def end(self): return _li_std_map.IntIntPtrMap_end(self)
    def rbegin(self): return _li_std_map.IntIntPtrMap_rbegin(self)
    def rend(self): return _li_std_map.IntIntPtrMap_rend(self)
    def count(self, *args): return _li_std_map.IntIntPtrMap_count(self, *args)
    def erase(self, *args): return _li_std_map.IntIntPtrMap_erase(self, *args)
    def find(self, *args): return _li_std_map.IntIntPtrMap_find(self, *args)
    def lower_bound(self, *args): return _li_std_map.IntIntPtrMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _li_std_map.IntIntPtrMap_upper_bound(self, *args)
    __swig_destroy__ = _li_std_map.delete_IntIntPtrMap
    __del__ = lambda self : None;
IntIntPtrMap_swigregister = _li_std_map.IntIntPtrMap_swigregister
IntIntPtrMap_swigregister(IntIntPtrMap)

class IntConstIntPtrMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntConstIntPtrMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntConstIntPtrMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_map.IntConstIntPtrMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_map.IntConstIntPtrMap___nonzero__(self)
    def __bool__(self): return _li_std_map.IntConstIntPtrMap___bool__(self)
    def __len__(self): return _li_std_map.IntConstIntPtrMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _li_std_map.IntConstIntPtrMap___getitem__(self, *args)
    def __delitem__(self, *args): return _li_std_map.IntConstIntPtrMap___delitem__(self, *args)
    def has_key(self, *args): return _li_std_map.IntConstIntPtrMap_has_key(self, *args)
    def keys(self): return _li_std_map.IntConstIntPtrMap_keys(self)
    def values(self): return _li_std_map.IntConstIntPtrMap_values(self)
    def items(self): return _li_std_map.IntConstIntPtrMap_items(self)
    def __contains__(self, *args): return _li_std_map.IntConstIntPtrMap___contains__(self, *args)
    def key_iterator(self): return _li_std_map.IntConstIntPtrMap_key_iterator(self)
    def value_iterator(self): return _li_std_map.IntConstIntPtrMap_value_iterator(self)
    def __setitem__(self, *args): return _li_std_map.IntConstIntPtrMap___setitem__(self, *args)
    def asdict(self): return _li_std_map.IntConstIntPtrMap_asdict(self)
    def __init__(self, *args): 
        this = _li_std_map.new_IntConstIntPtrMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _li_std_map.IntConstIntPtrMap_empty(self)
    def size(self): return _li_std_map.IntConstIntPtrMap_size(self)
    def clear(self): return _li_std_map.IntConstIntPtrMap_clear(self)
    def swap(self, *args): return _li_std_map.IntConstIntPtrMap_swap(self, *args)
    def get_allocator(self): return _li_std_map.IntConstIntPtrMap_get_allocator(self)
    def begin(self): return _li_std_map.IntConstIntPtrMap_begin(self)
    def end(self): return _li_std_map.IntConstIntPtrMap_end(self)
    def rbegin(self): return _li_std_map.IntConstIntPtrMap_rbegin(self)
    def rend(self): return _li_std_map.IntConstIntPtrMap_rend(self)
    def count(self, *args): return _li_std_map.IntConstIntPtrMap_count(self, *args)
    def erase(self, *args): return _li_std_map.IntConstIntPtrMap_erase(self, *args)
    def find(self, *args): return _li_std_map.IntConstIntPtrMap_find(self, *args)
    def lower_bound(self, *args): return _li_std_map.IntConstIntPtrMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _li_std_map.IntConstIntPtrMap_upper_bound(self, *args)
    __swig_destroy__ = _li_std_map.delete_IntConstIntPtrMap
    __del__ = lambda self : None;
IntConstIntPtrMap_swigregister = _li_std_map.IntConstIntPtrMap_swigregister
IntConstIntPtrMap_swigregister(IntConstIntPtrMap)

class IntStructMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntStructMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntStructMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_map.IntStructMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_map.IntStructMap___nonzero__(self)
    def __bool__(self): return _li_std_map.IntStructMap___bool__(self)
    def __len__(self): return _li_std_map.IntStructMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _li_std_map.IntStructMap___getitem__(self, *args)
    def __delitem__(self, *args): return _li_std_map.IntStructMap___delitem__(self, *args)
    def has_key(self, *args): return _li_std_map.IntStructMap_has_key(self, *args)
    def keys(self): return _li_std_map.IntStructMap_keys(self)
    def values(self): return _li_std_map.IntStructMap_values(self)
    def items(self): return _li_std_map.IntStructMap_items(self)
    def __contains__(self, *args): return _li_std_map.IntStructMap___contains__(self, *args)
    def key_iterator(self): return _li_std_map.IntStructMap_key_iterator(self)
    def value_iterator(self): return _li_std_map.IntStructMap_value_iterator(self)
    def __setitem__(self, *args): return _li_std_map.IntStructMap___setitem__(self, *args)
    def asdict(self): return _li_std_map.IntStructMap_asdict(self)
    def __init__(self, *args): 
        this = _li_std_map.new_IntStructMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _li_std_map.IntStructMap_empty(self)
    def size(self): return _li_std_map.IntStructMap_size(self)
    def clear(self): return _li_std_map.IntStructMap_clear(self)
    def swap(self, *args): return _li_std_map.IntStructMap_swap(self, *args)
    def get_allocator(self): return _li_std_map.IntStructMap_get_allocator(self)
    def begin(self): return _li_std_map.IntStructMap_begin(self)
    def end(self): return _li_std_map.IntStructMap_end(self)
    def rbegin(self): return _li_std_map.IntStructMap_rbegin(self)
    def rend(self): return _li_std_map.IntStructMap_rend(self)
    def count(self, *args): return _li_std_map.IntStructMap_count(self, *args)
    def erase(self, *args): return _li_std_map.IntStructMap_erase(self, *args)
    def find(self, *args): return _li_std_map.IntStructMap_find(self, *args)
    def lower_bound(self, *args): return _li_std_map.IntStructMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _li_std_map.IntStructMap_upper_bound(self, *args)
    __swig_destroy__ = _li_std_map.delete_IntStructMap
    __del__ = lambda self : None;
IntStructMap_swigregister = _li_std_map.IntStructMap_swigregister
IntStructMap_swigregister(IntStructMap)

class IntStructPtrMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntStructPtrMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntStructPtrMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_map.IntStructPtrMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_map.IntStructPtrMap___nonzero__(self)
    def __bool__(self): return _li_std_map.IntStructPtrMap___bool__(self)
    def __len__(self): return _li_std_map.IntStructPtrMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _li_std_map.IntStructPtrMap___getitem__(self, *args)
    def __delitem__(self, *args): return _li_std_map.IntStructPtrMap___delitem__(self, *args)
    def has_key(self, *args): return _li_std_map.IntStructPtrMap_has_key(self, *args)
    def keys(self): return _li_std_map.IntStructPtrMap_keys(self)
    def values(self): return _li_std_map.IntStructPtrMap_values(self)
    def items(self): return _li_std_map.IntStructPtrMap_items(self)
    def __contains__(self, *args): return _li_std_map.IntStructPtrMap___contains__(self, *args)
    def key_iterator(self): return _li_std_map.IntStructPtrMap_key_iterator(self)
    def value_iterator(self): return _li_std_map.IntStructPtrMap_value_iterator(self)
    def __setitem__(self, *args): return _li_std_map.IntStructPtrMap___setitem__(self, *args)
    def asdict(self): return _li_std_map.IntStructPtrMap_asdict(self)
    def __init__(self, *args): 
        this = _li_std_map.new_IntStructPtrMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _li_std_map.IntStructPtrMap_empty(self)
    def size(self): return _li_std_map.IntStructPtrMap_size(self)
    def clear(self): return _li_std_map.IntStructPtrMap_clear(self)
    def swap(self, *args): return _li_std_map.IntStructPtrMap_swap(self, *args)
    def get_allocator(self): return _li_std_map.IntStructPtrMap_get_allocator(self)
    def begin(self): return _li_std_map.IntStructPtrMap_begin(self)
    def end(self): return _li_std_map.IntStructPtrMap_end(self)
    def rbegin(self): return _li_std_map.IntStructPtrMap_rbegin(self)
    def rend(self): return _li_std_map.IntStructPtrMap_rend(self)
    def count(self, *args): return _li_std_map.IntStructPtrMap_count(self, *args)
    def erase(self, *args): return _li_std_map.IntStructPtrMap_erase(self, *args)
    def find(self, *args): return _li_std_map.IntStructPtrMap_find(self, *args)
    def lower_bound(self, *args): return _li_std_map.IntStructPtrMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _li_std_map.IntStructPtrMap_upper_bound(self, *args)
    __swig_destroy__ = _li_std_map.delete_IntStructPtrMap
    __del__ = lambda self : None;
IntStructPtrMap_swigregister = _li_std_map.IntStructPtrMap_swigregister
IntStructPtrMap_swigregister(IntStructPtrMap)

class IntStructConstPtrMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntStructConstPtrMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntStructConstPtrMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_map.IntStructConstPtrMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_map.IntStructConstPtrMap___nonzero__(self)
    def __bool__(self): return _li_std_map.IntStructConstPtrMap___bool__(self)
    def __len__(self): return _li_std_map.IntStructConstPtrMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _li_std_map.IntStructConstPtrMap___getitem__(self, *args)
    def __delitem__(self, *args): return _li_std_map.IntStructConstPtrMap___delitem__(self, *args)
    def has_key(self, *args): return _li_std_map.IntStructConstPtrMap_has_key(self, *args)
    def keys(self): return _li_std_map.IntStructConstPtrMap_keys(self)
    def values(self): return _li_std_map.IntStructConstPtrMap_values(self)
    def items(self): return _li_std_map.IntStructConstPtrMap_items(self)
    def __contains__(self, *args): return _li_std_map.IntStructConstPtrMap___contains__(self, *args)
    def key_iterator(self): return _li_std_map.IntStructConstPtrMap_key_iterator(self)
    def value_iterator(self): return _li_std_map.IntStructConstPtrMap_value_iterator(self)
    def __setitem__(self, *args): return _li_std_map.IntStructConstPtrMap___setitem__(self, *args)
    def asdict(self): return _li_std_map.IntStructConstPtrMap_asdict(self)
    def __init__(self, *args): 
        this = _li_std_map.new_IntStructConstPtrMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _li_std_map.IntStructConstPtrMap_empty(self)
    def size(self): return _li_std_map.IntStructConstPtrMap_size(self)
    def clear(self): return _li_std_map.IntStructConstPtrMap_clear(self)
    def swap(self, *args): return _li_std_map.IntStructConstPtrMap_swap(self, *args)
    def get_allocator(self): return _li_std_map.IntStructConstPtrMap_get_allocator(self)
    def begin(self): return _li_std_map.IntStructConstPtrMap_begin(self)
    def end(self): return _li_std_map.IntStructConstPtrMap_end(self)
    def rbegin(self): return _li_std_map.IntStructConstPtrMap_rbegin(self)
    def rend(self): return _li_std_map.IntStructConstPtrMap_rend(self)
    def count(self, *args): return _li_std_map.IntStructConstPtrMap_count(self, *args)
    def erase(self, *args): return _li_std_map.IntStructConstPtrMap_erase(self, *args)
    def find(self, *args): return _li_std_map.IntStructConstPtrMap_find(self, *args)
    def lower_bound(self, *args): return _li_std_map.IntStructConstPtrMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _li_std_map.IntStructConstPtrMap_upper_bound(self, *args)
    __swig_destroy__ = _li_std_map.delete_IntStructConstPtrMap
    __del__ = lambda self : None;
IntStructConstPtrMap_swigregister = _li_std_map.IntStructConstPtrMap_swigregister
IntStructConstPtrMap_swigregister(IntStructConstPtrMap)

class StructPtrIntMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructPtrIntMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StructPtrIntMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_map.StructPtrIntMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_map.StructPtrIntMap___nonzero__(self)
    def __bool__(self): return _li_std_map.StructPtrIntMap___bool__(self)
    def __len__(self): return _li_std_map.StructPtrIntMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _li_std_map.StructPtrIntMap___getitem__(self, *args)
    def __delitem__(self, *args): return _li_std_map.StructPtrIntMap___delitem__(self, *args)
    def has_key(self, *args): return _li_std_map.StructPtrIntMap_has_key(self, *args)
    def keys(self): return _li_std_map.StructPtrIntMap_keys(self)
    def values(self): return _li_std_map.StructPtrIntMap_values(self)
    def items(self): return _li_std_map.StructPtrIntMap_items(self)
    def __contains__(self, *args): return _li_std_map.StructPtrIntMap___contains__(self, *args)
    def key_iterator(self): return _li_std_map.StructPtrIntMap_key_iterator(self)
    def value_iterator(self): return _li_std_map.StructPtrIntMap_value_iterator(self)
    def __setitem__(self, *args): return _li_std_map.StructPtrIntMap___setitem__(self, *args)
    def asdict(self): return _li_std_map.StructPtrIntMap_asdict(self)
    def __init__(self, *args): 
        this = _li_std_map.new_StructPtrIntMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _li_std_map.StructPtrIntMap_empty(self)
    def size(self): return _li_std_map.StructPtrIntMap_size(self)
    def clear(self): return _li_std_map.StructPtrIntMap_clear(self)
    def swap(self, *args): return _li_std_map.StructPtrIntMap_swap(self, *args)
    def get_allocator(self): return _li_std_map.StructPtrIntMap_get_allocator(self)
    def begin(self): return _li_std_map.StructPtrIntMap_begin(self)
    def end(self): return _li_std_map.StructPtrIntMap_end(self)
    def rbegin(self): return _li_std_map.StructPtrIntMap_rbegin(self)
    def rend(self): return _li_std_map.StructPtrIntMap_rend(self)
    def count(self, *args): return _li_std_map.StructPtrIntMap_count(self, *args)
    def erase(self, *args): return _li_std_map.StructPtrIntMap_erase(self, *args)
    def find(self, *args): return _li_std_map.StructPtrIntMap_find(self, *args)
    def lower_bound(self, *args): return _li_std_map.StructPtrIntMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _li_std_map.StructPtrIntMap_upper_bound(self, *args)
    __swig_destroy__ = _li_std_map.delete_StructPtrIntMap
    __del__ = lambda self : None;
StructPtrIntMap_swigregister = _li_std_map.StructPtrIntMap_swigregister
StructPtrIntMap_swigregister(StructPtrIntMap)

class StructIntMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructIntMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StructIntMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_map.StructIntMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_map.StructIntMap___nonzero__(self)
    def __bool__(self): return _li_std_map.StructIntMap___bool__(self)
    def __len__(self): return _li_std_map.StructIntMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _li_std_map.StructIntMap___getitem__(self, *args)
    def __delitem__(self, *args): return _li_std_map.StructIntMap___delitem__(self, *args)
    def has_key(self, *args): return _li_std_map.StructIntMap_has_key(self, *args)
    def keys(self): return _li_std_map.StructIntMap_keys(self)
    def values(self): return _li_std_map.StructIntMap_values(self)
    def items(self): return _li_std_map.StructIntMap_items(self)
    def __contains__(self, *args): return _li_std_map.StructIntMap___contains__(self, *args)
    def key_iterator(self): return _li_std_map.StructIntMap_key_iterator(self)
    def value_iterator(self): return _li_std_map.StructIntMap_value_iterator(self)
    def __setitem__(self, *args): return _li_std_map.StructIntMap___setitem__(self, *args)
    def asdict(self): return _li_std_map.StructIntMap_asdict(self)
    def __init__(self, *args): 
        this = _li_std_map.new_StructIntMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _li_std_map.StructIntMap_empty(self)
    def size(self): return _li_std_map.StructIntMap_size(self)
    def clear(self): return _li_std_map.StructIntMap_clear(self)
    def swap(self, *args): return _li_std_map.StructIntMap_swap(self, *args)
    def get_allocator(self): return _li_std_map.StructIntMap_get_allocator(self)
    def begin(self): return _li_std_map.StructIntMap_begin(self)
    def end(self): return _li_std_map.StructIntMap_end(self)
    def rbegin(self): return _li_std_map.StructIntMap_rbegin(self)
    def rend(self): return _li_std_map.StructIntMap_rend(self)
    def count(self, *args): return _li_std_map.StructIntMap_count(self, *args)
    def erase(self, *args): return _li_std_map.StructIntMap_erase(self, *args)
    def find(self, *args): return _li_std_map.StructIntMap_find(self, *args)
    def lower_bound(self, *args): return _li_std_map.StructIntMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _li_std_map.StructIntMap_upper_bound(self, *args)
    __swig_destroy__ = _li_std_map.delete_StructIntMap
    __del__ = lambda self : None;
StructIntMap_swigregister = _li_std_map.StructIntMap_swigregister
StructIntMap_swigregister(StructIntMap)

class A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _li_std_map.A_val_set
    __swig_getmethods__["val"] = _li_std_map.A_val_get
    if _newclass:val = _swig_property(_li_std_map.A_val_get, _li_std_map.A_val_set)
    def __init__(self, v=0): 
        this = _li_std_map.new_A(v)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_map.delete_A
    __del__ = lambda self : None;
A_swigregister = _li_std_map.A_swigregister
A_swigregister(A)

class pairii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairii, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_map.new_pairii(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_map.pairii_first_set
    __swig_getmethods__["first"] = _li_std_map.pairii_first_get
    if _newclass:first = _swig_property(_li_std_map.pairii_first_get, _li_std_map.pairii_first_set)
    __swig_setmethods__["second"] = _li_std_map.pairii_second_set
    __swig_getmethods__["second"] = _li_std_map.pairii_second_get
    if _newclass:second = _swig_property(_li_std_map.pairii_second_get, _li_std_map.pairii_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_map.delete_pairii
    __del__ = lambda self : None;
pairii_swigregister = _li_std_map.pairii_swigregister
pairii_swigregister(pairii)

class pairAA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairAA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairAA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_map.new_pairAA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_map.pairAA_first_set
    __swig_getmethods__["first"] = _li_std_map.pairAA_first_get
    if _newclass:first = _swig_property(_li_std_map.pairAA_first_get, _li_std_map.pairAA_first_set)
    __swig_setmethods__["second"] = _li_std_map.pairAA_second_set
    __swig_getmethods__["second"] = _li_std_map.pairAA_second_get
    if _newclass:second = _swig_property(_li_std_map.pairAA_second_get, _li_std_map.pairAA_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_map.delete_pairAA
    __del__ = lambda self : None;
pairAA_swigregister = _li_std_map.pairAA_swigregister
pairAA_swigregister(pairAA)

class pairA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_map.new_pairA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_map.pairA_first_set
    __swig_getmethods__["first"] = _li_std_map.pairA_first_get
    if _newclass:first = _swig_property(_li_std_map.pairA_first_get, _li_std_map.pairA_first_set)
    __swig_setmethods__["second"] = _li_std_map.pairA_second_set
    __swig_getmethods__["second"] = _li_std_map.pairA_second_get
    if _newclass:second = _swig_property(_li_std_map.pairA_second_get, _li_std_map.pairA_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_map.delete_pairA
    __del__ = lambda self : None;
pairA_swigregister = _li_std_map.pairA_swigregister
pairA_swigregister(pairA)

class mapA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapA, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_map.mapA_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_map.mapA___nonzero__(self)
    def __bool__(self): return _li_std_map.mapA___bool__(self)
    def __len__(self): return _li_std_map.mapA___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _li_std_map.mapA___getitem__(self, *args)
    def __delitem__(self, *args): return _li_std_map.mapA___delitem__(self, *args)
    def has_key(self, *args): return _li_std_map.mapA_has_key(self, *args)
    def keys(self): return _li_std_map.mapA_keys(self)
    def values(self): return _li_std_map.mapA_values(self)
    def items(self): return _li_std_map.mapA_items(self)
    def __contains__(self, *args): return _li_std_map.mapA___contains__(self, *args)
    def key_iterator(self): return _li_std_map.mapA_key_iterator(self)
    def value_iterator(self): return _li_std_map.mapA_value_iterator(self)
    def __setitem__(self, *args): return _li_std_map.mapA___setitem__(self, *args)
    def asdict(self): return _li_std_map.mapA_asdict(self)
    def __init__(self, *args): 
        this = _li_std_map.new_mapA(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _li_std_map.mapA_empty(self)
    def size(self): return _li_std_map.mapA_size(self)
    def clear(self): return _li_std_map.mapA_clear(self)
    def swap(self, *args): return _li_std_map.mapA_swap(self, *args)
    def get_allocator(self): return _li_std_map.mapA_get_allocator(self)
    def begin(self): return _li_std_map.mapA_begin(self)
    def end(self): return _li_std_map.mapA_end(self)
    def rbegin(self): return _li_std_map.mapA_rbegin(self)
    def rend(self): return _li_std_map.mapA_rend(self)
    def count(self, *args): return _li_std_map.mapA_count(self, *args)
    def erase(self, *args): return _li_std_map.mapA_erase(self, *args)
    def find(self, *args): return _li_std_map.mapA_find(self, *args)
    def lower_bound(self, *args): return _li_std_map.mapA_lower_bound(self, *args)
    def upper_bound(self, *args): return _li_std_map.mapA_upper_bound(self, *args)
    __swig_destroy__ = _li_std_map.delete_mapA
    __del__ = lambda self : None;
mapA_swigregister = _li_std_map.mapA_swigregister
mapA_swigregister(mapA)

class paircA1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, paircA1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, paircA1, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_map.new_paircA1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["first"] = _li_std_map.paircA1_first_get
    if _newclass:first = _swig_property(_li_std_map.paircA1_first_get)
    __swig_setmethods__["second"] = _li_std_map.paircA1_second_set
    __swig_getmethods__["second"] = _li_std_map.paircA1_second_get
    if _newclass:second = _swig_property(_li_std_map.paircA1_second_get, _li_std_map.paircA1_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_map.delete_paircA1
    __del__ = lambda self : None;
paircA1_swigregister = _li_std_map.paircA1_swigregister
paircA1_swigregister(paircA1)

class paircA2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, paircA2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, paircA2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_map.new_paircA2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["first"] = _li_std_map.paircA2_first_get
    if _newclass:first = _swig_property(_li_std_map.paircA2_first_get)
    __swig_setmethods__["second"] = _li_std_map.paircA2_second_set
    __swig_getmethods__["second"] = _li_std_map.paircA2_second_get
    if _newclass:second = _swig_property(_li_std_map.paircA2_second_get, _li_std_map.paircA2_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_map.delete_paircA2
    __del__ = lambda self : None;
paircA2_swigregister = _li_std_map.paircA2_swigregister
paircA2_swigregister(paircA2)

class pairiiA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairiiA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairiiA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_map.new_pairiiA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_map.pairiiA_first_set
    __swig_getmethods__["first"] = _li_std_map.pairiiA_first_get
    if _newclass:first = _swig_property(_li_std_map.pairiiA_first_get, _li_std_map.pairiiA_first_set)
    __swig_setmethods__["second"] = _li_std_map.pairiiA_second_set
    __swig_getmethods__["second"] = _li_std_map.pairiiA_second_get
    if _newclass:second = _swig_property(_li_std_map.pairiiA_second_get, _li_std_map.pairiiA_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_map.delete_pairiiA
    __del__ = lambda self : None;
pairiiA_swigregister = _li_std_map.pairiiA_swigregister
pairiiA_swigregister(pairiiA)

class pairiiAc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairiiAc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairiiAc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_map.new_pairiiAc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _li_std_map.pairiiAc_first_set
    __swig_getmethods__["first"] = _li_std_map.pairiiAc_first_get
    if _newclass:first = _swig_property(_li_std_map.pairiiAc_first_get, _li_std_map.pairiiAc_first_set)
    __swig_getmethods__["second"] = _li_std_map.pairiiAc_second_get
    if _newclass:second = _swig_property(_li_std_map.pairiiAc_second_get)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _li_std_map.delete_pairiiAc
    __del__ = lambda self : None;
pairiiAc_swigregister = _li_std_map.pairiiAc_swigregister
pairiiAc_swigregister(pairiiAc)

class pymap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pymap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pymap, name)
    __repr__ = _swig_repr
    def iterator(self): return _li_std_map.pymap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_map.pymap___nonzero__(self)
    def __bool__(self): return _li_std_map.pymap___bool__(self)
    def __len__(self): return _li_std_map.pymap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _li_std_map.pymap___getitem__(self, *args)
    def __delitem__(self, *args): return _li_std_map.pymap___delitem__(self, *args)
    def has_key(self, *args): return _li_std_map.pymap_has_key(self, *args)
    def keys(self): return _li_std_map.pymap_keys(self)
    def values(self): return _li_std_map.pymap_values(self)
    def items(self): return _li_std_map.pymap_items(self)
    def __contains__(self, *args): return _li_std_map.pymap___contains__(self, *args)
    def key_iterator(self): return _li_std_map.pymap_key_iterator(self)
    def value_iterator(self): return _li_std_map.pymap_value_iterator(self)
    def __setitem__(self, *args): return _li_std_map.pymap___setitem__(self, *args)
    def asdict(self): return _li_std_map.pymap_asdict(self)
    def __init__(self, *args): 
        this = _li_std_map.new_pymap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _li_std_map.pymap_empty(self)
    def size(self): return _li_std_map.pymap_size(self)
    def clear(self): return _li_std_map.pymap_clear(self)
    def swap(self, *args): return _li_std_map.pymap_swap(self, *args)
    def get_allocator(self): return _li_std_map.pymap_get_allocator(self)
    def begin(self): return _li_std_map.pymap_begin(self)
    def end(self): return _li_std_map.pymap_end(self)
    def rbegin(self): return _li_std_map.pymap_rbegin(self)
    def rend(self): return _li_std_map.pymap_rend(self)
    def count(self, *args): return _li_std_map.pymap_count(self, *args)
    def erase(self, *args): return _li_std_map.pymap_erase(self, *args)
    def find(self, *args): return _li_std_map.pymap_find(self, *args)
    def lower_bound(self, *args): return _li_std_map.pymap_lower_bound(self, *args)
    def upper_bound(self, *args): return _li_std_map.pymap_upper_bound(self, *args)
    __swig_destroy__ = _li_std_map.delete_pymap
    __del__ = lambda self : None;
pymap_swigregister = _li_std_map.pymap_swigregister
pymap_swigregister(pymap)


def p_identa(*args):
  return _li_std_map.p_identa(*args)
p_identa = _li_std_map.p_identa

def m_identa(*args):
  return _li_std_map.m_identa(*args)
m_identa = _li_std_map.m_identa
# This file is compatible with both classic and new-style classes.


