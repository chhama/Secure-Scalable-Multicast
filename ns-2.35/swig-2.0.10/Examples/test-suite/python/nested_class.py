# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nested_class', [dirname(__file__)])
        except ImportError:
            import _nested_class
            return _nested_class
        if fp is not None:
            try:
                _mod = imp.load_module('_nested_class', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nested_class = swig_import_helper()
    del swig_import_helper
else:
    import _nested_class
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Outer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Outer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Outer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["InnerClass2Instance"] = _nested_class.Outer_InnerClass2Instance_set
    __swig_getmethods__["InnerClass2Instance"] = _nested_class.Outer_InnerClass2Instance_get
    if _newclass:InnerClass2Instance = _swig_property(_nested_class.Outer_InnerClass2Instance_get, _nested_class.Outer_InnerClass2Instance_set)
    __swig_setmethods__["InnerStruct2Instance"] = _nested_class.Outer_InnerStruct2Instance_set
    __swig_getmethods__["InnerStruct2Instance"] = _nested_class.Outer_InnerStruct2Instance_get
    if _newclass:InnerStruct2Instance = _swig_property(_nested_class.Outer_InnerStruct2Instance_get, _nested_class.Outer_InnerStruct2Instance_set)
    __swig_setmethods__["InnerUnion2Instance"] = _nested_class.Outer_InnerUnion2Instance_set
    __swig_getmethods__["InnerUnion2Instance"] = _nested_class.Outer_InnerUnion2Instance_get
    if _newclass:InnerUnion2Instance = _swig_property(_nested_class.Outer_InnerUnion2Instance_get, _nested_class.Outer_InnerUnion2Instance_set)
    def makeInnerStruct1(self): return _nested_class.Outer_makeInnerStruct1(self)
    def makeInnerClass1(self): return _nested_class.Outer_makeInnerClass1(self)
    def makeInnerUnion1(self): return _nested_class.Outer_makeInnerUnion1(self)
    def makeInnerStruct2(self): return _nested_class.Outer_makeInnerStruct2(self)
    def makeInnerClass2(self): return _nested_class.Outer_makeInnerClass2(self)
    def makeInnerUnion2(self): return _nested_class.Outer_makeInnerUnion2(self)
    def makeInnerStruct4Typedef(self): return _nested_class.Outer_makeInnerStruct4Typedef(self)
    def makeInnerClass4Typedef(self): return _nested_class.Outer_makeInnerClass4Typedef(self)
    def makeInnerUnion4Typedef(self): return _nested_class.Outer_makeInnerUnion4Typedef(self)
    def makeInnerStruct5(self): return _nested_class.Outer_makeInnerStruct5(self)
    def makeInnerClass5(self): return _nested_class.Outer_makeInnerClass5(self)
    def makeInnerUnion5(self): return _nested_class.Outer_makeInnerUnion5(self)
    def makeInnerStruct5Typedef(self): return _nested_class.Outer_makeInnerStruct5Typedef(self)
    def makeInnerClass5Typedef(self): return _nested_class.Outer_makeInnerClass5Typedef(self)
    def makeInnerUnion5Typedef(self): return _nested_class.Outer_makeInnerUnion5Typedef(self)
    __swig_setmethods__["MultipleInstance1"] = _nested_class.Outer_MultipleInstance1_set
    __swig_getmethods__["MultipleInstance1"] = _nested_class.Outer_MultipleInstance1_get
    if _newclass:MultipleInstance1 = _swig_property(_nested_class.Outer_MultipleInstance1_get, _nested_class.Outer_MultipleInstance1_set)
    __swig_setmethods__["MultipleInstance2"] = _nested_class.Outer_MultipleInstance2_set
    __swig_getmethods__["MultipleInstance2"] = _nested_class.Outer_MultipleInstance2_get
    if _newclass:MultipleInstance2 = _swig_property(_nested_class.Outer_MultipleInstance2_get, _nested_class.Outer_MultipleInstance2_set)
    __swig_setmethods__["MultipleInstance3"] = _nested_class.Outer_MultipleInstance3_set
    __swig_getmethods__["MultipleInstance3"] = _nested_class.Outer_MultipleInstance3_get
    if _newclass:MultipleInstance3 = _swig_property(_nested_class.Outer_MultipleInstance3_get, _nested_class.Outer_MultipleInstance3_set)
    __swig_setmethods__["MultipleInstance4"] = _nested_class.Outer_MultipleInstance4_set
    __swig_getmethods__["MultipleInstance4"] = _nested_class.Outer_MultipleInstance4_get
    if _newclass:MultipleInstance4 = _swig_property(_nested_class.Outer_MultipleInstance4_get, _nested_class.Outer_MultipleInstance4_set)
    __swig_setmethods__["MultipleDerivedInstance1"] = _nested_class.Outer_MultipleDerivedInstance1_set
    __swig_getmethods__["MultipleDerivedInstance1"] = _nested_class.Outer_MultipleDerivedInstance1_get
    if _newclass:MultipleDerivedInstance1 = _swig_property(_nested_class.Outer_MultipleDerivedInstance1_get, _nested_class.Outer_MultipleDerivedInstance1_set)
    __swig_setmethods__["MultipleDerivedInstance2"] = _nested_class.Outer_MultipleDerivedInstance2_set
    __swig_getmethods__["MultipleDerivedInstance2"] = _nested_class.Outer_MultipleDerivedInstance2_get
    if _newclass:MultipleDerivedInstance2 = _swig_property(_nested_class.Outer_MultipleDerivedInstance2_get, _nested_class.Outer_MultipleDerivedInstance2_set)
    __swig_setmethods__["MultipleDerivedInstance3"] = _nested_class.Outer_MultipleDerivedInstance3_set
    __swig_getmethods__["MultipleDerivedInstance3"] = _nested_class.Outer_MultipleDerivedInstance3_get
    if _newclass:MultipleDerivedInstance3 = _swig_property(_nested_class.Outer_MultipleDerivedInstance3_get, _nested_class.Outer_MultipleDerivedInstance3_set)
    __swig_setmethods__["MultipleDerivedInstance4"] = _nested_class.Outer_MultipleDerivedInstance4_set
    __swig_getmethods__["MultipleDerivedInstance4"] = _nested_class.Outer_MultipleDerivedInstance4_get
    if _newclass:MultipleDerivedInstance4 = _swig_property(_nested_class.Outer_MultipleDerivedInstance4_get, _nested_class.Outer_MultipleDerivedInstance4_set)
    def makeInnerMultipleAnonTypedef1(self): return _nested_class.Outer_makeInnerMultipleAnonTypedef1(self)
    def makeInnerMultipleAnonTypedef2(self): return _nested_class.Outer_makeInnerMultipleAnonTypedef2(self)
    def makeInnerMultipleAnonTypedef3(self): return _nested_class.Outer_makeInnerMultipleAnonTypedef3(self)
    def makeInnerMultipleNamedTypedef(self): return _nested_class.Outer_makeInnerMultipleNamedTypedef(self)
    def makeInnerMultipleNamedTypedef1(self): return _nested_class.Outer_makeInnerMultipleNamedTypedef1(self)
    def makeInnerMultipleNamedTypedef2(self): return _nested_class.Outer_makeInnerMultipleNamedTypedef2(self)
    def makeInnerMultipleNamedTypedef3(self): return _nested_class.Outer_makeInnerMultipleNamedTypedef3(self)
    def makeInnerSameName(self): return _nested_class.Outer_makeInnerSameName(self)
    def __init__(self): 
        this = _nested_class.new_Outer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nested_class.delete_Outer
    __del__ = lambda self : None;
Outer_swigregister = _nested_class.Outer_swigregister
Outer_swigregister(Outer)

class Outer2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Outer2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Outer2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _nested_class.new_Outer2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nested_class.delete_Outer2
    __del__ = lambda self : None;
Outer2_swigregister = _nested_class.Outer2_swigregister
Outer2_swigregister(Outer2)

# This file is compatible with both classic and new-style classes.


