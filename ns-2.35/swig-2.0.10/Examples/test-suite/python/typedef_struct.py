# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_typedef_struct', [dirname(__file__)])
        except ImportError:
            import _typedef_struct
            return _typedef_struct
        if fp is not None:
            try:
                _mod = imp.load_module('_typedef_struct', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _typedef_struct = swig_import_helper()
    del swig_import_helper
else:
    import _typedef_struct
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class LineObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LineObj, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numpoints"] = _typedef_struct.LineObj_numpoints_set
    __swig_getmethods__["numpoints"] = _typedef_struct.LineObj_numpoints_get
    if _newclass:numpoints = _swig_property(_typedef_struct.LineObj_numpoints_get, _typedef_struct.LineObj_numpoints_set)
    def __init__(self): 
        this = _typedef_struct.new_LineObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _typedef_struct.delete_LineObj
    __del__ = lambda self : None;
LineObj_swigregister = _typedef_struct.LineObj_swigregister
LineObj_swigregister(LineObj)

class FontSetObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FontSetObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FontSetObj, name)
    __repr__ = _swig_repr
    __swig_getmethods__["filename"] = _typedef_struct.FontSetObj_filename_get
    if _newclass:filename = _swig_property(_typedef_struct.FontSetObj_filename_get)
    __swig_getmethods__["numfonts"] = _typedef_struct.FontSetObj_numfonts_get
    if _newclass:numfonts = _swig_property(_typedef_struct.FontSetObj_numfonts_get)
    __swig_setmethods__["fonts"] = _typedef_struct.FontSetObj_fonts_set
    __swig_getmethods__["fonts"] = _typedef_struct.FontSetObj_fonts_get
    if _newclass:fonts = _swig_property(_typedef_struct.FontSetObj_fonts_get, _typedef_struct.FontSetObj_fonts_set)
    def __init__(self): 
        this = _typedef_struct.new_FontSetObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _typedef_struct.delete_FontSetObj
    __del__ = lambda self : None;
FontSetObj_swigregister = _typedef_struct.FontSetObj_swigregister
FontSetObj_swigregister(FontSetObj)

MS_NOOVERRIDE = _typedef_struct.MS_NOOVERRIDE
class A_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _typedef_struct.A_t_a_set
    __swig_getmethods__["a"] = _typedef_struct.A_t_a_get
    if _newclass:a = _swig_property(_typedef_struct.A_t_a_get, _typedef_struct.A_t_a_set)
    __swig_setmethods__["b"] = _typedef_struct.A_t_b_set
    __swig_getmethods__["b"] = _typedef_struct.A_t_b_get
    if _newclass:b = _swig_property(_typedef_struct.A_t_b_get, _typedef_struct.A_t_b_set)
    def __init__(self): 
        this = _typedef_struct.new_A_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _typedef_struct.delete_A_t
    __del__ = lambda self : None;
A_t_swigregister = _typedef_struct.A_t_swigregister
A_t_swigregister(A_t)


def make_a():
  return _typedef_struct.make_a()
make_a = _typedef_struct.make_a

def make_b():
  return _typedef_struct.make_b()
make_b = _typedef_struct.make_b
class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enumvar"] = _typedef_struct.Foo_enumvar_set
    __swig_getmethods__["enumvar"] = _typedef_struct.Foo_enumvar_get
    if _newclass:enumvar = _swig_property(_typedef_struct.Foo_enumvar_get, _typedef_struct.Foo_enumvar_set)
    __swig_setmethods__["foovar"] = _typedef_struct.Foo_foovar_set
    __swig_getmethods__["foovar"] = _typedef_struct.Foo_foovar_get
    if _newclass:foovar = _swig_property(_typedef_struct.Foo_foovar_get, _typedef_struct.Foo_foovar_set)
    __swig_setmethods__["fptr"] = _typedef_struct.Foo_fptr_set
    __swig_getmethods__["fptr"] = _typedef_struct.Foo_fptr_get
    if _newclass:fptr = _swig_property(_typedef_struct.Foo_fptr_get, _typedef_struct.Foo_fptr_set)
    def __init__(self): 
        this = _typedef_struct.new_Foo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _typedef_struct.delete_Foo
    __del__ = lambda self : None;
Foo_swigregister = _typedef_struct.Foo_swigregister
Foo_swigregister(Foo)
NONAME1 = _typedef_struct.NONAME1
NONAME2 = _typedef_struct.NONAME2

# This file is compatible with both classic and new-style classes.


