# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_enum_thorough', [dirname(__file__)])
        except ImportError:
            import _enum_thorough
            return _enum_thorough
        if fp is not None:
            try:
                _mod = imp.load_module('_enum_thorough', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _enum_thorough = swig_import_helper()
    del swig_import_helper
else:
    import _enum_thorough
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


AnonEnum1 = _enum_thorough.AnonEnum1
AnonEnum2 = _enum_thorough.AnonEnum2
ReallyAnInteger = _enum_thorough.ReallyAnInteger
AnonSpaceEnum1 = _enum_thorough.AnonSpaceEnum1
AnonSpaceEnum2 = _enum_thorough.AnonSpaceEnum2
class AnonStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnonStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnonStruct, name)
    __repr__ = _swig_repr
    AnonStructEnum1 = _enum_thorough.AnonStruct_AnonStructEnum1
    AnonStructEnum2 = _enum_thorough.AnonStruct_AnonStructEnum2
    def __init__(self): 
        this = _enum_thorough.new_AnonStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enum_thorough.delete_AnonStruct
    __del__ = lambda self : None;
AnonStruct_swigregister = _enum_thorough.AnonStruct_swigregister
AnonStruct_swigregister(AnonStruct)

red = _enum_thorough.red
blue = _enum_thorough.blue
green = _enum_thorough.green

def colourTest1(*args):
  return _enum_thorough.colourTest1(*args)
colourTest1 = _enum_thorough.colourTest1

def colourTest2(*args):
  return _enum_thorough.colourTest2(*args)
colourTest2 = _enum_thorough.colourTest2

def colourTest3(*args):
  return _enum_thorough.colourTest3(*args)
colourTest3 = _enum_thorough.colourTest3

def colourTest4(*args):
  return _enum_thorough.colourTest4(*args)
colourTest4 = _enum_thorough.colourTest4
class SpeedClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpeedClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpeedClass, name)
    __repr__ = _swig_repr
    slow = _enum_thorough.SpeedClass_slow
    medium = _enum_thorough.SpeedClass_medium
    fast = _enum_thorough.SpeedClass_fast
    lightning = _enum_thorough.SpeedClass_lightning
    def speedTest0(self, *args): return _enum_thorough.SpeedClass_speedTest0(self, *args)
    def speedTest1(self, *args): return _enum_thorough.SpeedClass_speedTest1(self, *args)
    def speedTest2(self, *args): return _enum_thorough.SpeedClass_speedTest2(self, *args)
    def speedTest3(self, *args): return _enum_thorough.SpeedClass_speedTest3(self, *args)
    def speedTest4(self, *args): return _enum_thorough.SpeedClass_speedTest4(self, *args)
    def speedTest5(self, *args): return _enum_thorough.SpeedClass_speedTest5(self, *args)
    def speedTest6(self, *args): return _enum_thorough.SpeedClass_speedTest6(self, *args)
    def speedTest7(self, *args): return _enum_thorough.SpeedClass_speedTest7(self, *args)
    def speedTest8(self, *args): return _enum_thorough.SpeedClass_speedTest8(self, *args)
    __swig_getmethods__["myColour2"] = _enum_thorough.SpeedClass_myColour2_get
    if _newclass:myColour2 = _swig_property(_enum_thorough.SpeedClass_myColour2_get)
    __swig_setmethods__["mySpeedtd1"] = _enum_thorough.SpeedClass_mySpeedtd1_set
    __swig_getmethods__["mySpeedtd1"] = _enum_thorough.SpeedClass_mySpeedtd1_get
    if _newclass:mySpeedtd1 = _swig_property(_enum_thorough.SpeedClass_mySpeedtd1_get, _enum_thorough.SpeedClass_mySpeedtd1_set)
    def __init__(self): 
        this = _enum_thorough.new_SpeedClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enum_thorough.delete_SpeedClass
    __del__ = lambda self : None;
SpeedClass_swigregister = _enum_thorough.SpeedClass_swigregister
SpeedClass_swigregister(SpeedClass)
cvar = _enum_thorough.cvar


def speedTest0(*args):
  return _enum_thorough.speedTest0(*args)
speedTest0 = _enum_thorough.speedTest0

def speedTest1(*args):
  return _enum_thorough.speedTest1(*args)
speedTest1 = _enum_thorough.speedTest1

def speedTest2(*args):
  return _enum_thorough.speedTest2(*args)
speedTest2 = _enum_thorough.speedTest2

def speedTest3(*args):
  return _enum_thorough.speedTest3(*args)
speedTest3 = _enum_thorough.speedTest3

def speedTest4(*args):
  return _enum_thorough.speedTest4(*args)
speedTest4 = _enum_thorough.speedTest4

def speedTest5(*args):
  return _enum_thorough.speedTest5(*args)
speedTest5 = _enum_thorough.speedTest5
NamedAnon1 = _enum_thorough.NamedAnon1
NamedAnon2 = _enum_thorough.NamedAnon2

def namedanonTest1(*args):
  return _enum_thorough.namedanonTest1(*args)
namedanonTest1 = _enum_thorough.namedanonTest1
TwoNames1 = _enum_thorough.TwoNames1
TwoNames2 = _enum_thorough.TwoNames2
TwoNames3 = _enum_thorough.TwoNames3

def twonamesTest1(*args):
  return _enum_thorough.twonamesTest1(*args)
twonamesTest1 = _enum_thorough.twonamesTest1

def twonamesTest2(*args):
  return _enum_thorough.twonamesTest2(*args)
twonamesTest2 = _enum_thorough.twonamesTest2

def twonamesTest3(*args):
  return _enum_thorough.twonamesTest3(*args)
twonamesTest3 = _enum_thorough.twonamesTest3
class TwoNamesStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoNamesStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TwoNamesStruct, name)
    __repr__ = _swig_repr
    TwoNamesStruct1 = _enum_thorough.TwoNamesStruct_TwoNamesStruct1
    TwoNamesStruct2 = _enum_thorough.TwoNamesStruct_TwoNamesStruct2
    def twonamesTest1(self, *args): return _enum_thorough.TwoNamesStruct_twonamesTest1(self, *args)
    def twonamesTest2(self, *args): return _enum_thorough.TwoNamesStruct_twonamesTest2(self, *args)
    def twonamesTest3(self, *args): return _enum_thorough.TwoNamesStruct_twonamesTest3(self, *args)
    def __init__(self): 
        this = _enum_thorough.new_TwoNamesStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enum_thorough.delete_TwoNamesStruct
    __del__ = lambda self : None;
TwoNamesStruct_swigregister = _enum_thorough.TwoNamesStruct_swigregister
TwoNamesStruct_swigregister(TwoNamesStruct)

NamedAnonSpace1 = _enum_thorough.NamedAnonSpace1
NamedAnonSpace2 = _enum_thorough.NamedAnonSpace2

def namedanonspaceTest1(*args):
  return _enum_thorough.namedanonspaceTest1(*args)
namedanonspaceTest1 = _enum_thorough.namedanonspaceTest1

def namedanonspaceTest2(*args):
  return _enum_thorough.namedanonspaceTest2(*args)
namedanonspaceTest2 = _enum_thorough.namedanonspaceTest2

def namedanonspaceTest3(*args):
  return _enum_thorough.namedanonspaceTest3(*args)
namedanonspaceTest3 = _enum_thorough.namedanonspaceTest3

def namedanonspaceTest4(*args):
  return _enum_thorough.namedanonspaceTest4(*args)
namedanonspaceTest4 = _enum_thorough.namedanonspaceTest4

def scientistsTest1(*args):
  return _enum_thorough.scientistsTest1(*args)
scientistsTest1 = _enum_thorough.scientistsTest1

def scientistsTest2(*args):
  return _enum_thorough.scientistsTest2(*args)
scientistsTest2 = _enum_thorough.scientistsTest2

def scientistsTest3(*args):
  return _enum_thorough.scientistsTest3(*args)
scientistsTest3 = _enum_thorough.scientistsTest3

def scientistsTest4(*args):
  return _enum_thorough.scientistsTest4(*args)
scientistsTest4 = _enum_thorough.scientistsTest4

def scientistsTest5(*args):
  return _enum_thorough.scientistsTest5(*args)
scientistsTest5 = _enum_thorough.scientistsTest5

def scientistsTest6(*args):
  return _enum_thorough.scientistsTest6(*args)
scientistsTest6 = _enum_thorough.scientistsTest6

def scientistsTest7(*args):
  return _enum_thorough.scientistsTest7(*args)
scientistsTest7 = _enum_thorough.scientistsTest7

def scientistsTest8(*args):
  return _enum_thorough.scientistsTest8(*args)
scientistsTest8 = _enum_thorough.scientistsTest8

def scientistsNameTest1(*args):
  return _enum_thorough.scientistsNameTest1(*args)
scientistsNameTest1 = _enum_thorough.scientistsNameTest1

def scientistsNameTest2(*args):
  return _enum_thorough.scientistsNameTest2(*args)
scientistsNameTest2 = _enum_thorough.scientistsNameTest2

def scientistsNameTest3(*args):
  return _enum_thorough.scientistsNameTest3(*args)
scientistsNameTest3 = _enum_thorough.scientistsNameTest3

def scientistsNameTest4(*args):
  return _enum_thorough.scientistsNameTest4(*args)
scientistsNameTest4 = _enum_thorough.scientistsNameTest4

def scientistsNameTest5(*args):
  return _enum_thorough.scientistsNameTest5(*args)
scientistsNameTest5 = _enum_thorough.scientistsNameTest5

def scientistsNameTest6(*args):
  return _enum_thorough.scientistsNameTest6(*args)
scientistsNameTest6 = _enum_thorough.scientistsNameTest6

def scientistsNameTest7(*args):
  return _enum_thorough.scientistsNameTest7(*args)
scientistsNameTest7 = _enum_thorough.scientistsNameTest7

def scientistsNameSpaceTest1(*args):
  return _enum_thorough.scientistsNameSpaceTest1(*args)
scientistsNameSpaceTest1 = _enum_thorough.scientistsNameSpaceTest1

def scientistsNameSpaceTest2(*args):
  return _enum_thorough.scientistsNameSpaceTest2(*args)
scientistsNameSpaceTest2 = _enum_thorough.scientistsNameSpaceTest2

def scientistsNameSpaceTest3(*args):
  return _enum_thorough.scientistsNameSpaceTest3(*args)
scientistsNameSpaceTest3 = _enum_thorough.scientistsNameSpaceTest3

def scientistsNameSpaceTest4(*args):
  return _enum_thorough.scientistsNameSpaceTest4(*args)
scientistsNameSpaceTest4 = _enum_thorough.scientistsNameSpaceTest4

def scientistsNameSpaceTest5(*args):
  return _enum_thorough.scientistsNameSpaceTest5(*args)
scientistsNameSpaceTest5 = _enum_thorough.scientistsNameSpaceTest5

def scientistsNameSpaceTest6(*args):
  return _enum_thorough.scientistsNameSpaceTest6(*args)
scientistsNameSpaceTest6 = _enum_thorough.scientistsNameSpaceTest6

def scientistsNameSpaceTest7(*args):
  return _enum_thorough.scientistsNameSpaceTest7(*args)
scientistsNameSpaceTest7 = _enum_thorough.scientistsNameSpaceTest7

def scientistsNameSpaceTest8(*args):
  return _enum_thorough.scientistsNameSpaceTest8(*args)
scientistsNameSpaceTest8 = _enum_thorough.scientistsNameSpaceTest8

def scientistsNameSpaceTest9(*args):
  return _enum_thorough.scientistsNameSpaceTest9(*args)
scientistsNameSpaceTest9 = _enum_thorough.scientistsNameSpaceTest9

def scientistsNameSpaceTestA(*args):
  return _enum_thorough.scientistsNameSpaceTestA(*args)
scientistsNameSpaceTestA = _enum_thorough.scientistsNameSpaceTestA

def scientistsNameSpaceTestB(*args):
  return _enum_thorough.scientistsNameSpaceTestB(*args)
scientistsNameSpaceTestB = _enum_thorough.scientistsNameSpaceTestB

def scientistsNameSpaceTestC(*args):
  return _enum_thorough.scientistsNameSpaceTestC(*args)
scientistsNameSpaceTestC = _enum_thorough.scientistsNameSpaceTestC

def scientistsNameSpaceTestD(*args):
  return _enum_thorough.scientistsNameSpaceTestD(*args)
scientistsNameSpaceTestD = _enum_thorough.scientistsNameSpaceTestD

def scientistsNameSpaceTestE(*args):
  return _enum_thorough.scientistsNameSpaceTestE(*args)
scientistsNameSpaceTestE = _enum_thorough.scientistsNameSpaceTestE

def scientistsNameSpaceTestF(*args):
  return _enum_thorough.scientistsNameSpaceTestF(*args)
scientistsNameSpaceTestF = _enum_thorough.scientistsNameSpaceTestF

def scientistsNameSpaceTestG(*args):
  return _enum_thorough.scientistsNameSpaceTestG(*args)
scientistsNameSpaceTestG = _enum_thorough.scientistsNameSpaceTestG

def scientistsNameSpaceTestH(*args):
  return _enum_thorough.scientistsNameSpaceTestH(*args)
scientistsNameSpaceTestH = _enum_thorough.scientistsNameSpaceTestH

def scientistsNameSpaceTestI(*args):
  return _enum_thorough.scientistsNameSpaceTestI(*args)
scientistsNameSpaceTestI = _enum_thorough.scientistsNameSpaceTestI

def scientistsNameSpaceTestJ(*args):
  return _enum_thorough.scientistsNameSpaceTestJ(*args)
scientistsNameSpaceTestJ = _enum_thorough.scientistsNameSpaceTestJ

def scientistsNameSpaceTestK(*args):
  return _enum_thorough.scientistsNameSpaceTestK(*args)
scientistsNameSpaceTestK = _enum_thorough.scientistsNameSpaceTestK

def scientistsNameSpaceTestL(*args):
  return _enum_thorough.scientistsNameSpaceTestL(*args)
scientistsNameSpaceTestL = _enum_thorough.scientistsNameSpaceTestL
class TemplateClassInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TemplateClassInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TemplateClassInt, name)
    __repr__ = _swig_repr
    einstein = _enum_thorough.TemplateClassInt_einstein
    galileo = _enum_thorough.TemplateClassInt_galileo
    def scientistsTest1(self, *args): return _enum_thorough.TemplateClassInt_scientistsTest1(self, *args)
    def scientistsTest2(self, *args): return _enum_thorough.TemplateClassInt_scientistsTest2(self, *args)
    def scientistsTest3(self, *args): return _enum_thorough.TemplateClassInt_scientistsTest3(self, *args)
    def scientistsTest4(self, *args): return _enum_thorough.TemplateClassInt_scientistsTest4(self, *args)
    def scientistsTest5(self, *args): return _enum_thorough.TemplateClassInt_scientistsTest5(self, *args)
    def scientistsTest6(self, *args): return _enum_thorough.TemplateClassInt_scientistsTest6(self, *args)
    def scientistsTest7(self, *args): return _enum_thorough.TemplateClassInt_scientistsTest7(self, *args)
    def scientistsTest8(self, *args): return _enum_thorough.TemplateClassInt_scientistsTest8(self, *args)
    def scientistsTest9(self, *args): return _enum_thorough.TemplateClassInt_scientistsTest9(self, *args)
    def scientistsTestB(self, *args): return _enum_thorough.TemplateClassInt_scientistsTestB(self, *args)
    def scientistsTestD(self, *args): return _enum_thorough.TemplateClassInt_scientistsTestD(self, *args)
    def scientistsTestE(self, *args): return _enum_thorough.TemplateClassInt_scientistsTestE(self, *args)
    def scientistsTestF(self, *args): return _enum_thorough.TemplateClassInt_scientistsTestF(self, *args)
    def scientistsTestG(self, *args): return _enum_thorough.TemplateClassInt_scientistsTestG(self, *args)
    def scientistsTestH(self, *args): return _enum_thorough.TemplateClassInt_scientistsTestH(self, *args)
    def scientistsTestI(self, *args): return _enum_thorough.TemplateClassInt_scientistsTestI(self, *args)
    def scientistsTestJ(self, *args): return _enum_thorough.TemplateClassInt_scientistsTestJ(self, *args)
    def __init__(self): 
        this = _enum_thorough.new_TemplateClassInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enum_thorough.delete_TemplateClassInt
    __del__ = lambda self : None;
TemplateClassInt_swigregister = _enum_thorough.TemplateClassInt_swigregister
TemplateClassInt_swigregister(TemplateClassInt)

class TClassInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TClassInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TClassInt, name)
    __repr__ = _swig_repr
    faraday = _enum_thorough.TClassInt_faraday
    bell = _enum_thorough.TClassInt_bell
    def scientistsNameTest1(self, *args): return _enum_thorough.TClassInt_scientistsNameTest1(self, *args)
    def scientistsNameTest2(self, *args): return _enum_thorough.TClassInt_scientistsNameTest2(self, *args)
    def scientistsNameTest3(self, *args): return _enum_thorough.TClassInt_scientistsNameTest3(self, *args)
    def scientistsNameTest4(self, *args): return _enum_thorough.TClassInt_scientistsNameTest4(self, *args)
    def scientistsNameTest5(self, *args): return _enum_thorough.TClassInt_scientistsNameTest5(self, *args)
    def scientistsNameTest6(self, *args): return _enum_thorough.TClassInt_scientistsNameTest6(self, *args)
    def scientistsNameTest7(self, *args): return _enum_thorough.TClassInt_scientistsNameTest7(self, *args)
    def scientistsNameTest8(self, *args): return _enum_thorough.TClassInt_scientistsNameTest8(self, *args)
    def scientistsNameTest9(self, *args): return _enum_thorough.TClassInt_scientistsNameTest9(self, *args)
    def scientistsNameTestB(self, *args): return _enum_thorough.TClassInt_scientistsNameTestB(self, *args)
    def scientistsNameTestD(self, *args): return _enum_thorough.TClassInt_scientistsNameTestD(self, *args)
    def scientistsNameTestE(self, *args): return _enum_thorough.TClassInt_scientistsNameTestE(self, *args)
    def scientistsNameTestF(self, *args): return _enum_thorough.TClassInt_scientistsNameTestF(self, *args)
    def scientistsNameTestG(self, *args): return _enum_thorough.TClassInt_scientistsNameTestG(self, *args)
    def scientistsNameTestH(self, *args): return _enum_thorough.TClassInt_scientistsNameTestH(self, *args)
    def scientistsNameTestI(self, *args): return _enum_thorough.TClassInt_scientistsNameTestI(self, *args)
    def scientistsNameSpaceTest1(self, *args): return _enum_thorough.TClassInt_scientistsNameSpaceTest1(self, *args)
    def scientistsNameSpaceTest2(self, *args): return _enum_thorough.TClassInt_scientistsNameSpaceTest2(self, *args)
    def scientistsNameSpaceTest3(self, *args): return _enum_thorough.TClassInt_scientistsNameSpaceTest3(self, *args)
    def scientistsNameSpaceTest4(self, *args): return _enum_thorough.TClassInt_scientistsNameSpaceTest4(self, *args)
    def scientistsNameSpaceTest5(self, *args): return _enum_thorough.TClassInt_scientistsNameSpaceTest5(self, *args)
    def scientistsNameSpaceTest6(self, *args): return _enum_thorough.TClassInt_scientistsNameSpaceTest6(self, *args)
    def scientistsNameSpaceTest7(self, *args): return _enum_thorough.TClassInt_scientistsNameSpaceTest7(self, *args)
    def scientistsOtherTest1(self, *args): return _enum_thorough.TClassInt_scientistsOtherTest1(self, *args)
    def scientistsOtherTest2(self, *args): return _enum_thorough.TClassInt_scientistsOtherTest2(self, *args)
    def scientistsOtherTest3(self, *args): return _enum_thorough.TClassInt_scientistsOtherTest3(self, *args)
    def scientistsOtherTest4(self, *args): return _enum_thorough.TClassInt_scientistsOtherTest4(self, *args)
    def scientistsOtherTest5(self, *args): return _enum_thorough.TClassInt_scientistsOtherTest5(self, *args)
    def scientistsOtherTest6(self, *args): return _enum_thorough.TClassInt_scientistsOtherTest6(self, *args)
    def scientistsOtherTest7(self, *args): return _enum_thorough.TClassInt_scientistsOtherTest7(self, *args)
    def __init__(self): 
        this = _enum_thorough.new_TClassInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enum_thorough.delete_TClassInt
    __del__ = lambda self : None;
TClassInt_swigregister = _enum_thorough.TClassInt_swigregister
TClassInt_swigregister(TClassInt)

argh = _enum_thorough.argh
eek = _enum_thorough.eek

def renameTest1(*args):
  return _enum_thorough.renameTest1(*args)
renameTest1 = _enum_thorough.renameTest1

def renameTest2(*args):
  return _enum_thorough.renameTest2(*args)
renameTest2 = _enum_thorough.renameTest2
class NewNameStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewNameStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NewNameStruct, name)
    __repr__ = _swig_repr
    whizz = _enum_thorough.NewNameStruct_whizz
    bang = _enum_thorough.NewNameStruct_bang
    pop = _enum_thorough.NewNameStruct_pop
    def renameTest1(self, *args): return _enum_thorough.NewNameStruct_renameTest1(self, *args)
    def renameTest2(self, *args): return _enum_thorough.NewNameStruct_renameTest2(self, *args)
    simple1 = _enum_thorough.NewNameStruct_simple1
    doublename1 = _enum_thorough.NewNameStruct_doublename1
    singlename1 = _enum_thorough.NewNameStruct_singlename1
    def renameTest3(self, *args): return _enum_thorough.NewNameStruct_renameTest3(self, *args)
    def renameTest4(self, *args): return _enum_thorough.NewNameStruct_renameTest4(self, *args)
    def renameTest5(self, *args): return _enum_thorough.NewNameStruct_renameTest5(self, *args)
    def renameTest6(self, *args): return _enum_thorough.NewNameStruct_renameTest6(self, *args)
    def __init__(self): 
        this = _enum_thorough.new_NewNameStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enum_thorough.delete_NewNameStruct
    __del__ = lambda self : None;
NewNameStruct_swigregister = _enum_thorough.NewNameStruct_swigregister
NewNameStruct_swigregister(NewNameStruct)


def renameTest3(*args):
  return _enum_thorough.renameTest3(*args)
renameTest3 = _enum_thorough.renameTest3

def renameTest4(*args):
  return _enum_thorough.renameTest4(*args)
renameTest4 = _enum_thorough.renameTest4

def renameTest5(*args):
  return _enum_thorough.renameTest5(*args)
renameTest5 = _enum_thorough.renameTest5

def renameTest6(*args):
  return _enum_thorough.renameTest6(*args)
renameTest6 = _enum_thorough.renameTest6

def renameTest7(*args):
  return _enum_thorough.renameTest7(*args)
renameTest7 = _enum_thorough.renameTest7
class TreesClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreesClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreesClass, name)
    __repr__ = _swig_repr
    oak = _enum_thorough.TreesClass_oak
    fir = _enum_thorough.TreesClass_fir
    pine = _enum_thorough.TreesClass_pine
    def treesTest1(self, *args): return _enum_thorough.TreesClass_treesTest1(self, *args)
    def treesTest2(self, *args): return _enum_thorough.TreesClass_treesTest2(self, *args)
    def treesTest3(self, *args): return _enum_thorough.TreesClass_treesTest3(self, *args)
    def treesTest4(self, *args): return _enum_thorough.TreesClass_treesTest4(self, *args)
    def treesTest5(self, *args): return _enum_thorough.TreesClass_treesTest5(self, *args)
    def treesTest6(self, *args): return _enum_thorough.TreesClass_treesTest6(self, *args)
    def treesTest7(self, *args): return _enum_thorough.TreesClass_treesTest7(self, *args)
    def treesTest8(self, *args): return _enum_thorough.TreesClass_treesTest8(self, *args)
    def treesTest9(self, *args): return _enum_thorough.TreesClass_treesTest9(self, *args)
    def treesTestA(self, *args): return _enum_thorough.TreesClass_treesTestA(self, *args)
    def treesTestB(self, *args): return _enum_thorough.TreesClass_treesTestB(self, *args)
    def treesTestC(self, *args): return _enum_thorough.TreesClass_treesTestC(self, *args)
    def treesTestD(self, *args): return _enum_thorough.TreesClass_treesTestD(self, *args)
    def treesTestE(self, *args): return _enum_thorough.TreesClass_treesTestE(self, *args)
    def treesTestF(self, *args): return _enum_thorough.TreesClass_treesTestF(self, *args)
    def treesTestG(self, *args): return _enum_thorough.TreesClass_treesTestG(self, *args)
    def treesTestH(self, *args): return _enum_thorough.TreesClass_treesTestH(self, *args)
    def treesTestI(self, *args): return _enum_thorough.TreesClass_treesTestI(self, *args)
    def treesTestJ(self, *args): return _enum_thorough.TreesClass_treesTestJ(self, *args)
    def treesTestK(self, *args): return _enum_thorough.TreesClass_treesTestK(self, *args)
    def treesTestL(self, *args): return _enum_thorough.TreesClass_treesTestL(self, *args)
    def treesTestM(self, *args): return _enum_thorough.TreesClass_treesTestM(self, *args)
    def treesTestN(self, *args): return _enum_thorough.TreesClass_treesTestN(self, *args)
    def treesTestO(self, *args): return _enum_thorough.TreesClass_treesTestO(self, *args)
    def __init__(self): 
        this = _enum_thorough.new_TreesClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enum_thorough.delete_TreesClass
    __del__ = lambda self : None;
TreesClass_swigregister = _enum_thorough.TreesClass_swigregister
TreesClass_swigregister(TreesClass)


def treesTest1(*args):
  return _enum_thorough.treesTest1(*args)
treesTest1 = _enum_thorough.treesTest1

def treesTest2(*args):
  return _enum_thorough.treesTest2(*args)
treesTest2 = _enum_thorough.treesTest2

def treesTest3(*args):
  return _enum_thorough.treesTest3(*args)
treesTest3 = _enum_thorough.treesTest3

def treesTest4(*args):
  return _enum_thorough.treesTest4(*args)
treesTest4 = _enum_thorough.treesTest4

def treesTest5(*args):
  return _enum_thorough.treesTest5(*args)
treesTest5 = _enum_thorough.treesTest5

def treesTest6(*args):
  return _enum_thorough.treesTest6(*args)
treesTest6 = _enum_thorough.treesTest6

def treesTest7(*args):
  return _enum_thorough.treesTest7(*args)
treesTest7 = _enum_thorough.treesTest7

def treesTest8(*args):
  return _enum_thorough.treesTest8(*args)
treesTest8 = _enum_thorough.treesTest8

def treesTest9(*args):
  return _enum_thorough.treesTest9(*args)
treesTest9 = _enum_thorough.treesTest9

def treesTestA(*args):
  return _enum_thorough.treesTestA(*args)
treesTestA = _enum_thorough.treesTestA

def treesTestB(*args):
  return _enum_thorough.treesTestB(*args)
treesTestB = _enum_thorough.treesTestB

def treesTestC(*args):
  return _enum_thorough.treesTestC(*args)
treesTestC = _enum_thorough.treesTestC

def treesTestD(*args):
  return _enum_thorough.treesTestD(*args)
treesTestD = _enum_thorough.treesTestD

def treesTestE(*args):
  return _enum_thorough.treesTestE(*args)
treesTestE = _enum_thorough.treesTestE

def treesTestF(*args):
  return _enum_thorough.treesTestF(*args)
treesTestF = _enum_thorough.treesTestF

def treesTestG(*args):
  return _enum_thorough.treesTestG(*args)
treesTestG = _enum_thorough.treesTestG

def treesTestH(*args):
  return _enum_thorough.treesTestH(*args)
treesTestH = _enum_thorough.treesTestH

def treesTestI(*args):
  return _enum_thorough.treesTestI(*args)
treesTestI = _enum_thorough.treesTestI

def treesTestJ(*args):
  return _enum_thorough.treesTestJ(*args)
treesTestJ = _enum_thorough.treesTestJ

def treesTestK(*args):
  return _enum_thorough.treesTestK(*args)
treesTestK = _enum_thorough.treesTestK

def treesTestL(*args):
  return _enum_thorough.treesTestL(*args)
treesTestL = _enum_thorough.treesTestL

def treesTestM(*args):
  return _enum_thorough.treesTestM(*args)
treesTestM = _enum_thorough.treesTestM

def treesTestO(*args):
  return _enum_thorough.treesTestO(*args)
treesTestO = _enum_thorough.treesTestO

def treesTestP(*args):
  return _enum_thorough.treesTestP(*args)
treesTestP = _enum_thorough.treesTestP

def treesTestQ(*args):
  return _enum_thorough.treesTestQ(*args)
treesTestQ = _enum_thorough.treesTestQ

def treesTestR(*args):
  return _enum_thorough.treesTestR(*args)
treesTestR = _enum_thorough.treesTestR
class HairStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HairStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HairStruct, name)
    __repr__ = _swig_repr
    blonde = _enum_thorough.HairStruct_blonde
    ginger = _enum_thorough.HairStruct_ginger
    def hairTest1(self, *args): return _enum_thorough.HairStruct_hairTest1(self, *args)
    def hairTest2(self, *args): return _enum_thorough.HairStruct_hairTest2(self, *args)
    def hairTest3(self, *args): return _enum_thorough.HairStruct_hairTest3(self, *args)
    def hairTest4(self, *args): return _enum_thorough.HairStruct_hairTest4(self, *args)
    def hairTest5(self, *args): return _enum_thorough.HairStruct_hairTest5(self, *args)
    def hairTest6(self, *args): return _enum_thorough.HairStruct_hairTest6(self, *args)
    def hairTest7(self, *args): return _enum_thorough.HairStruct_hairTest7(self, *args)
    def hairTest8(self, *args): return _enum_thorough.HairStruct_hairTest8(self, *args)
    def hairTest9(self, *args): return _enum_thorough.HairStruct_hairTest9(self, *args)
    def hairTestA(self, *args): return _enum_thorough.HairStruct_hairTestA(self, *args)
    def hairTestB(self, *args): return _enum_thorough.HairStruct_hairTestB(self, *args)
    def colourTest1(self, *args): return _enum_thorough.HairStruct_colourTest1(self, *args)
    def colourTest2(self, *args): return _enum_thorough.HairStruct_colourTest2(self, *args)
    def namedanonTest1(self, *args): return _enum_thorough.HairStruct_namedanonTest1(self, *args)
    def namedanonspaceTest1(self, *args): return _enum_thorough.HairStruct_namedanonspaceTest1(self, *args)
    def treesGlobalTest1(self, *args): return _enum_thorough.HairStruct_treesGlobalTest1(self, *args)
    def treesGlobalTest2(self, *args): return _enum_thorough.HairStruct_treesGlobalTest2(self, *args)
    def treesGlobalTest3(self, *args): return _enum_thorough.HairStruct_treesGlobalTest3(self, *args)
    def treesGlobalTest4(self, *args): return _enum_thorough.HairStruct_treesGlobalTest4(self, *args)
    def treesGlobalTest5(self, *args): return _enum_thorough.HairStruct_treesGlobalTest5(self, *args)
    def __init__(self): 
        this = _enum_thorough.new_HairStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enum_thorough.delete_HairStruct
    __del__ = lambda self : None;
HairStruct_swigregister = _enum_thorough.HairStruct_swigregister
HairStruct_swigregister(HairStruct)


def hairTest1(*args):
  return _enum_thorough.hairTest1(*args)
hairTest1 = _enum_thorough.hairTest1

def hairTest2(*args):
  return _enum_thorough.hairTest2(*args)
hairTest2 = _enum_thorough.hairTest2

def hairTest3(*args):
  return _enum_thorough.hairTest3(*args)
hairTest3 = _enum_thorough.hairTest3

def hairTest4(*args):
  return _enum_thorough.hairTest4(*args)
hairTest4 = _enum_thorough.hairTest4

def hairTest5(*args):
  return _enum_thorough.hairTest5(*args)
hairTest5 = _enum_thorough.hairTest5

def hairTest6(*args):
  return _enum_thorough.hairTest6(*args)
hairTest6 = _enum_thorough.hairTest6

def hairTest7(*args):
  return _enum_thorough.hairTest7(*args)
hairTest7 = _enum_thorough.hairTest7

def hairTest8(*args):
  return _enum_thorough.hairTest8(*args)
hairTest8 = _enum_thorough.hairTest8

def hairTest9(*args):
  return _enum_thorough.hairTest9(*args)
hairTest9 = _enum_thorough.hairTest9

def hairTestA(*args):
  return _enum_thorough.hairTestA(*args)
hairTestA = _enum_thorough.hairTestA

def hairTestB(*args):
  return _enum_thorough.hairTestB(*args)
hairTestB = _enum_thorough.hairTestB

def hairTestC(*args):
  return _enum_thorough.hairTestC(*args)
hairTestC = _enum_thorough.hairTestC

def hairTestA1(*args):
  return _enum_thorough.hairTestA1(*args)
hairTestA1 = _enum_thorough.hairTestA1

def hairTestA2(*args):
  return _enum_thorough.hairTestA2(*args)
hairTestA2 = _enum_thorough.hairTestA2

def hairTestA3(*args):
  return _enum_thorough.hairTestA3(*args)
hairTestA3 = _enum_thorough.hairTestA3

def hairTestA4(*args):
  return _enum_thorough.hairTestA4(*args)
hairTestA4 = _enum_thorough.hairTestA4

def hairTestA5(*args):
  return _enum_thorough.hairTestA5(*args)
hairTestA5 = _enum_thorough.hairTestA5

def hairTestA6(*args):
  return _enum_thorough.hairTestA6(*args)
hairTestA6 = _enum_thorough.hairTestA6

def hairTestA7(*args):
  return _enum_thorough.hairTestA7(*args)
hairTestA7 = _enum_thorough.hairTestA7

def hairTestA8(*args):
  return _enum_thorough.hairTestA8(*args)
hairTestA8 = _enum_thorough.hairTestA8

def hairTestA9(*args):
  return _enum_thorough.hairTestA9(*args)
hairTestA9 = _enum_thorough.hairTestA9

def hairTestAA(*args):
  return _enum_thorough.hairTestAA(*args)
hairTestAA = _enum_thorough.hairTestAA

def hairTestAB(*args):
  return _enum_thorough.hairTestAB(*args)
hairTestAB = _enum_thorough.hairTestAB

def hairTestAC(*args):
  return _enum_thorough.hairTestAC(*args)
hairTestAC = _enum_thorough.hairTestAC

def hairTestB1(*args):
  return _enum_thorough.hairTestB1(*args)
hairTestB1 = _enum_thorough.hairTestB1

def hairTestB2(*args):
  return _enum_thorough.hairTestB2(*args)
hairTestB2 = _enum_thorough.hairTestB2

def hairTestB3(*args):
  return _enum_thorough.hairTestB3(*args)
hairTestB3 = _enum_thorough.hairTestB3

def hairTestB4(*args):
  return _enum_thorough.hairTestB4(*args)
hairTestB4 = _enum_thorough.hairTestB4

def hairTestB5(*args):
  return _enum_thorough.hairTestB5(*args)
hairTestB5 = _enum_thorough.hairTestB5

def hairTestB6(*args):
  return _enum_thorough.hairTestB6(*args)
hairTestB6 = _enum_thorough.hairTestB6

def hairTestB7(*args):
  return _enum_thorough.hairTestB7(*args)
hairTestB7 = _enum_thorough.hairTestB7

def hairTestB8(*args):
  return _enum_thorough.hairTestB8(*args)
hairTestB8 = _enum_thorough.hairTestB8

def hairTestB9(*args):
  return _enum_thorough.hairTestB9(*args)
hairTestB9 = _enum_thorough.hairTestB9

def hairTestBA(*args):
  return _enum_thorough.hairTestBA(*args)
hairTestBA = _enum_thorough.hairTestBA

def hairTestBB(*args):
  return _enum_thorough.hairTestBB(*args)
hairTestBB = _enum_thorough.hairTestBB

def hairTestBC(*args):
  return _enum_thorough.hairTestBC(*args)
hairTestBC = _enum_thorough.hairTestBC

def hairTestC1(*args):
  return _enum_thorough.hairTestC1(*args)
hairTestC1 = _enum_thorough.hairTestC1

def hairTestC2(*args):
  return _enum_thorough.hairTestC2(*args)
hairTestC2 = _enum_thorough.hairTestC2

def hairTestC3(*args):
  return _enum_thorough.hairTestC3(*args)
hairTestC3 = _enum_thorough.hairTestC3

def hairTestC4(*args):
  return _enum_thorough.hairTestC4(*args)
hairTestC4 = _enum_thorough.hairTestC4

def hairTestC5(*args):
  return _enum_thorough.hairTestC5(*args)
hairTestC5 = _enum_thorough.hairTestC5

def hairTestC6(*args):
  return _enum_thorough.hairTestC6(*args)
hairTestC6 = _enum_thorough.hairTestC6

def hairTestC7(*args):
  return _enum_thorough.hairTestC7(*args)
hairTestC7 = _enum_thorough.hairTestC7

def hairTestC8(*args):
  return _enum_thorough.hairTestC8(*args)
hairTestC8 = _enum_thorough.hairTestC8

def hairTestC9(*args):
  return _enum_thorough.hairTestC9(*args)
hairTestC9 = _enum_thorough.hairTestC9

def hairTestCA(*args):
  return _enum_thorough.hairTestCA(*args)
hairTestCA = _enum_thorough.hairTestCA

def hairTestCB(*args):
  return _enum_thorough.hairTestCB(*args)
hairTestCB = _enum_thorough.hairTestCB

def hairTestCC(*args):
  return _enum_thorough.hairTestCC(*args)
hairTestCC = _enum_thorough.hairTestCC
class FirStruct(HairStruct):
    __swig_setmethods__ = {}
    for _s in [HairStruct]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirStruct, name, value)
    __swig_getmethods__ = {}
    for _s in [HairStruct]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FirStruct, name)
    __repr__ = _swig_repr
    def hairTestFir1(self, *args): return _enum_thorough.FirStruct_hairTestFir1(self, *args)
    def hairTestFir2(self, *args): return _enum_thorough.FirStruct_hairTestFir2(self, *args)
    def hairTestFir3(self, *args): return _enum_thorough.FirStruct_hairTestFir3(self, *args)
    def hairTestFir4(self, *args): return _enum_thorough.FirStruct_hairTestFir4(self, *args)
    def hairTestFir5(self, *args): return _enum_thorough.FirStruct_hairTestFir5(self, *args)
    def hairTestFir6(self, *args): return _enum_thorough.FirStruct_hairTestFir6(self, *args)
    def hairTestFir7(self, *args): return _enum_thorough.FirStruct_hairTestFir7(self, *args)
    def hairTestFir8(self, *args): return _enum_thorough.FirStruct_hairTestFir8(self, *args)
    def hairTestFir9(self, *args): return _enum_thorough.FirStruct_hairTestFir9(self, *args)
    def hairTestFirA(self, *args): return _enum_thorough.FirStruct_hairTestFirA(self, *args)
    def hairTestFirB(self, *args): return _enum_thorough.FirStruct_hairTestFirB(self, *args)
    def __init__(self): 
        this = _enum_thorough.new_FirStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enum_thorough.delete_FirStruct
    __del__ = lambda self : None;
FirStruct_swigregister = _enum_thorough.FirStruct_swigregister
FirStruct_swigregister(FirStruct)

class Obscure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Obscure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Obscure, name)
    __repr__ = _swig_repr
    one = _enum_thorough.Obscure_one
    two = _enum_thorough.Obscure_two
    twoagain = _enum_thorough.Obscure_twoagain
    def __init__(self): 
        this = _enum_thorough.new_Obscure()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enum_thorough.delete_Obscure
    __del__ = lambda self : None;
Obscure_swigregister = _enum_thorough.Obscure_swigregister
Obscure_swigregister(Obscure)

globalinstance1 = _enum_thorough.globalinstance1
globalinstance2 = _enum_thorough.globalinstance2
globalinstance3 = _enum_thorough.globalinstance3
class Instances(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instances, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Instances, name)
    __repr__ = _swig_repr
    memberinstance1 = _enum_thorough.Instances_memberinstance1
    memberinstance2 = _enum_thorough.Instances_memberinstance2
    memberinstance3 = _enum_thorough.Instances_memberinstance3
    __swig_setmethods__["MemberInstance"] = _enum_thorough.Instances_MemberInstance_set
    __swig_getmethods__["MemberInstance"] = _enum_thorough.Instances_MemberInstance_get
    if _newclass:MemberInstance = _swig_property(_enum_thorough.Instances_MemberInstance_get, _enum_thorough.Instances_MemberInstance_set)
    def __init__(self): 
        this = _enum_thorough.new_Instances()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enum_thorough.delete_Instances
    __del__ = lambda self : None;
Instances_swigregister = _enum_thorough.Instances_swigregister
Instances_swigregister(Instances)

class IgnoreTest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IgnoreTest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IgnoreTest, name)
    __repr__ = _swig_repr
    ignoreA_zero = _enum_thorough.IgnoreTest_ignoreA_zero
    ignoreA_three = _enum_thorough.IgnoreTest_ignoreA_three
    ignoreA_ten = _enum_thorough.IgnoreTest_ignoreA_ten
    ignoreA_eleven = _enum_thorough.IgnoreTest_ignoreA_eleven
    ignoreA_thirteen = _enum_thorough.IgnoreTest_ignoreA_thirteen
    ignoreA_fourteen = _enum_thorough.IgnoreTest_ignoreA_fourteen
    ignoreA_twenty = _enum_thorough.IgnoreTest_ignoreA_twenty
    ignoreA_thirty = _enum_thorough.IgnoreTest_ignoreA_thirty
    ignoreA_thirty_two = _enum_thorough.IgnoreTest_ignoreA_thirty_two
    ignoreA_thirty_three = _enum_thorough.IgnoreTest_ignoreA_thirty_three
    ignoreB_eleven = _enum_thorough.IgnoreTest_ignoreB_eleven
    ignoreB_twelve = _enum_thorough.IgnoreTest_ignoreB_twelve
    ignoreB_thirty_one = _enum_thorough.IgnoreTest_ignoreB_thirty_one
    ignoreB_thirty_two = _enum_thorough.IgnoreTest_ignoreB_thirty_two
    ignoreB_forty_one = _enum_thorough.IgnoreTest_ignoreB_forty_one
    ignoreB_forty_two = _enum_thorough.IgnoreTest_ignoreB_forty_two
    ignoreC_ten = _enum_thorough.IgnoreTest_ignoreC_ten
    ignoreC_twelve = _enum_thorough.IgnoreTest_ignoreC_twelve
    ignoreC_twenty = _enum_thorough.IgnoreTest_ignoreC_twenty
    ignoreC_thirty = _enum_thorough.IgnoreTest_ignoreC_thirty
    ignoreC_thirty_two = _enum_thorough.IgnoreTest_ignoreC_thirty_two
    ignoreC_forty = _enum_thorough.IgnoreTest_ignoreC_forty
    ignoreC_forty_two = _enum_thorough.IgnoreTest_ignoreC_forty_two
    ignoreD_twenty_one = _enum_thorough.IgnoreTest_ignoreD_twenty_one
    ignoreD_twenty_two = _enum_thorough.IgnoreTest_ignoreD_twenty_two
    ignoreE_zero = _enum_thorough.IgnoreTest_ignoreE_zero
    ignoreE_twenty_one = _enum_thorough.IgnoreTest_ignoreE_twenty_one
    ignoreE_twenty_two = _enum_thorough.IgnoreTest_ignoreE_twenty_two
    def __init__(self): 
        this = _enum_thorough.new_IgnoreTest()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enum_thorough.delete_IgnoreTest
    __del__ = lambda self : None;
IgnoreTest_swigregister = _enum_thorough.IgnoreTest_swigregister
IgnoreTest_swigregister(IgnoreTest)


def ignoreATest(*args):
  return _enum_thorough.ignoreATest(*args)
ignoreATest = _enum_thorough.ignoreATest

def ignoreBTest(*args):
  return _enum_thorough.ignoreBTest(*args)
ignoreBTest = _enum_thorough.ignoreBTest

def ignoreCTest(*args):
  return _enum_thorough.ignoreCTest(*args)
ignoreCTest = _enum_thorough.ignoreCTest

def ignoreDTest(*args):
  return _enum_thorough.ignoreDTest(*args)
ignoreDTest = _enum_thorough.ignoreDTest

def ignoreETest(*args):
  return _enum_thorough.ignoreETest(*args)
ignoreETest = _enum_thorough.ignoreETest
one = _enum_thorough.one
initial = _enum_thorough.initial
two = _enum_thorough.two
three = _enum_thorough.three
llast = _enum_thorough.llast
end = _enum_thorough.end

def repeatTest(*args):
  return _enum_thorough.repeatTest(*args)
repeatTest = _enum_thorough.repeatTest
typeint = _enum_thorough.typeint
typeboolfalse = _enum_thorough.typeboolfalse
typebooltrue = _enum_thorough.typebooltrue
typebooltwo = _enum_thorough.typebooltwo
typechar = _enum_thorough.typechar
typedefaultint = _enum_thorough.typedefaultint

def differentTypesTest(*args):
  return _enum_thorough.differentTypesTest(*args)
differentTypesTest = _enum_thorough.differentTypesTest
global_typeint = _enum_thorough.global_typeint
global_typeboolfalse = _enum_thorough.global_typeboolfalse
global_typebooltrue = _enum_thorough.global_typebooltrue
global_typebooltwo = _enum_thorough.global_typebooltwo
global_typechar = _enum_thorough.global_typechar
global_typedefaultint = _enum_thorough.global_typedefaultint

def globalDifferentTypesTest(*args):
  return _enum_thorough.globalDifferentTypesTest(*args)
globalDifferentTypesTest = _enum_thorough.globalDifferentTypesTest
typeint_noconst = _enum_thorough.typeint_noconst
typeboolfalse_noconst = _enum_thorough.typeboolfalse_noconst
typebooltrue_noconst = _enum_thorough.typebooltrue_noconst
typebooltwo_noconst = _enum_thorough.typebooltwo_noconst
typechar_noconst = _enum_thorough.typechar_noconst
typedefaultint_noconst = _enum_thorough.typedefaultint_noconst
global_typeint_noconst = _enum_thorough.global_typeint_noconst
global_typeboolfalse_noconst = _enum_thorough.global_typeboolfalse_noconst
global_typebooltrue_noconst = _enum_thorough.global_typebooltrue_noconst
global_typebooltwo_noconst = _enum_thorough.global_typebooltwo_noconst
global_typechar_noconst = _enum_thorough.global_typechar_noconst
global_typedefaultint_noconst = _enum_thorough.global_typedefaultint_noconst
# This file is compatible with both classic and new-style classes.


