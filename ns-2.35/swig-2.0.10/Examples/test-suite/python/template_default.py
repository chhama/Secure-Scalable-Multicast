# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_template_default', [dirname(__file__)])
        except ImportError:
            import _template_default
            return _template_default
        if fp is not None:
            try:
                _mod = imp.load_module('_template_default', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _template_default = swig_import_helper()
    del swig_import_helper
else:
    import _template_default
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Parm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parm, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_default.new_Parm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default.delete_Parm
    __del__ = lambda self : None;
Parm_swigregister = _template_default.Parm_swigregister
Parm_swigregister(Parm)

class A_p(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A_p, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A_p, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_default.new_A_p()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default.delete_A_p
    __del__ = lambda self : None;
A_p_swigregister = _template_default.A_p_swigregister
A_p_swigregister(A_p)
cvar = _template_default.cvar
one = cvar.one
two = cvar.two

class N_1p(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, N_1p, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, N_1p, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_default.new_N_1p()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default.delete_N_1p
    __del__ = lambda self : None;
N_1p_swigregister = _template_default.N_1p_swigregister
N_1p_swigregister(N_1p)

class A_ii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A_ii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A_ii, name)
    __repr__ = _swig_repr
    def bar(self): return _template_default.A_ii_bar(self)
    def __init__(self): 
        this = _template_default.new_A_ii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default.delete_A_ii
    __del__ = lambda self : None;
A_ii_swigregister = _template_default.A_ii_swigregister
A_ii_swigregister(A_ii)

class A_d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A_d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A_d, name)
    __repr__ = _swig_repr
    def bar(self): return _template_default.A_d_bar(self)
    def __init__(self): 
        this = _template_default.new_A_d()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default.delete_A_d
    __del__ = lambda self : None;
A_d_swigregister = _template_default.A_d_swigregister
A_d_swigregister(A_d)

class N_d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, N_d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, N_d, name)
    __repr__ = _swig_repr
    def bar(self): return _template_default.N_d_bar(self)
    def __init__(self): 
        this = _template_default.new_N_d()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default.delete_N_d
    __del__ = lambda self : None;
N_d_swigregister = _template_default.N_d_swigregister
N_d_swigregister(N_d)

class B(A_ii):
    __swig_setmethods__ = {}
    for _s in [A_ii]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    for _s in [A_ii]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_default.new_B()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default.delete_B
    __del__ = lambda self : None;
B_swigregister = _template_default.B_swigregister
B_swigregister(B)

class C(N_d):
    __swig_setmethods__ = {}
    for _s in [N_d]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, C, name, value)
    __swig_getmethods__ = {}
    for _s in [N_d]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, C, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_default.new_C()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default.delete_C
    __del__ = lambda self : None;
C_swigregister = _template_default.C_swigregister
C_swigregister(C)


def get_a1(*args):
  return _template_default.get_a1(*args)
get_a1 = _template_default.get_a1

def get_a2(*args):
  return _template_default.get_a2(*args)
get_a2 = _template_default.get_a2
class Traits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Traits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Traits, name)
    __repr__ = _swig_repr
    c = _template_default.Traits_c
    def __init__(self): 
        this = _template_default.new_Traits()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default.delete_Traits
    __del__ = lambda self : None;
Traits_swigregister = _template_default.Traits_swigregister
Traits_swigregister(Traits)

class Doo(N_d):
    __swig_setmethods__ = {}
    for _s in [N_d]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Doo, name, value)
    __swig_getmethods__ = {}
    for _s in [N_d]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Doo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_default.new_Doo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default.delete_Doo
    __del__ = lambda self : None;
Doo_swigregister = _template_default.Doo_swigregister
Doo_swigregister(Doo)

class Boo(Doo):
    __swig_setmethods__ = {}
    for _s in [Doo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Boo, name, value)
    __swig_getmethods__ = {}
    for _s in [Doo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Boo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_default.new_Boo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default.delete_Boo
    __del__ = lambda self : None;
Boo_swigregister = _template_default.Boo_swigregister
Boo_swigregister(Boo)

class Der(Boo):
    __swig_setmethods__ = {}
    for _s in [Boo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Der, name, value)
    __swig_getmethods__ = {}
    for _s in [Boo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Der, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_default.new_Der()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default.delete_Der
    __del__ = lambda self : None;
Der_swigregister = _template_default.Der_swigregister
Der_swigregister(Der)

class CFoo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFoo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFoo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_default.new_CFoo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_default.delete_CFoo
    __del__ = lambda self : None;
CFoo_swigregister = _template_default.CFoo_swigregister
CFoo_swigregister(CFoo)


def foo(*args):
  return _template_default.foo(*args)
foo = _template_default.foo
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _template_default.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _template_default.SwigPyIterator_value(self)
    def incr(self, n=1): return _template_default.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _template_default.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _template_default.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _template_default.SwigPyIterator_equal(self, *args)
    def copy(self): return _template_default.SwigPyIterator_copy(self)
    def next(self): return _template_default.SwigPyIterator_next(self)
    def __next__(self): return _template_default.SwigPyIterator___next__(self)
    def previous(self): return _template_default.SwigPyIterator_previous(self)
    def advance(self, *args): return _template_default.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _template_default.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _template_default.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _template_default.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _template_default.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _template_default.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _template_default.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _template_default.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def g(s=None):
  return _template_default.g(s)
g = _template_default.g

def q(arg1=0):
  return _template_default.q(arg1)
q = _template_default.q
Bf = _template_default.Bf
Cf = _template_default.Cf
# This file is compatible with both classic and new-style classes.


