# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_using_private', [dirname(__file__)])
        except ImportError:
            import _using_private
            return _using_private
        if fp is not None:
            try:
                _mod = imp.load_module('_using_private', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _using_private = swig_import_helper()
    del swig_import_helper
else:
    import _using_private
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _using_private.delete_Foo
    __del__ = lambda self : None;
    __swig_setmethods__["x"] = _using_private.Foo_x_set
    __swig_getmethods__["x"] = _using_private.Foo_x_get
    if _newclass:x = _swig_property(_using_private.Foo_x_get, _using_private.Foo_x_set)
    def blah(self, *args): return _using_private.Foo_blah(self, *args)
    def defaulted(self, *args): return _using_private.Foo_defaulted(self, *args)
    def virtualmethod(self): return _using_private.Foo_virtualmethod(self)
    def anothervirtual(self): return _using_private.Foo_anothervirtual(self)
    def __init__(self): 
        this = _using_private.new_Foo()
        try: self.this.append(this)
        except: self.this = this
Foo_swigregister = _using_private.Foo_swigregister
Foo_swigregister(Foo)

class FooBar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FooBar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FooBar, name)
    __repr__ = _swig_repr
    def blah(self, *args): return _using_private.FooBar_blah(self, *args)
    __swig_setmethods__["x"] = _using_private.FooBar_x_set
    __swig_getmethods__["x"] = _using_private.FooBar_x_get
    if _newclass:x = _swig_property(_using_private.FooBar_x_get, _using_private.FooBar_x_set)
    def defaulted(self, *args): return _using_private.FooBar_defaulted(self, *args)
    def virtualmethod(self): return _using_private.FooBar_virtualmethod(self)
    def anothervirtual(self): return _using_private.FooBar_anothervirtual(self)
    __swig_destroy__ = _using_private.delete_FooBar
    __del__ = lambda self : None;
    def __init__(self): 
        this = _using_private.new_FooBar()
        try: self.this.append(this)
        except: self.this = this
FooBar_swigregister = _using_private.FooBar_swigregister
FooBar_swigregister(FooBar)

# This file is compatible with both classic and new-style classes.


