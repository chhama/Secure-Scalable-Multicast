# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_types_directive', [dirname(__file__)])
        except ImportError:
            import _types_directive
            return _types_directive
        if fp is not None:
            try:
                _mod = imp.load_module('_types_directive', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _types_directive = swig_import_helper()
    del swig_import_helper
else:
    import _types_directive
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Date(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Date, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Date, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _types_directive.new_Date(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["year"] = _types_directive.Date_year_set
    __swig_getmethods__["year"] = _types_directive.Date_year_get
    if _newclass:year = _swig_property(_types_directive.Date_year_get, _types_directive.Date_year_set)
    __swig_setmethods__["month"] = _types_directive.Date_month_set
    __swig_getmethods__["month"] = _types_directive.Date_month_get
    if _newclass:month = _swig_property(_types_directive.Date_month_get, _types_directive.Date_month_set)
    __swig_setmethods__["day"] = _types_directive.Date_day_set
    __swig_getmethods__["day"] = _types_directive.Date_day_get
    if _newclass:day = _swig_property(_types_directive.Date_day_get, _types_directive.Date_day_set)
    __swig_destroy__ = _types_directive.delete_Date
    __del__ = lambda self : None;
Date_swigregister = _types_directive.Date_swigregister
Date_swigregister(Date)

class Time1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Time1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Time1, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _types_directive.new_Time1(*args)
        try: self.this.append(this)
        except: self.this = this
    def dateFromTime(self): return _types_directive.Time1_dateFromTime(self)
    __swig_setmethods__["date"] = _types_directive.Time1_date_set
    __swig_getmethods__["date"] = _types_directive.Time1_date_get
    if _newclass:date = _swig_property(_types_directive.Time1_date_get, _types_directive.Time1_date_set)
    __swig_setmethods__["seconds"] = _types_directive.Time1_seconds_set
    __swig_getmethods__["seconds"] = _types_directive.Time1_seconds_get
    if _newclass:seconds = _swig_property(_types_directive.Time1_seconds_get, _types_directive.Time1_seconds_set)
    __swig_destroy__ = _types_directive.delete_Time1
    __del__ = lambda self : None;
Time1_swigregister = _types_directive.Time1_swigregister
Time1_swigregister(Time1)

class Time2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Time2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Time2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _types_directive.new_Time2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["date"] = _types_directive.Time2_date_set
    __swig_getmethods__["date"] = _types_directive.Time2_date_get
    if _newclass:date = _swig_property(_types_directive.Time2_date_get, _types_directive.Time2_date_set)
    __swig_setmethods__["seconds"] = _types_directive.Time2_seconds_set
    __swig_getmethods__["seconds"] = _types_directive.Time2_seconds_get
    if _newclass:seconds = _swig_property(_types_directive.Time2_seconds_get, _types_directive.Time2_seconds_set)
    __swig_destroy__ = _types_directive.delete_Time2
    __del__ = lambda self : None;
Time2_swigregister = _types_directive.Time2_swigregister
Time2_swigregister(Time2)


def add(*args):
  return _types_directive.add(*args)
add = _types_directive.add
# This file is compatible with both classic and new-style classes.


