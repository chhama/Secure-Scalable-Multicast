# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_operator_overload', [dirname(__file__)])
        except ImportError:
            import _operator_overload
            return _operator_overload
        if fp is not None:
            try:
                _mod = imp.load_module('_operator_overload', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _operator_overload = swig_import_helper()
    del swig_import_helper
else:
    import _operator_overload
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Op(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Op, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Op, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _operator_overload.Op_i_set
    __swig_getmethods__["i"] = _operator_overload.Op_i_get
    if _newclass:i = _swig_property(_operator_overload.Op_i_get, _operator_overload.Op_i_set)
    def __init__(self, *args): 
        this = _operator_overload.new_Op(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _operator_overload.delete_Op
    __del__ = lambda self : None;
    def __iadd__(self, *args): return _operator_overload.Op___iadd__(self, *args)
    def __isub__(self, *args): return _operator_overload.Op___isub__(self, *args)
    def __imul__(self, *args): return _operator_overload.Op___imul__(self, *args)
    def __idiv__(self, *args): return _operator_overload.Op___idiv__(self, *args)
    def __imod__(self, *args): return _operator_overload.Op___imod__(self, *args)
    def __neg__(self): return _operator_overload.Op___neg__(self)
    def Not(self): return _operator_overload.Op_Not(self)
    def IndexInto(self, *args): return _operator_overload.Op_IndexInto(self, *args)
    def __call__(self, *args): return _operator_overload.Op___call__(self, *args)
    def DoubleCast(self): return _operator_overload.Op_DoubleCast(self)
    def IntCast(self): return _operator_overload.Op_IntCast(self)
    __swig_getmethods__["sanity_check"] = lambda x: _operator_overload.Op_sanity_check
    if _newclass:sanity_check = staticmethod(_operator_overload.Op_sanity_check)
    def And(self, *args): return _operator_overload.Op_And(self, *args)
    def Or(self, *args): return _operator_overload.Op_Or(self, *args)
    def __add__(self, *args): return _operator_overload.Op___add__(self, *args)
    def __sub__(self, *args): return _operator_overload.Op___sub__(self, *args)
    def __mul__(self, *args): return _operator_overload.Op___mul__(self, *args)
    def __div__(self, *args): return _operator_overload.Op___div__(self, *args)
    def __mod__(self, *args): return _operator_overload.Op___mod__(self, *args)
    def __eq__(self, *args): return _operator_overload.Op___eq__(self, *args)
    def __ne__(self, *args): return _operator_overload.Op___ne__(self, *args)
    def __lt__(self, *args): return _operator_overload.Op___lt__(self, *args)
    def __le__(self, *args): return _operator_overload.Op___le__(self, *args)
    def __gt__(self, *args): return _operator_overload.Op___gt__(self, *args)
    def __ge__(self, *args): return _operator_overload.Op___ge__(self, *args)
    def __rsub__(self, *args): return _operator_overload.Op___rsub__(self, *args)
    def __str__(self): return _operator_overload.Op___str__(self)
    def __getitem__(self, *args): return _operator_overload.Op___getitem__(self, *args)
    def __setitem__(self, *args): return _operator_overload.Op___setitem__(self, *args)
Op_swigregister = _operator_overload.Op_swigregister
Op_swigregister(Op)

def And(*args):
  return _operator_overload.And(*args)
And = _operator_overload.And

def Or(*args):
  return _operator_overload.Or(*args)
Or = _operator_overload.Or

def Plus(*args):
  return _operator_overload.Plus(*args)
Plus = _operator_overload.Plus

def Minus(*args):
  return _operator_overload.Minus(*args)
Minus = _operator_overload.Minus

def Multiply(*args):
  return _operator_overload.Multiply(*args)
Multiply = _operator_overload.Multiply

def Divide(*args):
  return _operator_overload.Divide(*args)
Divide = _operator_overload.Divide

def Percent(*args):
  return _operator_overload.Percent(*args)
Percent = _operator_overload.Percent

def Op_sanity_check():
  return _operator_overload.Op_sanity_check()
Op_sanity_check = _operator_overload.Op_sanity_check


def EqualEqual(*args):
  return _operator_overload.EqualEqual(*args)
EqualEqual = _operator_overload.EqualEqual

def NotEqual(*args):
  return _operator_overload.NotEqual(*args)
NotEqual = _operator_overload.NotEqual

def LessThan(*args):
  return _operator_overload.LessThan(*args)
LessThan = _operator_overload.LessThan

def LessThanEqual(*args):
  return _operator_overload.LessThanEqual(*args)
LessThanEqual = _operator_overload.LessThanEqual

def GreaterThan(*args):
  return _operator_overload.GreaterThan(*args)
GreaterThan = _operator_overload.GreaterThan

def GreaterThanEqual(*args):
  return _operator_overload.GreaterThanEqual(*args)
GreaterThanEqual = _operator_overload.GreaterThanEqual
class OpDerived(Op):
    __swig_setmethods__ = {}
    for _s in [Op]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpDerived, name, value)
    __swig_getmethods__ = {}
    for _s in [Op]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpDerived, name)
    __repr__ = _swig_repr
    def __init__(self, a=0): 
        this = _operator_overload.new_OpDerived(a)
        try: self.this.append(this)
        except: self.this = this
    def IntCast(self): return _operator_overload.OpDerived_IntCast(self)
    __swig_destroy__ = _operator_overload.delete_OpDerived
    __del__ = lambda self : None;
OpDerived_swigregister = _operator_overload.OpDerived_swigregister
OpDerived_swigregister(OpDerived)

# This file is compatible with both classic and new-style classes.


