# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_director_classic', [dirname(__file__)])
        except ImportError:
            import _director_classic
            return _director_classic
        if fp is not None:
            try:
                _mod = imp.load_module('_director_classic', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _director_classic = swig_import_helper()
    del swig_import_helper
else:
    import _director_classic
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class Being(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Being, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Being, name)
    __repr__ = _swig_repr
    def id(self): return _director_classic.Being_id(self)
    __swig_destroy__ = _director_classic.delete_Being
    __del__ = lambda self : None;
    def __init__(self): 
        if self.__class__ == Being:
            _self = None
        else:
            _self = self
        this = _director_classic.new_Being(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _director_classic.disown_Being(self)
        return weakref_proxy(self)
Being_swigregister = _director_classic.Being_swigregister
Being_swigregister(Being)

class Person(Being):
    __swig_setmethods__ = {}
    for _s in [Being]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Person, name, value)
    __swig_getmethods__ = {}
    for _s in [Being]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Person, name)
    __repr__ = _swig_repr
    def id(self): return _director_classic.Person_id(self)
    def __init__(self): 
        if self.__class__ == Person:
            _self = None
        else:
            _self = self
        this = _director_classic.new_Person(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _director_classic.delete_Person
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _director_classic.disown_Person(self)
        return weakref_proxy(self)
Person_swigregister = _director_classic.Person_swigregister
Person_swigregister(Person)

class Child(Person):
    __swig_setmethods__ = {}
    for _s in [Person]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Child, name, value)
    __swig_getmethods__ = {}
    for _s in [Person]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Child, name)
    __repr__ = _swig_repr
    def id(self): return _director_classic.Child_id(self)
    def __init__(self): 
        if self.__class__ == Child:
            _self = None
        else:
            _self = self
        this = _director_classic.new_Child(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _director_classic.delete_Child
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _director_classic.disown_Child(self)
        return weakref_proxy(self)
Child_swigregister = _director_classic.Child_swigregister
Child_swigregister(Child)

class GrandChild(Child):
    __swig_setmethods__ = {}
    for _s in [Child]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GrandChild, name, value)
    __swig_getmethods__ = {}
    for _s in [Child]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GrandChild, name)
    __repr__ = _swig_repr
    def id(self): return _director_classic.GrandChild_id(self)
    def __init__(self): 
        if self.__class__ == GrandChild:
            _self = None
        else:
            _self = self
        this = _director_classic.new_GrandChild(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _director_classic.delete_GrandChild
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _director_classic.disown_GrandChild(self)
        return weakref_proxy(self)
GrandChild_swigregister = _director_classic.GrandChild_swigregister
GrandChild_swigregister(GrandChild)

class OrphanPerson(Person):
    __swig_setmethods__ = {}
    for _s in [Person]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrphanPerson, name, value)
    __swig_getmethods__ = {}
    for _s in [Person]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrphanPerson, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == OrphanPerson:
            _self = None
        else:
            _self = self
        this = _director_classic.new_OrphanPerson(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _director_classic.delete_OrphanPerson
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _director_classic.disown_OrphanPerson(self)
        return weakref_proxy(self)
OrphanPerson_swigregister = _director_classic.OrphanPerson_swigregister
OrphanPerson_swigregister(OrphanPerson)

class OrphanChild(Child):
    __swig_setmethods__ = {}
    for _s in [Child]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrphanChild, name, value)
    __swig_getmethods__ = {}
    for _s in [Child]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrphanChild, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == OrphanChild:
            _self = None
        else:
            _self = self
        this = _director_classic.new_OrphanChild(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _director_classic.delete_OrphanChild
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _director_classic.disown_OrphanChild(self)
        return weakref_proxy(self)
OrphanChild_swigregister = _director_classic.OrphanChild_swigregister
OrphanChild_swigregister(OrphanChild)

class Caller(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Caller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Caller, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _director_classic.new_Caller()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _director_classic.delete_Caller
    __del__ = lambda self : None;
    def delCallback(self): return _director_classic.Caller_delCallback(self)
    def setCallback(self, *args): return _director_classic.Caller_setCallback(self, *args)
    def resetCallback(self): return _director_classic.Caller_resetCallback(self)
    def call(self): return _director_classic.Caller_call(self)
    def baseClass(self): return _director_classic.Caller_baseClass(self)
Caller_swigregister = _director_classic.Caller_swigregister
Caller_swigregister(Caller)

# This file is compatible with both classic and new-style classes.


