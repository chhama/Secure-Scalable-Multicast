# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_std_wstring', [dirname(__file__)])
        except ImportError:
            import _li_std_wstring
            return _li_std_wstring
        if fp is not None:
            try:
                _mod = imp.load_module('_li_std_wstring', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_std_wstring = swig_import_helper()
    del swig_import_helper
else:
    import _li_std_wstring
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _li_std_wstring.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _li_std_wstring.SwigPyIterator_value(self)
    def incr(self, n=1): return _li_std_wstring.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _li_std_wstring.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _li_std_wstring.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _li_std_wstring.SwigPyIterator_equal(self, *args)
    def copy(self): return _li_std_wstring.SwigPyIterator_copy(self)
    def next(self): return _li_std_wstring.SwigPyIterator_next(self)
    def __next__(self): return _li_std_wstring.SwigPyIterator___next__(self)
    def previous(self): return _li_std_wstring.SwigPyIterator_previous(self)
    def advance(self, *args): return _li_std_wstring.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _li_std_wstring.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _li_std_wstring.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _li_std_wstring.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _li_std_wstring.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _li_std_wstring.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _li_std_wstring.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _li_std_wstring.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class wstring(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wstring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wstring, name)
    __repr__ = _swig_repr
    def length(self): return _li_std_wstring.wstring_length(self)
    def max_size(self): return _li_std_wstring.wstring_max_size(self)
    def capacity(self): return _li_std_wstring.wstring_capacity(self)
    def reserve(self, __res_arg=0): return _li_std_wstring.wstring_reserve(self, __res_arg)
    def copy(self, *args): return _li_std_wstring.wstring_copy(self, *args)
    def c_str(self): return _li_std_wstring.wstring_c_str(self)
    def find(self, *args): return _li_std_wstring.wstring_find(self, *args)
    def rfind(self, *args): return _li_std_wstring.wstring_rfind(self, *args)
    def find_first_of(self, *args): return _li_std_wstring.wstring_find_first_of(self, *args)
    def find_last_of(self, *args): return _li_std_wstring.wstring_find_last_of(self, *args)
    def find_first_not_of(self, *args): return _li_std_wstring.wstring_find_first_not_of(self, *args)
    def find_last_not_of(self, *args): return _li_std_wstring.wstring_find_last_not_of(self, *args)
    def substr(self, *args): return _li_std_wstring.wstring_substr(self, *args)
    def empty(self): return _li_std_wstring.wstring_empty(self)
    def size(self): return _li_std_wstring.wstring_size(self)
    def swap(self, *args): return _li_std_wstring.wstring_swap(self, *args)
    def get_allocator(self): return _li_std_wstring.wstring_get_allocator(self)
    def begin(self): return _li_std_wstring.wstring_begin(self)
    def end(self): return _li_std_wstring.wstring_end(self)
    def rbegin(self): return _li_std_wstring.wstring_rbegin(self)
    def rend(self): return _li_std_wstring.wstring_rend(self)
    def erase(self, *args): return _li_std_wstring.wstring_erase(self, *args)
    def __init__(self, *args): 
        this = _li_std_wstring.new_wstring(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _li_std_wstring.wstring_assign(self, *args)
    def resize(self, *args): return _li_std_wstring.wstring_resize(self, *args)
    def iterator(self): return _li_std_wstring.wstring_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _li_std_wstring.wstring___nonzero__(self)
    def __bool__(self): return _li_std_wstring.wstring___bool__(self)
    def __len__(self): return _li_std_wstring.wstring___len__(self)
    def __getslice__(self, *args): return _li_std_wstring.wstring___getslice__(self, *args)
    def __setslice__(self, *args): return _li_std_wstring.wstring___setslice__(self, *args)
    def __delslice__(self, *args): return _li_std_wstring.wstring___delslice__(self, *args)
    def __delitem__(self, *args): return _li_std_wstring.wstring___delitem__(self, *args)
    def __getitem__(self, *args): return _li_std_wstring.wstring___getitem__(self, *args)
    def __setitem__(self, *args): return _li_std_wstring.wstring___setitem__(self, *args)
    def insert(self, *args): return _li_std_wstring.wstring_insert(self, *args)
    def replace(self, *args): return _li_std_wstring.wstring_replace(self, *args)
    def __iadd__(self, *args): return _li_std_wstring.wstring___iadd__(self, *args)
    def __add__(self, *args): return _li_std_wstring.wstring___add__(self, *args)
    def __radd__(self, *args): return _li_std_wstring.wstring___radd__(self, *args)
    def __str__(self): return _li_std_wstring.wstring___str__(self)
    def __rlshift__(self, *args): return _li_std_wstring.wstring___rlshift__(self, *args)
    def __eq__(self, *args): return _li_std_wstring.wstring___eq__(self, *args)
    def __ne__(self, *args): return _li_std_wstring.wstring___ne__(self, *args)
    def __gt__(self, *args): return _li_std_wstring.wstring___gt__(self, *args)
    def __lt__(self, *args): return _li_std_wstring.wstring___lt__(self, *args)
    def __ge__(self, *args): return _li_std_wstring.wstring___ge__(self, *args)
    def __le__(self, *args): return _li_std_wstring.wstring___le__(self, *args)
    __swig_destroy__ = _li_std_wstring.delete_wstring
    __del__ = lambda self : None;
wstring_swigregister = _li_std_wstring.wstring_swigregister
wstring_swigregister(wstring)
cvar = _li_std_wstring.cvar
wstring.npos = _li_std_wstring.cvar.wstring_npos

class A(wstring):
    __swig_setmethods__ = {}
    for _s in [wstring]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    for _s in [wstring]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_wstring.new_A(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_std_wstring.delete_A
    __del__ = lambda self : None;
A_swigregister = _li_std_wstring.A_swigregister
A_swigregister(A)

class B(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_std_wstring.new_B(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["cname"] = _li_std_wstring.B_cname_set
    __swig_getmethods__["cname"] = _li_std_wstring.B_cname_get
    if _newclass:cname = _swig_property(_li_std_wstring.B_cname_get, _li_std_wstring.B_cname_set)
    __swig_setmethods__["name"] = _li_std_wstring.B_name_set
    __swig_getmethods__["name"] = _li_std_wstring.B_name_get
    if _newclass:name = _swig_property(_li_std_wstring.B_name_get, _li_std_wstring.B_name_set)
    __swig_setmethods__["a"] = _li_std_wstring.B_a_set
    __swig_getmethods__["a"] = _li_std_wstring.B_a_get
    if _newclass:a = _swig_property(_li_std_wstring.B_a_get, _li_std_wstring.B_a_set)
    __swig_destroy__ = _li_std_wstring.delete_B
    __del__ = lambda self : None;
B_swigregister = _li_std_wstring.B_swigregister
B_swigregister(B)


def test_wcvalue(*args):
  return _li_std_wstring.test_wcvalue(*args)
test_wcvalue = _li_std_wstring.test_wcvalue

def test_ccvalue(*args):
  return _li_std_wstring.test_ccvalue(*args)
test_ccvalue = _li_std_wstring.test_ccvalue

def test_cvalue(*args):
  return _li_std_wstring.test_cvalue(*args)
test_cvalue = _li_std_wstring.test_cvalue

def test_value(*args):
  return _li_std_wstring.test_value(*args)
test_value = _li_std_wstring.test_value

def test_const_reference(*args):
  return _li_std_wstring.test_const_reference(*args)
test_const_reference = _li_std_wstring.test_const_reference

def test_pointer(*args):
  return _li_std_wstring.test_pointer(*args)
test_pointer = _li_std_wstring.test_pointer

def test_pointer_out():
  return _li_std_wstring.test_pointer_out()
test_pointer_out = _li_std_wstring.test_pointer_out

def test_const_pointer(*args):
  return _li_std_wstring.test_const_pointer(*args)
test_const_pointer = _li_std_wstring.test_const_pointer

def test_const_pointer_out():
  return _li_std_wstring.test_const_pointer_out()
test_const_pointer_out = _li_std_wstring.test_const_pointer_out

def test_reference(*args):
  return _li_std_wstring.test_reference(*args)
test_reference = _li_std_wstring.test_reference

def test_reference_out():
  return _li_std_wstring.test_reference_out()
test_reference_out = _li_std_wstring.test_reference_out

def test_throw():
  return _li_std_wstring.test_throw()
test_throw = _li_std_wstring.test_throw
# This file is compatible with both classic and new-style classes.


