# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_default_args', [dirname(__file__)])
        except ImportError:
            import _default_args
            return _default_args
        if fp is not None:
            try:
                _mod = imp.load_module('_default_args', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _default_args = swig_import_helper()
    del swig_import_helper
else:
    import _default_args
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def anonymous(arg1=7771):
  return _default_args.anonymous(arg1)
anonymous = _default_args.anonymous

def booltest(x=True):
  return _default_args.booltest(x)
booltest = _default_args.booltest
BITTER = _default_args.BITTER
SWEET = _default_args.SWEET
class EnumClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnumClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnumClass, name)
    __repr__ = _swig_repr
    FAST = _default_args.EnumClass_FAST
    SLOW = _default_args.EnumClass_SLOW
    def blah(self, *args): return _default_args.EnumClass_blah(self, *args)
    def __init__(self): 
        this = _default_args.new_EnumClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_args.delete_EnumClass
    __del__ = lambda self : None;
EnumClass_swigregister = _default_args.EnumClass_swigregister
EnumClass_swigregister(EnumClass)


def casts1(*args):
  return _default_args.casts1(*args)
casts1 = _default_args.casts1

def casts2(m="Hello"):
  return _default_args.casts2(m)
casts2 = _default_args.casts2

def chartest1(c='x'):
  return _default_args.chartest1(c)
chartest1 = _default_args.chartest1

def chartest2(c='\0'):
  return _default_args.chartest2(c)
chartest2 = _default_args.chartest2
NoType = _default_args.NoType

def dummy(*args):
  return _default_args.dummy(*args)
dummy = _default_args.dummy

def afunction(*args):
  return _default_args.afunction(*args)
afunction = _default_args.afunction

def reftest1(x=42):
  return _default_args.reftest1(x)
reftest1 = _default_args.reftest1

def reftest2(x="hello"):
  return _default_args.reftest2(x)
reftest2 = _default_args.reftest2
class Tree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tree, name)
    __repr__ = _swig_repr
    Oak = _default_args.Tree_Oak
    Fir = _default_args.Tree_Fir
    Cedar = _default_args.Tree_Cedar
    def chops(self, *args): return _default_args.Tree_chops(self, *args)
    def test(self, *args): return _default_args.Tree_test(self, *args)
    def __init__(self): 
        this = _default_args.new_Tree()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_args.delete_Tree
    __del__ = lambda self : None;
Tree_swigregister = _default_args.Tree_swigregister
Tree_swigregister(Tree)
cvar = _default_args.cvar


def chops(*args):
  return _default_args.chops(*args)
chops = _default_args.chops
class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bar2"] = _default_args.Foo_bar2_set
    __swig_getmethods__["bar2"] = _default_args.Foo_bar2_get
    if _newclass:bar2 = _swig_property(_default_args.Foo_bar2_get, _default_args.Foo_bar2_set)
    __swig_setmethods__["spam"] = _default_args.Foo_spam_set
    __swig_getmethods__["spam"] = _default_args.Foo_spam_get
    if _newclass:spam = _swig_property(_default_args.Foo_spam_get, _default_args.Foo_spam_set)
    def __init__(self): 
        this = _default_args.new_Foo()
        try: self.this.append(this)
        except: self.this = this
    def method1(self, *args): return _default_args.Foo_method1(self, *args)
    def method2(self, *args): return _default_args.Foo_method2(self, *args)
    def newname(self, x=1234): return _default_args.Foo_newname(self, x)
    def renamed3arg(self, x=1234, d=123.4): return _default_args.Foo_renamed3arg(self, x, d)
    def renamed2arg(self, x=1234, d=123.4): return _default_args.Foo_renamed2arg(self, x, d)
    def renamed1arg(self, x=1234, d=123.4): return _default_args.Foo_renamed1arg(self, x, d)
    __swig_destroy__ = _default_args.delete_Foo
    __del__ = lambda self : None;
Foo_swigregister = _default_args.Foo_swigregister
Foo_swigregister(Foo)

Val1 = _default_args.Val1
Val2 = _default_args.Val2
class MyClass1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyClass1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MyClass1, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _default_args.new_MyClass1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_args.delete_MyClass1
    __del__ = lambda self : None;
MyClass1_swigregister = _default_args.MyClass1_swigregister
MyClass1_swigregister(MyClass1)

class MyClass2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MyClass2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MyClass2, name)
    __repr__ = _swig_repr
    def set(self, *args): return _default_args.MyClass2_set(self, *args)
    def set2(self, *args): return _default_args.MyClass2_set2(self, *args)
    def __init__(self): 
        this = _default_args.new_MyClass2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_args.delete_MyClass2
    __del__ = lambda self : None;
MyClass2_swigregister = _default_args.MyClass2_swigregister
MyClass2_swigregister(MyClass2)


def exceptionspec(*args):
  return _default_args.exceptionspec(*args)
exceptionspec = _default_args.exceptionspec
class Except(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Except, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Except, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _default_args.new_Except(*args)
        try: self.this.append(this)
        except: self.this = this
    def exspec(self, a=0): return _default_args.Except_exspec(self, a)
    __swig_destroy__ = _default_args.delete_Except
    __del__ = lambda self : None;
Except_swigregister = _default_args.Except_swigregister
Except_swigregister(Except)

class Statics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Statics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Statics, name)
    __repr__ = _swig_repr
    __swig_getmethods__["staticMethod"] = lambda x: _default_args.Statics_staticMethod
    if _newclass:staticMethod = staticmethod(_default_args.Statics_staticMethod)
    def __init__(self): 
        this = _default_args.new_Statics()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_args.delete_Statics
    __del__ = lambda self : None;
Statics_swigregister = _default_args.Statics_swigregister
Statics_swigregister(Statics)

def Statics_staticMethod(a=10, b=20, c=30):
  return _default_args.Statics_staticMethod(a, b, c)
Statics_staticMethod = _default_args.Statics_staticMethod

class Tricky(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tricky, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tricky, name)
    __repr__ = _swig_repr
    def privatedefault(self, *args): return _default_args.Tricky_privatedefault(self, *args)
    def protectedint(self, *args): return _default_args.Tricky_protectedint(self, *args)
    def protecteddouble(self, *args): return _default_args.Tricky_protecteddouble(self, *args)
    def functiondefault(self, *args): return _default_args.Tricky_functiondefault(self, *args)
    def contrived(self, *args): return _default_args.Tricky_contrived(self, *args)
    def __init__(self): 
        this = _default_args.new_Tricky()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_args.delete_Tricky
    __del__ = lambda self : None;
Tricky_swigregister = _default_args.Tricky_swigregister
Tricky_swigregister(Tricky)

class Klass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Klass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Klass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _default_args.Klass_val_set
    __swig_getmethods__["val"] = _default_args.Klass_val_get
    if _newclass:val = _swig_property(_default_args.Klass_val_get, _default_args.Klass_val_set)
    def __init__(self, *args): 
        this = _default_args.new_Klass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_args.delete_Klass
    __del__ = lambda self : None;
Klass_swigregister = _default_args.Klass_swigregister
Klass_swigregister(Klass)


def constructorcall(*args):
  return _default_args.constructorcall(*args)
constructorcall = _default_args.constructorcall
class ConstMethods(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstMethods, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstMethods, name)
    __repr__ = _swig_repr
    def coo(self, d=0.0): return _default_args.ConstMethods_coo(self, d)
    def __init__(self): 
        this = _default_args.new_ConstMethods()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_args.delete_ConstMethods
    __del__ = lambda self : None;
ConstMethods_swigregister = _default_args.ConstMethods_swigregister
ConstMethods_swigregister(ConstMethods)


def cfunc1(*args):
  return _default_args.cfunc1(*args)
cfunc1 = _default_args.cfunc1

def cfunc2(*args):
  return _default_args.cfunc2(*args)
cfunc2 = _default_args.cfunc2

def cfunc3(*args):
  return _default_args.cfunc3(*args)
cfunc3 = _default_args.cfunc3
class Pointf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pointf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pointf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _default_args.Pointf_x_set
    __swig_getmethods__["x"] = _default_args.Pointf_x_get
    if _newclass:x = _swig_property(_default_args.Pointf_x_get, _default_args.Pointf_x_set)
    __swig_setmethods__["y"] = _default_args.Pointf_y_set
    __swig_getmethods__["y"] = _default_args.Pointf_y_get
    if _newclass:y = _swig_property(_default_args.Pointf_y_get, _default_args.Pointf_y_set)
    def __init__(self): 
        this = _default_args.new_Pointf()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _default_args.delete_Pointf
    __del__ = lambda self : None;
Pointf_swigregister = _default_args.Pointf_swigregister
Pointf_swigregister(Pointf)

# This file is compatible with both classic and new-style classes.


