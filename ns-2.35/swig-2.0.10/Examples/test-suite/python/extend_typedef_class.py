# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_extend_typedef_class', [dirname(__file__)])
        except ImportError:
            import _extend_typedef_class
            return _extend_typedef_class
        if fp is not None:
            try:
                _mod = imp.load_module('_extend_typedef_class', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _extend_typedef_class = swig_import_helper()
    del swig_import_helper
else:
    import _extend_typedef_class
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class AClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["membervar"] = _extend_typedef_class.AClass_membervar_set
    __swig_getmethods__["membervar"] = _extend_typedef_class.AClass_membervar_get
    if _newclass:membervar = _swig_property(_extend_typedef_class.AClass_membervar_get, _extend_typedef_class.AClass_membervar_set)
    def getvar(self): return _extend_typedef_class.AClass_getvar(self)
    def __init__(self): 
        this = _extend_typedef_class.new_AClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extend_typedef_class.delete_AClass
    __del__ = lambda self : None;
AClass_swigregister = _extend_typedef_class.AClass_swigregister
AClass_swigregister(AClass)

class BClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["membervar"] = _extend_typedef_class.BClass_membervar_set
    __swig_getmethods__["membervar"] = _extend_typedef_class.BClass_membervar_get
    if _newclass:membervar = _swig_property(_extend_typedef_class.BClass_membervar_get, _extend_typedef_class.BClass_membervar_set)
    def getvar(self): return _extend_typedef_class.BClass_getvar(self)
    def __init__(self): 
        this = _extend_typedef_class.new_BClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extend_typedef_class.delete_BClass
    __del__ = lambda self : None;
BClass_swigregister = _extend_typedef_class.BClass_swigregister
BClass_swigregister(BClass)

class CClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["membervar"] = _extend_typedef_class.CClass_membervar_set
    __swig_getmethods__["membervar"] = _extend_typedef_class.CClass_membervar_get
    if _newclass:membervar = _swig_property(_extend_typedef_class.CClass_membervar_get, _extend_typedef_class.CClass_membervar_set)
    def getvar(self): return _extend_typedef_class.CClass_getvar(self)
    def __init__(self): 
        this = _extend_typedef_class.new_CClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extend_typedef_class.delete_CClass
    __del__ = lambda self : None;
CClass_swigregister = _extend_typedef_class.CClass_swigregister
CClass_swigregister(CClass)

class DClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["membervar"] = _extend_typedef_class.DClass_membervar_set
    __swig_getmethods__["membervar"] = _extend_typedef_class.DClass_membervar_get
    if _newclass:membervar = _swig_property(_extend_typedef_class.DClass_membervar_get, _extend_typedef_class.DClass_membervar_set)
    def getvar(self): return _extend_typedef_class.DClass_getvar(self)
    def __init__(self): 
        this = _extend_typedef_class.new_DClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extend_typedef_class.delete_DClass
    __del__ = lambda self : None;
DClass_swigregister = _extend_typedef_class.DClass_swigregister
DClass_swigregister(DClass)

class AStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["membervar"] = _extend_typedef_class.AStruct_membervar_set
    __swig_getmethods__["membervar"] = _extend_typedef_class.AStruct_membervar_get
    if _newclass:membervar = _swig_property(_extend_typedef_class.AStruct_membervar_get, _extend_typedef_class.AStruct_membervar_set)
    def getvar(self): return _extend_typedef_class.AStruct_getvar(self)
    def __init__(self): 
        this = _extend_typedef_class.new_AStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extend_typedef_class.delete_AStruct
    __del__ = lambda self : None;
AStruct_swigregister = _extend_typedef_class.AStruct_swigregister
AStruct_swigregister(AStruct)

class BStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["membervar"] = _extend_typedef_class.BStruct_membervar_set
    __swig_getmethods__["membervar"] = _extend_typedef_class.BStruct_membervar_get
    if _newclass:membervar = _swig_property(_extend_typedef_class.BStruct_membervar_get, _extend_typedef_class.BStruct_membervar_set)
    def getvar(self): return _extend_typedef_class.BStruct_getvar(self)
    def __init__(self): 
        this = _extend_typedef_class.new_BStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extend_typedef_class.delete_BStruct
    __del__ = lambda self : None;
BStruct_swigregister = _extend_typedef_class.BStruct_swigregister
BStruct_swigregister(BStruct)

class CStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["membervar"] = _extend_typedef_class.CStruct_membervar_set
    __swig_getmethods__["membervar"] = _extend_typedef_class.CStruct_membervar_get
    if _newclass:membervar = _swig_property(_extend_typedef_class.CStruct_membervar_get, _extend_typedef_class.CStruct_membervar_set)
    def getvar(self): return _extend_typedef_class.CStruct_getvar(self)
    def __init__(self): 
        this = _extend_typedef_class.new_CStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extend_typedef_class.delete_CStruct
    __del__ = lambda self : None;
CStruct_swigregister = _extend_typedef_class.CStruct_swigregister
CStruct_swigregister(CStruct)

class DStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["membervar"] = _extend_typedef_class.DStruct_membervar_set
    __swig_getmethods__["membervar"] = _extend_typedef_class.DStruct_membervar_get
    if _newclass:membervar = _swig_property(_extend_typedef_class.DStruct_membervar_get, _extend_typedef_class.DStruct_membervar_set)
    def getvar(self): return _extend_typedef_class.DStruct_getvar(self)
    def __init__(self): 
        this = _extend_typedef_class.new_DStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extend_typedef_class.delete_DStruct
    __del__ = lambda self : None;
DStruct_swigregister = _extend_typedef_class.DStruct_swigregister
DStruct_swigregister(DStruct)

# This file is compatible with both classic and new-style classes.


