# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_boost_shared_ptr_template', [dirname(__file__)])
        except ImportError:
            import _li_boost_shared_ptr_template
            return _li_boost_shared_ptr_template
        if fp is not None:
            try:
                _mod = imp.load_module('_li_boost_shared_ptr_template', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_boost_shared_ptr_template = swig_import_helper()
    del swig_import_helper
else:
    import _li_boost_shared_ptr_template
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _li_boost_shared_ptr_template.SHARED_PTR_DISOWN

def bar_getter(*args):
  return _li_boost_shared_ptr_template.bar_getter(*args)
bar_getter = _li_boost_shared_ptr_template.bar_getter
class BaseINTEGER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseINTEGER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseINTEGER, name)
    __repr__ = _swig_repr
    def bar(self): return _li_boost_shared_ptr_template.BaseINTEGER_bar(self)
    def __init__(self): 
        this = _li_boost_shared_ptr_template.new_BaseINTEGER()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_boost_shared_ptr_template.delete_BaseINTEGER
    __del__ = lambda self : None;
BaseINTEGER_swigregister = _li_boost_shared_ptr_template.BaseINTEGER_swigregister
BaseINTEGER_swigregister(BaseINTEGER)

class DerivedINTEGER(BaseINTEGER):
    __swig_setmethods__ = {}
    for _s in [BaseINTEGER]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivedINTEGER, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseINTEGER]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivedINTEGER, name)
    __repr__ = _swig_repr
    def bar(self): return _li_boost_shared_ptr_template.DerivedINTEGER_bar(self)
    def __init__(self): 
        this = _li_boost_shared_ptr_template.new_DerivedINTEGER()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_boost_shared_ptr_template.delete_DerivedINTEGER
    __del__ = lambda self : None;
DerivedINTEGER_swigregister = _li_boost_shared_ptr_template.DerivedINTEGER_swigregister
DerivedINTEGER_swigregister(DerivedINTEGER)


def bar2_getter(*args):
  return _li_boost_shared_ptr_template.bar2_getter(*args)
bar2_getter = _li_boost_shared_ptr_template.bar2_getter
class BaseDefaultInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseDefaultInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseDefaultInt, name)
    __repr__ = _swig_repr
    def bar2(self): return _li_boost_shared_ptr_template.BaseDefaultInt_bar2(self)
    def __init__(self): 
        this = _li_boost_shared_ptr_template.new_BaseDefaultInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_boost_shared_ptr_template.delete_BaseDefaultInt
    __del__ = lambda self : None;
BaseDefaultInt_swigregister = _li_boost_shared_ptr_template.BaseDefaultInt_swigregister
BaseDefaultInt_swigregister(BaseDefaultInt)

class DerivedDefaultInt(BaseDefaultInt):
    __swig_setmethods__ = {}
    for _s in [BaseDefaultInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivedDefaultInt, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseDefaultInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivedDefaultInt, name)
    __repr__ = _swig_repr
    def bar2(self): return _li_boost_shared_ptr_template.DerivedDefaultInt_bar2(self)
    def __init__(self): 
        this = _li_boost_shared_ptr_template.new_DerivedDefaultInt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_boost_shared_ptr_template.delete_DerivedDefaultInt
    __del__ = lambda self : None;
DerivedDefaultInt_swigregister = _li_boost_shared_ptr_template.DerivedDefaultInt_swigregister
DerivedDefaultInt_swigregister(DerivedDefaultInt)

class DerivedDefaultInt2(BaseDefaultInt):
    __swig_setmethods__ = {}
    for _s in [BaseDefaultInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivedDefaultInt2, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseDefaultInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivedDefaultInt2, name)
    __repr__ = _swig_repr
    def bar2(self): return _li_boost_shared_ptr_template.DerivedDefaultInt2_bar2(self)
    def __init__(self): 
        this = _li_boost_shared_ptr_template.new_DerivedDefaultInt2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_boost_shared_ptr_template.delete_DerivedDefaultInt2
    __del__ = lambda self : None;
DerivedDefaultInt2_swigregister = _li_boost_shared_ptr_template.DerivedDefaultInt2_swigregister
DerivedDefaultInt2_swigregister(DerivedDefaultInt2)

# This file is compatible with both classic and new-style classes.


