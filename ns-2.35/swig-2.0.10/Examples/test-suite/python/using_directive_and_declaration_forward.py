# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_using_directive_and_declaration_forward', [dirname(__file__)])
        except ImportError:
            import _using_directive_and_declaration_forward
            return _using_directive_and_declaration_forward
        if fp is not None:
            try:
                _mod = imp.load_module('_using_directive_and_declaration_forward', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _using_directive_and_declaration_forward = swig_import_helper()
    del swig_import_helper
else:
    import _using_directive_and_declaration_forward
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Thing1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thing1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thing1, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _using_directive_and_declaration_forward.new_Thing1()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _using_directive_and_declaration_forward.delete_Thing1
    __del__ = lambda self : None;
Thing1_swigregister = _using_directive_and_declaration_forward.Thing1_swigregister
Thing1_swigregister(Thing1)


def useit1(*args):
  return _using_directive_and_declaration_forward.useit1(*args)
useit1 = _using_directive_and_declaration_forward.useit1

def useit1a(*args):
  return _using_directive_and_declaration_forward.useit1a(*args)
useit1a = _using_directive_and_declaration_forward.useit1a

def useit1b(*args):
  return _using_directive_and_declaration_forward.useit1b(*args)
useit1b = _using_directive_and_declaration_forward.useit1b

def useit1c(*args):
  return _using_directive_and_declaration_forward.useit1c(*args)
useit1c = _using_directive_and_declaration_forward.useit1c
class Thing2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thing2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thing2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _using_directive_and_declaration_forward.new_Thing2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _using_directive_and_declaration_forward.delete_Thing2
    __del__ = lambda self : None;
Thing2_swigregister = _using_directive_and_declaration_forward.Thing2_swigregister
Thing2_swigregister(Thing2)


def useit2(*args):
  return _using_directive_and_declaration_forward.useit2(*args)
useit2 = _using_directive_and_declaration_forward.useit2

def useit2a(*args):
  return _using_directive_and_declaration_forward.useit2a(*args)
useit2a = _using_directive_and_declaration_forward.useit2a

def useit2b(*args):
  return _using_directive_and_declaration_forward.useit2b(*args)
useit2b = _using_directive_and_declaration_forward.useit2b

def useit2c(*args):
  return _using_directive_and_declaration_forward.useit2c(*args)
useit2c = _using_directive_and_declaration_forward.useit2c

def useit2d(*args):
  return _using_directive_and_declaration_forward.useit2d(*args)
useit2d = _using_directive_and_declaration_forward.useit2d
class Thing3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thing3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thing3, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _using_directive_and_declaration_forward.new_Thing3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _using_directive_and_declaration_forward.delete_Thing3
    __del__ = lambda self : None;
Thing3_swigregister = _using_directive_and_declaration_forward.Thing3_swigregister
Thing3_swigregister(Thing3)


def useit3(*args):
  return _using_directive_and_declaration_forward.useit3(*args)
useit3 = _using_directive_and_declaration_forward.useit3

def useit3a(*args):
  return _using_directive_and_declaration_forward.useit3a(*args)
useit3a = _using_directive_and_declaration_forward.useit3a

def useit3b(*args):
  return _using_directive_and_declaration_forward.useit3b(*args)
useit3b = _using_directive_and_declaration_forward.useit3b

def useit3c(*args):
  return _using_directive_and_declaration_forward.useit3c(*args)
useit3c = _using_directive_and_declaration_forward.useit3c

def useit3d(*args):
  return _using_directive_and_declaration_forward.useit3d(*args)
useit3d = _using_directive_and_declaration_forward.useit3d
class Thing4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thing4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thing4, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _using_directive_and_declaration_forward.new_Thing4()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _using_directive_and_declaration_forward.delete_Thing4
    __del__ = lambda self : None;
Thing4_swigregister = _using_directive_and_declaration_forward.Thing4_swigregister
Thing4_swigregister(Thing4)


def useit4(*args):
  return _using_directive_and_declaration_forward.useit4(*args)
useit4 = _using_directive_and_declaration_forward.useit4

def useit4a(*args):
  return _using_directive_and_declaration_forward.useit4a(*args)
useit4a = _using_directive_and_declaration_forward.useit4a

def useit4b(*args):
  return _using_directive_and_declaration_forward.useit4b(*args)
useit4b = _using_directive_and_declaration_forward.useit4b

def useit4c(*args):
  return _using_directive_and_declaration_forward.useit4c(*args)
useit4c = _using_directive_and_declaration_forward.useit4c

def useit4d(*args):
  return _using_directive_and_declaration_forward.useit4d(*args)
useit4d = _using_directive_and_declaration_forward.useit4d
class Thing5(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thing5, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thing5, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _using_directive_and_declaration_forward.new_Thing5()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _using_directive_and_declaration_forward.delete_Thing5
    __del__ = lambda self : None;
Thing5_swigregister = _using_directive_and_declaration_forward.Thing5_swigregister
Thing5_swigregister(Thing5)


def useit5(*args):
  return _using_directive_and_declaration_forward.useit5(*args)
useit5 = _using_directive_and_declaration_forward.useit5

def useit5a(*args):
  return _using_directive_and_declaration_forward.useit5a(*args)
useit5a = _using_directive_and_declaration_forward.useit5a

def useit5b(*args):
  return _using_directive_and_declaration_forward.useit5b(*args)
useit5b = _using_directive_and_declaration_forward.useit5b

def useit5c(*args):
  return _using_directive_and_declaration_forward.useit5c(*args)
useit5c = _using_directive_and_declaration_forward.useit5c

def useit5d(*args):
  return _using_directive_and_declaration_forward.useit5d(*args)
useit5d = _using_directive_and_declaration_forward.useit5d
class Thing7(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thing7, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thing7, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _using_directive_and_declaration_forward.new_Thing7()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _using_directive_and_declaration_forward.delete_Thing7
    __del__ = lambda self : None;
Thing7_swigregister = _using_directive_and_declaration_forward.Thing7_swigregister
Thing7_swigregister(Thing7)


def useit7(*args):
  return _using_directive_and_declaration_forward.useit7(*args)
useit7 = _using_directive_and_declaration_forward.useit7

def useit7a(*args):
  return _using_directive_and_declaration_forward.useit7a(*args)
useit7a = _using_directive_and_declaration_forward.useit7a

def useit7b(*args):
  return _using_directive_and_declaration_forward.useit7b(*args)
useit7b = _using_directive_and_declaration_forward.useit7b

def useit7c(*args):
  return _using_directive_and_declaration_forward.useit7c(*args)
useit7c = _using_directive_and_declaration_forward.useit7c

def useit7d(*args):
  return _using_directive_and_declaration_forward.useit7d(*args)
useit7d = _using_directive_and_declaration_forward.useit7d
# This file is compatible with both classic and new-style classes.


