# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_template_inherit_abstract', [dirname(__file__)])
        except ImportError:
            import _template_inherit_abstract
            return _template_inherit_abstract
        if fp is not None:
            try:
                _mod = imp.load_module('_template_inherit_abstract', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _template_inherit_abstract = swig_import_helper()
    del swig_import_helper
else:
    import _template_inherit_abstract
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class ModuleBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _template_inherit_abstract.delete_ModuleBase
    __del__ = lambda self : None;
    def get(self): return _template_inherit_abstract.ModuleBase_get(self)
ModuleBase_swigregister = _template_inherit_abstract.ModuleBase_swigregister
ModuleBase_swigregister(ModuleBase)

class B(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_inherit_abstract.new_B()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_inherit_abstract.delete_B
    __del__ = lambda self : None;
B_swigregister = _template_inherit_abstract.B_swigregister
B_swigregister(B)

class Wrap_B(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Wrap_B, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Wrap_B, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_inherit_abstract.new_Wrap_B()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_inherit_abstract.delete_Wrap_B
    __del__ = lambda self : None;
Wrap_B_swigregister = _template_inherit_abstract.Wrap_B_swigregister
Wrap_B_swigregister(Wrap_B)

class Module_B(Wrap_B,ModuleBase):
    __swig_setmethods__ = {}
    for _s in [Wrap_B,ModuleBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module_B, name, value)
    __swig_getmethods__ = {}
    for _s in [Wrap_B,ModuleBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Module_B, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _template_inherit_abstract.delete_Module_B
    __del__ = lambda self : None;
Module_B_swigregister = _template_inherit_abstract.Module_B_swigregister
Module_B_swigregister(Module_B)

class HModule_B(Module_B):
    __swig_setmethods__ = {}
    for _s in [Module_B]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HModule_B, name, value)
    __swig_getmethods__ = {}
    for _s in [Module_B]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HModule_B, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _template_inherit_abstract.delete_HModule_B
    __del__ = lambda self : None;
HModule_B_swigregister = _template_inherit_abstract.HModule_B_swigregister
HModule_B_swigregister(HModule_B)

class test(HModule_B):
    __swig_setmethods__ = {}
    for _s in [HModule_B]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, test, name, value)
    __swig_getmethods__ = {}
    for _s in [HModule_B]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, test, name)
    __repr__ = _swig_repr
    def get(self): return _template_inherit_abstract.test_get(self)
    def __init__(self): 
        this = _template_inherit_abstract.new_test()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_inherit_abstract.delete_test
    __del__ = lambda self : None;
test_swigregister = _template_inherit_abstract.test_swigregister
test_swigregister(test)

# This file is compatible with both classic and new-style classes.


