# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_funcptr_cpp', [dirname(__file__)])
        except ImportError:
            import _funcptr_cpp
            return _funcptr_cpp
        if fp is not None:
            try:
                _mod = imp.load_module('_funcptr_cpp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _funcptr_cpp = swig_import_helper()
    del swig_import_helper
else:
    import _funcptr_cpp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def addByValue(*args):
  return _funcptr_cpp.addByValue(*args)
addByValue = _funcptr_cpp.addByValue

def addByPointer(*args):
  return _funcptr_cpp.addByPointer(*args)
addByPointer = _funcptr_cpp.addByPointer

def addByReference(*args):
  return _funcptr_cpp.addByReference(*args)
addByReference = _funcptr_cpp.addByReference

def call1(*args):
  return _funcptr_cpp.call1(*args)
call1 = _funcptr_cpp.call1

def call2(*args):
  return _funcptr_cpp.call2(*args)
call2 = _funcptr_cpp.call2

def call3(*args):
  return _funcptr_cpp.call3(*args)
call3 = _funcptr_cpp.call3
ADD_BY_VALUE = _funcptr_cpp.ADD_BY_VALUE
ADD_BY_POINTER = _funcptr_cpp.ADD_BY_POINTER
ADD_BY_REFERENCE = _funcptr_cpp.ADD_BY_REFERENCE

def typedef_call1(*args):
  return _funcptr_cpp.typedef_call1(*args)
typedef_call1 = _funcptr_cpp.typedef_call1

def typedef_call2(*args):
  return _funcptr_cpp.typedef_call2(*args)
typedef_call2 = _funcptr_cpp.typedef_call2

def typedef_call3(*args):
  return _funcptr_cpp.typedef_call3(*args)
typedef_call3 = _funcptr_cpp.typedef_call3
# This file is compatible with both classic and new-style classes.


