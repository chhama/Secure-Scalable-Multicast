# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_extend_default', [dirname(__file__)])
        except ImportError:
            import _extend_default
            return _extend_default
        if fp is not None:
            try:
                _mod = imp.load_module('_extend_default', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _extend_default = swig_import_helper()
    del swig_import_helper
else:
    import _extend_default
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Before(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Before, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Before, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d"] = _extend_default.Before_d_set
    __swig_getmethods__["d"] = _extend_default.Before_d_get
    if _newclass:d = _swig_property(_extend_default.Before_d_get, _extend_default.Before_d_set)
    __swig_setmethods__["i"] = _extend_default.Before_i_set
    __swig_getmethods__["i"] = _extend_default.Before_i_get
    if _newclass:i = _swig_property(_extend_default.Before_i_get, _extend_default.Before_i_set)
    def __init__(self, *args): 
        this = _extend_default.new_Before(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["AddedStaticMethod"] = lambda x: _extend_default.Before_AddedStaticMethod
    if _newclass:AddedStaticMethod = staticmethod(_extend_default.Before_AddedStaticMethod)
    def AddedMethod(self, *args): return _extend_default.Before_AddedMethod(self, *args)
    __swig_destroy__ = _extend_default.delete_Before
    __del__ = lambda self : None;
Before_swigregister = _extend_default.Before_swigregister
Before_swigregister(Before)

def Before_AddedStaticMethod(*args):
  return _extend_default.Before_AddedStaticMethod(*args)
Before_AddedStaticMethod = _extend_default.Before_AddedStaticMethod

class After(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, After, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, After, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d"] = _extend_default.After_d_set
    __swig_getmethods__["d"] = _extend_default.After_d_get
    if _newclass:d = _swig_property(_extend_default.After_d_get, _extend_default.After_d_set)
    __swig_setmethods__["i"] = _extend_default.After_i_set
    __swig_getmethods__["i"] = _extend_default.After_i_get
    if _newclass:i = _swig_property(_extend_default.After_i_get, _extend_default.After_i_set)
    def __init__(self, *args): 
        this = _extend_default.new_After(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["AddedStaticMethod"] = lambda x: _extend_default.After_AddedStaticMethod
    if _newclass:AddedStaticMethod = staticmethod(_extend_default.After_AddedStaticMethod)
    def AddedMethod(self, *args): return _extend_default.After_AddedMethod(self, *args)
    __swig_destroy__ = _extend_default.delete_After
    __del__ = lambda self : None;
After_swigregister = _extend_default.After_swigregister
After_swigregister(After)

def After_AddedStaticMethod(*args):
  return _extend_default.After_AddedStaticMethod(*args)
After_AddedStaticMethod = _extend_default.After_AddedStaticMethod

class OverBefore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OverBefore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OverBefore, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d"] = _extend_default.OverBefore_d_set
    __swig_getmethods__["d"] = _extend_default.OverBefore_d_get
    if _newclass:d = _swig_property(_extend_default.OverBefore_d_get, _extend_default.OverBefore_d_set)
    __swig_setmethods__["i"] = _extend_default.OverBefore_i_set
    __swig_getmethods__["i"] = _extend_default.OverBefore_i_get
    if _newclass:i = _swig_property(_extend_default.OverBefore_i_get, _extend_default.OverBefore_i_set)
    def __init__(self, *args): 
        this = _extend_default.new_OverBefore(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["AddedStaticMethod"] = lambda x: _extend_default.OverBefore_AddedStaticMethod
    if _newclass:AddedStaticMethod = staticmethod(_extend_default.OverBefore_AddedStaticMethod)
    def AddedMethod(self, *args): return _extend_default.OverBefore_AddedMethod(self, *args)
    __swig_destroy__ = _extend_default.delete_OverBefore
    __del__ = lambda self : None;
OverBefore_swigregister = _extend_default.OverBefore_swigregister
OverBefore_swigregister(OverBefore)

def OverBefore_AddedStaticMethod(*args):
  return _extend_default.OverBefore_AddedStaticMethod(*args)
OverBefore_AddedStaticMethod = _extend_default.OverBefore_AddedStaticMethod

class OverAfter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OverAfter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OverAfter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d"] = _extend_default.OverAfter_d_set
    __swig_getmethods__["d"] = _extend_default.OverAfter_d_get
    if _newclass:d = _swig_property(_extend_default.OverAfter_d_get, _extend_default.OverAfter_d_set)
    __swig_setmethods__["i"] = _extend_default.OverAfter_i_set
    __swig_getmethods__["i"] = _extend_default.OverAfter_i_get
    if _newclass:i = _swig_property(_extend_default.OverAfter_i_get, _extend_default.OverAfter_i_set)
    def __init__(self, *args): 
        this = _extend_default.new_OverAfter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["AddedStaticMethod"] = lambda x: _extend_default.OverAfter_AddedStaticMethod
    if _newclass:AddedStaticMethod = staticmethod(_extend_default.OverAfter_AddedStaticMethod)
    def AddedMethod(self, *args): return _extend_default.OverAfter_AddedMethod(self, *args)
    __swig_destroy__ = _extend_default.delete_OverAfter
    __del__ = lambda self : None;
OverAfter_swigregister = _extend_default.OverAfter_swigregister
OverAfter_swigregister(OverAfter)

def OverAfter_AddedStaticMethod(*args):
  return _extend_default.OverAfter_AddedStaticMethod(*args)
OverAfter_AddedStaticMethod = _extend_default.OverAfter_AddedStaticMethod

class Override(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Override, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Override, name)
    __repr__ = _swig_repr
    def ride(self, *args): return _extend_default.Override_ride(self, *args)
    def over(self, *args): return _extend_default.Override_over(self, *args)
    def overload(self, *args): return _extend_default.Override_overload(self, *args)
    def __init__(self): 
        this = _extend_default.new_Override()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extend_default.delete_Override
    __del__ = lambda self : None;
Override_swigregister = _extend_default.Override_swigregister
Override_swigregister(Override)

class Base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Base, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _extend_default.delete_Base
    __del__ = lambda self : None;
    def realvirtual(self, a=0): return _extend_default.Base_realvirtual(self, a)
    def virtualmethod(self, a=0): return _extend_default.Base_virtualmethod(self, a)
    def nonvirtual(self, a=0): return _extend_default.Base_nonvirtual(self, a)
    __swig_getmethods__["static_method"] = lambda x: _extend_default.Base_static_method
    if _newclass:static_method = staticmethod(_extend_default.Base_static_method)
    def __init__(self): 
        this = _extend_default.new_Base()
        try: self.this.append(this)
        except: self.this = this
Base_swigregister = _extend_default.Base_swigregister
Base_swigregister(Base)

def Base_static_method(a=0):
  return _extend_default.Base_static_method(a)
Base_static_method = _extend_default.Base_static_method

class Derived(Base):
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Derived, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Derived, name)
    __repr__ = _swig_repr
    def virtualmethod(self, a=0): return _extend_default.Derived_virtualmethod(self, a)
    def nonvirtual(self, a=0): return _extend_default.Derived_nonvirtual(self, a)
    __swig_getmethods__["static_method"] = lambda x: _extend_default.Derived_static_method
    if _newclass:static_method = staticmethod(_extend_default.Derived_static_method)
    def realvirtual(self, a=0): return _extend_default.Derived_realvirtual(self, a)
    def __init__(self): 
        this = _extend_default.new_Derived()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extend_default.delete_Derived
    __del__ = lambda self : None;
Derived_swigregister = _extend_default.Derived_swigregister
Derived_swigregister(Derived)

def Derived_static_method(a=0):
  return _extend_default.Derived_static_method(a)
Derived_static_method = _extend_default.Derived_static_method

# This file is compatible with both classic and new-style classes.


