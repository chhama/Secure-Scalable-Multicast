# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cpp_enum', [dirname(__file__)])
        except ImportError:
            import _cpp_enum
            return _cpp_enum
        if fp is not None:
            try:
                _mod = imp.load_module('_cpp_enum', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cpp_enum = swig_import_helper()
    del swig_import_helper
else:
    import _cpp_enum
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


ENUM_ONE = _cpp_enum.ENUM_ONE
ENUM_TWO = _cpp_enum.ENUM_TWO
class StructWithEnums(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StructWithEnums, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StructWithEnums, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cpp_enum.new_StructWithEnums()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["some_enum"] = _cpp_enum.StructWithEnums_some_enum_set
    __swig_getmethods__["some_enum"] = _cpp_enum.StructWithEnums_some_enum_get
    if _newclass:some_enum = _swig_property(_cpp_enum.StructWithEnums_some_enum_get, _cpp_enum.StructWithEnums_some_enum_set)
    def enum_test1(self, *args): return _cpp_enum.StructWithEnums_enum_test1(self, *args)
    def enum_test2(self, *args): return _cpp_enum.StructWithEnums_enum_test2(self, *args)
    def enum_test3(self): return _cpp_enum.StructWithEnums_enum_test3(self)
    def enum_test4(self): return _cpp_enum.StructWithEnums_enum_test4(self)
    def enum_test5(self): return _cpp_enum.StructWithEnums_enum_test5(self)
    def enum_test6(self): return _cpp_enum.StructWithEnums_enum_test6(self)
    def enum_test7(self): return _cpp_enum.StructWithEnums_enum_test7(self)
    def enum_test8(self): return _cpp_enum.StructWithEnums_enum_test8(self)
    __swig_destroy__ = _cpp_enum.delete_StructWithEnums
    __del__ = lambda self : None;
StructWithEnums_swigregister = _cpp_enum.StructWithEnums_swigregister
StructWithEnums_swigregister(StructWithEnums)

class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    Hi = _cpp_enum.Foo_Hi
    Hello = _cpp_enum.Foo_Hello
    __swig_setmethods__["hola"] = _cpp_enum.Foo_hola_set
    __swig_getmethods__["hola"] = _cpp_enum.Foo_hola_get
    if _newclass:hola = _swig_property(_cpp_enum.Foo_hola_get, _cpp_enum.Foo_hola_set)
    def __init__(self): 
        this = _cpp_enum.new_Foo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cpp_enum.delete_Foo
    __del__ = lambda self : None;
Foo_swigregister = _cpp_enum.Foo_swigregister
Foo_swigregister(Foo)

Hi = _cpp_enum.Hi
Hello = _cpp_enum.Hello
PLAY = _cpp_enum.PLAY
STOP = _cpp_enum.STOP
# This file is compatible with both classic and new-style classes.

cvar = _cpp_enum.cvar

