# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_contract', [dirname(__file__)])
        except ImportError:
            import _contract
            return _contract
        if fp is not None:
            try:
                _mod = imp.load_module('_contract', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _contract = swig_import_helper()
    del swig_import_helper
else:
    import _contract
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def test_preassert(*args):
  return _contract.test_preassert(*args)
test_preassert = _contract.test_preassert

def test_postassert(*args):
  return _contract.test_postassert(*args)
test_postassert = _contract.test_postassert

def test_prepost(*args):
  return _contract.test_prepost(*args)
test_prepost = _contract.test_prepost
class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _contract.delete_Foo
    __del__ = lambda self : None;
    def test_preassert(self, *args): return _contract.Foo_test_preassert(self, *args)
    def test_postassert(self, *args): return _contract.Foo_test_postassert(self, *args)
    def test_prepost(self, *args): return _contract.Foo_test_prepost(self, *args)
    __swig_getmethods__["stest_prepost"] = lambda x: _contract.Foo_stest_prepost
    if _newclass:stest_prepost = staticmethod(_contract.Foo_stest_prepost)
    def __init__(self): 
        this = _contract.new_Foo()
        try: self.this.append(this)
        except: self.this = this
Foo_swigregister = _contract.Foo_swigregister
Foo_swigregister(Foo)

def Foo_stest_prepost(*args):
  return _contract.Foo_stest_prepost(*args)
Foo_stest_prepost = _contract.Foo_stest_prepost

class Bar(Foo):
    __swig_setmethods__ = {}
    for _s in [Foo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bar, name, value)
    __swig_getmethods__ = {}
    for _s in [Foo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bar, name)
    __repr__ = _swig_repr
    def test_prepost(self, *args): return _contract.Bar_test_prepost(self, *args)
    def __init__(self): 
        this = _contract.new_Bar()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _contract.delete_Bar
    __del__ = lambda self : None;
Bar_swigregister = _contract.Bar_swigregister
Bar_swigregister(Bar)

class A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _contract.delete_A
    __del__ = lambda self : None;
    def foo(self, *args): return _contract.A_foo(self, *args)
    def __init__(self): 
        this = _contract.new_A()
        try: self.this.append(this)
        except: self.this = this
A_swigregister = _contract.A_swigregister
A_swigregister(A)

class B(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, B, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, B, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _contract.delete_B
    __del__ = lambda self : None;
    def bar(self, *args): return _contract.B_bar(self, *args)
    def __init__(self): 
        this = _contract.new_B()
        try: self.this.append(this)
        except: self.this = this
B_swigregister = _contract.B_swigregister
B_swigregister(B)

class C(A,B):
    __swig_setmethods__ = {}
    for _s in [A,B]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, C, name, value)
    __swig_getmethods__ = {}
    for _s in [A,B]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, C, name)
    __repr__ = _swig_repr
    def foo(self, *args): return _contract.C_foo(self, *args)
    def bar(self, *args): return _contract.C_bar(self, *args)
    def __init__(self): 
        this = _contract.new_C()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _contract.delete_C
    __del__ = lambda self : None;
C_swigregister = _contract.C_swigregister
C_swigregister(C)

class D(C):
    __swig_setmethods__ = {}
    for _s in [C]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, D, name, value)
    __swig_getmethods__ = {}
    for _s in [C]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, D, name)
    __repr__ = _swig_repr
    def foo(self, *args): return _contract.D_foo(self, *args)
    def bar(self, *args): return _contract.D_bar(self, *args)
    def __init__(self): 
        this = _contract.new_D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _contract.delete_D
    __del__ = lambda self : None;
D_swigregister = _contract.D_swigregister
D_swigregister(D)

class E(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, E, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, E, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_i"] = _contract.E_m_i_set
    __swig_getmethods__["m_i"] = _contract.E_m_i_get
    if _newclass:m_i = _swig_property(_contract.E_m_i_get, _contract.E_m_i_set)
    def manipulate_i(self, *args): return _contract.E_manipulate_i(self, *args)
    def __init__(self): 
        this = _contract.new_E()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _contract.delete_E
    __del__ = lambda self : None;
E_swigregister = _contract.E_swigregister
E_swigregister(E)

class myClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, myClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, myClass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _contract.new_myClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _contract.delete_myClass
    __del__ = lambda self : None;
myClass_swigregister = _contract.myClass_swigregister
myClass_swigregister(myClass)

# This file is compatible with both classic and new-style classes.


