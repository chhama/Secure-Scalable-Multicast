# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_template_typedef_rec', [dirname(__file__)])
        except ImportError:
            import _template_typedef_rec
            return _template_typedef_rec
        if fp is not None:
            try:
                _mod = imp.load_module('_template_typedef_rec', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _template_typedef_rec = swig_import_helper()
    del swig_import_helper
else:
    import _template_typedef_rec
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class test_Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, test_Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, test_Array, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_typedef_rec.new_test_Array()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_typedef_rec.delete_test_Array
    __del__ = lambda self : None;
test_Array_swigregister = _template_typedef_rec.test_Array_swigregister
test_Array_swigregister(test_Array)

class ModelNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelNode, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_typedef_rec.new_ModelNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_typedef_rec.delete_ModelNode
    __del__ = lambda self : None;
ModelNode_swigregister = _template_typedef_rec.ModelNode_swigregister
ModelNode_swigregister(ModelNode)

class Model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_typedef_rec.new_Model()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_typedef_rec.delete_Model
    __del__ = lambda self : None;
Model_swigregister = _template_typedef_rec.Model_swigregister
Model_swigregister(Model)

class ModelTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelTree, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_typedef_rec.new_ModelTree()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_typedef_rec.delete_ModelTree
    __del__ = lambda self : None;
ModelTree_swigregister = _template_typedef_rec.ModelTree_swigregister
ModelTree_swigregister(ModelTree)

# This file is compatible with both classic and new-style classes.


