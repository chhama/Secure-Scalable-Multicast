# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_std_containers', [dirname(__file__)])
        except ImportError:
            import _std_containers
            return _std_containers
        if fp is not None:
            try:
                _mod = imp.load_module('_std_containers', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _std_containers = swig_import_helper()
    del swig_import_helper
else:
    import _std_containers
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _std_containers.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _std_containers.SwigPyIterator_value(self)
    def incr(self, n=1): return _std_containers.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _std_containers.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _std_containers.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _std_containers.SwigPyIterator_equal(self, *args)
    def copy(self): return _std_containers.SwigPyIterator_copy(self)
    def next(self): return _std_containers.SwigPyIterator_next(self)
    def __next__(self): return _std_containers.SwigPyIterator___next__(self)
    def previous(self): return _std_containers.SwigPyIterator_previous(self)
    def advance(self, *args): return _std_containers.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _std_containers.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _std_containers.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _std_containers.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _std_containers.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _std_containers.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _std_containers.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _std_containers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ccube(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccube, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccube, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.ccube_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.ccube___nonzero__(self)
    def __bool__(self): return _std_containers.ccube___bool__(self)
    def __len__(self): return _std_containers.ccube___len__(self)
    def pop(self): return _std_containers.ccube_pop(self)
    def __getslice__(self, *args): return _std_containers.ccube___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.ccube___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.ccube___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.ccube___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.ccube___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.ccube___setitem__(self, *args)
    def append(self, *args): return _std_containers.ccube_append(self, *args)
    def empty(self): return _std_containers.ccube_empty(self)
    def size(self): return _std_containers.ccube_size(self)
    def clear(self): return _std_containers.ccube_clear(self)
    def swap(self, *args): return _std_containers.ccube_swap(self, *args)
    def get_allocator(self): return _std_containers.ccube_get_allocator(self)
    def begin(self): return _std_containers.ccube_begin(self)
    def end(self): return _std_containers.ccube_end(self)
    def rbegin(self): return _std_containers.ccube_rbegin(self)
    def rend(self): return _std_containers.ccube_rend(self)
    def pop_back(self): return _std_containers.ccube_pop_back(self)
    def erase(self, *args): return _std_containers.ccube_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_ccube(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.ccube_push_back(self, *args)
    def front(self): return _std_containers.ccube_front(self)
    def back(self): return _std_containers.ccube_back(self)
    def assign(self, *args): return _std_containers.ccube_assign(self, *args)
    def resize(self, *args): return _std_containers.ccube_resize(self, *args)
    def insert(self, *args): return _std_containers.ccube_insert(self, *args)
    def reserve(self, *args): return _std_containers.ccube_reserve(self, *args)
    def capacity(self): return _std_containers.ccube_capacity(self)
    __swig_destroy__ = _std_containers.delete_ccube
    __del__ = lambda self : None;
ccube_swigregister = _std_containers.ccube_swigregister
ccube_swigregister(ccube)


def cident(*args):
  return _std_containers.cident(*args)
cident = _std_containers.cident
class C(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, C, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, C, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _std_containers.new_C()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _std_containers.delete_C
    __del__ = lambda self : None;
C_swigregister = _std_containers.C_swigregister
C_swigregister(C)

class map_si(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_si, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_si, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.map_si_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.map_si___nonzero__(self)
    def __bool__(self): return _std_containers.map_si___bool__(self)
    def __len__(self): return _std_containers.map_si___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _std_containers.map_si___getitem__(self, *args)
    def __delitem__(self, *args): return _std_containers.map_si___delitem__(self, *args)
    def has_key(self, *args): return _std_containers.map_si_has_key(self, *args)
    def keys(self): return _std_containers.map_si_keys(self)
    def values(self): return _std_containers.map_si_values(self)
    def items(self): return _std_containers.map_si_items(self)
    def __contains__(self, *args): return _std_containers.map_si___contains__(self, *args)
    def key_iterator(self): return _std_containers.map_si_key_iterator(self)
    def value_iterator(self): return _std_containers.map_si_value_iterator(self)
    def __setitem__(self, *args): return _std_containers.map_si___setitem__(self, *args)
    def asdict(self): return _std_containers.map_si_asdict(self)
    def __init__(self, *args): 
        this = _std_containers.new_map_si(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _std_containers.map_si_empty(self)
    def size(self): return _std_containers.map_si_size(self)
    def clear(self): return _std_containers.map_si_clear(self)
    def swap(self, *args): return _std_containers.map_si_swap(self, *args)
    def get_allocator(self): return _std_containers.map_si_get_allocator(self)
    def begin(self): return _std_containers.map_si_begin(self)
    def end(self): return _std_containers.map_si_end(self)
    def rbegin(self): return _std_containers.map_si_rbegin(self)
    def rend(self): return _std_containers.map_si_rend(self)
    def count(self, *args): return _std_containers.map_si_count(self, *args)
    def erase(self, *args): return _std_containers.map_si_erase(self, *args)
    def find(self, *args): return _std_containers.map_si_find(self, *args)
    def lower_bound(self, *args): return _std_containers.map_si_lower_bound(self, *args)
    def upper_bound(self, *args): return _std_containers.map_si_upper_bound(self, *args)
    __swig_destroy__ = _std_containers.delete_map_si
    __del__ = lambda self : None;
map_si_swigregister = _std_containers.map_si_swigregister
map_si_swigregister(map_si)

class pair_iC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_iC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_iC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _std_containers.new_pair_iC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _std_containers.pair_iC_first_set
    __swig_getmethods__["first"] = _std_containers.pair_iC_first_get
    if _newclass:first = _swig_property(_std_containers.pair_iC_first_get, _std_containers.pair_iC_first_set)
    __swig_setmethods__["second"] = _std_containers.pair_iC_second_set
    __swig_getmethods__["second"] = _std_containers.pair_iC_second_get
    if _newclass:second = _swig_property(_std_containers.pair_iC_second_get, _std_containers.pair_iC_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _std_containers.delete_pair_iC
    __del__ = lambda self : None;
pair_iC_swigregister = _std_containers.pair_iC_swigregister
pair_iC_swigregister(pair_iC)

class map_iC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_iC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_iC, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.map_iC_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.map_iC___nonzero__(self)
    def __bool__(self): return _std_containers.map_iC___bool__(self)
    def __len__(self): return _std_containers.map_iC___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _std_containers.map_iC___getitem__(self, *args)
    def __delitem__(self, *args): return _std_containers.map_iC___delitem__(self, *args)
    def has_key(self, *args): return _std_containers.map_iC_has_key(self, *args)
    def keys(self): return _std_containers.map_iC_keys(self)
    def values(self): return _std_containers.map_iC_values(self)
    def items(self): return _std_containers.map_iC_items(self)
    def __contains__(self, *args): return _std_containers.map_iC___contains__(self, *args)
    def key_iterator(self): return _std_containers.map_iC_key_iterator(self)
    def value_iterator(self): return _std_containers.map_iC_value_iterator(self)
    def __setitem__(self, *args): return _std_containers.map_iC___setitem__(self, *args)
    def asdict(self): return _std_containers.map_iC_asdict(self)
    def __init__(self, *args): 
        this = _std_containers.new_map_iC(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _std_containers.map_iC_empty(self)
    def size(self): return _std_containers.map_iC_size(self)
    def clear(self): return _std_containers.map_iC_clear(self)
    def swap(self, *args): return _std_containers.map_iC_swap(self, *args)
    def get_allocator(self): return _std_containers.map_iC_get_allocator(self)
    def begin(self): return _std_containers.map_iC_begin(self)
    def end(self): return _std_containers.map_iC_end(self)
    def rbegin(self): return _std_containers.map_iC_rbegin(self)
    def rend(self): return _std_containers.map_iC_rend(self)
    def count(self, *args): return _std_containers.map_iC_count(self, *args)
    def erase(self, *args): return _std_containers.map_iC_erase(self, *args)
    def find(self, *args): return _std_containers.map_iC_find(self, *args)
    def lower_bound(self, *args): return _std_containers.map_iC_lower_bound(self, *args)
    def upper_bound(self, *args): return _std_containers.map_iC_upper_bound(self, *args)
    __swig_destroy__ = _std_containers.delete_map_iC
    __del__ = lambda self : None;
map_iC_swigregister = _std_containers.map_iC_swigregister
map_iC_swigregister(map_iC)

class mmap_si(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mmap_si, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mmap_si, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.mmap_si_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.mmap_si___nonzero__(self)
    def __bool__(self): return _std_containers.mmap_si___bool__(self)
    def __len__(self): return _std_containers.mmap_si___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _std_containers.mmap_si___getitem__(self, *args)
    def __delitem__(self, *args): return _std_containers.mmap_si___delitem__(self, *args)
    def has_key(self, *args): return _std_containers.mmap_si_has_key(self, *args)
    def keys(self): return _std_containers.mmap_si_keys(self)
    def values(self): return _std_containers.mmap_si_values(self)
    def items(self): return _std_containers.mmap_si_items(self)
    def __contains__(self, *args): return _std_containers.mmap_si___contains__(self, *args)
    def key_iterator(self): return _std_containers.mmap_si_key_iterator(self)
    def value_iterator(self): return _std_containers.mmap_si_value_iterator(self)
    def __setitem__(self, *args): return _std_containers.mmap_si___setitem__(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_mmap_si(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _std_containers.mmap_si_empty(self)
    def size(self): return _std_containers.mmap_si_size(self)
    def clear(self): return _std_containers.mmap_si_clear(self)
    def swap(self, *args): return _std_containers.mmap_si_swap(self, *args)
    def get_allocator(self): return _std_containers.mmap_si_get_allocator(self)
    def begin(self): return _std_containers.mmap_si_begin(self)
    def end(self): return _std_containers.mmap_si_end(self)
    def rbegin(self): return _std_containers.mmap_si_rbegin(self)
    def rend(self): return _std_containers.mmap_si_rend(self)
    def count(self, *args): return _std_containers.mmap_si_count(self, *args)
    def erase(self, *args): return _std_containers.mmap_si_erase(self, *args)
    def find(self, *args): return _std_containers.mmap_si_find(self, *args)
    def lower_bound(self, *args): return _std_containers.mmap_si_lower_bound(self, *args)
    def upper_bound(self, *args): return _std_containers.mmap_si_upper_bound(self, *args)
    def equal_range(self, *args): return _std_containers.mmap_si_equal_range(self, *args)
    __swig_destroy__ = _std_containers.delete_mmap_si
    __del__ = lambda self : None;
mmap_si_swigregister = _std_containers.mmap_si_swigregister
mmap_si_swigregister(mmap_si)

class set_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, set_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, set_i, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.set_i_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.set_i___nonzero__(self)
    def __bool__(self): return _std_containers.set_i___bool__(self)
    def __len__(self): return _std_containers.set_i___len__(self)
    def append(self, *args): return _std_containers.set_i_append(self, *args)
    def __contains__(self, *args): return _std_containers.set_i___contains__(self, *args)
    def __getitem__(self, *args): return _std_containers.set_i___getitem__(self, *args)
    def add(self, *args): return _std_containers.set_i_add(self, *args)
    def discard(self, *args): return _std_containers.set_i_discard(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_set_i(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _std_containers.set_i_empty(self)
    def size(self): return _std_containers.set_i_size(self)
    def clear(self): return _std_containers.set_i_clear(self)
    def swap(self, *args): return _std_containers.set_i_swap(self, *args)
    def count(self, *args): return _std_containers.set_i_count(self, *args)
    def begin(self): return _std_containers.set_i_begin(self)
    def end(self): return _std_containers.set_i_end(self)
    def rbegin(self): return _std_containers.set_i_rbegin(self)
    def rend(self): return _std_containers.set_i_rend(self)
    def erase(self, *args): return _std_containers.set_i_erase(self, *args)
    def find(self, *args): return _std_containers.set_i_find(self, *args)
    def lower_bound(self, *args): return _std_containers.set_i_lower_bound(self, *args)
    def upper_bound(self, *args): return _std_containers.set_i_upper_bound(self, *args)
    def equal_range(self, *args): return _std_containers.set_i_equal_range(self, *args)
    def insert(self, *args): return _std_containers.set_i_insert(self, *args)
    __swig_destroy__ = _std_containers.delete_set_i
    __del__ = lambda self : None;
set_i_swigregister = _std_containers.set_i_swigregister
set_i_swigregister(set_i)

class multiset_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, multiset_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, multiset_i, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.multiset_i_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.multiset_i___nonzero__(self)
    def __bool__(self): return _std_containers.multiset_i___bool__(self)
    def __len__(self): return _std_containers.multiset_i___len__(self)
    def append(self, *args): return _std_containers.multiset_i_append(self, *args)
    def __contains__(self, *args): return _std_containers.multiset_i___contains__(self, *args)
    def __getitem__(self, *args): return _std_containers.multiset_i___getitem__(self, *args)
    def add(self, *args): return _std_containers.multiset_i_add(self, *args)
    def discard(self, *args): return _std_containers.multiset_i_discard(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_multiset_i(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _std_containers.multiset_i_empty(self)
    def size(self): return _std_containers.multiset_i_size(self)
    def clear(self): return _std_containers.multiset_i_clear(self)
    def swap(self, *args): return _std_containers.multiset_i_swap(self, *args)
    def count(self, *args): return _std_containers.multiset_i_count(self, *args)
    def begin(self): return _std_containers.multiset_i_begin(self)
    def end(self): return _std_containers.multiset_i_end(self)
    def rbegin(self): return _std_containers.multiset_i_rbegin(self)
    def rend(self): return _std_containers.multiset_i_rend(self)
    def erase(self, *args): return _std_containers.multiset_i_erase(self, *args)
    def find(self, *args): return _std_containers.multiset_i_find(self, *args)
    def lower_bound(self, *args): return _std_containers.multiset_i_lower_bound(self, *args)
    def upper_bound(self, *args): return _std_containers.multiset_i_upper_bound(self, *args)
    def equal_range(self, *args): return _std_containers.multiset_i_equal_range(self, *args)
    __swig_destroy__ = _std_containers.delete_multiset_i
    __del__ = lambda self : None;
multiset_i_swigregister = _std_containers.multiset_i_swigregister
multiset_i_swigregister(multiset_i)

class list_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list_i, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.list_i_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.list_i___nonzero__(self)
    def __bool__(self): return _std_containers.list_i___bool__(self)
    def __len__(self): return _std_containers.list_i___len__(self)
    def pop(self): return _std_containers.list_i_pop(self)
    def __getslice__(self, *args): return _std_containers.list_i___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.list_i___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.list_i___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.list_i___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.list_i___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.list_i___setitem__(self, *args)
    def append(self, *args): return _std_containers.list_i_append(self, *args)
    def empty(self): return _std_containers.list_i_empty(self)
    def size(self): return _std_containers.list_i_size(self)
    def clear(self): return _std_containers.list_i_clear(self)
    def swap(self, *args): return _std_containers.list_i_swap(self, *args)
    def get_allocator(self): return _std_containers.list_i_get_allocator(self)
    def begin(self): return _std_containers.list_i_begin(self)
    def end(self): return _std_containers.list_i_end(self)
    def rbegin(self): return _std_containers.list_i_rbegin(self)
    def rend(self): return _std_containers.list_i_rend(self)
    def pop_back(self): return _std_containers.list_i_pop_back(self)
    def erase(self, *args): return _std_containers.list_i_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_list_i(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.list_i_push_back(self, *args)
    def front(self): return _std_containers.list_i_front(self)
    def back(self): return _std_containers.list_i_back(self)
    def assign(self, *args): return _std_containers.list_i_assign(self, *args)
    def resize(self, *args): return _std_containers.list_i_resize(self, *args)
    def insert(self, *args): return _std_containers.list_i_insert(self, *args)
    def pop_front(self): return _std_containers.list_i_pop_front(self)
    def push_front(self, *args): return _std_containers.list_i_push_front(self, *args)
    def reverse(self): return _std_containers.list_i_reverse(self)
    __swig_destroy__ = _std_containers.delete_list_i
    __del__ = lambda self : None;
list_i_swigregister = _std_containers.list_i_swigregister
list_i_swigregister(list_i)

class deque_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, deque_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, deque_i, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.deque_i_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.deque_i___nonzero__(self)
    def __bool__(self): return _std_containers.deque_i___bool__(self)
    def __len__(self): return _std_containers.deque_i___len__(self)
    def pop(self): return _std_containers.deque_i_pop(self)
    def __getslice__(self, *args): return _std_containers.deque_i___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.deque_i___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.deque_i___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.deque_i___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.deque_i___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.deque_i___setitem__(self, *args)
    def append(self, *args): return _std_containers.deque_i_append(self, *args)
    def empty(self): return _std_containers.deque_i_empty(self)
    def size(self): return _std_containers.deque_i_size(self)
    def clear(self): return _std_containers.deque_i_clear(self)
    def swap(self, *args): return _std_containers.deque_i_swap(self, *args)
    def get_allocator(self): return _std_containers.deque_i_get_allocator(self)
    def begin(self): return _std_containers.deque_i_begin(self)
    def end(self): return _std_containers.deque_i_end(self)
    def rbegin(self): return _std_containers.deque_i_rbegin(self)
    def rend(self): return _std_containers.deque_i_rend(self)
    def pop_back(self): return _std_containers.deque_i_pop_back(self)
    def erase(self, *args): return _std_containers.deque_i_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_deque_i(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.deque_i_push_back(self, *args)
    def front(self): return _std_containers.deque_i_front(self)
    def back(self): return _std_containers.deque_i_back(self)
    def assign(self, *args): return _std_containers.deque_i_assign(self, *args)
    def resize(self, *args): return _std_containers.deque_i_resize(self, *args)
    def insert(self, *args): return _std_containers.deque_i_insert(self, *args)
    def pop_front(self): return _std_containers.deque_i_pop_front(self)
    def push_front(self, *args): return _std_containers.deque_i_push_front(self, *args)
    __swig_destroy__ = _std_containers.delete_deque_i
    __del__ = lambda self : None;
deque_i_swigregister = _std_containers.deque_i_swigregister
deque_i_swigregister(deque_i)

class vector_b(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_b, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.vector_b_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.vector_b___nonzero__(self)
    def __bool__(self): return _std_containers.vector_b___bool__(self)
    def __len__(self): return _std_containers.vector_b___len__(self)
    def pop(self): return _std_containers.vector_b_pop(self)
    def __getslice__(self, *args): return _std_containers.vector_b___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.vector_b___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.vector_b___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.vector_b___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.vector_b___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.vector_b___setitem__(self, *args)
    def append(self, *args): return _std_containers.vector_b_append(self, *args)
    def empty(self): return _std_containers.vector_b_empty(self)
    def size(self): return _std_containers.vector_b_size(self)
    def clear(self): return _std_containers.vector_b_clear(self)
    def swap(self, *args): return _std_containers.vector_b_swap(self, *args)
    def get_allocator(self): return _std_containers.vector_b_get_allocator(self)
    def begin(self): return _std_containers.vector_b_begin(self)
    def end(self): return _std_containers.vector_b_end(self)
    def rbegin(self): return _std_containers.vector_b_rbegin(self)
    def rend(self): return _std_containers.vector_b_rend(self)
    def pop_back(self): return _std_containers.vector_b_pop_back(self)
    def erase(self, *args): return _std_containers.vector_b_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_vector_b(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.vector_b_push_back(self, *args)
    def front(self): return _std_containers.vector_b_front(self)
    def back(self): return _std_containers.vector_b_back(self)
    def assign(self, *args): return _std_containers.vector_b_assign(self, *args)
    def resize(self, *args): return _std_containers.vector_b_resize(self, *args)
    def insert(self, *args): return _std_containers.vector_b_insert(self, *args)
    def reserve(self, *args): return _std_containers.vector_b_reserve(self, *args)
    def capacity(self): return _std_containers.vector_b_capacity(self)
    __swig_destroy__ = _std_containers.delete_vector_b
    __del__ = lambda self : None;
vector_b_swigregister = _std_containers.vector_b_swigregister
vector_b_swigregister(vector_b)

class vector_i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_i, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.vector_i_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.vector_i___nonzero__(self)
    def __bool__(self): return _std_containers.vector_i___bool__(self)
    def __len__(self): return _std_containers.vector_i___len__(self)
    def pop(self): return _std_containers.vector_i_pop(self)
    def __getslice__(self, *args): return _std_containers.vector_i___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.vector_i___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.vector_i___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.vector_i___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.vector_i___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.vector_i___setitem__(self, *args)
    def append(self, *args): return _std_containers.vector_i_append(self, *args)
    def empty(self): return _std_containers.vector_i_empty(self)
    def size(self): return _std_containers.vector_i_size(self)
    def clear(self): return _std_containers.vector_i_clear(self)
    def swap(self, *args): return _std_containers.vector_i_swap(self, *args)
    def get_allocator(self): return _std_containers.vector_i_get_allocator(self)
    def begin(self): return _std_containers.vector_i_begin(self)
    def end(self): return _std_containers.vector_i_end(self)
    def rbegin(self): return _std_containers.vector_i_rbegin(self)
    def rend(self): return _std_containers.vector_i_rend(self)
    def pop_back(self): return _std_containers.vector_i_pop_back(self)
    def erase(self, *args): return _std_containers.vector_i_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_vector_i(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.vector_i_push_back(self, *args)
    def front(self): return _std_containers.vector_i_front(self)
    def back(self): return _std_containers.vector_i_back(self)
    def assign(self, *args): return _std_containers.vector_i_assign(self, *args)
    def resize(self, *args): return _std_containers.vector_i_resize(self, *args)
    def insert(self, *args): return _std_containers.vector_i_insert(self, *args)
    def reserve(self, *args): return _std_containers.vector_i_reserve(self, *args)
    def capacity(self): return _std_containers.vector_i_capacity(self)
    __swig_destroy__ = _std_containers.delete_vector_i
    __del__ = lambda self : None;
vector_i_swigregister = _std_containers.vector_i_swigregister
vector_i_swigregister(vector_i)

class vector_c(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_c, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_c, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.vector_c_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.vector_c___nonzero__(self)
    def __bool__(self): return _std_containers.vector_c___bool__(self)
    def __len__(self): return _std_containers.vector_c___len__(self)
    def pop(self): return _std_containers.vector_c_pop(self)
    def __getslice__(self, *args): return _std_containers.vector_c___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.vector_c___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.vector_c___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.vector_c___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.vector_c___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.vector_c___setitem__(self, *args)
    def append(self, *args): return _std_containers.vector_c_append(self, *args)
    def empty(self): return _std_containers.vector_c_empty(self)
    def size(self): return _std_containers.vector_c_size(self)
    def clear(self): return _std_containers.vector_c_clear(self)
    def swap(self, *args): return _std_containers.vector_c_swap(self, *args)
    def get_allocator(self): return _std_containers.vector_c_get_allocator(self)
    def begin(self): return _std_containers.vector_c_begin(self)
    def end(self): return _std_containers.vector_c_end(self)
    def rbegin(self): return _std_containers.vector_c_rbegin(self)
    def rend(self): return _std_containers.vector_c_rend(self)
    def pop_back(self): return _std_containers.vector_c_pop_back(self)
    def erase(self, *args): return _std_containers.vector_c_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_vector_c(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.vector_c_push_back(self, *args)
    def front(self): return _std_containers.vector_c_front(self)
    def back(self): return _std_containers.vector_c_back(self)
    def assign(self, *args): return _std_containers.vector_c_assign(self, *args)
    def resize(self, *args): return _std_containers.vector_c_resize(self, *args)
    def insert(self, *args): return _std_containers.vector_c_insert(self, *args)
    def reserve(self, *args): return _std_containers.vector_c_reserve(self, *args)
    def capacity(self): return _std_containers.vector_c_capacity(self)
    __swig_destroy__ = _std_containers.delete_vector_c
    __del__ = lambda self : None;
vector_c_swigregister = _std_containers.vector_c_swigregister
vector_c_swigregister(vector_c)

class vector_ui(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_ui, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_ui, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.vector_ui_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.vector_ui___nonzero__(self)
    def __bool__(self): return _std_containers.vector_ui___bool__(self)
    def __len__(self): return _std_containers.vector_ui___len__(self)
    def pop(self): return _std_containers.vector_ui_pop(self)
    def __getslice__(self, *args): return _std_containers.vector_ui___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.vector_ui___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.vector_ui___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.vector_ui___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.vector_ui___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.vector_ui___setitem__(self, *args)
    def append(self, *args): return _std_containers.vector_ui_append(self, *args)
    def empty(self): return _std_containers.vector_ui_empty(self)
    def size(self): return _std_containers.vector_ui_size(self)
    def clear(self): return _std_containers.vector_ui_clear(self)
    def swap(self, *args): return _std_containers.vector_ui_swap(self, *args)
    def get_allocator(self): return _std_containers.vector_ui_get_allocator(self)
    def begin(self): return _std_containers.vector_ui_begin(self)
    def end(self): return _std_containers.vector_ui_end(self)
    def rbegin(self): return _std_containers.vector_ui_rbegin(self)
    def rend(self): return _std_containers.vector_ui_rend(self)
    def pop_back(self): return _std_containers.vector_ui_pop_back(self)
    def erase(self, *args): return _std_containers.vector_ui_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_vector_ui(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.vector_ui_push_back(self, *args)
    def front(self): return _std_containers.vector_ui_front(self)
    def back(self): return _std_containers.vector_ui_back(self)
    def assign(self, *args): return _std_containers.vector_ui_assign(self, *args)
    def resize(self, *args): return _std_containers.vector_ui_resize(self, *args)
    def insert(self, *args): return _std_containers.vector_ui_insert(self, *args)
    def reserve(self, *args): return _std_containers.vector_ui_reserve(self, *args)
    def capacity(self): return _std_containers.vector_ui_capacity(self)
    __swig_destroy__ = _std_containers.delete_vector_ui
    __del__ = lambda self : None;
vector_ui_swigregister = _std_containers.vector_ui_swigregister
vector_ui_swigregister(vector_ui)

class bmatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bmatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bmatrix, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.bmatrix_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.bmatrix___nonzero__(self)
    def __bool__(self): return _std_containers.bmatrix___bool__(self)
    def __len__(self): return _std_containers.bmatrix___len__(self)
    def pop(self): return _std_containers.bmatrix_pop(self)
    def __getslice__(self, *args): return _std_containers.bmatrix___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.bmatrix___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.bmatrix___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.bmatrix___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.bmatrix___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.bmatrix___setitem__(self, *args)
    def append(self, *args): return _std_containers.bmatrix_append(self, *args)
    def empty(self): return _std_containers.bmatrix_empty(self)
    def size(self): return _std_containers.bmatrix_size(self)
    def clear(self): return _std_containers.bmatrix_clear(self)
    def swap(self, *args): return _std_containers.bmatrix_swap(self, *args)
    def get_allocator(self): return _std_containers.bmatrix_get_allocator(self)
    def begin(self): return _std_containers.bmatrix_begin(self)
    def end(self): return _std_containers.bmatrix_end(self)
    def rbegin(self): return _std_containers.bmatrix_rbegin(self)
    def rend(self): return _std_containers.bmatrix_rend(self)
    def pop_back(self): return _std_containers.bmatrix_pop_back(self)
    def erase(self, *args): return _std_containers.bmatrix_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_bmatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.bmatrix_push_back(self, *args)
    def front(self): return _std_containers.bmatrix_front(self)
    def back(self): return _std_containers.bmatrix_back(self)
    def assign(self, *args): return _std_containers.bmatrix_assign(self, *args)
    def resize(self, *args): return _std_containers.bmatrix_resize(self, *args)
    def insert(self, *args): return _std_containers.bmatrix_insert(self, *args)
    def reserve(self, *args): return _std_containers.bmatrix_reserve(self, *args)
    def capacity(self): return _std_containers.bmatrix_capacity(self)
    __swig_destroy__ = _std_containers.delete_bmatrix
    __del__ = lambda self : None;
bmatrix_swigregister = _std_containers.bmatrix_swigregister
bmatrix_swigregister(bmatrix)

class imatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imatrix, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.imatrix_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.imatrix___nonzero__(self)
    def __bool__(self): return _std_containers.imatrix___bool__(self)
    def __len__(self): return _std_containers.imatrix___len__(self)
    def pop(self): return _std_containers.imatrix_pop(self)
    def __getslice__(self, *args): return _std_containers.imatrix___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.imatrix___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.imatrix___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.imatrix___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.imatrix___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.imatrix___setitem__(self, *args)
    def append(self, *args): return _std_containers.imatrix_append(self, *args)
    def empty(self): return _std_containers.imatrix_empty(self)
    def size(self): return _std_containers.imatrix_size(self)
    def clear(self): return _std_containers.imatrix_clear(self)
    def swap(self, *args): return _std_containers.imatrix_swap(self, *args)
    def get_allocator(self): return _std_containers.imatrix_get_allocator(self)
    def begin(self): return _std_containers.imatrix_begin(self)
    def end(self): return _std_containers.imatrix_end(self)
    def rbegin(self): return _std_containers.imatrix_rbegin(self)
    def rend(self): return _std_containers.imatrix_rend(self)
    def pop_back(self): return _std_containers.imatrix_pop_back(self)
    def erase(self, *args): return _std_containers.imatrix_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_imatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.imatrix_push_back(self, *args)
    def front(self): return _std_containers.imatrix_front(self)
    def back(self): return _std_containers.imatrix_back(self)
    def assign(self, *args): return _std_containers.imatrix_assign(self, *args)
    def resize(self, *args): return _std_containers.imatrix_resize(self, *args)
    def insert(self, *args): return _std_containers.imatrix_insert(self, *args)
    def reserve(self, *args): return _std_containers.imatrix_reserve(self, *args)
    def capacity(self): return _std_containers.imatrix_capacity(self)
    __swig_destroy__ = _std_containers.delete_imatrix
    __del__ = lambda self : None;
imatrix_swigregister = _std_containers.imatrix_swigregister
imatrix_swigregister(imatrix)

class cmatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmatrix, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.cmatrix_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.cmatrix___nonzero__(self)
    def __bool__(self): return _std_containers.cmatrix___bool__(self)
    def __len__(self): return _std_containers.cmatrix___len__(self)
    def pop(self): return _std_containers.cmatrix_pop(self)
    def __getslice__(self, *args): return _std_containers.cmatrix___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.cmatrix___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.cmatrix___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.cmatrix___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.cmatrix___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.cmatrix___setitem__(self, *args)
    def append(self, *args): return _std_containers.cmatrix_append(self, *args)
    def empty(self): return _std_containers.cmatrix_empty(self)
    def size(self): return _std_containers.cmatrix_size(self)
    def clear(self): return _std_containers.cmatrix_clear(self)
    def swap(self, *args): return _std_containers.cmatrix_swap(self, *args)
    def get_allocator(self): return _std_containers.cmatrix_get_allocator(self)
    def begin(self): return _std_containers.cmatrix_begin(self)
    def end(self): return _std_containers.cmatrix_end(self)
    def rbegin(self): return _std_containers.cmatrix_rbegin(self)
    def rend(self): return _std_containers.cmatrix_rend(self)
    def pop_back(self): return _std_containers.cmatrix_pop_back(self)
    def erase(self, *args): return _std_containers.cmatrix_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_cmatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.cmatrix_push_back(self, *args)
    def front(self): return _std_containers.cmatrix_front(self)
    def back(self): return _std_containers.cmatrix_back(self)
    def assign(self, *args): return _std_containers.cmatrix_assign(self, *args)
    def resize(self, *args): return _std_containers.cmatrix_resize(self, *args)
    def insert(self, *args): return _std_containers.cmatrix_insert(self, *args)
    def reserve(self, *args): return _std_containers.cmatrix_reserve(self, *args)
    def capacity(self): return _std_containers.cmatrix_capacity(self)
    __swig_destroy__ = _std_containers.delete_cmatrix
    __del__ = lambda self : None;
cmatrix_swigregister = _std_containers.cmatrix_swigregister
cmatrix_swigregister(cmatrix)


def midenti(*args):
  return _std_containers.midenti(*args)
midenti = _std_containers.midenti

def midentb(*args):
  return _std_containers.midentb(*args)
midentb = _std_containers.midentb

def mapidentc(*args):
  return _std_containers.mapidentc(*args)
mapidentc = _std_containers.mapidentc

def mapidenti(*args):
  return _std_containers.mapidenti(*args)
mapidenti = _std_containers.mapidenti

def mapident(*args):
  return _std_containers.mapident(*args)
mapident = _std_containers.mapident

def vident(*args):
  return _std_containers.vident(*args)
vident = _std_containers.vident

def sident(*args):
  return _std_containers.sident(*args)
sident = _std_containers.sident

def videntu(*args):
  return _std_containers.videntu(*args)
videntu = _std_containers.videntu

def get_elem(*args):
  return _std_containers.get_elem(*args)
get_elem = _std_containers.get_elem

def pident(*args):
  return _std_containers.pident(*args)
pident = _std_containers.pident

def v_inout(*args):
  return _std_containers.v_inout(*args)
v_inout = _std_containers.v_inout

def v_inout2(*args):
  return _std_containers.v_inout2(*args)
v_inout2 = _std_containers.v_inout2
class Param_c(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param_c, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Param_c, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _std_containers.new_Param_c()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _std_containers.delete_Param_c
    __del__ = lambda self : None;
Param_c_swigregister = _std_containers.Param_c_swigregister
Param_c_swigregister(Param_c)


def hello(*args):
  return _std_containers.hello(*args)
hello = _std_containers.hello
class A(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, A, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, A, name)
    __repr__ = _swig_repr
    def __init__(self, aa=0): 
        this = _std_containers.new_A(aa)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["a"] = _std_containers.A_a_set
    __swig_getmethods__["a"] = _std_containers.A_a_get
    if _newclass:a = _swig_property(_std_containers.A_a_get, _std_containers.A_a_set)
    __swig_destroy__ = _std_containers.delete_A
    __del__ = lambda self : None;
A_swigregister = _std_containers.A_swigregister
A_swigregister(A)

class pair_iA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_iA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_iA, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _std_containers.new_pair_iA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _std_containers.pair_iA_first_set
    __swig_getmethods__["first"] = _std_containers.pair_iA_first_get
    if _newclass:first = _swig_property(_std_containers.pair_iA_first_get, _std_containers.pair_iA_first_set)
    __swig_setmethods__["second"] = _std_containers.pair_iA_second_set
    __swig_getmethods__["second"] = _std_containers.pair_iA_second_get
    if _newclass:second = _swig_property(_std_containers.pair_iA_second_get, _std_containers.pair_iA_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _std_containers.delete_pair_iA
    __del__ = lambda self : None;
pair_iA_swigregister = _std_containers.pair_iA_swigregister
pair_iA_swigregister(pair_iA)

class vector_piA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_piA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_piA, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.vector_piA_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.vector_piA___nonzero__(self)
    def __bool__(self): return _std_containers.vector_piA___bool__(self)
    def __len__(self): return _std_containers.vector_piA___len__(self)
    def pop(self): return _std_containers.vector_piA_pop(self)
    def __getslice__(self, *args): return _std_containers.vector_piA___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.vector_piA___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.vector_piA___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.vector_piA___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.vector_piA___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.vector_piA___setitem__(self, *args)
    def append(self, *args): return _std_containers.vector_piA_append(self, *args)
    def empty(self): return _std_containers.vector_piA_empty(self)
    def size(self): return _std_containers.vector_piA_size(self)
    def clear(self): return _std_containers.vector_piA_clear(self)
    def swap(self, *args): return _std_containers.vector_piA_swap(self, *args)
    def get_allocator(self): return _std_containers.vector_piA_get_allocator(self)
    def begin(self): return _std_containers.vector_piA_begin(self)
    def end(self): return _std_containers.vector_piA_end(self)
    def rbegin(self): return _std_containers.vector_piA_rbegin(self)
    def rend(self): return _std_containers.vector_piA_rend(self)
    def pop_back(self): return _std_containers.vector_piA_pop_back(self)
    def erase(self, *args): return _std_containers.vector_piA_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_vector_piA(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.vector_piA_push_back(self, *args)
    def front(self): return _std_containers.vector_piA_front(self)
    def back(self): return _std_containers.vector_piA_back(self)
    def assign(self, *args): return _std_containers.vector_piA_assign(self, *args)
    def resize(self, *args): return _std_containers.vector_piA_resize(self, *args)
    def insert(self, *args): return _std_containers.vector_piA_insert(self, *args)
    def reserve(self, *args): return _std_containers.vector_piA_reserve(self, *args)
    def capacity(self): return _std_containers.vector_piA_capacity(self)
    __swig_destroy__ = _std_containers.delete_vector_piA
    __del__ = lambda self : None;
vector_piA_swigregister = _std_containers.vector_piA_swigregister
vector_piA_swigregister(vector_piA)


def ident(*args):
  return _std_containers.ident(*args)
ident = _std_containers.ident

def pia_vident(*args):
  return _std_containers.pia_vident(*args)
pia_vident = _std_containers.pia_vident
class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _std_containers.new_Foo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _std_containers.delete_Foo
    __del__ = lambda self : None;
Foo_swigregister = _std_containers.Foo_swigregister
Foo_swigregister(Foo)

class vector_Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_Foo, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.vector_Foo_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.vector_Foo___nonzero__(self)
    def __bool__(self): return _std_containers.vector_Foo___bool__(self)
    def __len__(self): return _std_containers.vector_Foo___len__(self)
    def pop(self): return _std_containers.vector_Foo_pop(self)
    def __getslice__(self, *args): return _std_containers.vector_Foo___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.vector_Foo___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.vector_Foo___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.vector_Foo___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.vector_Foo___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.vector_Foo___setitem__(self, *args)
    def append(self, *args): return _std_containers.vector_Foo_append(self, *args)
    def empty(self): return _std_containers.vector_Foo_empty(self)
    def size(self): return _std_containers.vector_Foo_size(self)
    def clear(self): return _std_containers.vector_Foo_clear(self)
    def swap(self, *args): return _std_containers.vector_Foo_swap(self, *args)
    def get_allocator(self): return _std_containers.vector_Foo_get_allocator(self)
    def begin(self): return _std_containers.vector_Foo_begin(self)
    def end(self): return _std_containers.vector_Foo_end(self)
    def rbegin(self): return _std_containers.vector_Foo_rbegin(self)
    def rend(self): return _std_containers.vector_Foo_rend(self)
    def pop_back(self): return _std_containers.vector_Foo_pop_back(self)
    def erase(self, *args): return _std_containers.vector_Foo_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_vector_Foo(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.vector_Foo_push_back(self, *args)
    def front(self): return _std_containers.vector_Foo_front(self)
    def back(self): return _std_containers.vector_Foo_back(self)
    def assign(self, *args): return _std_containers.vector_Foo_assign(self, *args)
    def resize(self, *args): return _std_containers.vector_Foo_resize(self, *args)
    def insert(self, *args): return _std_containers.vector_Foo_insert(self, *args)
    def reserve(self, *args): return _std_containers.vector_Foo_reserve(self, *args)
    def capacity(self): return _std_containers.vector_Foo_capacity(self)
    __swig_destroy__ = _std_containers.delete_vector_Foo
    __del__ = lambda self : None;
vector_Foo_swigregister = _std_containers.vector_Foo_swigregister
vector_Foo_swigregister(vector_Foo)

class deque_Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, deque_Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, deque_Foo, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.deque_Foo_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.deque_Foo___nonzero__(self)
    def __bool__(self): return _std_containers.deque_Foo___bool__(self)
    def __len__(self): return _std_containers.deque_Foo___len__(self)
    def pop(self): return _std_containers.deque_Foo_pop(self)
    def __getslice__(self, *args): return _std_containers.deque_Foo___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.deque_Foo___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.deque_Foo___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.deque_Foo___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.deque_Foo___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.deque_Foo___setitem__(self, *args)
    def append(self, *args): return _std_containers.deque_Foo_append(self, *args)
    def empty(self): return _std_containers.deque_Foo_empty(self)
    def size(self): return _std_containers.deque_Foo_size(self)
    def clear(self): return _std_containers.deque_Foo_clear(self)
    def swap(self, *args): return _std_containers.deque_Foo_swap(self, *args)
    def get_allocator(self): return _std_containers.deque_Foo_get_allocator(self)
    def begin(self): return _std_containers.deque_Foo_begin(self)
    def end(self): return _std_containers.deque_Foo_end(self)
    def rbegin(self): return _std_containers.deque_Foo_rbegin(self)
    def rend(self): return _std_containers.deque_Foo_rend(self)
    def pop_back(self): return _std_containers.deque_Foo_pop_back(self)
    def erase(self, *args): return _std_containers.deque_Foo_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_deque_Foo(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.deque_Foo_push_back(self, *args)
    def front(self): return _std_containers.deque_Foo_front(self)
    def back(self): return _std_containers.deque_Foo_back(self)
    def assign(self, *args): return _std_containers.deque_Foo_assign(self, *args)
    def resize(self, *args): return _std_containers.deque_Foo_resize(self, *args)
    def insert(self, *args): return _std_containers.deque_Foo_insert(self, *args)
    def pop_front(self): return _std_containers.deque_Foo_pop_front(self)
    def push_front(self, *args): return _std_containers.deque_Foo_push_front(self, *args)
    __swig_destroy__ = _std_containers.delete_deque_Foo
    __del__ = lambda self : None;
deque_Foo_swigregister = _std_containers.deque_Foo_swigregister
deque_Foo_swigregister(deque_Foo)

class list_Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list_Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list_Foo, name)
    __repr__ = _swig_repr
    def iterator(self): return _std_containers.list_Foo_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _std_containers.list_Foo___nonzero__(self)
    def __bool__(self): return _std_containers.list_Foo___bool__(self)
    def __len__(self): return _std_containers.list_Foo___len__(self)
    def pop(self): return _std_containers.list_Foo_pop(self)
    def __getslice__(self, *args): return _std_containers.list_Foo___getslice__(self, *args)
    def __setslice__(self, *args): return _std_containers.list_Foo___setslice__(self, *args)
    def __delslice__(self, *args): return _std_containers.list_Foo___delslice__(self, *args)
    def __delitem__(self, *args): return _std_containers.list_Foo___delitem__(self, *args)
    def __getitem__(self, *args): return _std_containers.list_Foo___getitem__(self, *args)
    def __setitem__(self, *args): return _std_containers.list_Foo___setitem__(self, *args)
    def append(self, *args): return _std_containers.list_Foo_append(self, *args)
    def empty(self): return _std_containers.list_Foo_empty(self)
    def size(self): return _std_containers.list_Foo_size(self)
    def clear(self): return _std_containers.list_Foo_clear(self)
    def swap(self, *args): return _std_containers.list_Foo_swap(self, *args)
    def get_allocator(self): return _std_containers.list_Foo_get_allocator(self)
    def begin(self): return _std_containers.list_Foo_begin(self)
    def end(self): return _std_containers.list_Foo_end(self)
    def rbegin(self): return _std_containers.list_Foo_rbegin(self)
    def rend(self): return _std_containers.list_Foo_rend(self)
    def pop_back(self): return _std_containers.list_Foo_pop_back(self)
    def erase(self, *args): return _std_containers.list_Foo_erase(self, *args)
    def __init__(self, *args): 
        this = _std_containers.new_list_Foo(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _std_containers.list_Foo_push_back(self, *args)
    def front(self): return _std_containers.list_Foo_front(self)
    def back(self): return _std_containers.list_Foo_back(self)
    def assign(self, *args): return _std_containers.list_Foo_assign(self, *args)
    def resize(self, *args): return _std_containers.list_Foo_resize(self, *args)
    def insert(self, *args): return _std_containers.list_Foo_insert(self, *args)
    def pop_front(self): return _std_containers.list_Foo_pop_front(self)
    def push_front(self, *args): return _std_containers.list_Foo_push_front(self, *args)
    def reverse(self): return _std_containers.list_Foo_reverse(self)
    __swig_destroy__ = _std_containers.delete_list_Foo
    __del__ = lambda self : None;
list_Foo_swigregister = _std_containers.list_Foo_swigregister
list_Foo_swigregister(list_Foo)

# This file is compatible with both classic and new-style classes.


