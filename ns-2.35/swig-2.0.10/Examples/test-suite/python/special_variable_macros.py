# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_special_variable_macros', [dirname(__file__)])
        except ImportError:
            import _special_variable_macros
            return _special_variable_macros
        if fp is not None:
            try:
                _mod = imp.load_module('_special_variable_macros', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _special_variable_macros = swig_import_helper()
    del swig_import_helper
else:
    import _special_variable_macros
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Name(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Name, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Name, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _special_variable_macros.new_Name(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _special_variable_macros.delete_Name
    __del__ = lambda self : None;
    def getName(self): return _special_variable_macros.Name_getName(self)
    def getNamePtr(self): return _special_variable_macros.Name_getNamePtr(self)
Name_swigregister = _special_variable_macros.Name_swigregister
Name_swigregister(Name)

class NameWrap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NameWrap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NameWrap, name)
    __repr__ = _swig_repr
    def __init__(self, n="casternone"): 
        this = _special_variable_macros.new_NameWrap(n)
        try: self.this.append(this)
        except: self.this = this
    def getNamePtr(self): return _special_variable_macros.NameWrap_getNamePtr(self)
    __swig_destroy__ = _special_variable_macros.delete_NameWrap
    __del__ = lambda self : None;
NameWrap_swigregister = _special_variable_macros.NameWrap_swigregister
NameWrap_swigregister(NameWrap)


def testFred(*args):
  return _special_variable_macros.testFred(*args)
testFred = _special_variable_macros.testFred

def testJack(*args):
  return _special_variable_macros.testJack(*args)
testJack = _special_variable_macros.testJack

def testJill(*args):
  return _special_variable_macros.testJill(*args)
testJill = _special_variable_macros.testJill

def testMary(*args):
  return _special_variable_macros.testMary(*args)
testMary = _special_variable_macros.testMary

def testJames(*args):
  return _special_variable_macros.testJames(*args)
testJames = _special_variable_macros.testJames

def testJim(*args):
  return _special_variable_macros.testJim(*args)
testJim = _special_variable_macros.testJim

def testJohn(*args):
  return _special_variable_macros.testJohn(*args)
testJohn = _special_variable_macros.testJohn
class PairIntBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntBool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _special_variable_macros.new_PairIntBool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _special_variable_macros.PairIntBool_first_set
    __swig_getmethods__["first"] = _special_variable_macros.PairIntBool_first_get
    if _newclass:first = _swig_property(_special_variable_macros.PairIntBool_first_get, _special_variable_macros.PairIntBool_first_set)
    __swig_setmethods__["second"] = _special_variable_macros.PairIntBool_second_set
    __swig_getmethods__["second"] = _special_variable_macros.PairIntBool_second_get
    if _newclass:second = _swig_property(_special_variable_macros.PairIntBool_second_get, _special_variable_macros.PairIntBool_second_set)
    __swig_destroy__ = _special_variable_macros.delete_PairIntBool
    __del__ = lambda self : None;
PairIntBool_swigregister = _special_variable_macros.PairIntBool_swigregister
PairIntBool_swigregister(PairIntBool)

class NewName(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NewName, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _special_variable_macros.new_NewName(*args)
        try: self.this.append(this)
        except: self.this = this
    def getStoredName(self): return _special_variable_macros.NewName_getStoredName(self)
    __swig_destroy__ = _special_variable_macros.delete_NewName
    __del__ = lambda self : None;
NewName_swigregister = _special_variable_macros.NewName_swigregister
NewName_swigregister(NewName)

# This file is compatible with both classic and new-style classes.


