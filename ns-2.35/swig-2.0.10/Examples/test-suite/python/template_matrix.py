# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_template_matrix', [dirname(__file__)])
        except ImportError:
            import _template_matrix
            return _template_matrix
        if fp is not None:
            try:
                _mod = imp.load_module('_template_matrix', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _template_matrix = swig_import_helper()
    del swig_import_helper
else:
    import _template_matrix
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _template_matrix.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _template_matrix.SwigPyIterator_value(self)
    def incr(self, n=1): return _template_matrix.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _template_matrix.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _template_matrix.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _template_matrix.SwigPyIterator_equal(self, *args)
    def copy(self): return _template_matrix.SwigPyIterator_copy(self)
    def next(self): return _template_matrix.SwigPyIterator_next(self)
    def __next__(self): return _template_matrix.SwigPyIterator___next__(self)
    def previous(self): return _template_matrix.SwigPyIterator_previous(self)
    def advance(self, *args): return _template_matrix.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _template_matrix.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _template_matrix.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _template_matrix.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _template_matrix.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _template_matrix.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _template_matrix.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _template_matrix.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class POP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, POP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, POP, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_matrix.new_POP()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_matrix.delete_POP
    __del__ = lambda self : None;
POP_swigregister = _template_matrix.POP_swigregister
POP_swigregister(POP)

class vectorop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorop, name)
    __repr__ = _swig_repr
    def iterator(self): return _template_matrix.vectorop_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _template_matrix.vectorop___nonzero__(self)
    def __bool__(self): return _template_matrix.vectorop___bool__(self)
    def __len__(self): return _template_matrix.vectorop___len__(self)
    def pop(self): return _template_matrix.vectorop_pop(self)
    def __getslice__(self, *args): return _template_matrix.vectorop___getslice__(self, *args)
    def __setslice__(self, *args): return _template_matrix.vectorop___setslice__(self, *args)
    def __delslice__(self, *args): return _template_matrix.vectorop___delslice__(self, *args)
    def __delitem__(self, *args): return _template_matrix.vectorop___delitem__(self, *args)
    def __getitem__(self, *args): return _template_matrix.vectorop___getitem__(self, *args)
    def __setitem__(self, *args): return _template_matrix.vectorop___setitem__(self, *args)
    def append(self, *args): return _template_matrix.vectorop_append(self, *args)
    def empty(self): return _template_matrix.vectorop_empty(self)
    def size(self): return _template_matrix.vectorop_size(self)
    def clear(self): return _template_matrix.vectorop_clear(self)
    def swap(self, *args): return _template_matrix.vectorop_swap(self, *args)
    def get_allocator(self): return _template_matrix.vectorop_get_allocator(self)
    def begin(self): return _template_matrix.vectorop_begin(self)
    def end(self): return _template_matrix.vectorop_end(self)
    def rbegin(self): return _template_matrix.vectorop_rbegin(self)
    def rend(self): return _template_matrix.vectorop_rend(self)
    def pop_back(self): return _template_matrix.vectorop_pop_back(self)
    def erase(self, *args): return _template_matrix.vectorop_erase(self, *args)
    def __init__(self, *args): 
        this = _template_matrix.new_vectorop(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _template_matrix.vectorop_push_back(self, *args)
    def front(self): return _template_matrix.vectorop_front(self)
    def back(self): return _template_matrix.vectorop_back(self)
    def assign(self, *args): return _template_matrix.vectorop_assign(self, *args)
    def resize(self, *args): return _template_matrix.vectorop_resize(self, *args)
    def insert(self, *args): return _template_matrix.vectorop_insert(self, *args)
    def reserve(self, *args): return _template_matrix.vectorop_reserve(self, *args)
    def capacity(self): return _template_matrix.vectorop_capacity(self)
    __swig_destroy__ = _template_matrix.delete_vectorop
    __del__ = lambda self : None;
vectorop_swigregister = _template_matrix.vectorop_swigregister
vectorop_swigregister(vectorop)

class baseOperator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, baseOperator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, baseOperator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_matrix.new_baseOperator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_matrix.delete_baseOperator
    __del__ = lambda self : None;
baseOperator_swigregister = _template_matrix.baseOperator_swigregister
baseOperator_swigregister(baseOperator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(self): return _template_matrix.vectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _template_matrix.vectori___nonzero__(self)
    def __bool__(self): return _template_matrix.vectori___bool__(self)
    def __len__(self): return _template_matrix.vectori___len__(self)
    def pop(self): return _template_matrix.vectori_pop(self)
    def __getslice__(self, *args): return _template_matrix.vectori___getslice__(self, *args)
    def __setslice__(self, *args): return _template_matrix.vectori___setslice__(self, *args)
    def __delslice__(self, *args): return _template_matrix.vectori___delslice__(self, *args)
    def __delitem__(self, *args): return _template_matrix.vectori___delitem__(self, *args)
    def __getitem__(self, *args): return _template_matrix.vectori___getitem__(self, *args)
    def __setitem__(self, *args): return _template_matrix.vectori___setitem__(self, *args)
    def append(self, *args): return _template_matrix.vectori_append(self, *args)
    def empty(self): return _template_matrix.vectori_empty(self)
    def size(self): return _template_matrix.vectori_size(self)
    def clear(self): return _template_matrix.vectori_clear(self)
    def swap(self, *args): return _template_matrix.vectori_swap(self, *args)
    def get_allocator(self): return _template_matrix.vectori_get_allocator(self)
    def begin(self): return _template_matrix.vectori_begin(self)
    def end(self): return _template_matrix.vectori_end(self)
    def rbegin(self): return _template_matrix.vectori_rbegin(self)
    def rend(self): return _template_matrix.vectori_rend(self)
    def pop_back(self): return _template_matrix.vectori_pop_back(self)
    def erase(self, *args): return _template_matrix.vectori_erase(self, *args)
    def __init__(self, *args): 
        this = _template_matrix.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _template_matrix.vectori_push_back(self, *args)
    def front(self): return _template_matrix.vectori_front(self)
    def back(self): return _template_matrix.vectori_back(self)
    def assign(self, *args): return _template_matrix.vectori_assign(self, *args)
    def resize(self, *args): return _template_matrix.vectori_resize(self, *args)
    def insert(self, *args): return _template_matrix.vectori_insert(self, *args)
    def reserve(self, *args): return _template_matrix.vectori_reserve(self, *args)
    def capacity(self): return _template_matrix.vectori_capacity(self)
    __swig_destroy__ = _template_matrix.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _template_matrix.vectori_swigregister
vectori_swigregister(vectori)

class matrixi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrixi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrixi, name)
    __repr__ = _swig_repr
    def iterator(self): return _template_matrix.matrixi_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _template_matrix.matrixi___nonzero__(self)
    def __bool__(self): return _template_matrix.matrixi___bool__(self)
    def __len__(self): return _template_matrix.matrixi___len__(self)
    def pop(self): return _template_matrix.matrixi_pop(self)
    def __getslice__(self, *args): return _template_matrix.matrixi___getslice__(self, *args)
    def __setslice__(self, *args): return _template_matrix.matrixi___setslice__(self, *args)
    def __delslice__(self, *args): return _template_matrix.matrixi___delslice__(self, *args)
    def __delitem__(self, *args): return _template_matrix.matrixi___delitem__(self, *args)
    def __getitem__(self, *args): return _template_matrix.matrixi___getitem__(self, *args)
    def __setitem__(self, *args): return _template_matrix.matrixi___setitem__(self, *args)
    def append(self, *args): return _template_matrix.matrixi_append(self, *args)
    def empty(self): return _template_matrix.matrixi_empty(self)
    def size(self): return _template_matrix.matrixi_size(self)
    def clear(self): return _template_matrix.matrixi_clear(self)
    def swap(self, *args): return _template_matrix.matrixi_swap(self, *args)
    def get_allocator(self): return _template_matrix.matrixi_get_allocator(self)
    def begin(self): return _template_matrix.matrixi_begin(self)
    def end(self): return _template_matrix.matrixi_end(self)
    def rbegin(self): return _template_matrix.matrixi_rbegin(self)
    def rend(self): return _template_matrix.matrixi_rend(self)
    def pop_back(self): return _template_matrix.matrixi_pop_back(self)
    def erase(self, *args): return _template_matrix.matrixi_erase(self, *args)
    def __init__(self, *args): 
        this = _template_matrix.new_matrixi(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _template_matrix.matrixi_push_back(self, *args)
    def front(self): return _template_matrix.matrixi_front(self)
    def back(self): return _template_matrix.matrixi_back(self)
    def assign(self, *args): return _template_matrix.matrixi_assign(self, *args)
    def resize(self, *args): return _template_matrix.matrixi_resize(self, *args)
    def insert(self, *args): return _template_matrix.matrixi_insert(self, *args)
    def reserve(self, *args): return _template_matrix.matrixi_reserve(self, *args)
    def capacity(self): return _template_matrix.matrixi_capacity(self)
    __swig_destroy__ = _template_matrix.delete_matrixi
    __del__ = lambda self : None;
matrixi_swigregister = _template_matrix.matrixi_swigregister
matrixi_swigregister(matrixi)

class cubei(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cubei, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cubei, name)
    __repr__ = _swig_repr
    def iterator(self): return _template_matrix.cubei_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _template_matrix.cubei___nonzero__(self)
    def __bool__(self): return _template_matrix.cubei___bool__(self)
    def __len__(self): return _template_matrix.cubei___len__(self)
    def pop(self): return _template_matrix.cubei_pop(self)
    def __getslice__(self, *args): return _template_matrix.cubei___getslice__(self, *args)
    def __setslice__(self, *args): return _template_matrix.cubei___setslice__(self, *args)
    def __delslice__(self, *args): return _template_matrix.cubei___delslice__(self, *args)
    def __delitem__(self, *args): return _template_matrix.cubei___delitem__(self, *args)
    def __getitem__(self, *args): return _template_matrix.cubei___getitem__(self, *args)
    def __setitem__(self, *args): return _template_matrix.cubei___setitem__(self, *args)
    def append(self, *args): return _template_matrix.cubei_append(self, *args)
    def empty(self): return _template_matrix.cubei_empty(self)
    def size(self): return _template_matrix.cubei_size(self)
    def clear(self): return _template_matrix.cubei_clear(self)
    def swap(self, *args): return _template_matrix.cubei_swap(self, *args)
    def get_allocator(self): return _template_matrix.cubei_get_allocator(self)
    def begin(self): return _template_matrix.cubei_begin(self)
    def end(self): return _template_matrix.cubei_end(self)
    def rbegin(self): return _template_matrix.cubei_rbegin(self)
    def rend(self): return _template_matrix.cubei_rend(self)
    def pop_back(self): return _template_matrix.cubei_pop_back(self)
    def erase(self, *args): return _template_matrix.cubei_erase(self, *args)
    def __init__(self, *args): 
        this = _template_matrix.new_cubei(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _template_matrix.cubei_push_back(self, *args)
    def front(self): return _template_matrix.cubei_front(self)
    def back(self): return _template_matrix.cubei_back(self)
    def assign(self, *args): return _template_matrix.cubei_assign(self, *args)
    def resize(self, *args): return _template_matrix.cubei_resize(self, *args)
    def insert(self, *args): return _template_matrix.cubei_insert(self, *args)
    def reserve(self, *args): return _template_matrix.cubei_reserve(self, *args)
    def capacity(self): return _template_matrix.cubei_capacity(self)
    __swig_destroy__ = _template_matrix.delete_cubei
    __del__ = lambda self : None;
cubei_swigregister = _template_matrix.cubei_swigregister
cubei_swigregister(cubei)


def passVector(*args):
  return _template_matrix.passVector(*args)
passVector = _template_matrix.passVector

def passMatrix(*args):
  return _template_matrix.passMatrix(*args)
passMatrix = _template_matrix.passMatrix

def passCube(*args):
  return _template_matrix.passCube(*args)
passCube = _template_matrix.passCube
# This file is compatible with both classic and new-style classes.


