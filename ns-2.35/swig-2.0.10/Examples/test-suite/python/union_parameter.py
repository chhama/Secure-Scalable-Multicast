# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_union_parameter', [dirname(__file__)])
        except ImportError:
            import _union_parameter
            return _union_parameter
        if fp is not None:
            try:
                _mod = imp.load_module('_union_parameter', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _union_parameter = swig_import_helper()
    del swig_import_helper
else:
    import _union_parameter
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SDL_ActiveEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_ActiveEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_ActiveEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _union_parameter.SDL_ActiveEvent_type_set
    __swig_getmethods__["type"] = _union_parameter.SDL_ActiveEvent_type_get
    if _newclass:type = _swig_property(_union_parameter.SDL_ActiveEvent_type_get, _union_parameter.SDL_ActiveEvent_type_set)
    __swig_setmethods__["gain"] = _union_parameter.SDL_ActiveEvent_gain_set
    __swig_getmethods__["gain"] = _union_parameter.SDL_ActiveEvent_gain_get
    if _newclass:gain = _swig_property(_union_parameter.SDL_ActiveEvent_gain_get, _union_parameter.SDL_ActiveEvent_gain_set)
    __swig_setmethods__["state"] = _union_parameter.SDL_ActiveEvent_state_set
    __swig_getmethods__["state"] = _union_parameter.SDL_ActiveEvent_state_get
    if _newclass:state = _swig_property(_union_parameter.SDL_ActiveEvent_state_get, _union_parameter.SDL_ActiveEvent_state_set)
    def __init__(self): 
        this = _union_parameter.new_SDL_ActiveEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _union_parameter.delete_SDL_ActiveEvent
    __del__ = lambda self : None;
SDL_ActiveEvent_swigregister = _union_parameter.SDL_ActiveEvent_swigregister
SDL_ActiveEvent_swigregister(SDL_ActiveEvent)

class SDL_KeyboardEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_KeyboardEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_KeyboardEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _union_parameter.SDL_KeyboardEvent_type_set
    __swig_getmethods__["type"] = _union_parameter.SDL_KeyboardEvent_type_get
    if _newclass:type = _swig_property(_union_parameter.SDL_KeyboardEvent_type_get, _union_parameter.SDL_KeyboardEvent_type_set)
    __swig_setmethods__["which"] = _union_parameter.SDL_KeyboardEvent_which_set
    __swig_getmethods__["which"] = _union_parameter.SDL_KeyboardEvent_which_get
    if _newclass:which = _swig_property(_union_parameter.SDL_KeyboardEvent_which_get, _union_parameter.SDL_KeyboardEvent_which_set)
    __swig_setmethods__["state"] = _union_parameter.SDL_KeyboardEvent_state_set
    __swig_getmethods__["state"] = _union_parameter.SDL_KeyboardEvent_state_get
    if _newclass:state = _swig_property(_union_parameter.SDL_KeyboardEvent_state_get, _union_parameter.SDL_KeyboardEvent_state_set)
    def __init__(self): 
        this = _union_parameter.new_SDL_KeyboardEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _union_parameter.delete_SDL_KeyboardEvent
    __del__ = lambda self : None;
SDL_KeyboardEvent_swigregister = _union_parameter.SDL_KeyboardEvent_swigregister
SDL_KeyboardEvent_swigregister(SDL_KeyboardEvent)

class SDL_Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDL_Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDL_Event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _union_parameter.SDL_Event_type_set
    __swig_getmethods__["type"] = _union_parameter.SDL_Event_type_get
    if _newclass:type = _swig_property(_union_parameter.SDL_Event_type_get, _union_parameter.SDL_Event_type_set)
    __swig_setmethods__["active"] = _union_parameter.SDL_Event_active_set
    __swig_getmethods__["active"] = _union_parameter.SDL_Event_active_get
    if _newclass:active = _swig_property(_union_parameter.SDL_Event_active_get, _union_parameter.SDL_Event_active_set)
    __swig_setmethods__["key"] = _union_parameter.SDL_Event_key_set
    __swig_getmethods__["key"] = _union_parameter.SDL_Event_key_get
    if _newclass:key = _swig_property(_union_parameter.SDL_Event_key_get, _union_parameter.SDL_Event_key_set)
    def __init__(self): 
        this = _union_parameter.new_SDL_Event()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _union_parameter.delete_SDL_Event
    __del__ = lambda self : None;
SDL_Event_swigregister = _union_parameter.SDL_Event_swigregister
SDL_Event_swigregister(SDL_Event)


def SDL_PollEvent(*args):
  return _union_parameter.SDL_PollEvent(*args)
SDL_PollEvent = _union_parameter.SDL_PollEvent
# This file is compatible with both classic and new-style classes.


