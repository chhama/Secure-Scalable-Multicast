# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_global_namespace', [dirname(__file__)])
        except ImportError:
            import _global_namespace
            return _global_namespace
        if fp is not None:
            try:
                _mod = imp.load_module('_global_namespace', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _global_namespace = swig_import_helper()
    del swig_import_helper
else:
    import _global_namespace
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Klass1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Klass1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Klass1, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_Klass1()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_Klass1
    __del__ = lambda self : None;
Klass1_swigregister = _global_namespace.Klass1_swigregister
Klass1_swigregister(Klass1)

class Klass2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Klass2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Klass2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_Klass2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_Klass2
    __del__ = lambda self : None;
Klass2_swigregister = _global_namespace.Klass2_swigregister
Klass2_swigregister(Klass2)

class Klass3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Klass3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Klass3, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_Klass3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_Klass3
    __del__ = lambda self : None;
Klass3_swigregister = _global_namespace.Klass3_swigregister
Klass3_swigregister(Klass3)

class Klass4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Klass4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Klass4, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_Klass4()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_Klass4
    __del__ = lambda self : None;
Klass4_swigregister = _global_namespace.Klass4_swigregister
Klass4_swigregister(Klass4)

class Klass5(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Klass5, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Klass5, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_Klass5()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_Klass5
    __del__ = lambda self : None;
Klass5_swigregister = _global_namespace.Klass5_swigregister
Klass5_swigregister(Klass5)

class Klass6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Klass6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Klass6, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_Klass6()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_Klass6
    __del__ = lambda self : None;
Klass6_swigregister = _global_namespace.Klass6_swigregister
Klass6_swigregister(Klass6)

class Klass7(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Klass7, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Klass7, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_Klass7()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_Klass7
    __del__ = lambda self : None;
Klass7_swigregister = _global_namespace.Klass7_swigregister
Klass7_swigregister(Klass7)

class KlassMethods(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KlassMethods, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KlassMethods, name)
    __repr__ = _swig_repr
    __swig_getmethods__["methodA"] = lambda x: _global_namespace.KlassMethods_methodA
    if _newclass:methodA = staticmethod(_global_namespace.KlassMethods_methodA)
    __swig_getmethods__["methodB"] = lambda x: _global_namespace.KlassMethods_methodB
    if _newclass:methodB = staticmethod(_global_namespace.KlassMethods_methodB)
    def __init__(self): 
        this = _global_namespace.new_KlassMethods()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_KlassMethods
    __del__ = lambda self : None;
KlassMethods_swigregister = _global_namespace.KlassMethods_swigregister
KlassMethods_swigregister(KlassMethods)

def KlassMethods_methodA(*args):
  return _global_namespace.KlassMethods_methodA(*args)
KlassMethods_methodA = _global_namespace.KlassMethods_methodA

def KlassMethods_methodB(*args):
  return _global_namespace.KlassMethods_methodB(*args)
KlassMethods_methodB = _global_namespace.KlassMethods_methodB

class XYZ1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYZ1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYZ1, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_XYZ1()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_XYZ1
    __del__ = lambda self : None;
XYZ1_swigregister = _global_namespace.XYZ1_swigregister
XYZ1_swigregister(XYZ1)

class XYZ2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYZ2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYZ2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_XYZ2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_XYZ2
    __del__ = lambda self : None;
XYZ2_swigregister = _global_namespace.XYZ2_swigregister
XYZ2_swigregister(XYZ2)

class XYZ3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYZ3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYZ3, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_XYZ3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_XYZ3
    __del__ = lambda self : None;
XYZ3_swigregister = _global_namespace.XYZ3_swigregister
XYZ3_swigregister(XYZ3)

class XYZ4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYZ4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYZ4, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_XYZ4()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_XYZ4
    __del__ = lambda self : None;
XYZ4_swigregister = _global_namespace.XYZ4_swigregister
XYZ4_swigregister(XYZ4)

class XYZ5(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYZ5, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYZ5, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_XYZ5()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_XYZ5
    __del__ = lambda self : None;
XYZ5_swigregister = _global_namespace.XYZ5_swigregister
XYZ5_swigregister(XYZ5)

class XYZ6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYZ6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYZ6, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_XYZ6()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_XYZ6
    __del__ = lambda self : None;
XYZ6_swigregister = _global_namespace.XYZ6_swigregister
XYZ6_swigregister(XYZ6)

class XYZ7(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYZ7, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYZ7, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _global_namespace.new_XYZ7()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_XYZ7
    __del__ = lambda self : None;
XYZ7_swigregister = _global_namespace.XYZ7_swigregister
XYZ7_swigregister(XYZ7)

class XYZMethods(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYZMethods, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYZMethods, name)
    __repr__ = _swig_repr
    __swig_getmethods__["methodA"] = lambda x: _global_namespace.XYZMethods_methodA
    if _newclass:methodA = staticmethod(_global_namespace.XYZMethods_methodA)
    __swig_getmethods__["methodB"] = lambda x: _global_namespace.XYZMethods_methodB
    if _newclass:methodB = staticmethod(_global_namespace.XYZMethods_methodB)
    def __init__(self): 
        this = _global_namespace.new_XYZMethods()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_XYZMethods
    __del__ = lambda self : None;
XYZMethods_swigregister = _global_namespace.XYZMethods_swigregister
XYZMethods_swigregister(XYZMethods)

def XYZMethods_methodA(*args):
  return _global_namespace.XYZMethods_methodA(*args)
XYZMethods_methodA = _global_namespace.XYZMethods_methodA

def XYZMethods_methodB(*args):
  return _global_namespace.XYZMethods_methodB(*args)
XYZMethods_methodB = _global_namespace.XYZMethods_methodB

anenum1 = _global_namespace.anenum1
anenum2 = _global_namespace.anenum2
anenum3 = _global_namespace.anenum3
class AnEnumMethods(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnEnumMethods, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnEnumMethods, name)
    __repr__ = _swig_repr
    __swig_getmethods__["methodA"] = lambda x: _global_namespace.AnEnumMethods_methodA
    if _newclass:methodA = staticmethod(_global_namespace.AnEnumMethods_methodA)
    __swig_getmethods__["methodB"] = lambda x: _global_namespace.AnEnumMethods_methodB
    if _newclass:methodB = staticmethod(_global_namespace.AnEnumMethods_methodB)
    def __init__(self): 
        this = _global_namespace.new_AnEnumMethods()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_AnEnumMethods
    __del__ = lambda self : None;
AnEnumMethods_swigregister = _global_namespace.AnEnumMethods_swigregister
AnEnumMethods_swigregister(AnEnumMethods)

def AnEnumMethods_methodA(*args):
  return _global_namespace.AnEnumMethods_methodA(*args)
AnEnumMethods_methodA = _global_namespace.AnEnumMethods_methodA

def AnEnumMethods_methodB(*args):
  return _global_namespace.AnEnumMethods_methodB(*args)
AnEnumMethods_methodB = _global_namespace.AnEnumMethods_methodB

theenum1 = _global_namespace.theenum1
theenum2 = _global_namespace.theenum2
theenum3 = _global_namespace.theenum3
class TheEnumMethods(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TheEnumMethods, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TheEnumMethods, name)
    __repr__ = _swig_repr
    __swig_getmethods__["methodA"] = lambda x: _global_namespace.TheEnumMethods_methodA
    if _newclass:methodA = staticmethod(_global_namespace.TheEnumMethods_methodA)
    __swig_getmethods__["methodB"] = lambda x: _global_namespace.TheEnumMethods_methodB
    if _newclass:methodB = staticmethod(_global_namespace.TheEnumMethods_methodB)
    def __init__(self): 
        this = _global_namespace.new_TheEnumMethods()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _global_namespace.delete_TheEnumMethods
    __del__ = lambda self : None;
TheEnumMethods_swigregister = _global_namespace.TheEnumMethods_swigregister
TheEnumMethods_swigregister(TheEnumMethods)

def TheEnumMethods_methodA(*args):
  return _global_namespace.TheEnumMethods_methodA(*args)
TheEnumMethods_methodA = _global_namespace.TheEnumMethods_methodA

def TheEnumMethods_methodB(*args):
  return _global_namespace.TheEnumMethods_methodB(*args)
TheEnumMethods_methodB = _global_namespace.TheEnumMethods_methodB


def getKlass1A():
  return _global_namespace.getKlass1A()
getKlass1A = _global_namespace.getKlass1A

def getKlass1B():
  return _global_namespace.getKlass1B()
getKlass1B = _global_namespace.getKlass1B

def getKlass2A():
  return _global_namespace.getKlass2A()
getKlass2A = _global_namespace.getKlass2A

def getKlass2B():
  return _global_namespace.getKlass2B()
getKlass2B = _global_namespace.getKlass2B

def getKlass3A():
  return _global_namespace.getKlass3A()
getKlass3A = _global_namespace.getKlass3A

def getKlass3B():
  return _global_namespace.getKlass3B()
getKlass3B = _global_namespace.getKlass3B

def getKlass4A():
  return _global_namespace.getKlass4A()
getKlass4A = _global_namespace.getKlass4A

def getKlass4B():
  return _global_namespace.getKlass4B()
getKlass4B = _global_namespace.getKlass4B

def getKlass5A():
  return _global_namespace.getKlass5A()
getKlass5A = _global_namespace.getKlass5A

def getKlass5B():
  return _global_namespace.getKlass5B()
getKlass5B = _global_namespace.getKlass5B

def getKlass6A():
  return _global_namespace.getKlass6A()
getKlass6A = _global_namespace.getKlass6A

def getKlass6B():
  return _global_namespace.getKlass6B()
getKlass6B = _global_namespace.getKlass6B

def getKlass7A():
  return _global_namespace.getKlass7A()
getKlass7A = _global_namespace.getKlass7A

def getKlass7B():
  return _global_namespace.getKlass7B()
getKlass7B = _global_namespace.getKlass7B
# This file is compatible with both classic and new-style classes.


