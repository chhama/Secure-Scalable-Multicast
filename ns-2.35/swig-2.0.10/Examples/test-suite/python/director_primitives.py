# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_director_primitives', [dirname(__file__)])
        except ImportError:
            import _director_primitives
            return _director_primitives
        if fp is not None:
            try:
                _mod = imp.load_module('_director_primitives', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _director_primitives = swig_import_helper()
    del swig_import_helper
else:
    import _director_primitives
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


HShadowNone = _director_primitives.HShadowNone
HShadowSoft = _director_primitives.HShadowSoft
HShadowHard = _director_primitives.HShadowHard
class Base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Base, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == Base:
            _self = None
        else:
            _self = self
        this = _director_primitives.new_Base(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _director_primitives.delete_Base
    __del__ = lambda self : None;
    def NoParmsMethod(self): return _director_primitives.Base_NoParmsMethod(self)
    def BoolMethod(self, *args): return _director_primitives.Base_BoolMethod(self, *args)
    def IntMethod(self, *args): return _director_primitives.Base_IntMethod(self, *args)
    def UIntMethod(self, *args): return _director_primitives.Base_UIntMethod(self, *args)
    def FloatMethod(self, *args): return _director_primitives.Base_FloatMethod(self, *args)
    def CharPtrMethod(self, *args): return _director_primitives.Base_CharPtrMethod(self, *args)
    def ConstCharPtrMethod(self, *args): return _director_primitives.Base_ConstCharPtrMethod(self, *args)
    def EnumMethod(self, *args): return _director_primitives.Base_EnumMethod(self, *args)
    def ManyParmsMethod(self, *args): return _director_primitives.Base_ManyParmsMethod(self, *args)
    def NotOverriddenMethod(self): return _director_primitives.Base_NotOverriddenMethod(self)
    def __disown__(self):
        self.this.disown()
        _director_primitives.disown_Base(self)
        return weakref_proxy(self)
Base_swigregister = _director_primitives.Base_swigregister
Base_swigregister(Base)
cvar = _director_primitives.cvar

class Derived(Base):
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Derived, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Derived, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == Derived:
            _self = None
        else:
            _self = self
        this = _director_primitives.new_Derived(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _director_primitives.delete_Derived
    __del__ = lambda self : None;
    def NoParmsMethod(self): return _director_primitives.Derived_NoParmsMethod(self)
    def BoolMethod(self, *args): return _director_primitives.Derived_BoolMethod(self, *args)
    def IntMethod(self, *args): return _director_primitives.Derived_IntMethod(self, *args)
    def UIntMethod(self, *args): return _director_primitives.Derived_UIntMethod(self, *args)
    def FloatMethod(self, *args): return _director_primitives.Derived_FloatMethod(self, *args)
    def CharPtrMethod(self, *args): return _director_primitives.Derived_CharPtrMethod(self, *args)
    def ConstCharPtrMethod(self, *args): return _director_primitives.Derived_ConstCharPtrMethod(self, *args)
    def EnumMethod(self, *args): return _director_primitives.Derived_EnumMethod(self, *args)
    def ManyParmsMethod(self, *args): return _director_primitives.Derived_ManyParmsMethod(self, *args)
    def __disown__(self):
        self.this.disown()
        _director_primitives.disown_Derived(self)
        return weakref_proxy(self)
Derived_swigregister = _director_primitives.Derived_swigregister
Derived_swigregister(Derived)

class Caller(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Caller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Caller, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _director_primitives.new_Caller()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _director_primitives.delete_Caller
    __del__ = lambda self : None;
    def set(self, *args): return _director_primitives.Caller_set(self, *args)
    def reset(self): return _director_primitives.Caller_reset(self)
    def NoParmsMethodCall(self): return _director_primitives.Caller_NoParmsMethodCall(self)
    def BoolMethodCall(self, *args): return _director_primitives.Caller_BoolMethodCall(self, *args)
    def IntMethodCall(self, *args): return _director_primitives.Caller_IntMethodCall(self, *args)
    def UIntMethodCall(self, *args): return _director_primitives.Caller_UIntMethodCall(self, *args)
    def FloatMethodCall(self, *args): return _director_primitives.Caller_FloatMethodCall(self, *args)
    def CharPtrMethodCall(self, *args): return _director_primitives.Caller_CharPtrMethodCall(self, *args)
    def ConstCharPtrMethodCall(self, *args): return _director_primitives.Caller_ConstCharPtrMethodCall(self, *args)
    def EnumMethodCall(self, *args): return _director_primitives.Caller_EnumMethodCall(self, *args)
    def ManyParmsMethodCall(self, *args): return _director_primitives.Caller_ManyParmsMethodCall(self, *args)
    def NotOverriddenMethodCall(self): return _director_primitives.Caller_NotOverriddenMethodCall(self)
Caller_swigregister = _director_primitives.Caller_swigregister
Caller_swigregister(Caller)

# This file is compatible with both classic and new-style classes.


