# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_template_nested', [dirname(__file__)])
        except ImportError:
            import _template_nested
            return _template_nested
        if fp is not None:
            try:
                _mod = imp.load_module('_template_nested', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _template_nested = swig_import_helper()
    del swig_import_helper
else:
    import _template_nested
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class NormalClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NormalClass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_nested.new_NormalClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_nested.delete_NormalClass
    __del__ = lambda self : None;
NormalClass_swigregister = _template_nested.NormalClass_swigregister
NormalClass_swigregister(NormalClass)

class OuterClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OuterClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OuterClass, name)
    __repr__ = _swig_repr
    def useInner1(self, *args): return _template_nested.OuterClass_useInner1(self, *args)
    def useInner2(self, *args): return _template_nested.OuterClass_useInner2(self, *args)
    __swig_setmethods__["iii"] = _template_nested.OuterClass_iii_set
    __swig_getmethods__["iii"] = _template_nested.OuterClass_iii_get
    if _newclass:iii = _swig_property(_template_nested.OuterClass_iii_get, _template_nested.OuterClass_iii_set)
    def T_OuterTMethodNormalClass(self, *args): return _template_nested.OuterClass_T_OuterTMethodNormalClass(self, *args)
    def __init__(self): 
        this = _template_nested.new_OuterClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_nested.delete_OuterClass
    __del__ = lambda self : None;
OuterClass_swigregister = _template_nested.OuterClass_swigregister
OuterClass_swigregister(OuterClass)

class ABC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ABC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ABC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _template_nested.new_ABC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_nested.delete_ABC
    __del__ = lambda self : None;
ABC_swigregister = _template_nested.ABC_swigregister
ABC_swigregister(ABC)

class TemplateFuncs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TemplateFuncs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TemplateFuncs, name)
    __repr__ = _swig_repr
    def T_TemplateFuncs1Int(self, *args): return _template_nested.TemplateFuncs_T_TemplateFuncs1Int(self, *args)
    def T_TemplateFuncs2Double(self, *args): return _template_nested.TemplateFuncs_T_TemplateFuncs2Double(self, *args)
    def __init__(self): 
        this = _template_nested.new_TemplateFuncs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_nested.delete_TemplateFuncs
    __del__ = lambda self : None;
TemplateFuncs_swigregister = _template_nested.TemplateFuncs_swigregister
TemplateFuncs_swigregister(TemplateFuncs)

class T_NormalTemplateNormalClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, T_NormalTemplateNormalClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, T_NormalTemplateNormalClass, name)
    __repr__ = _swig_repr
    def tmethod(self, *args): return _template_nested.T_NormalTemplateNormalClass_tmethod(self, *args)
    def __init__(self): 
        this = _template_nested.new_T_NormalTemplateNormalClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_nested.delete_T_NormalTemplateNormalClass
    __del__ = lambda self : None;
T_NormalTemplateNormalClass_swigregister = _template_nested.T_NormalTemplateNormalClass_swigregister
T_NormalTemplateNormalClass_swigregister(T_NormalTemplateNormalClass)

class T_NestedOuterTemplateDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, T_NestedOuterTemplateDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, T_NestedOuterTemplateDouble, name)
    __repr__ = _swig_repr
    def hohum(self, *args): return _template_nested.T_NestedOuterTemplateDouble_hohum(self, *args)
    def useNestedInnerTemplate1(self, *args): return _template_nested.T_NestedOuterTemplateDouble_useNestedInnerTemplate1(self, *args)
    def useNestedInnerTemplate2(self, *args): return _template_nested.T_NestedOuterTemplateDouble_useNestedInnerTemplate2(self, *args)
    def useNestedInnerTemplate3(self, *args): return _template_nested.T_NestedOuterTemplateDouble_useNestedInnerTemplate3(self, *args)
    def useNestedStruct(self, *args): return _template_nested.T_NestedOuterTemplateDouble_useNestedStruct(self, *args)
    def __init__(self): 
        this = _template_nested.new_T_NestedOuterTemplateDouble()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _template_nested.delete_T_NestedOuterTemplateDouble
    __del__ = lambda self : None;
T_NestedOuterTemplateDouble_swigregister = _template_nested.T_NestedOuterTemplateDouble_swigregister
T_NestedOuterTemplateDouble_swigregister(T_NestedOuterTemplateDouble)

# This file is compatible with both classic and new-style classes.


