# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_li_carrays', [dirname(__file__)])
        except ImportError:
            import _li_carrays
            return _li_carrays
        if fp is not None:
            try:
                _mod = imp.load_module('_li_carrays', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _li_carrays = swig_import_helper()
    del swig_import_helper
else:
    import _li_carrays
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_intArray(*args):
  return _li_carrays.new_intArray(*args)
new_intArray = _li_carrays.new_intArray

def delete_intArray(*args):
  return _li_carrays.delete_intArray(*args)
delete_intArray = _li_carrays.delete_intArray

def intArray_getitem(*args):
  return _li_carrays.intArray_getitem(*args)
intArray_getitem = _li_carrays.intArray_getitem

def intArray_setitem(*args):
  return _li_carrays.intArray_setitem(*args)
intArray_setitem = _li_carrays.intArray_setitem
class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_carrays.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_carrays.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _li_carrays.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _li_carrays.doubleArray___setitem__(self, *args)
    def cast(self): return _li_carrays.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _li_carrays.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_li_carrays.doubleArray_frompointer)
doubleArray_swigregister = _li_carrays.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _li_carrays.doubleArray_frompointer(*args)
doubleArray_frompointer = _li_carrays.doubleArray_frompointer

class XY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XY, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _li_carrays.XY_x_set
    __swig_getmethods__["x"] = _li_carrays.XY_x_get
    if _newclass:x = _swig_property(_li_carrays.XY_x_get, _li_carrays.XY_x_set)
    __swig_setmethods__["y"] = _li_carrays.XY_y_set
    __swig_getmethods__["y"] = _li_carrays.XY_y_get
    if _newclass:y = _swig_property(_li_carrays.XY_y_get, _li_carrays.XY_y_set)
    def __init__(self): 
        this = _li_carrays.new_XY()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_carrays.delete_XY
    __del__ = lambda self : None;
XY_swigregister = _li_carrays.XY_swigregister
XY_swigregister(XY)

class AB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _li_carrays.AB_a_set
    __swig_getmethods__["a"] = _li_carrays.AB_a_get
    if _newclass:a = _swig_property(_li_carrays.AB_a_get, _li_carrays.AB_a_set)
    __swig_setmethods__["b"] = _li_carrays.AB_b_set
    __swig_getmethods__["b"] = _li_carrays.AB_b_get
    if _newclass:b = _swig_property(_li_carrays.AB_b_get, _li_carrays.AB_b_set)
    def __init__(self): 
        this = _li_carrays.new_AB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_carrays.delete_AB
    __del__ = lambda self : None;
AB_swigregister = _li_carrays.AB_swigregister
AB_swigregister(AB)
cvar = _li_carrays.cvar

class XYArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XYArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XYArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _li_carrays.new_XYArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _li_carrays.delete_XYArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _li_carrays.XYArray___getitem__(self, *args)
    def __setitem__(self, *args): return _li_carrays.XYArray___setitem__(self, *args)
    def cast(self): return _li_carrays.XYArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _li_carrays.XYArray_frompointer
    if _newclass:frompointer = staticmethod(_li_carrays.XYArray_frompointer)
XYArray_swigregister = _li_carrays.XYArray_swigregister
XYArray_swigregister(XYArray)

def XYArray_frompointer(*args):
  return _li_carrays.XYArray_frompointer(*args)
XYArray_frompointer = _li_carrays.XYArray_frompointer


def new_ABArray(*args):
  return _li_carrays.new_ABArray(*args)
new_ABArray = _li_carrays.new_ABArray

def delete_ABArray(*args):
  return _li_carrays.delete_ABArray(*args)
delete_ABArray = _li_carrays.delete_ABArray

def ABArray_getitem(*args):
  return _li_carrays.ABArray_getitem(*args)
ABArray_getitem = _li_carrays.ABArray_getitem

def ABArray_setitem(*args):
  return _li_carrays.ABArray_setitem(*args)
ABArray_setitem = _li_carrays.ABArray_setitem
# This file is compatible with both classic and new-style classes.


