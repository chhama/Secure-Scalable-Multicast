# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_template_opaque', [dirname(__file__)])
        except ImportError:
            import _template_opaque
            return _template_opaque
        if fp is not None:
            try:
                _mod = imp.load_module('_template_opaque', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _template_opaque = swig_import_helper()
    del swig_import_helper
else:
    import _template_opaque
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _template_opaque.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _template_opaque.SwigPyIterator_value(self)
    def incr(self, n=1): return _template_opaque.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _template_opaque.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _template_opaque.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _template_opaque.SwigPyIterator_equal(self, *args)
    def copy(self): return _template_opaque.SwigPyIterator_copy(self)
    def next(self): return _template_opaque.SwigPyIterator_next(self)
    def __next__(self): return _template_opaque.SwigPyIterator___next__(self)
    def previous(self): return _template_opaque.SwigPyIterator_previous(self)
    def advance(self, *args): return _template_opaque.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _template_opaque.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _template_opaque.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _template_opaque.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _template_opaque.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _template_opaque.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _template_opaque.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _template_opaque.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def FillVector(*args):
  return _template_opaque.FillVector(*args)
FillVector = _template_opaque.FillVector
class OpaqueVectorType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpaqueVectorType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpaqueVectorType, name)
    __repr__ = _swig_repr
    def iterator(self): return _template_opaque.OpaqueVectorType_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _template_opaque.OpaqueVectorType___nonzero__(self)
    def __bool__(self): return _template_opaque.OpaqueVectorType___bool__(self)
    def __len__(self): return _template_opaque.OpaqueVectorType___len__(self)
    def pop(self): return _template_opaque.OpaqueVectorType_pop(self)
    def __getslice__(self, *args): return _template_opaque.OpaqueVectorType___getslice__(self, *args)
    def __setslice__(self, *args): return _template_opaque.OpaqueVectorType___setslice__(self, *args)
    def __delslice__(self, *args): return _template_opaque.OpaqueVectorType___delslice__(self, *args)
    def __delitem__(self, *args): return _template_opaque.OpaqueVectorType___delitem__(self, *args)
    def __getitem__(self, *args): return _template_opaque.OpaqueVectorType___getitem__(self, *args)
    def __setitem__(self, *args): return _template_opaque.OpaqueVectorType___setitem__(self, *args)
    def append(self, *args): return _template_opaque.OpaqueVectorType_append(self, *args)
    def empty(self): return _template_opaque.OpaqueVectorType_empty(self)
    def size(self): return _template_opaque.OpaqueVectorType_size(self)
    def clear(self): return _template_opaque.OpaqueVectorType_clear(self)
    def swap(self, *args): return _template_opaque.OpaqueVectorType_swap(self, *args)
    def get_allocator(self): return _template_opaque.OpaqueVectorType_get_allocator(self)
    def begin(self): return _template_opaque.OpaqueVectorType_begin(self)
    def end(self): return _template_opaque.OpaqueVectorType_end(self)
    def rbegin(self): return _template_opaque.OpaqueVectorType_rbegin(self)
    def rend(self): return _template_opaque.OpaqueVectorType_rend(self)
    def pop_back(self): return _template_opaque.OpaqueVectorType_pop_back(self)
    def erase(self, *args): return _template_opaque.OpaqueVectorType_erase(self, *args)
    def __init__(self, *args): 
        this = _template_opaque.new_OpaqueVectorType(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _template_opaque.OpaqueVectorType_push_back(self, *args)
    def front(self): return _template_opaque.OpaqueVectorType_front(self)
    def back(self): return _template_opaque.OpaqueVectorType_back(self)
    def assign(self, *args): return _template_opaque.OpaqueVectorType_assign(self, *args)
    def resize(self, *args): return _template_opaque.OpaqueVectorType_resize(self, *args)
    def insert(self, *args): return _template_opaque.OpaqueVectorType_insert(self, *args)
    def reserve(self, *args): return _template_opaque.OpaqueVectorType_reserve(self, *args)
    def capacity(self): return _template_opaque.OpaqueVectorType_capacity(self)
    __swig_destroy__ = _template_opaque.delete_OpaqueVectorType
    __del__ = lambda self : None;
OpaqueVectorType_swigregister = _template_opaque.OpaqueVectorType_swigregister
OpaqueVectorType_swigregister(OpaqueVectorType)

# This file is compatible with both classic and new-style classes.


