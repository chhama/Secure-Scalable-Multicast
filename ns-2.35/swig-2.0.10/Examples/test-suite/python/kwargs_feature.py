# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kwargs_feature', [dirname(__file__)])
        except ImportError:
            import _kwargs_feature
            return _kwargs_feature
        if fp is not None:
            try:
                _mod = imp.load_module('_kwargs_feature', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kwargs_feature = swig_import_helper()
    del swig_import_helper
else:
    import _kwargs_feature
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["myDel"] = _kwargs_feature.s_myDel_set
    __swig_getmethods__["myDel"] = _kwargs_feature.s_myDel_get
    if _newclass:myDel = _swig_property(_kwargs_feature.s_myDel_get, _kwargs_feature.s_myDel_set)
    def __init__(self): 
        this = _kwargs_feature.new_s()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kwargs_feature.delete_s
    __del__ = lambda self : None;
s_swigregister = _kwargs_feature.s_swigregister
s_swigregister(s)

class Foo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Foo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Foo, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _kwargs_feature.new_Foo(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def foo(self, a=1, b=0): return _kwargs_feature.Foo_foo(self, a, b)
    __swig_getmethods__["statfoo"] = lambda x: _kwargs_feature.Foo_statfoo
    if _newclass:statfoo = staticmethod(_kwargs_feature.Foo_statfoo)
    __swig_getmethods__["create"] = lambda x: _kwargs_feature.Foo_create
    if _newclass:create = staticmethod(_kwargs_feature.Foo_create)
    __swig_destroy__ = _kwargs_feature.delete_Foo
    __del__ = lambda self : None;
    def efoo(self, a=1, b=0): return _kwargs_feature.Foo_efoo(self, a, b)
    __swig_getmethods__["sfoo"] = lambda x: _kwargs_feature.Foo_sfoo
    if _newclass:sfoo = staticmethod(_kwargs_feature.Foo_sfoo)
Foo_swigregister = _kwargs_feature.Foo_swigregister
Foo_swigregister(Foo)

def Foo_statfoo(a=1, b=0):
  return _kwargs_feature.Foo_statfoo(a, b)
Foo_statfoo = _kwargs_feature.Foo_statfoo

def Foo_create(a=1, b=0):
  return _kwargs_feature.Foo_create(a, b)
Foo_create = _kwargs_feature.Foo_create

def Foo_sfoo(a=1, b=0):
  return _kwargs_feature.Foo_sfoo(a, b)
Foo_sfoo = _kwargs_feature.Foo_sfoo

class BarInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BarInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        this = _kwargs_feature.new_BarInt(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def bar(self, a=1, b=0): return _kwargs_feature.BarInt_bar(self, a, b)
    __swig_getmethods__["statbar"] = lambda x: _kwargs_feature.BarInt_statbar
    if _newclass:statbar = staticmethod(_kwargs_feature.BarInt_statbar)
    def ebar(self, a=1, b=0): return _kwargs_feature.BarInt_ebar(self, a, b)
    __swig_getmethods__["sbar"] = lambda x: _kwargs_feature.BarInt_sbar
    if _newclass:sbar = staticmethod(_kwargs_feature.BarInt_sbar)
    __swig_destroy__ = _kwargs_feature.delete_BarInt
    __del__ = lambda self : None;
BarInt_swigregister = _kwargs_feature.BarInt_swigregister
BarInt_swigregister(BarInt)

def BarInt_statbar(a=1, b=0):
  return _kwargs_feature.BarInt_statbar(a, b)
BarInt_statbar = _kwargs_feature.BarInt_statbar

def BarInt_sbar(a=1, b=0):
  return _kwargs_feature.BarInt_sbar(a, b)
BarInt_sbar = _kwargs_feature.BarInt_sbar


def foo(a=1, b=0):
  return _kwargs_feature.foo(a, b)
foo = _kwargs_feature.foo

def templatedfunction(a=1, b=0):
  return _kwargs_feature.templatedfunction(a, b)
templatedfunction = _kwargs_feature.templatedfunction
class Hello(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hello, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hello, name)
    __repr__ = _swig_repr
    hello = _kwargs_feature.Hello_hello
    def __init__(self): 
        this = _kwargs_feature.new_Hello()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kwargs_feature.delete_Hello
    __del__ = lambda self : None;
Hello_swigregister = _kwargs_feature.Hello_swigregister
Hello_swigregister(Hello)


def rfoo(*args, **kwargs):
  return _kwargs_feature.rfoo(*args, **kwargs)
rfoo = _kwargs_feature.rfoo

def foo_kw(_from=1, _except=2):
  return _kwargs_feature.foo_kw(_from, _except)
foo_kw = _kwargs_feature.foo_kw

def foo_nu(_from=1, arg2=0):
  return _kwargs_feature.foo_nu(_from, arg2)
foo_nu = _kwargs_feature.foo_nu

def foo_mm(min=1, max=2):
  return _kwargs_feature.foo_mm(min, max)
foo_mm = _kwargs_feature.foo_mm
# This file is compatible with both classic and new-style classes.


