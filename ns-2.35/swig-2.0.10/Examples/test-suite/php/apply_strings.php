<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('apply_strings')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_apply_strings.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('apply_strings.so')) return;
    } else {
      if (!dl('apply_strings.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class apply_strings {
	static function UCharFunction($str) {
		return UCharFunction($str);
	}

	static function SCharFunction($str) {
		return SCharFunction($str);
	}

	static function CUCharFunction($str) {
		return CUCharFunction($str);
	}

	static function CSCharFunction($str) {
		return CSCharFunction($str);
	}

	static function CharFunction($buffer) {
		return CharFunction($buffer);
	}

	static function CCharFunction($buffer) {
		return CCharFunction($buffer);
	}

	static function DigitsGlobalA_set($DigitsGlobalA) {
		DigitsGlobalA_set($DigitsGlobalA);
	}

	static function DigitsGlobalA_get() {
		return DigitsGlobalA_get();
	}

	static function DigitsGlobalB_get() {
		return DigitsGlobalB_get();
	}

	static function DigitsGlobalC_set($DigitsGlobalC) {
		DigitsGlobalC_set($DigitsGlobalC);
	}

	static function DigitsGlobalC_get() {
		return DigitsGlobalC_get();
	}
}

/* PHP Proxy Classes */
class TNumber {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'DigitsMemberA') return TNumber_DigitsMemberA_set($this->_cPtr,$value);
		if ($var === 'DigitsMemberB') return TNumber_DigitsMemberB_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_apply_strings_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('TNumber_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'DigitsMemberA') return TNumber_DigitsMemberA_get($this->_cPtr);
		if ($var === 'DigitsMemberB') return TNumber_DigitsMemberB_get($this->_cPtr);
		if ($var === 'thisown') return swig_apply_strings_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_TNumber') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_TNumber();
	}
}

class DirectorTest {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_apply_strings_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_apply_strings_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function UCharFunction($str) {
		return DirectorTest_UCharFunction($this->_cPtr,$str);
	}

	function SCharFunction($str) {
		return DirectorTest_SCharFunction($this->_cPtr,$str);
	}

	function CUCharFunction($str) {
		return DirectorTest_CUCharFunction($this->_cPtr,$str);
	}

	function CSCharFunction($str) {
		return DirectorTest_CSCharFunction($this->_cPtr,$str);
	}

	function CharFunction($buffer) {
		return DirectorTest_CharFunction($this->_cPtr,$buffer);
	}

	function CCharFunction($buffer) {
		return DirectorTest_CCharFunction($this->_cPtr,$buffer);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_DirectorTest') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'DirectorTest') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_DirectorTest($_this);
	}
}


?>
