<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('director_classes')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_director_classes.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('director_classes.so')) return;
    } else {
      if (!dl('director_classes.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class director_classes {
	static function PrintDebug_set($PrintDebug) {
		PrintDebug_set($PrintDebug);
	}

	static function PrintDebug_get() {
		return PrintDebug_get();
	}
}

/* PHP Proxy Classes */
class DoubleHolder {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'val') return DoubleHolder_val_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_director_classes_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('DoubleHolder_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'val') return DoubleHolder_val_get($this->_cPtr);
		if ($var === 'thisown') return swig_director_classes_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($v=0.0) {
		if (is_resource($v) && get_resource_type($v) === '_p_DoubleHolder') {
			$this->_cPtr=$v;
			return;
		}
		$this->_cPtr=new_DoubleHolder($v);
	}
}

class Base {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_director_classes_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_director_classes_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($dd) {
		if (is_resource($dd) && get_resource_type($dd) === '_p_Base') {
			$this->_cPtr=$dd;
			return;
		}
		if (get_class($this) === 'Base') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_Base($_this, $dd);
	}

	function Val($x) {
		$r=Base_Val($this->_cPtr,$x);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleHolder($r);
		}
		return $r;
	}

	function Ref($x) {
		$r=Base_Ref($this->_cPtr,$x);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleHolder($r);
		}
		return $r;
	}

	function Ptr($x) {
		$r=Base_Ptr($this->_cPtr,$x);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleHolder($r);
		}
		return $r;
	}

	function FullyOverloaded($x) {
		return Base_FullyOverloaded($this->_cPtr,$x);
	}

	function SemiOverloaded($x) {
		return Base_SemiOverloaded($this->_cPtr,$x);
	}

	function DefaultParms($x,$y=1.1) {
		return Base_DefaultParms($this->_cPtr,$x,$y);
	}
}

class Derived extends Base {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_director_classes_alter_newobject($this->_cPtr,$value);
		Base::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Base::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_director_classes_get_newobject($this->_cPtr);
		return Base::__get($var);
	}

	function __construct($dd) {
		if (is_resource($dd) && get_resource_type($dd) === '_p_Derived') {
			$this->_cPtr=$dd;
			return;
		}
		if (get_class($this) === 'Derived') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_Derived($_this, $dd);
	}

	function Val($x) {
		$r=Derived_Val($this->_cPtr,$x);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleHolder($r);
		}
		return $r;
	}

	function Ref($x) {
		$r=Derived_Ref($this->_cPtr,$x);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleHolder($r);
		}
		return $r;
	}

	function Ptr($x) {
		$r=Derived_Ptr($this->_cPtr,$x);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleHolder($r);
		}
		return $r;
	}

	function FullyOverloaded($x) {
		return Derived_FullyOverloaded($this->_cPtr,$x);
	}

	function SemiOverloaded($x) {
		return Derived_SemiOverloaded($this->_cPtr,$x);
	}

	function DefaultParms($x,$y=1.1) {
		return Derived_DefaultParms($this->_cPtr,$x,$y);
	}
}

class Caller {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_director_classes_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_director_classes_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Caller') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Caller();
	}

	function set($b) {
		Caller_set($this->_cPtr,$b);
	}

	function reset() {
		Caller_reset($this->_cPtr);
	}

	function ValCall($x) {
		$r=Caller_ValCall($this->_cPtr,$x);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleHolder($r);
		}
		return $r;
	}

	function RefCall($x) {
		$r=Caller_RefCall($this->_cPtr,$x);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleHolder($r);
		}
		return $r;
	}

	function PtrCall($x) {
		$r=Caller_PtrCall($this->_cPtr,$x);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DoubleHolder($r);
		}
		return $r;
	}

	function FullyOverloadedCall($x) {
		return Caller_FullyOverloadedCall($this->_cPtr,$x);
	}

	function SemiOverloadedCall($x) {
		return Caller_SemiOverloadedCall($this->_cPtr,$x);
	}

	function DefaultParmsCall($x,$y=null) {
		switch (func_num_args()) {
		case 1: $r=Caller_DefaultParmsCall($this->_cPtr,$x); break;
		default: $r=Caller_DefaultParmsCall($this->_cPtr,$x,$y);
		}
		return $r;
	}
}

class BaseClass {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_director_classes_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_director_classes_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function dofoo($one,$two,$three) {
		return BaseClass_dofoo($this->_cPtr,$one,$two,$three);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_BaseClass') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'BaseClass') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_BaseClass($_this);
	}
}

class DerivedClass extends BaseClass {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_director_classes_alter_newobject($this->_cPtr,$value);
		BaseClass::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return BaseClass::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_director_classes_get_newobject($this->_cPtr);
		return BaseClass::__get($var);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_DerivedClass') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'DerivedClass') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_DerivedClass($_this);
	}
}


?>
