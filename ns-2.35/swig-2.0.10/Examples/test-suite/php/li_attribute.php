<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('li_attribute')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_li_attribute.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('li_attribute.so')) return;
    } else {
      if (!dl('li_attribute.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* PHP Proxy Classes */
class A {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'A_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_attribute_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('A_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'A_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_li_attribute_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($a,$b,$c_) {
		if (is_resource($a) && get_resource_type($a) === '_p_A') {
			$this->_cPtr=$a;
			return;
		}
		$this->_cPtr=new_A($a,$b,$c_);
	}
}

class B {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'a') return B_a_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_attribute_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('B_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'a') return new A(B_a_get($this->_cPtr));
		if ($var === 'thisown') return swig_li_attribute_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($a) {
		if (is_resource($a) && get_resource_type($a) === '_p_B') {
			$this->_cPtr=$a;
			return;
		}
		$this->_cPtr=new_B($a);
	}
}

class Param_i {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'value') return Param_i_value_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_attribute_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Param_i_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'value') return Param_i_value_get($this->_cPtr);
		if ($var === 'thisown') return swig_li_attribute_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($v) {
		if (is_resource($v) && get_resource_type($v) === '_p_ParamT_int_t') {
			$this->_cPtr=$v;
			return;
		}
		$this->_cPtr=new_Param_i($v);
	}
}

class MyFoo {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'x') return MyFoo_x_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_attribute_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('MyFoo_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'x') return MyFoo_x_get($this->_cPtr);
		if ($var === 'thisown') return swig_li_attribute_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_MyFoo') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_MyFoo();
	}
}

class MyClass {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'Foo') return MyClass_Foo_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_attribute_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('MyClass_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'Foo') return new MyFoo(MyClass_Foo_get($this->_cPtr));
		if ($var === 'thisown') return swig_li_attribute_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_MyClass') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_MyClass();
	}
}

class MyClassVal {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'ReadWriteFoo') return MyClassVal_ReadWriteFoo_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_attribute_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('MyClassVal_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'ReadOnlyFoo') return new MyFoo(MyClassVal_ReadOnlyFoo_get($this->_cPtr));
		if ($var === 'ReadWriteFoo') return new MyFoo(MyClassVal_ReadWriteFoo_get($this->_cPtr));
		if ($var === 'thisown') return swig_li_attribute_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_MyClassVal') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_MyClassVal();
	}
}

class MyStringyClass {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'ReadWriteString') return MyStringyClass_ReadWriteString_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_attribute_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('MyStringyClass_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'ReadWriteString') return MyStringyClass_ReadWriteString_get($this->_cPtr);
		if ($var === 'ReadOnlyString') return MyStringyClass_ReadOnlyString_get($this->_cPtr);
		if ($var === 'thisown') return swig_li_attribute_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($val) {
		if (is_resource($val) && get_resource_type($val) === '_p_MyStringyClass') {
			$this->_cPtr=$val;
			return;
		}
		$this->_cPtr=new_MyStringyClass($val);
	}
}


?>
