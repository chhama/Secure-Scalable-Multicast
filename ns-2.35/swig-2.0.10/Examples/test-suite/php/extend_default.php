<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('extend_default')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_extend_default.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('extend_default.so')) return;
    } else {
      if (!dl('extend_default.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* PHP Proxy Classes */
class Before {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'i') return Before_i_set($this->_cPtr,$value);
		if ($var === 'd') return Before_d_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_extend_default_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Before_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'i') return Before_i_get($this->_cPtr);
		if ($var === 'd') return Before_d_get($this->_cPtr);
		if ($var === 'thisown') return swig_extend_default_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($i=-1,$d=-1.0) {
		if (is_resource($i) && get_resource_type($i) === '_p_Before') {
			$this->_cPtr=$i;
			return;
		}
		$this->_cPtr=new_Before($i,$d);
	}

	static function AddedStaticMethod($i=-1,$d=-1.0) {
		return Before_AddedStaticMethod($i,$d);
	}

	function AddedMethod($i=-1,$d=-1.0) {
		return Before_AddedMethod($this->_cPtr,$i,$d);
	}
}

class After {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'i') return After_i_set($this->_cPtr,$value);
		if ($var === 'd') return After_d_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_extend_default_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('After_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'i') return After_i_get($this->_cPtr);
		if ($var === 'd') return After_d_get($this->_cPtr);
		if ($var === 'thisown') return swig_extend_default_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($i=-1,$d=-1.0) {
		if (is_resource($i) && get_resource_type($i) === '_p_After') {
			$this->_cPtr=$i;
			return;
		}
		$this->_cPtr=new_After($i,$d);
	}

	static function AddedStaticMethod($i=-1,$d=-1.0) {
		return After_AddedStaticMethod($i,$d);
	}

	function AddedMethod($i=-1,$d=-1.0) {
		return After_AddedMethod($this->_cPtr,$i,$d);
	}
}

class OverBefore {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'i') return OverBefore_i_set($this->_cPtr,$value);
		if ($var === 'd') return OverBefore_d_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_extend_default_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('OverBefore_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'i') return OverBefore_i_get($this->_cPtr);
		if ($var === 'd') return OverBefore_d_get($this->_cPtr);
		if ($var === 'thisown') return swig_extend_default_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($str_or_i=null,$ii_or_d=null,$dd=null) {
		if (is_resource($str_or_i) && get_resource_type($str_or_i) === '_p_OverBefore') {
			$this->_cPtr=$str_or_i;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_OverBefore(); break;
		case 1: $this->_cPtr=new_OverBefore($str_or_i); break;
		case 2: $this->_cPtr=new_OverBefore($str_or_i,$ii_or_d); break;
		default: $this->_cPtr=new_OverBefore($str_or_i,$ii_or_d,$dd);
		}
	}

	static function AddedStaticMethod($i=null,$ii_or_d=null,$dd=null) {
		switch (func_num_args()) {
		case 0: $r=OverBefore_AddedStaticMethod(); break;
		case 1: $r=OverBefore_AddedStaticMethod($i); break;
		case 2: $r=OverBefore_AddedStaticMethod($i,$ii_or_d); break;
		default: $r=OverBefore_AddedStaticMethod($i,$ii_or_d,$dd);
		}
		return $r;
	}

	function AddedMethod($i=null,$ii_or_d=null,$dd=null) {
		switch (func_num_args()) {
		case 0: $r=OverBefore_AddedMethod($this->_cPtr); break;
		case 1: $r=OverBefore_AddedMethod($this->_cPtr,$i); break;
		case 2: $r=OverBefore_AddedMethod($this->_cPtr,$i,$ii_or_d); break;
		default: $r=OverBefore_AddedMethod($this->_cPtr,$i,$ii_or_d,$dd);
		}
		return $r;
	}
}

class OverAfter {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'i') return OverAfter_i_set($this->_cPtr,$value);
		if ($var === 'd') return OverAfter_d_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_extend_default_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('OverAfter_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'i') return OverAfter_i_get($this->_cPtr);
		if ($var === 'd') return OverAfter_d_get($this->_cPtr);
		if ($var === 'thisown') return swig_extend_default_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($str_or_i=null,$ii_or_d=null,$dd=null) {
		if (is_resource($str_or_i) && get_resource_type($str_or_i) === '_p_OverAfter') {
			$this->_cPtr=$str_or_i;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_OverAfter(); break;
		case 1: $this->_cPtr=new_OverAfter($str_or_i); break;
		case 2: $this->_cPtr=new_OverAfter($str_or_i,$ii_or_d); break;
		default: $this->_cPtr=new_OverAfter($str_or_i,$ii_or_d,$dd);
		}
	}

	static function AddedStaticMethod($i=null,$ii_or_d=null,$dd=null) {
		switch (func_num_args()) {
		case 0: $r=OverAfter_AddedStaticMethod(); break;
		case 1: $r=OverAfter_AddedStaticMethod($i); break;
		case 2: $r=OverAfter_AddedStaticMethod($i,$ii_or_d); break;
		default: $r=OverAfter_AddedStaticMethod($i,$ii_or_d,$dd);
		}
		return $r;
	}

	function AddedMethod($i=null,$ii_or_d=null,$dd=null) {
		switch (func_num_args()) {
		case 0: $r=OverAfter_AddedMethod($this->_cPtr); break;
		case 1: $r=OverAfter_AddedMethod($this->_cPtr,$i); break;
		case 2: $r=OverAfter_AddedMethod($this->_cPtr,$i,$ii_or_d); break;
		default: $r=OverAfter_AddedMethod($this->_cPtr,$i,$ii_or_d,$dd);
		}
		return $r;
	}
}

class Override {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_extend_default_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_extend_default_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function ride($a=-1) {
		return Override_ride($this->_cPtr,$a);
	}

	function over($a=null) {
		switch (func_num_args()) {
		case 0: $r=Override_over($this->_cPtr); break;
		default: $r=Override_over($this->_cPtr,$a);
		}
		return $r;
	}

	function overload($a=null) {
		switch (func_num_args()) {
		case 0: $r=Override_overload($this->_cPtr); break;
		default: $r=Override_overload($this->_cPtr,$a);
		}
		return $r;
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Override') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Override();
	}
}

class Base {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_extend_default_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_extend_default_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function realvirtual($a=0) {
		return Base_realvirtual($this->_cPtr,$a);
	}

	function virtualmethod($a=0) {
		return Base_virtualmethod($this->_cPtr,$a);
	}

	function nonvirtual($a=0) {
		return Base_nonvirtual($this->_cPtr,$a);
	}

	static function static_method($a=0) {
		return Base_static_method($a);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Base') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Base();
	}
}

class Derived extends Base {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_extend_default_alter_newobject($this->_cPtr,$value);
		Base::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Base::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_extend_default_get_newobject($this->_cPtr);
		return Base::__get($var);
	}

	function virtualmethod($a=0) {
		return Derived_virtualmethod($this->_cPtr,$a);
	}

	function nonvirtual($a=0) {
		return Derived_nonvirtual($this->_cPtr,$a);
	}

	static function static_method($a=0) {
		return Derived_static_method($a);
	}

	function realvirtual($a=0) {
		return Derived_realvirtual($this->_cPtr,$a);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Derived') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Derived();
	}
}


?>
