<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('virtual_poly')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_virtual_poly.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('virtual_poly.so')) return;
    } else {
      if (!dl('virtual_poly.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class virtual_poly {
	static function incr($i) {
		$r=incr($i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NInt($r);
		}
		return $r;
	}
}

/* PHP Proxy Classes */
abstract class NNumber {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virtual_poly_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virtual_poly_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function copy() {
		$r=NNumber_copy($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NNumber($r);
		}
		return $r;
	}

	function ref_this() {
		$r=NNumber_ref_this($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}

	function nnumber() {
		$r=NNumber_nnumber($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}
}

class NInt extends NNumber {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virtual_poly_alter_newobject($this->_cPtr,$value);
		NNumber::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return NNumber::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virtual_poly_get_newobject($this->_cPtr);
		return NNumber::__get($var);
	}

	function __construct($v) {
		if (is_resource($v) && get_resource_type($v) === '_p_NInt') {
			$this->_cPtr=$v;
			return;
		}
		$this->_cPtr=new_NInt($v);
	}

	function get() {
		return NInt_get($this->_cPtr);
	}

	function copy() {
		$r=NInt_copy($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NInt($r);
		}
		return $r;
	}

	function ref_this() {
		$r=NInt_ref_this($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NInt($r);
		}
		return $r;
	}

	static function narrow($nn) {
		$r=NInt_narrow($nn);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NInt($r);
		}
		return $r;
	}
}

class NDouble extends NNumber {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virtual_poly_alter_newobject($this->_cPtr,$value);
		NNumber::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return NNumber::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virtual_poly_get_newobject($this->_cPtr);
		return NNumber::__get($var);
	}

	function __construct($v) {
		if (is_resource($v) && get_resource_type($v) === '_p_NDouble') {
			$this->_cPtr=$v;
			return;
		}
		$this->_cPtr=new_NDouble($v);
	}

	function get() {
		return NDouble_get($this->_cPtr);
	}

	function copy() {
		$r=NDouble_copy($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NDouble($r);
		}
		return $r;
	}

	function ref_this() {
		$r=NDouble_ref_this($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NDouble($r);
		}
		return $r;
	}

	static function narrow($nn) {
		$r=NDouble_narrow($nn);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new NDouble($r);
		}
		return $r;
	}
}

abstract class BaseInt {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 't') return BaseInt_t_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_virtual_poly_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('BaseInt_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 't') return BaseInt_t_get($this->_cPtr);
		if ($var === 'thisown') return swig_virtual_poly_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function method() {
		return BaseInt_method($this->_cPtr);
	}

	function foxy($a=null) {
		switch (func_num_args()) {
		case 0: $r=BaseInt_foxy($this->_cPtr); break;
		default: $r=BaseInt_foxy($this->_cPtr,$a);
		}
		return $r;
	}

	function afunction() {
		return BaseInt_afunction($this->_cPtr);
	}

	function defaultargs($d,$a=null) {
		return BaseInt_defaultargs($this->_cPtr,$d,$a);
	}

	static function StaticHidden() {
		BaseInt_StaticHidden();
	}

	function AmIAmINotVirtual() {
		BaseInt_AmIAmINotVirtual($this->_cPtr);
	}

	function NotVirtual($i) {
		return BaseInt_NotVirtual($this->_cPtr,$i);
	}

	function covariant($a=0,$i=null) {
		$r=BaseInt_covariant($this->_cPtr,$a,$i);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_BaseT_int_t': return new BaseInt($r);
		default: return new BaseInt($r);
		}
	}

	function covariant2() {
		$r=BaseInt_covariant2($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}

	function covariant3() {
		$r=BaseInt_covariant3($this->_cPtr);
		$this->_cPtr = $r;
		return $this;
	}
}

class DerivedInt extends BaseInt {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_virtual_poly_alter_newobject($this->_cPtr,$value);
		BaseInt::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return BaseInt::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_virtual_poly_get_newobject($this->_cPtr);
		return BaseInt::__get($var);
	}

	function method() {
		return DerivedInt_method($this->_cPtr);
	}

	function foxy($a=null) {
		switch (func_num_args()) {
		case 0: $r=DerivedInt_foxy($this->_cPtr); break;
		default: $r=DerivedInt_foxy($this->_cPtr,$a);
		}
		return $r;
	}

	function afunction() {
		return DerivedInt_afunction($this->_cPtr);
	}

	function defaultargs($d,$a=null) {
		return DerivedInt_defaultargs($this->_cPtr,$d,$a);
	}

	function AmIAmINotVirtual() {
		DerivedInt_AmIAmINotVirtual($this->_cPtr);
	}

	function NotVirtual($i) {
		return DerivedInt_NotVirtual($this->_cPtr,$i);
	}

	function covariant($a=0,$i=null) {
		$r=DerivedInt_covariant($this->_cPtr,$a,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DerivedInt($r);
		}
		return $r;
	}

	function covariant2() {
		$r=DerivedInt_covariant2($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DerivedInt($r);
		}
		return $r;
	}

	function covariant3() {
		$r=DerivedInt_covariant3($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DerivedInt($r);
		}
		return $r;
	}

	function covariant4($d) {
		$r=DerivedInt_covariant4($this->_cPtr,$d);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DerivedInt($r);
		}
		return $r;
	}

	function IsVirtual() {
		return DerivedInt_IsVirtual($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_DerivedT_int_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_DerivedInt();
	}
}

class BottomInt extends DerivedInt {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'funcptr') return BottomInt_funcptr_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_virtual_poly_alter_newobject($this->_cPtr,$value);
		DerivedInt::__set($var,$value);
	}

	function __isset($var) {
		if (function_exists('BottomInt_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return DerivedInt::__isset($var);
	}

	function __get($var) {
		if ($var === 'funcptr') return BottomInt_funcptr_get($this->_cPtr);
		if ($var === 'thisown') return swig_virtual_poly_get_newobject($this->_cPtr);
		return DerivedInt::__get($var);
	}

	function method() {
		return BottomInt_method($this->_cPtr);
	}

	static function StaticHidden() {
		BottomInt_StaticHidden();
	}

	function AmIAmINotVirtual() {
		BottomInt_AmIAmINotVirtual($this->_cPtr);
	}

	function NotVirtual($i) {
		return BottomInt_NotVirtual($this->_cPtr,$i);
	}

	function covariant($a=0,$i=null) {
		$r=BottomInt_covariant($this->_cPtr,$a,$i);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_BottomT_int_t': return new BottomInt($r);
		default: return new BottomInt($r);
		}
	}

	function covariant2() {
		$r=BottomInt_covariant2($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new DerivedInt($r);
		}
		return $r;
	}

	function covariant3() {
		$r=BottomInt_covariant3($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new BottomInt($r);
		}
		return $r;
	}

	function covariant4($d) {
		$r=BottomInt_covariant4($this->_cPtr,$d);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new BottomInt($r);
		}
		return $r;
	}

	function IsVirtual() {
		return BottomInt_IsVirtual($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_BottomT_int_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_BottomInt();
	}
}


?>
