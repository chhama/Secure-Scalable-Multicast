<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('cpp_enum')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_cpp_enum.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('cpp_enum.so')) return;
    } else {
      if (!dl('cpp_enum.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class cpp_enum {
	const ENUM_ONE = 0;

	const ENUM_TWO = ENUM_TWO;

	const Hi = 0;

	const Hello = Hello;

	static function hi_set($hi) {
		hi_set($hi);
	}

	static function hi_get() {
		return hi_get();
	}

	const PLAY = PLAY;

	const STOP = STOP;
}

/* PHP Proxy Classes */
class StructWithEnums {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'some_enum') return StructWithEnums_some_enum_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_cpp_enum_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('StructWithEnums_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'some_enum') return StructWithEnums_some_enum_get($this->_cPtr);
		if ($var === 'thisown') return swig_cpp_enum_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_StructWithEnums') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_StructWithEnums();
	}

	function enum_test1($param1,$param2,$param3) {
		StructWithEnums_enum_test1($this->_cPtr,$param1,$param2,$param3);
	}

	function enum_test2($param1,$param2,$param3) {
		StructWithEnums_enum_test2($this->_cPtr,$param1,$param2,$param3);
	}

	function enum_test3() {
		return StructWithEnums_enum_test3($this->_cPtr);
	}

	function enum_test4() {
		return StructWithEnums_enum_test4($this->_cPtr);
	}

	function enum_test5() {
		return StructWithEnums_enum_test5($this->_cPtr);
	}

	function enum_test6() {
		return StructWithEnums_enum_test6($this->_cPtr);
	}

	function enum_test7() {
		return StructWithEnums_enum_test7($this->_cPtr);
	}

	function enum_test8() {
		return StructWithEnums_enum_test8($this->_cPtr);
	}
}

class Foo {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'hola') return Foo_hola_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_cpp_enum_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Foo_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'hola') return Foo_hola_get($this->_cPtr);
		if ($var === 'thisown') return swig_cpp_enum_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const Hi = 0;

	const Hello = Foo_Hello;

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Foo') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Foo();
	}
}


?>
