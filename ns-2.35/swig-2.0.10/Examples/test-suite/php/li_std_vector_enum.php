<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('li_std_vector_enum')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_li_std_vector_enum.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('li_std_vector_enum.so')) return;
    } else {
      if (!dl('li_std_vector_enum.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* PHP Proxy Classes */
class EnumVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'nums') return EnumVector_nums_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_std_vector_enum_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('EnumVector_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'nums') return new vector_numbers(EnumVector_nums_get($this->_cPtr));
		if ($var === 'thisown') return swig_li_std_vector_enum_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_EnumVector') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_EnumVector();
	}

	const ten = 10;

	const twenty = 20;

	const thirty = 30;

	function fill_numbers() {
		EnumVector_fill_numbers($this->_cPtr);
	}
}

class vector_numbers {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_li_std_vector_enum_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_li_std_vector_enum_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_EnumVector__numbers_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_vector_numbers(); break;
		default: $this->_cPtr=new_vector_numbers($n);
		}
	}

	function size() {
		return vector_numbers_size($this->_cPtr);
	}

	function capacity() {
		return vector_numbers_capacity($this->_cPtr);
	}

	function reserve($n) {
		vector_numbers_reserve($this->_cPtr,$n);
	}

	function clear() {
		vector_numbers_clear($this->_cPtr);
	}

	function push($x) {
		vector_numbers_push($this->_cPtr,$x);
	}

	function is_empty() {
		return vector_numbers_is_empty($this->_cPtr);
	}

	function pop() {
		return vector_numbers_pop($this->_cPtr);
	}

	function get($i) {
		return vector_numbers_get($this->_cPtr,$i);
	}

	function set($i,$val) {
		vector_numbers_set($this->_cPtr,$i,$val);
	}
}


?>
