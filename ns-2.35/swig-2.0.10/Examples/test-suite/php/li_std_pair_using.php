<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('li_std_pair_using')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_li_std_pair_using.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('li_std_pair_using.so')) return;
    } else {
      if (!dl('li_std_pair_using.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class li_std_pair_using {
	static function bounce($p) {
		$r=bounce($p);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringStringPair($r);
		}
		return $r;
	}
}

/* PHP Proxy Classes */
class StringStringPair {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'first') return StringStringPair_first_set($this->_cPtr,$value);
		if ($var === 'second') return StringStringPair_second_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_std_pair_using_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('StringStringPair_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'first') return StringStringPair_first_get($this->_cPtr);
		if ($var === 'second') return StringStringPair_second_get($this->_cPtr);
		if ($var === 'thisown') return swig_li_std_pair_using_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($first_or_p=null,$second=null) {
		if (is_resource($first_or_p) && get_resource_type($first_or_p) === '_p_std__pairT_std__string_std__string_t') {
			$this->_cPtr=$first_or_p;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringStringPair(); break;
		case 1: $this->_cPtr=new_StringStringPair($first_or_p); break;
		default: $this->_cPtr=new_StringStringPair($first_or_p,$second);
		}
	}
}

class StringIntPair {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'first') return StringIntPair_first_set($this->_cPtr,$value);
		if ($var === 'second') return StringIntPair_second_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_std_pair_using_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('StringIntPair_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'first') return StringIntPair_first_get($this->_cPtr);
		if ($var === 'second') return StringIntPair_second_get($this->_cPtr);
		if ($var === 'thisown') return swig_li_std_pair_using_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($first_or_p=null,$second=null) {
		if (is_resource($first_or_p) && get_resource_type($first_or_p) === '_p_std__pairT_std__string_int_t') {
			$this->_cPtr=$first_or_p;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringIntPair(); break;
		case 1: $this->_cPtr=new_StringIntPair($first_or_p); break;
		default: $this->_cPtr=new_StringIntPair($first_or_p,$second);
		}
	}
}


?>
