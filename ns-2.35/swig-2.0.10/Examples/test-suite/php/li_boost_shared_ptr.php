<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('li_boost_shared_ptr')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_li_boost_shared_ptr.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('li_boost_shared_ptr.so')) return;
    } else {
      if (!dl('li_boost_shared_ptr.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class li_boost_shared_ptr {
	static function debug_shared_set($debug_shared) {
		debug_shared_set($debug_shared);
	}

	static function debug_shared_get() {
		return debug_shared_get();
	}

	static function derivedpointertest($kd) {
		$r=derivedpointertest($kd);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new KlassDerived($r);
		}
		return $r;
	}

	static function derivedreftest($kd) {
		$r=derivedreftest($kd);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new KlassDerived($r);
		}
		return $r;
	}

	static function derivedsmartptrtest($kd) {
		return derivedsmartptrtest($kd);
	}

	static function derivedsmartptrpointertest($kd) {
		return derivedsmartptrpointertest($kd);
	}

	static function derivedsmartptrreftest($kd) {
		return derivedsmartptrreftest($kd);
	}

	static function derivedsmartptrpointerreftest($kd) {
		return derivedsmartptrpointerreftest($kd);
	}

	static function test3rdupcast($k) {
		return test3rdupcast($k);
	}

	static function factorycreate() {
		return factorycreate();
	}

	static function smartpointertest($k) {
		return smartpointertest($k);
	}

	static function smartpointerpointertest($k) {
		return smartpointerpointertest($k);
	}

	static function smartpointerreftest($k) {
		return smartpointerreftest($k);
	}

	static function smartpointerpointerreftest($k) {
		return smartpointerpointerreftest($k);
	}

	static function constsmartpointertest($k) {
		return constsmartpointertest($k);
	}

	static function constsmartpointerpointertest($k) {
		return constsmartpointerpointertest($k);
	}

	static function constsmartpointerreftest($k) {
		return constsmartpointerreftest($k);
	}

	static function valuetest($k) {
		$r=valuetest($k);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Klass($r);
		}
		return $r;
	}

	static function pointertest($k) {
		$r=pointertest($k);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Klass($r);
		}
		return $r;
	}

	static function reftest($k) {
		$r=reftest($k);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Klass($r);
		}
		return $r;
	}

	static function pointerreftest($k) {
		$r=pointerreftest($k);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Klass($r);
		}
		return $r;
	}

	static function nullsmartpointerpointertest($k) {
		return nullsmartpointerpointertest($k);
	}

	static function pointerownertest() {
		$r=pointerownertest();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Klass($r);
		}
		return $r;
	}

	static function smartpointerpointerownertest() {
		return smartpointerpointerownertest();
	}

	static function use_count($sptr) {
		return use_count($sptr);
	}

	static function ref_1() {
		return ref_1();
	}

	static function overload_rawbyval($i_or_k) {
		return overload_rawbyval($i_or_k);
	}

	static function overload_rawbyref($i_or_k) {
		return overload_rawbyref($i_or_k);
	}

	static function overload_rawbyptr($i_or_k) {
		return overload_rawbyptr($i_or_k);
	}

	static function overload_rawbyptrref($i_or_k) {
		return overload_rawbyptrref($i_or_k);
	}

	static function overload_smartbyval($i_or_k) {
		return overload_smartbyval($i_or_k);
	}

	static function overload_smartbyref($i_or_k) {
		return overload_smartbyref($i_or_k);
	}

	static function overload_smartbyptr($i_or_k) {
		return overload_smartbyptr($i_or_k);
	}

	static function overload_smartbyptrref($i_or_k) {
		return overload_smartbyptrref($i_or_k);
	}

	static function GlobalSmartValue_set($GlobalSmartValue) {
		GlobalSmartValue_set($GlobalSmartValue);
	}

	static function GlobalSmartValue_get() {
		return GlobalSmartValue_get();
	}

	static function GlobalValue_set($GlobalValue) {
		GlobalValue_set($GlobalValue);
	}

	static function GlobalValue_get() {
		$r=GlobalValue_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Klass($r);
		}
		return $r;
	}

	static function GlobalPointer_set($GlobalPointer) {
		GlobalPointer_set($GlobalPointer);
	}

	static function GlobalPointer_get() {
		$r=GlobalPointer_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Klass($r);
		}
		return $r;
	}

	static function GlobalReference_set($GlobalReference) {
		GlobalReference_set($GlobalReference);
	}

	static function GlobalReference_get() {
		$r=GlobalReference_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Klass($r);
		}
		return $r;
	}

	static function pair_id2($p) {
		$r=pair_id2($p);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new PairIntDouble($r);
		}
		return $r;
	}

	static function pair_id1($p) {
		return pair_id1($p);
	}

	static function NOT_COUNTING_get() {
		return NOT_COUNTING_get();
	}

	static function shared_ptr_wrapper_count() {
		return shared_ptr_wrapper_count();
	}
}

/* PHP Proxy Classes */
class Klass {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_li_boost_shared_ptr_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_li_boost_shared_ptr_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function getValue() {
		return Klass_getValue($this->_cPtr);
	}

	function append($s) {
		Klass_append($this->_cPtr,$s);
	}

	function __construct($val_or_other=null) {
		if (is_resource($val_or_other) && get_resource_type($val_or_other) === '_p_Space__Klass') {
			$this->_cPtr=$val_or_other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Klass(); break;
		default: $this->_cPtr=new_Klass($val_or_other);
		}
	}

	static function getTotal_count() {
		return Klass_getTotal_count();
	}
}

class KlassDerived extends Klass {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_li_boost_shared_ptr_alter_newobject($this->_cPtr,$value);
		Klass::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Klass::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_li_boost_shared_ptr_get_newobject($this->_cPtr);
		return Klass::__get($var);
	}

	function __construct($val_or_other=null) {
		if (is_resource($val_or_other) && get_resource_type($val_or_other) === '_p_Space__KlassDerived') {
			$this->_cPtr=$val_or_other;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_KlassDerived(); break;
		default: $this->_cPtr=new_KlassDerived($val_or_other);
		}
	}

	function getValue() {
		return KlassDerived_getValue($this->_cPtr);
	}
}

class Klass2ndDerived extends Klass {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_li_boost_shared_ptr_alter_newobject($this->_cPtr,$value);
		Klass::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Klass::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_li_boost_shared_ptr_get_newobject($this->_cPtr);
		return Klass::__get($var);
	}

	function __construct($val=null) {
		if (is_resource($val) && get_resource_type($val) === '_p_Space__Klass2ndDerived') {
			$this->_cPtr=$val;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Klass2ndDerived(); break;
		default: $this->_cPtr=new_Klass2ndDerived($val);
		}
	}
}

class Klass3rdDerived extends Klass2ndDerived {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_li_boost_shared_ptr_alter_newobject($this->_cPtr,$value);
		Klass2ndDerived::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Klass2ndDerived::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_li_boost_shared_ptr_get_newobject($this->_cPtr);
		return Klass2ndDerived::__get($var);
	}

	function __construct($val=null) {
		if (is_resource($val) && get_resource_type($val) === '_p_Space__Klass3rdDerived') {
			$this->_cPtr=$val;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Klass3rdDerived(); break;
		default: $this->_cPtr=new_Klass3rdDerived($val);
		}
	}

	function getValue() {
		return Klass3rdDerived_getValue($this->_cPtr);
	}
}

class MemberVariables {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'MemberVariables_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_boost_shared_ptr_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('MemberVariables_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'MemberValue') return new Klass(MemberVariables_MemberValue_get($this->_cPtr));
		if ($var === 'MemberPointer') return new Klass(MemberVariables_MemberPointer_get($this->_cPtr));
		if ($var === 'MemberReference') return new Klass(MemberVariables_MemberReference_get($this->_cPtr));
		$func = 'MemberVariables_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_li_boost_shared_ptr_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_MemberVariables') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_MemberVariables();
	}
}

class BaseIntDouble {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'BaseIntDouble_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_boost_shared_ptr_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('BaseIntDouble_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'klassBase') return new Klass(BaseIntDouble_klassBase_get($this->_cPtr));
		if ($var === 'baseVal2') return BaseIntDouble_baseVal2_get($this->_cPtr);
		if ($var === 'baseVal1') return BaseIntDouble_baseVal1_get($this->_cPtr);
		if ($var === 'thisown') return swig_li_boost_shared_ptr_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($t1,$t2) {
		if (is_resource($t1) && get_resource_type($t1) === '_p_BaseT_int_double_t') {
			$this->_cPtr=$t1;
			return;
		}
		$this->_cPtr=new_BaseIntDouble($t1,$t2);
	}

	function getValue() {
		return BaseIntDouble_getValue($this->_cPtr);
	}
}

class PairIntDouble extends BaseIntDouble {
	public $_cPtr=null;

	function __set($var,$value) {
		$func = 'PairIntDouble_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_boost_shared_ptr_alter_newobject($this->_cPtr,$value);
		BaseIntDouble::__set($var,$value);
	}

	function __isset($var) {
		if (function_exists('PairIntDouble_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return BaseIntDouble::__isset($var);
	}

	function __get($var) {
		if ($var === 'klassPair') return new Klass(PairIntDouble_klassPair_get($this->_cPtr));
		if ($var === 'val1') return PairIntDouble_val1_get($this->_cPtr);
		if ($var === 'val2') return PairIntDouble_val2_get($this->_cPtr);
		if ($var === 'thisown') return swig_li_boost_shared_ptr_get_newobject($this->_cPtr);
		return BaseIntDouble::__get($var);
	}

	function __construct($t1,$t2) {
		if (is_resource($t1) && get_resource_type($t1) === '_p_PairT_int_double_t') {
			$this->_cPtr=$t1;
			return;
		}
		$this->_cPtr=new_PairIntDouble($t1,$t2);
	}

	function getValue() {
		return PairIntDouble_getValue($this->_cPtr);
	}
}


?>
