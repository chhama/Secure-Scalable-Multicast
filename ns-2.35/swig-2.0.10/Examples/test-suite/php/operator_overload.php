<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('operator_overload')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_operator_overload.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('operator_overload.so')) return;
    } else {
      if (!dl('operator_overload.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class operator_overload {
	static function AndOperator($a,$b) {
		$r=AndOperator($a,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	static function OrOperator($a,$b) {
		$r=OrOperator($a,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	static function Plus($a,$b) {
		$r=Plus($a,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	static function Minus($a,$b) {
		$r=Minus($a,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	static function Multiply($a,$b) {
		$r=Multiply($a,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	static function Divide($a,$b) {
		$r=Divide($a,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	static function Percent($a,$b) {
		$r=Percent($a,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	static function EqualEqual($a,$b) {
		return EqualEqual($a,$b);
	}

	static function NotEqual($a,$b) {
		return NotEqual($a,$b);
	}

	static function LessThan($a,$b) {
		return LessThan($a,$b);
	}

	static function LessThanEqual($a,$b) {
		return LessThanEqual($a,$b);
	}

	static function GreaterThan($a,$b) {
		return GreaterThan($a,$b);
	}

	static function GreaterThanEqual($a,$b) {
		return GreaterThanEqual($a,$b);
	}
}

/* PHP Proxy Classes */
class Op {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'i') return Op_i_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_operator_overload_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Op_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'i') return Op_i_get($this->_cPtr);
		if ($var === 'thisown') return swig_operator_overload_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($a_or_o=null) {
		if (is_resource($a_or_o) && get_resource_type($a_or_o) === '_p_Op') {
			$this->_cPtr=$a_or_o;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Op(); break;
		default: $this->_cPtr=new_Op($a_or_o);
		}
	}

	function Equal($o) {
		$r=Op_Equal($this->_cPtr,$o);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function PlusEqual($o) {
		Op_PlusEqual($this->_cPtr,$o);
	}

	function MinusEqual($o) {
		Op_MinusEqual($this->_cPtr,$o);
	}

	function MultiplyEqual($o) {
		Op_MultiplyEqual($this->_cPtr,$o);
	}

	function DivideEqual($o) {
		Op_DivideEqual($this->_cPtr,$o);
	}

	function PercentEqual($o) {
		Op_PercentEqual($this->_cPtr,$o);
	}

	function Not() {
		return Op_Not($this->_cPtr);
	}

	function IndexIntoConst($idx) {
		return Op_IndexIntoConst($this->_cPtr,$idx);
	}

	function IndexInto($idx) {
		return Op_IndexInto($this->_cPtr,$idx);
	}

	function Functor($a=null,$b=null) {
		switch (func_num_args()) {
		case 0: $r=Op_Functor($this->_cPtr); break;
		case 1: $r=Op_Functor($this->_cPtr,$a); break;
		default: $r=Op_Functor($this->_cPtr,$a,$b);
		}
		return $r;
	}

	function PlusPlusPrefix() {
		$r=Op_PlusPlusPrefix($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function PlusPlusPostfix($arg1) {
		$r=Op_PlusPlusPostfix($this->_cPtr,$arg1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function MinusMinusPrefix() {
		$r=Op_MinusMinusPrefix($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function MinusMinusPostfix($arg1) {
		$r=Op_MinusMinusPostfix($this->_cPtr,$arg1);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function DoubleCast() {
		return Op_DoubleCast($this->_cPtr);
	}

	function IntCast() {
		return Op_IntCast($this->_cPtr);
	}

	static function sanity_check() {
		Op_sanity_check();
	}

	function AndOperator($b) {
		$r=Op_AndOperator($this->_cPtr,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function OrOperator($b) {
		$r=Op_OrOperator($this->_cPtr,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function Plus($b) {
		$r=Op_Plus($this->_cPtr,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function Minus($b=null) {
		switch (func_num_args()) {
		case 0: $r=Op_Minus($this->_cPtr); break;
		default: $r=Op_Minus($this->_cPtr,$b);
		}
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function Multiply($b) {
		$r=Op_Multiply($this->_cPtr,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function Divide($b) {
		$r=Op_Divide($this->_cPtr,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function Percent($b) {
		$r=Op_Percent($this->_cPtr,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function EqualEqual($b) {
		return Op_EqualEqual($this->_cPtr,$b);
	}

	function NotEqual($b) {
		return Op_NotEqual($this->_cPtr,$b);
	}

	function LessThan($b) {
		return Op_LessThan($this->_cPtr,$b);
	}

	function LessThanEqual($b) {
		return Op_LessThanEqual($this->_cPtr,$b);
	}

	function GreaterThan($b) {
		return Op_GreaterThan($this->_cPtr,$b);
	}

	function GreaterThanEqual($b) {
		return Op_GreaterThanEqual($this->_cPtr,$b);
	}

	function __rsub__($b) {
		$r=Op___rsub__($this->_cPtr,$b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function __str__() {
		return Op___str__($this->_cPtr);
	}

	function __getitem__($i) {
		return Op___getitem__($this->_cPtr,$i);
	}

	function __setitem__($i,$v) {
		Op___setitem__($this->_cPtr,$i,$v);
	}
}

class OpDerived extends Op {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_operator_overload_alter_newobject($this->_cPtr,$value);
		Op::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Op::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_operator_overload_get_newobject($this->_cPtr);
		return Op::__get($var);
	}

	function __construct($a=0) {
		if (is_resource($a) && get_resource_type($a) === '_p_OpDerived') {
			$this->_cPtr=$a;
			return;
		}
		$this->_cPtr=new_OpDerived($a);
	}

	function IntCast() {
		return OpDerived_IntCast($this->_cPtr);
	}
}


?>
