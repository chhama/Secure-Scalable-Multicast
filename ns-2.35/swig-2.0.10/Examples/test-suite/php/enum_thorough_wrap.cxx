/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPHP

#define SWIG_PREFIX ""
#define SWIG_PREFIX_LEN 0

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * phprun.swg
 *
 * PHP runtime library
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif
#include "zend.h"
#include "zend_API.h"
#include "zend_exceptions.h"
#include "php.h"
#include "ext/standard/php_string.h"
#include <stdlib.h> /* for abort(), used in generated code. */

#ifdef ZEND_RAW_FENTRY
/* ZEND_RAW_FENTRY was added somewhere between 5.2.0 and 5.2.3 */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_RAW_FENTRY((char*)#ZN, N, A, 0)
#else
/* This causes warnings from GCC >= 4.2 (assigning a string literal to char*).
 * But this seems to be unavoidable without directly assuming knowledge of
 * the structure, which changed between PHP4 and PHP5. */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_NAMED_FE(ZN, N, A)
#endif

#ifndef Z_SET_ISREF_P
/* For PHP < 5.3 */
# define Z_SET_ISREF_P(z) (z)->is_ref = 1
#endif
#ifndef Z_SET_REFCOUNT_P
/* For PHP < 5.3 */
# define Z_SET_REFCOUNT_P(z, rc) (z)->refcount = (rc)
#endif

#define SWIG_LONG_CONSTANT(N, V) zend_register_long_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_DOUBLE_CONSTANT(N, V) zend_register_double_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_STRING_CONSTANT(N, V) zend_register_stringl_constant((char*)#N, sizeof(#N), (char*)(V), strlen(V), CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_CHAR_CONSTANT(N, V) do {\
    static char swig_char = (V);\
    zend_register_stringl_constant((char*)#N, sizeof(#N), &swig_char, 1, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC);\
} while (0)

/* These TSRMLS_ stuff should already be defined now, but with older php under
   redhat are not... */
#ifndef TSRMLS_D
#define TSRMLS_D
#endif
#ifndef TSRMLS_DC
#define TSRMLS_DC
#endif
#ifndef TSRMLS_C
#define TSRMLS_C
#endif
#ifndef TSRMLS_CC
#define TSRMLS_CC
#endif

#ifdef __cplusplus
}
#endif

/* But in fact SWIG_ConvertPtr is the native interface for getting typed
   pointer values out of zvals.  We need the TSRMLS_ macros for when we
   make PHP type calls later as we handle php resources */
#define SWIG_ConvertPtr(obj,pp,type,flags) SWIG_ZTS_ConvertPtr(obj,pp,type,flags TSRMLS_CC)


#define SWIG_fail goto fail

static const char *default_error_msg = "Unknown error occurred";
static int default_error_code = E_ERROR;

#define SWIG_PHP_Arg_Error_Msg(argnum,extramsg) "Error in argument " #argnum " "#extramsg

#define SWIG_PHP_Error(code,msg) do { SWIG_ErrorCode() = code; SWIG_ErrorMsg() = msg; SWIG_fail; } while (0)

#define SWIG_contract_assert(expr,msg) \
  if (!(expr) ) { zend_printf("Contract Assert Failed %s\n",msg ); } else

/* Standard SWIG API */
#define SWIG_GetModule(clientdata) SWIG_Php_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_Php_SetModule(pointer)

/* used to wrap returned objects in so we know whether they are newobject
   and need freeing, or not */
typedef struct {
  void * ptr;
  int newobject;
} swig_object_wrapper;

/* empty zend destructor for types without one */
static ZEND_RSRC_DTOR_FUNC(SWIG_landfill) { (void)rsrc; }

#define SWIG_SetPointerZval(a,b,c,d) SWIG_ZTS_SetPointerZval(a,b,c,d TSRMLS_CC)
#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a))

static void
SWIG_ZTS_SetPointerZval(zval *z, void *ptr, swig_type_info *type, int newobject TSRMLS_DC) {
  /*
   * First test for Null pointers.  Return those as PHP native NULL
   */
  if (!ptr ) {
    ZVAL_NULL(z);
    return;
  }
  if (type->clientdata) {
    swig_object_wrapper *value;
    if (! (*(int *)(type->clientdata)))
      zend_error(E_ERROR, "Type: %s failed to register with zend",type->name);
    value=(swig_object_wrapper *)emalloc(sizeof(swig_object_wrapper));
    value->ptr=ptr;
    value->newobject=(newobject & 1);
    if ((newobject & 2) == 0) {
      /* Just register the pointer as a resource. */
      ZEND_REGISTER_RESOURCE(z, value, *(int *)(type->clientdata));
    } else {
      /*
       * Wrap the resource in an object, the resource will be accessible
       * via the "_cPtr" member. This is currently only used by
       * directorin typemaps.
       */
      zval *resource;
      zend_class_entry **ce = NULL;
      const char *type_name = type->name+3; /* +3 so: _p_Foo -> Foo */
      size_t type_name_len;
      int result;
      const char * p;

      /* Namespace__Foo -> Foo */
      /* FIXME: ugly and goes wrong for classes with __ in their names. */
      while ((p = strstr(type_name, "__")) != NULL) {
        type_name = p + 2;
      }
      type_name_len = strlen(type_name);

      MAKE_STD_ZVAL(resource);
      ZEND_REGISTER_RESOURCE(resource, value, *(int *)(type->clientdata));
      if (SWIG_PREFIX_LEN > 0) {
        char * classname = (char*)emalloc(SWIG_PREFIX_LEN + type_name_len + 1);
        strcpy(classname, SWIG_PREFIX);
        strcpy(classname + SWIG_PREFIX_LEN, type_name);
        result = zend_lookup_class(classname, SWIG_PREFIX_LEN + type_name_len, &ce TSRMLS_CC);
        efree(classname);
      } else {
        result = zend_lookup_class((char *)type_name, type_name_len, &ce TSRMLS_CC);
      }
      if (result != SUCCESS) {
        /* class does not exist */
        object_init(z);
      } else {
        object_init_ex(z, *ce);
      }
      Z_SET_REFCOUNT_P(z, 1);
      Z_SET_ISREF_P(z);
      zend_hash_update(HASH_OF(z), (char*)"_cPtr", sizeof("_cPtr"), (void*)&resource, sizeof(zval), NULL);
    }
    return;
  }
  zend_error(E_ERROR, "Type: %s not registered with zend",type->name);
}

/* This pointer conversion routine takes the native pointer p (along with
   its type name) and converts it by calling appropriate casting functions
   according to ty.  The resultant pointer is returned, or NULL is returned
   if the pointer can't be cast.

   Sadly PHP has no API to find a type name from a type id, only from an
   instance of a resource of the type id, so we have to pass type_name as well.

   The two functions which might call this are:
   SWIG_ZTS_ConvertResourcePtr which gets the type name from the resource
   and the registered zend destructors for which we have one per type each
   with the type name hard wired in. */
static void *
SWIG_ZTS_ConvertResourceData(void * p, const char *type_name, swig_type_info *ty TSRMLS_DC) {
  swig_cast_info *tc;
  void *result = 0;

  if (!ty) {
    /* They don't care about the target type, so just pass on the pointer! */
    return p;
  }

  if (! type_name) {  
    /* can't convert p to ptr type ty if we don't know what type p is */
    return NULL;
  }

  /* convert and cast p from type_name to ptr as ty. */
  tc = SWIG_TypeCheck(type_name, ty);
  if (tc) {
    int newmemory = 0;
    result = SWIG_TypeCast(tc, p, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  }
  return result;
}

/* This function returns a pointer of type ty by extracting the pointer
   and type info from the resource in z.  z must be a resource.
   If it fails, NULL is returned.
   It uses SWIG_ZTS_ConvertResourceData to do the real work. */
static void *
SWIG_ZTS_ConvertResourcePtr(zval *z, swig_type_info *ty, int flags TSRMLS_DC) {
  swig_object_wrapper *value;
  void *p;
  int type;
  const char *type_name;

  value = (swig_object_wrapper *) zend_list_find(z->value.lval, &type);
  if ( flags & SWIG_POINTER_DISOWN ) {
    value->newobject = 0;
  }
  p = value->ptr;
  if (type==-1) return NULL;

  type_name=zend_rsrc_list_get_rsrc_type(z->value.lval TSRMLS_CC);

  return SWIG_ZTS_ConvertResourceData(p, type_name, ty TSRMLS_CC);
}

/* We allow passing of a RESOURCE pointing to the object or an OBJECT whose
   _cPtr is a resource pointing to the object */
static int
SWIG_ZTS_ConvertPtr(zval *z, void **ptr, swig_type_info *ty, int flags TSRMLS_DC) {
  if (z == NULL) {
    *ptr = 0;
    return 0;
  }

  switch (z->type) {
    case IS_OBJECT: {
      zval ** _cPtr;
      if (zend_hash_find(HASH_OF(z),(char*)"_cPtr",sizeof("_cPtr"),(void**)&_cPtr)==SUCCESS) {
	if ((*_cPtr)->type==IS_RESOURCE) {
	  *ptr = SWIG_ZTS_ConvertResourcePtr(*_cPtr, ty, flags TSRMLS_CC);
	  return (*ptr == NULL ? -1 : 0);
	}
      }
      break;
    }
    case IS_RESOURCE:
      *ptr = SWIG_ZTS_ConvertResourcePtr(z, ty, flags TSRMLS_CC);
      return (*ptr == NULL ? -1 : 0);
    case IS_NULL:
      *ptr = 0;
      return 0;
  }

  return -1;
}

static char const_name[] = "swig_runtime_data_type_pointer";
static swig_module_info *SWIG_Php_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  zval *pointer;
  swig_module_info *ret = 0;

  MAKE_STD_ZVAL(pointer);

  TSRMLS_FETCH();

  if (zend_get_constant(const_name, sizeof(const_name) - 1, pointer TSRMLS_CC)) {
    if (pointer->type == IS_LONG) {
      ret = (swig_module_info *) pointer->value.lval;
    }
  } 
  FREE_ZVAL(pointer);
  return ret; 
}

static void SWIG_Php_SetModule(swig_module_info *pointer) {
  TSRMLS_FETCH();
  REGISTER_MAIN_LONG_CONSTANT(const_name, (long) pointer, 0);
}


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_bool swig_types[0]
#define SWIGTYPE_char swig_types[1]
#define SWIGTYPE_int swig_types[2]
#define SWIGTYPE_p_AlsoEmpty swig_types[3]
#define SWIGTYPE_p_AnonSpace__AnonStruct swig_types[4]
#define SWIGTYPE_p_AnonSpace__namedanonspace swig_types[5]
#define SWIGTYPE_p_IgnoreTest swig_types[6]
#define SWIGTYPE_p_Instances swig_types[7]
#define SWIGTYPE_p_Name__TClassT_int_t swig_types[8]
#define SWIGTYPE_p_Obscure swig_types[9]
#define SWIGTYPE_p_OldNameStruct swig_types[10]
#define SWIGTYPE_p_RepeatSpace__repeat swig_types[11]
#define SWIGTYPE_p_SpeedClass swig_types[12]
#define SWIGTYPE_p_TemplateClassT_int_t swig_types[13]
#define SWIGTYPE_p_TreesClass swig_types[14]
#define SWIGTYPE_p_TreesClass__trees swig_types[15]
#define SWIGTYPE_p_TwoNamesStruct swig_types[16]
#define SWIGTYPE_p_curly__greasy__FirStruct swig_types[17]
#define SWIGTYPE_p_curly__greasy__HairStruct swig_types[18]
#define SWIGTYPE_p_doublename swig_types[19]
#define SWIGTYPE_p_hairtd1 swig_types[20]
#define SWIGTYPE_p_hairtd2 swig_types[21]
#define SWIGTYPE_p_hairtd3 swig_types[22]
#define SWIGTYPE_p_hairtd4 swig_types[23]
#define SWIGTYPE_p_hairtd5 swig_types[24]
#define SWIGTYPE_p_hairtd6 swig_types[25]
#define SWIGTYPE_p_hairtd7 swig_types[26]
#define SWIGTYPE_p_hairtd8 swig_types[27]
#define SWIGTYPE_p_hairtd9 swig_types[28]
#define SWIGTYPE_p_hairtdA swig_types[29]
#define SWIGTYPE_p_namedanon swig_types[30]
#define SWIGTYPE_p_old_name swig_types[31]
#define SWIGTYPE_p_scientiststd1 swig_types[32]
#define SWIGTYPE_p_scientiststd2 swig_types[33]
#define SWIGTYPE_p_scientiststd3 swig_types[34]
#define SWIGTYPE_p_singlename swig_types[35]
#define SWIGTYPE_p_speedtd1 swig_types[36]
#define SWIGTYPE_p_treestd1 swig_types[37]
#define SWIGTYPE_p_treestd2 swig_types[38]
#define SWIGTYPE_p_treestd3 swig_types[39]
#define SWIGTYPE_p_treestd4 swig_types[40]
#define SWIGTYPE_p_treestd5 swig_types[41]
#define SWIGTYPE_p_twonamestag swig_types[42]
static swig_type_info *swig_types[44];
static swig_module_info swig_module = {swig_types, 43, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

/* header section */
ZEND_BEGIN_MODULE_GLOBALS(enum_thorough)
const char *error_msg;
int error_code;
ZEND_END_MODULE_GLOBALS(enum_thorough)
ZEND_DECLARE_MODULE_GLOBALS(enum_thorough)
#ifdef ZTS
#define SWIG_ErrorMsg() TSRMG(enum_thorough_globals_id, zend_enum_thorough_globals *, error_msg )
#define SWIG_ErrorCode() TSRMG(enum_thorough_globals_id, zend_enum_thorough_globals *, error_code )
#else
#define SWIG_ErrorMsg() (enum_thorough_globals.error_msg)
#define SWIG_ErrorCode() (enum_thorough_globals.error_code)
#endif

#ifdef __GNUC__
static void SWIG_FAIL() __attribute__ ((__noreturn__));
#endif

static void SWIG_FAIL() {
    TSRMLS_FETCH();
    zend_error(SWIG_ErrorCode(), "%s", SWIG_ErrorMsg());
    abort();
}

static void enum_thorough_init_globals(zend_enum_thorough_globals *globals ) {
  globals->error_msg = default_error_msg;
  globals->error_code = default_error_code;
}
static void enum_thorough_destroy_globals(zend_enum_thorough_globals * globals) { (void)globals; }

static void SWIG_ResetError() {
  TSRMLS_FETCH();
  SWIG_ErrorMsg() = default_error_msg;
  SWIG_ErrorCode() = default_error_code;
}

ZEND_NAMED_FUNCTION(_wrap_swig_enum_thorough_alter_newobject) {
  zval **args[2];
  swig_object_wrapper *value;
  int type;
  int thisown;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  value->newobject = zval_is_true(*args[1]);

  return;
}
ZEND_NAMED_FUNCTION(_wrap_swig_enum_thorough_get_newobject) {
  zval **args[1];
  swig_object_wrapper *value;
  int type;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  RETVAL_LONG(value->newobject);

  return;
}
#define SWIG_name  "enum_thorough"
#ifdef __cplusplus
extern "C" {
#endif
#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
#include "php_enum_thorough.h"
#ifdef __cplusplus
}
#endif



enum { AnonEnum1, AnonEnum2 = 100 };
enum { ReallyAnInteger = 200 };
//enum { AnonEnum3, AnonEnum4 } instance;
namespace AnonSpace {
  enum { AnonSpaceEnum1, AnonSpaceEnum2 = 300 };
  struct AnonStruct {
    enum { AnonStructEnum1, AnonStructEnum2 = 400 };
  };
}


enum colour { red=-1, blue, green = 10 };
colour colourTest1(colour e) { return e; }
enum colour colourTest2(enum colour e) { return e; }
const colour colourTest3(const colour e) { return e; }
const enum colour colourTest4(const enum colour e) { return e; }

colour myColour;

struct SpeedClass {
  enum speed { slow=10, medium=20, fast=30, lightning };
  typedef enum speed speedtd1;

  int                           speedTest0(int s) { return s; }
  speed                         speedTest1(speed s) { return s; }
  enum speed                    speedTest2(enum speed s) { return s; }
  const speed                   speedTest3(const speed s) { return s; }
  const enum speed              speedTest4(const enum speed s) { return s; }
  speedtd1                      speedTest5(speedtd1 s) { return s; }
  const speedtd1                speedTest6(const speedtd1 s) { return s; }
  const speed &                 speedTest7(const speed &s) { return s; }
  const enum speed &            speedTest8(const enum speed &s) { return s; }

  const colour myColour2;
  speedtd1 mySpeedtd1;
  SpeedClass() : myColour2(red), mySpeedtd1(slow) { }
private:
  SpeedClass& operator=(const SpeedClass&);
};

int                            speedTest0(int s) { return s; }
SpeedClass::speed              speedTest1(SpeedClass::speed s) { return s; }
enum SpeedClass::speed         speedTest2(enum SpeedClass::speed s) { return s; }
const SpeedClass::speed        speedTest3(const SpeedClass::speed s) { return s; }
const enum SpeedClass::speed   speedTest4(const enum SpeedClass::speed s) { return s; }
const SpeedClass::speed &      speedTest5(const SpeedClass::speed &s) { return s; }


typedef enum { NamedAnon1, NamedAnon2 } namedanon;

namedanon                       namedanonTest1(namedanon e) { return e; } 

typedef enum twonamestag { TwoNames1, TwoNames2, TwoNames3 = 33 } twonames;

twonames                        twonamesTest1(twonames e) { return e; } 
twonamestag                     twonamesTest2(twonamestag e) { return e; } 
enum twonamestag                twonamesTest3(enum twonamestag e) { return e; } 

struct TwoNamesStruct {
  typedef enum twonamestag { TwoNamesStruct1, TwoNamesStruct2 } twonames;
  twonames                      twonamesTest1(twonames e) { return e; } 
  twonamestag                   twonamesTest2(twonamestag e) { return e; } 
  enum twonamestag              twonamesTest3(enum twonamestag e) { return e; } 
};

namespace AnonSpace{
  typedef enum { NamedAnonSpace1, NamedAnonSpace2 } namedanonspace;
  namedanonspace                namedanonspaceTest1(namedanonspace e) { return e; } 
  AnonSpace::namedanonspace     namedanonspaceTest2(AnonSpace::namedanonspace e) { return e; } 
}
AnonSpace::namedanonspace       namedanonspaceTest3(AnonSpace::namedanonspace e) { return e; } 
using namespace AnonSpace;
namedanonspace                  namedanonspaceTest4(namedanonspace e) { return e; } 


template<typename T> struct TemplateClass {
  enum scientists { einstein, galileo = 10 }; 
  typedef enum scientists scientiststd1;
  typedef scientists scientiststd2;
  typedef scientiststd1 scientiststd3;
  scientists                                scientistsTest1(scientists e) { return e; }
  enum scientists                           scientistsTest2(enum scientists e) { return e; }
  const scientists                          scientistsTest3(const scientists e) { return e; }
  const enum scientists                     scientistsTest4(const enum scientists e) { return e; }
  typename TemplateClass<T>::scientists     scientistsTest5(typename TemplateClass<T>::scientists e) { return e; }
  const typename TemplateClass<T>::scientists        scientistsTest6(const typename TemplateClass<T>::scientists e) { return e; }
  enum TemplateClass<T>::scientists         scientistsTest7(enum TemplateClass<T>::scientists e) { return e; }
  const enum TemplateClass<T>::scientists   scientistsTest8(const enum TemplateClass<T>::scientists e) { return e; }
  typename TemplateClass::scientists        scientistsTest9(typename TemplateClass::scientists e) { return e; }
//  enum TemplateClass::scientists            scientistsTestA(enum TemplateClass::scientists e) { return e; }
  const typename TemplateClass::scientists  scientistsTestB(const typename TemplateClass::scientists e) { return e; }
//  const enum TemplateClass::scientists      scientistsTestC(const enum TemplateClass::scientists e) { return e; }
  scientiststd1                             scientistsTestD(scientiststd1 e) { return e; }
  scientiststd2                             scientistsTestE(scientiststd2 e) { return e; }
  scientiststd3                             scientistsTestF(scientiststd3 e) { return e; }
  typename TemplateClass<T>::scientiststd1  scientistsTestG(typename TemplateClass<T>::scientiststd1 e) { return e; }
  typename TemplateClass<T>::scientiststd2  scientistsTestH(typename TemplateClass<T>::scientiststd2 e) { return e; }
  typename TemplateClass<T>::scientiststd3  scientistsTestI(typename TemplateClass<T>::scientiststd3 e) { return e; }
  const scientists &                        scientistsTestJ(const scientists &e) { return e; }
};

TemplateClass<int>::scientists              scientistsTest1(TemplateClass<int>::scientists e) { return e; }
const TemplateClass<int>::scientists        scientistsTest2(const TemplateClass<int>::scientists e) { return e; }
enum TemplateClass<int>::scientists         scientistsTest3(enum TemplateClass<int>::scientists e) { return e; }
const enum TemplateClass<int>::scientists   scientistsTest4(const enum TemplateClass<int>::scientists e) { return e; }
TemplateClass<int>::scientiststd1           scientistsTest5(TemplateClass<int>::scientiststd1 e) { return e; }
TemplateClass<int>::scientiststd2           scientistsTest6(TemplateClass<int>::scientiststd2 e) { return e; }
TemplateClass<int>::scientiststd3           scientistsTest7(TemplateClass<int>::scientiststd3 e) { return e; }
const TemplateClass<int>::scientiststd3 &   scientistsTest8(const TemplateClass<int>::scientiststd3 &e) { return e; }


namespace Name {
template<typename T> struct TClass {
  enum scientists { faraday, bell = 20 }; 
  typedef enum scientists scientiststd1;
  typedef scientists scientiststd2;
  typedef scientiststd1 scientiststd3;
  scientists                                scientistsNameTest1(scientists e) { return e; }
  enum scientists                           scientistsNameTest2(enum scientists e) { return e; }
  const scientists                          scientistsNameTest3(const scientists e) { return e; }
  const enum scientists                     scientistsNameTest4(const enum scientists e) { return e; }
  typename TClass<T>::scientists            scientistsNameTest5(typename TClass<T>::scientists e) { return e; }
  const typename TClass<T>::scientists      scientistsNameTest6(const typename TClass<T>::scientists e) { return e; }
  enum TClass<T>::scientists                scientistsNameTest7(enum TClass<T>::scientists e) { return e; }
  const enum TClass<T>::scientists          scientistsNameTest8(const enum TClass<T>::scientists e) { return e; }
  typename TClass::scientists               scientistsNameTest9(typename TClass::scientists e) { return e; }
//  enum TClass::scientists                   scientistsNameTestA(enum TClass::scientists e) { return e; }
  const typename TClass::scientists         scientistsNameTestB(const typename TClass::scientists e) { return e; }
//  const enum TClass::scientists             scientistsNameTestC(const enum TClass::scientists e) { return e; }
  scientiststd1                             scientistsNameTestD(scientiststd1 e) { return e; }
  scientiststd2                             scientistsNameTestE(scientiststd2 e) { return e; }
  scientiststd3                             scientistsNameTestF(scientiststd3 e) { return e; }
  typename TClass<T>::scientiststd1         scientistsNameTestG(typename TClass<T>::scientiststd1 e) { return e; }
  typename TClass<T>::scientiststd2         scientistsNameTestH(typename TClass<T>::scientiststd2 e) { return e; }
  typename TClass<T>::scientiststd3         scientistsNameTestI(typename TClass<T>::scientiststd3 e) { return e; }

  typename Name::TClass<T>::scientists      scientistsNameSpaceTest1(typename Name::TClass<T>::scientists e) { return e; }
  const typename Name::TClass<T>::scientists         scientistsNameSpaceTest2(const typename Name::TClass<T>::scientists e) { return e; }
  enum Name::TClass<T>::scientists          scientistsNameSpaceTest3(enum Name::TClass<T>::scientists e) { return e; }
  const enum Name::TClass<T>::scientists    scientistsNameSpaceTest4(const enum Name::TClass<T>::scientists e) { return e; }
  typename Name::TClass<T>::scientiststd1   scientistsNameSpaceTest5(typename Name::TClass<T>::scientiststd1 e) { return e; }
  typename Name::TClass<T>::scientiststd2   scientistsNameSpaceTest6(typename Name::TClass<T>::scientiststd2 e) { return e; }
  typename Name::TClass<T>::scientiststd3   scientistsNameSpaceTest7(typename Name::TClass<T>::scientiststd3 e) { return e; }

  // Test TemplateClass::scientists rather then TClass::scientists
  ::TemplateClass<int>::scientists              scientistsOtherTest1(::TemplateClass<int>::scientists e) { return e; }
  const ::TemplateClass<int>::scientists        scientistsOtherTest2(const ::TemplateClass<int>::scientists e) { return e; }
  enum ::TemplateClass<int>::scientists         scientistsOtherTest3(enum ::TemplateClass<int>::scientists e) { return e; }
  const enum ::TemplateClass<int>::scientists   scientistsOtherTest4(const enum ::TemplateClass<int>::scientists e) { return e; }
  ::TemplateClass<int>::scientiststd1           scientistsOtherTest5(::TemplateClass<int>::scientiststd1 e) { return e; }
  ::TemplateClass<int>::scientiststd2           scientistsOtherTest6(::TemplateClass<int>::scientiststd2 e) { return e; }
  ::TemplateClass<int>::scientiststd3           scientistsOtherTest7(::TemplateClass<int>::scientiststd3 e) { return e; }
};

TClass<int>::scientists                     scientistsNameTest1(TClass<int>::scientists e) { return e; }
const TClass<int>::scientists               scientistsNameTest2(const TClass<int>::scientists e) { return e; }
enum TClass<int>::scientists                scientistsNameTest3(enum TClass<int>::scientists e) { return e; }
const enum TClass<int>::scientists          scientistsNameTest4(const enum TClass<int>::scientists e) { return e; }
TClass<int>::scientiststd1                  scientistsNameTest5(TClass<int>::scientiststd1 e) { return e; }
TClass<int>::scientiststd2                  scientistsNameTest6(TClass<int>::scientiststd2 e) { return e; }
TClass<int>::scientiststd3                  scientistsNameTest7(TClass<int>::scientiststd3 e) { return e; }

Name::TClass<int>::scientists               scientistsNameSpaceTest1(Name::TClass<int>::scientists e) { return e; }
const Name::TClass<int>::scientists         scientistsNameSpaceTest2(const Name::TClass<int>::scientists e) { return e; }
enum Name::TClass<int>::scientists          scientistsNameSpaceTest3(enum Name::TClass<int>::scientists e) { return e; }
const enum Name::TClass<int>::scientists    scientistsNameSpaceTest4(const enum Name::TClass<int>::scientists e) { return e; }
Name::TClass<int>::scientiststd1            scientistsNameSpaceTest5(Name::TClass<int>::scientiststd1 e) { return e; }
Name::TClass<int>::scientiststd2            scientistsNameSpaceTest6(Name::TClass<int>::scientiststd2 e) { return e; }
Name::TClass<int>::scientiststd3            scientistsNameSpaceTest7(Name::TClass<int>::scientiststd3 e) { return e; }
}

Name::TClass<int>::scientists               scientistsNameSpaceTest8(Name::TClass<int>::scientists e) { return e; }
const Name::TClass<int>::scientists         scientistsNameSpaceTest9(const Name::TClass<int>::scientists e) { return e; }
enum Name::TClass<int>::scientists          scientistsNameSpaceTestA(enum Name::TClass<int>::scientists e) { return e; }
const enum Name::TClass<int>::scientists    scientistsNameSpaceTestB(const enum Name::TClass<int>::scientists e) { return e; }
Name::TClass<int>::scientiststd1            scientistsNameSpaceTestC(Name::TClass<int>::scientiststd1 e) { return e; }
Name::TClass<int>::scientiststd2            scientistsNameSpaceTestD(Name::TClass<int>::scientiststd2 e) { return e; }
Name::TClass<int>::scientiststd3            scientistsNameSpaceTestE(Name::TClass<int>::scientiststd3 e) { return e; }

using namespace Name;
TClass<int>::scientists                     scientistsNameSpaceTestF(TClass<int>::scientists e) { return e; }
const TClass<int>::scientists               scientistsNameSpaceTestG(const TClass<int>::scientists e) { return e; }
enum TClass<int>::scientists                scientistsNameSpaceTestH(enum TClass<int>::scientists e) { return e; }
const enum TClass<int>::scientists          scientistsNameSpaceTestI(const enum TClass<int>::scientists e) { return e; }
TClass<int>::scientiststd1                  scientistsNameSpaceTestJ(TClass<int>::scientiststd1 e) { return e; }
TClass<int>::scientiststd2                  scientistsNameSpaceTestK(TClass<int>::scientiststd2 e) { return e; }
TClass<int>::scientiststd3                  scientistsNameSpaceTestL(TClass<int>::scientiststd3 e) { return e; }



enum old_name { argh, eek = -1 };
typedef old_name old_nametd;
old_name                            renameTest1(old_name e) { return e; }
old_nametd                          renameTest2(old_nametd e) { return e; }

struct OldNameStruct {
  enum enumeration {whizz, kerboom, pop};
  enumeration                       renameTest1(enumeration e) { return e; }
  OldNameStruct::enumeration        renameTest2(OldNameStruct::enumeration e) { return e; }

  enum simple {simple1};
  typedef enum doublenametag {doublename1} doublename;
  typedef enum {singlename1} singlename;

  simple                            renameTest3(simple e) { return e; }
  doublename                        renameTest4(doublename e) { return e; }
  doublenametag                     renameTest5(doublenametag e) { return e; }
  singlename                        renameTest6(singlename e) { return e; }
};

OldNameStruct::enumeration          renameTest3(OldNameStruct::enumeration e) { return e; }
OldNameStruct::simple               renameTest4(OldNameStruct::simple e) { return e; }
OldNameStruct::doublename           renameTest5(OldNameStruct::doublename e) { return e; }
OldNameStruct::doublenametag        renameTest6(OldNameStruct::doublenametag e) { return e; }
OldNameStruct::singlename           renameTest7(OldNameStruct::singlename e) { return e; }


struct TreesClass {
  enum trees {oak, fir, pine };
  typedef enum trees treestd1;
  typedef trees treestd2;
  typedef treestd1 treestd3;
  typedef TreesClass::trees treestd4;
  typedef treestd1 treestd5;

  trees                             treesTest1(trees e) { return e; }
  treestd1                          treesTest2(treestd1 e) { return e; }
  treestd2                          treesTest3(treestd2 e) { return e; }
  treestd3                          treesTest4(treestd3 e) { return e; }
  treestd4                          treesTest5(treestd4 e) { return e; }
  treestd5                          treesTest6(treestd5 e) { return e; }
  const trees                       treesTest7(const trees e) { return e; }
  const treestd1                    treesTest8(const treestd1 e) { return e; }
  const treestd2                    treesTest9(const treestd2 e) { return e; }
  const treestd3                    treesTestA(const treestd3 e) { return e; }
  const treestd4                    treesTestB(const treestd4 e) { return e; }
  const treestd5                    treesTestC(const treestd5 e) { return e; }
  TreesClass::trees                 treesTestD(TreesClass::trees e) { return e; }
  TreesClass::treestd1              treesTestE(TreesClass::treestd1 e) { return e; }
  TreesClass::treestd2              treesTestF(TreesClass::treestd2 e) { return e; }
  TreesClass::treestd3              treesTestG(TreesClass::treestd3 e) { return e; }
  TreesClass::treestd4              treesTestH(TreesClass::treestd4 e) { return e; }
  TreesClass::treestd5              treesTestI(TreesClass::treestd5 e) { return e; }
  const TreesClass::trees           treesTestJ(const TreesClass::trees e) { return e; }
  const TreesClass::treestd1        treesTestK(const TreesClass::treestd1 e) { return e; }
  const TreesClass::treestd2        treesTestL(const TreesClass::treestd2 e) { return e; }
  const TreesClass::treestd3        treesTestM(const TreesClass::treestd3 e) { return e; }
  const TreesClass::treestd4        treesTestN(const TreesClass::treestd4 e) { return e; }
  const TreesClass::treestd5        treesTestO(const TreesClass::treestd5 e) { return e; }
};

TreesClass::trees                   treesTest1(TreesClass::trees e) { return e; }
TreesClass::treestd1                treesTest2(TreesClass::treestd1 e) { return e; }
TreesClass::treestd2                treesTest3(TreesClass::treestd2 e) { return e; }
TreesClass::treestd3                treesTest4(TreesClass::treestd3 e) { return e; }
TreesClass::treestd4                treesTest5(TreesClass::treestd4 e) { return e; }
TreesClass::treestd5                treesTest6(TreesClass::treestd5 e) { return e; }
const TreesClass::trees             treesTest7(const TreesClass::trees e) { return e; }
const TreesClass::treestd1          treesTest8(const TreesClass::treestd1 e) { return e; }
const TreesClass::treestd2          treesTest9(const TreesClass::treestd2 e) { return e; }
const TreesClass::treestd3          treesTestA(const TreesClass::treestd3 e) { return e; }
const TreesClass::treestd4          treesTestB(const TreesClass::treestd4 e) { return e; }
const TreesClass::treestd5          treesTestC(const TreesClass::treestd5 e) { return e; }

typedef enum TreesClass::trees treesglobaltd1;
typedef TreesClass::trees treesglobaltd2;
typedef TreesClass::treestd1 treesglobaltd3;
typedef TreesClass::treestd2 treesglobaltd4;
typedef treesglobaltd4 treesglobaltd5;

treesglobaltd1                      treesTestD(treesglobaltd1 e) { return e; }
treesglobaltd2                      treesTestE(treesglobaltd2 e) { return e; }
treesglobaltd3                      treesTestF(treesglobaltd3 e) { return e; }
treesglobaltd4                      treesTestG(treesglobaltd4 e) { return e; }
treesglobaltd5                      treesTestH(treesglobaltd5 e) { return e; }
const treesglobaltd1                treesTestI(const treesglobaltd1 e) { return e; }
const treesglobaltd2                treesTestJ(const treesglobaltd2 e) { return e; }
const treesglobaltd3                treesTestK(const treesglobaltd3 e) { return e; }
const treesglobaltd4                treesTestL(const treesglobaltd4 e) { return e; }
const treesglobaltd5                treesTestM(const treesglobaltd5 e) { return e; }

typedef const enum TreesClass::trees treesglobaltd6;
typedef const TreesClass::trees treesglobaltd7;
typedef const TreesClass::treestd1 treesglobaltd8;
typedef const TreesClass::treestd2 treesglobaltd9;
typedef const treesglobaltd4 treesglobaltdA;

//treesglobaltd6                      treesTestN(treesglobaltd6 e) { return e; } // casting using an int instead of treesglobaltd6
treesglobaltd7                      treesTestO(treesglobaltd7 e) { return e; }
treesglobaltd8                      treesTestP(treesglobaltd8 e) { return e; }
treesglobaltd9                      treesTestQ(treesglobaltd9 e) { return e; }
treesglobaltdA                      treesTestR(treesglobaltdA e) { return e; }

namespace curly {
  namespace greasy {
    struct HairStruct {
      enum hair { blonde=0xFF0, ginger };
      typedef hair hairtd1;
      typedef HairStruct::hair hairtd2;
      typedef greasy::HairStruct::hair hairtd3;
      typedef curly::greasy::HairStruct::hair hairtd4;
      typedef ::curly::greasy::HairStruct::hair hairtd5;
      typedef hairtd1 hairtd6;
      typedef HairStruct::hairtd1 hairtd7;
      typedef greasy::HairStruct::hairtd1 hairtd8;
      typedef curly::greasy::HairStruct::hairtd1 hairtd9;
      typedef ::curly::greasy::HairStruct::hairtd1 hairtdA;
      hair                          hairTest1(hair e) { return e; }
      hairtd1                       hairTest2(hairtd1 e) { return e; }
      hairtd2                       hairTest3(hairtd2 e) { return e; }
      hairtd3                       hairTest4(hairtd3 e) { return e; }
      hairtd4                       hairTest5(hairtd4 e) { return e; }
      hairtd5                       hairTest6(hairtd5 e) { return e; }
      hairtd6                       hairTest7(hairtd6 e) { return e; }
      hairtd7                       hairTest8(hairtd7 e) { return e; }
      hairtd8                       hairTest9(hairtd8 e) { return e; }
      hairtd9                       hairTestA(hairtd9 e) { return e; }
      hairtdA                       hairTestB(hairtdA e) { return e; }

      ::colour                      colourTest1(::colour e) { return e; }
      enum colour                   colourTest2(enum colour e) { return e; }
      namedanon                     namedanonTest1(namedanon e) { return e; }
      AnonSpace::namedanonspace      namedanonspaceTest1(AnonSpace::namedanonspace e) { return e; }

      treesglobaltd1                treesGlobalTest1(treesglobaltd1 e) { return e; }
      treesglobaltd2                treesGlobalTest2(treesglobaltd2 e) { return e; }
      treesglobaltd3                treesGlobalTest3(treesglobaltd3 e) { return e; }
      treesglobaltd4                treesGlobalTest4(treesglobaltd4 e) { return e; }
      treesglobaltd5                treesGlobalTest5(treesglobaltd5 e) { return e; }

    };
    HairStruct::hair                hairTest1(HairStruct::hair e) { return e; }
    HairStruct::hairtd1             hairTest2(HairStruct::hairtd1 e) { return e; }
    HairStruct::hairtd2             hairTest3(HairStruct::hairtd2 e) { return e; }
    HairStruct::hairtd3             hairTest4(HairStruct::hairtd3 e) { return e; }
    HairStruct::hairtd4             hairTest5(HairStruct::hairtd4 e) { return e; }
    HairStruct::hairtd5             hairTest6(HairStruct::hairtd5 e) { return e; }
    HairStruct::hairtd6             hairTest7(HairStruct::hairtd6 e) { return e; }
    HairStruct::hairtd7             hairTest8(HairStruct::hairtd7 e) { return e; }
    HairStruct::hairtd8             hairTest9(HairStruct::hairtd8 e) { return e; }
    HairStruct::hairtd9             hairTestA(HairStruct::hairtd9 e) { return e; }
    HairStruct::hairtdA             hairTestB(HairStruct::hairtdA e) { return e; }
    const HairStruct::hair &        hairTestC(const HairStruct::hair &e) { return e; }
  }
  greasy::HairStruct::hair          hairTestA1(greasy::HairStruct::hair e) { return e; }
  greasy::HairStruct::hairtd1       hairTestA2(greasy::HairStruct::hairtd1 e) { return e; }
  greasy::HairStruct::hairtd2       hairTestA3(greasy::HairStruct::hairtd2 e) { return e; }
  greasy::HairStruct::hairtd3       hairTestA4(greasy::HairStruct::hairtd3 e) { return e; }
  greasy::HairStruct::hairtd4       hairTestA5(greasy::HairStruct::hairtd4 e) { return e; }
  greasy::HairStruct::hairtd5       hairTestA6(greasy::HairStruct::hairtd5 e) { return e; }
  greasy::HairStruct::hairtd6       hairTestA7(greasy::HairStruct::hairtd6 e) { return e; }
  greasy::HairStruct::hairtd7       hairTestA8(greasy::HairStruct::hairtd7 e) { return e; }
  greasy::HairStruct::hairtd8       hairTestA9(greasy::HairStruct::hairtd8 e) { return e; }
  greasy::HairStruct::hairtd9       hairTestAA(greasy::HairStruct::hairtd9 e) { return e; }
  greasy::HairStruct::hairtdA       hairTestAB(greasy::HairStruct::hairtdA e) { return e; }
  const greasy::HairStruct::hairtdA &     hairTestAC(const greasy::HairStruct::hairtdA &e) { return e; }
}
curly::greasy::HairStruct::hair     hairTestB1(curly::greasy::HairStruct::hair e) { return e; }
curly::greasy::HairStruct::hairtd1  hairTestB2(curly::greasy::HairStruct::hairtd1 e) { return e; }
curly::greasy::HairStruct::hairtd2  hairTestB3(curly::greasy::HairStruct::hairtd2 e) { return e; }
curly::greasy::HairStruct::hairtd3  hairTestB4(curly::greasy::HairStruct::hairtd3 e) { return e; }
curly::greasy::HairStruct::hairtd4  hairTestB5(curly::greasy::HairStruct::hairtd4 e) { return e; }
curly::greasy::HairStruct::hairtd5  hairTestB6(curly::greasy::HairStruct::hairtd5 e) { return e; }
curly::greasy::HairStruct::hairtd6  hairTestB7(curly::greasy::HairStruct::hairtd6 e) { return e; }
curly::greasy::HairStruct::hairtd7  hairTestB8(curly::greasy::HairStruct::hairtd7 e) { return e; }
curly::greasy::HairStruct::hairtd8  hairTestB9(curly::greasy::HairStruct::hairtd8 e) { return e; }
curly::greasy::HairStruct::hairtd9  hairTestBA(curly::greasy::HairStruct::hairtd9 e) { return e; }
curly::greasy::HairStruct::hairtdA  hairTestBB(curly::greasy::HairStruct::hairtdA e) { return e; }
const curly::greasy::HairStruct::hairtdA & hairTestBC(const curly::greasy::HairStruct::hairtdA &e) { return e; }

using curly::greasy::HairStruct;
HairStruct::hair                    hairTestC1(HairStruct::hair e) { return e; }
HairStruct::hairtd1                 hairTestC2(HairStruct::hairtd1 e) { return e; }
HairStruct::hairtd2                 hairTestC3(HairStruct::hairtd2 e) { return e; }
HairStruct::hairtd3                 hairTestC4(HairStruct::hairtd3 e) { return e; }
HairStruct::hairtd4                 hairTestC5(HairStruct::hairtd4 e) { return e; }
HairStruct::hairtd5                 hairTestC6(HairStruct::hairtd5 e) { return e; }
HairStruct::hairtd6                 hairTestC7(HairStruct::hairtd6 e) { return e; }
HairStruct::hairtd7                 hairTestC8(HairStruct::hairtd7 e) { return e; }
HairStruct::hairtd8                 hairTestC9(HairStruct::hairtd8 e) { return e; }
HairStruct::hairtd9                 hairTestCA(HairStruct::hairtd9 e) { return e; }
HairStruct::hairtdA                 hairTestCB(HairStruct::hairtdA e) { return e; }
const HairStruct::hairtdA &         hairTestCC(const HairStruct::hairtdA &e) { return e; }

namespace curly {
  namespace greasy {
    struct FirStruct : HairStruct {
      hair                          hairTestFir1(hair e) { return e; }
      hairtd1                       hairTestFir2(hairtd1 e) { return e; }
      hairtd2                       hairTestFir3(hairtd2 e) { return e; }
      hairtd3                       hairTestFir4(hairtd3 e) { return e; }
      hairtd4                       hairTestFir5(hairtd4 e) { return e; }
      hairtd5                       hairTestFir6(hairtd5 e) { return e; }
      hairtd6                       hairTestFir7(hairtd6 e) { return e; }
      hairtd7                       hairTestFir8(hairtd7 e) { return e; }
      hairtd8                       hairTestFir9(hairtd8 e) { return e; }
      hairtd9                       hairTestFirA(hairtd9 e) { return e; }
      hairtdA                       hairTestFirB(hairtdA e) { return e; }
    };
  }
}

struct Obscure {
  enum Zero {};
  enum One {one};
  enum Two {two, twoagain};
#if defined(SWIG)
  // g++-4.3 warns about this
  typedef enum Empty {};
#endif
  typedef enum {} AlsoEmpty;
};

// Unnamed enum instance
extern "C" {
enum { globalinstance1, globalinstance2, globalinstance3 = 30 } GlobalInstance;
}

struct Instances {
  enum { memberinstance1, memberinstance2, memberinstance3 = 300 } MemberInstance;
  Instances() : MemberInstance(memberinstance3) {}
};



struct IgnoreTest {
  enum IgnoreA { ignoreA_zero, ignoreA_one, ignoreA_two, ignoreA_three, ignoreA_ten=10, ignoreA_eleven, ignoreA_twelve, ignoreA_thirteen, ignoreA_fourteen, ignoreA_twenty=20, ignoreA_thirty=30, ignoreA_thirty_one, ignoreA_thirty_two, ignoreA_thirty_three };
  enum IgnoreB { ignoreB_ten=10, ignoreB_eleven, ignoreB_twelve, ignoreB_twenty=20, ignoreB_thirty=30, ignoreB_thirty_one, ignoreB_thirty_two, ignoreB_forty=40, ignoreB_forty_one, ignoreB_forty_two };
  enum IgnoreC { ignoreC_ten=10, ignoreC_eleven, ignoreC_twelve, ignoreC_twenty=20, ignoreC_thirty=30, ignoreC_thirty_one, ignoreC_thirty_two, ignoreC_forty=40, ignoreC_forty_one, ignoreC_forty_two };
  enum IgnoreD { ignoreD_ten=10, ignoreD_twenty=20, ignoreD_twenty_one, ignoreD_twenty_two };
  enum IgnoreE { ignoreE_zero, ignoreE_twenty=20, ignoreE_twenty_one, ignoreE_twenty_two };
};

IgnoreTest::IgnoreA ignoreATest(IgnoreTest::IgnoreA n) { return n; }
IgnoreTest::IgnoreB ignoreBTest(IgnoreTest::IgnoreB n) { return n; }
IgnoreTest::IgnoreC ignoreCTest(IgnoreTest::IgnoreC n) { return n; }
IgnoreTest::IgnoreD ignoreDTest(IgnoreTest::IgnoreD n) { return n; }
IgnoreTest::IgnoreE ignoreETest(IgnoreTest::IgnoreE n) { return n; }


namespace RepeatSpace {
typedef enum
{
   one = 1,
   initial = one,
   two,
   three,
   llast = three,
   end = llast
} repeat;
repeat repeatTest(repeat e) { return e; }
}


namespace DifferentSpace {
enum DifferentTypes {
  typeint = 10,
  typeboolfalse = false,
  typebooltrue = true,
  typebooltwo,
  typechar = 'C',
  typedefaultint
};
DifferentTypes differentTypesTest(DifferentTypes n) { return n; }

enum {
  global_typeint = 10,
  global_typeboolfalse = false,
  global_typebooltrue = true,
  global_typebooltwo,
  global_typechar = 'C',
  global_typedefaultint
};
int globalDifferentTypesTest(int n) { return n; }
}



namespace DifferentSpace {
enum DifferentTypesNoConst {
  typeint_noconst = 10,
  typeboolfalse_noconst = false,
  typebooltrue_noconst = true,
  typebooltwo_noconst,
  typechar_noconst = 'C',
  typedefaultint_noconst
};

enum {
  global_typeint_noconst = 10,
  global_typeboolfalse_noconst = false,
  global_typebooltrue_noconst = true,
  global_typebooltwo_noconst,
  global_typechar_noconst = 'C',
  global_typedefaultint_noconst
};
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_curly__greasy__FirStructTo_p_curly__greasy__HairStruct(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((curly::greasy::HairStruct *)  ((curly::greasy::FirStruct *) x));
}
static swig_type_info _swigt__bool = {"_bool", "bool", 0, 0, (void*)0, 0};
static swig_type_info _swigt__char = {"_char", "char", 0, 0, (void*)0, 0};
static swig_type_info _swigt__int = {"_int", "int", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AlsoEmpty = {"_p_AlsoEmpty", "AlsoEmpty *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AnonSpace__AnonStruct = {"_p_AnonSpace__AnonStruct", "AnonSpace::AnonStruct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AnonSpace__namedanonspace = {"_p_AnonSpace__namedanonspace", "enum AnonSpace::namedanonspace *|AnonSpace::namedanonspace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IgnoreTest = {"_p_IgnoreTest", "IgnoreTest *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Instances = {"_p_Instances", "Instances *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Name__TClassT_int_t = {"_p_Name__TClassT_int_t", "Name::TClass< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Obscure = {"_p_Obscure", "Obscure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OldNameStruct = {"_p_OldNameStruct", "OldNameStruct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RepeatSpace__repeat = {"_p_RepeatSpace__repeat", "enum RepeatSpace::repeat *|RepeatSpace::repeat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpeedClass = {"_p_SpeedClass", "SpeedClass *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TemplateClassT_int_t = {"_p_TemplateClassT_int_t", "TemplateClass< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TreesClass = {"_p_TreesClass", "TreesClass *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TreesClass__trees = {"_p_TreesClass__trees", "treesglobaltd7 *|treesglobaltd4 *|treesglobaltd1 *|treesglobaltd8 *|treesglobaltd5 *|enum TreesClass::trees *|treesglobaltd2 *|treesglobaltd9 *|treesglobaltd6 *|treesglobaltd3 *|treesglobaltdA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TwoNamesStruct = {"_p_TwoNamesStruct", "TwoNamesStruct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_curly__greasy__FirStruct = {"_p_curly__greasy__FirStruct", "curly::greasy::FirStruct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_curly__greasy__HairStruct = {"_p_curly__greasy__HairStruct", "curly::greasy::HairStruct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_doublename = {"_p_doublename", "doublename *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd1 = {"_p_hairtd1", "hairtd1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd2 = {"_p_hairtd2", "hairtd2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd3 = {"_p_hairtd3", "hairtd3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd4 = {"_p_hairtd4", "hairtd4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd5 = {"_p_hairtd5", "hairtd5 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd6 = {"_p_hairtd6", "hairtd6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd7 = {"_p_hairtd7", "hairtd7 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd8 = {"_p_hairtd8", "hairtd8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd9 = {"_p_hairtd9", "hairtd9 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtdA = {"_p_hairtdA", "hairtdA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_namedanon = {"_p_namedanon", "enum namedanon *|namedanon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_old_name = {"_p_old_name", "enum old_name *|old_nametd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scientiststd1 = {"_p_scientiststd1", "scientiststd1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scientiststd2 = {"_p_scientiststd2", "scientiststd2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scientiststd3 = {"_p_scientiststd3", "scientiststd3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_singlename = {"_p_singlename", "singlename *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_speedtd1 = {"_p_speedtd1", "speedtd1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd1 = {"_p_treestd1", "treestd1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd2 = {"_p_treestd2", "treestd2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd3 = {"_p_treestd3", "treestd3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd4 = {"_p_treestd4", "treestd4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd5 = {"_p_treestd5", "treestd5 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_twonamestag = {"_p_twonamestag", "enum twonamestag *|twonames *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__bool,
  &_swigt__char,
  &_swigt__int,
  &_swigt__p_AlsoEmpty,
  &_swigt__p_AnonSpace__AnonStruct,
  &_swigt__p_AnonSpace__namedanonspace,
  &_swigt__p_IgnoreTest,
  &_swigt__p_Instances,
  &_swigt__p_Name__TClassT_int_t,
  &_swigt__p_Obscure,
  &_swigt__p_OldNameStruct,
  &_swigt__p_RepeatSpace__repeat,
  &_swigt__p_SpeedClass,
  &_swigt__p_TemplateClassT_int_t,
  &_swigt__p_TreesClass,
  &_swigt__p_TreesClass__trees,
  &_swigt__p_TwoNamesStruct,
  &_swigt__p_curly__greasy__FirStruct,
  &_swigt__p_curly__greasy__HairStruct,
  &_swigt__p_doublename,
  &_swigt__p_hairtd1,
  &_swigt__p_hairtd2,
  &_swigt__p_hairtd3,
  &_swigt__p_hairtd4,
  &_swigt__p_hairtd5,
  &_swigt__p_hairtd6,
  &_swigt__p_hairtd7,
  &_swigt__p_hairtd8,
  &_swigt__p_hairtd9,
  &_swigt__p_hairtdA,
  &_swigt__p_namedanon,
  &_swigt__p_old_name,
  &_swigt__p_scientiststd1,
  &_swigt__p_scientiststd2,
  &_swigt__p_scientiststd3,
  &_swigt__p_singlename,
  &_swigt__p_speedtd1,
  &_swigt__p_treestd1,
  &_swigt__p_treestd2,
  &_swigt__p_treestd3,
  &_swigt__p_treestd4,
  &_swigt__p_treestd5,
  &_swigt__p_twonamestag,
};

static swig_cast_info _swigc__bool[] = {  {&_swigt__bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__char[] = {  {&_swigt__char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__int[] = {  {&_swigt__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AlsoEmpty[] = {  {&_swigt__p_AlsoEmpty, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnonSpace__AnonStruct[] = {  {&_swigt__p_AnonSpace__AnonStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnonSpace__namedanonspace[] = {  {&_swigt__p_AnonSpace__namedanonspace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IgnoreTest[] = {  {&_swigt__p_IgnoreTest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Instances[] = {  {&_swigt__p_Instances, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Name__TClassT_int_t[] = {  {&_swigt__p_Name__TClassT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Obscure[] = {  {&_swigt__p_Obscure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OldNameStruct[] = {  {&_swigt__p_OldNameStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RepeatSpace__repeat[] = {  {&_swigt__p_RepeatSpace__repeat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpeedClass[] = {  {&_swigt__p_SpeedClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TemplateClassT_int_t[] = {  {&_swigt__p_TemplateClassT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TreesClass[] = {  {&_swigt__p_TreesClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TreesClass__trees[] = {  {&_swigt__p_TreesClass__trees, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TwoNamesStruct[] = {  {&_swigt__p_TwoNamesStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_curly__greasy__FirStruct[] = {  {&_swigt__p_curly__greasy__FirStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_curly__greasy__HairStruct[] = {  {&_swigt__p_curly__greasy__HairStruct, 0, 0, 0},  {&_swigt__p_curly__greasy__FirStruct, _p_curly__greasy__FirStructTo_p_curly__greasy__HairStruct, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_doublename[] = {  {&_swigt__p_doublename, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd1[] = {  {&_swigt__p_hairtd1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd2[] = {  {&_swigt__p_hairtd2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd3[] = {  {&_swigt__p_hairtd3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd4[] = {  {&_swigt__p_hairtd4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd5[] = {  {&_swigt__p_hairtd5, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd6[] = {  {&_swigt__p_hairtd6, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd7[] = {  {&_swigt__p_hairtd7, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd8[] = {  {&_swigt__p_hairtd8, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd9[] = {  {&_swigt__p_hairtd9, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtdA[] = {  {&_swigt__p_hairtdA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_namedanon[] = {  {&_swigt__p_namedanon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_old_name[] = {  {&_swigt__p_old_name, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scientiststd1[] = {  {&_swigt__p_scientiststd1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scientiststd2[] = {  {&_swigt__p_scientiststd2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scientiststd3[] = {  {&_swigt__p_scientiststd3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_singlename[] = {  {&_swigt__p_singlename, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_speedtd1[] = {  {&_swigt__p_speedtd1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd1[] = {  {&_swigt__p_treestd1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd2[] = {  {&_swigt__p_treestd2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd3[] = {  {&_swigt__p_treestd3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd4[] = {  {&_swigt__p_treestd4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd5[] = {  {&_swigt__p_treestd5, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_twonamestag[] = {  {&_swigt__p_twonamestag, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__bool,
  _swigc__char,
  _swigc__int,
  _swigc__p_AlsoEmpty,
  _swigc__p_AnonSpace__AnonStruct,
  _swigc__p_AnonSpace__namedanonspace,
  _swigc__p_IgnoreTest,
  _swigc__p_Instances,
  _swigc__p_Name__TClassT_int_t,
  _swigc__p_Obscure,
  _swigc__p_OldNameStruct,
  _swigc__p_RepeatSpace__repeat,
  _swigc__p_SpeedClass,
  _swigc__p_TemplateClassT_int_t,
  _swigc__p_TreesClass,
  _swigc__p_TreesClass__trees,
  _swigc__p_TwoNamesStruct,
  _swigc__p_curly__greasy__FirStruct,
  _swigc__p_curly__greasy__HairStruct,
  _swigc__p_doublename,
  _swigc__p_hairtd1,
  _swigc__p_hairtd2,
  _swigc__p_hairtd3,
  _swigc__p_hairtd4,
  _swigc__p_hairtd5,
  _swigc__p_hairtd6,
  _swigc__p_hairtd7,
  _swigc__p_hairtd8,
  _swigc__p_hairtd9,
  _swigc__p_hairtdA,
  _swigc__p_namedanon,
  _swigc__p_old_name,
  _swigc__p_scientiststd1,
  _swigc__p_scientiststd2,
  _swigc__p_scientiststd3,
  _swigc__p_singlename,
  _swigc__p_speedtd1,
  _swigc__p_treestd1,
  _swigc__p_treestd2,
  _swigc__p_treestd3,
  _swigc__p_treestd4,
  _swigc__p_treestd5,
  _swigc__p_twonamestag,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* end header section */
/* vdecl subsection */
static int le_swig__p_Instances=0; /* handle for Instances */
static int le_swig__p_old_name=0; /* handle for _p_old_name */
static int le_swig__p_SpeedClass=0; /* handle for SpeedClass */
static int le_swig__int=0; /* handle for _int */
static int le_swig__p_TreesClass=0; /* handle for TreesClass */
static int le_swig__p_scientiststd1=0; /* handle for _p_scientiststd1 */
static int le_swig__p_curly__greasy__HairStruct=0; /* handle for HairStruct */
static int le_swig__p_AnonSpace__AnonStruct=0; /* handle for AnonStruct */
static int le_swig__p_curly__greasy__FirStruct=0; /* handle for FirStruct */
static int le_swig__p_scientiststd2=0; /* handle for _p_scientiststd2 */
static int le_swig__p_speedtd1=0; /* handle for _p_speedtd1 */
static int le_swig__p_scientiststd3=0; /* handle for _p_scientiststd3 */
static int le_swig__p_TemplateClassT_int_t=0; /* handle for TemplateClassInt */
static int le_swig__p_Name__TClassT_int_t=0; /* handle for TClassInt */
static int le_swig__p_singlename=0; /* handle for _p_singlename */
static int le_swig__p_namedanon=0; /* handle for _p_namedanon */
static int le_swig__p_TreesClass__trees=0; /* handle for _p_TreesClass__trees */
static int le_swig__char=0; /* handle for _char */
static int le_swig__p_hairtd1=0; /* handle for _p_hairtd1 */
static int le_swig__p_hairtd2=0; /* handle for _p_hairtd2 */
static int le_swig__p_Obscure=0; /* handle for Obscure */
static int le_swig__bool=0; /* handle for _bool */
static int le_swig__p_hairtd3=0; /* handle for _p_hairtd3 */
static int le_swig__p_hairtd4=0; /* handle for _p_hairtd4 */
static int le_swig__p_hairtd5=0; /* handle for _p_hairtd5 */
static int le_swig__p_twonamestag=0; /* handle for _p_twonamestag */
static int le_swig__p_AnonSpace__namedanonspace=0; /* handle for _p_AnonSpace__namedanonspace */
static int le_swig__p_hairtd6=0; /* handle for _p_hairtd6 */
static int le_swig__p_AlsoEmpty=0; /* handle for _p_AlsoEmpty */
static int le_swig__p_hairtd7=0; /* handle for _p_hairtd7 */
static int le_swig__p_OldNameStruct=0; /* handle for NewNameStruct */
static int le_swig__p_TwoNamesStruct=0; /* handle for TwoNamesStruct */
static int le_swig__p_RepeatSpace__repeat=0; /* handle for _p_RepeatSpace__repeat */
static int le_swig__p_hairtd8=0; /* handle for _p_hairtd8 */
static int le_swig__p_hairtd9=0; /* handle for _p_hairtd9 */
static int le_swig__p_treestd1=0; /* handle for _p_treestd1 */
static int le_swig__p_treestd2=0; /* handle for _p_treestd2 */
static int le_swig__p_doublename=0; /* handle for _p_doublename */
static int le_swig__p_treestd3=0; /* handle for _p_treestd3 */
static int le_swig__p_treestd4=0; /* handle for _p_treestd4 */
static int le_swig__p_treestd5=0; /* handle for _p_treestd5 */
static int le_swig__p_IgnoreTest=0; /* handle for IgnoreTest */
static int le_swig__p_hairtdA=0; /* handle for _p_hairtdA */
/* end vdecl subsection */
/* wrapper section */
ZEND_NAMED_FUNCTION(_wrap_new_AnonStruct) {
  AnonSpace::AnonStruct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (AnonSpace::AnonStruct *)new AnonSpace::AnonStruct();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_AnonSpace__AnonStruct, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_AnonStruct(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  AnonSpace::AnonStruct *arg1 = (AnonSpace::AnonStruct *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (AnonSpace::AnonStruct *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_AnonSpace__AnonStruct TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "AnonSpace::AnonStruct resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_colourTest1) {
  colour arg1 ;
  zval **args[1];
  colour result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (colour) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (colour)colourTest1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_colourTest2) {
  enum colour arg1 ;
  zval **args[1];
  enum colour result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum colour) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum colour)colourTest2(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_colourTest3) {
  colour arg1 ;
  zval **args[1];
  colour result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (colour) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (colour)colourTest3(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_colourTest4) {
  enum colour arg1 ;
  zval **args[1];
  enum colour result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum colour) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum colour)colourTest4(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_myColour_set) {
  colour arg1 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (colour) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  myColour = arg1;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_myColour_get) {
  colour result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (colour)myColour;
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_SpeedClass_speedTest0) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  int arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SpeedClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpeedClass_speedTest0. Expected SWIGTYPE_p_SpeedClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (int)(arg1)->speedTest0(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_SpeedClass_speedTest1) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speed arg2 ;
  zval **args[2];
  SpeedClass::speed result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SpeedClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpeedClass_speedTest1. Expected SWIGTYPE_p_SpeedClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (SpeedClass::speed) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (SpeedClass::speed)(arg1)->speedTest1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_SpeedClass_speedTest2) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  enum SpeedClass::speed arg2 ;
  zval **args[2];
  enum SpeedClass::speed result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SpeedClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpeedClass_speedTest2. Expected SWIGTYPE_p_SpeedClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum SpeedClass::speed) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum SpeedClass::speed)(arg1)->speedTest2(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_SpeedClass_speedTest3) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speed arg2 ;
  zval **args[2];
  SpeedClass::speed result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SpeedClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpeedClass_speedTest3. Expected SWIGTYPE_p_SpeedClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (SpeedClass::speed) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (SpeedClass::speed)(arg1)->speedTest3(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_SpeedClass_speedTest4) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  enum SpeedClass::speed arg2 ;
  zval **args[2];
  enum SpeedClass::speed result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SpeedClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpeedClass_speedTest4. Expected SWIGTYPE_p_SpeedClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum SpeedClass::speed) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum SpeedClass::speed)(arg1)->speedTest4(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_SpeedClass_speedTest5) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speedtd1 arg2 ;
  zval **args[2];
  SpeedClass::speedtd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SpeedClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpeedClass_speedTest5. Expected SWIGTYPE_p_SpeedClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (SpeedClass::speedtd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (SpeedClass::speedtd1)(arg1)->speedTest5(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_SpeedClass_speedTest6) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speedtd1 arg2 ;
  zval **args[2];
  SpeedClass::speedtd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SpeedClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpeedClass_speedTest6. Expected SWIGTYPE_p_SpeedClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (SpeedClass::speedtd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (SpeedClass::speedtd1)(arg1)->speedTest6(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_SpeedClass_speedTest7) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speed *arg2 = 0 ;
  SpeedClass::speed temp2 ;
  zval **args[2];
  SpeedClass::speed *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SpeedClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpeedClass_speedTest7. Expected SWIGTYPE_p_SpeedClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (SpeedClass::speed) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (SpeedClass::speed *) &(arg1)->speedTest7((SpeedClass::speed const &)*arg2);
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_SpeedClass_speedTest8) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  enum SpeedClass::speed *arg2 = 0 ;
  enum SpeedClass::speed temp2 ;
  zval **args[2];
  enum SpeedClass::speed *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SpeedClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpeedClass_speedTest8. Expected SWIGTYPE_p_SpeedClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (enum SpeedClass::speed) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (enum SpeedClass::speed *) &(arg1)->speedTest8((enum SpeedClass::speed const &)*arg2);
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_SpeedClass_myColour2_get) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  zval **args[1];
  colour result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SpeedClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpeedClass_myColour2_get. Expected SWIGTYPE_p_SpeedClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (colour)(colour) ((arg1)->myColour2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_SpeedClass_mySpeedtd1_set) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speedtd1 arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SpeedClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpeedClass_mySpeedtd1_set. Expected SWIGTYPE_p_SpeedClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (SpeedClass::speedtd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->mySpeedtd1 = arg2;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_SpeedClass_mySpeedtd1_get) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  zval **args[1];
  SpeedClass::speedtd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_SpeedClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of SpeedClass_mySpeedtd1_get. Expected SWIGTYPE_p_SpeedClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (SpeedClass::speedtd1) ((arg1)->mySpeedtd1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_SpeedClass) {
  SpeedClass *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (SpeedClass *)new SpeedClass();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_SpeedClass, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_SpeedClass(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (SpeedClass *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_SpeedClass TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "SpeedClass resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_speedTest0) {
  int arg1 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (int)speedTest0(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_speedTest1) {
  SpeedClass::speed arg1 ;
  zval **args[1];
  SpeedClass::speed result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (SpeedClass::speed) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (SpeedClass::speed)speedTest1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_speedTest2) {
  enum SpeedClass::speed arg1 ;
  zval **args[1];
  enum SpeedClass::speed result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum SpeedClass::speed) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum SpeedClass::speed)speedTest2(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_speedTest3) {
  SpeedClass::speed arg1 ;
  zval **args[1];
  SpeedClass::speed result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (SpeedClass::speed) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (SpeedClass::speed)speedTest3(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_speedTest4) {
  enum SpeedClass::speed arg1 ;
  zval **args[1];
  enum SpeedClass::speed result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum SpeedClass::speed) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum SpeedClass::speed)speedTest4(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_speedTest5) {
  SpeedClass::speed *arg1 = 0 ;
  SpeedClass::speed temp1 ;
  zval **args[1];
  SpeedClass::speed *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  temp1 = (SpeedClass::speed) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  arg1 = &temp1;
  
  result = (SpeedClass::speed *) &speedTest5((enum SpeedClass::speed const &)*arg1);
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_namedanonTest1) {
  namedanon arg1 ;
  zval **args[1];
  namedanon result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (namedanon) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (namedanon)namedanonTest1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_twonamesTest1) {
  twonames arg1 ;
  zval **args[1];
  twonames result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (twonames) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (twonames)twonamesTest1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_twonamesTest2) {
  twonamestag arg1 ;
  zval **args[1];
  twonamestag result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (twonamestag) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (twonamestag)twonamesTest2(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_twonamesTest3) {
  enum twonamestag arg1 ;
  zval **args[1];
  enum twonamestag result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum twonamestag) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum twonamestag)twonamesTest3(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TwoNamesStruct_twonamesTest1) {
  TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
  TwoNamesStruct::twonames arg2 ;
  zval **args[2];
  TwoNamesStruct::twonames result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TwoNamesStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TwoNamesStruct_twonamesTest1. Expected SWIGTYPE_p_TwoNamesStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TwoNamesStruct::twonames) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TwoNamesStruct::twonames)(arg1)->twonamesTest1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TwoNamesStruct_twonamesTest2) {
  TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
  TwoNamesStruct::twonamestag arg2 ;
  zval **args[2];
  TwoNamesStruct::twonamestag result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TwoNamesStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TwoNamesStruct_twonamesTest2. Expected SWIGTYPE_p_TwoNamesStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TwoNamesStruct::twonamestag) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TwoNamesStruct::twonamestag)(arg1)->twonamesTest2(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TwoNamesStruct_twonamesTest3) {
  TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
  enum TwoNamesStruct::twonamestag arg2 ;
  zval **args[2];
  enum TwoNamesStruct::twonamestag result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TwoNamesStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TwoNamesStruct_twonamesTest3. Expected SWIGTYPE_p_TwoNamesStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum TwoNamesStruct::twonamestag) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum TwoNamesStruct::twonamestag)(arg1)->twonamesTest3(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_TwoNamesStruct) {
  TwoNamesStruct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (TwoNamesStruct *)new TwoNamesStruct();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_TwoNamesStruct, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_TwoNamesStruct(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (TwoNamesStruct *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_TwoNamesStruct TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "TwoNamesStruct resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_namedanonspaceTest1) {
  AnonSpace::namedanonspace arg1 ;
  zval **args[1];
  AnonSpace::namedanonspace result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (AnonSpace::namedanonspace) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (AnonSpace::namedanonspace)AnonSpace::namedanonspaceTest1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_namedanonspaceTest2) {
  AnonSpace::namedanonspace arg1 ;
  zval **args[1];
  AnonSpace::namedanonspace result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (AnonSpace::namedanonspace) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (AnonSpace::namedanonspace)AnonSpace::namedanonspaceTest2(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_namedanonspaceTest3) {
  AnonSpace::namedanonspace arg1 ;
  zval **args[1];
  AnonSpace::namedanonspace result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (AnonSpace::namedanonspace) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (AnonSpace::namedanonspace)namedanonspaceTest3(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_namedanonspaceTest4) {
  AnonSpace::namedanonspace arg1 ;
  zval **args[1];
  AnonSpace::namedanonspace result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (AnonSpace::namedanonspace) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (AnonSpace::namedanonspace)namedanonspaceTest4(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsTest1) {
  TemplateClass< int >::scientists arg1 ;
  zval **args[1];
  TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TemplateClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientists)scientistsTest1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsTest2) {
  TemplateClass< int >::scientists arg1 ;
  zval **args[1];
  TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TemplateClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientists)scientistsTest2(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsTest3) {
  enum TemplateClass< int >::scientists arg1 ;
  zval **args[1];
  enum TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum TemplateClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum TemplateClass< int >::scientists)scientistsTest3(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsTest4) {
  enum TemplateClass< int >::scientists arg1 ;
  zval **args[1];
  enum TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum TemplateClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum TemplateClass< int >::scientists)scientistsTest4(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsTest5) {
  TemplateClass< int >::scientiststd1 arg1 ;
  zval **args[1];
  TemplateClass< int >::scientiststd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TemplateClass< int >::scientiststd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientiststd1)scientistsTest5(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsTest6) {
  TemplateClass< int >::scientiststd2 arg1 ;
  zval **args[1];
  TemplateClass< int >::scientiststd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TemplateClass< int >::scientiststd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientiststd2)scientistsTest6(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsTest7) {
  TemplateClass< int >::scientiststd3 arg1 ;
  zval **args[1];
  TemplateClass< int >::scientiststd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TemplateClass< int >::scientiststd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientiststd3)scientistsTest7(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsTest8) {
  TemplateClass< int >::scientiststd3 *arg1 = 0 ;
  TemplateClass< int >::scientiststd3 temp1 ;
  zval **args[1];
  TemplateClass< int >::scientiststd3 *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  temp1 = (TemplateClass< int >::scientiststd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  arg1 = &temp1;
  
  result = (TemplateClass< int >::scientiststd3 *) &scientistsTest8((enum TemplateClass< int >::scientists const &)*arg1);
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameTest1) {
  Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)Name::scientistsNameTest1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameTest2) {
  Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)Name::scientistsNameTest2(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameTest3) {
  enum Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)Name::scientistsNameTest3(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameTest4) {
  enum Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)Name::scientistsNameTest4(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameTest5) {
  Name::TClass< int >::scientiststd1 arg1 ;
  zval **args[1];
  Name::TClass< int >::scientiststd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientiststd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd1)Name::scientistsNameTest5(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameTest6) {
  Name::TClass< int >::scientiststd2 arg1 ;
  zval **args[1];
  Name::TClass< int >::scientiststd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientiststd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd2)Name::scientistsNameTest6(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameTest7) {
  Name::TClass< int >::scientiststd3 arg1 ;
  zval **args[1];
  Name::TClass< int >::scientiststd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientiststd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd3)Name::scientistsNameTest7(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTest1) {
  Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)Name::scientistsNameSpaceTest1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTest2) {
  Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)Name::scientistsNameSpaceTest2(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTest3) {
  enum Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)Name::scientistsNameSpaceTest3(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTest4) {
  enum Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)Name::scientistsNameSpaceTest4(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTest5) {
  Name::TClass< int >::scientiststd1 arg1 ;
  zval **args[1];
  Name::TClass< int >::scientiststd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientiststd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd1)Name::scientistsNameSpaceTest5(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTest6) {
  Name::TClass< int >::scientiststd2 arg1 ;
  zval **args[1];
  Name::TClass< int >::scientiststd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientiststd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd2)Name::scientistsNameSpaceTest6(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTest7) {
  Name::TClass< int >::scientiststd3 arg1 ;
  zval **args[1];
  Name::TClass< int >::scientiststd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientiststd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd3)Name::scientistsNameSpaceTest7(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTest8) {
  Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)scientistsNameSpaceTest8(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTest9) {
  Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)scientistsNameSpaceTest9(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTestA) {
  enum Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestA(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTestB) {
  enum Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestB(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTestC) {
  Name::TClass< int >::scientiststd1 arg1 ;
  zval **args[1];
  Name::TClass< int >::scientiststd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientiststd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd1)scientistsNameSpaceTestC(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTestD) {
  Name::TClass< int >::scientiststd2 arg1 ;
  zval **args[1];
  Name::TClass< int >::scientiststd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientiststd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd2)scientistsNameSpaceTestD(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTestE) {
  Name::TClass< int >::scientiststd3 arg1 ;
  zval **args[1];
  Name::TClass< int >::scientiststd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientiststd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd3)scientistsNameSpaceTestE(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTestF) {
  Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)scientistsNameSpaceTestF(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTestG) {
  Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)scientistsNameSpaceTestG(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTestH) {
  enum Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestH(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTestI) {
  enum Name::TClass< int >::scientists arg1 ;
  zval **args[1];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestI(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTestJ) {
  Name::TClass< int >::scientiststd1 arg1 ;
  zval **args[1];
  Name::TClass< int >::scientiststd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientiststd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd1)scientistsNameSpaceTestJ(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTestK) {
  Name::TClass< int >::scientiststd2 arg1 ;
  zval **args[1];
  Name::TClass< int >::scientiststd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientiststd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd2)scientistsNameSpaceTestK(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_scientistsNameSpaceTestL) {
  Name::TClass< int >::scientiststd3 arg1 ;
  zval **args[1];
  Name::TClass< int >::scientiststd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (Name::TClass< int >::scientiststd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd3)scientistsNameSpaceTestL(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTest1) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTest1. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTest2) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  enum TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  enum TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTest2. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest2(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTest3) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTest3. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest3(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTest4) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  enum TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  enum TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTest4. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest4(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTest5) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTest5. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest5(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTest6) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTest6. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest6(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTest7) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  enum TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  enum TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTest7. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest7(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTest8) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  enum TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  enum TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTest8. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest8(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTest9) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTest9. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest9(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTestB) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTestB. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTestB(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTestD) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd1 arg2 ;
  zval **args[2];
  TemplateClass< int >::scientiststd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTestD. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TemplateClass< int >::scientiststd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientiststd1)(arg1)->scientistsTestD(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTestE) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd2 arg2 ;
  zval **args[2];
  TemplateClass< int >::scientiststd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTestE. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TemplateClass< int >::scientiststd2) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientiststd2)(arg1)->scientistsTestE(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTestF) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd3 arg2 ;
  zval **args[2];
  TemplateClass< int >::scientiststd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTestF. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TemplateClass< int >::scientiststd3) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientiststd3)(arg1)->scientistsTestF(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTestG) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd1 arg2 ;
  zval **args[2];
  TemplateClass< int >::scientiststd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTestG. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TemplateClass< int >::scientiststd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientiststd1)(arg1)->scientistsTestG(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTestH) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd2 arg2 ;
  zval **args[2];
  TemplateClass< int >::scientiststd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTestH. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TemplateClass< int >::scientiststd2) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientiststd2)(arg1)->scientistsTestH(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTestI) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd3 arg2 ;
  zval **args[2];
  TemplateClass< int >::scientiststd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTestI. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TemplateClass< int >::scientiststd3) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TemplateClass< int >::scientiststd3)(arg1)->scientistsTestI(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TemplateClassInt_scientistsTestJ) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists *arg2 = 0 ;
  TemplateClass< int >::scientists temp2 ;
  zval **args[2];
  TemplateClass< int >::scientists *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TemplateClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TemplateClassInt_scientistsTestJ. Expected SWIGTYPE_p_TemplateClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  result = (TemplateClass< int >::scientists *) &(arg1)->scientistsTestJ((TemplateClass< int >::scientists const &)*arg2);
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_TemplateClassInt) {
  TemplateClass< int > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (TemplateClass< int > *)new TemplateClass< int >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_TemplateClassT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_TemplateClassInt(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (TemplateClass< int > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_TemplateClassT_int_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "TemplateClass<(int)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTest1) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTest1. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTest2) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTest2. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest2(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTest3) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTest3. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest3(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTest4) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTest4. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest4(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTest5) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTest5. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest5(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTest6) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTest6. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest6(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTest7) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTest7. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest7(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTest8) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTest8. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest8(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTest9) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTest9. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest9(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTestB) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTestB. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTestB(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTestD) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd1 arg2 ;
  zval **args[2];
  Name::TClass< int >::scientiststd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTestD. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientiststd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd1)(arg1)->scientistsNameTestD(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTestE) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd2 arg2 ;
  zval **args[2];
  Name::TClass< int >::scientiststd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTestE. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientiststd2) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd2)(arg1)->scientistsNameTestE(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTestF) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd3 arg2 ;
  zval **args[2];
  Name::TClass< int >::scientiststd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTestF. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientiststd3) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd3)(arg1)->scientistsNameTestF(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTestG) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd1 arg2 ;
  zval **args[2];
  Name::TClass< int >::scientiststd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTestG. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientiststd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd1)(arg1)->scientistsNameTestG(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTestH) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd2 arg2 ;
  zval **args[2];
  Name::TClass< int >::scientiststd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTestH. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientiststd2) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd2)(arg1)->scientistsNameTestH(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameTestI) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd3 arg2 ;
  zval **args[2];
  Name::TClass< int >::scientiststd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameTestI. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientiststd3) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd3)(arg1)->scientistsNameTestI(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameSpaceTest1) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameSpaceTest1. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameSpaceTest2) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameSpaceTest2. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest2(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameSpaceTest3) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameSpaceTest3. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest3(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameSpaceTest4) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  zval **args[2];
  enum Name::TClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameSpaceTest4. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum Name::TClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest4(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameSpaceTest5) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd1 arg2 ;
  zval **args[2];
  Name::TClass< int >::scientiststd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameSpaceTest5. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientiststd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd1)(arg1)->scientistsNameSpaceTest5(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameSpaceTest6) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd2 arg2 ;
  zval **args[2];
  Name::TClass< int >::scientiststd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameSpaceTest6. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientiststd2) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd2)(arg1)->scientistsNameSpaceTest6(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsNameSpaceTest7) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd3 arg2 ;
  zval **args[2];
  Name::TClass< int >::scientiststd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsNameSpaceTest7. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (Name::TClass< int >::scientiststd3) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (Name::TClass< int >::scientiststd3)(arg1)->scientistsNameSpaceTest7(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsOtherTest1) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  ::TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsOtherTest1. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (::TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsOtherTest2) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  ::TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsOtherTest2. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (::TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest2(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsOtherTest3) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum ::TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  enum ::TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsOtherTest3. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum ::TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum ::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest3(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsOtherTest4) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum ::TemplateClass< int >::scientists arg2 ;
  zval **args[2];
  enum ::TemplateClass< int >::scientists result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsOtherTest4. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum ::TemplateClass< int >::scientists) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum ::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest4(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsOtherTest5) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientiststd1 arg2 ;
  zval **args[2];
  ::TemplateClass< int >::scientiststd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsOtherTest5. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (::TemplateClass< int >::scientiststd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (::TemplateClass< int >::scientiststd1)(arg1)->scientistsOtherTest5(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsOtherTest6) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientiststd2 arg2 ;
  zval **args[2];
  ::TemplateClass< int >::scientiststd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsOtherTest6. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (::TemplateClass< int >::scientiststd2) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (::TemplateClass< int >::scientiststd2)(arg1)->scientistsOtherTest6(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TClassInt_scientistsOtherTest7) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientiststd3 arg2 ;
  zval **args[2];
  ::TemplateClass< int >::scientiststd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Name__TClassT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TClassInt_scientistsOtherTest7. Expected SWIGTYPE_p_Name__TClassT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (::TemplateClass< int >::scientiststd3) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (::TemplateClass< int >::scientiststd3)(arg1)->scientistsOtherTest7(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_TClassInt) {
  Name::TClass< int > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (Name::TClass< int > *)new Name::TClass< int >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Name__TClassT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_TClassInt(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (Name::TClass< int > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_Name__TClassT_int_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "Name::TClass<(int)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_renameTest1) {
  old_name arg1 ;
  zval **args[1];
  old_name result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (old_name) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (old_name)renameTest1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_renameTest2) {
  old_nametd arg1 ;
  zval **args[1];
  old_nametd result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (old_nametd) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (old_nametd)renameTest2(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_NewNameStruct_renameTest1) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::enumeration arg2 ;
  zval **args[2];
  OldNameStruct::enumeration result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OldNameStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NewNameStruct_renameTest1. Expected SWIGTYPE_p_OldNameStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OldNameStruct::enumeration) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OldNameStruct::enumeration)(arg1)->renameTest1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_NewNameStruct_renameTest2) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::enumeration arg2 ;
  zval **args[2];
  OldNameStruct::enumeration result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OldNameStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NewNameStruct_renameTest2. Expected SWIGTYPE_p_OldNameStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OldNameStruct::enumeration) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OldNameStruct::enumeration)(arg1)->renameTest2(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_NewNameStruct_renameTest3) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::simple arg2 ;
  zval **args[2];
  OldNameStruct::simple result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OldNameStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NewNameStruct_renameTest3. Expected SWIGTYPE_p_OldNameStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OldNameStruct::simple) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OldNameStruct::simple)(arg1)->renameTest3(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_NewNameStruct_renameTest4) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::doublename arg2 ;
  zval **args[2];
  OldNameStruct::doublename result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OldNameStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NewNameStruct_renameTest4. Expected SWIGTYPE_p_OldNameStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OldNameStruct::doublename) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OldNameStruct::doublename)(arg1)->renameTest4(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_NewNameStruct_renameTest5) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::doublenametag arg2 ;
  zval **args[2];
  OldNameStruct::doublenametag result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OldNameStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NewNameStruct_renameTest5. Expected SWIGTYPE_p_OldNameStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OldNameStruct::doublenametag) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OldNameStruct::doublenametag)(arg1)->renameTest5(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_NewNameStruct_renameTest6) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::singlename arg2 ;
  zval **args[2];
  OldNameStruct::singlename result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OldNameStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of NewNameStruct_renameTest6. Expected SWIGTYPE_p_OldNameStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OldNameStruct::singlename) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OldNameStruct::singlename)(arg1)->renameTest6(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_NewNameStruct) {
  OldNameStruct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (OldNameStruct *)new OldNameStruct();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OldNameStruct, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_NewNameStruct(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OldNameStruct *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OldNameStruct TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OldNameStruct resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_renameTest3) {
  OldNameStruct::enumeration arg1 ;
  zval **args[1];
  OldNameStruct::enumeration result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OldNameStruct::enumeration) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (OldNameStruct::enumeration)renameTest3(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_renameTest4) {
  OldNameStruct::simple arg1 ;
  zval **args[1];
  OldNameStruct::simple result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OldNameStruct::simple) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (OldNameStruct::simple)renameTest4(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_renameTest5) {
  OldNameStruct::doublename arg1 ;
  zval **args[1];
  OldNameStruct::doublename result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OldNameStruct::doublename) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (OldNameStruct::doublename)renameTest5(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_renameTest6) {
  OldNameStruct::doublenametag arg1 ;
  zval **args[1];
  OldNameStruct::doublenametag result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OldNameStruct::doublenametag) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (OldNameStruct::doublenametag)renameTest6(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_renameTest7) {
  OldNameStruct::singlename arg1 ;
  zval **args[1];
  OldNameStruct::singlename result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OldNameStruct::singlename) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (OldNameStruct::singlename)renameTest7(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTest1) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::trees arg2 ;
  zval **args[2];
  TreesClass::trees result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTest1. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::trees) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::trees)(arg1)->treesTest1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTest2) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd1 arg2 ;
  zval **args[2];
  TreesClass::treestd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTest2. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd1)(arg1)->treesTest2(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTest3) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd2 arg2 ;
  zval **args[2];
  TreesClass::treestd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTest3. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd2) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd2)(arg1)->treesTest3(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTest4) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd3 arg2 ;
  zval **args[2];
  TreesClass::treestd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTest4. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd3) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd3)(arg1)->treesTest4(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTest5) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd4 arg2 ;
  zval **args[2];
  TreesClass::treestd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTest5. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd4) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd4)(arg1)->treesTest5(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTest6) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd5 arg2 ;
  zval **args[2];
  TreesClass::treestd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTest6. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd5) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd5)(arg1)->treesTest6(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTest7) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::trees arg2 ;
  zval **args[2];
  TreesClass::trees result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTest7. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::trees) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::trees)(arg1)->treesTest7(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTest8) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd1 arg2 ;
  zval **args[2];
  TreesClass::treestd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTest8. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd1)(arg1)->treesTest8(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTest9) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd2 arg2 ;
  zval **args[2];
  TreesClass::treestd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTest9. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd2) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd2)(arg1)->treesTest9(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestA) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd3 arg2 ;
  zval **args[2];
  TreesClass::treestd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestA. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd3) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd3)(arg1)->treesTestA(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestB) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd4 arg2 ;
  zval **args[2];
  TreesClass::treestd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestB. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd4) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd4)(arg1)->treesTestB(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestC) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd5 arg2 ;
  zval **args[2];
  TreesClass::treestd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestC. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd5) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd5)(arg1)->treesTestC(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestD) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::trees arg2 ;
  zval **args[2];
  TreesClass::trees result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestD. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::trees) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::trees)(arg1)->treesTestD(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestE) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd1 arg2 ;
  zval **args[2];
  TreesClass::treestd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestE. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd1)(arg1)->treesTestE(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestF) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd2 arg2 ;
  zval **args[2];
  TreesClass::treestd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestF. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd2) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd2)(arg1)->treesTestF(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestG) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd3 arg2 ;
  zval **args[2];
  TreesClass::treestd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestG. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd3) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd3)(arg1)->treesTestG(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestH) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd4 arg2 ;
  zval **args[2];
  TreesClass::treestd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestH. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd4) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd4)(arg1)->treesTestH(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestI) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd5 arg2 ;
  zval **args[2];
  TreesClass::treestd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestI. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd5) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd5)(arg1)->treesTestI(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestJ) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::trees arg2 ;
  zval **args[2];
  TreesClass::trees result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestJ. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::trees) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::trees)(arg1)->treesTestJ(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestK) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd1 arg2 ;
  zval **args[2];
  TreesClass::treestd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestK. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd1)(arg1)->treesTestK(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestL) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd2 arg2 ;
  zval **args[2];
  TreesClass::treestd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestL. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd2) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd2)(arg1)->treesTestL(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestM) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd3 arg2 ;
  zval **args[2];
  TreesClass::treestd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestM. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd3) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd3)(arg1)->treesTestM(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestN) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd4 arg2 ;
  zval **args[2];
  TreesClass::treestd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestN. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd4) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd4)(arg1)->treesTestN(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TreesClass_treesTestO) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd5 arg2 ;
  zval **args[2];
  TreesClass::treestd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_TreesClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TreesClass_treesTestO. Expected SWIGTYPE_p_TreesClass");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (TreesClass::treestd5) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd5)(arg1)->treesTestO(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_TreesClass) {
  TreesClass *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (TreesClass *)new TreesClass();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_TreesClass, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_TreesClass(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (TreesClass *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_TreesClass TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "TreesClass resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTest1) {
  TreesClass::trees arg1 ;
  zval **args[1];
  TreesClass::trees result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::trees) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::trees)treesTest1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTest2) {
  TreesClass::treestd1 arg1 ;
  zval **args[1];
  TreesClass::treestd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::treestd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd1)treesTest2(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTest3) {
  TreesClass::treestd2 arg1 ;
  zval **args[1];
  TreesClass::treestd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::treestd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd2)treesTest3(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTest4) {
  TreesClass::treestd3 arg1 ;
  zval **args[1];
  TreesClass::treestd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::treestd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd3)treesTest4(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTest5) {
  TreesClass::treestd4 arg1 ;
  zval **args[1];
  TreesClass::treestd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::treestd4) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd4)treesTest5(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTest6) {
  TreesClass::treestd5 arg1 ;
  zval **args[1];
  TreesClass::treestd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::treestd5) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd5)treesTest6(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTest7) {
  TreesClass::trees arg1 ;
  zval **args[1];
  TreesClass::trees result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::trees) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::trees)treesTest7(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTest8) {
  TreesClass::treestd1 arg1 ;
  zval **args[1];
  TreesClass::treestd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::treestd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd1)treesTest8(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTest9) {
  TreesClass::treestd2 arg1 ;
  zval **args[1];
  TreesClass::treestd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::treestd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd2)treesTest9(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestA) {
  TreesClass::treestd3 arg1 ;
  zval **args[1];
  TreesClass::treestd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::treestd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd3)treesTestA(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestB) {
  TreesClass::treestd4 arg1 ;
  zval **args[1];
  TreesClass::treestd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::treestd4) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd4)treesTestB(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestC) {
  TreesClass::treestd5 arg1 ;
  zval **args[1];
  TreesClass::treestd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::treestd5) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd5)treesTestC(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestD) {
  treesglobaltd1 arg1 ;
  zval **args[1];
  treesglobaltd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (treesglobaltd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (treesglobaltd1)treesTestD(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestE) {
  treesglobaltd2 arg1 ;
  zval **args[1];
  treesglobaltd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (treesglobaltd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (treesglobaltd2)treesTestE(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestF) {
  treesglobaltd3 arg1 ;
  zval **args[1];
  treesglobaltd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (treesglobaltd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (treesglobaltd3)treesTestF(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestG) {
  treesglobaltd4 arg1 ;
  zval **args[1];
  treesglobaltd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (treesglobaltd4) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (treesglobaltd4)treesTestG(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestH) {
  treesglobaltd5 arg1 ;
  zval **args[1];
  treesglobaltd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (treesglobaltd5) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (treesglobaltd5)treesTestH(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestI) {
  treesglobaltd1 arg1 ;
  zval **args[1];
  treesglobaltd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (treesglobaltd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (treesglobaltd1)treesTestI(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestJ) {
  treesglobaltd2 arg1 ;
  zval **args[1];
  treesglobaltd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (treesglobaltd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (treesglobaltd2)treesTestJ(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestK) {
  treesglobaltd3 arg1 ;
  zval **args[1];
  treesglobaltd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (treesglobaltd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (treesglobaltd3)treesTestK(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestL) {
  treesglobaltd4 arg1 ;
  zval **args[1];
  treesglobaltd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (treesglobaltd4) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (treesglobaltd4)treesTestL(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestM) {
  treesglobaltd5 arg1 ;
  zval **args[1];
  treesglobaltd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (treesglobaltd5) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (treesglobaltd5)treesTestM(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestO) {
  TreesClass::trees arg1 ;
  zval **args[1];
  TreesClass::trees result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::trees) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::trees)treesTestO(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestP) {
  TreesClass::treestd1 arg1 ;
  zval **args[1];
  TreesClass::treestd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::treestd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd1)treesTestP(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestQ) {
  TreesClass::treestd2 arg1 ;
  zval **args[1];
  TreesClass::treestd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (TreesClass::treestd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (TreesClass::treestd2)treesTestQ(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_treesTestR) {
  treesglobaltd4 arg1 ;
  zval **args[1];
  treesglobaltd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (treesglobaltd4) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (treesglobaltd4)treesTestR(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_hairTest1) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hair arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hair result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_hairTest1. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hair) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hair)(arg1)->hairTest1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_hairTest2) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd1 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_hairTest2. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd1)(arg1)->hairTest2(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_hairTest3) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd2 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_hairTest3. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd2) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd2)(arg1)->hairTest3(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_hairTest4) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd3 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_hairTest4. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd3) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd3)(arg1)->hairTest4(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_hairTest5) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd4 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_hairTest5. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd4) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd4)(arg1)->hairTest5(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_hairTest6) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd5 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_hairTest6. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd5) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd5)(arg1)->hairTest6(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_hairTest7) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd6 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd6 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_hairTest7. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd6) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd6)(arg1)->hairTest7(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_hairTest8) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd7 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd7 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_hairTest8. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd7) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd7)(arg1)->hairTest8(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_hairTest9) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd8 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd8 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_hairTest9. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd8) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd8)(arg1)->hairTest9(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_hairTestA) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd9 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd9 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_hairTestA. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd9) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd9)(arg1)->hairTestA(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_hairTestB) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtdA arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtdA result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_hairTestB. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtdA) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtdA)(arg1)->hairTestB(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_colourTest1) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  ::colour arg2 ;
  zval **args[2];
  ::colour result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_colourTest1. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (::colour) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (::colour)(arg1)->colourTest1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_colourTest2) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  enum colour arg2 ;
  zval **args[2];
  enum colour result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_colourTest2. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (enum colour) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (enum colour)(arg1)->colourTest2(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_namedanonTest1) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  namedanon arg2 ;
  zval **args[2];
  namedanon result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_namedanonTest1. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (namedanon) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (namedanon)(arg1)->namedanonTest1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_namedanonspaceTest1) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  AnonSpace::namedanonspace arg2 ;
  zval **args[2];
  AnonSpace::namedanonspace result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_namedanonspaceTest1. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (AnonSpace::namedanonspace) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (AnonSpace::namedanonspace)(arg1)->namedanonspaceTest1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_treesGlobalTest1) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd1 arg2 ;
  zval **args[2];
  treesglobaltd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_treesGlobalTest1. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (treesglobaltd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (treesglobaltd1)(arg1)->treesGlobalTest1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_treesGlobalTest2) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd2 arg2 ;
  zval **args[2];
  treesglobaltd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_treesGlobalTest2. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (treesglobaltd2) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (treesglobaltd2)(arg1)->treesGlobalTest2(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_treesGlobalTest3) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd3 arg2 ;
  zval **args[2];
  treesglobaltd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_treesGlobalTest3. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (treesglobaltd3) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (treesglobaltd3)(arg1)->treesGlobalTest3(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_treesGlobalTest4) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd4 arg2 ;
  zval **args[2];
  treesglobaltd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_treesGlobalTest4. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (treesglobaltd4) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (treesglobaltd4)(arg1)->treesGlobalTest4(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_HairStruct_treesGlobalTest5) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd5 arg2 ;
  zval **args[2];
  treesglobaltd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__HairStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of HairStruct_treesGlobalTest5. Expected SWIGTYPE_p_curly__greasy__HairStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (treesglobaltd5) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (treesglobaltd5)(arg1)->treesGlobalTest5(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_HairStruct) {
  curly::greasy::HairStruct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (curly::greasy::HairStruct *)new curly::greasy::HairStruct();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_curly__greasy__HairStruct, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_HairStruct(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (curly::greasy::HairStruct *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_curly__greasy__HairStruct TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "curly::greasy::HairStruct resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTest1) {
  curly::greasy::HairStruct::hair arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hair result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hair) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hair)curly::greasy::hairTest1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTest2) {
  curly::greasy::HairStruct::hairtd1 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd1)curly::greasy::hairTest2(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTest3) {
  curly::greasy::HairStruct::hairtd2 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd2)curly::greasy::hairTest3(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTest4) {
  curly::greasy::HairStruct::hairtd3 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd3)curly::greasy::hairTest4(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTest5) {
  curly::greasy::HairStruct::hairtd4 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd4) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd4)curly::greasy::hairTest5(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTest6) {
  curly::greasy::HairStruct::hairtd5 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd5) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd5)curly::greasy::hairTest6(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTest7) {
  curly::greasy::HairStruct::hairtd6 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd6 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd6) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd6)curly::greasy::hairTest7(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTest8) {
  curly::greasy::HairStruct::hairtd7 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd7 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd7) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd7)curly::greasy::hairTest8(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTest9) {
  curly::greasy::HairStruct::hairtd8 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd8 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd8) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd8)curly::greasy::hairTest9(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestA) {
  curly::greasy::HairStruct::hairtd9 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd9 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd9) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd9)curly::greasy::hairTestA(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestB) {
  curly::greasy::HairStruct::hairtdA arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtdA result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtdA) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtdA)curly::greasy::hairTestB(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestC) {
  curly::greasy::HairStruct::hair *arg1 = 0 ;
  curly::greasy::HairStruct::hair temp1 ;
  zval **args[1];
  curly::greasy::HairStruct::hair *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  temp1 = (curly::greasy::HairStruct::hair) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  arg1 = &temp1;
  
  result = (curly::greasy::HairStruct::hair *) &curly::greasy::hairTestC((enum curly::greasy::HairStruct::hair const &)*arg1);
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestA1) {
  curly::greasy::HairStruct::hair arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hair result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hair) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hair)curly::hairTestA1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestA2) {
  curly::greasy::HairStruct::hairtd1 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd1)curly::hairTestA2(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestA3) {
  curly::greasy::HairStruct::hairtd2 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd2)curly::hairTestA3(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestA4) {
  curly::greasy::HairStruct::hairtd3 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd3)curly::hairTestA4(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestA5) {
  curly::greasy::HairStruct::hairtd4 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd4) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd4)curly::hairTestA5(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestA6) {
  curly::greasy::HairStruct::hairtd5 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd5) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd5)curly::hairTestA6(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestA7) {
  curly::greasy::HairStruct::hairtd6 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd6 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd6) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd6)curly::hairTestA7(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestA8) {
  curly::greasy::HairStruct::hairtd7 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd7 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd7) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd7)curly::hairTestA8(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestA9) {
  curly::greasy::HairStruct::hairtd8 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd8 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd8) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd8)curly::hairTestA9(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestAA) {
  curly::greasy::HairStruct::hairtd9 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd9 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd9) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd9)curly::hairTestAA(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestAB) {
  curly::greasy::HairStruct::hairtdA arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtdA result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtdA) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtdA)curly::hairTestAB(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestAC) {
  curly::greasy::HairStruct::hairtdA *arg1 = 0 ;
  curly::greasy::HairStruct::hairtdA temp1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtdA *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  temp1 = (curly::greasy::HairStruct::hairtdA) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  arg1 = &temp1;
  
  result = (curly::greasy::HairStruct::hairtdA *) &curly::hairTestAC((enum curly::greasy::HairStruct::hair const &)*arg1);
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestB1) {
  curly::greasy::HairStruct::hair arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hair result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hair) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hair)hairTestB1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestB2) {
  curly::greasy::HairStruct::hairtd1 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd1)hairTestB2(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestB3) {
  curly::greasy::HairStruct::hairtd2 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd2)hairTestB3(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestB4) {
  curly::greasy::HairStruct::hairtd3 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd3)hairTestB4(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestB5) {
  curly::greasy::HairStruct::hairtd4 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd4) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd4)hairTestB5(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestB6) {
  curly::greasy::HairStruct::hairtd5 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd5) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd5)hairTestB6(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestB7) {
  curly::greasy::HairStruct::hairtd6 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd6 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd6) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd6)hairTestB7(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestB8) {
  curly::greasy::HairStruct::hairtd7 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd7 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd7) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd7)hairTestB8(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestB9) {
  curly::greasy::HairStruct::hairtd8 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd8 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd8) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd8)hairTestB9(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestBA) {
  curly::greasy::HairStruct::hairtd9 arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtd9 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtd9) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd9)hairTestBA(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestBB) {
  curly::greasy::HairStruct::hairtdA arg1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtdA result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (curly::greasy::HairStruct::hairtdA) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtdA)hairTestBB(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestBC) {
  curly::greasy::HairStruct::hairtdA *arg1 = 0 ;
  curly::greasy::HairStruct::hairtdA temp1 ;
  zval **args[1];
  curly::greasy::HairStruct::hairtdA *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  temp1 = (curly::greasy::HairStruct::hairtdA) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  arg1 = &temp1;
  
  result = (curly::greasy::HairStruct::hairtdA *) &hairTestBC((enum curly::greasy::HairStruct::hair const &)*arg1);
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestC1) {
  HairStruct::hair arg1 ;
  zval **args[1];
  HairStruct::hair result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (HairStruct::hair) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (HairStruct::hair)hairTestC1(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestC2) {
  HairStruct::hairtd1 arg1 ;
  zval **args[1];
  HairStruct::hairtd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (HairStruct::hairtd1) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (HairStruct::hairtd1)hairTestC2(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestC3) {
  HairStruct::hairtd2 arg1 ;
  zval **args[1];
  HairStruct::hairtd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (HairStruct::hairtd2) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (HairStruct::hairtd2)hairTestC3(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestC4) {
  HairStruct::hairtd3 arg1 ;
  zval **args[1];
  HairStruct::hairtd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (HairStruct::hairtd3) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (HairStruct::hairtd3)hairTestC4(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestC5) {
  HairStruct::hairtd4 arg1 ;
  zval **args[1];
  HairStruct::hairtd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (HairStruct::hairtd4) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (HairStruct::hairtd4)hairTestC5(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestC6) {
  HairStruct::hairtd5 arg1 ;
  zval **args[1];
  HairStruct::hairtd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (HairStruct::hairtd5) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (HairStruct::hairtd5)hairTestC6(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestC7) {
  HairStruct::hairtd6 arg1 ;
  zval **args[1];
  HairStruct::hairtd6 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (HairStruct::hairtd6) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (HairStruct::hairtd6)hairTestC7(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestC8) {
  HairStruct::hairtd7 arg1 ;
  zval **args[1];
  HairStruct::hairtd7 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (HairStruct::hairtd7) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (HairStruct::hairtd7)hairTestC8(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestC9) {
  HairStruct::hairtd8 arg1 ;
  zval **args[1];
  HairStruct::hairtd8 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (HairStruct::hairtd8) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (HairStruct::hairtd8)hairTestC9(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestCA) {
  HairStruct::hairtd9 arg1 ;
  zval **args[1];
  HairStruct::hairtd9 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (HairStruct::hairtd9) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (HairStruct::hairtd9)hairTestCA(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestCB) {
  HairStruct::hairtdA arg1 ;
  zval **args[1];
  HairStruct::hairtdA result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (HairStruct::hairtdA) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (HairStruct::hairtdA)hairTestCB(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_hairTestCC) {
  HairStruct::hairtdA *arg1 = 0 ;
  HairStruct::hairtdA temp1 ;
  zval **args[1];
  HairStruct::hairtdA *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  temp1 = (HairStruct::hairtdA) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  arg1 = &temp1;
  
  result = (HairStruct::hairtdA *) &hairTestCC((enum curly::greasy::HairStruct::hair const &)*arg1);
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_FirStruct_hairTestFir1) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hair arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hair result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__FirStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FirStruct_hairTestFir1. Expected SWIGTYPE_p_curly__greasy__FirStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hair) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hair)(arg1)->hairTestFir1(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_FirStruct_hairTestFir2) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd1 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd1 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__FirStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FirStruct_hairTestFir2. Expected SWIGTYPE_p_curly__greasy__FirStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd1) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd1)(arg1)->hairTestFir2(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_FirStruct_hairTestFir3) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd2 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd2 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__FirStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FirStruct_hairTestFir3. Expected SWIGTYPE_p_curly__greasy__FirStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd2) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd2)(arg1)->hairTestFir3(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_FirStruct_hairTestFir4) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd3 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd3 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__FirStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FirStruct_hairTestFir4. Expected SWIGTYPE_p_curly__greasy__FirStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd3) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd3)(arg1)->hairTestFir4(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_FirStruct_hairTestFir5) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd4 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd4 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__FirStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FirStruct_hairTestFir5. Expected SWIGTYPE_p_curly__greasy__FirStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd4) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd4)(arg1)->hairTestFir5(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_FirStruct_hairTestFir6) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd5 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd5 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__FirStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FirStruct_hairTestFir6. Expected SWIGTYPE_p_curly__greasy__FirStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd5) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd5)(arg1)->hairTestFir6(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_FirStruct_hairTestFir7) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd6 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd6 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__FirStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FirStruct_hairTestFir7. Expected SWIGTYPE_p_curly__greasy__FirStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd6) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd6)(arg1)->hairTestFir7(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_FirStruct_hairTestFir8) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd7 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd7 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__FirStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FirStruct_hairTestFir8. Expected SWIGTYPE_p_curly__greasy__FirStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd7) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd7)(arg1)->hairTestFir8(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_FirStruct_hairTestFir9) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd8 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd8 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__FirStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FirStruct_hairTestFir9. Expected SWIGTYPE_p_curly__greasy__FirStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd8) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd8)(arg1)->hairTestFir9(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_FirStruct_hairTestFirA) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd9 arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtd9 result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__FirStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FirStruct_hairTestFirA. Expected SWIGTYPE_p_curly__greasy__FirStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtd9) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtd9)(arg1)->hairTestFirA(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_FirStruct_hairTestFirB) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtdA arg2 ;
  zval **args[2];
  curly::greasy::HairStruct::hairtdA result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_curly__greasy__FirStruct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of FirStruct_hairTestFirB. Expected SWIGTYPE_p_curly__greasy__FirStruct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (curly::greasy::HairStruct::hairtdA) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (curly::greasy::HairStruct::hairtdA)(arg1)->hairTestFirB(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_FirStruct) {
  curly::greasy::FirStruct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (curly::greasy::FirStruct *)new curly::greasy::FirStruct();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_curly__greasy__FirStruct, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_FirStruct(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (curly::greasy::FirStruct *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_curly__greasy__FirStruct TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "curly::greasy::FirStruct resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_Obscure) {
  Obscure *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (Obscure *)new Obscure();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Obscure, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Obscure(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  Obscure *arg1 = (Obscure *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (Obscure *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_Obscure TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "Obscure resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_GlobalInstance_set) {
  int arg1 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  if (sizeof(int) == sizeof(GlobalInstance)) *(int*)(void*)&(GlobalInstance) = arg1;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_GlobalInstance_get) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)GlobalInstance;
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Instances_MemberInstance_set) {
  Instances *arg1 = (Instances *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Instances, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Instances_MemberInstance_set. Expected SWIGTYPE_p_Instances");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1 && sizeof(int) == sizeof((arg1)->MemberInstance)) *(int*)(void*)&((arg1)->MemberInstance) = arg2;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Instances_MemberInstance_get) {
  Instances *arg1 = (Instances *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Instances, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Instances_MemberInstance_get. Expected SWIGTYPE_p_Instances");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int) ((arg1)->MemberInstance);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_Instances) {
  Instances *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (Instances *)new Instances();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Instances, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Instances(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  Instances *arg1 = (Instances *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (Instances *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_Instances TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "Instances resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_IgnoreTest) {
  IgnoreTest *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (IgnoreTest *)new IgnoreTest();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_IgnoreTest, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_IgnoreTest(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  IgnoreTest *arg1 = (IgnoreTest *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (IgnoreTest *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_IgnoreTest TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "IgnoreTest resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ignoreATest) {
  IgnoreTest::IgnoreA arg1 ;
  zval **args[1];
  IgnoreTest::IgnoreA result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (IgnoreTest::IgnoreA) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (IgnoreTest::IgnoreA)ignoreATest(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ignoreBTest) {
  IgnoreTest::IgnoreB arg1 ;
  zval **args[1];
  IgnoreTest::IgnoreB result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (IgnoreTest::IgnoreB) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (IgnoreTest::IgnoreB)ignoreBTest(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ignoreCTest) {
  IgnoreTest::IgnoreC arg1 ;
  zval **args[1];
  IgnoreTest::IgnoreC result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (IgnoreTest::IgnoreC) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (IgnoreTest::IgnoreC)ignoreCTest(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ignoreDTest) {
  IgnoreTest::IgnoreD arg1 ;
  zval **args[1];
  IgnoreTest::IgnoreD result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (IgnoreTest::IgnoreD) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (IgnoreTest::IgnoreD)ignoreDTest(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ignoreETest) {
  IgnoreTest::IgnoreE arg1 ;
  zval **args[1];
  IgnoreTest::IgnoreE result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (IgnoreTest::IgnoreE) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (IgnoreTest::IgnoreE)ignoreETest(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_repeatTest) {
  RepeatSpace::repeat arg1 ;
  zval **args[1];
  RepeatSpace::repeat result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (RepeatSpace::repeat) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (RepeatSpace::repeat)RepeatSpace::repeatTest(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_differentTypesTest) {
  DifferentSpace::DifferentTypes arg1 ;
  zval **args[1];
  DifferentSpace::DifferentTypes result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (DifferentSpace::DifferentTypes) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (DifferentSpace::DifferentTypes)DifferentSpace::differentTypesTest(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_globalDifferentTypesTest) {
  int arg1 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (int)DifferentSpace::globalDifferentTypesTest(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Instances) {
  __wrap_delete_Instances(rsrc, SWIGTYPE_p_Instances->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_old_name) {
  /* No destructor for simple type _p_old_name */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_SpeedClass) {
  __wrap_delete_SpeedClass(rsrc, SWIGTYPE_p_SpeedClass->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_int) {
  /* No destructor for simple type _int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_TreesClass) {
  __wrap_delete_TreesClass(rsrc, SWIGTYPE_p_TreesClass->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_scientiststd1) {
  /* No destructor for simple type _p_scientiststd1 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_curly__greasy__HairStruct) {
  __wrap_delete_HairStruct(rsrc, SWIGTYPE_p_curly__greasy__HairStruct->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_AnonSpace__AnonStruct) {
  __wrap_delete_AnonStruct(rsrc, SWIGTYPE_p_AnonSpace__AnonStruct->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_curly__greasy__FirStruct) {
  __wrap_delete_FirStruct(rsrc, SWIGTYPE_p_curly__greasy__FirStruct->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_scientiststd2) {
  /* No destructor for simple type _p_scientiststd2 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_speedtd1) {
  /* No destructor for simple type _p_speedtd1 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_scientiststd3) {
  /* No destructor for simple type _p_scientiststd3 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_TemplateClassT_int_t) {
  __wrap_delete_TemplateClassInt(rsrc, SWIGTYPE_p_TemplateClassT_int_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Name__TClassT_int_t) {
  __wrap_delete_TClassInt(rsrc, SWIGTYPE_p_Name__TClassT_int_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_singlename) {
  /* No destructor for simple type _p_singlename */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_namedanon) {
  /* No destructor for simple type _p_namedanon */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_TreesClass__trees) {
  /* No destructor for simple type _p_TreesClass__trees */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_char) {
  /* No destructor for simple type _char */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_hairtd1) {
  /* No destructor for simple type _p_hairtd1 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_hairtd2) {
  /* No destructor for simple type _p_hairtd2 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Obscure) {
  __wrap_delete_Obscure(rsrc, SWIGTYPE_p_Obscure->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_bool) {
  /* No destructor for simple type _bool */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_hairtd3) {
  /* No destructor for simple type _p_hairtd3 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_hairtd4) {
  /* No destructor for simple type _p_hairtd4 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_hairtd5) {
  /* No destructor for simple type _p_hairtd5 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_twonamestag) {
  /* No destructor for simple type _p_twonamestag */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_AnonSpace__namedanonspace) {
  /* No destructor for simple type _p_AnonSpace__namedanonspace */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_hairtd6) {
  /* No destructor for simple type _p_hairtd6 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_AlsoEmpty) {
  /* No destructor for simple type _p_AlsoEmpty */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_hairtd7) {
  /* No destructor for simple type _p_hairtd7 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OldNameStruct) {
  __wrap_delete_NewNameStruct(rsrc, SWIGTYPE_p_OldNameStruct->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_TwoNamesStruct) {
  __wrap_delete_TwoNamesStruct(rsrc, SWIGTYPE_p_TwoNamesStruct->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_RepeatSpace__repeat) {
  /* No destructor for simple type _p_RepeatSpace__repeat */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_hairtd8) {
  /* No destructor for simple type _p_hairtd8 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_hairtd9) {
  /* No destructor for simple type _p_hairtd9 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_treestd1) {
  /* No destructor for simple type _p_treestd1 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_treestd2) {
  /* No destructor for simple type _p_treestd2 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_doublename) {
  /* No destructor for simple type _p_doublename */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_treestd3) {
  /* No destructor for simple type _p_treestd3 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_treestd4) {
  /* No destructor for simple type _p_treestd4 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_treestd5) {
  /* No destructor for simple type _p_treestd5 */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_IgnoreTest) {
  __wrap_delete_IgnoreTest(rsrc, SWIGTYPE_p_IgnoreTest->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_hairtdA) {
  /* No destructor for simple type _p_hairtdA */
  efree(rsrc->ptr);
}
/* end wrapper section */
/* class entry subsection */


/* entry subsection */
/* Every non-class user visible function must have an entry here */
static zend_function_entry enum_thorough_functions[] = {
 SWIG_ZEND_NAMED_FE(new_anonstruct,_wrap_new_AnonStruct,NULL)
 SWIG_ZEND_NAMED_FE(colourtest1,_wrap_colourTest1,NULL)
 SWIG_ZEND_NAMED_FE(colourtest2,_wrap_colourTest2,NULL)
 SWIG_ZEND_NAMED_FE(colourtest3,_wrap_colourTest3,NULL)
 SWIG_ZEND_NAMED_FE(colourtest4,_wrap_colourTest4,NULL)
 SWIG_ZEND_NAMED_FE(mycolour_set,_wrap_myColour_set,NULL)
 SWIG_ZEND_NAMED_FE(mycolour_get,_wrap_myColour_get,NULL)
 SWIG_ZEND_NAMED_FE(speedclass_speedtest0,_wrap_SpeedClass_speedTest0,NULL)
 SWIG_ZEND_NAMED_FE(speedclass_speedtest1,_wrap_SpeedClass_speedTest1,NULL)
 SWIG_ZEND_NAMED_FE(speedclass_speedtest2,_wrap_SpeedClass_speedTest2,NULL)
 SWIG_ZEND_NAMED_FE(speedclass_speedtest3,_wrap_SpeedClass_speedTest3,NULL)
 SWIG_ZEND_NAMED_FE(speedclass_speedtest4,_wrap_SpeedClass_speedTest4,NULL)
 SWIG_ZEND_NAMED_FE(speedclass_speedtest5,_wrap_SpeedClass_speedTest5,NULL)
 SWIG_ZEND_NAMED_FE(speedclass_speedtest6,_wrap_SpeedClass_speedTest6,NULL)
 SWIG_ZEND_NAMED_FE(speedclass_speedtest7,_wrap_SpeedClass_speedTest7,NULL)
 SWIG_ZEND_NAMED_FE(speedclass_speedtest8,_wrap_SpeedClass_speedTest8,NULL)
 SWIG_ZEND_NAMED_FE(speedclass_mycolour2_get,_wrap_SpeedClass_myColour2_get,NULL)
 SWIG_ZEND_NAMED_FE(speedclass_myspeedtd1_set,_wrap_SpeedClass_mySpeedtd1_set,NULL)
 SWIG_ZEND_NAMED_FE(speedclass_myspeedtd1_get,_wrap_SpeedClass_mySpeedtd1_get,NULL)
 SWIG_ZEND_NAMED_FE(new_speedclass,_wrap_new_SpeedClass,NULL)
 SWIG_ZEND_NAMED_FE(speedtest0,_wrap_speedTest0,NULL)
 SWIG_ZEND_NAMED_FE(speedtest1,_wrap_speedTest1,NULL)
 SWIG_ZEND_NAMED_FE(speedtest2,_wrap_speedTest2,NULL)
 SWIG_ZEND_NAMED_FE(speedtest3,_wrap_speedTest3,NULL)
 SWIG_ZEND_NAMED_FE(speedtest4,_wrap_speedTest4,NULL)
 SWIG_ZEND_NAMED_FE(speedtest5,_wrap_speedTest5,NULL)
 SWIG_ZEND_NAMED_FE(namedanontest1,_wrap_namedanonTest1,NULL)
 SWIG_ZEND_NAMED_FE(twonamestest1,_wrap_twonamesTest1,NULL)
 SWIG_ZEND_NAMED_FE(twonamestest2,_wrap_twonamesTest2,NULL)
 SWIG_ZEND_NAMED_FE(twonamestest3,_wrap_twonamesTest3,NULL)
 SWIG_ZEND_NAMED_FE(twonamesstruct_twonamestest1,_wrap_TwoNamesStruct_twonamesTest1,NULL)
 SWIG_ZEND_NAMED_FE(twonamesstruct_twonamestest2,_wrap_TwoNamesStruct_twonamesTest2,NULL)
 SWIG_ZEND_NAMED_FE(twonamesstruct_twonamestest3,_wrap_TwoNamesStruct_twonamesTest3,NULL)
 SWIG_ZEND_NAMED_FE(new_twonamesstruct,_wrap_new_TwoNamesStruct,NULL)
 SWIG_ZEND_NAMED_FE(namedanonspacetest1,_wrap_namedanonspaceTest1,NULL)
 SWIG_ZEND_NAMED_FE(namedanonspacetest2,_wrap_namedanonspaceTest2,NULL)
 SWIG_ZEND_NAMED_FE(namedanonspacetest3,_wrap_namedanonspaceTest3,NULL)
 SWIG_ZEND_NAMED_FE(namedanonspacetest4,_wrap_namedanonspaceTest4,NULL)
 SWIG_ZEND_NAMED_FE(scientiststest1,_wrap_scientistsTest1,NULL)
 SWIG_ZEND_NAMED_FE(scientiststest2,_wrap_scientistsTest2,NULL)
 SWIG_ZEND_NAMED_FE(scientiststest3,_wrap_scientistsTest3,NULL)
 SWIG_ZEND_NAMED_FE(scientiststest4,_wrap_scientistsTest4,NULL)
 SWIG_ZEND_NAMED_FE(scientiststest5,_wrap_scientistsTest5,NULL)
 SWIG_ZEND_NAMED_FE(scientiststest6,_wrap_scientistsTest6,NULL)
 SWIG_ZEND_NAMED_FE(scientiststest7,_wrap_scientistsTest7,NULL)
 SWIG_ZEND_NAMED_FE(scientiststest8,_wrap_scientistsTest8,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnametest1,_wrap_scientistsNameTest1,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnametest2,_wrap_scientistsNameTest2,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnametest3,_wrap_scientistsNameTest3,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnametest4,_wrap_scientistsNameTest4,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnametest5,_wrap_scientistsNameTest5,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnametest6,_wrap_scientistsNameTest6,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnametest7,_wrap_scientistsNameTest7,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetest1,_wrap_scientistsNameSpaceTest1,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetest2,_wrap_scientistsNameSpaceTest2,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetest3,_wrap_scientistsNameSpaceTest3,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetest4,_wrap_scientistsNameSpaceTest4,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetest5,_wrap_scientistsNameSpaceTest5,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetest6,_wrap_scientistsNameSpaceTest6,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetest7,_wrap_scientistsNameSpaceTest7,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetest8,_wrap_scientistsNameSpaceTest8,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetest9,_wrap_scientistsNameSpaceTest9,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetesta,_wrap_scientistsNameSpaceTestA,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetestb,_wrap_scientistsNameSpaceTestB,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetestc,_wrap_scientistsNameSpaceTestC,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetestd,_wrap_scientistsNameSpaceTestD,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespaceteste,_wrap_scientistsNameSpaceTestE,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetestf,_wrap_scientistsNameSpaceTestF,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetestg,_wrap_scientistsNameSpaceTestG,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetesth,_wrap_scientistsNameSpaceTestH,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetesti,_wrap_scientistsNameSpaceTestI,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetestj,_wrap_scientistsNameSpaceTestJ,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetestk,_wrap_scientistsNameSpaceTestK,NULL)
 SWIG_ZEND_NAMED_FE(scientistsnamespacetestl,_wrap_scientistsNameSpaceTestL,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststest1,_wrap_TemplateClassInt_scientistsTest1,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststest2,_wrap_TemplateClassInt_scientistsTest2,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststest3,_wrap_TemplateClassInt_scientistsTest3,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststest4,_wrap_TemplateClassInt_scientistsTest4,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststest5,_wrap_TemplateClassInt_scientistsTest5,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststest6,_wrap_TemplateClassInt_scientistsTest6,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststest7,_wrap_TemplateClassInt_scientistsTest7,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststest8,_wrap_TemplateClassInt_scientistsTest8,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststest9,_wrap_TemplateClassInt_scientistsTest9,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststestb,_wrap_TemplateClassInt_scientistsTestB,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststestd,_wrap_TemplateClassInt_scientistsTestD,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststeste,_wrap_TemplateClassInt_scientistsTestE,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststestf,_wrap_TemplateClassInt_scientistsTestF,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststestg,_wrap_TemplateClassInt_scientistsTestG,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststesth,_wrap_TemplateClassInt_scientistsTestH,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststesti,_wrap_TemplateClassInt_scientistsTestI,NULL)
 SWIG_ZEND_NAMED_FE(templateclassint_scientiststestj,_wrap_TemplateClassInt_scientistsTestJ,NULL)
 SWIG_ZEND_NAMED_FE(new_templateclassint,_wrap_new_TemplateClassInt,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametest1,_wrap_TClassInt_scientistsNameTest1,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametest2,_wrap_TClassInt_scientistsNameTest2,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametest3,_wrap_TClassInt_scientistsNameTest3,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametest4,_wrap_TClassInt_scientistsNameTest4,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametest5,_wrap_TClassInt_scientistsNameTest5,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametest6,_wrap_TClassInt_scientistsNameTest6,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametest7,_wrap_TClassInt_scientistsNameTest7,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametest8,_wrap_TClassInt_scientistsNameTest8,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametest9,_wrap_TClassInt_scientistsNameTest9,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametestb,_wrap_TClassInt_scientistsNameTestB,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametestd,_wrap_TClassInt_scientistsNameTestD,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnameteste,_wrap_TClassInt_scientistsNameTestE,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametestf,_wrap_TClassInt_scientistsNameTestF,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametestg,_wrap_TClassInt_scientistsNameTestG,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametesth,_wrap_TClassInt_scientistsNameTestH,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnametesti,_wrap_TClassInt_scientistsNameTestI,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnamespacetest1,_wrap_TClassInt_scientistsNameSpaceTest1,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnamespacetest2,_wrap_TClassInt_scientistsNameSpaceTest2,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnamespacetest3,_wrap_TClassInt_scientistsNameSpaceTest3,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnamespacetest4,_wrap_TClassInt_scientistsNameSpaceTest4,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnamespacetest5,_wrap_TClassInt_scientistsNameSpaceTest5,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnamespacetest6,_wrap_TClassInt_scientistsNameSpaceTest6,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsnamespacetest7,_wrap_TClassInt_scientistsNameSpaceTest7,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsothertest1,_wrap_TClassInt_scientistsOtherTest1,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsothertest2,_wrap_TClassInt_scientistsOtherTest2,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsothertest3,_wrap_TClassInt_scientistsOtherTest3,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsothertest4,_wrap_TClassInt_scientistsOtherTest4,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsothertest5,_wrap_TClassInt_scientistsOtherTest5,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsothertest6,_wrap_TClassInt_scientistsOtherTest6,NULL)
 SWIG_ZEND_NAMED_FE(tclassint_scientistsothertest7,_wrap_TClassInt_scientistsOtherTest7,NULL)
 SWIG_ZEND_NAMED_FE(new_tclassint,_wrap_new_TClassInt,NULL)
 SWIG_ZEND_NAMED_FE(renametest1,_wrap_renameTest1,NULL)
 SWIG_ZEND_NAMED_FE(renametest2,_wrap_renameTest2,NULL)
 SWIG_ZEND_NAMED_FE(newnamestruct_renametest1,_wrap_NewNameStruct_renameTest1,NULL)
 SWIG_ZEND_NAMED_FE(newnamestruct_renametest2,_wrap_NewNameStruct_renameTest2,NULL)
 SWIG_ZEND_NAMED_FE(newnamestruct_renametest3,_wrap_NewNameStruct_renameTest3,NULL)
 SWIG_ZEND_NAMED_FE(newnamestruct_renametest4,_wrap_NewNameStruct_renameTest4,NULL)
 SWIG_ZEND_NAMED_FE(newnamestruct_renametest5,_wrap_NewNameStruct_renameTest5,NULL)
 SWIG_ZEND_NAMED_FE(newnamestruct_renametest6,_wrap_NewNameStruct_renameTest6,NULL)
 SWIG_ZEND_NAMED_FE(new_newnamestruct,_wrap_new_NewNameStruct,NULL)
 SWIG_ZEND_NAMED_FE(renametest3,_wrap_renameTest3,NULL)
 SWIG_ZEND_NAMED_FE(renametest4,_wrap_renameTest4,NULL)
 SWIG_ZEND_NAMED_FE(renametest5,_wrap_renameTest5,NULL)
 SWIG_ZEND_NAMED_FE(renametest6,_wrap_renameTest6,NULL)
 SWIG_ZEND_NAMED_FE(renametest7,_wrap_renameTest7,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestest1,_wrap_TreesClass_treesTest1,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestest2,_wrap_TreesClass_treesTest2,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestest3,_wrap_TreesClass_treesTest3,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestest4,_wrap_TreesClass_treesTest4,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestest5,_wrap_TreesClass_treesTest5,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestest6,_wrap_TreesClass_treesTest6,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestest7,_wrap_TreesClass_treesTest7,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestest8,_wrap_TreesClass_treesTest8,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestest9,_wrap_TreesClass_treesTest9,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestesta,_wrap_TreesClass_treesTestA,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestestb,_wrap_TreesClass_treesTestB,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestestc,_wrap_TreesClass_treesTestC,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestestd,_wrap_TreesClass_treesTestD,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treesteste,_wrap_TreesClass_treesTestE,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestestf,_wrap_TreesClass_treesTestF,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestestg,_wrap_TreesClass_treesTestG,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestesth,_wrap_TreesClass_treesTestH,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestesti,_wrap_TreesClass_treesTestI,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestestj,_wrap_TreesClass_treesTestJ,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestestk,_wrap_TreesClass_treesTestK,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestestl,_wrap_TreesClass_treesTestL,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestestm,_wrap_TreesClass_treesTestM,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestestn,_wrap_TreesClass_treesTestN,NULL)
 SWIG_ZEND_NAMED_FE(treesclass_treestesto,_wrap_TreesClass_treesTestO,NULL)
 SWIG_ZEND_NAMED_FE(new_treesclass,_wrap_new_TreesClass,NULL)
 SWIG_ZEND_NAMED_FE(treestest1,_wrap_treesTest1,NULL)
 SWIG_ZEND_NAMED_FE(treestest2,_wrap_treesTest2,NULL)
 SWIG_ZEND_NAMED_FE(treestest3,_wrap_treesTest3,NULL)
 SWIG_ZEND_NAMED_FE(treestest4,_wrap_treesTest4,NULL)
 SWIG_ZEND_NAMED_FE(treestest5,_wrap_treesTest5,NULL)
 SWIG_ZEND_NAMED_FE(treestest6,_wrap_treesTest6,NULL)
 SWIG_ZEND_NAMED_FE(treestest7,_wrap_treesTest7,NULL)
 SWIG_ZEND_NAMED_FE(treestest8,_wrap_treesTest8,NULL)
 SWIG_ZEND_NAMED_FE(treestest9,_wrap_treesTest9,NULL)
 SWIG_ZEND_NAMED_FE(treestesta,_wrap_treesTestA,NULL)
 SWIG_ZEND_NAMED_FE(treestestb,_wrap_treesTestB,NULL)
 SWIG_ZEND_NAMED_FE(treestestc,_wrap_treesTestC,NULL)
 SWIG_ZEND_NAMED_FE(treestestd,_wrap_treesTestD,NULL)
 SWIG_ZEND_NAMED_FE(treesteste,_wrap_treesTestE,NULL)
 SWIG_ZEND_NAMED_FE(treestestf,_wrap_treesTestF,NULL)
 SWIG_ZEND_NAMED_FE(treestestg,_wrap_treesTestG,NULL)
 SWIG_ZEND_NAMED_FE(treestesth,_wrap_treesTestH,NULL)
 SWIG_ZEND_NAMED_FE(treestesti,_wrap_treesTestI,NULL)
 SWIG_ZEND_NAMED_FE(treestestj,_wrap_treesTestJ,NULL)
 SWIG_ZEND_NAMED_FE(treestestk,_wrap_treesTestK,NULL)
 SWIG_ZEND_NAMED_FE(treestestl,_wrap_treesTestL,NULL)
 SWIG_ZEND_NAMED_FE(treestestm,_wrap_treesTestM,NULL)
 SWIG_ZEND_NAMED_FE(treestesto,_wrap_treesTestO,NULL)
 SWIG_ZEND_NAMED_FE(treestestp,_wrap_treesTestP,NULL)
 SWIG_ZEND_NAMED_FE(treestestq,_wrap_treesTestQ,NULL)
 SWIG_ZEND_NAMED_FE(treestestr,_wrap_treesTestR,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_hairtest1,_wrap_HairStruct_hairTest1,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_hairtest2,_wrap_HairStruct_hairTest2,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_hairtest3,_wrap_HairStruct_hairTest3,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_hairtest4,_wrap_HairStruct_hairTest4,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_hairtest5,_wrap_HairStruct_hairTest5,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_hairtest6,_wrap_HairStruct_hairTest6,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_hairtest7,_wrap_HairStruct_hairTest7,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_hairtest8,_wrap_HairStruct_hairTest8,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_hairtest9,_wrap_HairStruct_hairTest9,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_hairtesta,_wrap_HairStruct_hairTestA,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_hairtestb,_wrap_HairStruct_hairTestB,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_colourtest1,_wrap_HairStruct_colourTest1,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_colourtest2,_wrap_HairStruct_colourTest2,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_namedanontest1,_wrap_HairStruct_namedanonTest1,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_namedanonspacetest1,_wrap_HairStruct_namedanonspaceTest1,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_treesglobaltest1,_wrap_HairStruct_treesGlobalTest1,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_treesglobaltest2,_wrap_HairStruct_treesGlobalTest2,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_treesglobaltest3,_wrap_HairStruct_treesGlobalTest3,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_treesglobaltest4,_wrap_HairStruct_treesGlobalTest4,NULL)
 SWIG_ZEND_NAMED_FE(hairstruct_treesglobaltest5,_wrap_HairStruct_treesGlobalTest5,NULL)
 SWIG_ZEND_NAMED_FE(new_hairstruct,_wrap_new_HairStruct,NULL)
 SWIG_ZEND_NAMED_FE(hairtest1,_wrap_hairTest1,NULL)
 SWIG_ZEND_NAMED_FE(hairtest2,_wrap_hairTest2,NULL)
 SWIG_ZEND_NAMED_FE(hairtest3,_wrap_hairTest3,NULL)
 SWIG_ZEND_NAMED_FE(hairtest4,_wrap_hairTest4,NULL)
 SWIG_ZEND_NAMED_FE(hairtest5,_wrap_hairTest5,NULL)
 SWIG_ZEND_NAMED_FE(hairtest6,_wrap_hairTest6,NULL)
 SWIG_ZEND_NAMED_FE(hairtest7,_wrap_hairTest7,NULL)
 SWIG_ZEND_NAMED_FE(hairtest8,_wrap_hairTest8,NULL)
 SWIG_ZEND_NAMED_FE(hairtest9,_wrap_hairTest9,NULL)
 SWIG_ZEND_NAMED_FE(hairtesta,_wrap_hairTestA,NULL)
 SWIG_ZEND_NAMED_FE(hairtestb,_wrap_hairTestB,NULL)
 SWIG_ZEND_NAMED_FE(hairtestc,_wrap_hairTestC,NULL)
 SWIG_ZEND_NAMED_FE(hairtesta1,_wrap_hairTestA1,NULL)
 SWIG_ZEND_NAMED_FE(hairtesta2,_wrap_hairTestA2,NULL)
 SWIG_ZEND_NAMED_FE(hairtesta3,_wrap_hairTestA3,NULL)
 SWIG_ZEND_NAMED_FE(hairtesta4,_wrap_hairTestA4,NULL)
 SWIG_ZEND_NAMED_FE(hairtesta5,_wrap_hairTestA5,NULL)
 SWIG_ZEND_NAMED_FE(hairtesta6,_wrap_hairTestA6,NULL)
 SWIG_ZEND_NAMED_FE(hairtesta7,_wrap_hairTestA7,NULL)
 SWIG_ZEND_NAMED_FE(hairtesta8,_wrap_hairTestA8,NULL)
 SWIG_ZEND_NAMED_FE(hairtesta9,_wrap_hairTestA9,NULL)
 SWIG_ZEND_NAMED_FE(hairtestaa,_wrap_hairTestAA,NULL)
 SWIG_ZEND_NAMED_FE(hairtestab,_wrap_hairTestAB,NULL)
 SWIG_ZEND_NAMED_FE(hairtestac,_wrap_hairTestAC,NULL)
 SWIG_ZEND_NAMED_FE(hairtestb1,_wrap_hairTestB1,NULL)
 SWIG_ZEND_NAMED_FE(hairtestb2,_wrap_hairTestB2,NULL)
 SWIG_ZEND_NAMED_FE(hairtestb3,_wrap_hairTestB3,NULL)
 SWIG_ZEND_NAMED_FE(hairtestb4,_wrap_hairTestB4,NULL)
 SWIG_ZEND_NAMED_FE(hairtestb5,_wrap_hairTestB5,NULL)
 SWIG_ZEND_NAMED_FE(hairtestb6,_wrap_hairTestB6,NULL)
 SWIG_ZEND_NAMED_FE(hairtestb7,_wrap_hairTestB7,NULL)
 SWIG_ZEND_NAMED_FE(hairtestb8,_wrap_hairTestB8,NULL)
 SWIG_ZEND_NAMED_FE(hairtestb9,_wrap_hairTestB9,NULL)
 SWIG_ZEND_NAMED_FE(hairtestba,_wrap_hairTestBA,NULL)
 SWIG_ZEND_NAMED_FE(hairtestbb,_wrap_hairTestBB,NULL)
 SWIG_ZEND_NAMED_FE(hairtestbc,_wrap_hairTestBC,NULL)
 SWIG_ZEND_NAMED_FE(hairtestc1,_wrap_hairTestC1,NULL)
 SWIG_ZEND_NAMED_FE(hairtestc2,_wrap_hairTestC2,NULL)
 SWIG_ZEND_NAMED_FE(hairtestc3,_wrap_hairTestC3,NULL)
 SWIG_ZEND_NAMED_FE(hairtestc4,_wrap_hairTestC4,NULL)
 SWIG_ZEND_NAMED_FE(hairtestc5,_wrap_hairTestC5,NULL)
 SWIG_ZEND_NAMED_FE(hairtestc6,_wrap_hairTestC6,NULL)
 SWIG_ZEND_NAMED_FE(hairtestc7,_wrap_hairTestC7,NULL)
 SWIG_ZEND_NAMED_FE(hairtestc8,_wrap_hairTestC8,NULL)
 SWIG_ZEND_NAMED_FE(hairtestc9,_wrap_hairTestC9,NULL)
 SWIG_ZEND_NAMED_FE(hairtestca,_wrap_hairTestCA,NULL)
 SWIG_ZEND_NAMED_FE(hairtestcb,_wrap_hairTestCB,NULL)
 SWIG_ZEND_NAMED_FE(hairtestcc,_wrap_hairTestCC,NULL)
 SWIG_ZEND_NAMED_FE(firstruct_hairtestfir1,_wrap_FirStruct_hairTestFir1,NULL)
 SWIG_ZEND_NAMED_FE(firstruct_hairtestfir2,_wrap_FirStruct_hairTestFir2,NULL)
 SWIG_ZEND_NAMED_FE(firstruct_hairtestfir3,_wrap_FirStruct_hairTestFir3,NULL)
 SWIG_ZEND_NAMED_FE(firstruct_hairtestfir4,_wrap_FirStruct_hairTestFir4,NULL)
 SWIG_ZEND_NAMED_FE(firstruct_hairtestfir5,_wrap_FirStruct_hairTestFir5,NULL)
 SWIG_ZEND_NAMED_FE(firstruct_hairtestfir6,_wrap_FirStruct_hairTestFir6,NULL)
 SWIG_ZEND_NAMED_FE(firstruct_hairtestfir7,_wrap_FirStruct_hairTestFir7,NULL)
 SWIG_ZEND_NAMED_FE(firstruct_hairtestfir8,_wrap_FirStruct_hairTestFir8,NULL)
 SWIG_ZEND_NAMED_FE(firstruct_hairtestfir9,_wrap_FirStruct_hairTestFir9,NULL)
 SWIG_ZEND_NAMED_FE(firstruct_hairtestfira,_wrap_FirStruct_hairTestFirA,NULL)
 SWIG_ZEND_NAMED_FE(firstruct_hairtestfirb,_wrap_FirStruct_hairTestFirB,NULL)
 SWIG_ZEND_NAMED_FE(new_firstruct,_wrap_new_FirStruct,NULL)
 SWIG_ZEND_NAMED_FE(new_obscure,_wrap_new_Obscure,NULL)
 SWIG_ZEND_NAMED_FE(globalinstance_set,_wrap_GlobalInstance_set,NULL)
 SWIG_ZEND_NAMED_FE(globalinstance_get,_wrap_GlobalInstance_get,NULL)
 SWIG_ZEND_NAMED_FE(instances_memberinstance_set,_wrap_Instances_MemberInstance_set,NULL)
 SWIG_ZEND_NAMED_FE(instances_memberinstance_get,_wrap_Instances_MemberInstance_get,NULL)
 SWIG_ZEND_NAMED_FE(new_instances,_wrap_new_Instances,NULL)
 SWIG_ZEND_NAMED_FE(new_ignoretest,_wrap_new_IgnoreTest,NULL)
 SWIG_ZEND_NAMED_FE(ignoreatest,_wrap_ignoreATest,NULL)
 SWIG_ZEND_NAMED_FE(ignorebtest,_wrap_ignoreBTest,NULL)
 SWIG_ZEND_NAMED_FE(ignorectest,_wrap_ignoreCTest,NULL)
 SWIG_ZEND_NAMED_FE(ignoredtest,_wrap_ignoreDTest,NULL)
 SWIG_ZEND_NAMED_FE(ignoreetest,_wrap_ignoreETest,NULL)
 SWIG_ZEND_NAMED_FE(repeattest,_wrap_repeatTest,NULL)
 SWIG_ZEND_NAMED_FE(differenttypestest,_wrap_differentTypesTest,NULL)
 SWIG_ZEND_NAMED_FE(globaldifferenttypestest,_wrap_globalDifferentTypesTest,NULL)
 SWIG_ZEND_NAMED_FE(swig_enum_thorough_alter_newobject,_wrap_swig_enum_thorough_alter_newobject,NULL)
 SWIG_ZEND_NAMED_FE(swig_enum_thorough_get_newobject,_wrap_swig_enum_thorough_get_newobject,NULL)
{NULL, NULL, NULL}
};

/* init section */
#if ZEND_MODULE_API_NO <= 20090626
#undef ZEND_MODULE_BUILD_ID
#define ZEND_MODULE_BUILD_ID (char*)"API" ZEND_TOSTR(ZEND_MODULE_API_NO) ZEND_BUILD_TS ZEND_BUILD_DEBUG ZEND_BUILD_SYSTEM ZEND_BUILD_EXTRA
#endif
zend_module_entry enum_thorough_module_entry = {
    STANDARD_MODULE_HEADER,
    (char*)"enum_thorough",
    enum_thorough_functions,
    PHP_MINIT(enum_thorough),
    PHP_MSHUTDOWN(enum_thorough),
    PHP_RINIT(enum_thorough),
    PHP_RSHUTDOWN(enum_thorough),
    PHP_MINFO(enum_thorough),
    NO_VERSION_YET,
    STANDARD_MODULE_PROPERTIES
};
zend_module_entry* SWIG_module_entry = &enum_thorough_module_entry;

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT zend_module_entry *get_module(void) { return &enum_thorough_module_entry; }
#ifdef __cplusplus
}
#endif

#define SWIG_php_minit PHP_MINIT_FUNCTION(enum_thorough)
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


  SWIG_php_minit {
    SWIG_InitializeModule(0);

/* oinit subsection */
ZEND_INIT_MODULE_GLOBALS(enum_thorough, enum_thorough_init_globals, enum_thorough_destroy_globals);

/* Register resource destructors for pointer types */
le_swig__p_Instances=zend_register_list_destructors_ex(_wrap_destroy_p_Instances,NULL,(char *)(SWIGTYPE_p_Instances->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Instances,&le_swig__p_Instances);
le_swig__p_old_name=zend_register_list_destructors_ex(_wrap_destroy_p_old_name,NULL,(char *)(SWIGTYPE_p_old_name->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_old_name,&le_swig__p_old_name);
le_swig__p_SpeedClass=zend_register_list_destructors_ex(_wrap_destroy_p_SpeedClass,NULL,(char *)(SWIGTYPE_p_SpeedClass->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_SpeedClass,&le_swig__p_SpeedClass);
le_swig__int=zend_register_list_destructors_ex(_wrap_destroy_int,NULL,(char *)(SWIGTYPE_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_int,&le_swig__int);
le_swig__p_TreesClass=zend_register_list_destructors_ex(_wrap_destroy_p_TreesClass,NULL,(char *)(SWIGTYPE_p_TreesClass->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_TreesClass,&le_swig__p_TreesClass);
le_swig__p_scientiststd1=zend_register_list_destructors_ex(_wrap_destroy_p_scientiststd1,NULL,(char *)(SWIGTYPE_p_scientiststd1->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_scientiststd1,&le_swig__p_scientiststd1);
le_swig__p_curly__greasy__HairStruct=zend_register_list_destructors_ex(_wrap_destroy_p_curly__greasy__HairStruct,NULL,(char *)(SWIGTYPE_p_curly__greasy__HairStruct->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_curly__greasy__HairStruct,&le_swig__p_curly__greasy__HairStruct);
le_swig__p_AnonSpace__AnonStruct=zend_register_list_destructors_ex(_wrap_destroy_p_AnonSpace__AnonStruct,NULL,(char *)(SWIGTYPE_p_AnonSpace__AnonStruct->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_AnonSpace__AnonStruct,&le_swig__p_AnonSpace__AnonStruct);
le_swig__p_curly__greasy__FirStruct=zend_register_list_destructors_ex(_wrap_destroy_p_curly__greasy__FirStruct,NULL,(char *)(SWIGTYPE_p_curly__greasy__FirStruct->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_curly__greasy__FirStruct,&le_swig__p_curly__greasy__FirStruct);
le_swig__p_scientiststd2=zend_register_list_destructors_ex(_wrap_destroy_p_scientiststd2,NULL,(char *)(SWIGTYPE_p_scientiststd2->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_scientiststd2,&le_swig__p_scientiststd2);
le_swig__p_speedtd1=zend_register_list_destructors_ex(_wrap_destroy_p_speedtd1,NULL,(char *)(SWIGTYPE_p_speedtd1->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_speedtd1,&le_swig__p_speedtd1);
le_swig__p_scientiststd3=zend_register_list_destructors_ex(_wrap_destroy_p_scientiststd3,NULL,(char *)(SWIGTYPE_p_scientiststd3->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_scientiststd3,&le_swig__p_scientiststd3);
le_swig__p_TemplateClassT_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_TemplateClassT_int_t,NULL,(char *)(SWIGTYPE_p_TemplateClassT_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_TemplateClassT_int_t,&le_swig__p_TemplateClassT_int_t);
le_swig__p_Name__TClassT_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_Name__TClassT_int_t,NULL,(char *)(SWIGTYPE_p_Name__TClassT_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Name__TClassT_int_t,&le_swig__p_Name__TClassT_int_t);
le_swig__p_singlename=zend_register_list_destructors_ex(_wrap_destroy_p_singlename,NULL,(char *)(SWIGTYPE_p_singlename->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_singlename,&le_swig__p_singlename);
le_swig__p_namedanon=zend_register_list_destructors_ex(_wrap_destroy_p_namedanon,NULL,(char *)(SWIGTYPE_p_namedanon->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_namedanon,&le_swig__p_namedanon);
le_swig__p_TreesClass__trees=zend_register_list_destructors_ex(_wrap_destroy_p_TreesClass__trees,NULL,(char *)(SWIGTYPE_p_TreesClass__trees->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_TreesClass__trees,&le_swig__p_TreesClass__trees);
le_swig__char=zend_register_list_destructors_ex(_wrap_destroy_char,NULL,(char *)(SWIGTYPE_char->name),module_number);
SWIG_TypeClientData(SWIGTYPE_char,&le_swig__char);
le_swig__p_hairtd1=zend_register_list_destructors_ex(_wrap_destroy_p_hairtd1,NULL,(char *)(SWIGTYPE_p_hairtd1->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_hairtd1,&le_swig__p_hairtd1);
le_swig__p_hairtd2=zend_register_list_destructors_ex(_wrap_destroy_p_hairtd2,NULL,(char *)(SWIGTYPE_p_hairtd2->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_hairtd2,&le_swig__p_hairtd2);
le_swig__p_Obscure=zend_register_list_destructors_ex(_wrap_destroy_p_Obscure,NULL,(char *)(SWIGTYPE_p_Obscure->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Obscure,&le_swig__p_Obscure);
le_swig__bool=zend_register_list_destructors_ex(_wrap_destroy_bool,NULL,(char *)(SWIGTYPE_bool->name),module_number);
SWIG_TypeClientData(SWIGTYPE_bool,&le_swig__bool);
le_swig__p_hairtd3=zend_register_list_destructors_ex(_wrap_destroy_p_hairtd3,NULL,(char *)(SWIGTYPE_p_hairtd3->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_hairtd3,&le_swig__p_hairtd3);
le_swig__p_hairtd4=zend_register_list_destructors_ex(_wrap_destroy_p_hairtd4,NULL,(char *)(SWIGTYPE_p_hairtd4->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_hairtd4,&le_swig__p_hairtd4);
le_swig__p_hairtd5=zend_register_list_destructors_ex(_wrap_destroy_p_hairtd5,NULL,(char *)(SWIGTYPE_p_hairtd5->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_hairtd5,&le_swig__p_hairtd5);
le_swig__p_twonamestag=zend_register_list_destructors_ex(_wrap_destroy_p_twonamestag,NULL,(char *)(SWIGTYPE_p_twonamestag->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_twonamestag,&le_swig__p_twonamestag);
le_swig__p_AnonSpace__namedanonspace=zend_register_list_destructors_ex(_wrap_destroy_p_AnonSpace__namedanonspace,NULL,(char *)(SWIGTYPE_p_AnonSpace__namedanonspace->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_AnonSpace__namedanonspace,&le_swig__p_AnonSpace__namedanonspace);
le_swig__p_hairtd6=zend_register_list_destructors_ex(_wrap_destroy_p_hairtd6,NULL,(char *)(SWIGTYPE_p_hairtd6->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_hairtd6,&le_swig__p_hairtd6);
le_swig__p_AlsoEmpty=zend_register_list_destructors_ex(_wrap_destroy_p_AlsoEmpty,NULL,(char *)(SWIGTYPE_p_AlsoEmpty->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_AlsoEmpty,&le_swig__p_AlsoEmpty);
le_swig__p_hairtd7=zend_register_list_destructors_ex(_wrap_destroy_p_hairtd7,NULL,(char *)(SWIGTYPE_p_hairtd7->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_hairtd7,&le_swig__p_hairtd7);
le_swig__p_OldNameStruct=zend_register_list_destructors_ex(_wrap_destroy_p_OldNameStruct,NULL,(char *)(SWIGTYPE_p_OldNameStruct->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OldNameStruct,&le_swig__p_OldNameStruct);
le_swig__p_TwoNamesStruct=zend_register_list_destructors_ex(_wrap_destroy_p_TwoNamesStruct,NULL,(char *)(SWIGTYPE_p_TwoNamesStruct->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_TwoNamesStruct,&le_swig__p_TwoNamesStruct);
le_swig__p_RepeatSpace__repeat=zend_register_list_destructors_ex(_wrap_destroy_p_RepeatSpace__repeat,NULL,(char *)(SWIGTYPE_p_RepeatSpace__repeat->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_RepeatSpace__repeat,&le_swig__p_RepeatSpace__repeat);
le_swig__p_hairtd8=zend_register_list_destructors_ex(_wrap_destroy_p_hairtd8,NULL,(char *)(SWIGTYPE_p_hairtd8->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_hairtd8,&le_swig__p_hairtd8);
le_swig__p_hairtd9=zend_register_list_destructors_ex(_wrap_destroy_p_hairtd9,NULL,(char *)(SWIGTYPE_p_hairtd9->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_hairtd9,&le_swig__p_hairtd9);
le_swig__p_treestd1=zend_register_list_destructors_ex(_wrap_destroy_p_treestd1,NULL,(char *)(SWIGTYPE_p_treestd1->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_treestd1,&le_swig__p_treestd1);
le_swig__p_treestd2=zend_register_list_destructors_ex(_wrap_destroy_p_treestd2,NULL,(char *)(SWIGTYPE_p_treestd2->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_treestd2,&le_swig__p_treestd2);
le_swig__p_doublename=zend_register_list_destructors_ex(_wrap_destroy_p_doublename,NULL,(char *)(SWIGTYPE_p_doublename->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_doublename,&le_swig__p_doublename);
le_swig__p_treestd3=zend_register_list_destructors_ex(_wrap_destroy_p_treestd3,NULL,(char *)(SWIGTYPE_p_treestd3->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_treestd3,&le_swig__p_treestd3);
le_swig__p_treestd4=zend_register_list_destructors_ex(_wrap_destroy_p_treestd4,NULL,(char *)(SWIGTYPE_p_treestd4->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_treestd4,&le_swig__p_treestd4);
le_swig__p_treestd5=zend_register_list_destructors_ex(_wrap_destroy_p_treestd5,NULL,(char *)(SWIGTYPE_p_treestd5->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_treestd5,&le_swig__p_treestd5);
le_swig__p_IgnoreTest=zend_register_list_destructors_ex(_wrap_destroy_p_IgnoreTest,NULL,(char *)(SWIGTYPE_p_IgnoreTest->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_IgnoreTest,&le_swig__p_IgnoreTest);
le_swig__p_hairtdA=zend_register_list_destructors_ex(_wrap_destroy_p_hairtdA,NULL,(char *)(SWIGTYPE_p_hairtdA->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_hairtdA,&le_swig__p_hairtdA);
CG(active_class_entry) = NULL;
/* end oinit subsection */

/* cinit subsection */
SWIG_LONG_CONSTANT(AnonEnum1, AnonEnum1);
SWIG_LONG_CONSTANT(AnonEnum2, AnonEnum2);
SWIG_LONG_CONSTANT(ReallyAnInteger, ReallyAnInteger);
SWIG_LONG_CONSTANT(AnonSpaceEnum1, AnonSpace::AnonSpaceEnum1);
SWIG_LONG_CONSTANT(AnonSpaceEnum2, AnonSpace::AnonSpaceEnum2);
SWIG_LONG_CONSTANT(AnonStruct_AnonStructEnum1, AnonSpace::AnonStruct::AnonStructEnum1);
SWIG_LONG_CONSTANT(AnonStruct_AnonStructEnum2, AnonSpace::AnonStruct::AnonStructEnum2);
SWIG_LONG_CONSTANT(red, red);
SWIG_LONG_CONSTANT(blue, blue);
SWIG_LONG_CONSTANT(green, green);
SWIG_LONG_CONSTANT(SpeedClass_slow, SpeedClass::slow);
SWIG_LONG_CONSTANT(SpeedClass_medium, SpeedClass::medium);
SWIG_LONG_CONSTANT(SpeedClass_fast, SpeedClass::fast);
SWIG_LONG_CONSTANT(SpeedClass_lightning, SpeedClass::lightning);
SWIG_LONG_CONSTANT(NamedAnon1, NamedAnon1);
SWIG_LONG_CONSTANT(NamedAnon2, NamedAnon2);
SWIG_LONG_CONSTANT(TwoNames1, TwoNames1);
SWIG_LONG_CONSTANT(TwoNames2, TwoNames2);
SWIG_LONG_CONSTANT(TwoNames3, TwoNames3);
SWIG_LONG_CONSTANT(TwoNamesStruct_TwoNamesStruct1, TwoNamesStruct::TwoNamesStruct1);
SWIG_LONG_CONSTANT(TwoNamesStruct_TwoNamesStruct2, TwoNamesStruct::TwoNamesStruct2);
SWIG_LONG_CONSTANT(NamedAnonSpace1, AnonSpace::NamedAnonSpace1);
SWIG_LONG_CONSTANT(NamedAnonSpace2, AnonSpace::NamedAnonSpace2);
SWIG_LONG_CONSTANT(TemplateClassInt_einstein, TemplateClass< int >::einstein);
SWIG_LONG_CONSTANT(TemplateClassInt_galileo, TemplateClass< int >::galileo);
SWIG_LONG_CONSTANT(TClassInt_faraday, Name::TClass< int >::faraday);
SWIG_LONG_CONSTANT(TClassInt_bell, Name::TClass< int >::bell);
SWIG_LONG_CONSTANT(argh, argh);
SWIG_LONG_CONSTANT(eek, eek);
SWIG_LONG_CONSTANT(NewNameStruct_whizz, OldNameStruct::whizz);
SWIG_LONG_CONSTANT(NewNameStruct_bang, OldNameStruct::kerboom);
SWIG_LONG_CONSTANT(NewNameStruct_pop, OldNameStruct::pop);
SWIG_LONG_CONSTANT(NewNameStruct_simple1, OldNameStruct::simple1);
SWIG_LONG_CONSTANT(NewNameStruct_doublename1, OldNameStruct::doublename1);
SWIG_LONG_CONSTANT(NewNameStruct_singlename1, OldNameStruct::singlename1);
SWIG_LONG_CONSTANT(TreesClass_oak, TreesClass::oak);
SWIG_LONG_CONSTANT(TreesClass_fir, TreesClass::fir);
SWIG_LONG_CONSTANT(TreesClass_pine, TreesClass::pine);
SWIG_LONG_CONSTANT(HairStruct_blonde, curly::greasy::HairStruct::blonde);
SWIG_LONG_CONSTANT(HairStruct_ginger, curly::greasy::HairStruct::ginger);
SWIG_LONG_CONSTANT(Obscure_one, Obscure::one);
SWIG_LONG_CONSTANT(Obscure_two, Obscure::two);
SWIG_LONG_CONSTANT(Obscure_twoagain, Obscure::twoagain);
SWIG_LONG_CONSTANT(globalinstance1, globalinstance1);
SWIG_LONG_CONSTANT(globalinstance2, globalinstance2);
SWIG_LONG_CONSTANT(globalinstance3, globalinstance3);
SWIG_LONG_CONSTANT(Instances_memberinstance1, Instances::memberinstance1);
SWIG_LONG_CONSTANT(Instances_memberinstance2, Instances::memberinstance2);
SWIG_LONG_CONSTANT(Instances_memberinstance3, Instances::memberinstance3);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreA_zero, IgnoreTest::ignoreA_zero);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreA_three, IgnoreTest::ignoreA_three);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreA_ten, IgnoreTest::ignoreA_ten);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreA_eleven, IgnoreTest::ignoreA_eleven);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreA_thirteen, IgnoreTest::ignoreA_thirteen);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreA_fourteen, IgnoreTest::ignoreA_fourteen);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreA_twenty, IgnoreTest::ignoreA_twenty);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreA_thirty, IgnoreTest::ignoreA_thirty);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreA_thirty_two, IgnoreTest::ignoreA_thirty_two);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreA_thirty_three, IgnoreTest::ignoreA_thirty_three);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreB_eleven, IgnoreTest::ignoreB_eleven);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreB_twelve, IgnoreTest::ignoreB_twelve);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreB_thirty_one, IgnoreTest::ignoreB_thirty_one);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreB_thirty_two, IgnoreTest::ignoreB_thirty_two);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreB_forty_one, IgnoreTest::ignoreB_forty_one);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreB_forty_two, IgnoreTest::ignoreB_forty_two);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreC_ten, IgnoreTest::ignoreC_ten);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreC_twelve, IgnoreTest::ignoreC_twelve);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreC_twenty, IgnoreTest::ignoreC_twenty);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreC_thirty, IgnoreTest::ignoreC_thirty);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreC_thirty_two, IgnoreTest::ignoreC_thirty_two);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreC_forty, IgnoreTest::ignoreC_forty);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreC_forty_two, IgnoreTest::ignoreC_forty_two);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreD_twenty_one, IgnoreTest::ignoreD_twenty_one);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreD_twenty_two, IgnoreTest::ignoreD_twenty_two);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreE_zero, IgnoreTest::ignoreE_zero);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreE_twenty_one, IgnoreTest::ignoreE_twenty_one);
SWIG_LONG_CONSTANT(IgnoreTest_ignoreE_twenty_two, IgnoreTest::ignoreE_twenty_two);
SWIG_LONG_CONSTANT(one, RepeatSpace::one);
SWIG_LONG_CONSTANT(initial, RepeatSpace::initial);
SWIG_LONG_CONSTANT(two, RepeatSpace::two);
SWIG_LONG_CONSTANT(three, RepeatSpace::three);
SWIG_LONG_CONSTANT(llast, RepeatSpace::llast);
SWIG_LONG_CONSTANT(end, RepeatSpace::end);
SWIG_LONG_CONSTANT(typeint, DifferentSpace::typeint);
SWIG_LONG_CONSTANT(typeboolfalse, DifferentSpace::typeboolfalse);
SWIG_LONG_CONSTANT(typebooltrue, DifferentSpace::typebooltrue);
SWIG_LONG_CONSTANT(typebooltwo, DifferentSpace::typebooltwo);
SWIG_CHAR_CONSTANT(typechar, DifferentSpace::typechar);
SWIG_LONG_CONSTANT(typedefaultint, DifferentSpace::typedefaultint);
SWIG_LONG_CONSTANT(global_typeint, DifferentSpace::global_typeint);
SWIG_LONG_CONSTANT(global_typeboolfalse, DifferentSpace::global_typeboolfalse);
SWIG_LONG_CONSTANT(global_typebooltrue, DifferentSpace::global_typebooltrue);
SWIG_LONG_CONSTANT(global_typebooltwo, DifferentSpace::global_typebooltwo);
SWIG_CHAR_CONSTANT(global_typechar, DifferentSpace::global_typechar);
SWIG_LONG_CONSTANT(global_typedefaultint, DifferentSpace::global_typedefaultint);
SWIG_LONG_CONSTANT(typeint_noconst, DifferentSpace::typeint_noconst);
SWIG_LONG_CONSTANT(typeboolfalse_noconst, DifferentSpace::typeboolfalse_noconst);
SWIG_LONG_CONSTANT(typebooltrue_noconst, DifferentSpace::typebooltrue_noconst);
SWIG_LONG_CONSTANT(typebooltwo_noconst, DifferentSpace::typebooltwo_noconst);
SWIG_CHAR_CONSTANT(typechar_noconst, DifferentSpace::typechar_noconst);
SWIG_LONG_CONSTANT(typedefaultint_noconst, DifferentSpace::typedefaultint_noconst);
SWIG_LONG_CONSTANT(global_typeint_noconst, DifferentSpace::global_typeint_noconst);
SWIG_LONG_CONSTANT(global_typeboolfalse_noconst, DifferentSpace::global_typeboolfalse_noconst);
SWIG_LONG_CONSTANT(global_typebooltrue_noconst, DifferentSpace::global_typebooltrue_noconst);
SWIG_LONG_CONSTANT(global_typebooltwo_noconst, DifferentSpace::global_typebooltwo_noconst);
SWIG_CHAR_CONSTANT(global_typechar_noconst, DifferentSpace::global_typechar_noconst);
SWIG_LONG_CONSTANT(global_typedefaultint_noconst, DifferentSpace::global_typedefaultint_noconst);
/* end cinit subsection */

    return SUCCESS;
}

PHP_RINIT_FUNCTION(enum_thorough)
{
/* rinit section */

/* vinit subsection */
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  z_var->type = IS_LONG;
  z_var->value.lval = myColour;
  zend_hash_add(&EG(symbol_table), (char*)"myColour", sizeof("myColour"), (void *)&z_var, sizeof(zval *), NULL);
}
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  z_var->type = IS_LONG;
  z_var->value.lval = GlobalInstance;
  zend_hash_add(&EG(symbol_table), (char*)"GlobalInstance", sizeof("GlobalInstance"), (void *)&z_var, sizeof(zval *), NULL);
}
/* end vinit subsection */

    return SUCCESS;
}

PHP_MSHUTDOWN_FUNCTION(enum_thorough)
{
/* shutdown section */
#ifdef ZTS
    ts_free_id(enum_thorough_globals_id);
#endif
    return SUCCESS;
}

PHP_RSHUTDOWN_FUNCTION(enum_thorough)
{
/* rshutdown section */

    return SUCCESS;
}

PHP_MINFO_FUNCTION(enum_thorough)
{
}
/* end init section */
