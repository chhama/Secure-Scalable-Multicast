<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('primitive_ref')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_primitive_ref.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('primitive_ref.so')) return;
    } else {
      if (!dl('primitive_ref.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class primitive_ref {
	static function ref_int($x) {
		return ref_int($x);
	}

	static function ref_uint($x) {
		return ref_uint($x);
	}

	static function ref_short($x) {
		return ref_short($x);
	}

	static function ref_ushort($x) {
		return ref_ushort($x);
	}

	static function ref_long($x) {
		return ref_long($x);
	}

	static function ref_ulong($x) {
		return ref_ulong($x);
	}

	static function ref_schar($x) {
		return ref_schar($x);
	}

	static function ref_uchar($x) {
		return ref_uchar($x);
	}

	static function ref_char($x) {
		return ref_char($x);
	}

	static function ref_float($x) {
		return ref_float($x);
	}

	static function ref_double($x) {
		return ref_double($x);
	}

	static function ref_bool($x) {
		return ref_bool($x);
	}

	static function ref_longlong($x) {
		return ref_longlong($x);
	}

	static function ref_ulonglong($x) {
		return ref_ulonglong($x);
	}

	static function ref_over($a) {
		return ref_over($a);
	}
}

/* PHP Proxy Classes */
class A {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'v') return A_v_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_primitive_ref_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('A_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'v') return A_v_get($this->_cPtr);
		if ($var === 'thisown') return swig_primitive_ref_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($V) {
		if (is_resource($V) && get_resource_type($V) === '_p_A') {
			$this->_cPtr=$V;
			return;
		}
		$this->_cPtr=new_A($V);
	}
}


?>
