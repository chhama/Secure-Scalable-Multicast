<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('typemap_various')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_typemap_various.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('typemap_various.so')) return;
    } else {
      if (!dl('typemap_various.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class typemap_various {
	static function foo1($f,$ff) {
		foo1($f,$ff);
	}

	static function foo2($f,$ff) {
		foo2($f,$ff);
	}
}

/* PHP Proxy Classes */
class FooInt {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_typemap_various_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_typemap_various_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_FooT_int_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_FooInt();
	}
}

class Bar1 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_typemap_various_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_typemap_various_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function foo() {
		return Bar1_foo($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Bar1') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Bar1();
	}
}

class Bar2 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_typemap_various_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_typemap_various_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function foo() {
		return Bar2_foo($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Bar2') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Bar2();
	}
}

class FFoo {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_typemap_various_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_typemap_various_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function Bar($b) {
		return FFoo_Bar($this->_cPtr,$b);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_FFoo') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_FFoo();
	}
}

class ABCD {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_typemap_various_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_typemap_various_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function meth() {
		return ABCD_meth($this->_cPtr);
	}

	function m1() {
		return ABCD_m1($this->_cPtr);
	}

	function _x2() {
		return ABCD__x2($this->_cPtr);
	}

	function y_() {
		return ABCD_y_($this->_cPtr);
	}

	function _3() {
		return ABCD__3($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ABCD') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_ABCD();
	}
}


?>
