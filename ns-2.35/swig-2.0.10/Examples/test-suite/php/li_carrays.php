<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('li_carrays')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_li_carrays.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('li_carrays.so')) return;
    } else {
      if (!dl('li_carrays.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class li_carrays {
	static function new_intArray($nelements) {
		return new_intArray($nelements);
	}

	static function delete_intArray($ary) {
		delete_intArray($ary);
	}

	static function intArray_getitem($ary,$index) {
		return intArray_getitem($ary,$index);
	}

	static function intArray_setitem($ary,$index,$value) {
		intArray_setitem($ary,$index,$value);
	}

	static function globalXYArray_set($globalXYArray) {
		globalXYArray_set($globalXYArray);
	}

	static function globalXYArray_get() {
		$r=globalXYArray_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new XY($r);
		}
		return $r;
	}

	static function globalABArray_set($globalABArray) {
		globalABArray_set($globalABArray);
	}

	static function globalABArray_get() {
		$r=globalABArray_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AB($r);
		}
		return $r;
	}

	static function new_ABArray($nelements) {
		$r=new_ABArray($nelements);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AB($r);
		}
		return $r;
	}

	static function delete_ABArray($ary) {
		delete_ABArray($ary);
	}

	static function ABArray_getitem($ary,$index) {
		$r=ABArray_getitem($ary,$index);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AB($r);
		}
		return $r;
	}

	static function ABArray_setitem($ary,$index,$value) {
		ABArray_setitem($ary,$index,$value);
	}
}

/* PHP Proxy Classes */
class doubleArray {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_li_carrays_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_li_carrays_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($nelements) {
		if (is_resource($nelements) && get_resource_type($nelements) === '_p_doubleArray') {
			$this->_cPtr=$nelements;
			return;
		}
		$this->_cPtr=new_doubleArray($nelements);
	}

	function getitem($index) {
		return doubleArray_getitem($this->_cPtr,$index);
	}

	function setitem($index,$value) {
		doubleArray_setitem($this->_cPtr,$index,$value);
	}

	function cast() {
		return doubleArray_cast($this->_cPtr);
	}

	static function frompointer($t) {
		$r=doubleArray_frompointer($t);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new doubleArray($r);
		}
		return $r;
	}
}

class XY {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'x') return XY_x_set($this->_cPtr,$value);
		if ($var === 'y') return XY_y_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_carrays_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('XY_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'x') return XY_x_get($this->_cPtr);
		if ($var === 'y') return XY_y_get($this->_cPtr);
		if ($var === 'thisown') return swig_li_carrays_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_XY') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_XY();
	}
}

class AB {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'b') return AB_b_set($this->_cPtr,$value);
		if ($var === 'a') return AB_a_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_carrays_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('AB_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'b') return AB_b_get($this->_cPtr);
		if ($var === 'a') return AB_a_get($this->_cPtr);
		if ($var === 'thisown') return swig_li_carrays_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_AB') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_AB();
	}
}

class XYArray {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_li_carrays_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_li_carrays_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($nelements) {
		if (is_resource($nelements) && get_resource_type($nelements) === '_p_XYArray') {
			$this->_cPtr=$nelements;
			return;
		}
		$this->_cPtr=new_XYArray($nelements);
	}

	function getitem($index) {
		$r=XYArray_getitem($this->_cPtr,$index);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new XY($r);
		}
		return $r;
	}

	function setitem($index,$value) {
		XYArray_setitem($this->_cPtr,$index,$value);
	}

	function cast() {
		$r=XYArray_cast($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new XY($r);
		}
		return $r;
	}

	static function frompointer($t) {
		$r=XYArray_frompointer($t);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new XYArray($r);
		}
		return $r;
	}
}


?>
