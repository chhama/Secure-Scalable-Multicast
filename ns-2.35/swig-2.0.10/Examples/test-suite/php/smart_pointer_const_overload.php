<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('smart_pointer_const_overload')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_smart_pointer_const_overload.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('smart_pointer_const_overload.so')) return;
    } else {
      if (!dl('smart_pointer_const_overload.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class smart_pointer_const_overload {
	static function CONST_ACCESS_set($CONST_ACCESS) {
		CONST_ACCESS_set($CONST_ACCESS);
	}

	static function CONST_ACCESS_get() {
		return CONST_ACCESS_get();
	}

	static function MUTABLE_ACCESS_set($MUTABLE_ACCESS) {
		MUTABLE_ACCESS_set($MUTABLE_ACCESS);
	}

	static function MUTABLE_ACCESS_get() {
		return MUTABLE_ACCESS_get();
	}

	static function new_int($ivalue) {
		return new_int($ivalue);
	}

	static function get_int($i) {
		return get_int($i);
	}

	static function set_int($i,$ivalue) {
		set_int($i,$ivalue);
	}

	static function delete_int($i) {
		delete_int($i);
	}
}

/* PHP Proxy Classes */
class Foo {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'Foo_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_smart_pointer_const_overload_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Foo_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'Foo_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_smart_pointer_const_overload_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Foo') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Foo();
	}

	function getx() {
		return Foo_getx($this->_cPtr);
	}

	function setx($x_) {
		Foo_setx($this->_cPtr,$x_);
	}

	static function stat() {
		Foo_stat();
	}

	function getx2() {
		return Foo_getx2($this->_cPtr);
	}

	function setx2($x_) {
		Foo_setx2($this->_cPtr,$x_);
	}
}

class Bar {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'Bar_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_smart_pointer_const_overload_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Bar_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'Bar_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_smart_pointer_const_overload_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($f) {
		if (is_resource($f) && get_resource_type($f) === '_p_Bar') {
			$this->_cPtr=$f;
			return;
		}
		$this->_cPtr=new_Bar($f);
	}

	function __deref__() {
		$r=Bar___deref__($this->_cPtr);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_Foo': return new Foo($r);
		default: return new Foo($r);
		}
	}

	function getx() {
		return Bar_getx($this->_cPtr);
	}

	function setx($x_) {
		Bar_setx($this->_cPtr,$x_);
	}

	function stat() {
		Bar_stat($this->_cPtr);
	}

	function getx2() {
		return Bar_getx2($this->_cPtr);
	}

	function setx2($x_) {
		Bar_setx2($this->_cPtr,$x_);
	}
}

class Bar2 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'Bar2_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_smart_pointer_const_overload_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Bar2_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'Bar2_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_smart_pointer_const_overload_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($f) {
		if (is_resource($f) && get_resource_type($f) === '_p_Bar2') {
			$this->_cPtr=$f;
			return;
		}
		$this->_cPtr=new_Bar2($f);
	}

	function __deref__() {
		$r=Bar2___deref__($this->_cPtr);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_Foo': return new Foo($r);
		default: return new Foo($r);
		}
	}

	function getx() {
		return Bar2_getx($this->_cPtr);
	}

	function setx($x_) {
		Bar2_setx($this->_cPtr,$x_);
	}

	function stat() {
		Bar2_stat($this->_cPtr);
	}

	function getx2() {
		return Bar2_getx2($this->_cPtr);
	}

	function setx2($x_) {
		Bar2_setx2($this->_cPtr,$x_);
	}
}


?>
