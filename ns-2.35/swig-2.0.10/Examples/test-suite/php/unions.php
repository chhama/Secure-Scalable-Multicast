<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('unions')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_unions.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('unions.so')) return;
    } else {
      if (!dl('unions.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* PHP Proxy Classes */
class SmallStruct {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'jill') return SmallStruct_jill_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_unions_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('SmallStruct_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'jill') return SmallStruct_jill_get($this->_cPtr);
		if ($var === 'thisown') return swig_unions_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_SmallStruct') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_SmallStruct();
	}
}

class BigStruct {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'jack') return BigStruct_jack_set($this->_cPtr,$value);
		if ($var === 'smallstruct') return BigStruct_smallstruct_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_unions_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('BigStruct_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'smallstruct') return new SmallStruct(BigStruct_smallstruct_get($this->_cPtr));
		if ($var === 'jack') return BigStruct_jack_get($this->_cPtr);
		if ($var === 'thisown') return swig_unions_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_BigStruct') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_BigStruct();
	}
}

class UnionTest {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'ss') return UnionTest_ss_set($this->_cPtr,$value);
		if ($var === 'bs') return UnionTest_bs_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_unions_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('UnionTest_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'ss') return new SmallStruct(UnionTest_ss_get($this->_cPtr));
		if ($var === 'bs') return new BigStruct(UnionTest_bs_get($this->_cPtr));
		if ($var === 'thisown') return swig_unions_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_UnionTest') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_UnionTest();
	}
}

class EmbeddedUnionTest {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'number') return EmbeddedUnionTest_number_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_unions_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('EmbeddedUnionTest_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'uni') return new EmbeddedUnionTest_uni(EmbeddedUnionTest_uni_get($this->_cPtr));
		if ($var === 'number') return EmbeddedUnionTest_number_get($this->_cPtr);
		if ($var === 'thisown') return swig_unions_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_EmbeddedUnionTest') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_EmbeddedUnionTest();
	}
}

class EmbeddedUnionTest_uni {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'small') return EmbeddedUnionTest_uni_small_set($this->_cPtr,$value);
		if ($var === 'big') return EmbeddedUnionTest_uni_big_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_unions_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('EmbeddedUnionTest_uni_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'small') return new SmallStruct(EmbeddedUnionTest_uni_small_get($this->_cPtr));
		if ($var === 'big') return new BigStruct(EmbeddedUnionTest_uni_big_get($this->_cPtr));
		if ($var === 'thisown') return swig_unions_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_EmbeddedUnionTest_uni') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_EmbeddedUnionTest_uni();
	}
}


?>
