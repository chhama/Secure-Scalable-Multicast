<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('static_const_member_2')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_static_const_member_2.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('static_const_member_2.so')) return;
    } else {
      if (!dl('static_const_member_2.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* PHP Proxy Classes */
class CavityPackFlags {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_static_const_member_2_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_static_const_member_2_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const forward_field = CavityPackFlags_forward_field;

	const backward_field = CavityPackFlags_backward_field;

	static function cavity_flags() {
		return CavityPackFlags_cavity_flags_get();
	}

	static function flags() {
		if (func_num_args()) {
			CavityPackFlags_flags_set(func_get_arg(0));
			return;
		}

		return CavityPackFlags_flags_get();
	}

	static function reftest() {
		return CavityPackFlags_reftest_get();
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_oss__modules__CavityPackFlags') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_CavityPackFlags();
	}
}

class Test_int extends CavityPackFlags {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_static_const_member_2_alter_newobject($this->_cPtr,$value);
		CavityPackFlags::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return CavityPackFlags::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_static_const_member_2_get_newobject($this->_cPtr);
		return CavityPackFlags::__get($var);
	}

	const LeftIndex = 0;

	const RightIndex = Test_int_RightIndex;

	const current_profile = Test_int_current_profile;

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_oss__modules__TestT_int_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Test_int();
	}
}

class Foo {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'val') return Foo_val_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_static_const_member_2_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Foo_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'val') return Foo_val_get($this->_cPtr);
		if ($var === 'thisown') return swig_static_const_member_2_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($v) {
		if (is_resource($v) && get_resource_type($v) === '_p_Foo') {
			$this->_cPtr=$v;
			return;
		}
		$this->_cPtr=new_Foo($v);
	}

	static function BAR() {
		$r=Foo_BAR_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Foo($r);
		}
		return $r;
	}

	static function BAZ() {
		$r=Foo_BAZ_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Foo($r);
		}
		return $r;
	}
}


?>
