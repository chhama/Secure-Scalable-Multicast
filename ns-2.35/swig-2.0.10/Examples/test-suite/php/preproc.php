<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('preproc')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_preproc.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('preproc.so')) return;
    } else {
      if (!dl('preproc.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class preproc {
	const SLASHSLASH = SLASHSLASH;

	static function hello0() {
		return hello0();
	}

	static function hello1() {
		return hello1();
	}

	static function hello2() {
		return hello2();
	}

	static function f($min) {
		return f($min);
	}

	const a5 = a5;

	const b5 = b5;

	const c5 = c5;

	const d5 = d5;

	const C1 = C1;

	const ALONG_NAME = ALONG_NAME;

	const C4 = C4;

	const a6 = a6;

	const b6 = b6;

	const c6 = c6;

	const d6 = d6;

	const EMBEDDED_DEFINE = EMBEDDED_DEFINE;

	const EMBEDDED_SWIG_CONSTANT = EMBEDDED_SWIG_CONSTANT;

	const A1 = A1;

	const A2 = A2;

	const A3 = A3;

	const A4 = A4;

	const A5 = A5;

	const A6 = A6;

	const A7 = A7;

	const A8 = A8;

	const A9 = A9;

	const A10 = A10;

	const A11 = A11;

	const A12 = A12;

	const A13 = A13;

	const __GMP_HAVE_CONST = __GMP_HAVE_CONST;

	const __GMP_HAVE_PROTOTYPES = __GMP_HAVE_PROTOTYPES;

	const __GMP_HAVE_TOKEN_PASTE = __GMP_HAVE_TOKEN_PASTE;

	const ONE = ONE;

	const one = one;

	const two = two;

	const three = three;

	static function endif__get() {
		return endif__get();
	}

	static function define_get() {
		return define_get();
	}

	static function defined_get() {
		return defined_get();
	}

	static function test($defined) {
		return test($defined);
	}

	const SOME_MASK_DEF = SOME_MASK_DEF;

	const BOLTZMANN = BOLTZMANN;

	const AVOGADRO = AVOGADRO;

	const RGAS = RGAS;

	const RGASX = RGASX;

	static function method($tnt) {
		return method($tnt);
	}
}

/* PHP Proxy Classes */
class EmbeddedDefines {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'dummy') return EmbeddedDefines_dummy_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_preproc_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('EmbeddedDefines_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'dummy') return EmbeddedDefines_dummy_get($this->_cPtr);
		if ($var === 'thisown') return swig_preproc_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_EmbeddedDefines') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_EmbeddedDefines();
	}
}

class TypeNameTraits {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'val') return TypeNameTraits_val_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_preproc_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('TypeNameTraits_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'val') return TypeNameTraits_val_get($this->_cPtr);
		if ($var === 'thisown') return swig_preproc_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_TypeNameTraits') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_TypeNameTraits();
	}
}


?>
