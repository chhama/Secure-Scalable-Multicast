<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('enum_thorough')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_enum_thorough.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('enum_thorough.so')) return;
    } else {
      if (!dl('enum_thorough.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class enum_thorough {
	const AnonEnum1 = 0;

	const AnonEnum2 = 100;

	const ReallyAnInteger = 200;

	const AnonSpaceEnum1 = 0;

	const AnonSpaceEnum2 = 300;

	const red = -1;

	const blue = blue;

	const green = 10;

	static function colourTest1($e) {
		return colourTest1($e);
	}

	static function colourTest2($e) {
		return colourTest2($e);
	}

	static function colourTest3($e) {
		return colourTest3($e);
	}

	static function colourTest4($e) {
		return colourTest4($e);
	}

	static function myColour_set($myColour) {
		myColour_set($myColour);
	}

	static function myColour_get() {
		return myColour_get();
	}

	static function speedTest0($s) {
		return speedTest0($s);
	}

	static function speedTest1($s) {
		return speedTest1($s);
	}

	static function speedTest2($s) {
		return speedTest2($s);
	}

	static function speedTest3($s) {
		return speedTest3($s);
	}

	static function speedTest4($s) {
		return speedTest4($s);
	}

	static function speedTest5($s) {
		return speedTest5($s);
	}

	const NamedAnon1 = 0;

	const NamedAnon2 = NamedAnon2;

	static function namedanonTest1($e) {
		return namedanonTest1($e);
	}

	const TwoNames1 = 0;

	const TwoNames2 = TwoNames2;

	const TwoNames3 = 33;

	static function twonamesTest1($e) {
		return twonamesTest1($e);
	}

	static function twonamesTest2($e) {
		return twonamesTest2($e);
	}

	static function twonamesTest3($e) {
		return twonamesTest3($e);
	}

	const NamedAnonSpace1 = 0;

	const NamedAnonSpace2 = NamedAnonSpace2;

	static function namedanonspaceTest1($e) {
		return namedanonspaceTest1($e);
	}

	static function namedanonspaceTest2($e) {
		return namedanonspaceTest2($e);
	}

	static function namedanonspaceTest3($e) {
		return namedanonspaceTest3($e);
	}

	static function namedanonspaceTest4($e) {
		return namedanonspaceTest4($e);
	}

	static function scientistsTest1($e) {
		return scientistsTest1($e);
	}

	static function scientistsTest2($e) {
		return scientistsTest2($e);
	}

	static function scientistsTest3($e) {
		return scientistsTest3($e);
	}

	static function scientistsTest4($e) {
		return scientistsTest4($e);
	}

	static function scientistsTest5($e) {
		return scientistsTest5($e);
	}

	static function scientistsTest6($e) {
		return scientistsTest6($e);
	}

	static function scientistsTest7($e) {
		return scientistsTest7($e);
	}

	static function scientistsTest8($e) {
		return scientistsTest8($e);
	}

	static function scientistsNameTest1($e) {
		return scientistsNameTest1($e);
	}

	static function scientistsNameTest2($e) {
		return scientistsNameTest2($e);
	}

	static function scientistsNameTest3($e) {
		return scientistsNameTest3($e);
	}

	static function scientistsNameTest4($e) {
		return scientistsNameTest4($e);
	}

	static function scientistsNameTest5($e) {
		return scientistsNameTest5($e);
	}

	static function scientistsNameTest6($e) {
		return scientistsNameTest6($e);
	}

	static function scientistsNameTest7($e) {
		return scientistsNameTest7($e);
	}

	static function scientistsNameSpaceTest1($e) {
		return scientistsNameSpaceTest1($e);
	}

	static function scientistsNameSpaceTest2($e) {
		return scientistsNameSpaceTest2($e);
	}

	static function scientistsNameSpaceTest3($e) {
		return scientistsNameSpaceTest3($e);
	}

	static function scientistsNameSpaceTest4($e) {
		return scientistsNameSpaceTest4($e);
	}

	static function scientistsNameSpaceTest5($e) {
		return scientistsNameSpaceTest5($e);
	}

	static function scientistsNameSpaceTest6($e) {
		return scientistsNameSpaceTest6($e);
	}

	static function scientistsNameSpaceTest7($e) {
		return scientistsNameSpaceTest7($e);
	}

	static function scientistsNameSpaceTest8($e) {
		return scientistsNameSpaceTest8($e);
	}

	static function scientistsNameSpaceTest9($e) {
		return scientistsNameSpaceTest9($e);
	}

	static function scientistsNameSpaceTestA($e) {
		return scientistsNameSpaceTestA($e);
	}

	static function scientistsNameSpaceTestB($e) {
		return scientistsNameSpaceTestB($e);
	}

	static function scientistsNameSpaceTestC($e) {
		return scientistsNameSpaceTestC($e);
	}

	static function scientistsNameSpaceTestD($e) {
		return scientistsNameSpaceTestD($e);
	}

	static function scientistsNameSpaceTestE($e) {
		return scientistsNameSpaceTestE($e);
	}

	static function scientistsNameSpaceTestF($e) {
		return scientistsNameSpaceTestF($e);
	}

	static function scientistsNameSpaceTestG($e) {
		return scientistsNameSpaceTestG($e);
	}

	static function scientistsNameSpaceTestH($e) {
		return scientistsNameSpaceTestH($e);
	}

	static function scientistsNameSpaceTestI($e) {
		return scientistsNameSpaceTestI($e);
	}

	static function scientistsNameSpaceTestJ($e) {
		return scientistsNameSpaceTestJ($e);
	}

	static function scientistsNameSpaceTestK($e) {
		return scientistsNameSpaceTestK($e);
	}

	static function scientistsNameSpaceTestL($e) {
		return scientistsNameSpaceTestL($e);
	}

	const argh = 0;

	const eek = -1;

	static function renameTest1($e) {
		return renameTest1($e);
	}

	static function renameTest2($e) {
		return renameTest2($e);
	}

	static function renameTest3($e) {
		return renameTest3($e);
	}

	static function renameTest4($e) {
		return renameTest4($e);
	}

	static function renameTest5($e) {
		return renameTest5($e);
	}

	static function renameTest6($e) {
		return renameTest6($e);
	}

	static function renameTest7($e) {
		return renameTest7($e);
	}

	static function treesTest1($e) {
		return treesTest1($e);
	}

	static function treesTest2($e) {
		return treesTest2($e);
	}

	static function treesTest3($e) {
		return treesTest3($e);
	}

	static function treesTest4($e) {
		return treesTest4($e);
	}

	static function treesTest5($e) {
		return treesTest5($e);
	}

	static function treesTest6($e) {
		return treesTest6($e);
	}

	static function treesTest7($e) {
		return treesTest7($e);
	}

	static function treesTest8($e) {
		return treesTest8($e);
	}

	static function treesTest9($e) {
		return treesTest9($e);
	}

	static function treesTestA($e) {
		return treesTestA($e);
	}

	static function treesTestB($e) {
		return treesTestB($e);
	}

	static function treesTestC($e) {
		return treesTestC($e);
	}

	static function treesTestD($e) {
		return treesTestD($e);
	}

	static function treesTestE($e) {
		return treesTestE($e);
	}

	static function treesTestF($e) {
		return treesTestF($e);
	}

	static function treesTestG($e) {
		return treesTestG($e);
	}

	static function treesTestH($e) {
		return treesTestH($e);
	}

	static function treesTestI($e) {
		return treesTestI($e);
	}

	static function treesTestJ($e) {
		return treesTestJ($e);
	}

	static function treesTestK($e) {
		return treesTestK($e);
	}

	static function treesTestL($e) {
		return treesTestL($e);
	}

	static function treesTestM($e) {
		return treesTestM($e);
	}

	static function treesTestO($e) {
		return treesTestO($e);
	}

	static function treesTestP($e) {
		return treesTestP($e);
	}

	static function treesTestQ($e) {
		return treesTestQ($e);
	}

	static function treesTestR($e) {
		return treesTestR($e);
	}

	static function hairTest1($e) {
		return hairTest1($e);
	}

	static function hairTest2($e) {
		return hairTest2($e);
	}

	static function hairTest3($e) {
		return hairTest3($e);
	}

	static function hairTest4($e) {
		return hairTest4($e);
	}

	static function hairTest5($e) {
		return hairTest5($e);
	}

	static function hairTest6($e) {
		return hairTest6($e);
	}

	static function hairTest7($e) {
		return hairTest7($e);
	}

	static function hairTest8($e) {
		return hairTest8($e);
	}

	static function hairTest9($e) {
		return hairTest9($e);
	}

	static function hairTestA($e) {
		return hairTestA($e);
	}

	static function hairTestB($e) {
		return hairTestB($e);
	}

	static function hairTestC($e) {
		return hairTestC($e);
	}

	static function hairTestA1($e) {
		return hairTestA1($e);
	}

	static function hairTestA2($e) {
		return hairTestA2($e);
	}

	static function hairTestA3($e) {
		return hairTestA3($e);
	}

	static function hairTestA4($e) {
		return hairTestA4($e);
	}

	static function hairTestA5($e) {
		return hairTestA5($e);
	}

	static function hairTestA6($e) {
		return hairTestA6($e);
	}

	static function hairTestA7($e) {
		return hairTestA7($e);
	}

	static function hairTestA8($e) {
		return hairTestA8($e);
	}

	static function hairTestA9($e) {
		return hairTestA9($e);
	}

	static function hairTestAA($e) {
		return hairTestAA($e);
	}

	static function hairTestAB($e) {
		return hairTestAB($e);
	}

	static function hairTestAC($e) {
		return hairTestAC($e);
	}

	static function hairTestB1($e) {
		return hairTestB1($e);
	}

	static function hairTestB2($e) {
		return hairTestB2($e);
	}

	static function hairTestB3($e) {
		return hairTestB3($e);
	}

	static function hairTestB4($e) {
		return hairTestB4($e);
	}

	static function hairTestB5($e) {
		return hairTestB5($e);
	}

	static function hairTestB6($e) {
		return hairTestB6($e);
	}

	static function hairTestB7($e) {
		return hairTestB7($e);
	}

	static function hairTestB8($e) {
		return hairTestB8($e);
	}

	static function hairTestB9($e) {
		return hairTestB9($e);
	}

	static function hairTestBA($e) {
		return hairTestBA($e);
	}

	static function hairTestBB($e) {
		return hairTestBB($e);
	}

	static function hairTestBC($e) {
		return hairTestBC($e);
	}

	static function hairTestC1($e) {
		return hairTestC1($e);
	}

	static function hairTestC2($e) {
		return hairTestC2($e);
	}

	static function hairTestC3($e) {
		return hairTestC3($e);
	}

	static function hairTestC4($e) {
		return hairTestC4($e);
	}

	static function hairTestC5($e) {
		return hairTestC5($e);
	}

	static function hairTestC6($e) {
		return hairTestC6($e);
	}

	static function hairTestC7($e) {
		return hairTestC7($e);
	}

	static function hairTestC8($e) {
		return hairTestC8($e);
	}

	static function hairTestC9($e) {
		return hairTestC9($e);
	}

	static function hairTestCA($e) {
		return hairTestCA($e);
	}

	static function hairTestCB($e) {
		return hairTestCB($e);
	}

	static function hairTestCC($e) {
		return hairTestCC($e);
	}

	const globalinstance1 = 0;

	const globalinstance2 = globalinstance2;

	const globalinstance3 = 30;

	static function GlobalInstance_set($GlobalInstance) {
		GlobalInstance_set($GlobalInstance);
	}

	static function GlobalInstance_get() {
		return GlobalInstance_get();
	}

	static function ignoreATest($n) {
		return ignoreATest($n);
	}

	static function ignoreBTest($n) {
		return ignoreBTest($n);
	}

	static function ignoreCTest($n) {
		return ignoreCTest($n);
	}

	static function ignoreDTest($n) {
		return ignoreDTest($n);
	}

	static function ignoreETest($n) {
		return ignoreETest($n);
	}

	const one = 1;

	const initial = initial;

	const two = two;

	const three = three;

	const llast = llast;

	const end = end;

	static function repeatTest($e) {
		return repeatTest($e);
	}

	const typeint = 10;

	const typeboolfalse = typeboolfalse;

	const typebooltrue = typebooltrue;

	const typebooltwo = typebooltwo;

	const typechar = typechar;

	const typedefaultint = typedefaultint;

	static function differentTypesTest($n) {
		return differentTypesTest($n);
	}

	const global_typeint = 10;

	const global_typeboolfalse = global_typeboolfalse;

	const global_typebooltrue = global_typebooltrue;

	const global_typebooltwo = global_typebooltwo;

	const global_typechar = global_typechar;

	const global_typedefaultint = global_typedefaultint;

	static function globalDifferentTypesTest($n) {
		return globalDifferentTypesTest($n);
	}

	const typeint_noconst = 10;

	const typeboolfalse_noconst = typeboolfalse_noconst;

	const typebooltrue_noconst = typebooltrue_noconst;

	const typebooltwo_noconst = typebooltwo_noconst;

	const typechar_noconst = typechar_noconst;

	const typedefaultint_noconst = typedefaultint_noconst;

	const global_typeint_noconst = 10;

	const global_typeboolfalse_noconst = global_typeboolfalse_noconst;

	const global_typebooltrue_noconst = global_typebooltrue_noconst;

	const global_typebooltwo_noconst = global_typebooltwo_noconst;

	const global_typechar_noconst = global_typechar_noconst;

	const global_typedefaultint_noconst = global_typedefaultint_noconst;
}

/* PHP Proxy Classes */
class AnonStruct {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_enum_thorough_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_enum_thorough_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const AnonStructEnum1 = 0;

	const AnonStructEnum2 = 400;

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_AnonSpace__AnonStruct') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_AnonStruct();
	}
}

class SpeedClass {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'mySpeedtd1') return SpeedClass_mySpeedtd1_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_enum_thorough_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('SpeedClass_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'myColour2') return SpeedClass_myColour2_get($this->_cPtr);
		if ($var === 'mySpeedtd1') return SpeedClass_mySpeedtd1_get($this->_cPtr);
		if ($var === 'thisown') return swig_enum_thorough_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const slow = 10;

	const medium = 20;

	const fast = 30;

	const lightning = SpeedClass_lightning;

	function speedTest0($s) {
		return SpeedClass_speedTest0($this->_cPtr,$s);
	}

	function speedTest1($s) {
		return SpeedClass_speedTest1($this->_cPtr,$s);
	}

	function speedTest2($s) {
		return SpeedClass_speedTest2($this->_cPtr,$s);
	}

	function speedTest3($s) {
		return SpeedClass_speedTest3($this->_cPtr,$s);
	}

	function speedTest4($s) {
		return SpeedClass_speedTest4($this->_cPtr,$s);
	}

	function speedTest5($s) {
		return SpeedClass_speedTest5($this->_cPtr,$s);
	}

	function speedTest6($s) {
		return SpeedClass_speedTest6($this->_cPtr,$s);
	}

	function speedTest7($s) {
		return SpeedClass_speedTest7($this->_cPtr,$s);
	}

	function speedTest8($s) {
		return SpeedClass_speedTest8($this->_cPtr,$s);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_SpeedClass') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_SpeedClass();
	}
}

class TwoNamesStruct {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_enum_thorough_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_enum_thorough_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const TwoNamesStruct1 = 0;

	const TwoNamesStruct2 = TwoNamesStruct_TwoNamesStruct2;

	function twonamesTest1($e) {
		return TwoNamesStruct_twonamesTest1($this->_cPtr,$e);
	}

	function twonamesTest2($e) {
		return TwoNamesStruct_twonamesTest2($this->_cPtr,$e);
	}

	function twonamesTest3($e) {
		return TwoNamesStruct_twonamesTest3($this->_cPtr,$e);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_TwoNamesStruct') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_TwoNamesStruct();
	}
}

class TemplateClassInt {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_enum_thorough_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_enum_thorough_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const einstein = 0;

	const galileo = 10;

	function scientistsTest1($e) {
		return TemplateClassInt_scientistsTest1($this->_cPtr,$e);
	}

	function scientistsTest2($e) {
		return TemplateClassInt_scientistsTest2($this->_cPtr,$e);
	}

	function scientistsTest3($e) {
		return TemplateClassInt_scientistsTest3($this->_cPtr,$e);
	}

	function scientistsTest4($e) {
		return TemplateClassInt_scientistsTest4($this->_cPtr,$e);
	}

	function scientistsTest5($e) {
		return TemplateClassInt_scientistsTest5($this->_cPtr,$e);
	}

	function scientistsTest6($e) {
		return TemplateClassInt_scientistsTest6($this->_cPtr,$e);
	}

	function scientistsTest7($e) {
		return TemplateClassInt_scientistsTest7($this->_cPtr,$e);
	}

	function scientistsTest8($e) {
		return TemplateClassInt_scientistsTest8($this->_cPtr,$e);
	}

	function scientistsTest9($e) {
		return TemplateClassInt_scientistsTest9($this->_cPtr,$e);
	}

	function scientistsTestB($e) {
		return TemplateClassInt_scientistsTestB($this->_cPtr,$e);
	}

	function scientistsTestD($e) {
		return TemplateClassInt_scientistsTestD($this->_cPtr,$e);
	}

	function scientistsTestE($e) {
		return TemplateClassInt_scientistsTestE($this->_cPtr,$e);
	}

	function scientistsTestF($e) {
		return TemplateClassInt_scientistsTestF($this->_cPtr,$e);
	}

	function scientistsTestG($e) {
		return TemplateClassInt_scientistsTestG($this->_cPtr,$e);
	}

	function scientistsTestH($e) {
		return TemplateClassInt_scientistsTestH($this->_cPtr,$e);
	}

	function scientistsTestI($e) {
		return TemplateClassInt_scientistsTestI($this->_cPtr,$e);
	}

	function scientistsTestJ($e) {
		return TemplateClassInt_scientistsTestJ($this->_cPtr,$e);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_TemplateClassT_int_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_TemplateClassInt();
	}
}

class TClassInt {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_enum_thorough_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_enum_thorough_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const faraday = 0;

	const bell = 20;

	function scientistsNameTest1($e) {
		return TClassInt_scientistsNameTest1($this->_cPtr,$e);
	}

	function scientistsNameTest2($e) {
		return TClassInt_scientistsNameTest2($this->_cPtr,$e);
	}

	function scientistsNameTest3($e) {
		return TClassInt_scientistsNameTest3($this->_cPtr,$e);
	}

	function scientistsNameTest4($e) {
		return TClassInt_scientistsNameTest4($this->_cPtr,$e);
	}

	function scientistsNameTest5($e) {
		return TClassInt_scientistsNameTest5($this->_cPtr,$e);
	}

	function scientistsNameTest6($e) {
		return TClassInt_scientistsNameTest6($this->_cPtr,$e);
	}

	function scientistsNameTest7($e) {
		return TClassInt_scientistsNameTest7($this->_cPtr,$e);
	}

	function scientistsNameTest8($e) {
		return TClassInt_scientistsNameTest8($this->_cPtr,$e);
	}

	function scientistsNameTest9($e) {
		return TClassInt_scientistsNameTest9($this->_cPtr,$e);
	}

	function scientistsNameTestB($e) {
		return TClassInt_scientistsNameTestB($this->_cPtr,$e);
	}

	function scientistsNameTestD($e) {
		return TClassInt_scientistsNameTestD($this->_cPtr,$e);
	}

	function scientistsNameTestE($e) {
		return TClassInt_scientistsNameTestE($this->_cPtr,$e);
	}

	function scientistsNameTestF($e) {
		return TClassInt_scientistsNameTestF($this->_cPtr,$e);
	}

	function scientistsNameTestG($e) {
		return TClassInt_scientistsNameTestG($this->_cPtr,$e);
	}

	function scientistsNameTestH($e) {
		return TClassInt_scientistsNameTestH($this->_cPtr,$e);
	}

	function scientistsNameTestI($e) {
		return TClassInt_scientistsNameTestI($this->_cPtr,$e);
	}

	function scientistsNameSpaceTest1($e) {
		return TClassInt_scientistsNameSpaceTest1($this->_cPtr,$e);
	}

	function scientistsNameSpaceTest2($e) {
		return TClassInt_scientistsNameSpaceTest2($this->_cPtr,$e);
	}

	function scientistsNameSpaceTest3($e) {
		return TClassInt_scientistsNameSpaceTest3($this->_cPtr,$e);
	}

	function scientistsNameSpaceTest4($e) {
		return TClassInt_scientistsNameSpaceTest4($this->_cPtr,$e);
	}

	function scientistsNameSpaceTest5($e) {
		return TClassInt_scientistsNameSpaceTest5($this->_cPtr,$e);
	}

	function scientistsNameSpaceTest6($e) {
		return TClassInt_scientistsNameSpaceTest6($this->_cPtr,$e);
	}

	function scientistsNameSpaceTest7($e) {
		return TClassInt_scientistsNameSpaceTest7($this->_cPtr,$e);
	}

	function scientistsOtherTest1($e) {
		return TClassInt_scientistsOtherTest1($this->_cPtr,$e);
	}

	function scientistsOtherTest2($e) {
		return TClassInt_scientistsOtherTest2($this->_cPtr,$e);
	}

	function scientistsOtherTest3($e) {
		return TClassInt_scientistsOtherTest3($this->_cPtr,$e);
	}

	function scientistsOtherTest4($e) {
		return TClassInt_scientistsOtherTest4($this->_cPtr,$e);
	}

	function scientistsOtherTest5($e) {
		return TClassInt_scientistsOtherTest5($this->_cPtr,$e);
	}

	function scientistsOtherTest6($e) {
		return TClassInt_scientistsOtherTest6($this->_cPtr,$e);
	}

	function scientistsOtherTest7($e) {
		return TClassInt_scientistsOtherTest7($this->_cPtr,$e);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Name__TClassT_int_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_TClassInt();
	}
}

class NewNameStruct {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_enum_thorough_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_enum_thorough_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const whizz = 0;

	const bang = NewNameStruct_bang;

	const pop = NewNameStruct_pop;

	function renameTest1($e) {
		return NewNameStruct_renameTest1($this->_cPtr,$e);
	}

	function renameTest2($e) {
		return NewNameStruct_renameTest2($this->_cPtr,$e);
	}

	const simple1 = 0;

	const doublename1 = 0;

	const singlename1 = 0;

	function renameTest3($e) {
		return NewNameStruct_renameTest3($this->_cPtr,$e);
	}

	function renameTest4($e) {
		return NewNameStruct_renameTest4($this->_cPtr,$e);
	}

	function renameTest5($e) {
		return NewNameStruct_renameTest5($this->_cPtr,$e);
	}

	function renameTest6($e) {
		return NewNameStruct_renameTest6($this->_cPtr,$e);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_OldNameStruct') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_NewNameStruct();
	}
}

class TreesClass {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_enum_thorough_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_enum_thorough_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const oak = 0;

	const fir = TreesClass_fir;

	const pine = TreesClass_pine;

	function treesTest1($e) {
		return TreesClass_treesTest1($this->_cPtr,$e);
	}

	function treesTest2($e) {
		return TreesClass_treesTest2($this->_cPtr,$e);
	}

	function treesTest3($e) {
		return TreesClass_treesTest3($this->_cPtr,$e);
	}

	function treesTest4($e) {
		return TreesClass_treesTest4($this->_cPtr,$e);
	}

	function treesTest5($e) {
		return TreesClass_treesTest5($this->_cPtr,$e);
	}

	function treesTest6($e) {
		return TreesClass_treesTest6($this->_cPtr,$e);
	}

	function treesTest7($e) {
		return TreesClass_treesTest7($this->_cPtr,$e);
	}

	function treesTest8($e) {
		return TreesClass_treesTest8($this->_cPtr,$e);
	}

	function treesTest9($e) {
		return TreesClass_treesTest9($this->_cPtr,$e);
	}

	function treesTestA($e) {
		return TreesClass_treesTestA($this->_cPtr,$e);
	}

	function treesTestB($e) {
		return TreesClass_treesTestB($this->_cPtr,$e);
	}

	function treesTestC($e) {
		return TreesClass_treesTestC($this->_cPtr,$e);
	}

	function treesTestD($e) {
		return TreesClass_treesTestD($this->_cPtr,$e);
	}

	function treesTestE($e) {
		return TreesClass_treesTestE($this->_cPtr,$e);
	}

	function treesTestF($e) {
		return TreesClass_treesTestF($this->_cPtr,$e);
	}

	function treesTestG($e) {
		return TreesClass_treesTestG($this->_cPtr,$e);
	}

	function treesTestH($e) {
		return TreesClass_treesTestH($this->_cPtr,$e);
	}

	function treesTestI($e) {
		return TreesClass_treesTestI($this->_cPtr,$e);
	}

	function treesTestJ($e) {
		return TreesClass_treesTestJ($this->_cPtr,$e);
	}

	function treesTestK($e) {
		return TreesClass_treesTestK($this->_cPtr,$e);
	}

	function treesTestL($e) {
		return TreesClass_treesTestL($this->_cPtr,$e);
	}

	function treesTestM($e) {
		return TreesClass_treesTestM($this->_cPtr,$e);
	}

	function treesTestN($e) {
		return TreesClass_treesTestN($this->_cPtr,$e);
	}

	function treesTestO($e) {
		return TreesClass_treesTestO($this->_cPtr,$e);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_TreesClass') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_TreesClass();
	}
}

class HairStruct {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_enum_thorough_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_enum_thorough_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const blonde = HairStruct_blonde;

	const ginger = HairStruct_ginger;

	function hairTest1($e) {
		return HairStruct_hairTest1($this->_cPtr,$e);
	}

	function hairTest2($e) {
		return HairStruct_hairTest2($this->_cPtr,$e);
	}

	function hairTest3($e) {
		return HairStruct_hairTest3($this->_cPtr,$e);
	}

	function hairTest4($e) {
		return HairStruct_hairTest4($this->_cPtr,$e);
	}

	function hairTest5($e) {
		return HairStruct_hairTest5($this->_cPtr,$e);
	}

	function hairTest6($e) {
		return HairStruct_hairTest6($this->_cPtr,$e);
	}

	function hairTest7($e) {
		return HairStruct_hairTest7($this->_cPtr,$e);
	}

	function hairTest8($e) {
		return HairStruct_hairTest8($this->_cPtr,$e);
	}

	function hairTest9($e) {
		return HairStruct_hairTest9($this->_cPtr,$e);
	}

	function hairTestA($e) {
		return HairStruct_hairTestA($this->_cPtr,$e);
	}

	function hairTestB($e) {
		return HairStruct_hairTestB($this->_cPtr,$e);
	}

	function colourTest1($e) {
		return HairStruct_colourTest1($this->_cPtr,$e);
	}

	function colourTest2($e) {
		return HairStruct_colourTest2($this->_cPtr,$e);
	}

	function namedanonTest1($e) {
		return HairStruct_namedanonTest1($this->_cPtr,$e);
	}

	function namedanonspaceTest1($e) {
		return HairStruct_namedanonspaceTest1($this->_cPtr,$e);
	}

	function treesGlobalTest1($e) {
		return HairStruct_treesGlobalTest1($this->_cPtr,$e);
	}

	function treesGlobalTest2($e) {
		return HairStruct_treesGlobalTest2($this->_cPtr,$e);
	}

	function treesGlobalTest3($e) {
		return HairStruct_treesGlobalTest3($this->_cPtr,$e);
	}

	function treesGlobalTest4($e) {
		return HairStruct_treesGlobalTest4($this->_cPtr,$e);
	}

	function treesGlobalTest5($e) {
		return HairStruct_treesGlobalTest5($this->_cPtr,$e);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_curly__greasy__HairStruct') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_HairStruct();
	}
}

class FirStruct extends HairStruct {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_enum_thorough_alter_newobject($this->_cPtr,$value);
		HairStruct::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return HairStruct::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_enum_thorough_get_newobject($this->_cPtr);
		return HairStruct::__get($var);
	}

	function hairTestFir1($e) {
		return FirStruct_hairTestFir1($this->_cPtr,$e);
	}

	function hairTestFir2($e) {
		return FirStruct_hairTestFir2($this->_cPtr,$e);
	}

	function hairTestFir3($e) {
		return FirStruct_hairTestFir3($this->_cPtr,$e);
	}

	function hairTestFir4($e) {
		return FirStruct_hairTestFir4($this->_cPtr,$e);
	}

	function hairTestFir5($e) {
		return FirStruct_hairTestFir5($this->_cPtr,$e);
	}

	function hairTestFir6($e) {
		return FirStruct_hairTestFir6($this->_cPtr,$e);
	}

	function hairTestFir7($e) {
		return FirStruct_hairTestFir7($this->_cPtr,$e);
	}

	function hairTestFir8($e) {
		return FirStruct_hairTestFir8($this->_cPtr,$e);
	}

	function hairTestFir9($e) {
		return FirStruct_hairTestFir9($this->_cPtr,$e);
	}

	function hairTestFirA($e) {
		return FirStruct_hairTestFirA($this->_cPtr,$e);
	}

	function hairTestFirB($e) {
		return FirStruct_hairTestFirB($this->_cPtr,$e);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_curly__greasy__FirStruct') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_FirStruct();
	}
}

class Obscure {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_enum_thorough_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_enum_thorough_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const one = 0;

	const two = 0;

	const twoagain = Obscure_twoagain;

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Obscure') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Obscure();
	}
}

class Instances {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'MemberInstance') return Instances_MemberInstance_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_enum_thorough_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Instances_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'MemberInstance') return Instances_MemberInstance_get($this->_cPtr);
		if ($var === 'thisown') return swig_enum_thorough_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const memberinstance1 = 0;

	const memberinstance2 = Instances_memberinstance2;

	const memberinstance3 = 300;

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Instances') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Instances();
	}
}

class IgnoreTest {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_enum_thorough_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_enum_thorough_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	const ignoreA_zero = 0;

	const ignoreA_three = IgnoreTest_ignoreA_three;

	const ignoreA_ten = 10;

	const ignoreA_eleven = IgnoreTest_ignoreA_eleven;

	const ignoreA_thirteen = IgnoreTest_ignoreA_thirteen;

	const ignoreA_fourteen = IgnoreTest_ignoreA_fourteen;

	const ignoreA_twenty = 20;

	const ignoreA_thirty = 30;

	const ignoreA_thirty_two = IgnoreTest_ignoreA_thirty_two;

	const ignoreA_thirty_three = IgnoreTest_ignoreA_thirty_three;

	const ignoreB_eleven = IgnoreTest_ignoreB_eleven;

	const ignoreB_twelve = IgnoreTest_ignoreB_twelve;

	const ignoreB_thirty_one = IgnoreTest_ignoreB_thirty_one;

	const ignoreB_thirty_two = IgnoreTest_ignoreB_thirty_two;

	const ignoreB_forty_one = IgnoreTest_ignoreB_forty_one;

	const ignoreB_forty_two = IgnoreTest_ignoreB_forty_two;

	const ignoreC_ten = 10;

	const ignoreC_twelve = IgnoreTest_ignoreC_twelve;

	const ignoreC_twenty = 20;

	const ignoreC_thirty = 30;

	const ignoreC_thirty_two = IgnoreTest_ignoreC_thirty_two;

	const ignoreC_forty = 40;

	const ignoreC_forty_two = IgnoreTest_ignoreC_forty_two;

	const ignoreD_twenty_one = IgnoreTest_ignoreD_twenty_one;

	const ignoreD_twenty_two = IgnoreTest_ignoreD_twenty_two;

	const ignoreE_zero = 0;

	const ignoreE_twenty_one = IgnoreTest_ignoreE_twenty_one;

	const ignoreE_twenty_two = IgnoreTest_ignoreE_twenty_two;

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_IgnoreTest') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_IgnoreTest();
	}
}


?>
