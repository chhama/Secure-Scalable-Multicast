<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('arrays_dimensionless')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_arrays_dimensionless.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('arrays_dimensionless.so')) return;
    } else {
      if (!dl('arrays_dimensionless.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class arrays_dimensionless {
	static function globalints_get() {
		return globalints_get();
	}

	static function constglobalints_get() {
		return constglobalints_get();
	}

	static function arr_bool($array,$length) {
		return arr_bool($array,$length);
	}

	static function arr_char($array,$length) {
		return arr_char($array,$length);
	}

	static function arr_schar($array,$length) {
		return arr_schar($array,$length);
	}

	static function arr_uchar($array,$length) {
		return arr_uchar($array,$length);
	}

	static function arr_short($array,$length) {
		return arr_short($array,$length);
	}

	static function arr_ushort($array,$length) {
		return arr_ushort($array,$length);
	}

	static function arr_int($array,$length) {
		return arr_int($array,$length);
	}

	static function arr_uint($array,$length) {
		return arr_uint($array,$length);
	}

	static function arr_long($array,$length) {
		return arr_long($array,$length);
	}

	static function arr_ulong($array,$length) {
		return arr_ulong($array,$length);
	}

	static function arr_ll($array,$length) {
		return arr_ll($array,$length);
	}

	static function arr_ull($array,$length) {
		return arr_ull($array,$length);
	}

	static function arr_float($array,$length) {
		return arr_float($array,$length);
	}

	static function arr_double($array,$length) {
		return arr_double($array,$length);
	}

	static function ptr_bool($array,$length) {
		return ptr_bool($array,$length);
	}

	static function ptr_char($array,$length) {
		return ptr_char($array,$length);
	}

	static function ptr_schar($array,$length) {
		return ptr_schar($array,$length);
	}

	static function ptr_uchar($array,$length) {
		return ptr_uchar($array,$length);
	}

	static function ptr_short($array,$length) {
		return ptr_short($array,$length);
	}

	static function ptr_ushort($array,$length) {
		return ptr_ushort($array,$length);
	}

	static function ptr_int($array,$length) {
		return ptr_int($array,$length);
	}

	static function ptr_uint($array,$length) {
		return ptr_uint($array,$length);
	}

	static function ptr_long($array,$length) {
		return ptr_long($array,$length);
	}

	static function ptr_ulong($array,$length) {
		return ptr_ulong($array,$length);
	}

	static function ptr_ll($array,$length) {
		return ptr_ll($array,$length);
	}

	static function ptr_ull($array,$length) {
		return ptr_ull($array,$length);
	}

	static function ptr_float($array,$length) {
		return ptr_float($array,$length);
	}

	static function ptr_double($array,$length) {
		return ptr_double($array,$length);
	}
}

/* PHP Proxy Classes */
class Bar {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_arrays_dimensionless_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_arrays_dimensionless_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	static function ints() {
		return Bar_ints_get();
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Bar') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Bar();
	}
}


?>
