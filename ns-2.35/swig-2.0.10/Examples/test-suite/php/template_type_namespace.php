<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('template_type_namespace')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_template_type_namespace.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('template_type_namespace.so')) return;
    } else {
      if (!dl('template_type_namespace.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class template_type_namespace {
	static function foo() {
		$r=foo();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new string_vector($r);
		}
		return $r;
	}
}

/* PHP Proxy Classes */
class string_vector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_template_type_namespace_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_template_type_namespace_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_std__string_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_string_vector(); break;
		default: $this->_cPtr=new_string_vector($n);
		}
	}

	function size() {
		return string_vector_size($this->_cPtr);
	}

	function capacity() {
		return string_vector_capacity($this->_cPtr);
	}

	function reserve($n) {
		string_vector_reserve($this->_cPtr,$n);
	}

	function clear() {
		string_vector_clear($this->_cPtr);
	}

	function push($x) {
		string_vector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return string_vector_is_empty($this->_cPtr);
	}

	function pop() {
		return string_vector_pop($this->_cPtr);
	}

	function get($i) {
		return string_vector_get($this->_cPtr,$i);
	}

	function set($i,$val) {
		string_vector_set($this->_cPtr,$i,$val);
	}
}


?>
