<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('funcptr_cpp')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_funcptr_cpp.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('funcptr_cpp.so')) return;
    } else {
      if (!dl('funcptr_cpp.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class funcptr_cpp {
	static function addByValue($a,$b) {
		return addByValue($a,$b);
	}

	static function addByPointer($a,$b) {
		return addByPointer($a,$b);
	}

	static function addByReference($a,$b) {
		return addByReference($a,$b);
	}

	static function call1($d,$a,$b) {
		return call1($d,$a,$b);
	}

	static function call2($d,$a,$b) {
		return call2($d,$a,$b);
	}

	static function call3($d,$a,$b) {
		return call3($d,$a,$b);
	}

	const ADD_BY_VALUE = ADD_BY_VALUE;

	const ADD_BY_POINTER = ADD_BY_POINTER;

	const ADD_BY_REFERENCE = ADD_BY_REFERENCE;

	static function typedef_call1($precallback,$postcallback) {
		return typedef_call1($precallback,$postcallback);
	}

	static function typedef_call2($precallback,$postcallback) {
		return typedef_call2($precallback,$postcallback);
	}

	static function typedef_call3($precallback,$postcallback) {
		return typedef_call3($precallback,$postcallback);
	}
}

/* PHP Proxy Classes */

?>
