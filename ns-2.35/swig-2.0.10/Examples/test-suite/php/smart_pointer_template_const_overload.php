<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('smart_pointer_template_const_overload')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_smart_pointer_template_const_overload.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('smart_pointer_template_const_overload.so')) return;
    } else {
      if (!dl('smart_pointer_template_const_overload.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class smart_pointer_template_const_overload {
	static function tester() {
		tester();
	}
}

/* PHP Proxy Classes */
class FooImplementation {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'normalvariable') return FooImplementation_normalvariable_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_smart_pointer_template_const_overload_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('FooImplementation_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'normalvariable') return FooImplementation_normalvariable_get($this->_cPtr);
		if ($var === 'thisown') return swig_smart_pointer_template_const_overload_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function mingy() {
		return FooImplementation_mingy($this->_cPtr);
	}

	function constmingy() {
		return FooImplementation_constmingy($this->_cPtr);
	}

	static function thingy() {
		return FooImplementation_thingy();
	}

	static function svariable() {
		if (func_num_args()) {
			FooImplementation_svariable_set(func_get_arg(0));
			return;
		}

		return FooImplementation_svariable_get();
	}

	static function constsvariable() {
		return FooImplementation_constsvariable_get();
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_FooImplementation') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_FooImplementation();
	}
}

class FooSmartPointer {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'svariable') return FooSmartPointer_svariable_set($this->_cPtr,$value);
		if ($var === 'normalvariable') return FooSmartPointer_normalvariable_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_smart_pointer_template_const_overload_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('FooSmartPointer_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'FooSmartPointer_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_smart_pointer_template_const_overload_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($t=null) {
		if (is_resource($t) && get_resource_type($t) === '_p_SmartPointerT_FooImplementation_t') {
			$this->_cPtr=$t;
			return;
		}
		$this->_cPtr=new_FooSmartPointer($t);
	}

	function __deref__() {
		$r=FooSmartPointer___deref__($this->_cPtr);
		if (!is_resource($r)) return $r;
		switch (get_resource_type($r)) {
		case '_p_FooImplementation': return new FooImplementation($r);
		default: return new FooImplementation($r);
		}
	}

	function mingy() {
		return FooSmartPointer_mingy($this->_cPtr);
	}

	function constmingy() {
		return FooSmartPointer_constmingy($this->_cPtr);
	}

	function thingy() {
		return FooSmartPointer_thingy($this->_cPtr);
	}
}


?>
