<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('rename_scope')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_rename_scope.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('rename_scope.so')) return;
    } else {
      if (!dl('rename_scope.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class rename_scope {
	const UnaryPolarization = 0;

	const BinaryPolarization = BinaryPolarization;

	static function equals($lhs,$rhs) {
		return equals($lhs,$rhs);
	}
}

/* PHP Proxy Classes */
class Interface_UP {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_rename_scope_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_rename_scope_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_oss__Interface_T_oss__UnaryPolarization_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Interface_UP();
	}
}

class Interface_BP {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_rename_scope_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_rename_scope_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_oss__Interface_T_oss__BinaryPolarization_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Interface_BP();
	}
}

class Natural_UP extends Interface_UP {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_rename_scope_alter_newobject($this->_cPtr,$value);
		Interface_UP::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Interface_UP::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_rename_scope_get_newobject($this->_cPtr);
		return Interface_UP::__get($var);
	}

	function rtest() {
		return Natural_UP_rtest($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_oss__interfaces__NaturalT_oss__UnaryPolarization_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Natural_UP();
	}
}

class Natural_BP extends Interface_BP {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_rename_scope_alter_newobject($this->_cPtr,$value);
		Interface_BP::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Interface_BP::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_rename_scope_get_newobject($this->_cPtr);
		return Interface_BP::__get($var);
	}

	function rtest() {
		return Natural_BP_rtest($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_oss__interfaces__NaturalT_oss__BinaryPolarization_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Natural_BP();
	}
}

class Bucket {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_rename_scope_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_rename_scope_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Utilities__Bucket') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Bucket();
	}
}


?>
