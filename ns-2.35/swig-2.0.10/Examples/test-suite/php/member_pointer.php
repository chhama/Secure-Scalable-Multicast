<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('member_pointer')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_member_pointer.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('member_pointer.so')) return;
    } else {
      if (!dl('member_pointer.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class member_pointer {
	static function do_op($s,$m) {
		return do_op($s,$m);
	}

	static function areapt() {
		return areapt();
	}

	static function perimeterpt() {
		return perimeterpt();
	}

	static function areavar_set($areavar) {
		areavar_set($areavar);
	}

	static function areavar_get() {
		return areavar_get();
	}

	static function perimetervar_set($perimetervar) {
		perimetervar_set($perimetervar);
	}

	static function perimetervar_get() {
		return perimetervar_get();
	}

	const AREAPT = AREAPT;

	const PERIMPT = PERIMPT;

	const NULLPT = NULLPT;

	static function call1($d,$a,$b) {
		return call1($d,$a,$b);
	}

	static function call2($d,$a,$b) {
		return call2($d,$a,$b);
	}

	static function call3($d,$a,$b) {
		return call3($d,$a,$b);
	}

	const ADD_BY_VALUE = ADD_BY_VALUE;

	const ADD_BY_POINTER = ADD_BY_POINTER;

	const ADD_BY_REFERENCE = ADD_BY_REFERENCE;
}

/* PHP Proxy Classes */
abstract class Shape {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'Shape_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_member_pointer_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Shape_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'Shape_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_member_pointer_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function move($dx,$dy) {
		Shape_move($this->_cPtr,$dx,$dy);
	}

	function area() {
		return Shape_area($this->_cPtr);
	}

	function perimeter() {
		return Shape_perimeter($this->_cPtr);
	}

	static function nshapes() {
		if (func_num_args()) {
			Shape_nshapes_set(func_get_arg(0));
			return;
		}

		return Shape_nshapes_get();
	}
}

class Circle extends Shape {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_member_pointer_alter_newobject($this->_cPtr,$value);
		Shape::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Shape::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_member_pointer_get_newobject($this->_cPtr);
		return Shape::__get($var);
	}

	function __construct($r_) {
		if (is_resource($r_) && get_resource_type($r_) === '_p_Circle') {
			$this->_cPtr=$r_;
			return;
		}
		$this->_cPtr=new_Circle($r_);
	}

	function area() {
		return Circle_area($this->_cPtr);
	}

	function perimeter() {
		return Circle_perimeter($this->_cPtr);
	}
}

class Square extends Shape {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_member_pointer_alter_newobject($this->_cPtr,$value);
		Shape::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Shape::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_member_pointer_get_newobject($this->_cPtr);
		return Shape::__get($var);
	}

	function __construct($w) {
		if (is_resource($w) && get_resource_type($w) === '_p_Square') {
			$this->_cPtr=$w;
			return;
		}
		$this->_cPtr=new_Square($w);
	}

	function area() {
		return Square_area($this->_cPtr);
	}

	function perimeter() {
		return Square_perimeter($this->_cPtr);
	}
}

class Funktions {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_member_pointer_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_member_pointer_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function addByValue($a,$b) {
		return Funktions_addByValue($this->_cPtr,$a,$b);
	}

	function addByPointer($a,$b) {
		return Funktions_addByPointer($this->_cPtr,$a,$b);
	}

	function addByReference($a,$b) {
		return Funktions_addByReference($this->_cPtr,$a,$b);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Funktions') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Funktions();
	}
}


?>
