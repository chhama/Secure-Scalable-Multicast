<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('using_namespace')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_using_namespace.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('using_namespace.so')) return;
    } else {
      if (!dl('using_namespace.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class using_namespace {
	static function useSpaceMan($s) {
		return useSpaceMan($s);
	}
}

/* PHP Proxy Classes */
class Hello {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_using_namespace_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_using_namespace_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_hello__Hello') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Hello();
	}
}

class hi0 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_using_namespace_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_using_namespace_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_hi__hi0') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_hi0();
	}
}

class Hi_hi0 extends Hello {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_using_namespace_alter_newobject($this->_cPtr,$value);
		Hello::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Hello::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_using_namespace_get_newobject($this->_cPtr);
		return Hello::__get($var);
	}

	function value1() {
		return Hi_hi0_value1($this->_cPtr);
	}

	function value2() {
		return Hi_hi0_value2($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_hello__HiT_hello__Hello_hi__hi0_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Hi_hi0();
	}
}

class hi1 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_using_namespace_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_using_namespace_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function value1() {
		return hi1_value1($this->_cPtr);
	}

	function value2() {
		return hi1_value2($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_hi__hi1') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_hi1();
	}
}

class X {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'd') return X_d_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_using_namespace_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('X_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'd') return X_d_get($this->_cPtr);
		if ($var === 'thisown') return swig_using_namespace_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_X') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_X();
	}
}


?>
