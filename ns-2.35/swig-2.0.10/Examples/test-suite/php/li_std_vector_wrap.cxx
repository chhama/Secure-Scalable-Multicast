/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPHP

#define SWIG_PREFIX ""
#define SWIG_PREFIX_LEN 0

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * phprun.swg
 *
 * PHP runtime library
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif
#include "zend.h"
#include "zend_API.h"
#include "zend_exceptions.h"
#include "php.h"
#include "ext/standard/php_string.h"
#include <stdlib.h> /* for abort(), used in generated code. */

#ifdef ZEND_RAW_FENTRY
/* ZEND_RAW_FENTRY was added somewhere between 5.2.0 and 5.2.3 */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_RAW_FENTRY((char*)#ZN, N, A, 0)
#else
/* This causes warnings from GCC >= 4.2 (assigning a string literal to char*).
 * But this seems to be unavoidable without directly assuming knowledge of
 * the structure, which changed between PHP4 and PHP5. */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_NAMED_FE(ZN, N, A)
#endif

#ifndef Z_SET_ISREF_P
/* For PHP < 5.3 */
# define Z_SET_ISREF_P(z) (z)->is_ref = 1
#endif
#ifndef Z_SET_REFCOUNT_P
/* For PHP < 5.3 */
# define Z_SET_REFCOUNT_P(z, rc) (z)->refcount = (rc)
#endif

#define SWIG_LONG_CONSTANT(N, V) zend_register_long_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_DOUBLE_CONSTANT(N, V) zend_register_double_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_STRING_CONSTANT(N, V) zend_register_stringl_constant((char*)#N, sizeof(#N), (char*)(V), strlen(V), CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_CHAR_CONSTANT(N, V) do {\
    static char swig_char = (V);\
    zend_register_stringl_constant((char*)#N, sizeof(#N), &swig_char, 1, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC);\
} while (0)

/* These TSRMLS_ stuff should already be defined now, but with older php under
   redhat are not... */
#ifndef TSRMLS_D
#define TSRMLS_D
#endif
#ifndef TSRMLS_DC
#define TSRMLS_DC
#endif
#ifndef TSRMLS_C
#define TSRMLS_C
#endif
#ifndef TSRMLS_CC
#define TSRMLS_CC
#endif

#ifdef __cplusplus
}
#endif

/* But in fact SWIG_ConvertPtr is the native interface for getting typed
   pointer values out of zvals.  We need the TSRMLS_ macros for when we
   make PHP type calls later as we handle php resources */
#define SWIG_ConvertPtr(obj,pp,type,flags) SWIG_ZTS_ConvertPtr(obj,pp,type,flags TSRMLS_CC)


#define SWIG_fail goto fail

static const char *default_error_msg = "Unknown error occurred";
static int default_error_code = E_ERROR;

#define SWIG_PHP_Arg_Error_Msg(argnum,extramsg) "Error in argument " #argnum " "#extramsg

#define SWIG_PHP_Error(code,msg) do { SWIG_ErrorCode() = code; SWIG_ErrorMsg() = msg; SWIG_fail; } while (0)

#define SWIG_contract_assert(expr,msg) \
  if (!(expr) ) { zend_printf("Contract Assert Failed %s\n",msg ); } else

/* Standard SWIG API */
#define SWIG_GetModule(clientdata) SWIG_Php_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_Php_SetModule(pointer)

/* used to wrap returned objects in so we know whether they are newobject
   and need freeing, or not */
typedef struct {
  void * ptr;
  int newobject;
} swig_object_wrapper;

/* empty zend destructor for types without one */
static ZEND_RSRC_DTOR_FUNC(SWIG_landfill) { (void)rsrc; }

#define SWIG_SetPointerZval(a,b,c,d) SWIG_ZTS_SetPointerZval(a,b,c,d TSRMLS_CC)
#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a))

static void
SWIG_ZTS_SetPointerZval(zval *z, void *ptr, swig_type_info *type, int newobject TSRMLS_DC) {
  /*
   * First test for Null pointers.  Return those as PHP native NULL
   */
  if (!ptr ) {
    ZVAL_NULL(z);
    return;
  }
  if (type->clientdata) {
    swig_object_wrapper *value;
    if (! (*(int *)(type->clientdata)))
      zend_error(E_ERROR, "Type: %s failed to register with zend",type->name);
    value=(swig_object_wrapper *)emalloc(sizeof(swig_object_wrapper));
    value->ptr=ptr;
    value->newobject=(newobject & 1);
    if ((newobject & 2) == 0) {
      /* Just register the pointer as a resource. */
      ZEND_REGISTER_RESOURCE(z, value, *(int *)(type->clientdata));
    } else {
      /*
       * Wrap the resource in an object, the resource will be accessible
       * via the "_cPtr" member. This is currently only used by
       * directorin typemaps.
       */
      zval *resource;
      zend_class_entry **ce = NULL;
      const char *type_name = type->name+3; /* +3 so: _p_Foo -> Foo */
      size_t type_name_len;
      int result;
      const char * p;

      /* Namespace__Foo -> Foo */
      /* FIXME: ugly and goes wrong for classes with __ in their names. */
      while ((p = strstr(type_name, "__")) != NULL) {
        type_name = p + 2;
      }
      type_name_len = strlen(type_name);

      MAKE_STD_ZVAL(resource);
      ZEND_REGISTER_RESOURCE(resource, value, *(int *)(type->clientdata));
      if (SWIG_PREFIX_LEN > 0) {
        char * classname = (char*)emalloc(SWIG_PREFIX_LEN + type_name_len + 1);
        strcpy(classname, SWIG_PREFIX);
        strcpy(classname + SWIG_PREFIX_LEN, type_name);
        result = zend_lookup_class(classname, SWIG_PREFIX_LEN + type_name_len, &ce TSRMLS_CC);
        efree(classname);
      } else {
        result = zend_lookup_class((char *)type_name, type_name_len, &ce TSRMLS_CC);
      }
      if (result != SUCCESS) {
        /* class does not exist */
        object_init(z);
      } else {
        object_init_ex(z, *ce);
      }
      Z_SET_REFCOUNT_P(z, 1);
      Z_SET_ISREF_P(z);
      zend_hash_update(HASH_OF(z), (char*)"_cPtr", sizeof("_cPtr"), (void*)&resource, sizeof(zval), NULL);
    }
    return;
  }
  zend_error(E_ERROR, "Type: %s not registered with zend",type->name);
}

/* This pointer conversion routine takes the native pointer p (along with
   its type name) and converts it by calling appropriate casting functions
   according to ty.  The resultant pointer is returned, or NULL is returned
   if the pointer can't be cast.

   Sadly PHP has no API to find a type name from a type id, only from an
   instance of a resource of the type id, so we have to pass type_name as well.

   The two functions which might call this are:
   SWIG_ZTS_ConvertResourcePtr which gets the type name from the resource
   and the registered zend destructors for which we have one per type each
   with the type name hard wired in. */
static void *
SWIG_ZTS_ConvertResourceData(void * p, const char *type_name, swig_type_info *ty TSRMLS_DC) {
  swig_cast_info *tc;
  void *result = 0;

  if (!ty) {
    /* They don't care about the target type, so just pass on the pointer! */
    return p;
  }

  if (! type_name) {  
    /* can't convert p to ptr type ty if we don't know what type p is */
    return NULL;
  }

  /* convert and cast p from type_name to ptr as ty. */
  tc = SWIG_TypeCheck(type_name, ty);
  if (tc) {
    int newmemory = 0;
    result = SWIG_TypeCast(tc, p, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  }
  return result;
}

/* This function returns a pointer of type ty by extracting the pointer
   and type info from the resource in z.  z must be a resource.
   If it fails, NULL is returned.
   It uses SWIG_ZTS_ConvertResourceData to do the real work. */
static void *
SWIG_ZTS_ConvertResourcePtr(zval *z, swig_type_info *ty, int flags TSRMLS_DC) {
  swig_object_wrapper *value;
  void *p;
  int type;
  const char *type_name;

  value = (swig_object_wrapper *) zend_list_find(z->value.lval, &type);
  if ( flags & SWIG_POINTER_DISOWN ) {
    value->newobject = 0;
  }
  p = value->ptr;
  if (type==-1) return NULL;

  type_name=zend_rsrc_list_get_rsrc_type(z->value.lval TSRMLS_CC);

  return SWIG_ZTS_ConvertResourceData(p, type_name, ty TSRMLS_CC);
}

/* We allow passing of a RESOURCE pointing to the object or an OBJECT whose
   _cPtr is a resource pointing to the object */
static int
SWIG_ZTS_ConvertPtr(zval *z, void **ptr, swig_type_info *ty, int flags TSRMLS_DC) {
  if (z == NULL) {
    *ptr = 0;
    return 0;
  }

  switch (z->type) {
    case IS_OBJECT: {
      zval ** _cPtr;
      if (zend_hash_find(HASH_OF(z),(char*)"_cPtr",sizeof("_cPtr"),(void**)&_cPtr)==SUCCESS) {
	if ((*_cPtr)->type==IS_RESOURCE) {
	  *ptr = SWIG_ZTS_ConvertResourcePtr(*_cPtr, ty, flags TSRMLS_CC);
	  return (*ptr == NULL ? -1 : 0);
	}
      }
      break;
    }
    case IS_RESOURCE:
      *ptr = SWIG_ZTS_ConvertResourcePtr(z, ty, flags TSRMLS_CC);
      return (*ptr == NULL ? -1 : 0);
    case IS_NULL:
      *ptr = 0;
      return 0;
  }

  return -1;
}

static char const_name[] = "swig_runtime_data_type_pointer";
static swig_module_info *SWIG_Php_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  zval *pointer;
  swig_module_info *ret = 0;

  MAKE_STD_ZVAL(pointer);

  TSRMLS_FETCH();

  if (zend_get_constant(const_name, sizeof(const_name) - 1, pointer TSRMLS_CC)) {
    if (pointer->type == IS_LONG) {
      ret = (swig_module_info *) pointer->value.lval;
    }
  } 
  FREE_ZVAL(pointer);
  return ret; 
}

static void SWIG_Php_SetModule(swig_module_info *pointer) {
  TSRMLS_FETCH();
  REGISTER_MAIN_LONG_CONSTANT(const_name, (long) pointer, 0);
}

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_MyClass swig_types[0]
#define SWIGTYPE_p_RetsMetadata swig_types[1]
#define SWIGTYPE_p_Struct swig_types[2]
#define SWIGTYPE_p_Structure swig_types[3]
#define SWIGTYPE_p_const_reference swig_types[4]
#define SWIGTYPE_p_float swig_types[5]
#define SWIGTYPE_p_int swig_types[6]
#define SWIGTYPE_p_size_type swig_types[7]
#define SWIGTYPE_p_std__vectorT_MyClass_p_t swig_types[8]
#define SWIGTYPE_p_std__vectorT_Struct_const_p_t swig_types[9]
#define SWIGTYPE_p_std__vectorT_Struct_p_t swig_types[10]
#define SWIGTYPE_p_std__vectorT_Struct_t swig_types[11]
#define SWIGTYPE_p_std__vectorT_bool_t swig_types[12]
#define SWIGTYPE_p_std__vectorT_char_t swig_types[13]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[14]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[15]
#define SWIGTYPE_p_std__vectorT_int_const_p_t swig_types[16]
#define SWIGTYPE_p_std__vectorT_int_p_t swig_types[17]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[18]
#define SWIGTYPE_p_std__vectorT_long_t swig_types[19]
#define SWIGTYPE_p_std__vectorT_short_t swig_types[20]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[21]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[22]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[23]
#define SWIGTYPE_p_std__vectorT_unsigned_long_t swig_types[24]
#define SWIGTYPE_p_std__vectorT_unsigned_short_t swig_types[25]
#define SWIGTYPE_p_value_type swig_types[26]
static swig_type_info *swig_types[28];
static swig_module_info swig_module = {swig_types, 27, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

/* header section */
ZEND_BEGIN_MODULE_GLOBALS(li_std_vector)
const char *error_msg;
int error_code;
ZEND_END_MODULE_GLOBALS(li_std_vector)
ZEND_DECLARE_MODULE_GLOBALS(li_std_vector)
#ifdef ZTS
#define SWIG_ErrorMsg() TSRMG(li_std_vector_globals_id, zend_li_std_vector_globals *, error_msg )
#define SWIG_ErrorCode() TSRMG(li_std_vector_globals_id, zend_li_std_vector_globals *, error_code )
#else
#define SWIG_ErrorMsg() (li_std_vector_globals.error_msg)
#define SWIG_ErrorCode() (li_std_vector_globals.error_code)
#endif

#ifdef __GNUC__
static void SWIG_FAIL() __attribute__ ((__noreturn__));
#endif

static void SWIG_FAIL() {
    TSRMLS_FETCH();
    zend_error(SWIG_ErrorCode(), "%s", SWIG_ErrorMsg());
    abort();
}

static void li_std_vector_init_globals(zend_li_std_vector_globals *globals ) {
  globals->error_msg = default_error_msg;
  globals->error_code = default_error_code;
}
static void li_std_vector_destroy_globals(zend_li_std_vector_globals * globals) { (void)globals; }

static void SWIG_ResetError() {
  TSRMLS_FETCH();
  SWIG_ErrorMsg() = default_error_msg;
  SWIG_ErrorCode() = default_error_code;
}

ZEND_NAMED_FUNCTION(_wrap_swig_li_std_vector_alter_newobject) {
  zval **args[2];
  swig_object_wrapper *value;
  int type;
  int thisown;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  value->newobject = zval_is_true(*args[1]);

  return;
}
ZEND_NAMED_FUNCTION(_wrap_swig_li_std_vector_get_newobject) {
  zval **args[1];
  swig_object_wrapper *value;
  int type;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  RETVAL_LONG(value->newobject);

  return;
}
#define SWIG_name  "li_std_vector"
#ifdef __cplusplus
extern "C" {
#endif
#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
#include "php_li_std_vector.h"
#ifdef __cplusplus
}
#endif


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include "zend_exceptions.h"
#define SWIG_exception(code, msg) { zend_throw_exception(NULL, (char*)msg, code TSRMLS_CC); }


#include <stdexcept>


#include <string>


#include <algorithm>
#include <functional>
#include <numeric>

SWIGINTERN bool std_vector_Sl_int_Sg__is_empty(std::vector< int > const *self){
        return self->empty();
      }
SWIGINTERN int std_vector_Sl_int_Sg__pop(std::vector< int > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        int x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__is_empty(std::vector< bool > const *self){
        return self->empty();
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__pop(std::vector< bool > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        bool x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< bool >::const_reference std_vector_Sl_bool_Sg__get(std::vector< bool > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__set(std::vector< bool > *self,int i,std::vector< bool >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_char_Sg__is_empty(std::vector< char > const *self){
        return self->empty();
      }
SWIGINTERN char std_vector_Sl_char_Sg__pop(std::vector< char > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        char x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< char >::const_reference std_vector_Sl_char_Sg__get(std::vector< char > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_char_Sg__set(std::vector< char > *self,int i,std::vector< char >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_short_Sg__is_empty(std::vector< short > const *self){
        return self->empty();
      }
SWIGINTERN short std_vector_Sl_short_Sg__pop(std::vector< short > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        short x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< short >::const_reference std_vector_Sl_short_Sg__get(std::vector< short > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_short_Sg__set(std::vector< short > *self,int i,std::vector< short >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_long_Sg__is_empty(std::vector< long > const *self){
        return self->empty();
      }
SWIGINTERN long std_vector_Sl_long_Sg__pop(std::vector< long > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        long x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< long >::const_reference std_vector_Sl_long_Sg__get(std::vector< long > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_long_Sg__set(std::vector< long > *self,int i,std::vector< long >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_char_Sg__is_empty(std::vector< unsigned char > const *self){
        return self->empty();
      }
SWIGINTERN unsigned char std_vector_Sl_unsigned_SS_char_Sg__pop(std::vector< unsigned char > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        unsigned char x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< unsigned char >::const_reference std_vector_Sl_unsigned_SS_char_Sg__get(std::vector< unsigned char > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__set(std::vector< unsigned char > *self,int i,std::vector< unsigned char >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_int_Sg__is_empty(std::vector< unsigned int > const *self){
        return self->empty();
      }
SWIGINTERN unsigned int std_vector_Sl_unsigned_SS_int_Sg__pop(std::vector< unsigned int > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        unsigned int x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< unsigned int >::const_reference std_vector_Sl_unsigned_SS_int_Sg__get(std::vector< unsigned int > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__set(std::vector< unsigned int > *self,int i,std::vector< unsigned int >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_short_Sg__is_empty(std::vector< unsigned short > const *self){
        return self->empty();
      }
SWIGINTERN unsigned short std_vector_Sl_unsigned_SS_short_Sg__pop(std::vector< unsigned short > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        unsigned short x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< unsigned short >::const_reference std_vector_Sl_unsigned_SS_short_Sg__get(std::vector< unsigned short > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_short_Sg__set(std::vector< unsigned short > *self,int i,std::vector< unsigned short >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_long_Sg__is_empty(std::vector< unsigned long > const *self){
        return self->empty();
      }
SWIGINTERN unsigned long std_vector_Sl_unsigned_SS_long_Sg__pop(std::vector< unsigned long > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        unsigned long x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< unsigned long >::const_reference std_vector_Sl_unsigned_SS_long_Sg__get(std::vector< unsigned long > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg__set(std::vector< unsigned long > *self,int i,std::vector< unsigned long >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_double_Sg__is_empty(std::vector< double > const *self){
        return self->empty();
      }
SWIGINTERN double std_vector_Sl_double_Sg__pop(std::vector< double > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        double x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__is_empty(std::vector< std::string > const *self){
        return self->empty();
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        std::string x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }

typedef float Real;
size_t typedef_test(std::vector<int>::size_type s) { return s; }

SWIGINTERN bool std_vector_Sl_Real_Sg__is_empty(std::vector< Real > const *self){
        return self->empty();
      }
SWIGINTERN float std_vector_Sl_Real_Sg__pop(std::vector< Real > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        float x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< float >::const_reference std_vector_Sl_Real_Sg__get(std::vector< Real > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Real_Sg__set(std::vector< Real > *self,int i,std::vector< float >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }


double average(std::vector<int> v) {
    return std::accumulate(v.begin(),v.end(),0.0)/v.size();
}

std::vector<Real> half(const std::vector<Real>& v) {
    std::vector<Real> w(v);
    for (std::vector<Real>::size_type i=0; i<w.size(); i++)
        w[i] /= 2.0;
    return w;
}

void halve_in_place(std::vector<double>& v) {
    std::transform(v.begin(),v.end(),v.begin(),
                   std::bind2nd(std::divides<double>(),2.0));
}

struct Struct {
  double num;
  Struct() : num(0.0) {}
  Struct(double d) : num(d) {}
};

struct Structure {
  double num;
  Structure() : num(0.0) {}
  Structure(double d) : num(d) {}
};

const std::vector<Real> & vecreal(const std::vector<Real> & vec) { return vec; }

const std::vector<int> & vecintptr(const std::vector<int> & vec) { return vec; }
const std::vector<int *> & vecintptr(const std::vector<int *> & vec) { return vec; }
const std::vector<const int *> & vecintconstptr(const std::vector<const int *> & vec) { return vec; }

const std::vector<Struct> & vecstruct(const std::vector<Struct> & vec) { return vec; }
const std::vector<Struct *> & vecstructptr(const std::vector<Struct *> & vec) { return vec; }
const std::vector<const Struct *> & vecstructconstptr(const std::vector<const Struct *> & vec) { return vec; }

SWIGINTERN bool std_vector_Sl_int_Sm__Sg__is_empty(std::vector< int * > const *self){
        return self->empty();
      }
SWIGINTERN int *std_vector_Sl_int_Sm__Sg__pop(std::vector< int * > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        int * x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< int * >::const_reference std_vector_Sl_int_Sm__Sg__get(std::vector< int * > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int_Sm__Sg__set(std::vector< int * > *self,int i,std::vector< int * >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_int_SS_const_Sm__Sg__is_empty(std::vector< int const * > const *self){
        return self->empty();
      }
SWIGINTERN int const *std_vector_Sl_int_SS_const_Sm__Sg__pop(std::vector< int const * > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        int const * x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< int const * >::const_reference std_vector_Sl_int_SS_const_Sm__Sg__get(std::vector< int const * > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int_SS_const_Sm__Sg__set(std::vector< int const * > *self,int i,std::vector< int const * >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_Struct_Sg__is_empty(std::vector< Struct > const *self){
        return self->empty();
      }
SWIGINTERN Struct std_vector_Sl_Struct_Sg__pop(std::vector< Struct > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        Struct x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< Struct >::const_reference std_vector_Sl_Struct_Sg__get(std::vector< Struct > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Struct_Sg__set(std::vector< Struct > *self,int i,std::vector< Struct >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_Struct_Sm__Sg__is_empty(std::vector< Struct * > const *self){
        return self->empty();
      }
SWIGINTERN Struct *std_vector_Sl_Struct_Sm__Sg__pop(std::vector< Struct * > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        Struct * x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< Struct * >::const_reference std_vector_Sl_Struct_Sm__Sg__get(std::vector< Struct * > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Struct_Sm__Sg__set(std::vector< Struct * > *self,int i,std::vector< Struct * >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN bool std_vector_Sl_Struct_SS_const_Sm__Sg__is_empty(std::vector< Struct const * > const *self){
        return self->empty();
      }
SWIGINTERN Struct const *std_vector_Sl_Struct_SS_const_Sm__Sg__pop(std::vector< Struct const * > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        Struct const * x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< Struct const * >::const_reference std_vector_Sl_Struct_SS_const_Sm__Sg__get(std::vector< Struct const * > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_Struct_SS_const_Sm__Sg__set(std::vector< Struct const * > *self,int i,std::vector< Struct const * >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }

  struct MyClass {};
  typedef MyClass *MyClassPtr;
  typedef std::vector<MyClassPtr> MyClassVector;

SWIGINTERN bool std_vector_Sl_MyClass_Sm__Sg__is_empty(std::vector< MyClass * > const *self){
        return self->empty();
      }
SWIGINTERN MyClass *std_vector_Sl_MyClass_Sm__Sg__pop(std::vector< MyClass * > *self){
        if (self->size() == 0)
          throw std::out_of_range("pop from empty vector");
        MyClass * x = self->back();
        self->pop_back();
        return x;
      }
SWIGINTERN std::vector< MyClass * >::const_reference std_vector_Sl_MyClass_Sm__Sg__get(std::vector< MyClass * > *self,int i){
        int size = int(self->size());
        if (i>=0 && i<size)
          return (*self)[i];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_MyClass_Sm__Sg__set(std::vector< MyClass * > *self,int i,std::vector< MyClass * >::value_type const &val){
        int size = int(self->size());
        if (i>=0 && i<size)
          (*self)[i] = val;
        else
          throw std::out_of_range("vector index out of range");
      }

  class RetsMetadata
  {
  public:
    MyClassVector GetAllResources(size_t n) const
    {
      return MyClassVector(n, 0);
    }
  };


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_MyClass = {"_p_MyClass", "std::vector< MyClass * >::value_type|MyClass *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RetsMetadata = {"_p_RetsMetadata", "RetsMetadata *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Struct = {"_p_Struct", "std::vector< Struct >::value_type *|std::vector< Struct * >::value_type|std::vector< Struct const * >::value_type|Struct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Structure = {"_p_Structure", "Structure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|std::vector< int * >::value_type|std::vector< int const * >::value_type", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_MyClass_p_t = {"_p_std__vectorT_MyClass_p_t", "std::vector< MyClass * > *|MyClassVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Struct_const_p_t = {"_p_std__vectorT_Struct_const_p_t", "std::vector< Struct const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Struct_p_t = {"_p_std__vectorT_Struct_p_t", "std::vector< Struct * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Struct_t = {"_p_std__vectorT_Struct_t", "std::vector< Struct > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_bool_t = {"_p_std__vectorT_bool_t", "std::vector< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_char_t = {"_p_std__vectorT_char_t", "std::vector< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *|std::vector< Real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_const_p_t = {"_p_std__vectorT_int_const_p_t", "std::vector< int const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_p_t = {"_p_std__vectorT_int_p_t", "std::vector< int * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_t = {"_p_std__vectorT_long_t", "std::vector< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_short_t = {"_p_std__vectorT_short_t", "std::vector< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_t = {"_p_std__vectorT_unsigned_long_t", "std::vector< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_t = {"_p_std__vectorT_unsigned_short_t", "std::vector< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_MyClass,
  &_swigt__p_RetsMetadata,
  &_swigt__p_Struct,
  &_swigt__p_Structure,
  &_swigt__p_const_reference,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_size_type,
  &_swigt__p_std__vectorT_MyClass_p_t,
  &_swigt__p_std__vectorT_Struct_const_p_t,
  &_swigt__p_std__vectorT_Struct_p_t,
  &_swigt__p_std__vectorT_Struct_t,
  &_swigt__p_std__vectorT_bool_t,
  &_swigt__p_std__vectorT_char_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int_const_p_t,
  &_swigt__p_std__vectorT_int_p_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_long_t,
  &_swigt__p_std__vectorT_short_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_std__vectorT_unsigned_long_t,
  &_swigt__p_std__vectorT_unsigned_short_t,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_MyClass[] = {  {&_swigt__p_MyClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RetsMetadata[] = {  {&_swigt__p_RetsMetadata, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Struct[] = {  {&_swigt__p_Struct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Structure[] = {  {&_swigt__p_Structure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_MyClass_p_t[] = {  {&_swigt__p_std__vectorT_MyClass_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Struct_const_p_t[] = {  {&_swigt__p_std__vectorT_Struct_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Struct_p_t[] = {  {&_swigt__p_std__vectorT_Struct_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Struct_t[] = {  {&_swigt__p_std__vectorT_Struct_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bool_t[] = {  {&_swigt__p_std__vectorT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_t[] = {  {&_swigt__p_std__vectorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_const_p_t[] = {  {&_swigt__p_std__vectorT_int_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_p_t[] = {  {&_swigt__p_std__vectorT_int_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_t[] = {  {&_swigt__p_std__vectorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_t[] = {  {&_swigt__p_std__vectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_MyClass,
  _swigc__p_RetsMetadata,
  _swigc__p_Struct,
  _swigc__p_Structure,
  _swigc__p_const_reference,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_size_type,
  _swigc__p_std__vectorT_MyClass_p_t,
  _swigc__p_std__vectorT_Struct_const_p_t,
  _swigc__p_std__vectorT_Struct_p_t,
  _swigc__p_std__vectorT_Struct_t,
  _swigc__p_std__vectorT_bool_t,
  _swigc__p_std__vectorT_char_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int_const_p_t,
  _swigc__p_std__vectorT_int_p_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_long_t,
  _swigc__p_std__vectorT_short_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_std__vectorT_unsigned_long_t,
  _swigc__p_std__vectorT_unsigned_short_t,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* end header section */
/* vdecl subsection */
static int le_swig__p_std__vectorT_unsigned_long_t=0; /* handle for ULongVector */
static int le_swig__p_std__vectorT_long_t=0; /* handle for LongVector */
static int le_swig__p_std__vectorT_unsigned_char_t=0; /* handle for UCharVector */
static int le_swig__p_std__vectorT_char_t=0; /* handle for CharVector */
static int le_swig__p_std__vectorT_int_p_t=0; /* handle for IntPtrVector */
static int le_swig__p_Struct=0; /* handle for Struct */
static int le_swig__p_MyClass=0; /* handle for MyClass */
static int le_swig__p_const_reference=0; /* handle for _p_const_reference */
static int le_swig__p_std__vectorT_double_t=0; /* handle for DoubleVector */
static int le_swig__p_float=0; /* handle for _p_float */
static int le_swig__p_std__vectorT_Struct_t=0; /* handle for StructVector */
static int le_swig__p_size_type=0; /* handle for _p_size_type */
static int le_swig__p_std__vectorT_int_const_p_t=0; /* handle for IntConstPtrVector */
static int le_swig__p_std__vectorT_Struct_const_p_t=0; /* handle for StructConstPtrVector */
static int le_swig__p_RetsMetadata=0; /* handle for RetsMetadata */
static int le_swig__p_std__vectorT_bool_t=0; /* handle for BoolVector */
static int le_swig__p_std__vectorT_unsigned_int_t=0; /* handle for UIntVector */
static int le_swig__p_std__vectorT_int_t=0; /* handle for IntVector */
static int le_swig__p_value_type=0; /* handle for _p_value_type */
static int le_swig__p_std__vectorT_unsigned_short_t=0; /* handle for UShortVector */
static int le_swig__p_std__vectorT_short_t=0; /* handle for ShortVector */
static int le_swig__p_std__vectorT_MyClass_p_t=0; /* handle for MyClassPtrVector */
static int le_swig__p_std__vectorT_std__string_t=0; /* handle for StringVector */
static int le_swig__p_std__vectorT_Struct_p_t=0; /* handle for StructPtrVector */
static int le_swig__p_Structure=0; /* handle for Structure */
static int le_swig__p_std__vectorT_float_t=0; /* handle for RealVector */
static int le_swig__p_int=0; /* handle for _p_int */
/* end vdecl subsection */
/* wrapper section */
ZEND_NAMED_FUNCTION(_wrap_new_IntVector__SWIG_0) {
  std::vector< int > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< int > *)new std::vector< int >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_IntVector__SWIG_1) {
  std::vector< int >::size_type arg1 ;
  zval **args[1];
  std::vector< int > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< int >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< int > *)new std::vector< int >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_IntVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_IntVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_IntVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_IntVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntVector_size) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  zval **args[1];
  std::vector< int >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntVector_size. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntVector_capacity) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  zval **args[1];
  std::vector< int >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntVector_capacity. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntVector_reserve) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntVector_reserve. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< int >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntVector_clear) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntVector_clear. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntVector_push) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntVector_push. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (std::vector< int >::value_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntVector_is_empty) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntVector_is_empty. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_int_Sg__is_empty((std::vector< int > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntVector_pop) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntVector_pop. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (int)std_vector_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntVector_get) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< int >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntVector_get. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntVector_set) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntVector_set. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (std::vector< int >::value_type) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_IntVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< int > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_int_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(int)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_BoolVector__SWIG_0) {
  std::vector< bool > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< bool > *)new std::vector< bool >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_bool_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_BoolVector__SWIG_1) {
  std::vector< bool >::size_type arg1 ;
  zval **args[1];
  std::vector< bool > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< bool >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< bool > *)new std::vector< bool >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_bool_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_BoolVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_BoolVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_BoolVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_BoolVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BoolVector_size) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  zval **args[1];
  std::vector< bool >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_bool_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BoolVector_size. Expected SWIGTYPE_p_std__vectorT_bool_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< bool > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BoolVector_capacity) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  zval **args[1];
  std::vector< bool >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_bool_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BoolVector_capacity. Expected SWIGTYPE_p_std__vectorT_bool_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< bool > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BoolVector_reserve) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_bool_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BoolVector_reserve. Expected SWIGTYPE_p_std__vectorT_bool_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< bool >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BoolVector_clear) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_bool_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BoolVector_clear. Expected SWIGTYPE_p_std__vectorT_bool_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BoolVector_push) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::value_type *arg2 = 0 ;
  std::vector< bool >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_bool_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BoolVector_push. Expected SWIGTYPE_p_std__vectorT_bool_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  temp2 = (std::vector< bool >::value_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->push_back((std::vector< bool >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BoolVector_is_empty) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_bool_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BoolVector_is_empty. Expected SWIGTYPE_p_std__vectorT_bool_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_bool_Sg__is_empty((std::vector< bool > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BoolVector_pop) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_bool_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BoolVector_pop. Expected SWIGTYPE_p_std__vectorT_bool_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (bool)std_vector_Sl_bool_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BoolVector_get) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< bool >::const_reference result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_bool_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BoolVector_get. Expected SWIGTYPE_p_std__vectorT_bool_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< bool >::const_reference)std_vector_Sl_bool_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BoolVector_set) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::value_type *arg3 = 0 ;
  std::vector< bool >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_bool_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BoolVector_set. Expected SWIGTYPE_p_std__vectorT_bool_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  temp3 = (std::vector< bool >::value_type) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_bool_Sg__set(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_BoolVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< bool > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_bool_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(bool)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_CharVector__SWIG_0) {
  std::vector< char > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< char > *)new std::vector< char >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_char_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_CharVector__SWIG_1) {
  std::vector< char >::size_type arg1 ;
  zval **args[1];
  std::vector< char > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< char >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< char > *)new std::vector< char >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_char_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_CharVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_CharVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_CharVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_CharVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_CharVector_size) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  zval **args[1];
  std::vector< char >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CharVector_size. Expected SWIGTYPE_p_std__vectorT_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< char > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_CharVector_capacity) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  zval **args[1];
  std::vector< char >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CharVector_capacity. Expected SWIGTYPE_p_std__vectorT_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< char > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_CharVector_reserve) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CharVector_reserve. Expected SWIGTYPE_p_std__vectorT_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< char >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_CharVector_clear) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CharVector_clear. Expected SWIGTYPE_p_std__vectorT_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_CharVector_push) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  std::vector< char >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CharVector_push. Expected SWIGTYPE_p_std__vectorT_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,57,CONVERT_CHAR_IN@*/
  convert_to_string_ex(args[1]);
  temp2 = (std::vector< char >::value_type) *Z_STRVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_CharVector_is_empty) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CharVector_is_empty. Expected SWIGTYPE_p_std__vectorT_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_char_Sg__is_empty((std::vector< char > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_CharVector_pop) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  zval **args[1];
  char result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CharVector_pop. Expected SWIGTYPE_p_std__vectorT_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (char)std_vector_Sl_char_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_STRINGL(return_value,&result, 1, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_CharVector_get) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< char >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CharVector_get. Expected SWIGTYPE_p_std__vectorT_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_STRINGL(return_value,&*result, 1, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_CharVector_set) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  std::vector< char >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of CharVector_set. Expected SWIGTYPE_p_std__vectorT_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,57,CONVERT_CHAR_IN@*/
  convert_to_string_ex(args[2]);
  temp3 = (std::vector< char >::value_type) *Z_STRVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_char_Sg__set(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_CharVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< char > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_char_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(char)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_ShortVector__SWIG_0) {
  std::vector< short > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< short > *)new std::vector< short >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_short_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_ShortVector__SWIG_1) {
  std::vector< short >::size_type arg1 ;
  zval **args[1];
  std::vector< short > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< short >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< short > *)new std::vector< short >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_short_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_ShortVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_ShortVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_ShortVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_ShortVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ShortVector_size) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  zval **args[1];
  std::vector< short >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ShortVector_size. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< short > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ShortVector_capacity) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  zval **args[1];
  std::vector< short >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ShortVector_capacity. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< short > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ShortVector_reserve) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ShortVector_reserve. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< short >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ShortVector_clear) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ShortVector_clear. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ShortVector_push) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short >::value_type *arg2 = 0 ;
  std::vector< short >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ShortVector_push. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (std::vector< short >::value_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->push_back((std::vector< short >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ShortVector_is_empty) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ShortVector_is_empty. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_short_Sg__is_empty((std::vector< short > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ShortVector_pop) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  zval **args[1];
  short result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ShortVector_pop. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (short)std_vector_Sl_short_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ShortVector_get) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< short >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ShortVector_get. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< short >::value_type *) &std_vector_Sl_short_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ShortVector_set) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  int arg2 ;
  std::vector< short >::value_type *arg3 = 0 ;
  std::vector< short >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ShortVector_set. Expected SWIGTYPE_p_std__vectorT_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (std::vector< short >::value_type) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_short_Sg__set(arg1,arg2,(short const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ShortVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< short > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_short_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(short)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_LongVector__SWIG_0) {
  std::vector< long > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< long > *)new std::vector< long >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_long_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_LongVector__SWIG_1) {
  std::vector< long >::size_type arg1 ;
  zval **args[1];
  std::vector< long > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< long >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< long > *)new std::vector< long >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_long_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_LongVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_LongVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_LongVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_LongVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LongVector_size) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  zval **args[1];
  std::vector< long >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongVector_size. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< long > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LongVector_capacity) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  zval **args[1];
  std::vector< long >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongVector_capacity. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< long > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LongVector_reserve) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongVector_reserve. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< long >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LongVector_clear) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongVector_clear. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LongVector_push) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::value_type *arg2 = 0 ;
  std::vector< long >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongVector_push. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (std::vector< long >::value_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->push_back((std::vector< long >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LongVector_is_empty) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongVector_is_empty. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_long_Sg__is_empty((std::vector< long > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LongVector_pop) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  zval **args[1];
  long result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongVector_pop. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (long)std_vector_Sl_long_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LongVector_get) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< long >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongVector_get. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< long >::value_type *) &std_vector_Sl_long_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LongVector_set) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  std::vector< long >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LongVector_set. Expected SWIGTYPE_p_std__vectorT_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (std::vector< long >::value_type) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_long_Sg__set(arg1,arg2,(long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_LongVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< long > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_long_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(long)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_UCharVector__SWIG_0) {
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_unsigned_char_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_UCharVector__SWIG_1) {
  std::vector< unsigned char >::size_type arg1 ;
  zval **args[1];
  std::vector< unsigned char > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< unsigned char >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_unsigned_char_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_UCharVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_UCharVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_UCharVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_UCharVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UCharVector_size) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  zval **args[1];
  std::vector< unsigned char >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UCharVector_size. Expected SWIGTYPE_p_std__vectorT_unsigned_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< unsigned char > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UCharVector_capacity) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  zval **args[1];
  std::vector< unsigned char >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UCharVector_capacity. Expected SWIGTYPE_p_std__vectorT_unsigned_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< unsigned char > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UCharVector_reserve) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UCharVector_reserve. Expected SWIGTYPE_p_std__vectorT_unsigned_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< unsigned char >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UCharVector_clear) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UCharVector_clear. Expected SWIGTYPE_p_std__vectorT_unsigned_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UCharVector_push) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UCharVector_push. Expected SWIGTYPE_p_std__vectorT_unsigned_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (std::vector< unsigned char >::value_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->push_back((std::vector< unsigned char >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UCharVector_is_empty) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UCharVector_is_empty. Expected SWIGTYPE_p_std__vectorT_unsigned_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_unsigned_SS_char_Sg__is_empty((std::vector< unsigned char > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UCharVector_pop) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  zval **args[1];
  unsigned char result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UCharVector_pop. Expected SWIGTYPE_p_std__vectorT_unsigned_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (unsigned char)std_vector_Sl_unsigned_SS_char_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UCharVector_get) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< unsigned char >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UCharVector_get. Expected SWIGTYPE_p_std__vectorT_unsigned_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_unsigned_SS_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UCharVector_set) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UCharVector_set. Expected SWIGTYPE_p_std__vectorT_unsigned_char_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (std::vector< unsigned char >::value_type) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_unsigned_SS_char_Sg__set(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_UCharVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< unsigned char > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_unsigned_char_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(unsigned char)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_UIntVector__SWIG_0) {
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_unsigned_int_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_UIntVector__SWIG_1) {
  std::vector< unsigned int >::size_type arg1 ;
  zval **args[1];
  std::vector< unsigned int > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< unsigned int >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_unsigned_int_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_UIntVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_UIntVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_UIntVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_UIntVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UIntVector_size) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  zval **args[1];
  std::vector< unsigned int >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UIntVector_size. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< unsigned int > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UIntVector_capacity) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  zval **args[1];
  std::vector< unsigned int >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UIntVector_capacity. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< unsigned int > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UIntVector_reserve) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UIntVector_reserve. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< unsigned int >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UIntVector_clear) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UIntVector_clear. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UIntVector_push) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UIntVector_push. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (std::vector< unsigned int >::value_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UIntVector_is_empty) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UIntVector_is_empty. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_unsigned_SS_int_Sg__is_empty((std::vector< unsigned int > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UIntVector_pop) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  zval **args[1];
  unsigned int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UIntVector_pop. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (unsigned int)std_vector_Sl_unsigned_SS_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UIntVector_get) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< unsigned int >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UIntVector_get. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_unsigned_SS_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UIntVector_set) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UIntVector_set. Expected SWIGTYPE_p_std__vectorT_unsigned_int_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (std::vector< unsigned int >::value_type) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_unsigned_SS_int_Sg__set(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_UIntVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< unsigned int > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_unsigned_int_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(unsigned int)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_UShortVector__SWIG_0) {
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_unsigned_short_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_UShortVector__SWIG_1) {
  std::vector< unsigned short >::size_type arg1 ;
  zval **args[1];
  std::vector< unsigned short > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< unsigned short >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_unsigned_short_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_UShortVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_UShortVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_UShortVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_UShortVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UShortVector_size) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  zval **args[1];
  std::vector< unsigned short >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UShortVector_size. Expected SWIGTYPE_p_std__vectorT_unsigned_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< unsigned short > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UShortVector_capacity) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  zval **args[1];
  std::vector< unsigned short >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UShortVector_capacity. Expected SWIGTYPE_p_std__vectorT_unsigned_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< unsigned short > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UShortVector_reserve) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  std::vector< unsigned short >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UShortVector_reserve. Expected SWIGTYPE_p_std__vectorT_unsigned_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< unsigned short >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UShortVector_clear) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UShortVector_clear. Expected SWIGTYPE_p_std__vectorT_unsigned_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UShortVector_push) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  std::vector< unsigned short >::value_type *arg2 = 0 ;
  std::vector< unsigned short >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UShortVector_push. Expected SWIGTYPE_p_std__vectorT_unsigned_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (std::vector< unsigned short >::value_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->push_back((std::vector< unsigned short >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UShortVector_is_empty) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UShortVector_is_empty. Expected SWIGTYPE_p_std__vectorT_unsigned_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_unsigned_SS_short_Sg__is_empty((std::vector< unsigned short > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UShortVector_pop) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  zval **args[1];
  unsigned short result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UShortVector_pop. Expected SWIGTYPE_p_std__vectorT_unsigned_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (unsigned short)std_vector_Sl_unsigned_SS_short_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UShortVector_get) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< unsigned short >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UShortVector_get. Expected SWIGTYPE_p_std__vectorT_unsigned_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< unsigned short >::value_type *) &std_vector_Sl_unsigned_SS_short_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_UShortVector_set) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  int arg2 ;
  std::vector< unsigned short >::value_type *arg3 = 0 ;
  std::vector< unsigned short >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_short_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of UShortVector_set. Expected SWIGTYPE_p_std__vectorT_unsigned_short_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (std::vector< unsigned short >::value_type) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_unsigned_SS_short_Sg__set(arg1,arg2,(unsigned short const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_UShortVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< unsigned short > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_unsigned_short_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(unsigned short)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_ULongVector__SWIG_0) {
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_unsigned_long_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_ULongVector__SWIG_1) {
  std::vector< unsigned long >::size_type arg1 ;
  zval **args[1];
  std::vector< unsigned long > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< unsigned long >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_unsigned_long_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_ULongVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_ULongVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_ULongVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_ULongVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ULongVector_size) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  zval **args[1];
  std::vector< unsigned long >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ULongVector_size. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< unsigned long > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ULongVector_capacity) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  zval **args[1];
  std::vector< unsigned long >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ULongVector_capacity. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< unsigned long > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ULongVector_reserve) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ULongVector_reserve. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< unsigned long >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ULongVector_clear) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ULongVector_clear. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ULongVector_push) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::value_type *arg2 = 0 ;
  std::vector< unsigned long >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ULongVector_push. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  temp2 = (std::vector< unsigned long >::value_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->push_back((std::vector< unsigned long >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ULongVector_is_empty) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ULongVector_is_empty. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_unsigned_SS_long_Sg__is_empty((std::vector< unsigned long > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ULongVector_pop) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  zval **args[1];
  unsigned long result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ULongVector_pop. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (unsigned long)std_vector_Sl_unsigned_SS_long_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ULongVector_get) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< unsigned long >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ULongVector_get. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< unsigned long >::value_type *) &std_vector_Sl_unsigned_SS_long_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_LONG(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ULongVector_set) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  int arg2 ;
  std::vector< unsigned long >::value_type *arg3 = 0 ;
  std::vector< unsigned long >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_unsigned_long_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ULongVector_set. Expected SWIGTYPE_p_std__vectorT_unsigned_long_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  temp3 = (std::vector< unsigned long >::value_type) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_unsigned_SS_long_Sg__set(arg1,arg2,(unsigned long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ULongVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< unsigned long > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_unsigned_long_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(unsigned long)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleVector__SWIG_0) {
  std::vector< double > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< double > *)new std::vector< double >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleVector__SWIG_1) {
  std::vector< double >::size_type arg1 ;
  zval **args[1];
  std::vector< double > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< double >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< double > *)new std::vector< double >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_double_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_DoubleVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_DoubleVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_DoubleVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_DoubleVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_size) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval **args[1];
  std::vector< double >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_size. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< double > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_capacity) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval **args[1];
  std::vector< double >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_capacity. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< double > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_reserve) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_reserve. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< double >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_clear) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_clear. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_push) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_push. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  temp2 = (std::vector< double >::value_type) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_is_empty) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_is_empty. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_double_Sg__is_empty((std::vector< double > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_pop) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_pop. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (double)std_vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_get) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< double >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_get. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_DOUBLE(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_DoubleVector_set) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of DoubleVector_set. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  temp3 = (std::vector< double >::value_type) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_DoubleVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< double > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_double_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(double)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_StringVector__SWIG_0) {
  std::vector< std::string > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__string_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_StringVector__SWIG_1) {
  std::vector< std::string >::size_type arg1 ;
  zval **args[1];
  std::vector< std::string > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< std::string >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_std__string_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_StringVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_StringVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_StringVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_StringVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_size) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  zval **args[1];
  std::vector< std::string >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_size. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< std::string > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_capacity) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  zval **args[1];
  std::vector< std::string >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_capacity. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< std::string > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_reserve) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_reserve. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< std::string >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_clear) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_clear. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_push) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  std::vector< std::string >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_push. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_is_empty) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_is_empty. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_std_string_Sg__is_empty((std::vector< std::string > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_pop) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  zval **args[1];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_pop. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_get) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< std::string >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_get. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringVector_set) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  std::vector< std::string >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringVector_set. Expected SWIGTYPE_p_std__vectorT_std__string_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  convert_to_string_ex(args[2]);
  temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  arg3 = &temp3;
  
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_StringVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< std::string > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_std__string_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(std::string)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_typedef_test) {
  std::vector< int >::size_type arg1 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< int >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = typedef_test(arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_RealVector__SWIG_0) {
  std::vector< Real > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< Real > *)new std::vector< Real >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_float_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_RealVector__SWIG_1) {
  std::vector< float >::size_type arg1 ;
  zval **args[1];
  std::vector< Real > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< float >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< Real > *)new std::vector< Real >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_float_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_RealVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_RealVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_RealVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_RealVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RealVector_size) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  zval **args[1];
  std::vector< float >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RealVector_size. Expected SWIGTYPE_p_std__vectorT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< Real > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RealVector_capacity) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  zval **args[1];
  std::vector< float >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RealVector_capacity. Expected SWIGTYPE_p_std__vectorT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< Real > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RealVector_reserve) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  std::vector< float >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RealVector_reserve. Expected SWIGTYPE_p_std__vectorT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< float >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RealVector_clear) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RealVector_clear. Expected SWIGTYPE_p_std__vectorT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RealVector_push) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  std::vector< float >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RealVector_push. Expected SWIGTYPE_p_std__vectorT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  temp2 = (std::vector< float >::value_type) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  arg2 = &temp2;
  
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RealVector_is_empty) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RealVector_is_empty. Expected SWIGTYPE_p_std__vectorT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_Real_Sg__is_empty((std::vector< float > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RealVector_pop) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  zval **args[1];
  float result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RealVector_pop. Expected SWIGTYPE_p_std__vectorT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (float)std_vector_Sl_Real_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RealVector_get) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< float >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RealVector_get. Expected SWIGTYPE_p_std__vectorT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_Real_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    ZVAL_DOUBLE(return_value,*result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RealVector_set) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  std::vector< float >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_float_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RealVector_set. Expected SWIGTYPE_p_std__vectorT_float_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[2]);
  temp3 = (std::vector< float >::value_type) Z_DVAL_PP(args[2]);
  /*@SWIG@*/;
  arg3 = &temp3;
  
  try {
    std_vector_Sl_Real_Sg__set(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_RealVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< Real > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_float_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(Real)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_average) {
  std::vector< int > arg1 ;
  std::vector< int > *tmp1 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of average. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
    arg1 = *tmp1;
  }
  result = (double)average(arg1);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_half) {
  std::vector< Real > *arg1 = 0 ;
  zval **args[1];
  std::vector< Real > result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_float_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of half. Expected SWIGTYPE_p_std__vectorT_float_t");
    }
  }
  result = half((std::vector< float > const &)*arg1);
  {
    std::vector< Real > * resultobj = new std::vector< Real >((const std::vector< Real > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_float_t, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_halve_in_place) {
  std::vector< double > *arg1 = 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_double_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of halve_in_place. Expected SWIGTYPE_p_std__vectorT_double_t");
    }
  }
  halve_in_place(*arg1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Struct_num_set) {
  Struct *arg1 = (Struct *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Struct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Struct_num_set. Expected SWIGTYPE_p_Struct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->num = arg2;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Struct_num_get) {
  Struct *arg1 = (Struct *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Struct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Struct_num_get. Expected SWIGTYPE_p_Struct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double) ((arg1)->num);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_Struct__SWIG_0) {
  Struct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (Struct *)new Struct();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Struct, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_Struct__SWIG_1) {
  double arg1 ;
  zval **args[1];
  Struct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[0]);
  arg1 = (double) Z_DVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Struct *)new Struct(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Struct, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_Struct) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_Struct__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_DOUBLE); 
    if (_v) {
      _wrap_new_Struct__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Struct'";
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Struct(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  Struct *arg1 = (Struct *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (Struct *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_Struct TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "Struct resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Structure_num_set) {
  Structure *arg1 = (Structure *) 0 ;
  double arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Structure, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Structure_num_set. Expected SWIGTYPE_p_Structure");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[1]);
  arg2 = (double) Z_DVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->num = arg2;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Structure_num_get) {
  Structure *arg1 = (Structure *) 0 ;
  zval **args[1];
  double result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_Structure, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Structure_num_get. Expected SWIGTYPE_p_Structure");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (double) ((arg1)->num);
  {
    ZVAL_DOUBLE(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_Structure__SWIG_0) {
  Structure *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (Structure *)new Structure();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Structure, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_Structure__SWIG_1) {
  double arg1 ;
  zval **args[1];
  Structure *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,52,CONVERT_FLOAT_IN@*/
  convert_to_double_ex(args[0]);
  arg1 = (double) Z_DVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (Structure *)new Structure(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Structure, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_Structure) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_Structure__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_DOUBLE); 
    if (_v) {
      _wrap_new_Structure__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_Structure'";
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Structure(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  Structure *arg1 = (Structure *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (Structure *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_Structure TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "Structure resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_vecreal) {
  std::vector< Real > *arg1 = 0 ;
  zval **args[1];
  std::vector< Real > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_float_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vecreal. Expected SWIGTYPE_p_std__vectorT_float_t");
    }
  }
  result = (std::vector< Real > *) &vecreal((std::vector< float > const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_float_t, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_vecintptr__SWIG_0) {
  std::vector< int > *arg1 = 0 ;
  zval **args[1];
  std::vector< int > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vecintptr. Expected SWIGTYPE_p_std__vectorT_int_t");
    }
  }
  result = (std::vector< int > *) &vecintptr((std::vector< int > const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_t, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_vecintptr__SWIG_1) {
  std::vector< int * > *arg1 = 0 ;
  zval **args[1];
  std::vector< int * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_p_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vecintptr. Expected SWIGTYPE_p_std__vectorT_int_p_t");
    }
  }
  result = (std::vector< int * > *) &vecintptr((std::vector< int * > const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_p_t, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_vecintptr) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_std__vectorT_int_t, 0) >= 0);
    }
    if (_v) {
      _wrap_vecintptr__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_std__vectorT_int_p_t, 0) >= 0);
    }
    if (_v) {
      _wrap_vecintptr__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'vecintptr'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_vecintconstptr) {
  std::vector< int const * > *arg1 = 0 ;
  zval **args[1];
  std::vector< int const * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_const_p_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vecintconstptr. Expected SWIGTYPE_p_std__vectorT_int_const_p_t");
    }
  }
  result = (std::vector< int const * > *) &vecintconstptr((std::vector< int const * > const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_const_p_t, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_vecstruct) {
  std::vector< Struct > *arg1 = 0 ;
  zval **args[1];
  std::vector< Struct > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vecstruct. Expected SWIGTYPE_p_std__vectorT_Struct_t");
    }
  }
  result = (std::vector< Struct > *) &vecstruct((std::vector< Struct > const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_Struct_t, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_vecstructptr) {
  std::vector< Struct * > *arg1 = 0 ;
  zval **args[1];
  std::vector< Struct * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_p_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vecstructptr. Expected SWIGTYPE_p_std__vectorT_Struct_p_t");
    }
  }
  result = (std::vector< Struct * > *) &vecstructptr((std::vector< Struct * > const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_Struct_p_t, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_vecstructconstptr) {
  std::vector< Struct const * > *arg1 = 0 ;
  zval **args[1];
  std::vector< Struct const * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of vecstructconstptr. Expected SWIGTYPE_p_std__vectorT_Struct_const_p_t");
    }
  }
  result = (std::vector< Struct const * > *) &vecstructconstptr((std::vector< Struct const * > const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_IntPtrVector__SWIG_0) {
  std::vector< int * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< int * > *)new std::vector< int * >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_p_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_IntPtrVector__SWIG_1) {
  std::vector< int * >::size_type arg1 ;
  zval **args[1];
  std::vector< int * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< int * >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< int * > *)new std::vector< int * >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_p_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_IntPtrVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_IntPtrVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_IntPtrVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_IntPtrVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntPtrVector_size) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  zval **args[1];
  std::vector< int * >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntPtrVector_size. Expected SWIGTYPE_p_std__vectorT_int_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int * > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntPtrVector_capacity) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  zval **args[1];
  std::vector< int * >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntPtrVector_capacity. Expected SWIGTYPE_p_std__vectorT_int_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int * > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntPtrVector_reserve) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  std::vector< int * >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntPtrVector_reserve. Expected SWIGTYPE_p_std__vectorT_int_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< int * >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntPtrVector_clear) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntPtrVector_clear. Expected SWIGTYPE_p_std__vectorT_int_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntPtrVector_push) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  std::vector< int * >::value_type *arg2 = 0 ;
  std::vector< int * >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntPtrVector_push. Expected SWIGTYPE_p_std__vectorT_int_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &temp2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntPtrVector_push. Expected SWIGTYPE_p_int");
    }
    arg2 = (std::vector< int * >::value_type *)&temp2;
  }
  (arg1)->push_back((std::vector< int * >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntPtrVector_is_empty) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntPtrVector_is_empty. Expected SWIGTYPE_p_std__vectorT_int_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_int_Sm__Sg__is_empty((std::vector< int * > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntPtrVector_pop) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  zval **args[1];
  int *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntPtrVector_pop. Expected SWIGTYPE_p_std__vectorT_int_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (int *)std_vector_Sl_int_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_int, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntPtrVector_get) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< int * >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntPtrVector_get. Expected SWIGTYPE_p_std__vectorT_int_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< int * >::value_type *) &std_vector_Sl_int_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  SWIG_SetPointerZval(return_value, (void *)*result, SWIGTYPE_p_int, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntPtrVector_set) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  int arg2 ;
  std::vector< int * >::value_type *arg3 = 0 ;
  std::vector< int * >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntPtrVector_set. Expected SWIGTYPE_p_std__vectorT_int_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &temp3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of IntPtrVector_set. Expected SWIGTYPE_p_int");
    }
    arg3 = (std::vector< int * >::value_type *)&temp3;
  }
  try {
    std_vector_Sl_int_Sm__Sg__set(arg1,arg2,(int *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_IntPtrVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< int * > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_int_p_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(p.int)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_IntConstPtrVector__SWIG_0) {
  std::vector< int const * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< int const * > *)new std::vector< int const * >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_const_p_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_IntConstPtrVector__SWIG_1) {
  std::vector< int const * >::size_type arg1 ;
  zval **args[1];
  std::vector< int const * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< int const * >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< int const * > *)new std::vector< int const * >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_int_const_p_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_IntConstPtrVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_IntConstPtrVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_IntConstPtrVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_IntConstPtrVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntConstPtrVector_size) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  zval **args[1];
  std::vector< int const * >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntConstPtrVector_size. Expected SWIGTYPE_p_std__vectorT_int_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int const * > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntConstPtrVector_capacity) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  zval **args[1];
  std::vector< int const * >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntConstPtrVector_capacity. Expected SWIGTYPE_p_std__vectorT_int_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< int const * > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntConstPtrVector_reserve) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  std::vector< int const * >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntConstPtrVector_reserve. Expected SWIGTYPE_p_std__vectorT_int_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< int const * >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntConstPtrVector_clear) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntConstPtrVector_clear. Expected SWIGTYPE_p_std__vectorT_int_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntConstPtrVector_push) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  std::vector< int const * >::value_type *arg2 = 0 ;
  std::vector< int const * >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntConstPtrVector_push. Expected SWIGTYPE_p_std__vectorT_int_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &temp2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of IntConstPtrVector_push. Expected SWIGTYPE_p_int");
    }
    arg2 = (std::vector< int const * >::value_type *)&temp2;
  }
  (arg1)->push_back((std::vector< int const * >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntConstPtrVector_is_empty) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntConstPtrVector_is_empty. Expected SWIGTYPE_p_std__vectorT_int_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_int_SS_const_Sm__Sg__is_empty((std::vector< int const * > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntConstPtrVector_pop) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  zval **args[1];
  int *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntConstPtrVector_pop. Expected SWIGTYPE_p_std__vectorT_int_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (int *)std_vector_Sl_int_SS_const_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_int, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntConstPtrVector_get) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< int const * >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntConstPtrVector_get. Expected SWIGTYPE_p_std__vectorT_int_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< int const * >::value_type *) &std_vector_Sl_int_SS_const_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  SWIG_SetPointerZval(return_value, (void *)*result, SWIGTYPE_p_int, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_IntConstPtrVector_set) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  int arg2 ;
  std::vector< int const * >::value_type *arg3 = 0 ;
  std::vector< int const * >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_int_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of IntConstPtrVector_set. Expected SWIGTYPE_p_std__vectorT_int_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &temp3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of IntConstPtrVector_set. Expected SWIGTYPE_p_int");
    }
    arg3 = (std::vector< int const * >::value_type *)&temp3;
  }
  try {
    std_vector_Sl_int_SS_const_Sm__Sg__set(arg1,arg2,(int const *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_IntConstPtrVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< int const * > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_int_const_p_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(p.q(const).int)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_StructVector__SWIG_0) {
  std::vector< Struct > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< Struct > *)new std::vector< Struct >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_Struct_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_StructVector__SWIG_1) {
  std::vector< Struct >::size_type arg1 ;
  zval **args[1];
  std::vector< Struct > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< Struct >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< Struct > *)new std::vector< Struct >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_Struct_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_StructVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_StructVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_StructVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_StructVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructVector_size) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  zval **args[1];
  std::vector< Struct >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructVector_size. Expected SWIGTYPE_p_std__vectorT_Struct_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< Struct > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructVector_capacity) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  zval **args[1];
  std::vector< Struct >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructVector_capacity. Expected SWIGTYPE_p_std__vectorT_Struct_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< Struct > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructVector_reserve) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  std::vector< Struct >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructVector_reserve. Expected SWIGTYPE_p_std__vectorT_Struct_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< Struct >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructVector_clear) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructVector_clear. Expected SWIGTYPE_p_std__vectorT_Struct_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructVector_push) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  std::vector< Struct >::value_type *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructVector_push. Expected SWIGTYPE_p_std__vectorT_Struct_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_Struct, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of StructVector_push. Expected SWIGTYPE_p_Struct");
    }
  }
  (arg1)->push_back((std::vector< Struct >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructVector_is_empty) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructVector_is_empty. Expected SWIGTYPE_p_std__vectorT_Struct_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_Struct_Sg__is_empty((std::vector< Struct > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructVector_pop) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  zval **args[1];
  Struct result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructVector_pop. Expected SWIGTYPE_p_std__vectorT_Struct_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = std_vector_Sl_Struct_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  {
    Struct * resultobj = new Struct((const Struct &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_Struct, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructVector_get) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< Struct >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructVector_get. Expected SWIGTYPE_p_std__vectorT_Struct_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< Struct >::value_type *) &std_vector_Sl_Struct_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Struct, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructVector_set) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  int arg2 ;
  std::vector< Struct >::value_type *arg3 = 0 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructVector_set. Expected SWIGTYPE_p_std__vectorT_Struct_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_Struct, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of StructVector_set. Expected SWIGTYPE_p_Struct");
    }
  }
  try {
    std_vector_Sl_Struct_Sg__set(arg1,arg2,(Struct const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_StructVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< Struct > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_Struct_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(Struct)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_StructPtrVector__SWIG_0) {
  std::vector< Struct * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< Struct * > *)new std::vector< Struct * >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_Struct_p_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_StructPtrVector__SWIG_1) {
  std::vector< Struct * >::size_type arg1 ;
  zval **args[1];
  std::vector< Struct * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< Struct * >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< Struct * > *)new std::vector< Struct * >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_Struct_p_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_StructPtrVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_StructPtrVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_StructPtrVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_StructPtrVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructPtrVector_size) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  zval **args[1];
  std::vector< Struct * >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructPtrVector_size. Expected SWIGTYPE_p_std__vectorT_Struct_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< Struct * > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructPtrVector_capacity) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  zval **args[1];
  std::vector< Struct * >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructPtrVector_capacity. Expected SWIGTYPE_p_std__vectorT_Struct_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< Struct * > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructPtrVector_reserve) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  std::vector< Struct * >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructPtrVector_reserve. Expected SWIGTYPE_p_std__vectorT_Struct_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< Struct * >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructPtrVector_clear) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructPtrVector_clear. Expected SWIGTYPE_p_std__vectorT_Struct_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructPtrVector_push) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  std::vector< Struct * >::value_type *arg2 = 0 ;
  std::vector< Struct * >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructPtrVector_push. Expected SWIGTYPE_p_std__vectorT_Struct_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &temp2, SWIGTYPE_p_Struct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of StructPtrVector_push. Expected SWIGTYPE_p_Struct");
    }
    arg2 = (std::vector< Struct * >::value_type *)&temp2;
  }
  (arg1)->push_back((std::vector< Struct * >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructPtrVector_is_empty) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructPtrVector_is_empty. Expected SWIGTYPE_p_std__vectorT_Struct_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_Struct_Sm__Sg__is_empty((std::vector< Struct * > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructPtrVector_pop) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  zval **args[1];
  Struct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructPtrVector_pop. Expected SWIGTYPE_p_std__vectorT_Struct_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (Struct *)std_vector_Sl_Struct_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Struct, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructPtrVector_get) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< Struct * >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructPtrVector_get. Expected SWIGTYPE_p_std__vectorT_Struct_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< Struct * >::value_type *) &std_vector_Sl_Struct_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  SWIG_SetPointerZval(return_value, (void *)*result, SWIGTYPE_p_Struct, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructPtrVector_set) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  int arg2 ;
  std::vector< Struct * >::value_type *arg3 = 0 ;
  std::vector< Struct * >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructPtrVector_set. Expected SWIGTYPE_p_std__vectorT_Struct_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &temp3, SWIGTYPE_p_Struct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of StructPtrVector_set. Expected SWIGTYPE_p_Struct");
    }
    arg3 = (std::vector< Struct * >::value_type *)&temp3;
  }
  try {
    std_vector_Sl_Struct_Sm__Sg__set(arg1,arg2,(Struct *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_StructPtrVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< Struct * > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_Struct_p_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(p.Struct)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_StructConstPtrVector__SWIG_0) {
  std::vector< Struct const * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< Struct const * > *)new std::vector< Struct const * >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_Struct_const_p_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_StructConstPtrVector__SWIG_1) {
  std::vector< Struct const * >::size_type arg1 ;
  zval **args[1];
  std::vector< Struct const * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< Struct const * >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< Struct const * > *)new std::vector< Struct const * >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_Struct_const_p_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_StructConstPtrVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_StructConstPtrVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_StructConstPtrVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_StructConstPtrVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructConstPtrVector_size) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  zval **args[1];
  std::vector< Struct const * >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructConstPtrVector_size. Expected SWIGTYPE_p_std__vectorT_Struct_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< Struct const * > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructConstPtrVector_capacity) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  zval **args[1];
  std::vector< Struct const * >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructConstPtrVector_capacity. Expected SWIGTYPE_p_std__vectorT_Struct_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< Struct const * > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructConstPtrVector_reserve) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  std::vector< Struct const * >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructConstPtrVector_reserve. Expected SWIGTYPE_p_std__vectorT_Struct_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< Struct const * >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructConstPtrVector_clear) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructConstPtrVector_clear. Expected SWIGTYPE_p_std__vectorT_Struct_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructConstPtrVector_push) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  std::vector< Struct const * >::value_type *arg2 = 0 ;
  std::vector< Struct const * >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructConstPtrVector_push. Expected SWIGTYPE_p_std__vectorT_Struct_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &temp2, SWIGTYPE_p_Struct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of StructConstPtrVector_push. Expected SWIGTYPE_p_Struct");
    }
    arg2 = (std::vector< Struct const * >::value_type *)&temp2;
  }
  (arg1)->push_back((std::vector< Struct const * >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructConstPtrVector_is_empty) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructConstPtrVector_is_empty. Expected SWIGTYPE_p_std__vectorT_Struct_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_Struct_SS_const_Sm__Sg__is_empty((std::vector< Struct const * > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructConstPtrVector_pop) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  zval **args[1];
  Struct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructConstPtrVector_pop. Expected SWIGTYPE_p_std__vectorT_Struct_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (Struct *)std_vector_Sl_Struct_SS_const_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_Struct, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructConstPtrVector_get) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< Struct const * >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructConstPtrVector_get. Expected SWIGTYPE_p_std__vectorT_Struct_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< Struct const * >::value_type *) &std_vector_Sl_Struct_SS_const_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  SWIG_SetPointerZval(return_value, (void *)*result, SWIGTYPE_p_Struct, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StructConstPtrVector_set) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  int arg2 ;
  std::vector< Struct const * >::value_type *arg3 = 0 ;
  std::vector< Struct const * >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_Struct_const_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StructConstPtrVector_set. Expected SWIGTYPE_p_std__vectorT_Struct_const_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &temp3, SWIGTYPE_p_Struct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of StructConstPtrVector_set. Expected SWIGTYPE_p_Struct");
    }
    arg3 = (std::vector< Struct const * >::value_type *)&temp3;
  }
  try {
    std_vector_Sl_Struct_SS_const_Sm__Sg__set(arg1,arg2,(Struct const *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_StructConstPtrVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< Struct const * > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_Struct_const_p_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(p.q(const).Struct)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_MyClass) {
  MyClass *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (MyClass *)new MyClass();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_MyClass, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_MyClass(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  MyClass *arg1 = (MyClass *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (MyClass *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_MyClass TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "MyClass resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_MyClassPtrVector__SWIG_0) {
  std::vector< MyClass * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (std::vector< MyClass * > *)new std::vector< MyClass * >();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_MyClass_p_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_MyClassPtrVector__SWIG_1) {
  std::vector< MyClass * >::size_type arg1 ;
  zval **args[1];
  std::vector< MyClass * > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (std::vector< MyClass * >::size_type) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (std::vector< MyClass * > *)new std::vector< MyClass * >(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__vectorT_MyClass_p_t, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_MyClassPtrVector) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_MyClassPtrVector__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_MyClassPtrVector__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_MyClassPtrVector'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MyClassPtrVector_size) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  zval **args[1];
  std::vector< MyClass * >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_MyClass_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MyClassPtrVector_size. Expected SWIGTYPE_p_std__vectorT_MyClass_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< MyClass * > const *)arg1)->size();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MyClassPtrVector_capacity) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  zval **args[1];
  std::vector< MyClass * >::size_type result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_MyClass_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MyClassPtrVector_capacity. Expected SWIGTYPE_p_std__vectorT_MyClass_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((std::vector< MyClass * > const *)arg1)->capacity();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MyClassPtrVector_reserve) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  std::vector< MyClass * >::size_type arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_MyClass_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MyClassPtrVector_reserve. Expected SWIGTYPE_p_std__vectorT_MyClass_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (std::vector< MyClass * >::size_type) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->reserve(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MyClassPtrVector_clear) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_MyClass_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MyClassPtrVector_clear. Expected SWIGTYPE_p_std__vectorT_MyClass_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->clear();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MyClassPtrVector_push) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  std::vector< MyClass * >::value_type *arg2 = 0 ;
  std::vector< MyClass * >::value_type temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_MyClass_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MyClassPtrVector_push. Expected SWIGTYPE_p_std__vectorT_MyClass_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &temp2, SWIGTYPE_p_MyClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of MyClassPtrVector_push. Expected SWIGTYPE_p_MyClass");
    }
    arg2 = (std::vector< MyClass * >::value_type *)&temp2;
  }
  (arg1)->push_back((std::vector< MyClass * >::value_type const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MyClassPtrVector_is_empty) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_MyClass_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MyClassPtrVector_is_empty. Expected SWIGTYPE_p_std__vectorT_MyClass_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)std_vector_Sl_MyClass_Sm__Sg__is_empty((std::vector< MyClass * > const *)arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MyClassPtrVector_pop) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  zval **args[1];
  MyClass *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_MyClass_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MyClassPtrVector_pop. Expected SWIGTYPE_p_std__vectorT_MyClass_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  try {
    result = (MyClass *)std_vector_Sl_MyClass_Sm__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_MyClass, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MyClassPtrVector_get) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  int arg2 ;
  zval **args[2];
  std::vector< MyClass * >::value_type *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_MyClass_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MyClassPtrVector_get. Expected SWIGTYPE_p_std__vectorT_MyClass_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  try {
    result = (std::vector< MyClass * >::value_type *) &std_vector_Sl_MyClass_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  SWIG_SetPointerZval(return_value, (void *)*result, SWIGTYPE_p_MyClass, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MyClassPtrVector_set) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  int arg2 ;
  std::vector< MyClass * >::value_type *arg3 = 0 ;
  std::vector< MyClass * >::value_type temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_std__vectorT_MyClass_p_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MyClassPtrVector_set. Expected SWIGTYPE_p_std__vectorT_MyClass_p_t");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &temp3, SWIGTYPE_p_MyClass, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of MyClassPtrVector_set. Expected SWIGTYPE_p_MyClass");
    }
    arg3 = (std::vector< MyClass * >::value_type *)&temp3;
  }
  try {
    std_vector_Sl_MyClass_Sm__Sg__set(arg1,arg2,(MyClass *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    zend_throw_exception(NULL, const_cast<char*>("C++ std::out_of_range exception thrown"), 0 TSRMLS_CC);
    return;
    
  }
  
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_MyClassPtrVector(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (std::vector< MyClass * > *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_std__vectorT_MyClass_p_t TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "std::vector<(p.MyClass)> resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RetsMetadata_GetAllResources) {
  RetsMetadata *arg1 = (RetsMetadata *) 0 ;
  size_t arg2 ;
  zval **args[2];
  MyClassVector result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_RetsMetadata, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RetsMetadata_GetAllResources. Expected SWIGTYPE_p_RetsMetadata");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = ((RetsMetadata const *)arg1)->GetAllResources(arg2);
  {
    MyClassVector * resultobj = new MyClassVector((const MyClassVector &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_MyClass_p_t, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_RetsMetadata) {
  RetsMetadata *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (RetsMetadata *)new RetsMetadata();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_RetsMetadata, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_RetsMetadata(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  RetsMetadata *arg1 = (RetsMetadata *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (RetsMetadata *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_RetsMetadata TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "RetsMetadata resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_unsigned_long_t) {
  __wrap_delete_ULongVector(rsrc, SWIGTYPE_p_std__vectorT_unsigned_long_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_long_t) {
  __wrap_delete_LongVector(rsrc, SWIGTYPE_p_std__vectorT_long_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_unsigned_char_t) {
  __wrap_delete_UCharVector(rsrc, SWIGTYPE_p_std__vectorT_unsigned_char_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_char_t) {
  __wrap_delete_CharVector(rsrc, SWIGTYPE_p_std__vectorT_char_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_int_p_t) {
  __wrap_delete_IntPtrVector(rsrc, SWIGTYPE_p_std__vectorT_int_p_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Struct) {
  __wrap_delete_Struct(rsrc, SWIGTYPE_p_Struct->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_MyClass) {
  __wrap_delete_MyClass(rsrc, SWIGTYPE_p_MyClass->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_const_reference) {
  /* No destructor for simple type _p_const_reference */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_double_t) {
  __wrap_delete_DoubleVector(rsrc, SWIGTYPE_p_std__vectorT_double_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_float) {
  /* No destructor for simple type _p_float */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_Struct_t) {
  __wrap_delete_StructVector(rsrc, SWIGTYPE_p_std__vectorT_Struct_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_size_type) {
  /* No destructor for simple type _p_size_type */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_int_const_p_t) {
  __wrap_delete_IntConstPtrVector(rsrc, SWIGTYPE_p_std__vectorT_int_const_p_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_Struct_const_p_t) {
  __wrap_delete_StructConstPtrVector(rsrc, SWIGTYPE_p_std__vectorT_Struct_const_p_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_RetsMetadata) {
  __wrap_delete_RetsMetadata(rsrc, SWIGTYPE_p_RetsMetadata->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_bool_t) {
  __wrap_delete_BoolVector(rsrc, SWIGTYPE_p_std__vectorT_bool_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_unsigned_int_t) {
  __wrap_delete_UIntVector(rsrc, SWIGTYPE_p_std__vectorT_unsigned_int_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_int_t) {
  __wrap_delete_IntVector(rsrc, SWIGTYPE_p_std__vectorT_int_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_value_type) {
  /* No destructor for simple type _p_value_type */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_unsigned_short_t) {
  __wrap_delete_UShortVector(rsrc, SWIGTYPE_p_std__vectorT_unsigned_short_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_short_t) {
  __wrap_delete_ShortVector(rsrc, SWIGTYPE_p_std__vectorT_short_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_MyClass_p_t) {
  __wrap_delete_MyClassPtrVector(rsrc, SWIGTYPE_p_std__vectorT_MyClass_p_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_std__string_t) {
  __wrap_delete_StringVector(rsrc, SWIGTYPE_p_std__vectorT_std__string_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_Struct_p_t) {
  __wrap_delete_StructPtrVector(rsrc, SWIGTYPE_p_std__vectorT_Struct_p_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_Structure) {
  __wrap_delete_Structure(rsrc, SWIGTYPE_p_Structure->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_float_t) {
  __wrap_delete_RealVector(rsrc, SWIGTYPE_p_std__vectorT_float_t->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_int) {
  /* No destructor for simple type _p_int */
  efree(rsrc->ptr);
}
/* end wrapper section */
/* class entry subsection */


/* entry subsection */
/* Every non-class user visible function must have an entry here */
static zend_function_entry li_std_vector_functions[] = {
 SWIG_ZEND_NAMED_FE(new_intvector,_wrap_new_IntVector,NULL)
 SWIG_ZEND_NAMED_FE(intvector_size,_wrap_IntVector_size,NULL)
 SWIG_ZEND_NAMED_FE(intvector_capacity,_wrap_IntVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(intvector_reserve,_wrap_IntVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(intvector_clear,_wrap_IntVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(intvector_push,_wrap_IntVector_push,NULL)
 SWIG_ZEND_NAMED_FE(intvector_is_empty,_wrap_IntVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(intvector_pop,_wrap_IntVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(intvector_get,_wrap_IntVector_get,NULL)
 SWIG_ZEND_NAMED_FE(intvector_set,_wrap_IntVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_boolvector,_wrap_new_BoolVector,NULL)
 SWIG_ZEND_NAMED_FE(boolvector_size,_wrap_BoolVector_size,NULL)
 SWIG_ZEND_NAMED_FE(boolvector_capacity,_wrap_BoolVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(boolvector_reserve,_wrap_BoolVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(boolvector_clear,_wrap_BoolVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(boolvector_push,_wrap_BoolVector_push,NULL)
 SWIG_ZEND_NAMED_FE(boolvector_is_empty,_wrap_BoolVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(boolvector_pop,_wrap_BoolVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(boolvector_get,_wrap_BoolVector_get,NULL)
 SWIG_ZEND_NAMED_FE(boolvector_set,_wrap_BoolVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_charvector,_wrap_new_CharVector,NULL)
 SWIG_ZEND_NAMED_FE(charvector_size,_wrap_CharVector_size,NULL)
 SWIG_ZEND_NAMED_FE(charvector_capacity,_wrap_CharVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(charvector_reserve,_wrap_CharVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(charvector_clear,_wrap_CharVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(charvector_push,_wrap_CharVector_push,NULL)
 SWIG_ZEND_NAMED_FE(charvector_is_empty,_wrap_CharVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(charvector_pop,_wrap_CharVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(charvector_get,_wrap_CharVector_get,NULL)
 SWIG_ZEND_NAMED_FE(charvector_set,_wrap_CharVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_shortvector,_wrap_new_ShortVector,NULL)
 SWIG_ZEND_NAMED_FE(shortvector_size,_wrap_ShortVector_size,NULL)
 SWIG_ZEND_NAMED_FE(shortvector_capacity,_wrap_ShortVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(shortvector_reserve,_wrap_ShortVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(shortvector_clear,_wrap_ShortVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(shortvector_push,_wrap_ShortVector_push,NULL)
 SWIG_ZEND_NAMED_FE(shortvector_is_empty,_wrap_ShortVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(shortvector_pop,_wrap_ShortVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(shortvector_get,_wrap_ShortVector_get,NULL)
 SWIG_ZEND_NAMED_FE(shortvector_set,_wrap_ShortVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_longvector,_wrap_new_LongVector,NULL)
 SWIG_ZEND_NAMED_FE(longvector_size,_wrap_LongVector_size,NULL)
 SWIG_ZEND_NAMED_FE(longvector_capacity,_wrap_LongVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(longvector_reserve,_wrap_LongVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(longvector_clear,_wrap_LongVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(longvector_push,_wrap_LongVector_push,NULL)
 SWIG_ZEND_NAMED_FE(longvector_is_empty,_wrap_LongVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(longvector_pop,_wrap_LongVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(longvector_get,_wrap_LongVector_get,NULL)
 SWIG_ZEND_NAMED_FE(longvector_set,_wrap_LongVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_ucharvector,_wrap_new_UCharVector,NULL)
 SWIG_ZEND_NAMED_FE(ucharvector_size,_wrap_UCharVector_size,NULL)
 SWIG_ZEND_NAMED_FE(ucharvector_capacity,_wrap_UCharVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(ucharvector_reserve,_wrap_UCharVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(ucharvector_clear,_wrap_UCharVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(ucharvector_push,_wrap_UCharVector_push,NULL)
 SWIG_ZEND_NAMED_FE(ucharvector_is_empty,_wrap_UCharVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(ucharvector_pop,_wrap_UCharVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(ucharvector_get,_wrap_UCharVector_get,NULL)
 SWIG_ZEND_NAMED_FE(ucharvector_set,_wrap_UCharVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_uintvector,_wrap_new_UIntVector,NULL)
 SWIG_ZEND_NAMED_FE(uintvector_size,_wrap_UIntVector_size,NULL)
 SWIG_ZEND_NAMED_FE(uintvector_capacity,_wrap_UIntVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(uintvector_reserve,_wrap_UIntVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(uintvector_clear,_wrap_UIntVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(uintvector_push,_wrap_UIntVector_push,NULL)
 SWIG_ZEND_NAMED_FE(uintvector_is_empty,_wrap_UIntVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(uintvector_pop,_wrap_UIntVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(uintvector_get,_wrap_UIntVector_get,NULL)
 SWIG_ZEND_NAMED_FE(uintvector_set,_wrap_UIntVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_ushortvector,_wrap_new_UShortVector,NULL)
 SWIG_ZEND_NAMED_FE(ushortvector_size,_wrap_UShortVector_size,NULL)
 SWIG_ZEND_NAMED_FE(ushortvector_capacity,_wrap_UShortVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(ushortvector_reserve,_wrap_UShortVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(ushortvector_clear,_wrap_UShortVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(ushortvector_push,_wrap_UShortVector_push,NULL)
 SWIG_ZEND_NAMED_FE(ushortvector_is_empty,_wrap_UShortVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(ushortvector_pop,_wrap_UShortVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(ushortvector_get,_wrap_UShortVector_get,NULL)
 SWIG_ZEND_NAMED_FE(ushortvector_set,_wrap_UShortVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_ulongvector,_wrap_new_ULongVector,NULL)
 SWIG_ZEND_NAMED_FE(ulongvector_size,_wrap_ULongVector_size,NULL)
 SWIG_ZEND_NAMED_FE(ulongvector_capacity,_wrap_ULongVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(ulongvector_reserve,_wrap_ULongVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(ulongvector_clear,_wrap_ULongVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(ulongvector_push,_wrap_ULongVector_push,NULL)
 SWIG_ZEND_NAMED_FE(ulongvector_is_empty,_wrap_ULongVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(ulongvector_pop,_wrap_ULongVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(ulongvector_get,_wrap_ULongVector_get,NULL)
 SWIG_ZEND_NAMED_FE(ulongvector_set,_wrap_ULongVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_doublevector,_wrap_new_DoubleVector,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_size,_wrap_DoubleVector_size,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_capacity,_wrap_DoubleVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_reserve,_wrap_DoubleVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_clear,_wrap_DoubleVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_push,_wrap_DoubleVector_push,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_is_empty,_wrap_DoubleVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_pop,_wrap_DoubleVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_get,_wrap_DoubleVector_get,NULL)
 SWIG_ZEND_NAMED_FE(doublevector_set,_wrap_DoubleVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_stringvector,_wrap_new_StringVector,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_size,_wrap_StringVector_size,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_capacity,_wrap_StringVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_reserve,_wrap_StringVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_clear,_wrap_StringVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_push,_wrap_StringVector_push,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_is_empty,_wrap_StringVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_pop,_wrap_StringVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_get,_wrap_StringVector_get,NULL)
 SWIG_ZEND_NAMED_FE(stringvector_set,_wrap_StringVector_set,NULL)
 SWIG_ZEND_NAMED_FE(typedef_test,_wrap_typedef_test,NULL)
 SWIG_ZEND_NAMED_FE(new_realvector,_wrap_new_RealVector,NULL)
 SWIG_ZEND_NAMED_FE(realvector_size,_wrap_RealVector_size,NULL)
 SWIG_ZEND_NAMED_FE(realvector_capacity,_wrap_RealVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(realvector_reserve,_wrap_RealVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(realvector_clear,_wrap_RealVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(realvector_push,_wrap_RealVector_push,NULL)
 SWIG_ZEND_NAMED_FE(realvector_is_empty,_wrap_RealVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(realvector_pop,_wrap_RealVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(realvector_get,_wrap_RealVector_get,NULL)
 SWIG_ZEND_NAMED_FE(realvector_set,_wrap_RealVector_set,NULL)
 SWIG_ZEND_NAMED_FE(average,_wrap_average,NULL)
 SWIG_ZEND_NAMED_FE(half,_wrap_half,NULL)
 SWIG_ZEND_NAMED_FE(halve_in_place,_wrap_halve_in_place,NULL)
 SWIG_ZEND_NAMED_FE(struct_num_set,_wrap_Struct_num_set,NULL)
 SWIG_ZEND_NAMED_FE(struct_num_get,_wrap_Struct_num_get,NULL)
 SWIG_ZEND_NAMED_FE(new_struct,_wrap_new_Struct,NULL)
 SWIG_ZEND_NAMED_FE(structure_num_set,_wrap_Structure_num_set,NULL)
 SWIG_ZEND_NAMED_FE(structure_num_get,_wrap_Structure_num_get,NULL)
 SWIG_ZEND_NAMED_FE(new_structure,_wrap_new_Structure,NULL)
 SWIG_ZEND_NAMED_FE(vecreal,_wrap_vecreal,NULL)
 SWIG_ZEND_NAMED_FE(vecintptr,_wrap_vecintptr,NULL)
 SWIG_ZEND_NAMED_FE(vecintconstptr,_wrap_vecintconstptr,NULL)
 SWIG_ZEND_NAMED_FE(vecstruct,_wrap_vecstruct,NULL)
 SWIG_ZEND_NAMED_FE(vecstructptr,_wrap_vecstructptr,NULL)
 SWIG_ZEND_NAMED_FE(vecstructconstptr,_wrap_vecstructconstptr,NULL)
 SWIG_ZEND_NAMED_FE(new_intptrvector,_wrap_new_IntPtrVector,NULL)
 SWIG_ZEND_NAMED_FE(intptrvector_size,_wrap_IntPtrVector_size,NULL)
 SWIG_ZEND_NAMED_FE(intptrvector_capacity,_wrap_IntPtrVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(intptrvector_reserve,_wrap_IntPtrVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(intptrvector_clear,_wrap_IntPtrVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(intptrvector_push,_wrap_IntPtrVector_push,NULL)
 SWIG_ZEND_NAMED_FE(intptrvector_is_empty,_wrap_IntPtrVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(intptrvector_pop,_wrap_IntPtrVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(intptrvector_get,_wrap_IntPtrVector_get,NULL)
 SWIG_ZEND_NAMED_FE(intptrvector_set,_wrap_IntPtrVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_intconstptrvector,_wrap_new_IntConstPtrVector,NULL)
 SWIG_ZEND_NAMED_FE(intconstptrvector_size,_wrap_IntConstPtrVector_size,NULL)
 SWIG_ZEND_NAMED_FE(intconstptrvector_capacity,_wrap_IntConstPtrVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(intconstptrvector_reserve,_wrap_IntConstPtrVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(intconstptrvector_clear,_wrap_IntConstPtrVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(intconstptrvector_push,_wrap_IntConstPtrVector_push,NULL)
 SWIG_ZEND_NAMED_FE(intconstptrvector_is_empty,_wrap_IntConstPtrVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(intconstptrvector_pop,_wrap_IntConstPtrVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(intconstptrvector_get,_wrap_IntConstPtrVector_get,NULL)
 SWIG_ZEND_NAMED_FE(intconstptrvector_set,_wrap_IntConstPtrVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_structvector,_wrap_new_StructVector,NULL)
 SWIG_ZEND_NAMED_FE(structvector_size,_wrap_StructVector_size,NULL)
 SWIG_ZEND_NAMED_FE(structvector_capacity,_wrap_StructVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(structvector_reserve,_wrap_StructVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(structvector_clear,_wrap_StructVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(structvector_push,_wrap_StructVector_push,NULL)
 SWIG_ZEND_NAMED_FE(structvector_is_empty,_wrap_StructVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(structvector_pop,_wrap_StructVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(structvector_get,_wrap_StructVector_get,NULL)
 SWIG_ZEND_NAMED_FE(structvector_set,_wrap_StructVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_structptrvector,_wrap_new_StructPtrVector,NULL)
 SWIG_ZEND_NAMED_FE(structptrvector_size,_wrap_StructPtrVector_size,NULL)
 SWIG_ZEND_NAMED_FE(structptrvector_capacity,_wrap_StructPtrVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(structptrvector_reserve,_wrap_StructPtrVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(structptrvector_clear,_wrap_StructPtrVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(structptrvector_push,_wrap_StructPtrVector_push,NULL)
 SWIG_ZEND_NAMED_FE(structptrvector_is_empty,_wrap_StructPtrVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(structptrvector_pop,_wrap_StructPtrVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(structptrvector_get,_wrap_StructPtrVector_get,NULL)
 SWIG_ZEND_NAMED_FE(structptrvector_set,_wrap_StructPtrVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_structconstptrvector,_wrap_new_StructConstPtrVector,NULL)
 SWIG_ZEND_NAMED_FE(structconstptrvector_size,_wrap_StructConstPtrVector_size,NULL)
 SWIG_ZEND_NAMED_FE(structconstptrvector_capacity,_wrap_StructConstPtrVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(structconstptrvector_reserve,_wrap_StructConstPtrVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(structconstptrvector_clear,_wrap_StructConstPtrVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(structconstptrvector_push,_wrap_StructConstPtrVector_push,NULL)
 SWIG_ZEND_NAMED_FE(structconstptrvector_is_empty,_wrap_StructConstPtrVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(structconstptrvector_pop,_wrap_StructConstPtrVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(structconstptrvector_get,_wrap_StructConstPtrVector_get,NULL)
 SWIG_ZEND_NAMED_FE(structconstptrvector_set,_wrap_StructConstPtrVector_set,NULL)
 SWIG_ZEND_NAMED_FE(new_myclass,_wrap_new_MyClass,NULL)
 SWIG_ZEND_NAMED_FE(new_myclassptrvector,_wrap_new_MyClassPtrVector,NULL)
 SWIG_ZEND_NAMED_FE(myclassptrvector_size,_wrap_MyClassPtrVector_size,NULL)
 SWIG_ZEND_NAMED_FE(myclassptrvector_capacity,_wrap_MyClassPtrVector_capacity,NULL)
 SWIG_ZEND_NAMED_FE(myclassptrvector_reserve,_wrap_MyClassPtrVector_reserve,NULL)
 SWIG_ZEND_NAMED_FE(myclassptrvector_clear,_wrap_MyClassPtrVector_clear,NULL)
 SWIG_ZEND_NAMED_FE(myclassptrvector_push,_wrap_MyClassPtrVector_push,NULL)
 SWIG_ZEND_NAMED_FE(myclassptrvector_is_empty,_wrap_MyClassPtrVector_is_empty,NULL)
 SWIG_ZEND_NAMED_FE(myclassptrvector_pop,_wrap_MyClassPtrVector_pop,NULL)
 SWIG_ZEND_NAMED_FE(myclassptrvector_get,_wrap_MyClassPtrVector_get,NULL)
 SWIG_ZEND_NAMED_FE(myclassptrvector_set,_wrap_MyClassPtrVector_set,NULL)
 SWIG_ZEND_NAMED_FE(retsmetadata_getallresources,_wrap_RetsMetadata_GetAllResources,NULL)
 SWIG_ZEND_NAMED_FE(new_retsmetadata,_wrap_new_RetsMetadata,NULL)
 SWIG_ZEND_NAMED_FE(swig_li_std_vector_alter_newobject,_wrap_swig_li_std_vector_alter_newobject,NULL)
 SWIG_ZEND_NAMED_FE(swig_li_std_vector_get_newobject,_wrap_swig_li_std_vector_get_newobject,NULL)
{NULL, NULL, NULL}
};

/* init section */
#if ZEND_MODULE_API_NO <= 20090626
#undef ZEND_MODULE_BUILD_ID
#define ZEND_MODULE_BUILD_ID (char*)"API" ZEND_TOSTR(ZEND_MODULE_API_NO) ZEND_BUILD_TS ZEND_BUILD_DEBUG ZEND_BUILD_SYSTEM ZEND_BUILD_EXTRA
#endif
zend_module_entry li_std_vector_module_entry = {
    STANDARD_MODULE_HEADER,
    (char*)"li_std_vector",
    li_std_vector_functions,
    PHP_MINIT(li_std_vector),
    PHP_MSHUTDOWN(li_std_vector),
    PHP_RINIT(li_std_vector),
    PHP_RSHUTDOWN(li_std_vector),
    PHP_MINFO(li_std_vector),
    NO_VERSION_YET,
    STANDARD_MODULE_PROPERTIES
};
zend_module_entry* SWIG_module_entry = &li_std_vector_module_entry;

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT zend_module_entry *get_module(void) { return &li_std_vector_module_entry; }
#ifdef __cplusplus
}
#endif

#define SWIG_php_minit PHP_MINIT_FUNCTION(li_std_vector)
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


  SWIG_php_minit {
    SWIG_InitializeModule(0);

/* oinit subsection */
ZEND_INIT_MODULE_GLOBALS(li_std_vector, li_std_vector_init_globals, li_std_vector_destroy_globals);

/* Register resource destructors for pointer types */
le_swig__p_std__vectorT_unsigned_long_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_unsigned_long_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_unsigned_long_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_unsigned_long_t,&le_swig__p_std__vectorT_unsigned_long_t);
le_swig__p_std__vectorT_long_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_long_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_long_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_long_t,&le_swig__p_std__vectorT_long_t);
le_swig__p_std__vectorT_unsigned_char_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_unsigned_char_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_unsigned_char_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_unsigned_char_t,&le_swig__p_std__vectorT_unsigned_char_t);
le_swig__p_std__vectorT_char_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_char_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_char_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_char_t,&le_swig__p_std__vectorT_char_t);
le_swig__p_std__vectorT_int_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_int_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_int_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_int_p_t,&le_swig__p_std__vectorT_int_p_t);
le_swig__p_Struct=zend_register_list_destructors_ex(_wrap_destroy_p_Struct,NULL,(char *)(SWIGTYPE_p_Struct->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Struct,&le_swig__p_Struct);
le_swig__p_MyClass=zend_register_list_destructors_ex(_wrap_destroy_p_MyClass,NULL,(char *)(SWIGTYPE_p_MyClass->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_MyClass,&le_swig__p_MyClass);
le_swig__p_const_reference=zend_register_list_destructors_ex(_wrap_destroy_p_const_reference,NULL,(char *)(SWIGTYPE_p_const_reference->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_const_reference,&le_swig__p_const_reference);
le_swig__p_std__vectorT_double_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_double_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_double_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_double_t,&le_swig__p_std__vectorT_double_t);
le_swig__p_float=zend_register_list_destructors_ex(_wrap_destroy_p_float,NULL,(char *)(SWIGTYPE_p_float->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_float,&le_swig__p_float);
le_swig__p_std__vectorT_Struct_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_Struct_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_Struct_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_Struct_t,&le_swig__p_std__vectorT_Struct_t);
le_swig__p_size_type=zend_register_list_destructors_ex(_wrap_destroy_p_size_type,NULL,(char *)(SWIGTYPE_p_size_type->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_size_type,&le_swig__p_size_type);
le_swig__p_std__vectorT_int_const_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_int_const_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_int_const_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_int_const_p_t,&le_swig__p_std__vectorT_int_const_p_t);
le_swig__p_std__vectorT_Struct_const_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_Struct_const_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_Struct_const_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_Struct_const_p_t,&le_swig__p_std__vectorT_Struct_const_p_t);
le_swig__p_RetsMetadata=zend_register_list_destructors_ex(_wrap_destroy_p_RetsMetadata,NULL,(char *)(SWIGTYPE_p_RetsMetadata->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_RetsMetadata,&le_swig__p_RetsMetadata);
le_swig__p_std__vectorT_bool_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_bool_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_bool_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_bool_t,&le_swig__p_std__vectorT_bool_t);
le_swig__p_std__vectorT_unsigned_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_unsigned_int_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_unsigned_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_unsigned_int_t,&le_swig__p_std__vectorT_unsigned_int_t);
le_swig__p_std__vectorT_int_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_int_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_int_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_int_t,&le_swig__p_std__vectorT_int_t);
le_swig__p_value_type=zend_register_list_destructors_ex(_wrap_destroy_p_value_type,NULL,(char *)(SWIGTYPE_p_value_type->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_value_type,&le_swig__p_value_type);
le_swig__p_std__vectorT_unsigned_short_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_unsigned_short_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_unsigned_short_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_unsigned_short_t,&le_swig__p_std__vectorT_unsigned_short_t);
le_swig__p_std__vectorT_short_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_short_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_short_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_short_t,&le_swig__p_std__vectorT_short_t);
le_swig__p_std__vectorT_MyClass_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_MyClass_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_MyClass_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_MyClass_p_t,&le_swig__p_std__vectorT_MyClass_p_t);
le_swig__p_std__vectorT_std__string_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_std__string_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_std__string_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__string_t,&le_swig__p_std__vectorT_std__string_t);
le_swig__p_std__vectorT_Struct_p_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_Struct_p_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_Struct_p_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_Struct_p_t,&le_swig__p_std__vectorT_Struct_p_t);
le_swig__p_Structure=zend_register_list_destructors_ex(_wrap_destroy_p_Structure,NULL,(char *)(SWIGTYPE_p_Structure->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_Structure,&le_swig__p_Structure);
le_swig__p_std__vectorT_float_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_float_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_float_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_float_t,&le_swig__p_std__vectorT_float_t);
le_swig__p_int=zend_register_list_destructors_ex(_wrap_destroy_p_int,NULL,(char *)(SWIGTYPE_p_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_int,&le_swig__p_int);
CG(active_class_entry) = NULL;
/* end oinit subsection */

/* cinit subsection */
/* end cinit subsection */

    return SUCCESS;
}

PHP_RINIT_FUNCTION(li_std_vector)
{
/* rinit section */

/* vinit subsection */
/* end vinit subsection */

    return SUCCESS;
}

PHP_MSHUTDOWN_FUNCTION(li_std_vector)
{
/* shutdown section */
#ifdef ZTS
    ts_free_id(li_std_vector_globals_id);
#endif
    return SUCCESS;
}

PHP_RSHUTDOWN_FUNCTION(li_std_vector)
{
/* rshutdown section */

    return SUCCESS;
}

PHP_MINFO_FUNCTION(li_std_vector)
{
}
/* end init section */
