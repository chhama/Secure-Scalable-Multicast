<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('li_cmalloc')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_li_cmalloc.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('li_cmalloc.so')) return;
    } else {
      if (!dl('li_cmalloc.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class li_cmalloc {
	static function malloc_int($nbytes) {
		return malloc_int($nbytes);
	}

	static function calloc_int($nobj,$sz) {
		return calloc_int($nobj,$sz);
	}

	static function realloc_int($ptr,$nitems) {
		return realloc_int($ptr,$nitems);
	}

	static function free_int($ptr) {
		free_int($ptr);
	}

	const sizeof_int = sizeof_int;

	static function malloc_double($nbytes) {
		return malloc_double($nbytes);
	}

	static function calloc_double($nobj,$sz) {
		return calloc_double($nobj,$sz);
	}

	static function realloc_double($ptr,$nitems) {
		return realloc_double($ptr,$nitems);
	}

	static function free_double($ptr) {
		free_double($ptr);
	}

	const sizeof_double = sizeof_double;

	static function malloc_void($nbytes) {
		return malloc_void($nbytes);
	}

	static function calloc_void($nobj,$sz) {
		return calloc_void($nobj,$sz);
	}

	static function realloc_void($ptr,$nitems) {
		return realloc_void($ptr,$nitems);
	}

	static function free_void($ptr) {
		free_void($ptr);
	}

	static function malloc_intp($nbytes) {
		return malloc_intp($nbytes);
	}

	static function calloc_intp($nobj,$sz) {
		return calloc_intp($nobj,$sz);
	}

	static function realloc_intp($ptr,$nitems) {
		return realloc_intp($ptr,$nitems);
	}

	static function free_intp($ptr) {
		free_intp($ptr);
	}

	const sizeof_intp = sizeof_intp;
}

/* PHP Proxy Classes */

?>
