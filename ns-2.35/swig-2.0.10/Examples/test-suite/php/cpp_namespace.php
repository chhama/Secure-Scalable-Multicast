<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('cpp_namespace')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_cpp_namespace.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('cpp_namespace.so')) return;
    } else {
      if (!dl('cpp_namespace.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class cpp_namespace {
	static function fact($n) {
		return fact($n);
	}

	static function Foo_set($Foo) {
		Foo_set($Foo);
	}

	static function Foo_get() {
		return Foo_get();
	}

	static function weird($x,$y) {
		weird($x,$y);
	}

	static function do_method($t) {
		return do_method($t);
	}

	static function do_method2($t) {
		return do_method2($t);
	}

	static function foo3($x) {
		return foo3($x);
	}

	static function do_method3($t,$x) {
		return do_method3($t,$x);
	}
}

/* PHP Proxy Classes */
class Test {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cpp_namespace_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cpp_namespace_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_example__Test') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Test();
	}

	function method() {
		return Test_method($this->_cPtr);
	}
}

class Test2 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cpp_namespace_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cpp_namespace_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function method() {
		return Test2_method($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Foo__Test2') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Test2();
	}
}

class Test3 extends Test2 {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cpp_namespace_alter_newobject($this->_cPtr,$value);
		Test2::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Test2::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cpp_namespace_get_newobject($this->_cPtr);
		return Test2::__get($var);
	}

	function method() {
		return Test3_method($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Foo2__Test3') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Test3();
	}
}

class Test4 extends Test3 {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cpp_namespace_alter_newobject($this->_cPtr,$value);
		Test3::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Test3::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cpp_namespace_get_newobject($this->_cPtr);
		return Test3::__get($var);
	}

	function method() {
		return Test4_method($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Foo3__Test4') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Test4();
	}
}

class Test5 extends Test3 {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cpp_namespace_alter_newobject($this->_cPtr,$value);
		Test3::__set($var,$value);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Test3::__isset($var);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cpp_namespace_get_newobject($this->_cPtr);
		return Test3::__get($var);
	}

	function method() {
		return Test5_method($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Test5') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Test5();
	}
}


?>
