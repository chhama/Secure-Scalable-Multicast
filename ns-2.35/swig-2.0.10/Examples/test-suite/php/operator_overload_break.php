<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('operator_overload_break')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_operator_overload_break.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('operator_overload_break.so')) return;
    } else {
      if (!dl('operator_overload_break.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* PHP Proxy Classes */
class Op {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'k') return Op_k_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_operator_overload_break_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Op_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'k') return Op_k_get($this->_cPtr);
		if ($var === 'thisown') return swig_operator_overload_break_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($n_or_other) {
		if (is_resource($n_or_other) && get_resource_type($n_or_other) === '_p_Op') {
			$this->_cPtr=$n_or_other;
			return;
		}
		$this->_cPtr=new_Op($n_or_other);
	}

	function EqualEqual($rhs_or_i) {
		return Op_EqualEqual($this->_cPtr,$rhs_or_i);
	}

	function Plus($rhs) {
		$r=Op_Plus($this->_cPtr,$rhs);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function Minus($rhs) {
		$r=Op_Minus($this->_cPtr,$rhs);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function __rsub__($lhs) {
		$r=Op___rsub__($this->_cPtr,$lhs);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function PlusPlusPrefix() {
		$r=Op_PlusPlusPrefix($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Op($r);
		}
		return $r;
	}

	function PrintK() {
		Op_PrintK($this->_cPtr);
	}
}


?>
