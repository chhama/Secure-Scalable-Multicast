<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('cpp_basic')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_cpp_basic.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('cpp_basic.so')) return;
    } else {
      if (!dl('cpp_basic.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class cpp_basic {
	static function get_func1_ptr() {
		return get_func1_ptr();
	}

	static function get_func2_ptr() {
		return get_func2_ptr();
	}

	static function test_func_ptr($f,$a) {
		return test_func_ptr($f,$a);
	}
}

/* PHP Proxy Classes */
class Foo {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'func_ptr') return Foo_func_ptr_set($this->_cPtr,$value);
		if ($var === 'num') return Foo_num_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_cpp_basic_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Foo_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'func_ptr') return Foo_func_ptr_get($this->_cPtr);
		if ($var === 'num') return Foo_num_get($this->_cPtr);
		if ($var === 'thisown') return swig_cpp_basic_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($a) {
		if (is_resource($a) && get_resource_type($a) === '_p_Foo') {
			$this->_cPtr=$a;
			return;
		}
		$this->_cPtr=new_Foo($a);
	}

	function func1($a) {
		return Foo_func1($this->_cPtr,$a);
	}

	function func2($a) {
		return Foo_func2($this->_cPtr,$a);
	}
}

class Bar {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'Bar_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_cpp_basic_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Bar_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'fptr') return new Foo(Bar_fptr_get($this->_cPtr));
		if ($var === 'fval') return new Foo(Bar_fval_get($this->_cPtr));
		if ($var === 'fref') return new Foo(Bar_fref_get($this->_cPtr));
		if ($var === 'cint') return Bar_cint_get($this->_cPtr);
		if ($var === 'thisown') return swig_cpp_basic_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Bar') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Bar();
	}

	const global_cint = Bar_global_cint;

	static function global_fptr() {
		if (func_num_args()) {
			Bar_global_fptr_set(func_get_arg(0));
			return;
		}

		$r=Bar_global_fptr_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Foo($r);
		}
		return $r;
	}

	static function global_fref() {
		if (func_num_args()) {
			Bar_global_fref_set(func_get_arg(0));
			return;
		}

		$r=Bar_global_fref_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Foo($r);
		}
		return $r;
	}

	static function global_fval() {
		if (func_num_args()) {
			Bar_global_fval_set(func_get_arg(0));
			return;
		}

		$r=Bar_global_fval_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Foo($r);
		}
		return $r;
	}

	function test($a,$f) {
		return Bar_test($this->_cPtr,$a,$f);
	}

	function testFoo($a,$f) {
		$r=Bar_testFoo($this->_cPtr,$a,$f);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Foo($r);
		}
		return $r;
	}
}

class Fl_Window {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_cpp_basic_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_cpp_basic_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Fl_Window') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Fl_Window();
	}

	function show($count=null,$data=null) {
		Fl_Window_show($this->_cPtr,$count,$data);
	}
}


?>
