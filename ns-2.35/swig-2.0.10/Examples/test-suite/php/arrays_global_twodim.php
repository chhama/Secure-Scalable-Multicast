<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('arrays_global_twodim')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_arrays_global_twodim.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('arrays_global_twodim.so')) return;
    } else {
      if (!dl('arrays_global_twodim.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class arrays_global_twodim {
	const ARRAY_LEN_X = ARRAY_LEN_X;

	const ARRAY_LEN_Y = ARRAY_LEN_Y;

	const One = 0;

	const Two = Two;

	const Three = Three;

	const Four = Four;

	const Five = Five;

	static function array_c_set($array_c) {
		array_c_set($array_c);
	}

	static function array_c_get() {
		return array_c_get();
	}

	static function array_sc_set($array_sc) {
		array_sc_set($array_sc);
	}

	static function array_sc_get() {
		return array_sc_get();
	}

	static function array_uc_set($array_uc) {
		array_uc_set($array_uc);
	}

	static function array_uc_get() {
		return array_uc_get();
	}

	static function array_s_set($array_s) {
		array_s_set($array_s);
	}

	static function array_s_get() {
		return array_s_get();
	}

	static function array_us_set($array_us) {
		array_us_set($array_us);
	}

	static function array_us_get() {
		return array_us_get();
	}

	static function array_i_set($array_i) {
		array_i_set($array_i);
	}

	static function array_i_get() {
		return array_i_get();
	}

	static function array_ui_set($array_ui) {
		array_ui_set($array_ui);
	}

	static function array_ui_get() {
		return array_ui_get();
	}

	static function array_l_set($array_l) {
		array_l_set($array_l);
	}

	static function array_l_get() {
		return array_l_get();
	}

	static function array_ul_set($array_ul) {
		array_ul_set($array_ul);
	}

	static function array_ul_get() {
		return array_ul_get();
	}

	static function array_ll_set($array_ll) {
		array_ll_set($array_ll);
	}

	static function array_ll_get() {
		return array_ll_get();
	}

	static function array_f_set($array_f) {
		array_f_set($array_f);
	}

	static function array_f_get() {
		return array_f_get();
	}

	static function array_d_set($array_d) {
		array_d_set($array_d);
	}

	static function array_d_get() {
		return array_d_get();
	}

	static function array_struct_set($array_struct) {
		array_struct_set($array_struct);
	}

	static function array_struct_get() {
		return array_struct_get();
	}

	static function array_structpointers_set($array_structpointers) {
		array_structpointers_set($array_structpointers);
	}

	static function array_structpointers_get() {
		return array_structpointers_get();
	}

	static function array_ipointers_set($array_ipointers) {
		array_ipointers_set($array_ipointers);
	}

	static function array_ipointers_get() {
		return array_ipointers_get();
	}

	static function array_enum_set($array_enum) {
		array_enum_set($array_enum);
	}

	static function array_enum_get() {
		return array_enum_get();
	}

	static function array_enumpointers_set($array_enumpointers) {
		array_enumpointers_set($array_enumpointers);
	}

	static function array_enumpointers_get() {
		return array_enumpointers_get();
	}

	static function array_const_i_get() {
		return array_const_i_get();
	}

	static function fn_taking_arrays($array_struct) {
		fn_taking_arrays($array_struct);
	}

	static function get_2d_array($array,$x,$y) {
		return get_2d_array($array,$x,$y);
	}

	const Size = 32;

	static function chitMat_set($chitMat) {
		chitMat_set($chitMat);
	}

	static function chitMat_get() {
		return chitMat_get();
	}

	static function hitMat_val_set($hitMat_val) {
		hitMat_val_set($hitMat_val);
	}

	static function hitMat_val_get() {
		return hitMat_val_get();
	}

	static function hitMat_set($hitMat) {
		hitMat_set($hitMat);
	}

	static function hitMat_get() {
		return hitMat_get();
	}
}

/* PHP Proxy Classes */
class SimpleStruct {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'double_field') return SimpleStruct_double_field_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_arrays_global_twodim_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('SimpleStruct_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'double_field') return SimpleStruct_double_field_get($this->_cPtr);
		if ($var === 'thisown') return swig_arrays_global_twodim_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_SimpleStruct') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_SimpleStruct();
	}
}

class Material {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_arrays_global_twodim_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_arrays_global_twodim_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Material') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Material();
	}
}


?>
