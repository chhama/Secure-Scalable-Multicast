<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('li_typemaps')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_li_typemaps.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('li_typemaps.so')) return;
    } else {
      if (!dl('li_typemaps.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class li_typemaps {
	static function in_bool($INPUT) {
		return in_bool($INPUT);
	}

	static function in_int($INPUT) {
		return in_int($INPUT);
	}

	static function in_long($INPUT) {
		return in_long($INPUT);
	}

	static function in_short($INPUT) {
		return in_short($INPUT);
	}

	static function in_uint($INPUT) {
		return in_uint($INPUT);
	}

	static function in_ushort($INPUT) {
		return in_ushort($INPUT);
	}

	static function in_ulong($INPUT) {
		return in_ulong($INPUT);
	}

	static function in_uchar($INPUT) {
		return in_uchar($INPUT);
	}

	static function in_schar($INPUT) {
		return in_schar($INPUT);
	}

	static function in_float($INPUT) {
		return in_float($INPUT);
	}

	static function in_double($INPUT) {
		return in_double($INPUT);
	}

	static function in_longlong($INPUT) {
		return in_longlong($INPUT);
	}

	static function in_ulonglong($INPUT) {
		return in_ulonglong($INPUT);
	}

	static function inr_bool($INPUT) {
		return inr_bool($INPUT);
	}

	static function inr_int($INPUT) {
		return inr_int($INPUT);
	}

	static function inr_long($INPUT) {
		return inr_long($INPUT);
	}

	static function inr_short($INPUT) {
		return inr_short($INPUT);
	}

	static function inr_uint($INPUT) {
		return inr_uint($INPUT);
	}

	static function inr_ushort($INPUT) {
		return inr_ushort($INPUT);
	}

	static function inr_ulong($INPUT) {
		return inr_ulong($INPUT);
	}

	static function inr_uchar($INPUT) {
		return inr_uchar($INPUT);
	}

	static function inr_schar($INPUT) {
		return inr_schar($INPUT);
	}

	static function inr_float($INPUT) {
		return inr_float($INPUT);
	}

	static function inr_double($INPUT) {
		return inr_double($INPUT);
	}

	static function inr_longlong($INPUT) {
		return inr_longlong($INPUT);
	}

	static function inr_ulonglong($INPUT) {
		return inr_ulonglong($INPUT);
	}

	static function out_bool($x) {
		out_bool($x);
	}

	static function out_int($x) {
		out_int($x);
	}

	static function out_short($x) {
		out_short($x);
	}

	static function out_long($x) {
		out_long($x);
	}

	static function out_uint($x) {
		out_uint($x);
	}

	static function out_ushort($x) {
		out_ushort($x);
	}

	static function out_ulong($x) {
		out_ulong($x);
	}

	static function out_uchar($x) {
		out_uchar($x);
	}

	static function out_schar($x) {
		out_schar($x);
	}

	static function out_float($x) {
		out_float($x);
	}

	static function out_double($x) {
		out_double($x);
	}

	static function out_longlong($x) {
		out_longlong($x);
	}

	static function out_ulonglong($x) {
		out_ulonglong($x);
	}

	static function out_foo($a) {
		$r=out_foo($a);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Foo($r);
		}
		return $r;
	}

	static function outr_bool($x) {
		outr_bool($x);
	}

	static function outr_int($x) {
		outr_int($x);
	}

	static function outr_short($x) {
		outr_short($x);
	}

	static function outr_long($x) {
		outr_long($x);
	}

	static function outr_uint($x) {
		outr_uint($x);
	}

	static function outr_ushort($x) {
		outr_ushort($x);
	}

	static function outr_ulong($x) {
		outr_ulong($x);
	}

	static function outr_uchar($x) {
		outr_uchar($x);
	}

	static function outr_schar($x) {
		outr_schar($x);
	}

	static function outr_float($x) {
		outr_float($x);
	}

	static function outr_double($x) {
		outr_double($x);
	}

	static function outr_longlong($x) {
		outr_longlong($x);
	}

	static function outr_ulonglong($x) {
		outr_ulonglong($x);
	}

	static function inout_bool($INOUT) {
		inout_bool($INOUT);
	}

	static function inout_int($INOUT) {
		inout_int($INOUT);
	}

	static function inout_short($INOUT) {
		inout_short($INOUT);
	}

	static function inout_long($INOUT) {
		inout_long($INOUT);
	}

	static function inout_uint($INOUT) {
		inout_uint($INOUT);
	}

	static function inout_ushort($INOUT) {
		inout_ushort($INOUT);
	}

	static function inout_ulong($INOUT) {
		inout_ulong($INOUT);
	}

	static function inout_uchar($INOUT) {
		inout_uchar($INOUT);
	}

	static function inout_schar($INOUT) {
		inout_schar($INOUT);
	}

	static function inout_float($INOUT) {
		inout_float($INOUT);
	}

	static function inout_double($INOUT) {
		inout_double($INOUT);
	}

	static function inout_longlong($INOUT) {
		inout_longlong($INOUT);
	}

	static function inout_ulonglong($INOUT) {
		inout_ulonglong($INOUT);
	}

	static function inoutr_bool($INOUT) {
		inoutr_bool($INOUT);
	}

	static function inoutr_int($INOUT) {
		inoutr_int($INOUT);
	}

	static function inoutr_short($INOUT) {
		inoutr_short($INOUT);
	}

	static function inoutr_long($INOUT) {
		inoutr_long($INOUT);
	}

	static function inoutr_uint($INOUT) {
		inoutr_uint($INOUT);
	}

	static function inoutr_ushort($INOUT) {
		inoutr_ushort($INOUT);
	}

	static function inoutr_ulong($INOUT) {
		inoutr_ulong($INOUT);
	}

	static function inoutr_uchar($INOUT) {
		inoutr_uchar($INOUT);
	}

	static function inoutr_schar($INOUT) {
		inoutr_schar($INOUT);
	}

	static function inoutr_float($INOUT) {
		inoutr_float($INOUT);
	}

	static function inoutr_double($INOUT) {
		inoutr_double($INOUT);
	}

	static function inoutr_longlong($INOUT) {
		inoutr_longlong($INOUT);
	}

	static function inoutr_ulonglong($INOUT) {
		inoutr_ulonglong($INOUT);
	}

	static function inoutr_int2($INOUT,$INOUT2) {
		inoutr_int2($INOUT,$INOUT2);
	}
}

/* PHP Proxy Classes */
class Foo {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'a') return Foo_a_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_li_typemaps_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Foo_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'a') return Foo_a_get($this->_cPtr);
		if ($var === 'thisown') return swig_li_typemaps_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Foo') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Foo();
	}
}


?>
