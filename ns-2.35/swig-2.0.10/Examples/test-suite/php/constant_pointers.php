<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('constant_pointers')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_constant_pointers.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('constant_pointers.so')) return;
    } else {
      if (!dl('constant_pointers.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class constant_pointers {
	static function GlobalInt_set($GlobalInt) {
		GlobalInt_set($GlobalInt);
	}

	static function GlobalInt_get() {
		return GlobalInt_get();
	}

	static function ConstInt_get() {
		return ConstInt_get();
	}

	static function GlobalIntPtr_set($GlobalIntPtr) {
		GlobalIntPtr_set($GlobalIntPtr);
	}

	static function GlobalIntPtr_get() {
		return GlobalIntPtr_get();
	}

	static function GlobalConstIntPtr_get() {
		return GlobalConstIntPtr_get();
	}

	const ARRAY_SIZE = ARRAY_SIZE;

	static function foofunction($i) {
		foofunction($i);
	}

	static function int1_set($int1) {
		int1_set($int1);
	}

	static function int1_get() {
		return int1_get();
	}

	static function int2_set($int2) {
		int2_set($int2);
	}

	static function int2_get() {
		return int2_get();
	}

	static function int3_set($int3) {
		int3_set($int3);
	}

	static function int3_get() {
		return int3_get();
	}

	static function int4_get() {
		return int4_get();
	}

	static function global_const_int_ptr_array_get() {
		return global_const_int_ptr_array_get();
	}

	static function array_member4_get() {
		return array_member4_get();
	}

	static function globalRet1() {
		return globalRet1();
	}

	static function globalRet2() {
		return globalRet2();
	}

	static function opaque($aptr) {
		return opaque($aptr);
	}

	static function bar($b) {
		$r=bar($b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new B($r);
		}
		return $r;
	}

	static function cbar($b) {
		$r=cbar($b);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new B($r);
		}
		return $r;
	}

	static function wxEVENT_COMMAND_BUTTON_CLICKEDr_set($wxEVENT_COMMAND_BUTTON_CLICKEDr) {
		wxEVENT_COMMAND_BUTTON_CLICKEDr_set($wxEVENT_COMMAND_BUTTON_CLICKEDr);
	}

	static function wxEVENT_COMMAND_BUTTON_CLICKEDr_get() {
		return wxEVENT_COMMAND_BUTTON_CLICKEDr_get();
	}

	static function wxEVENT_COMMAND_BUTTON_CLICKEDp_set($wxEVENT_COMMAND_BUTTON_CLICKEDp) {
		wxEVENT_COMMAND_BUTTON_CLICKEDp_set($wxEVENT_COMMAND_BUTTON_CLICKEDp);
	}

	static function wxEVENT_COMMAND_BUTTON_CLICKEDp_get() {
		return wxEVENT_COMMAND_BUTTON_CLICKEDp_get();
	}

	static function languages1_set($languages1) {
		languages1_set($languages1);
	}

	static function languages1_get() {
		return languages1_get();
	}

	static function languages2_set($languages2) {
		languages2_set($languages2);
	}

	static function languages2_get() {
		return languages2_get();
	}

	static function icap_set($icap) {
		icap_set($icap);
	}

	static function icap_get() {
		return icap_get();
	}

	static function cap_set($cap) {
		cap_set($cap);
	}

	static function cap_get() {
		$r=cap_get();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Foo($r);
		}
		return $r;
	}
}

/* PHP Proxy Classes */
class ParametersTest {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_constant_pointers_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_constant_pointers_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function param1($a) {
		ParametersTest_param1($this->_cPtr,$a);
	}

	function param2($a) {
		ParametersTest_param2($this->_cPtr,$a);
	}

	function param3($a) {
		ParametersTest_param3($this->_cPtr,$a);
	}

	function param4($a) {
		ParametersTest_param4($this->_cPtr,$a);
	}

	function param5($a) {
		ParametersTest_param5($this->_cPtr,$a);
	}

	function param6($a) {
		ParametersTest_param6($this->_cPtr,$a);
	}

	function param7($a) {
		ParametersTest_param7($this->_cPtr,$a);
	}

	function param8($a) {
		ParametersTest_param8($this->_cPtr,$a);
	}

	function param9($a) {
		ParametersTest_param9($this->_cPtr,$a);
	}

	function param10($a) {
		ParametersTest_param10($this->_cPtr,$a);
	}

	function param11($a) {
		ParametersTest_param11($this->_cPtr,$a);
	}

	function param_array1($a) {
		ParametersTest_param_array1($this->_cPtr,$a);
	}

	function param_array2($a) {
		ParametersTest_param_array2($this->_cPtr,$a);
	}

	function param_array3($a) {
		ParametersTest_param_array3($this->_cPtr,$a);
	}

	function param_array4($a) {
		ParametersTest_param_array4($this->_cPtr,$a);
	}

	function param_array5($a) {
		ParametersTest_param_array5($this->_cPtr,$a);
	}

	function param_array6($a) {
		ParametersTest_param_array6($this->_cPtr,$a);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ParametersTest') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_ParametersTest();
	}
}

class MemberVariablesTest {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'MemberVariablesTest_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_constant_pointers_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('MemberVariablesTest_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'member4') return new ParametersTest(MemberVariablesTest_member4_get($this->_cPtr));
		if ($var === 'member2') return new ParametersTest(MemberVariablesTest_member2_get($this->_cPtr));
		$func = 'MemberVariablesTest_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_constant_pointers_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_MemberVariablesTest') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_MemberVariablesTest();
	}
}

class ReturnValuesTest {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'ReturnValuesTest_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_constant_pointers_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('ReturnValuesTest_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'ReturnValuesTest_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_constant_pointers_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function ret1() {
		return ReturnValuesTest_ret1($this->_cPtr);
	}

	function ret2() {
		return ReturnValuesTest_ret2($this->_cPtr);
	}

	function ret3() {
		return ReturnValuesTest_ret3($this->_cPtr);
	}

	function ret4() {
		return ReturnValuesTest_ret4($this->_cPtr);
	}

	function ret5() {
		return ReturnValuesTest_ret5($this->_cPtr);
	}

	function ret6($a) {
		ReturnValuesTest_ret6($this->_cPtr,$a);
	}

	function ret7() {
		return ReturnValuesTest_ret7($this->_cPtr);
	}

	function ret8($a) {
		ReturnValuesTest_ret8($this->_cPtr,$a);
	}

	function ret9() {
		return ReturnValuesTest_ret9($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ReturnValuesTest') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_ReturnValuesTest();
	}
}

class B {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'B_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_constant_pointers_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('B_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'B_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_constant_pointers_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_B') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_B();
	}
}

class Foo {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'icap') return Foo_icap_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_constant_pointers_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Foo_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'icap') return Foo_icap_get($this->_cPtr);
		if ($var === 'thisown') return swig_constant_pointers_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Foo') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Foo();
	}
}


?>
