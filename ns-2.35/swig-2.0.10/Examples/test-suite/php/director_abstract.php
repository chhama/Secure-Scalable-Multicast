<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('director_abstract')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_director_abstract.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('director_abstract.so')) return;
    } else {
      if (!dl('director_abstract.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class director_abstract {
	static function g($obj) {
		return g($obj);
	}
}

/* PHP Proxy Classes */
abstract class Foo {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_director_abstract_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_director_abstract_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function ping() {
		return Foo_ping($this->_cPtr);
	}

	function pong() {
		return Foo_pong($this->_cPtr);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Foo') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'Foo') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_Foo($_this);
	}
}

class Example0 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_director_abstract_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_director_abstract_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($x=null,$y=null) {
		if (is_resource($x) && get_resource_type($x) === '_p_Example0') {
			$this->_cPtr=$x;
			return;
		}
		if (get_class($this) === 'Example0') {
			$_this = null;
		} else {
			$_this = $this;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Example0($_this); break;
		case 1: $this->_cPtr=new_Example0($_this, $x); break;
		default: $this->_cPtr=new_Example0($_this, $x,$y);
		}
	}

	function GetXSize() {
		return Example0_GetXSize($this->_cPtr);
	}

	function Color($r_,$g,$b) {
		return Example0_Color($this->_cPtr,$r_,$g,$b);
	}

	static function get_color($ptr,$r_,$g,$b) {
		return Example0_get_color($ptr,$r_,$g,$b);
	}
}

abstract class Example1 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_director_abstract_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_director_abstract_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($x=null,$y=null) {
		if (is_resource($x) && get_resource_type($x) === '_p_Example1') {
			$this->_cPtr=$x;
			return;
		}
		if (get_class($this) === 'Example1') {
			$_this = null;
		} else {
			$_this = $this;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Example1($_this); break;
		case 1: $this->_cPtr=new_Example1($_this, $x); break;
		default: $this->_cPtr=new_Example1($_this, $x,$y);
		}
	}

	function GetXSize() {
		return Example1_GetXSize($this->_cPtr);
	}

	function Color($r_,$g,$b) {
		return Example1_Color($this->_cPtr,$r_,$g,$b);
	}

	static function get_color($ptr,$r_,$g,$b) {
		return Example1_get_color($ptr,$r_,$g,$b);
	}
}

abstract class Example2 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_director_abstract_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_director_abstract_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	protected function __construct($x,$y=null) {
		if (is_resource($x) && get_resource_type($x) === '_p_Example2') {
			$this->_cPtr=$x;
			return;
		}
		if (get_class($this) === 'Example2') {
			$_this = null;
		} else {
			$_this = $this;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_Example2($_this, $x); break;
		default: $this->_cPtr=new_Example2($_this, $x,$y);
		}
	}

	function GetXSize() {
		return Example2_GetXSize($this->_cPtr);
	}

	function Color($r_,$g,$b) {
		return Example2_Color($this->_cPtr,$r_,$g,$b);
	}

	static function get_color($ptr,$r_,$g,$b) {
		return Example2_get_color($ptr,$r_,$g,$b);
	}
}

abstract class Example4 {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_director_abstract_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_director_abstract_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	protected function __construct($x=null,$y=null) {
		if (is_resource($x) && get_resource_type($x) === '_p_Example4') {
			$this->_cPtr=$x;
			return;
		}
		if (get_class($this) === 'Example4') {
			$_this = null;
		} else {
			$_this = $this;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Example4($_this); break;
		case 1: $this->_cPtr=new_Example4($_this, $x); break;
		default: $this->_cPtr=new_Example4($_this, $x,$y);
		}
	}

	function GetXSize() {
		return Example4_GetXSize($this->_cPtr);
	}

	function Color($r_,$g,$b) {
		return Example4_Color($this->_cPtr,$r_,$g,$b);
	}

	static function get_color($ptr,$r_,$g,$b) {
		return Example4_get_color($ptr,$r_,$g,$b);
	}
}

abstract class Example3_i {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_director_abstract_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_director_abstract_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($x=null,$y=null) {
		if (is_resource($x) && get_resource_type($x) === '_p_ns__Example3T_int_t') {
			$this->_cPtr=$x;
			return;
		}
		if (get_class($this) === 'Example3_i') {
			$_this = null;
		} else {
			$_this = $this;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_Example3_i($_this); break;
		case 1: $this->_cPtr=new_Example3_i($_this, $x); break;
		default: $this->_cPtr=new_Example3_i($_this, $x,$y);
		}
	}

	function Color($r_,$g,$b) {
		return Example3_i_Color($this->_cPtr,$r_,$g,$b);
	}

	static function get_color($ptr,$r_,$g,$b) {
		return Example3_i_get_color($ptr,$r_,$g,$b);
	}
}

abstract class A {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_director_abstract_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_director_abstract_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	protected function __construct($arg1) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_A') {
			$this->_cPtr=$arg1;
			return;
		}
		if (get_class($this) === 'A') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_A($_this, $arg1);
	}

	protected function f() {
		return A_f($this->_cPtr);
	}
}


?>
