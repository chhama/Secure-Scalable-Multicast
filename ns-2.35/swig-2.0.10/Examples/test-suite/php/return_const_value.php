<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('return_const_value')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_return_const_value.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('return_const_value.so')) return;
    } else {
      if (!dl('return_const_value.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* PHP Proxy Classes */
class Foo {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === '_val') return Foo__val_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_return_const_value_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('Foo_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === '_val') return Foo__val_get($this->_cPtr);
		if ($var === 'thisown') return swig_return_const_value_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($x) {
		if (is_resource($x) && get_resource_type($x) === '_p_Foo') {
			$this->_cPtr=$x;
			return;
		}
		$this->_cPtr=new_Foo($x);
	}

	function getVal() {
		return Foo_getVal($this->_cPtr);
	}
}

class Foo_ptr {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_return_const_value_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === '_val') return Foo_ptr__val_get($this->_cPtr);
		if ($var === 'thisown') return swig_return_const_value_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	static function getPtr() {
		$r=Foo_ptr_getPtr();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Foo_ptr($r);
		}
		return $r;
	}

	static function getConstPtr() {
		$r=Foo_ptr_getConstPtr();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Foo_ptr($r);
		}
		return $r;
	}

	function __deref__() {
		$r=Foo_ptr___deref__($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Foo($r);
		}
		return $r;
	}

	function __construct($p_or_f,$own=false) {
		if (is_resource($p_or_f) && get_resource_type($p_or_f) === '_p_Foo_ptr') {
			$this->_cPtr=$p_or_f;
			return;
		}
		$this->_cPtr=new_Foo_ptr($p_or_f,$own);
	}

	function getVal() {
		return Foo_ptr_getVal($this->_cPtr);
	}
}


?>
