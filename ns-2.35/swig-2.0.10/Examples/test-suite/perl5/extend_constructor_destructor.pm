# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package extend_constructor_destructor;
use base qw(Exporter);
use base qw(DynaLoader);
package extend_constructor_destructorc;
bootstrap extend_constructor_destructor;
package extend_constructor_destructor;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package extend_constructor_destructor;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package extend_constructor_destructor;


############# Class : extend_constructor_destructor::AStruct ##############

package extend_constructor_destructor::AStruct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( extend_constructor_destructor );
%OWNER = ();
%ITERATORS = ();
*swig_ivar_get = *extend_constructor_destructorc::AStruct_ivar_get;
*swig_ivar_set = *extend_constructor_destructorc::AStruct_ivar_set;
sub new {
    my $pkg = shift;
    my $self = extend_constructor_destructorc::new_AStruct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        extend_constructor_destructorc::delete_AStruct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : extend_constructor_destructor::BStruct ##############

package extend_constructor_destructor::BStruct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( extend_constructor_destructor );
%OWNER = ();
%ITERATORS = ();
*swig_ivar_get = *extend_constructor_destructorc::BStruct_ivar_get;
*swig_ivar_set = *extend_constructor_destructorc::BStruct_ivar_set;
sub new {
    my $pkg = shift;
    my $self = extend_constructor_destructorc::new_BStruct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        extend_constructor_destructorc::delete_BStruct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : extend_constructor_destructor::CStruct ##############

package extend_constructor_destructor::CStruct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( extend_constructor_destructor );
%OWNER = ();
%ITERATORS = ();
*swig_ivar_get = *extend_constructor_destructorc::CStruct_ivar_get;
*swig_ivar_set = *extend_constructor_destructorc::CStruct_ivar_set;
sub new {
    my $pkg = shift;
    my $self = extend_constructor_destructorc::new_CStruct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        extend_constructor_destructorc::delete_CStruct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : extend_constructor_destructor::DStruct ##############

package extend_constructor_destructor::DStruct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( extend_constructor_destructor );
%OWNER = ();
%ITERATORS = ();
*swig_ivar_get = *extend_constructor_destructorc::DStruct_ivar_get;
*swig_ivar_set = *extend_constructor_destructorc::DStruct_ivar_set;
sub new {
    my $pkg = shift;
    my $self = extend_constructor_destructorc::new_DStruct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        extend_constructor_destructorc::delete_DStruct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : extend_constructor_destructor::EStruct ##############

package extend_constructor_destructor::EStruct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( extend_constructor_destructor );
%OWNER = ();
%ITERATORS = ();
*swig_ivar_get = *extend_constructor_destructorc::EStruct_ivar_get;
*swig_ivar_set = *extend_constructor_destructorc::EStruct_ivar_set;
sub new {
    my $pkg = shift;
    my $self = extend_constructor_destructorc::new_EStruct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        extend_constructor_destructorc::delete_EStruct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : extend_constructor_destructor::FStruct ##############

package extend_constructor_destructor::FStruct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( extend_constructor_destructor );
%OWNER = ();
%ITERATORS = ();
*swig_ivar_get = *extend_constructor_destructorc::FStruct_ivar_get;
*swig_ivar_set = *extend_constructor_destructorc::FStruct_ivar_set;
sub new {
    my $pkg = shift;
    my $self = extend_constructor_destructorc::new_FStruct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        extend_constructor_destructorc::delete_FStruct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : extend_constructor_destructor::GStruct ##############

package extend_constructor_destructor::GStruct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( extend_constructor_destructor );
%OWNER = ();
%ITERATORS = ();
*swig_ivar_get = *extend_constructor_destructorc::GStruct_ivar_get;
*swig_ivar_set = *extend_constructor_destructorc::GStruct_ivar_set;
sub new {
    my $pkg = shift;
    my $self = extend_constructor_destructorc::new_GStruct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        extend_constructor_destructorc::delete_GStruct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package extend_constructor_destructor;

*globalVar = *extend_constructor_destructorc::globalVar;
1;
