# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package primitive_types;
use base qw(Exporter);
use base qw(DynaLoader);
package primitive_typesc;
bootstrap primitive_types;
package primitive_types;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package primitive_types;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package primitive_types;

*val_bool = *primitive_typesc::val_bool;
*val_schar = *primitive_typesc::val_schar;
*val_uchar = *primitive_typesc::val_uchar;
*val_int = *primitive_typesc::val_int;
*val_uint = *primitive_typesc::val_uint;
*val_short = *primitive_typesc::val_short;
*val_ushort = *primitive_typesc::val_ushort;
*val_long = *primitive_typesc::val_long;
*val_ulong = *primitive_typesc::val_ulong;
*val_llong = *primitive_typesc::val_llong;
*val_ullong = *primitive_typesc::val_ullong;
*val_char = *primitive_typesc::val_char;
*val_pchar = *primitive_typesc::val_pchar;
*val_pcharc = *primitive_typesc::val_pcharc;
*val_pint = *primitive_typesc::val_pint;
*val_hello = *primitive_typesc::val_hello;
*val_myint = *primitive_typesc::val_myint;
*val_parami = *primitive_typesc::val_parami;
*val_paramd = *primitive_typesc::val_paramd;
*val_paramc = *primitive_typesc::val_paramc;
*val_sizet = *primitive_typesc::val_sizet;
*ref_bool = *primitive_typesc::ref_bool;
*ref_schar = *primitive_typesc::ref_schar;
*ref_uchar = *primitive_typesc::ref_uchar;
*ref_int = *primitive_typesc::ref_int;
*ref_uint = *primitive_typesc::ref_uint;
*ref_short = *primitive_typesc::ref_short;
*ref_ushort = *primitive_typesc::ref_ushort;
*ref_long = *primitive_typesc::ref_long;
*ref_ulong = *primitive_typesc::ref_ulong;
*ref_llong = *primitive_typesc::ref_llong;
*ref_ullong = *primitive_typesc::ref_ullong;
*ref_char = *primitive_typesc::ref_char;
*ref_pchar = *primitive_typesc::ref_pchar;
*ref_pcharc = *primitive_typesc::ref_pcharc;
*ref_pint = *primitive_typesc::ref_pint;
*ref_hello = *primitive_typesc::ref_hello;
*ref_myint = *primitive_typesc::ref_myint;
*ref_parami = *primitive_typesc::ref_parami;
*ref_paramd = *primitive_typesc::ref_paramd;
*ref_paramc = *primitive_typesc::ref_paramc;
*ref_sizet = *primitive_typesc::ref_sizet;
*var_init = *primitive_typesc::var_init;
*fptr_val = *primitive_typesc::fptr_val;
*fptr_ref = *primitive_typesc::fptr_ref;
*v_check = *primitive_typesc::v_check;
*char_foo = *primitive_typesc::char_foo;
*SetPos = *primitive_typesc::SetPos;
*val_double_2 = *primitive_typesc::val_double_2;
*val_double = *primitive_typesc::val_double;
*val_float_2 = *primitive_typesc::val_float_2;
*regression_test_for_bug1699646 = *primitive_typesc::regression_test_for_bug1699646;
*val_float = *primitive_typesc::val_float;
*new_pchar = *primitive_typesc::new_pchar;
*delete_pchar = *primitive_typesc::delete_pchar;
*pchar_getitem = *primitive_typesc::pchar_getitem;
*pchar_setitem = *primitive_typesc::pchar_setitem;

############# Class : primitive_types::Foo ##############

package primitive_types::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( primitive_types );
%OWNER = ();
%ITERATORS = ();
*swig__a_get = *primitive_typesc::Foo__a_get;
*swig__a_set = *primitive_typesc::Foo__a_set;
sub new {
    my $pkg = shift;
    my $self = primitive_typesc::new_Foo(@_);
    bless $self, $pkg if defined($self);
}

*copy = *primitive_typesc::Foo_copy;
*copy_c = *primitive_typesc::Foo_copy_c;
*copy_r = *primitive_typesc::Foo_copy_r;
*this_p = *primitive_typesc::Foo_this_p;
*this_r = *primitive_typesc::Foo_this_r;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        primitive_typesc::delete_Foo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : primitive_types::Test ##############

package primitive_types::Test;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( primitive_types );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = primitive_typesc::new_Test(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        primitive_typesc::delete_Test($self);
        delete $OWNER{$self};
    }
}

*stc_bool = *primitive_typesc::Test_stc_bool;
*stc_bool = *primitive_typesc::Test_stc_bool;
*stc_schar = *primitive_typesc::Test_stc_schar;
*stc_schar = *primitive_typesc::Test_stc_schar;
*stc_uchar = *primitive_typesc::Test_stc_uchar;
*stc_uchar = *primitive_typesc::Test_stc_uchar;
*stc_int = *primitive_typesc::Test_stc_int;
*stc_int = *primitive_typesc::Test_stc_int;
*stc_uint = *primitive_typesc::Test_stc_uint;
*stc_uint = *primitive_typesc::Test_stc_uint;
*stc_short = *primitive_typesc::Test_stc_short;
*stc_short = *primitive_typesc::Test_stc_short;
*stc_ushort = *primitive_typesc::Test_stc_ushort;
*stc_ushort = *primitive_typesc::Test_stc_ushort;
*stc_long = *primitive_typesc::Test_stc_long;
*stc_long = *primitive_typesc::Test_stc_long;
*stc_ulong = *primitive_typesc::Test_stc_ulong;
*stc_ulong = *primitive_typesc::Test_stc_ulong;
*stc_llong = *primitive_typesc::Test_stc_llong;
*stc_llong = *primitive_typesc::Test_stc_llong;
*stc_ullong = *primitive_typesc::Test_stc_ullong;
*stc_ullong = *primitive_typesc::Test_stc_ullong;
*stc_char = *primitive_typesc::Test_stc_char;
*stc_char = *primitive_typesc::Test_stc_char;
*swig_var_bool_get = *primitive_typesc::Test_var_bool_get;
*swig_var_bool_set = *primitive_typesc::Test_var_bool_set;
*swig_var_schar_get = *primitive_typesc::Test_var_schar_get;
*swig_var_schar_set = *primitive_typesc::Test_var_schar_set;
*swig_var_uchar_get = *primitive_typesc::Test_var_uchar_get;
*swig_var_uchar_set = *primitive_typesc::Test_var_uchar_set;
*swig_var_int_get = *primitive_typesc::Test_var_int_get;
*swig_var_int_set = *primitive_typesc::Test_var_int_set;
*swig_var_uint_get = *primitive_typesc::Test_var_uint_get;
*swig_var_uint_set = *primitive_typesc::Test_var_uint_set;
*swig_var_short_get = *primitive_typesc::Test_var_short_get;
*swig_var_short_set = *primitive_typesc::Test_var_short_set;
*swig_var_ushort_get = *primitive_typesc::Test_var_ushort_get;
*swig_var_ushort_set = *primitive_typesc::Test_var_ushort_set;
*swig_var_long_get = *primitive_typesc::Test_var_long_get;
*swig_var_long_set = *primitive_typesc::Test_var_long_set;
*swig_var_ulong_get = *primitive_typesc::Test_var_ulong_get;
*swig_var_ulong_set = *primitive_typesc::Test_var_ulong_set;
*swig_var_llong_get = *primitive_typesc::Test_var_llong_get;
*swig_var_llong_set = *primitive_typesc::Test_var_llong_set;
*swig_var_ullong_get = *primitive_typesc::Test_var_ullong_get;
*swig_var_ullong_set = *primitive_typesc::Test_var_ullong_set;
*swig_var_char_get = *primitive_typesc::Test_var_char_get;
*swig_var_char_set = *primitive_typesc::Test_var_char_set;
*swig_var_pchar_get = *primitive_typesc::Test_var_pchar_get;
*swig_var_pchar_set = *primitive_typesc::Test_var_pchar_set;
*swig_var_pcharc_get = *primitive_typesc::Test_var_pcharc_get;
*swig_var_pcharc_set = *primitive_typesc::Test_var_pcharc_set;
*swig_var_pint_get = *primitive_typesc::Test_var_pint_get;
*swig_var_pint_set = *primitive_typesc::Test_var_pint_set;
*swig_var_hello_get = *primitive_typesc::Test_var_hello_get;
*swig_var_hello_set = *primitive_typesc::Test_var_hello_set;
*swig_var_myint_get = *primitive_typesc::Test_var_myint_get;
*swig_var_myint_set = *primitive_typesc::Test_var_myint_set;
*swig_var_parami_get = *primitive_typesc::Test_var_parami_get;
*swig_var_parami_set = *primitive_typesc::Test_var_parami_set;
*swig_var_paramd_get = *primitive_typesc::Test_var_paramd_get;
*swig_var_paramd_set = *primitive_typesc::Test_var_paramd_set;
*swig_var_paramc_get = *primitive_typesc::Test_var_paramc_get;
*swig_var_paramc_set = *primitive_typesc::Test_var_paramc_set;
*swig_var_sizet_get = *primitive_typesc::Test_var_sizet_get;
*swig_var_sizet_set = *primitive_typesc::Test_var_sizet_set;
*swig_var_namet_get = *primitive_typesc::Test_var_namet_get;
*swig_var_namet_set = *primitive_typesc::Test_var_namet_set;
*val_namet = *primitive_typesc::Test_val_namet;
*val_cnamet = *primitive_typesc::Test_val_cnamet;
*val_bool = *primitive_typesc::Test_val_bool;
*val_schar = *primitive_typesc::Test_val_schar;
*val_uchar = *primitive_typesc::Test_val_uchar;
*val_int = *primitive_typesc::Test_val_int;
*val_uint = *primitive_typesc::Test_val_uint;
*val_short = *primitive_typesc::Test_val_short;
*val_ushort = *primitive_typesc::Test_val_ushort;
*val_long = *primitive_typesc::Test_val_long;
*val_ulong = *primitive_typesc::Test_val_ulong;
*val_llong = *primitive_typesc::Test_val_llong;
*val_ullong = *primitive_typesc::Test_val_ullong;
*val_char = *primitive_typesc::Test_val_char;
*val_pchar = *primitive_typesc::Test_val_pchar;
*val_pcharc = *primitive_typesc::Test_val_pcharc;
*val_pint = *primitive_typesc::Test_val_pint;
*val_hello = *primitive_typesc::Test_val_hello;
*val_myint = *primitive_typesc::Test_val_myint;
*val_parami = *primitive_typesc::Test_val_parami;
*val_paramd = *primitive_typesc::Test_val_paramd;
*val_paramc = *primitive_typesc::Test_val_paramc;
*val_sizet = *primitive_typesc::Test_val_sizet;
*ref_bool = *primitive_typesc::Test_ref_bool;
*ref_schar = *primitive_typesc::Test_ref_schar;
*ref_uchar = *primitive_typesc::Test_ref_uchar;
*ref_int = *primitive_typesc::Test_ref_int;
*ref_uint = *primitive_typesc::Test_ref_uint;
*ref_short = *primitive_typesc::Test_ref_short;
*ref_ushort = *primitive_typesc::Test_ref_ushort;
*ref_long = *primitive_typesc::Test_ref_long;
*ref_ulong = *primitive_typesc::Test_ref_ulong;
*ref_llong = *primitive_typesc::Test_ref_llong;
*ref_ullong = *primitive_typesc::Test_ref_ullong;
*ref_char = *primitive_typesc::Test_ref_char;
*ref_pchar = *primitive_typesc::Test_ref_pchar;
*ref_pcharc = *primitive_typesc::Test_ref_pcharc;
*ref_pint = *primitive_typesc::Test_ref_pint;
*ref_hello = *primitive_typesc::Test_ref_hello;
*ref_myint = *primitive_typesc::Test_ref_myint;
*ref_parami = *primitive_typesc::Test_ref_parami;
*ref_paramd = *primitive_typesc::Test_ref_paramd;
*ref_paramc = *primitive_typesc::Test_ref_paramc;
*ref_sizet = *primitive_typesc::Test_ref_sizet;
*c_check = *primitive_typesc::Test_c_check;
*v_check = *primitive_typesc::Test_v_check;
*ovr_val = *primitive_typesc::Test_ovr_val;
*ovr_ref = *primitive_typesc::Test_ovr_ref;
*stc_double = *primitive_typesc::Test_stc_double;
*stc_float = *primitive_typesc::Test_stc_float;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : primitive_types::TestDirector ##############

package primitive_types::TestDirector;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( primitive_types );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = primitive_typesc::new_TestDirector(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        primitive_typesc::delete_TestDirector($self);
        delete $OWNER{$self};
    }
}

*vval_namet = *primitive_typesc::TestDirector_vval_namet;
*vval_cnamet = *primitive_typesc::TestDirector_vval_cnamet;
*stc_bool = *primitive_typesc::TestDirector_stc_bool;
*stc_bool = *primitive_typesc::TestDirector_stc_bool;
*stc_schar = *primitive_typesc::TestDirector_stc_schar;
*stc_schar = *primitive_typesc::TestDirector_stc_schar;
*stc_uchar = *primitive_typesc::TestDirector_stc_uchar;
*stc_uchar = *primitive_typesc::TestDirector_stc_uchar;
*stc_int = *primitive_typesc::TestDirector_stc_int;
*stc_int = *primitive_typesc::TestDirector_stc_int;
*stc_uint = *primitive_typesc::TestDirector_stc_uint;
*stc_uint = *primitive_typesc::TestDirector_stc_uint;
*stc_short = *primitive_typesc::TestDirector_stc_short;
*stc_short = *primitive_typesc::TestDirector_stc_short;
*stc_ushort = *primitive_typesc::TestDirector_stc_ushort;
*stc_ushort = *primitive_typesc::TestDirector_stc_ushort;
*stc_long = *primitive_typesc::TestDirector_stc_long;
*stc_long = *primitive_typesc::TestDirector_stc_long;
*stc_ulong = *primitive_typesc::TestDirector_stc_ulong;
*stc_ulong = *primitive_typesc::TestDirector_stc_ulong;
*stc_llong = *primitive_typesc::TestDirector_stc_llong;
*stc_llong = *primitive_typesc::TestDirector_stc_llong;
*stc_ullong = *primitive_typesc::TestDirector_stc_ullong;
*stc_ullong = *primitive_typesc::TestDirector_stc_ullong;
*stc_char = *primitive_typesc::TestDirector_stc_char;
*stc_char = *primitive_typesc::TestDirector_stc_char;
*swig_var_bool_get = *primitive_typesc::TestDirector_var_bool_get;
*swig_var_bool_set = *primitive_typesc::TestDirector_var_bool_set;
*swig_var_schar_get = *primitive_typesc::TestDirector_var_schar_get;
*swig_var_schar_set = *primitive_typesc::TestDirector_var_schar_set;
*swig_var_uchar_get = *primitive_typesc::TestDirector_var_uchar_get;
*swig_var_uchar_set = *primitive_typesc::TestDirector_var_uchar_set;
*swig_var_int_get = *primitive_typesc::TestDirector_var_int_get;
*swig_var_int_set = *primitive_typesc::TestDirector_var_int_set;
*swig_var_uint_get = *primitive_typesc::TestDirector_var_uint_get;
*swig_var_uint_set = *primitive_typesc::TestDirector_var_uint_set;
*swig_var_short_get = *primitive_typesc::TestDirector_var_short_get;
*swig_var_short_set = *primitive_typesc::TestDirector_var_short_set;
*swig_var_ushort_get = *primitive_typesc::TestDirector_var_ushort_get;
*swig_var_ushort_set = *primitive_typesc::TestDirector_var_ushort_set;
*swig_var_long_get = *primitive_typesc::TestDirector_var_long_get;
*swig_var_long_set = *primitive_typesc::TestDirector_var_long_set;
*swig_var_ulong_get = *primitive_typesc::TestDirector_var_ulong_get;
*swig_var_ulong_set = *primitive_typesc::TestDirector_var_ulong_set;
*swig_var_llong_get = *primitive_typesc::TestDirector_var_llong_get;
*swig_var_llong_set = *primitive_typesc::TestDirector_var_llong_set;
*swig_var_ullong_get = *primitive_typesc::TestDirector_var_ullong_get;
*swig_var_ullong_set = *primitive_typesc::TestDirector_var_ullong_set;
*swig_var_char_get = *primitive_typesc::TestDirector_var_char_get;
*swig_var_char_set = *primitive_typesc::TestDirector_var_char_set;
*swig_var_pchar_get = *primitive_typesc::TestDirector_var_pchar_get;
*swig_var_pchar_set = *primitive_typesc::TestDirector_var_pchar_set;
*swig_var_pcharc_get = *primitive_typesc::TestDirector_var_pcharc_get;
*swig_var_pcharc_set = *primitive_typesc::TestDirector_var_pcharc_set;
*swig_var_pint_get = *primitive_typesc::TestDirector_var_pint_get;
*swig_var_pint_set = *primitive_typesc::TestDirector_var_pint_set;
*swig_var_hello_get = *primitive_typesc::TestDirector_var_hello_get;
*swig_var_hello_set = *primitive_typesc::TestDirector_var_hello_set;
*swig_var_myint_get = *primitive_typesc::TestDirector_var_myint_get;
*swig_var_myint_set = *primitive_typesc::TestDirector_var_myint_set;
*swig_var_parami_get = *primitive_typesc::TestDirector_var_parami_get;
*swig_var_parami_set = *primitive_typesc::TestDirector_var_parami_set;
*swig_var_paramd_get = *primitive_typesc::TestDirector_var_paramd_get;
*swig_var_paramd_set = *primitive_typesc::TestDirector_var_paramd_set;
*swig_var_paramc_get = *primitive_typesc::TestDirector_var_paramc_get;
*swig_var_paramc_set = *primitive_typesc::TestDirector_var_paramc_set;
*swig_var_sizet_get = *primitive_typesc::TestDirector_var_sizet_get;
*swig_var_sizet_set = *primitive_typesc::TestDirector_var_sizet_set;
*swig_var_namet_get = *primitive_typesc::TestDirector_var_namet_get;
*swig_var_namet_set = *primitive_typesc::TestDirector_var_namet_set;
*val_bool = *primitive_typesc::TestDirector_val_bool;
*val_schar = *primitive_typesc::TestDirector_val_schar;
*val_uchar = *primitive_typesc::TestDirector_val_uchar;
*val_int = *primitive_typesc::TestDirector_val_int;
*val_uint = *primitive_typesc::TestDirector_val_uint;
*val_short = *primitive_typesc::TestDirector_val_short;
*val_ushort = *primitive_typesc::TestDirector_val_ushort;
*val_long = *primitive_typesc::TestDirector_val_long;
*val_ulong = *primitive_typesc::TestDirector_val_ulong;
*val_llong = *primitive_typesc::TestDirector_val_llong;
*val_ullong = *primitive_typesc::TestDirector_val_ullong;
*val_char = *primitive_typesc::TestDirector_val_char;
*val_pchar = *primitive_typesc::TestDirector_val_pchar;
*val_pcharc = *primitive_typesc::TestDirector_val_pcharc;
*val_pint = *primitive_typesc::TestDirector_val_pint;
*val_hello = *primitive_typesc::TestDirector_val_hello;
*val_myint = *primitive_typesc::TestDirector_val_myint;
*val_parami = *primitive_typesc::TestDirector_val_parami;
*val_paramd = *primitive_typesc::TestDirector_val_paramd;
*val_paramc = *primitive_typesc::TestDirector_val_paramc;
*val_sizet = *primitive_typesc::TestDirector_val_sizet;
*ref_bool = *primitive_typesc::TestDirector_ref_bool;
*ref_schar = *primitive_typesc::TestDirector_ref_schar;
*ref_uchar = *primitive_typesc::TestDirector_ref_uchar;
*ref_int = *primitive_typesc::TestDirector_ref_int;
*ref_uint = *primitive_typesc::TestDirector_ref_uint;
*ref_short = *primitive_typesc::TestDirector_ref_short;
*ref_ushort = *primitive_typesc::TestDirector_ref_ushort;
*ref_long = *primitive_typesc::TestDirector_ref_long;
*ref_ulong = *primitive_typesc::TestDirector_ref_ulong;
*ref_llong = *primitive_typesc::TestDirector_ref_llong;
*ref_ullong = *primitive_typesc::TestDirector_ref_ullong;
*ref_char = *primitive_typesc::TestDirector_ref_char;
*ref_pchar = *primitive_typesc::TestDirector_ref_pchar;
*ref_pcharc = *primitive_typesc::TestDirector_ref_pcharc;
*ref_pint = *primitive_typesc::TestDirector_ref_pint;
*ref_hello = *primitive_typesc::TestDirector_ref_hello;
*ref_myint = *primitive_typesc::TestDirector_ref_myint;
*ref_parami = *primitive_typesc::TestDirector_ref_parami;
*ref_paramd = *primitive_typesc::TestDirector_ref_paramd;
*ref_paramc = *primitive_typesc::TestDirector_ref_paramc;
*ref_sizet = *primitive_typesc::TestDirector_ref_sizet;
*vval_bool = *primitive_typesc::TestDirector_vval_bool;
*vval_schar = *primitive_typesc::TestDirector_vval_schar;
*vval_uchar = *primitive_typesc::TestDirector_vval_uchar;
*vval_int = *primitive_typesc::TestDirector_vval_int;
*vval_uint = *primitive_typesc::TestDirector_vval_uint;
*vval_short = *primitive_typesc::TestDirector_vval_short;
*vval_ushort = *primitive_typesc::TestDirector_vval_ushort;
*vval_long = *primitive_typesc::TestDirector_vval_long;
*vval_ulong = *primitive_typesc::TestDirector_vval_ulong;
*vval_llong = *primitive_typesc::TestDirector_vval_llong;
*vval_ullong = *primitive_typesc::TestDirector_vval_ullong;
*vval_char = *primitive_typesc::TestDirector_vval_char;
*vval_pchar = *primitive_typesc::TestDirector_vval_pchar;
*vval_pcharc = *primitive_typesc::TestDirector_vval_pcharc;
*vval_pint = *primitive_typesc::TestDirector_vval_pint;
*vval_hello = *primitive_typesc::TestDirector_vval_hello;
*vval_myint = *primitive_typesc::TestDirector_vval_myint;
*vval_parami = *primitive_typesc::TestDirector_vval_parami;
*vval_paramd = *primitive_typesc::TestDirector_vval_paramd;
*vval_paramc = *primitive_typesc::TestDirector_vval_paramc;
*vval_sizet = *primitive_typesc::TestDirector_vval_sizet;
*vref_bool = *primitive_typesc::TestDirector_vref_bool;
*vref_schar = *primitive_typesc::TestDirector_vref_schar;
*vref_uchar = *primitive_typesc::TestDirector_vref_uchar;
*vref_int = *primitive_typesc::TestDirector_vref_int;
*vref_uint = *primitive_typesc::TestDirector_vref_uint;
*vref_short = *primitive_typesc::TestDirector_vref_short;
*vref_ushort = *primitive_typesc::TestDirector_vref_ushort;
*vref_long = *primitive_typesc::TestDirector_vref_long;
*vref_ulong = *primitive_typesc::TestDirector_vref_ulong;
*vref_llong = *primitive_typesc::TestDirector_vref_llong;
*vref_ullong = *primitive_typesc::TestDirector_vref_ullong;
*vref_char = *primitive_typesc::TestDirector_vref_char;
*vref_pchar = *primitive_typesc::TestDirector_vref_pchar;
*vref_pcharc = *primitive_typesc::TestDirector_vref_pcharc;
*vref_pint = *primitive_typesc::TestDirector_vref_pint;
*vref_hello = *primitive_typesc::TestDirector_vref_hello;
*vref_myint = *primitive_typesc::TestDirector_vref_myint;
*vref_parami = *primitive_typesc::TestDirector_vref_parami;
*vref_paramd = *primitive_typesc::TestDirector_vref_paramd;
*vref_paramc = *primitive_typesc::TestDirector_vref_paramc;
*vref_sizet = *primitive_typesc::TestDirector_vref_sizet;
*wrp_vref_bool = *primitive_typesc::TestDirector_wrp_vref_bool;
*wrp_vref_schar = *primitive_typesc::TestDirector_wrp_vref_schar;
*wrp_vref_uchar = *primitive_typesc::TestDirector_wrp_vref_uchar;
*wrp_vref_int = *primitive_typesc::TestDirector_wrp_vref_int;
*wrp_vref_uint = *primitive_typesc::TestDirector_wrp_vref_uint;
*wrp_vref_short = *primitive_typesc::TestDirector_wrp_vref_short;
*wrp_vref_ushort = *primitive_typesc::TestDirector_wrp_vref_ushort;
*wrp_vref_long = *primitive_typesc::TestDirector_wrp_vref_long;
*wrp_vref_ulong = *primitive_typesc::TestDirector_wrp_vref_ulong;
*wrp_vref_llong = *primitive_typesc::TestDirector_wrp_vref_llong;
*wrp_vref_ullong = *primitive_typesc::TestDirector_wrp_vref_ullong;
*wrp_vref_char = *primitive_typesc::TestDirector_wrp_vref_char;
*wrp_vref_pchar = *primitive_typesc::TestDirector_wrp_vref_pchar;
*wrp_vref_pcharc = *primitive_typesc::TestDirector_wrp_vref_pcharc;
*wrp_vref_pint = *primitive_typesc::TestDirector_wrp_vref_pint;
*wrp_vref_hello = *primitive_typesc::TestDirector_wrp_vref_hello;
*wrp_vref_myint = *primitive_typesc::TestDirector_wrp_vref_myint;
*wrp_vref_parami = *primitive_typesc::TestDirector_wrp_vref_parami;
*wrp_vref_paramd = *primitive_typesc::TestDirector_wrp_vref_paramd;
*wrp_vref_paramc = *primitive_typesc::TestDirector_wrp_vref_paramc;
*wrp_vref_sizet = *primitive_typesc::TestDirector_wrp_vref_sizet;
*wrp_vval_bool = *primitive_typesc::TestDirector_wrp_vval_bool;
*wrp_vval_schar = *primitive_typesc::TestDirector_wrp_vval_schar;
*wrp_vval_uchar = *primitive_typesc::TestDirector_wrp_vval_uchar;
*wrp_vval_int = *primitive_typesc::TestDirector_wrp_vval_int;
*wrp_vval_uint = *primitive_typesc::TestDirector_wrp_vval_uint;
*wrp_vval_short = *primitive_typesc::TestDirector_wrp_vval_short;
*wrp_vval_ushort = *primitive_typesc::TestDirector_wrp_vval_ushort;
*wrp_vval_long = *primitive_typesc::TestDirector_wrp_vval_long;
*wrp_vval_ulong = *primitive_typesc::TestDirector_wrp_vval_ulong;
*wrp_vval_llong = *primitive_typesc::TestDirector_wrp_vval_llong;
*wrp_vval_ullong = *primitive_typesc::TestDirector_wrp_vval_ullong;
*wrp_vval_char = *primitive_typesc::TestDirector_wrp_vval_char;
*wrp_vval_pchar = *primitive_typesc::TestDirector_wrp_vval_pchar;
*wrp_vval_pcharc = *primitive_typesc::TestDirector_wrp_vval_pcharc;
*wrp_vval_pint = *primitive_typesc::TestDirector_wrp_vval_pint;
*wrp_vval_hello = *primitive_typesc::TestDirector_wrp_vval_hello;
*wrp_vval_myint = *primitive_typesc::TestDirector_wrp_vval_myint;
*wrp_vval_parami = *primitive_typesc::TestDirector_wrp_vval_parami;
*wrp_vval_paramd = *primitive_typesc::TestDirector_wrp_vval_paramd;
*wrp_vval_paramc = *primitive_typesc::TestDirector_wrp_vval_paramc;
*wrp_vval_sizet = *primitive_typesc::TestDirector_wrp_vval_sizet;
*c_check = *primitive_typesc::TestDirector_c_check;
*v_check = *primitive_typesc::TestDirector_v_check;
*ovr_val = *primitive_typesc::TestDirector_ovr_val;
*ovr_ref = *primitive_typesc::TestDirector_ovr_ref;
*vtest = *primitive_typesc::TestDirector_vtest;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package primitive_types;

*Hi = *primitive_typesc::Hi;
*Hola = *primitive_typesc::Hola;
*def_pchar = *primitive_typesc::def_pchar;
*def_pcharc = *primitive_typesc::def_pcharc;
*def_namet = *primitive_typesc::def_namet;
*gbl_namet = *primitive_typesc::gbl_namet;
*fixsize = *primitive_typesc::fixsize;
*def_bool = *primitive_typesc::def_bool;
*def_schar = *primitive_typesc::def_schar;
*def_uchar = *primitive_typesc::def_uchar;
*def_int = *primitive_typesc::def_int;
*def_uint = *primitive_typesc::def_uint;
*def_short = *primitive_typesc::def_short;
*def_ushort = *primitive_typesc::def_ushort;
*def_long = *primitive_typesc::def_long;
*def_ulong = *primitive_typesc::def_ulong;
*def_llong = *primitive_typesc::def_llong;
*def_ullong = *primitive_typesc::def_ullong;
*def_float = *primitive_typesc::def_float;
*def_double = *primitive_typesc::def_double;
*def_char = *primitive_typesc::def_char;
*def_pint = *primitive_typesc::def_pint;
*def_sizet = *primitive_typesc::def_sizet;
*def_myint = *primitive_typesc::def_myint;
*def_parami = *primitive_typesc::def_parami;
*def_paramd = *primitive_typesc::def_paramd;
*def_paramc = *primitive_typesc::def_paramc;
*sct_bool = *primitive_typesc::sct_bool;
*sct_schar = *primitive_typesc::sct_schar;
*sct_uchar = *primitive_typesc::sct_uchar;
*sct_int = *primitive_typesc::sct_int;
*sct_uint = *primitive_typesc::sct_uint;
*sct_short = *primitive_typesc::sct_short;
*sct_ushort = *primitive_typesc::sct_ushort;
*sct_long = *primitive_typesc::sct_long;
*sct_ulong = *primitive_typesc::sct_ulong;
*sct_llong = *primitive_typesc::sct_llong;
*sct_ullong = *primitive_typesc::sct_ullong;
*sct_char = *primitive_typesc::sct_char;
*sct_pchar = *primitive_typesc::sct_pchar;
*sct_pcharc = *primitive_typesc::sct_pcharc;
*sct_pint = *primitive_typesc::sct_pint;
*sct_hello = *primitive_typesc::sct_hello;
*sct_myint = *primitive_typesc::sct_myint;
*sct_parami = *primitive_typesc::sct_parami;
*sct_paramd = *primitive_typesc::sct_paramd;
*sct_paramc = *primitive_typesc::sct_paramc;
*sct_sizet = *primitive_typesc::sct_sizet;
*cct_bool = *primitive_typesc::cct_bool;
*cct_schar = *primitive_typesc::cct_schar;
*cct_uchar = *primitive_typesc::cct_uchar;
*cct_int = *primitive_typesc::cct_int;
*cct_uint = *primitive_typesc::cct_uint;
*cct_short = *primitive_typesc::cct_short;
*cct_ushort = *primitive_typesc::cct_ushort;
*cct_long = *primitive_typesc::cct_long;
*cct_ulong = *primitive_typesc::cct_ulong;
*cct_llong = *primitive_typesc::cct_llong;
*cct_ullong = *primitive_typesc::cct_ullong;
*cct_char = *primitive_typesc::cct_char;
*cct_pchar = *primitive_typesc::cct_pchar;
*cct_pcharc = *primitive_typesc::cct_pcharc;
*cct_pint = *primitive_typesc::cct_pint;
*cct_hello = *primitive_typesc::cct_hello;
*cct_myint = *primitive_typesc::cct_myint;
*cct_parami = *primitive_typesc::cct_parami;
*cct_paramd = *primitive_typesc::cct_paramd;
*cct_paramc = *primitive_typesc::cct_paramc;
*cct_sizet = *primitive_typesc::cct_sizet;
*var_bool = *primitive_typesc::var_bool;
*var_schar = *primitive_typesc::var_schar;
*var_uchar = *primitive_typesc::var_uchar;
*var_int = *primitive_typesc::var_int;
*var_uint = *primitive_typesc::var_uint;
*var_short = *primitive_typesc::var_short;
*var_ushort = *primitive_typesc::var_ushort;
*var_long = *primitive_typesc::var_long;
*var_ulong = *primitive_typesc::var_ulong;
*var_llong = *primitive_typesc::var_llong;
*var_ullong = *primitive_typesc::var_ullong;
*var_char = *primitive_typesc::var_char;
*var_pchar = *primitive_typesc::var_pchar;
*var_pcharc = *primitive_typesc::var_pcharc;
*var_pint = *primitive_typesc::var_pint;
*var_hello = *primitive_typesc::var_hello;
*var_myint = *primitive_typesc::var_myint;
*var_parami = *primitive_typesc::var_parami;
*var_paramd = *primitive_typesc::var_paramd;
*var_paramc = *primitive_typesc::var_paramc;
*var_sizet = *primitive_typesc::var_sizet;
*var_namet = *primitive_typesc::var_namet;
*Test_stc_double = *primitive_typesc::Test_stc_double;
*Test_stc_float = *primitive_typesc::Test_stc_float;
1;
