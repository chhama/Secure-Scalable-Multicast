# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package li_typemaps;
use base qw(Exporter);
use base qw(DynaLoader);
package li_typemapsc;
bootstrap li_typemaps;
package li_typemaps;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package li_typemaps;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package li_typemaps;

*in_bool = *li_typemapsc::in_bool;
*in_int = *li_typemapsc::in_int;
*in_long = *li_typemapsc::in_long;
*in_short = *li_typemapsc::in_short;
*in_uint = *li_typemapsc::in_uint;
*in_ushort = *li_typemapsc::in_ushort;
*in_ulong = *li_typemapsc::in_ulong;
*in_uchar = *li_typemapsc::in_uchar;
*in_schar = *li_typemapsc::in_schar;
*in_float = *li_typemapsc::in_float;
*in_double = *li_typemapsc::in_double;
*in_longlong = *li_typemapsc::in_longlong;
*in_ulonglong = *li_typemapsc::in_ulonglong;
*inr_bool = *li_typemapsc::inr_bool;
*inr_int = *li_typemapsc::inr_int;
*inr_long = *li_typemapsc::inr_long;
*inr_short = *li_typemapsc::inr_short;
*inr_uint = *li_typemapsc::inr_uint;
*inr_ushort = *li_typemapsc::inr_ushort;
*inr_ulong = *li_typemapsc::inr_ulong;
*inr_uchar = *li_typemapsc::inr_uchar;
*inr_schar = *li_typemapsc::inr_schar;
*inr_float = *li_typemapsc::inr_float;
*inr_double = *li_typemapsc::inr_double;
*inr_longlong = *li_typemapsc::inr_longlong;
*inr_ulonglong = *li_typemapsc::inr_ulonglong;
*out_bool = *li_typemapsc::out_bool;
*out_int = *li_typemapsc::out_int;
*out_short = *li_typemapsc::out_short;
*out_long = *li_typemapsc::out_long;
*out_uint = *li_typemapsc::out_uint;
*out_ushort = *li_typemapsc::out_ushort;
*out_ulong = *li_typemapsc::out_ulong;
*out_uchar = *li_typemapsc::out_uchar;
*out_schar = *li_typemapsc::out_schar;
*out_float = *li_typemapsc::out_float;
*out_double = *li_typemapsc::out_double;
*out_longlong = *li_typemapsc::out_longlong;
*out_ulonglong = *li_typemapsc::out_ulonglong;
*out_foo = *li_typemapsc::out_foo;
*outr_bool = *li_typemapsc::outr_bool;
*outr_int = *li_typemapsc::outr_int;
*outr_short = *li_typemapsc::outr_short;
*outr_long = *li_typemapsc::outr_long;
*outr_uint = *li_typemapsc::outr_uint;
*outr_ushort = *li_typemapsc::outr_ushort;
*outr_ulong = *li_typemapsc::outr_ulong;
*outr_uchar = *li_typemapsc::outr_uchar;
*outr_schar = *li_typemapsc::outr_schar;
*outr_float = *li_typemapsc::outr_float;
*outr_double = *li_typemapsc::outr_double;
*outr_longlong = *li_typemapsc::outr_longlong;
*outr_ulonglong = *li_typemapsc::outr_ulonglong;
*inout_bool = *li_typemapsc::inout_bool;
*inout_int = *li_typemapsc::inout_int;
*inout_short = *li_typemapsc::inout_short;
*inout_long = *li_typemapsc::inout_long;
*inout_uint = *li_typemapsc::inout_uint;
*inout_ushort = *li_typemapsc::inout_ushort;
*inout_ulong = *li_typemapsc::inout_ulong;
*inout_uchar = *li_typemapsc::inout_uchar;
*inout_schar = *li_typemapsc::inout_schar;
*inout_float = *li_typemapsc::inout_float;
*inout_double = *li_typemapsc::inout_double;
*inout_longlong = *li_typemapsc::inout_longlong;
*inout_ulonglong = *li_typemapsc::inout_ulonglong;
*inoutr_bool = *li_typemapsc::inoutr_bool;
*inoutr_int = *li_typemapsc::inoutr_int;
*inoutr_short = *li_typemapsc::inoutr_short;
*inoutr_long = *li_typemapsc::inoutr_long;
*inoutr_uint = *li_typemapsc::inoutr_uint;
*inoutr_ushort = *li_typemapsc::inoutr_ushort;
*inoutr_ulong = *li_typemapsc::inoutr_ulong;
*inoutr_uchar = *li_typemapsc::inoutr_uchar;
*inoutr_schar = *li_typemapsc::inoutr_schar;
*inoutr_float = *li_typemapsc::inoutr_float;
*inoutr_double = *li_typemapsc::inoutr_double;
*inoutr_longlong = *li_typemapsc::inoutr_longlong;
*inoutr_ulonglong = *li_typemapsc::inoutr_ulonglong;
*inoutr_int2 = *li_typemapsc::inoutr_int2;

############# Class : li_typemaps::Foo ##############

package li_typemaps::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_typemaps );
%OWNER = ();
%ITERATORS = ();
*swig_a_get = *li_typemapsc::Foo_a_get;
*swig_a_set = *li_typemapsc::Foo_a_set;
sub new {
    my $pkg = shift;
    my $self = li_typemapsc::new_Foo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_typemapsc::delete_Foo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package li_typemaps;

1;
