# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package primitive_ref;
use base qw(Exporter);
use base qw(DynaLoader);
package primitive_refc;
bootstrap primitive_ref;
package primitive_ref;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package primitive_ref;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package primitive_ref;

*ref_int = *primitive_refc::ref_int;
*ref_uint = *primitive_refc::ref_uint;
*ref_short = *primitive_refc::ref_short;
*ref_ushort = *primitive_refc::ref_ushort;
*ref_long = *primitive_refc::ref_long;
*ref_ulong = *primitive_refc::ref_ulong;
*ref_schar = *primitive_refc::ref_schar;
*ref_uchar = *primitive_refc::ref_uchar;
*ref_char = *primitive_refc::ref_char;
*ref_float = *primitive_refc::ref_float;
*ref_double = *primitive_refc::ref_double;
*ref_bool = *primitive_refc::ref_bool;
*ref_longlong = *primitive_refc::ref_longlong;
*ref_ulonglong = *primitive_refc::ref_ulonglong;
*ref_over = *primitive_refc::ref_over;

############# Class : primitive_ref::A ##############

package primitive_ref::A;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( primitive_ref );
%OWNER = ();
%ITERATORS = ();
*swig_v_get = *primitive_refc::A_v_get;
*swig_v_set = *primitive_refc::A_v_set;
sub new {
    my $pkg = shift;
    my $self = primitive_refc::new_A(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        primitive_refc::delete_A($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package primitive_ref;

1;
