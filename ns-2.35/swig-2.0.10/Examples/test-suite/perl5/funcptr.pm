# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package funcptr;
use base qw(Exporter);
use base qw(DynaLoader);
package funcptrc;
bootstrap funcptr;
package funcptr;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package funcptr;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package funcptr;

*distance = *funcptrc::distance;
*do_op = *funcptrc::do_op;
*add = *funcptrc::add;
*subtract = *funcptrc::subtract;
*multiply = *funcptrc::multiply;
*nowt = *funcptrc::nowt;
*nowt2 = *funcptrc::nowt2;
*mystructptr = *funcptrc::mystructptr;

############# Class : funcptr::MyStruct ##############

package funcptr::MyStruct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( funcptr );
%OWNER = ();
%ITERATORS = ();
*swig_i_get = *funcptrc::MyStruct_i_get;
*swig_i_set = *funcptrc::MyStruct_i_set;
sub new {
    my $pkg = shift;
    my $self = funcptrc::new_MyStruct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        funcptrc::delete_MyStruct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package funcptr;

*funcvar = *funcptrc::funcvar;
*funcvar2 = *funcptrc::funcvar2;
*funcvar3 = *funcptrc::funcvar3;
*funcvar4 = *funcptrc::funcvar4;
*funcvar5 = *funcptrc::funcvar5;
*pfunc0 = *funcptrc::pfunc0;
*pfuncA = *funcptrc::pfuncA;
*pfunc1 = *funcptrc::pfunc1;
*pfunc2 = *funcptrc::pfunc2;
1;
