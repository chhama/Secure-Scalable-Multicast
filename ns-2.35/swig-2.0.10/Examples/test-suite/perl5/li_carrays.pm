# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package li_carrays;
use base qw(Exporter);
use base qw(DynaLoader);
package li_carraysc;
bootstrap li_carrays;
package li_carrays;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package li_carrays;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package li_carrays;

*new_intArray = *li_carraysc::new_intArray;
*delete_intArray = *li_carraysc::delete_intArray;
*intArray_getitem = *li_carraysc::intArray_getitem;
*intArray_setitem = *li_carraysc::intArray_setitem;
*new_ABArray = *li_carraysc::new_ABArray;
*delete_ABArray = *li_carraysc::delete_ABArray;
*ABArray_getitem = *li_carraysc::ABArray_getitem;
*ABArray_setitem = *li_carraysc::ABArray_setitem;

############# Class : li_carrays::doubleArray ##############

package li_carrays::doubleArray;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_carrays );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = li_carraysc::new_doubleArray(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_carraysc::delete_doubleArray($self);
        delete $OWNER{$self};
    }
}

*getitem = *li_carraysc::doubleArray_getitem;
*setitem = *li_carraysc::doubleArray_setitem;
*cast = *li_carraysc::doubleArray_cast;
*frompointer = *li_carraysc::doubleArray_frompointer;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_carrays::XY ##############

package li_carrays::XY;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_carrays );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *li_carraysc::XY_x_get;
*swig_x_set = *li_carraysc::XY_x_set;
*swig_y_get = *li_carraysc::XY_y_get;
*swig_y_set = *li_carraysc::XY_y_set;
sub new {
    my $pkg = shift;
    my $self = li_carraysc::new_XY(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_carraysc::delete_XY($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_carrays::AB ##############

package li_carrays::AB;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_carrays );
%OWNER = ();
%ITERATORS = ();
*swig_a_get = *li_carraysc::AB_a_get;
*swig_a_set = *li_carraysc::AB_a_set;
*swig_b_get = *li_carraysc::AB_b_get;
*swig_b_set = *li_carraysc::AB_b_set;
sub new {
    my $pkg = shift;
    my $self = li_carraysc::new_AB(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_carraysc::delete_AB($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_carrays::XYArray ##############

package li_carrays::XYArray;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_carrays );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = li_carraysc::new_XYArray(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_carraysc::delete_XYArray($self);
        delete $OWNER{$self};
    }
}

*getitem = *li_carraysc::XYArray_getitem;
*setitem = *li_carraysc::XYArray_setitem;
*cast = *li_carraysc::XYArray_cast;
*frompointer = *li_carraysc::XYArray_frompointer;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package li_carrays;


my %__globalXYArray_hash;
tie %__globalXYArray_hash,"li_carrays::XY", $li_carraysc::globalXYArray;
$globalXYArray= \%__globalXYArray_hash;
bless $globalXYArray, li_carrays::XY;

my %__globalABArray_hash;
tie %__globalABArray_hash,"li_carrays::AB", $li_carraysc::globalABArray;
$globalABArray= \%__globalABArray_hash;
bless $globalABArray, li_carrays::AB;
1;
