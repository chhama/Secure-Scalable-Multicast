# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package bools;
use base qw(Exporter);
use base qw(DynaLoader);
package boolsc;
bootstrap bools;
package bools;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package bools;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package bools;

*eax = *boolsc::eax;
*bo = *boolsc::bo;
*rbo = *boolsc::rbo;
*pbo = *boolsc::pbo;
*const_rbo = *boolsc::const_rbo;
*const_pbo = *boolsc::const_pbo;
*value = *boolsc::value;

############# Class : bools::BoolStructure ##############

package bools::BoolStructure;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( bools );
%OWNER = ();
%ITERATORS = ();
*swig_m_bool1_get = *boolsc::BoolStructure_m_bool1_get;
*swig_m_bool1_set = *boolsc::BoolStructure_m_bool1_set;
*swig_m_bool2_get = *boolsc::BoolStructure_m_bool2_get;
*swig_m_bool2_set = *boolsc::BoolStructure_m_bool2_set;
*swig_m_pbool_get = *boolsc::BoolStructure_m_pbool_get;
*swig_m_pbool_set = *boolsc::BoolStructure_m_pbool_set;
*swig_m_rbool_get = *boolsc::BoolStructure_m_rbool_get;
*swig_m_rbool_set = *boolsc::BoolStructure_m_rbool_set;
*swig_m_const_pbool_get = *boolsc::BoolStructure_m_const_pbool_get;
*swig_m_const_pbool_set = *boolsc::BoolStructure_m_const_pbool_set;
*swig_m_const_rbool_get = *boolsc::BoolStructure_m_const_rbool_get;
*swig_m_const_rbool_set = *boolsc::BoolStructure_m_const_rbool_set;
sub new {
    my $pkg = shift;
    my $self = boolsc::new_BoolStructure(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        boolsc::delete_BoolStructure($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package bools;

*constbool = *boolsc::constbool;
*bool1 = *boolsc::bool1;
*bool2 = *boolsc::bool2;
*pbool = *boolsc::pbool;
*rbool = *boolsc::rbool;
*const_pbool = *boolsc::const_pbool;
*const_rbool = *boolsc::const_rbool;
1;
