# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package inherit_target_language;
use base qw(Exporter);
use base qw(DynaLoader);
package inherit_target_languagec;
bootstrap inherit_target_language;
package inherit_target_language;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package inherit_target_language;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package inherit_target_language;


############# Class : inherit_target_language::Base2 ##############

package inherit_target_language::Base2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( inherit_target_language );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inherit_target_languagec::delete_Base2($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = inherit_target_languagec::new_Base2(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inherit_target_language::Derived1 ##############

package inherit_target_language::Derived1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( inherit_target_language );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = inherit_target_languagec::new_Derived1(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inherit_target_languagec::delete_Derived1($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inherit_target_language::Derived2 ##############

package inherit_target_language::Derived2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( inherit_target_language::Base2 inherit_target_language );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = inherit_target_languagec::new_Derived2(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inherit_target_languagec::delete_Derived2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inherit_target_language::MBase2a ##############

package inherit_target_language::MBase2a;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( inherit_target_language );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inherit_target_languagec::delete_MBase2a($self);
        delete $OWNER{$self};
    }
}

*c = *inherit_target_languagec::MBase2a_c;
sub new {
    my $pkg = shift;
    my $self = inherit_target_languagec::new_MBase2a(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inherit_target_language::MBase2b ##############

package inherit_target_language::MBase2b;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( inherit_target_language );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inherit_target_languagec::delete_MBase2b($self);
        delete $OWNER{$self};
    }
}

*d = *inherit_target_languagec::MBase2b_d;
sub new {
    my $pkg = shift;
    my $self = inherit_target_languagec::new_MBase2b(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inherit_target_language::MultipleDerived1 ##############

package inherit_target_language::MultipleDerived1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( inherit_target_language );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = inherit_target_languagec::new_MultipleDerived1(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inherit_target_languagec::delete_MultipleDerived1($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inherit_target_language::MultipleDerived2 ##############

package inherit_target_language::MultipleDerived2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( inherit_target_language::MBase2b inherit_target_language );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = inherit_target_languagec::new_MultipleDerived2(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inherit_target_languagec::delete_MultipleDerived2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inherit_target_language::MBase3b ##############

package inherit_target_language::MBase3b;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( inherit_target_language );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inherit_target_languagec::delete_MBase3b($self);
        delete $OWNER{$self};
    }
}

*f = *inherit_target_languagec::MBase3b_f;
sub new {
    my $pkg = shift;
    my $self = inherit_target_languagec::new_MBase3b(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inherit_target_language::MBase4a ##############

package inherit_target_language::MBase4a;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( inherit_target_language );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inherit_target_languagec::delete_MBase4a($self);
        delete $OWNER{$self};
    }
}

*g = *inherit_target_languagec::MBase4a_g;
sub new {
    my $pkg = shift;
    my $self = inherit_target_languagec::new_MBase4a(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inherit_target_language::MultipleDerived3 ##############

package inherit_target_language::MultipleDerived3;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( inherit_target_language::MBase3b inherit_target_language );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = inherit_target_languagec::new_MultipleDerived3(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inherit_target_languagec::delete_MultipleDerived3($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inherit_target_language::MultipleDerived4 ##############

package inherit_target_language::MultipleDerived4;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( inherit_target_language::MBase4a inherit_target_language );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = inherit_target_languagec::new_MultipleDerived4(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inherit_target_languagec::delete_MultipleDerived4($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inherit_target_language::BaseX ##############

package inherit_target_language::BaseX;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( inherit_target_language );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inherit_target_languagec::delete_BaseX($self);
        delete $OWNER{$self};
    }
}

*basex = *inherit_target_languagec::BaseX_basex;
sub new {
    my $pkg = shift;
    my $self = inherit_target_languagec::new_BaseX(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : inherit_target_language::DerivedX ##############

package inherit_target_language::DerivedX;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( inherit_target_language::BaseX inherit_target_language );
%OWNER = ();
%ITERATORS = ();
*derivedx = *inherit_target_languagec::DerivedX_derivedx;
sub new {
    my $pkg = shift;
    my $self = inherit_target_languagec::new_DerivedX(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        inherit_target_languagec::delete_DerivedX($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package inherit_target_language;

1;
