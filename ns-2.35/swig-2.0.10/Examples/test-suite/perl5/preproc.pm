# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package preproc;
use base qw(Exporter);
use base qw(DynaLoader);
package preprocc;
bootstrap preproc;
package preproc;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package preproc;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package preproc;

*hello0 = *preprocc::hello0;
*hello1 = *preprocc::hello1;
*hello2 = *preprocc::hello2;
*f = *preprocc::f;
*test = *preprocc::test;
*method = *preprocc::method;

############# Class : preproc::EmbeddedDefines ##############

package preproc::EmbeddedDefines;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( preproc );
%OWNER = ();
%ITERATORS = ();
*swig_dummy_get = *preprocc::EmbeddedDefines_dummy_get;
*swig_dummy_set = *preprocc::EmbeddedDefines_dummy_set;
sub new {
    my $pkg = shift;
    my $self = preprocc::new_EmbeddedDefines(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        preprocc::delete_EmbeddedDefines($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : preproc::TypeNameTraits ##############

package preproc::TypeNameTraits;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( preproc );
%OWNER = ();
%ITERATORS = ();
*swig_val_get = *preprocc::TypeNameTraits_val_get;
*swig_val_set = *preprocc::TypeNameTraits_val_set;
sub new {
    my $pkg = shift;
    my $self = preprocc::new_TypeNameTraits(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        preprocc::delete_TypeNameTraits($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package preproc;

*SLASHSLASH = *preprocc::SLASHSLASH;
*a5 = *preprocc::a5;
*b5 = *preprocc::b5;
*c5 = *preprocc::c5;
*d5 = *preprocc::d5;
*C1 = *preprocc::C1;
*ALONG_NAME = *preprocc::ALONG_NAME;
*C4 = *preprocc::C4;
*a6 = *preprocc::a6;
*b6 = *preprocc::b6;
*c6 = *preprocc::c6;
*d6 = *preprocc::d6;
*EMBEDDED_DEFINE = *preprocc::EMBEDDED_DEFINE;
*EMBEDDED_SWIG_CONSTANT = *preprocc::EMBEDDED_SWIG_CONSTANT;
*A1 = *preprocc::A1;
*A2 = *preprocc::A2;
*A3 = *preprocc::A3;
*A4 = *preprocc::A4;
*A5 = *preprocc::A5;
*A6 = *preprocc::A6;
*A7 = *preprocc::A7;
*A8 = *preprocc::A8;
*A9 = *preprocc::A9;
*A10 = *preprocc::A10;
*A11 = *preprocc::A11;
*A12 = *preprocc::A12;
*A13 = *preprocc::A13;
*__GMP_HAVE_CONST = *preprocc::__GMP_HAVE_CONST;
*__GMP_HAVE_PROTOTYPES = *preprocc::__GMP_HAVE_PROTOTYPES;
*__GMP_HAVE_TOKEN_PASTE = *preprocc::__GMP_HAVE_TOKEN_PASTE;
*ONE = *preprocc::ONE;
*one = *preprocc::one;
*two = *preprocc::two;
*three = *preprocc::three;
*endif = *preprocc::endif;
*define = *preprocc::define;
*defined = *preprocc::defined;
*SOME_MASK_DEF = *preprocc::SOME_MASK_DEF;
*BOLTZMANN = *preprocc::BOLTZMANN;
*AVOGADRO = *preprocc::AVOGADRO;
*RGAS = *preprocc::RGAS;
*RGASX = *preprocc::RGASX;
1;
