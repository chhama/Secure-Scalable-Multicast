# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package li_attribute_template;
use base qw(Exporter);
use base qw(DynaLoader);
package li_attribute_templatec;
bootstrap li_attribute_template;
package li_attribute_template;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package li_attribute_template;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package li_attribute_template;


############# Class : li_attribute_template::Foo ##############

package li_attribute_template::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_attribute_template );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = li_attribute_templatec::new_Foo(@_);
    bless $self, $pkg if defined($self);
}

*swig_value_get = *li_attribute_templatec::Foo_value_get;
*swig_value_set = *li_attribute_templatec::Foo_value_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_attribute_templatec::delete_Foo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_attribute_template::pair_intint ##############

package li_attribute_template::pair_intint;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_attribute_template );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = li_attribute_templatec::new_pair_intint(@_);
    bless $self, $pkg if defined($self);
}

*swig_first_get = *li_attribute_templatec::pair_intint_first_get;
*swig_first_set = *li_attribute_templatec::pair_intint_first_set;
*swig_second_get = *li_attribute_templatec::pair_intint_second_get;
*swig_second_set = *li_attribute_templatec::pair_intint_second_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_attribute_templatec::delete_pair_intint($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_attribute_template::Cintint ##############

package li_attribute_template::Cintint;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_attribute_template );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = li_attribute_templatec::new_Cintint(@_);
    bless $self, $pkg if defined($self);
}

*swig_a_get = *li_attribute_templatec::Cintint_a_get;
*swig_a_set = *li_attribute_templatec::Cintint_a_set;
*swig_b_get = *li_attribute_templatec::Cintint_b_get;
*swig_b_set = *li_attribute_templatec::Cintint_b_set;
*swig_str_get = *li_attribute_templatec::Cintint_str_get;
*swig_str_set = *li_attribute_templatec::Cintint_str_set;
*swig_d_get = *li_attribute_templatec::Cintint_d_get;
*swig_d_set = *li_attribute_templatec::Cintint_d_set;
*swig_e_get = *li_attribute_templatec::Cintint_e_get;
*swig_e_set = *li_attribute_templatec::Cintint_e_set;
*swig_f_get = *li_attribute_templatec::Cintint_f_get;
*swig_f_set = *li_attribute_templatec::Cintint_f_set;
*swig_g_get = *li_attribute_templatec::Cintint_g_get;
*swig_g_set = *li_attribute_templatec::Cintint_g_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_attribute_templatec::delete_Cintint($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package li_attribute_template;

1;
