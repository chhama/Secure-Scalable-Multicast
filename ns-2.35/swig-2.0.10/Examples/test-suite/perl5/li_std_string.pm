# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package li_std_string;
use base qw(Exporter);
use base qw(DynaLoader);
package li_std_stringc;
bootstrap li_std_string;
package li_std_string;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package li_std_string;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package li_std_string;

*test_value = *li_std_stringc::test_value;
*test_const_reference = *li_std_stringc::test_const_reference;
*test_pointer = *li_std_stringc::test_pointer;
*test_pointer_out = *li_std_stringc::test_pointer_out;
*test_const_pointer = *li_std_stringc::test_const_pointer;
*test_const_pointer_out = *li_std_stringc::test_const_pointer_out;
*test_reference = *li_std_stringc::test_reference;
*test_reference_out = *li_std_stringc::test_reference_out;
*test_reference_input = *li_std_stringc::test_reference_input;
*test_reference_inout = *li_std_stringc::test_reference_inout;
*test_throw = *li_std_stringc::test_throw;
*test_const_reference_throw = *li_std_stringc::test_const_reference_throw;
*test_pointer_throw = *li_std_stringc::test_pointer_throw;
*test_const_pointer_throw = *li_std_stringc::test_const_pointer_throw;
*stdstring_empty = *li_std_stringc::stdstring_empty;
*c_empty = *li_std_stringc::c_empty;
*c_null = *li_std_stringc::c_null;
*get_null = *li_std_stringc::get_null;

############# Class : li_std_string::Structure ##############

package li_std_string::Structure;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_std_string );
%OWNER = ();
%ITERATORS = ();
*swig_MemberString_get = *li_std_stringc::Structure_MemberString_get;
*swig_MemberString_set = *li_std_stringc::Structure_MemberString_set;
*swig_MemberString2_get = *li_std_stringc::Structure_MemberString2_get;
*swig_MemberString2_set = *li_std_stringc::Structure_MemberString2_set;
*StaticMemberString = *li_std_stringc::Structure_StaticMemberString;
*StaticMemberString2 = *li_std_stringc::Structure_StaticMemberString2;
*swig_ConstMemberString_get = *li_std_stringc::Structure_ConstMemberString_get;
*swig_ConstMemberString_set = *li_std_stringc::Structure_ConstMemberString_set;
*ConstStaticMemberString = *li_std_stringc::Structure_ConstStaticMemberString;
sub new {
    my $pkg = shift;
    my $self = li_std_stringc::new_Structure(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_std_stringc::delete_Structure($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_std_string::Foo ##############

package li_std_string::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_std_string );
%OWNER = ();
%ITERATORS = ();
*test = *li_std_stringc::Foo_test;
*testl = *li_std_stringc::Foo_testl;
sub new {
    my $pkg = shift;
    my $self = li_std_stringc::new_Foo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_std_stringc::delete_Foo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package li_std_string;

*GlobalString = *li_std_stringc::GlobalString;
*GlobalString2 = *li_std_stringc::GlobalString2;
*ConstGlobalString = *li_std_stringc::ConstGlobalString;
*Structure_StaticMemberString = *li_std_stringc::Structure_StaticMemberString;
*Structure_StaticMemberString2 = *li_std_stringc::Structure_StaticMemberString2;
*Structure_ConstStaticMemberString = *li_std_stringc::Structure_ConstStaticMemberString;
1;
