# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package static_const_member_2;
use base qw(Exporter);
use base qw(DynaLoader);
package static_const_member_2c;
bootstrap static_const_member_2;
package static_const_member_2;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package static_const_member_2;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package static_const_member_2;


############# Class : static_const_member_2::CavityPackFlags ##############

package static_const_member_2::CavityPackFlags;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( static_const_member_2 );
%OWNER = ();
%ITERATORS = ();
*forward_field = *static_const_member_2c::CavityPackFlags_forward_field;
*forward_field = *static_const_member_2c::CavityPackFlags_forward_field;
*backward_field = *static_const_member_2c::CavityPackFlags_backward_field;
*backward_field = *static_const_member_2c::CavityPackFlags_backward_field;
*cavity_flags = *static_const_member_2c::CavityPackFlags_cavity_flags;
*flags = *static_const_member_2c::CavityPackFlags_flags;
*reftest = *static_const_member_2c::CavityPackFlags_reftest;
sub new {
    my $pkg = shift;
    my $self = static_const_member_2c::new_CavityPackFlags(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        static_const_member_2c::delete_CavityPackFlags($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : static_const_member_2::Test_int ##############

package static_const_member_2::Test_int;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( static_const_member_2::CavityPackFlags static_const_member_2 );
%OWNER = ();
%ITERATORS = ();
*LeftIndex = *static_const_member_2c::Test_int_LeftIndex;
*RightIndex = *static_const_member_2c::Test_int_RightIndex;
*current_profile = *static_const_member_2c::Test_int_current_profile;
*current_profile = *static_const_member_2c::Test_int_current_profile;
sub new {
    my $pkg = shift;
    my $self = static_const_member_2c::new_Test_int(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        static_const_member_2c::delete_Test_int($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : static_const_member_2::Foo ##############

package static_const_member_2::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( static_const_member_2 );
%OWNER = ();
%ITERATORS = ();
*swig_val_get = *static_const_member_2c::Foo_val_get;
*swig_val_set = *static_const_member_2c::Foo_val_set;
sub new {
    my $pkg = shift;
    my $self = static_const_member_2c::new_Foo(@_);
    bless $self, $pkg if defined($self);
}

*BAR = *static_const_member_2c::Foo_BAR;
*BAZ = *static_const_member_2c::Foo_BAZ;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        static_const_member_2c::delete_Foo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package static_const_member_2;

*CavityPackFlags_cavity_flags = *static_const_member_2c::CavityPackFlags_cavity_flags;
*CavityPackFlags_flags = *static_const_member_2c::CavityPackFlags_flags;
*CavityPackFlags_reftest = *static_const_member_2c::CavityPackFlags_reftest;

my %__Foo_BAR_hash;
tie %__Foo_BAR_hash,"static_const_member_2::Foo", $static_const_member_2c::Foo_BAR;
$Foo_BAR= \%__Foo_BAR_hash;
bless $Foo_BAR, static_const_member_2::Foo;

my %__Foo_BAZ_hash;
tie %__Foo_BAZ_hash,"static_const_member_2::Foo", $static_const_member_2c::Foo_BAZ;
$Foo_BAZ= \%__Foo_BAZ_hash;
bless $Foo_BAZ, static_const_member_2::Foo;
1;
