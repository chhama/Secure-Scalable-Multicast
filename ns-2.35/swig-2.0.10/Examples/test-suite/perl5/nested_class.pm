# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package nested_class;
use base qw(Exporter);
use base qw(DynaLoader);
package nested_classc;
bootstrap nested_class;
package nested_class;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package nested_class;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package nested_class;


############# Class : nested_class::Outer ##############

package nested_class::Outer;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( nested_class );
%OWNER = ();
%ITERATORS = ();
*swig_InnerClass2Instance_get = *nested_classc::Outer_InnerClass2Instance_get;
*swig_InnerClass2Instance_set = *nested_classc::Outer_InnerClass2Instance_set;
*swig_InnerStruct2Instance_get = *nested_classc::Outer_InnerStruct2Instance_get;
*swig_InnerStruct2Instance_set = *nested_classc::Outer_InnerStruct2Instance_set;
*swig_InnerUnion2Instance_get = *nested_classc::Outer_InnerUnion2Instance_get;
*swig_InnerUnion2Instance_set = *nested_classc::Outer_InnerUnion2Instance_set;
*makeInnerStruct1 = *nested_classc::Outer_makeInnerStruct1;
*makeInnerClass1 = *nested_classc::Outer_makeInnerClass1;
*makeInnerUnion1 = *nested_classc::Outer_makeInnerUnion1;
*makeInnerStruct2 = *nested_classc::Outer_makeInnerStruct2;
*makeInnerClass2 = *nested_classc::Outer_makeInnerClass2;
*makeInnerUnion2 = *nested_classc::Outer_makeInnerUnion2;
*makeInnerStruct4Typedef = *nested_classc::Outer_makeInnerStruct4Typedef;
*makeInnerClass4Typedef = *nested_classc::Outer_makeInnerClass4Typedef;
*makeInnerUnion4Typedef = *nested_classc::Outer_makeInnerUnion4Typedef;
*makeInnerStruct5 = *nested_classc::Outer_makeInnerStruct5;
*makeInnerClass5 = *nested_classc::Outer_makeInnerClass5;
*makeInnerUnion5 = *nested_classc::Outer_makeInnerUnion5;
*makeInnerStruct5Typedef = *nested_classc::Outer_makeInnerStruct5Typedef;
*makeInnerClass5Typedef = *nested_classc::Outer_makeInnerClass5Typedef;
*makeInnerUnion5Typedef = *nested_classc::Outer_makeInnerUnion5Typedef;
*swig_MultipleInstance1_get = *nested_classc::Outer_MultipleInstance1_get;
*swig_MultipleInstance1_set = *nested_classc::Outer_MultipleInstance1_set;
*swig_MultipleInstance2_get = *nested_classc::Outer_MultipleInstance2_get;
*swig_MultipleInstance2_set = *nested_classc::Outer_MultipleInstance2_set;
*swig_MultipleInstance3_get = *nested_classc::Outer_MultipleInstance3_get;
*swig_MultipleInstance3_set = *nested_classc::Outer_MultipleInstance3_set;
*swig_MultipleInstance4_get = *nested_classc::Outer_MultipleInstance4_get;
*swig_MultipleInstance4_set = *nested_classc::Outer_MultipleInstance4_set;
*swig_MultipleDerivedInstance1_get = *nested_classc::Outer_MultipleDerivedInstance1_get;
*swig_MultipleDerivedInstance1_set = *nested_classc::Outer_MultipleDerivedInstance1_set;
*swig_MultipleDerivedInstance2_get = *nested_classc::Outer_MultipleDerivedInstance2_get;
*swig_MultipleDerivedInstance2_set = *nested_classc::Outer_MultipleDerivedInstance2_set;
*swig_MultipleDerivedInstance3_get = *nested_classc::Outer_MultipleDerivedInstance3_get;
*swig_MultipleDerivedInstance3_set = *nested_classc::Outer_MultipleDerivedInstance3_set;
*swig_MultipleDerivedInstance4_get = *nested_classc::Outer_MultipleDerivedInstance4_get;
*swig_MultipleDerivedInstance4_set = *nested_classc::Outer_MultipleDerivedInstance4_set;
*makeInnerMultipleAnonTypedef1 = *nested_classc::Outer_makeInnerMultipleAnonTypedef1;
*makeInnerMultipleAnonTypedef2 = *nested_classc::Outer_makeInnerMultipleAnonTypedef2;
*makeInnerMultipleAnonTypedef3 = *nested_classc::Outer_makeInnerMultipleAnonTypedef3;
*makeInnerMultipleNamedTypedef = *nested_classc::Outer_makeInnerMultipleNamedTypedef;
*makeInnerMultipleNamedTypedef1 = *nested_classc::Outer_makeInnerMultipleNamedTypedef1;
*makeInnerMultipleNamedTypedef2 = *nested_classc::Outer_makeInnerMultipleNamedTypedef2;
*makeInnerMultipleNamedTypedef3 = *nested_classc::Outer_makeInnerMultipleNamedTypedef3;
*makeInnerSameName = *nested_classc::Outer_makeInnerSameName;
sub new {
    my $pkg = shift;
    my $self = nested_classc::new_Outer(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        nested_classc::delete_Outer($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : nested_class::Outer2 ##############

package nested_class::Outer2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( nested_class );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = nested_classc::new_Outer2(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        nested_classc::delete_Outer2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package nested_class;

1;
