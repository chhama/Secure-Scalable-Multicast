# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package typedef_struct;
use base qw(Exporter);
use base qw(DynaLoader);
package typedef_structc;
bootstrap typedef_struct;
package typedef_struct;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package typedef_struct;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package typedef_struct;

*make_a = *typedef_structc::make_a;
*make_b = *typedef_structc::make_b;

############# Class : typedef_struct::LineObj ##############

package typedef_struct::LineObj;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typedef_struct );
%OWNER = ();
%ITERATORS = ();
*swig_numpoints_get = *typedef_structc::LineObj_numpoints_get;
*swig_numpoints_set = *typedef_structc::LineObj_numpoints_set;
sub new {
    my $pkg = shift;
    my $self = typedef_structc::new_LineObj(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typedef_structc::delete_LineObj($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typedef_struct::FontSetObj ##############

package typedef_struct::FontSetObj;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typedef_struct );
%OWNER = ();
%ITERATORS = ();
*swig_filename_get = *typedef_structc::FontSetObj_filename_get;
*swig_filename_set = *typedef_structc::FontSetObj_filename_set;
*swig_numfonts_get = *typedef_structc::FontSetObj_numfonts_get;
*swig_numfonts_set = *typedef_structc::FontSetObj_numfonts_set;
*swig_fonts_get = *typedef_structc::FontSetObj_fonts_get;
*swig_fonts_set = *typedef_structc::FontSetObj_fonts_set;
sub new {
    my $pkg = shift;
    my $self = typedef_structc::new_FontSetObj(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typedef_structc::delete_FontSetObj($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typedef_struct::A_t ##############

package typedef_struct::A_t;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typedef_struct );
%OWNER = ();
%ITERATORS = ();
*swig_a_get = *typedef_structc::A_t_a_get;
*swig_a_set = *typedef_structc::A_t_a_set;
*swig_b_get = *typedef_structc::A_t_b_get;
*swig_b_set = *typedef_structc::A_t_b_set;
sub new {
    my $pkg = shift;
    my $self = typedef_structc::new_A_t(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typedef_structc::delete_A_t($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typedef_struct::Foo ##############

package typedef_struct::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typedef_struct );
%OWNER = ();
%ITERATORS = ();
*swig_enumvar_get = *typedef_structc::Foo_enumvar_get;
*swig_enumvar_set = *typedef_structc::Foo_enumvar_set;
*swig_foovar_get = *typedef_structc::Foo_foovar_get;
*swig_foovar_set = *typedef_structc::Foo_foovar_set;
*swig_fptr_get = *typedef_structc::Foo_fptr_get;
*swig_fptr_set = *typedef_structc::Foo_fptr_set;
sub new {
    my $pkg = shift;
    my $self = typedef_structc::new_Foo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typedef_structc::delete_Foo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package typedef_struct;

*MS_NOOVERRIDE = *typedef_structc::MS_NOOVERRIDE;
*NONAME1 = *typedef_structc::NONAME1;
*NONAME2 = *typedef_structc::NONAME2;
1;
