# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package smart_pointer_namespace2;
use base qw(Exporter);
use base qw(DynaLoader);
package smart_pointer_namespace2c;
bootstrap smart_pointer_namespace2;
package smart_pointer_namespace2;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package smart_pointer_namespace2;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package smart_pointer_namespace2;


############# Class : smart_pointer_namespace2::Obj1 ##############

package smart_pointer_namespace2::Obj1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_namespace2 );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_namespace2c::new_Obj1(@_);
    bless $self, $pkg if defined($self);
}

*donothing = *smart_pointer_namespace2c::Obj1_donothing;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_namespace2c::delete_Obj1($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_namespace2::Obj1_ptr ##############

package smart_pointer_namespace2::Obj1_ptr;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_namespace2 );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_namespace2c::new_Obj1_ptr(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_namespace2c::delete_Obj1_ptr($self);
        delete $OWNER{$self};
    }
}

*__deref__ = *smart_pointer_namespace2c::Obj1_ptr___deref__;
*donothing = *smart_pointer_namespace2c::Obj1_ptr_donothing;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_namespace2::Obj2 ##############

package smart_pointer_namespace2::Obj2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_namespace2 );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_namespace2c::new_Obj2(@_);
    bless $self, $pkg if defined($self);
}

*donothing = *smart_pointer_namespace2c::Obj2_donothing;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_namespace2c::delete_Obj2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_namespace2::Obj2_ptr ##############

package smart_pointer_namespace2::Obj2_ptr;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_namespace2 );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_namespace2c::new_Obj2_ptr(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_namespace2c::delete_Obj2_ptr($self);
        delete $OWNER{$self};
    }
}

*__deref__ = *smart_pointer_namespace2c::Obj2_ptr___deref__;
*donothing = *smart_pointer_namespace2c::Obj2_ptr_donothing;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package smart_pointer_namespace2;

1;
