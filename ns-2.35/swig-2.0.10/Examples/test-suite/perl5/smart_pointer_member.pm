# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package smart_pointer_member;
use base qw(Exporter);
use base qw(DynaLoader);
package smart_pointer_memberc;
bootstrap smart_pointer_member;
package smart_pointer_member;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package smart_pointer_member;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package smart_pointer_member;

*foo = *smart_pointer_memberc::foo;
*get_y = *smart_pointer_memberc::get_y;
*get_z = *smart_pointer_memberc::get_z;

############# Class : smart_pointer_member::Foo ##############

package smart_pointer_member::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_member );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *smart_pointer_memberc::Foo_x_get;
*swig_x_set = *smart_pointer_memberc::Foo_x_set;
*swig_y_get = *smart_pointer_memberc::Foo_y_get;
*swig_y_set = *smart_pointer_memberc::Foo_y_set;
*z = *smart_pointer_memberc::Foo_z;
*ZZ = *smart_pointer_memberc::Foo_ZZ;
*ZZ = *smart_pointer_memberc::Foo_ZZ;
*zx = *smart_pointer_memberc::Foo_zx;
*boo = *smart_pointer_memberc::Foo_boo;
sub new {
    my $pkg = shift;
    my $self = smart_pointer_memberc::new_Foo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_memberc::delete_Foo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_member::Bar ##############

package smart_pointer_member::Bar;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_member );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_memberc::new_Bar(@_);
    bless $self, $pkg if defined($self);
}

*__deref__ = *smart_pointer_memberc::Bar___deref__;
*bua = *smart_pointer_memberc::Bar_bua;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_memberc::delete_Bar($self);
        delete $OWNER{$self};
    }
}

*swig_x_get = *smart_pointer_memberc::Bar_x_get;
*swig_x_set = *smart_pointer_memberc::Bar_x_set;
*swig_y_get = *smart_pointer_memberc::Bar_y_get;
*swig_y_set = *smart_pointer_memberc::Bar_y_set;
*swig_z_get = *smart_pointer_memberc::Bar_z_get;
*swig_z_set = *smart_pointer_memberc::Bar_z_set;
*swig_ZZ_get = *smart_pointer_memberc::Bar_ZZ_get;
*swig_ZZ_set = *smart_pointer_memberc::Bar_ZZ_set;
*swig_zx_get = *smart_pointer_memberc::Bar_zx_get;
*swig_zx_set = *smart_pointer_memberc::Bar_zx_set;
*boo = *smart_pointer_memberc::Bar_boo;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_member::CBar ##############

package smart_pointer_member::CBar;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_member );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_memberc::new_CBar(@_);
    bless $self, $pkg if defined($self);
}

*__deref__ = *smart_pointer_memberc::CBar___deref__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_memberc::delete_CBar($self);
        delete $OWNER{$self};
    }
}

*swig_x_get = *smart_pointer_memberc::CBar_x_get;
*swig_x_set = *smart_pointer_memberc::CBar_x_set;
*swig_y_get = *smart_pointer_memberc::CBar_y_get;
*swig_y_set = *smart_pointer_memberc::CBar_y_set;
*swig_z_get = *smart_pointer_memberc::CBar_z_get;
*swig_z_set = *smart_pointer_memberc::CBar_z_set;
*swig_ZZ_get = *smart_pointer_memberc::CBar_ZZ_get;
*swig_ZZ_set = *smart_pointer_memberc::CBar_ZZ_set;
*swig_zx_get = *smart_pointer_memberc::CBar_zx_get;
*swig_zx_set = *smart_pointer_memberc::CBar_zx_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package smart_pointer_member;

*Foo_z = *smart_pointer_memberc::Foo_z;
*Foo_zx = *smart_pointer_memberc::Foo_zx;
1;
