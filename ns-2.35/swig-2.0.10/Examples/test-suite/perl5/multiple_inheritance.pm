# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package multiple_inheritance;
use base qw(Exporter);
use base qw(DynaLoader);
package multiple_inheritancec;
bootstrap multiple_inheritance;
package multiple_inheritance;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package multiple_inheritance;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package multiple_inheritance;


############# Class : multiple_inheritance::Bar ##############

package multiple_inheritance::Bar;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( multiple_inheritance );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        multiple_inheritancec::delete_Bar($self);
        delete $OWNER{$self};
    }
}

*bar = *multiple_inheritancec::Bar_bar;
sub new {
    my $pkg = shift;
    my $self = multiple_inheritancec::new_Bar(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : multiple_inheritance::Foo ##############

package multiple_inheritance::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( multiple_inheritance );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        multiple_inheritancec::delete_Foo($self);
        delete $OWNER{$self};
    }
}

*foo = *multiple_inheritancec::Foo_foo;
sub new {
    my $pkg = shift;
    my $self = multiple_inheritancec::new_Foo(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : multiple_inheritance::SpamInt ##############

package multiple_inheritance::SpamInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( multiple_inheritance );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        multiple_inheritancec::delete_SpamInt($self);
        delete $OWNER{$self};
    }
}

*spam = *multiple_inheritancec::SpamInt_spam;
sub new {
    my $pkg = shift;
    my $self = multiple_inheritancec::new_SpamInt(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : multiple_inheritance::FooBar ##############

package multiple_inheritance::FooBar;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( multiple_inheritance::Foo multiple_inheritance::Bar multiple_inheritance );
%OWNER = ();
%ITERATORS = ();
*fooBar = *multiple_inheritancec::FooBar_fooBar;
sub new {
    my $pkg = shift;
    my $self = multiple_inheritancec::new_FooBar(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        multiple_inheritancec::delete_FooBar($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : multiple_inheritance::FooBarSpam ##############

package multiple_inheritance::FooBarSpam;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( multiple_inheritance::Foo multiple_inheritance::Bar multiple_inheritance::SpamInt multiple_inheritance );
%OWNER = ();
%ITERATORS = ();
*fooBarSpam = *multiple_inheritancec::FooBarSpam_fooBarSpam;
sub new {
    my $pkg = shift;
    my $self = multiple_inheritancec::new_FooBarSpam(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        multiple_inheritancec::delete_FooBarSpam($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : multiple_inheritance::IgnoreDerived1 ##############

package multiple_inheritance::IgnoreDerived1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( multiple_inheritance::Bar multiple_inheritance );
%OWNER = ();
%ITERATORS = ();
*ignorederived1 = *multiple_inheritancec::IgnoreDerived1_ignorederived1;
sub new {
    my $pkg = shift;
    my $self = multiple_inheritancec::new_IgnoreDerived1(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        multiple_inheritancec::delete_IgnoreDerived1($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : multiple_inheritance::IgnoreDerived2 ##############

package multiple_inheritance::IgnoreDerived2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( multiple_inheritance::Bar multiple_inheritance );
%OWNER = ();
%ITERATORS = ();
*ignorederived2 = *multiple_inheritancec::IgnoreDerived2_ignorederived2;
sub new {
    my $pkg = shift;
    my $self = multiple_inheritancec::new_IgnoreDerived2(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        multiple_inheritancec::delete_IgnoreDerived2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : multiple_inheritance::IgnoreDerived3 ##############

package multiple_inheritance::IgnoreDerived3;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( multiple_inheritance::Bar multiple_inheritance );
%OWNER = ();
%ITERATORS = ();
*ignorederived3 = *multiple_inheritancec::IgnoreDerived3_ignorederived3;
sub new {
    my $pkg = shift;
    my $self = multiple_inheritancec::new_IgnoreDerived3(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        multiple_inheritancec::delete_IgnoreDerived3($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : multiple_inheritance::IgnoreDerived4 ##############

package multiple_inheritance::IgnoreDerived4;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( multiple_inheritance::Bar multiple_inheritance );
%OWNER = ();
%ITERATORS = ();
*ignorederived4 = *multiple_inheritancec::IgnoreDerived4_ignorederived4;
sub new {
    my $pkg = shift;
    my $self = multiple_inheritancec::new_IgnoreDerived4(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        multiple_inheritancec::delete_IgnoreDerived4($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package multiple_inheritance;

1;
