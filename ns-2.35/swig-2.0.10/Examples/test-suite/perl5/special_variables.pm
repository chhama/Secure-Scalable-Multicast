# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package special_variables;
use base qw(Exporter);
use base qw(DynaLoader);
package special_variablesc;
bootstrap special_variables;
package special_variables;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package special_variables;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package special_variables;

*testmethod = *special_variablesc::testmethod;
*ExceptionVars = *special_variablesc::ExceptionVars;
*overloadedmethod = *special_variablesc::overloadedmethod;
*globtemplate = *special_variablesc::globtemplate;
*director_testmethod = *special_variablesc::director_testmethod;

############# Class : special_variables::KKK ##############

package special_variables::KKK;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( special_variables );
%OWNER = ();
%ITERATORS = ();
*testmethod = *special_variablesc::KKK_testmethod;
*teststaticmethod = *special_variablesc::KKK_teststaticmethod;
sub new {
    my $pkg = shift;
    my $self = special_variablesc::new_KKK(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        special_variablesc::delete_KKK($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : special_variables::ABC ##############

package special_variables::ABC;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( special_variables );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = special_variablesc::new_ABC(@_);
    bless $self, $pkg if defined($self);
}

*staticmethod = *special_variablesc::ABC_staticmethod;
*instancemethod = *special_variablesc::ABC_instancemethod;
*constmethod = *special_variablesc::ABC_constmethod;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        special_variablesc::delete_ABC($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : special_variables::TemplateABC ##############

package special_variables::TemplateABC;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( special_variables );
%OWNER = ();
%ITERATORS = ();
*tmethod = *special_variablesc::TemplateABC_tmethod;
sub new {
    my $pkg = shift;
    my $self = special_variablesc::new_TemplateABC(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        special_variablesc::delete_TemplateABC($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : special_variables::DirectorTest ##############

package special_variables::DirectorTest;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( special_variables );
%OWNER = ();
%ITERATORS = ();
*director_testmethod = *special_variablesc::DirectorTest_director_testmethod;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        special_variablesc::delete_DirectorTest($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = special_variablesc::new_DirectorTest(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : special_variables::DEFNewName ##############

package special_variables::DEFNewName;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( special_variables::ABC special_variables );
%OWNER = ();
%ITERATORS = ();
*instance_def = *special_variablesc::DEFNewName_instance_def;
*static_def = *special_variablesc::DEFNewName_static_def;
sub new {
    my $pkg = shift;
    my $self = special_variablesc::new_DEFNewName(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        special_variablesc::delete_DEFNewName($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package special_variables;

*declaration = *special_variablesc::declaration;
1;
