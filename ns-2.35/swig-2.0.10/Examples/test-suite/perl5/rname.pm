# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package rname;
use base qw(Exporter);
use base qw(DynaLoader);
package rnamec;
bootstrap rname;
package rname;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package rname;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package rname;

*foo_i = *rnamec::foo_i;
*foo_d = *rnamec::foo_d;
*foo_s = *rnamec::foo_s;
*foo = *rnamec::foo;

############# Class : rname::Bar ##############

package rname::Bar;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rname );
%OWNER = ();
%ITERATORS = ();
*foo_i = *rnamec::Bar_foo_i;
*foo_d = *rnamec::Bar_foo_d;
*foo = *rnamec::Bar_foo;
*foo_u = *rnamec::Bar_foo_u;
sub new {
    my $pkg = shift;
    my $self = rnamec::new_Bar(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rnamec::delete_Bar($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rname::RenamedBase ##############

package rname::RenamedBase;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rname );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rnamec::new_RenamedBase(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rnamec::delete_RenamedBase($self);
        delete $OWNER{$self};
    }
}

*fn = *rnamec::RenamedBase_fn;
*newname = *rnamec::RenamedBase_newname;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rname::RenamedDerived ##############

package rname::RenamedDerived;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rname::RenamedBase rname );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rnamec::new_RenamedDerived(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rnamec::delete_RenamedDerived($self);
        delete $OWNER{$self};
    }
}

*Xfunc = *rnamec::RenamedDerived_Xfunc;
*newname = *rnamec::RenamedDerived_newname;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package rname;

1;
