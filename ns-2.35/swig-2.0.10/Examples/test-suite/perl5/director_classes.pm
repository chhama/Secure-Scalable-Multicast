# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package director_classes;
use base qw(Exporter);
use base qw(DynaLoader);
package director_classesc;
bootstrap director_classes;
package director_classes;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package director_classes;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package director_classes;


############# Class : director_classes::DoubleHolder ##############

package director_classes::DoubleHolder;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_classes );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = director_classesc::new_DoubleHolder(@_);
    bless $self, $pkg if defined($self);
}

*swig_val_get = *director_classesc::DoubleHolder_val_get;
*swig_val_set = *director_classesc::DoubleHolder_val_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_classesc::delete_DoubleHolder($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_classes::Base ##############

package director_classes::Base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_classes );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = director_classesc::new_Base(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_classesc::delete_Base($self);
        delete $OWNER{$self};
    }
}

*Val = *director_classesc::Base_Val;
*Ref = *director_classesc::Base_Ref;
*Ptr = *director_classesc::Base_Ptr;
*FullyOverloaded = *director_classesc::Base_FullyOverloaded;
*SemiOverloaded = *director_classesc::Base_SemiOverloaded;
*DefaultParms = *director_classesc::Base_DefaultParms;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_classes::Derived ##############

package director_classes::Derived;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_classes::Base director_classes );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = director_classesc::new_Derived(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_classesc::delete_Derived($self);
        delete $OWNER{$self};
    }
}

*Val = *director_classesc::Derived_Val;
*Ref = *director_classesc::Derived_Ref;
*Ptr = *director_classesc::Derived_Ptr;
*FullyOverloaded = *director_classesc::Derived_FullyOverloaded;
*SemiOverloaded = *director_classesc::Derived_SemiOverloaded;
*DefaultParms = *director_classesc::Derived_DefaultParms;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_classes::Caller ##############

package director_classes::Caller;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_classes );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = director_classesc::new_Caller(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_classesc::delete_Caller($self);
        delete $OWNER{$self};
    }
}

*set = *director_classesc::Caller_set;
*reset = *director_classesc::Caller_reset;
*ValCall = *director_classesc::Caller_ValCall;
*RefCall = *director_classesc::Caller_RefCall;
*PtrCall = *director_classesc::Caller_PtrCall;
*FullyOverloadedCall = *director_classesc::Caller_FullyOverloadedCall;
*SemiOverloadedCall = *director_classesc::Caller_SemiOverloadedCall;
*DefaultParmsCall = *director_classesc::Caller_DefaultParmsCall;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_classes::BaseClass ##############

package director_classes::BaseClass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_classes );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_classesc::delete_BaseClass($self);
        delete $OWNER{$self};
    }
}

*dofoo = *director_classesc::BaseClass_dofoo;
sub new {
    my $pkg = shift;
    my $self = director_classesc::new_BaseClass(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_classes::DerivedClass ##############

package director_classes::DerivedClass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_classes::BaseClass director_classes );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = director_classesc::new_DerivedClass(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_classesc::delete_DerivedClass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package director_classes;

*PrintDebug = *director_classesc::PrintDebug;
1;
