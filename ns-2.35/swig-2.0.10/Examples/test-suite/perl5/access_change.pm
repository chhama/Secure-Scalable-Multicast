# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package access_change;
use base qw(Exporter);
use base qw(DynaLoader);
package access_changec;
bootstrap access_change;
package access_change;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package access_change;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package access_change;


############# Class : access_change::BaseInt ##############

package access_change::BaseInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( access_change );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        access_changec::delete_BaseInt($self);
        delete $OWNER{$self};
    }
}

*PublicProtectedPublic1 = *access_changec::BaseInt_PublicProtectedPublic1;
*PublicProtectedPublic2 = *access_changec::BaseInt_PublicProtectedPublic2;
*PublicProtectedPublic3 = *access_changec::BaseInt_PublicProtectedPublic3;
*PublicProtectedPublic4 = *access_changec::BaseInt_PublicProtectedPublic4;
sub new {
    my $pkg = shift;
    my $self = access_changec::new_BaseInt(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : access_change::DerivedInt ##############

package access_change::DerivedInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( access_change::BaseInt access_change );
%OWNER = ();
%ITERATORS = ();
*WasProtected1 = *access_changec::DerivedInt_WasProtected1;
*WasProtected2 = *access_changec::DerivedInt_WasProtected2;
*WasProtected3 = *access_changec::DerivedInt_WasProtected3;
*WasProtected4 = *access_changec::DerivedInt_WasProtected4;
sub new {
    my $pkg = shift;
    my $self = access_changec::new_DerivedInt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        access_changec::delete_DerivedInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : access_change::BottomInt ##############

package access_change::BottomInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( access_change::DerivedInt access_change );
%OWNER = ();
%ITERATORS = ();
*WasProtected1 = *access_changec::BottomInt_WasProtected1;
*WasProtected2 = *access_changec::BottomInt_WasProtected2;
*WasProtected3 = *access_changec::BottomInt_WasProtected3;
*WasProtected4 = *access_changec::BottomInt_WasProtected4;
*PublicProtectedPublic1 = *access_changec::BottomInt_PublicProtectedPublic1;
*PublicProtectedPublic2 = *access_changec::BottomInt_PublicProtectedPublic2;
*PublicProtectedPublic3 = *access_changec::BottomInt_PublicProtectedPublic3;
*PublicProtectedPublic4 = *access_changec::BottomInt_PublicProtectedPublic4;
sub new {
    my $pkg = shift;
    my $self = access_changec::new_BottomInt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        access_changec::delete_BottomInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package access_change;

1;
