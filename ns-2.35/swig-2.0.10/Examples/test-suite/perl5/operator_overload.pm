# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package operator_overload;
use base qw(Exporter);
use base qw(DynaLoader);
package operator_overloadc;
bootstrap operator_overload;
package operator_overload;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package operator_overload;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package operator_overload;

*And = *operator_overloadc::And;
*Or = *operator_overloadc::Or;
*Plus = *operator_overloadc::Plus;
*Minus = *operator_overloadc::Minus;
*Multiply = *operator_overloadc::Multiply;
*Divide = *operator_overloadc::Divide;
*Percent = *operator_overloadc::Percent;
*EqualEqual = *operator_overloadc::EqualEqual;
*NotEqual = *operator_overloadc::NotEqual;
*LessThan = *operator_overloadc::LessThan;
*LessThanEqual = *operator_overloadc::LessThanEqual;
*GreaterThan = *operator_overloadc::GreaterThan;
*GreaterThanEqual = *operator_overloadc::GreaterThanEqual;

############# Class : operator_overload::Op ##############

package operator_overload::Op;
use overload
    "+" => sub { $_[0]->__add__($_[1])},
    "--" => sub { $_[0]->__minmin__()},
    "%" => sub { $_[0]->__mod__($_[1])},
    "*" => sub { $_[0]->__mul__($_[1])},
    ">" => sub { $_[0]->__gt__($_[1])},
    "<=" => sub { $_[0]->__le__($_[1])},
    "!=" => sub { $_[0]->__ne__($_[1])},
    "==" => sub { $_[0]->__eq__($_[1])},
    "neg" => sub { $_[0]->__neg__()},
    "-" => sub {  if( not $_[2] ) { $_[0]->__sub__($_[1]) }
        elsif( $_[0]->can('__rsub__') ) { $_[0]->__rsub__($_[1]) }
        else { die("reverse subtraction not supported") }
        },
    "/" => sub { $_[0]->__div__($_[1])},
    ">=" => sub { $_[0]->__ge__($_[1])},
    '""' => sub { $_[0]->__str__()},
    "!" => sub { $_[0]->__not__()},
    "++" => sub { $_[0]->__plusplus__()},
    "<" => sub { $_[0]->__lt__($_[1])},
    "=" => sub { my $class = ref($_[0]); $class->new($_[0]) },
    "fallback" => 1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( operator_overload );
%OWNER = ();
%ITERATORS = ();
*swig_i_get = *operator_overloadc::Op_i_get;
*swig_i_set = *operator_overloadc::Op_i_set;
sub new {
    my $pkg = shift;
    my $self = operator_overloadc::new_Op(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        operator_overloadc::delete_Op($self);
        delete $OWNER{$self};
    }
}

*Equal = *operator_overloadc::Op_Equal;
*__iadd__ = *operator_overloadc::Op___iadd__;
*__isub__ = *operator_overloadc::Op___isub__;
*MultiplyEqual = *operator_overloadc::Op_MultiplyEqual;
*DivideEqual = *operator_overloadc::Op_DivideEqual;
*PercentEqual = *operator_overloadc::Op_PercentEqual;
*__neg__ = *operator_overloadc::Op___neg__;
*__not__ = *operator_overloadc::Op___not__;
*IndexIntoConst = *operator_overloadc::Op_IndexIntoConst;
*IndexInto = *operator_overloadc::Op_IndexInto;
*__call__ = *operator_overloadc::Op___call__;
*__plusplus__ = *operator_overloadc::Op___plusplus__;
*__minmin__ = *operator_overloadc::Op___minmin__;
*DoubleCast = *operator_overloadc::Op_DoubleCast;
*IntCast = *operator_overloadc::Op_IntCast;
*sanity_check = *operator_overloadc::Op_sanity_check;
*And = *operator_overloadc::Op_And;
*Or = *operator_overloadc::Op_Or;
*__add__ = *operator_overloadc::Op___add__;
*__sub__ = *operator_overloadc::Op___sub__;
*__mul__ = *operator_overloadc::Op___mul__;
*__div__ = *operator_overloadc::Op___div__;
*__mod__ = *operator_overloadc::Op___mod__;
*__eq__ = *operator_overloadc::Op___eq__;
*__ne__ = *operator_overloadc::Op___ne__;
*__lt__ = *operator_overloadc::Op___lt__;
*__le__ = *operator_overloadc::Op___le__;
*__gt__ = *operator_overloadc::Op___gt__;
*__ge__ = *operator_overloadc::Op___ge__;
*__rsub__ = *operator_overloadc::Op___rsub__;
*__str__ = *operator_overloadc::Op___str__;
*__getitem__ = *operator_overloadc::Op___getitem__;
*__setitem__ = *operator_overloadc::Op___setitem__;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : operator_overload::OpDerived ##############

package operator_overload::OpDerived;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( operator_overload::Op operator_overload );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = operator_overloadc::new_OpDerived(@_);
    bless $self, $pkg if defined($self);
}

*IntCast = *operator_overloadc::OpDerived_IntCast;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        operator_overloadc::delete_OpDerived($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package operator_overload;

1;
