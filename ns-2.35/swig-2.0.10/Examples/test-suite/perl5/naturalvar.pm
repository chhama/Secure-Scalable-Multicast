# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package naturalvar;
use base qw(Exporter);
use base qw(DynaLoader);
package naturalvarc;
bootstrap naturalvar;
package naturalvar;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package naturalvar;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package naturalvar;


############# Class : naturalvar::Foo ##############

package naturalvar::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( naturalvar );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = naturalvarc::new_Foo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        naturalvarc::delete_Foo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : naturalvar::Bar ##############

package naturalvar::Bar;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( naturalvar );
%OWNER = ();
%ITERATORS = ();
*swig_i_get = *naturalvarc::Bar_i_get;
*swig_i_set = *naturalvarc::Bar_i_set;
*swig_f_get = *naturalvarc::Bar_f_get;
*swig_f_set = *naturalvarc::Bar_f_set;
*swig_s_get = *naturalvarc::Bar_s_get;
*swig_s_set = *naturalvarc::Bar_s_set;
sub new {
    my $pkg = shift;
    my $self = naturalvarc::new_Bar(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        naturalvarc::delete_Bar($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package naturalvar;


my %__f_hash;
tie %__f_hash,"naturalvar::Foo", $naturalvarc::f;
$f= \%__f_hash;
bless $f, naturalvar::Foo;
*s = *naturalvarc::s;
1;
