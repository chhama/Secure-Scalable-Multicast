# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package unions;
use base qw(Exporter);
use base qw(DynaLoader);
package unionsc;
bootstrap unions;
package unions;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package unions;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package unions;


############# Class : unions::SmallStruct ##############

package unions::SmallStruct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( unions );
%OWNER = ();
%ITERATORS = ();
*swig_jill_get = *unionsc::SmallStruct_jill_get;
*swig_jill_set = *unionsc::SmallStruct_jill_set;
sub new {
    my $pkg = shift;
    my $self = unionsc::new_SmallStruct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        unionsc::delete_SmallStruct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : unions::BigStruct ##############

package unions::BigStruct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( unions );
%OWNER = ();
%ITERATORS = ();
*swig_jack_get = *unionsc::BigStruct_jack_get;
*swig_jack_set = *unionsc::BigStruct_jack_set;
*swig_smallstruct_get = *unionsc::BigStruct_smallstruct_get;
*swig_smallstruct_set = *unionsc::BigStruct_smallstruct_set;
sub new {
    my $pkg = shift;
    my $self = unionsc::new_BigStruct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        unionsc::delete_BigStruct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : unions::UnionTest ##############

package unions::UnionTest;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( unions );
%OWNER = ();
%ITERATORS = ();
*swig_bs_get = *unionsc::UnionTest_bs_get;
*swig_bs_set = *unionsc::UnionTest_bs_set;
*swig_ss_get = *unionsc::UnionTest_ss_get;
*swig_ss_set = *unionsc::UnionTest_ss_set;
sub new {
    my $pkg = shift;
    my $self = unionsc::new_UnionTest(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        unionsc::delete_UnionTest($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : unions::EmbeddedUnionTest ##############

package unions::EmbeddedUnionTest;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( unions );
%OWNER = ();
%ITERATORS = ();
*swig_number_get = *unionsc::EmbeddedUnionTest_number_get;
*swig_number_set = *unionsc::EmbeddedUnionTest_number_set;
*swig_uni_get = *unionsc::EmbeddedUnionTest_uni_get;
*swig_uni_set = *unionsc::EmbeddedUnionTest_uni_set;
sub new {
    my $pkg = shift;
    my $self = unionsc::new_EmbeddedUnionTest(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        unionsc::delete_EmbeddedUnionTest($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : unions::EmbeddedUnionTest_uni ##############

package unions::EmbeddedUnionTest_uni;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( unions );
%OWNER = ();
%ITERATORS = ();
*swig_big_get = *unionsc::EmbeddedUnionTest_uni_big_get;
*swig_big_set = *unionsc::EmbeddedUnionTest_uni_big_set;
*swig_small_get = *unionsc::EmbeddedUnionTest_uni_small_get;
*swig_small_set = *unionsc::EmbeddedUnionTest_uni_small_set;
sub new {
    my $pkg = shift;
    my $self = unionsc::new_EmbeddedUnionTest_uni(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        unionsc::delete_EmbeddedUnionTest_uni($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package unions;

1;
