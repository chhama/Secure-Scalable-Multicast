# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package preproc_line_file;
use base qw(Exporter);
use base qw(DynaLoader);
package preproc_line_filec;
bootstrap preproc_line_file;
package preproc_line_file;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package preproc_line_file;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package preproc_line_file;


############# Class : preproc_line_file::SillyStruct ##############

package preproc_line_file::SillyStruct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( preproc_line_file );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *preproc_line_filec::SillyStruct_num_get;
*swig_num_set = *preproc_line_filec::SillyStruct_num_set;
sub new {
    my $pkg = shift;
    my $self = preproc_line_filec::new_SillyStruct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        preproc_line_filec::delete_SillyStruct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : preproc_line_file::SillyMacroClass ##############

package preproc_line_file::SillyMacroClass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( preproc_line_file );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *preproc_line_filec::SillyMacroClass_num_get;
*swig_num_set = *preproc_line_filec::SillyMacroClass_num_set;
sub new {
    my $pkg = shift;
    my $self = preproc_line_filec::new_SillyMacroClass(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        preproc_line_filec::delete_SillyMacroClass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : preproc_line_file::SillyMultipleMacroStruct ##############

package preproc_line_file::SillyMultipleMacroStruct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( preproc_line_file );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *preproc_line_filec::SillyMultipleMacroStruct_num_get;
*swig_num_set = *preproc_line_filec::SillyMultipleMacroStruct_num_set;
sub new {
    my $pkg = shift;
    my $self = preproc_line_filec::new_SillyMultipleMacroStruct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        preproc_line_filec::delete_SillyMultipleMacroStruct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : preproc_line_file::Slash ##############

package preproc_line_file::Slash;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( preproc_line_file );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *preproc_line_filec::Slash_num_get;
*swig_num_set = *preproc_line_filec::Slash_num_set;
sub new {
    my $pkg = shift;
    my $self = preproc_line_filec::new_Slash(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        preproc_line_filec::delete_Slash($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package preproc_line_file;

*MYLINE = *preproc_line_filec::MYLINE;
*MYLINE_ADJUSTED = *preproc_line_filec::MYLINE_ADJUSTED;
*MYFILE = *preproc_line_filec::MYFILE;
*MYFILE_ADJUSTED = *preproc_line_filec::MYFILE_ADJUSTED;
*MY_STRINGNUM_A = *preproc_line_filec::MY_STRINGNUM_A;
*MY_STRINGNUM_B = *preproc_line_filec::MY_STRINGNUM_B;
*thing27 = *preproc_line_filec::thing27;
*thing28 = *preproc_line_filec::thing28;
*MYLINE2 = *preproc_line_filec::MYLINE2;
*INLINE_FILE = *preproc_line_filec::INLINE_FILE;
*INLINE_LINE = *preproc_line_filec::INLINE_LINE;
1;
