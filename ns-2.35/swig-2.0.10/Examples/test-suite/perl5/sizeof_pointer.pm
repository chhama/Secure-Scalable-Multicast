# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package sizeof_pointer;
use base qw(Exporter);
use base qw(DynaLoader);
package sizeof_pointerc;
bootstrap sizeof_pointer;
package sizeof_pointer;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package sizeof_pointer;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package sizeof_pointer;


############# Class : sizeof_pointer::SizeofPointerTest ##############

package sizeof_pointer::SizeofPointerTest;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( sizeof_pointer );
%OWNER = ();
%ITERATORS = ();
*swig_array1_get = *sizeof_pointerc::SizeofPointerTest_array1_get;
*swig_array1_set = *sizeof_pointerc::SizeofPointerTest_array1_set;
*swig_array2_get = *sizeof_pointerc::SizeofPointerTest_array2_get;
*swig_array2_set = *sizeof_pointerc::SizeofPointerTest_array2_set;
*swig_array3_get = *sizeof_pointerc::SizeofPointerTest_array3_get;
*swig_array3_set = *sizeof_pointerc::SizeofPointerTest_array3_set;
sub new {
    my $pkg = shift;
    my $self = sizeof_pointerc::new_SizeofPointerTest(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        sizeof_pointerc::delete_SizeofPointerTest($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package sizeof_pointer;

1;
