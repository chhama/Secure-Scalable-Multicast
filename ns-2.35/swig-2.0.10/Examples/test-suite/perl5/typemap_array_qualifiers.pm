# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package typemap_array_qualifiers;
use base qw(Exporter);
use base qw(DynaLoader);
package typemap_array_qualifiersc;
bootstrap typemap_array_qualifiers;
package typemap_array_qualifiers;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package typemap_array_qualifiers;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package typemap_array_qualifiers;

*func1a = *typemap_array_qualifiersc::func1a;
*func1b = *typemap_array_qualifiersc::func1b;
*func2a = *typemap_array_qualifiersc::func2a;
*func2b = *typemap_array_qualifiersc::func2b;
*func2c = *typemap_array_qualifiersc::func2c;
*func3a = *typemap_array_qualifiersc::func3a;
*func4a = *typemap_array_qualifiersc::func4a;

############# Class : typemap_array_qualifiers::SomeType ##############

package typemap_array_qualifiers::SomeType;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typemap_array_qualifiers );
%OWNER = ();
%ITERATORS = ();
*swig_a_get = *typemap_array_qualifiersc::SomeType_a_get;
*swig_a_set = *typemap_array_qualifiersc::SomeType_a_set;
sub new {
    my $pkg = shift;
    my $self = typemap_array_qualifiersc::new_SomeType(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typemap_array_qualifiersc::delete_SomeType($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package typemap_array_qualifiers;

1;
