# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package special_variable_macros;
use base qw(Exporter);
use base qw(DynaLoader);
package special_variable_macrosc;
bootstrap special_variable_macros;
package special_variable_macros;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package special_variable_macros;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package special_variable_macros;

*testFred = *special_variable_macrosc::testFred;
*testJack = *special_variable_macrosc::testJack;
*testJill = *special_variable_macrosc::testJill;
*testMary = *special_variable_macrosc::testMary;
*testJames = *special_variable_macrosc::testJames;
*testJim = *special_variable_macrosc::testJim;
*testJohn = *special_variable_macrosc::testJohn;

############# Class : special_variable_macros::Name ##############

package special_variable_macros::Name;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( special_variable_macros );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = special_variable_macrosc::new_Name(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        special_variable_macrosc::delete_Name($self);
        delete $OWNER{$self};
    }
}

*getName = *special_variable_macrosc::Name_getName;
*getNamePtr = *special_variable_macrosc::Name_getNamePtr;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : special_variable_macros::NameWrap ##############

package special_variable_macros::NameWrap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( special_variable_macros );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = special_variable_macrosc::new_NameWrap(@_);
    bless $self, $pkg if defined($self);
}

*getNamePtr = *special_variable_macrosc::NameWrap_getNamePtr;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        special_variable_macrosc::delete_NameWrap($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : special_variable_macros::PairIntBool ##############

package special_variable_macros::PairIntBool;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( special_variable_macros );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = special_variable_macrosc::new_PairIntBool(@_);
    bless $self, $pkg if defined($self);
}

*swig_first_get = *special_variable_macrosc::PairIntBool_first_get;
*swig_first_set = *special_variable_macrosc::PairIntBool_first_set;
*swig_second_get = *special_variable_macrosc::PairIntBool_second_get;
*swig_second_set = *special_variable_macrosc::PairIntBool_second_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        special_variable_macrosc::delete_PairIntBool($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : special_variable_macros::NewName ##############

package special_variable_macros::NewName;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( special_variable_macros );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = special_variable_macrosc::new_NewName(@_);
    bless $self, $pkg if defined($self);
}

*getStoredName = *special_variable_macrosc::NewName_getStoredName;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        special_variable_macrosc::delete_NewName($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package special_variable_macros;

1;
