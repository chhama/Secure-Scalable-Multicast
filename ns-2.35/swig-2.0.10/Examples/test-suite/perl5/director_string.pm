# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package director_string;
use base qw(Exporter);
use base qw(DynaLoader);
package director_stringc;
bootstrap director_string;
package director_string;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package director_string;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package director_string;


############# Class : director_string::A ##############

package director_string::A;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_string );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = director_stringc::new_A(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_stringc::delete_A($self);
        delete $OWNER{$self};
    }
}

*get_first = *director_stringc::A_get_first;
*get = *director_stringc::A_get;
*call_get_first = *director_stringc::A_call_get_first;
*call_get = *director_stringc::A_call_get;
*string_length = *director_stringc::A_string_length;
*swig_m_strings_get = *director_stringc::A_m_strings_get;
*swig_m_strings_set = *director_stringc::A_m_strings_set;
*process_text = *director_stringc::A_process_text;
*call_process_func = *director_stringc::A_call_process_func;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_string::StringVector ##############

package director_string::StringVector;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_string );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = director_stringc::new_StringVector(@_);
    bless $self, $pkg if defined($self);
}

*size = *director_stringc::StringVector_size;
*empty = *director_stringc::StringVector_empty;
*clear = *director_stringc::StringVector_clear;
*push = *director_stringc::StringVector_push;
*pop = *director_stringc::StringVector_pop;
*get = *director_stringc::StringVector_get;
*set = *director_stringc::StringVector_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_stringc::delete_StringVector($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package director_string;

1;
