# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package smart_pointer_inherit;
use base qw(Exporter);
use base qw(DynaLoader);
package smart_pointer_inheritc;
bootstrap smart_pointer_inherit;
package smart_pointer_inherit;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package smart_pointer_inherit;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package smart_pointer_inherit;


############# Class : smart_pointer_inherit::Base ##############

package smart_pointer_inherit::Base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_inherit );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_inheritc::delete_Base($self);
        delete $OWNER{$self};
    }
}

*value = *smart_pointer_inheritc::Base_value;
*value2 = *smart_pointer_inheritc::Base_value2;
*value3 = *smart_pointer_inheritc::Base_value3;
*valuehide = *smart_pointer_inheritc::Base_valuehide;
*swig_val_get = *smart_pointer_inheritc::Base_val_get;
*swig_val_set = *smart_pointer_inheritc::Base_val_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_inherit::Derived ##############

package smart_pointer_inherit::Derived;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_inherit::Base smart_pointer_inherit );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_inheritc::new_Derived(@_);
    bless $self, $pkg if defined($self);
}

*value = *smart_pointer_inheritc::Derived_value;
*value3 = *smart_pointer_inheritc::Derived_value3;
*valuehide = *smart_pointer_inheritc::Derived_valuehide;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_inheritc::delete_Derived($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_inherit::SmartBase ##############

package smart_pointer_inherit::SmartBase;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_inherit );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_inheritc::new_SmartBase(@_);
    bless $self, $pkg if defined($self);
}

*__deref__ = *smart_pointer_inheritc::SmartBase___deref__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_inheritc::delete_SmartBase($self);
        delete $OWNER{$self};
    }
}

*value = *smart_pointer_inheritc::SmartBase_value;
*value2 = *smart_pointer_inheritc::SmartBase_value2;
*value3 = *smart_pointer_inheritc::SmartBase_value3;
*valuehide = *smart_pointer_inheritc::SmartBase_valuehide;
*swig_val_get = *smart_pointer_inheritc::SmartBase_val_get;
*swig_val_set = *smart_pointer_inheritc::SmartBase_val_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_inherit::SmartDerived ##############

package smart_pointer_inherit::SmartDerived;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_inherit );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_inheritc::new_SmartDerived(@_);
    bless $self, $pkg if defined($self);
}

*__deref__ = *smart_pointer_inheritc::SmartDerived___deref__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_inheritc::delete_SmartDerived($self);
        delete $OWNER{$self};
    }
}

*value = *smart_pointer_inheritc::SmartDerived_value;
*value3 = *smart_pointer_inheritc::SmartDerived_value3;
*valuehide = *smart_pointer_inheritc::SmartDerived_valuehide;
*value2 = *smart_pointer_inheritc::SmartDerived_value2;
*swig_val_get = *smart_pointer_inheritc::SmartDerived_val_get;
*swig_val_set = *smart_pointer_inheritc::SmartDerived_val_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_inherit::ItkLevelSetNodeUS2 ##############

package smart_pointer_inherit::ItkLevelSetNodeUS2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_inherit );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_inheritc::new_ItkLevelSetNodeUS2(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_inheritc::delete_ItkLevelSetNodeUS2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_inherit::VectorLevelSetNodeUS2 ##############

package smart_pointer_inherit::VectorLevelSetNodeUS2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_inherit );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_inheritc::new_VectorLevelSetNodeUS2(@_);
    bless $self, $pkg if defined($self);
}

*size = *smart_pointer_inheritc::VectorLevelSetNodeUS2_size;
*empty = *smart_pointer_inheritc::VectorLevelSetNodeUS2_empty;
*clear = *smart_pointer_inheritc::VectorLevelSetNodeUS2_clear;
*push = *smart_pointer_inheritc::VectorLevelSetNodeUS2_push;
*pop = *smart_pointer_inheritc::VectorLevelSetNodeUS2_pop;
*get = *smart_pointer_inheritc::VectorLevelSetNodeUS2_get;
*set = *smart_pointer_inheritc::VectorLevelSetNodeUS2_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_inheritc::delete_VectorLevelSetNodeUS2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_inherit::ItkVectorContainerUILSNUS2 ##############

package smart_pointer_inherit::ItkVectorContainerUILSNUS2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_inherit::VectorLevelSetNodeUS2 smart_pointer_inherit );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_inheritc::new_ItkVectorContainerUILSNUS2(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_inheritc::delete_ItkVectorContainerUILSNUS2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_inherit::ItkVectorContainerUILSNUS2_Pointer ##############

package smart_pointer_inherit::ItkVectorContainerUILSNUS2_Pointer;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_inherit );
%OWNER = ();
%ITERATORS = ();
*__deref__ = *smart_pointer_inheritc::ItkVectorContainerUILSNUS2_Pointer___deref__;
sub new {
    my $pkg = shift;
    my $self = smart_pointer_inheritc::new_ItkVectorContainerUILSNUS2_Pointer(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_inheritc::delete_ItkVectorContainerUILSNUS2_Pointer($self);
        delete $OWNER{$self};
    }
}

*size = *smart_pointer_inheritc::ItkVectorContainerUILSNUS2_Pointer_size;
*empty = *smart_pointer_inheritc::ItkVectorContainerUILSNUS2_Pointer_empty;
*clear = *smart_pointer_inheritc::ItkVectorContainerUILSNUS2_Pointer_clear;
*push = *smart_pointer_inheritc::ItkVectorContainerUILSNUS2_Pointer_push;
*pop = *smart_pointer_inheritc::ItkVectorContainerUILSNUS2_Pointer_pop;
*get = *smart_pointer_inheritc::ItkVectorContainerUILSNUS2_Pointer_get;
*set = *smart_pointer_inheritc::ItkVectorContainerUILSNUS2_Pointer_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package smart_pointer_inherit;

1;
