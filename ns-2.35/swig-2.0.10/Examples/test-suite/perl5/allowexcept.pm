# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package allowexcept;
use base qw(Exporter);
use base qw(DynaLoader);
package allowexceptc;
bootstrap allowexcept;
package allowexcept;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package allowexcept;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package allowexcept;


############# Class : allowexcept::UVW ##############

package allowexcept::UVW;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( allowexcept );
%OWNER = ();
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : allowexcept::Bar ##############

package allowexcept::Bar;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( allowexcept );
%OWNER = ();
%ITERATORS = ();
*swig_member_variable_get = *allowexceptc::Bar_member_variable_get;
*swig_member_variable_set = *allowexceptc::Bar_member_variable_set;
*static_member_variable = *allowexceptc::Bar_static_member_variable;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : allowexcept::XYZ ##############

package allowexcept::XYZ;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( allowexcept );
%OWNER = ();
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : allowexcept::Foo ##############

package allowexcept::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( allowexcept );
%OWNER = ();
%ITERATORS = ();
*swig_member_variable_get = *allowexceptc::Foo_member_variable_get;
*swig_member_variable_set = *allowexceptc::Foo_member_variable_set;
*static_member_variable = *allowexceptc::Foo_static_member_variable;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package allowexcept;


my %__uvw_global_variable_hash;
tie %__uvw_global_variable_hash,"allowexcept::UVW", $allowexceptc::uvw_global_variable;
$uvw_global_variable= \%__uvw_global_variable_hash;
bless $uvw_global_variable, allowexcept::UVW;

my %__Bar_static_member_variable_hash;
tie %__Bar_static_member_variable_hash,"allowexcept::UVW", $allowexceptc::Bar_static_member_variable;
$Bar_static_member_variable= \%__Bar_static_member_variable_hash;
bless $Bar_static_member_variable, allowexcept::UVW;

my %__global_variable_hash;
tie %__global_variable_hash,"allowexcept::XYZ", $allowexceptc::global_variable;
$global_variable= \%__global_variable_hash;
bless $global_variable, allowexcept::XYZ;

my %__Foo_static_member_variable_hash;
tie %__Foo_static_member_variable_hash,"allowexcept::XYZ", $allowexceptc::Foo_static_member_variable;
$Foo_static_member_variable= \%__Foo_static_member_variable_hash;
bless $Foo_static_member_variable, allowexcept::XYZ;
1;
