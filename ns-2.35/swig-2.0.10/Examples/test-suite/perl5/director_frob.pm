# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package director_frob;
use base qw(Exporter);
use base qw(DynaLoader);
package director_frobc;
bootstrap director_frob;
package director_frob;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package director_frob;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package director_frob;


############# Class : director_frob::Alpha ##############

package director_frob::Alpha;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_frob );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_frobc::delete_Alpha($self);
        delete $OWNER{$self};
    }
}

*abs_method = *director_frobc::Alpha_abs_method;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_frob::Bravo ##############

package director_frob::Bravo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_frob::Alpha director_frob );
%OWNER = ();
%ITERATORS = ();
*abs_method = *director_frobc::Bravo_abs_method;
sub new {
    my $pkg = shift;
    my $self = director_frobc::new_Bravo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_frobc::delete_Bravo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_frob::Charlie ##############

package director_frob::Charlie;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_frob::Bravo director_frob );
%OWNER = ();
%ITERATORS = ();
*abs_method = *director_frobc::Charlie_abs_method;
sub new {
    my $pkg = shift;
    my $self = director_frobc::new_Charlie(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_frobc::delete_Charlie($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_frob::Delta ##############

package director_frob::Delta;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_frob::Charlie director_frob );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = director_frobc::new_Delta(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_frobc::delete_Delta($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_frob::Ops ##############

package director_frob::Ops;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_frob );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = director_frobc::new_Ops(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_frobc::delete_Ops($self);
        delete $OWNER{$self};
    }
}

*OpInt = *director_frobc::Ops_OpInt;
*OpIntStarStarConst = *director_frobc::Ops_OpIntStarStarConst;
*OpIntAmp = *director_frobc::Ops_OpIntAmp;
*OpIntStar = *director_frobc::Ops_OpIntStar;
*OpConstIntIntStar = *director_frobc::Ops_OpConstIntIntStar;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_frob::Prims ##############

package director_frob::Prims;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_frob );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_frobc::delete_Prims($self);
        delete $OWNER{$self};
    }
}

*ull = *director_frobc::Prims_ull;
*callull = *director_frobc::Prims_callull;
sub new {
    my $pkg = shift;
    my $self = director_frobc::new_Prims(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_frob::corePoint3d ##############

package director_frob::corePoint3d;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_frob );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = director_frobc::new_corePoint3d(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_frobc::delete_corePoint3d($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_frob::coreCallbacks_On3dEngineRedrawnData ##############

package director_frob::coreCallbacks_On3dEngineRedrawnData;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_frob );
%OWNER = ();
%ITERATORS = ();
*swig__eye_get = *director_frobc::coreCallbacks_On3dEngineRedrawnData__eye_get;
*swig__eye_set = *director_frobc::coreCallbacks_On3dEngineRedrawnData__eye_set;
*swig__at_get = *director_frobc::coreCallbacks_On3dEngineRedrawnData__at_get;
*swig__at_set = *director_frobc::coreCallbacks_On3dEngineRedrawnData__at_set;
sub new {
    my $pkg = shift;
    my $self = director_frobc::new_coreCallbacks_On3dEngineRedrawnData(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_frobc::delete_coreCallbacks_On3dEngineRedrawnData($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_frob::coreCallbacksOn3dEngineRedrawnData ##############

package director_frob::coreCallbacksOn3dEngineRedrawnData;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_frob );
%OWNER = ();
%ITERATORS = ();
*swig__eye_get = *director_frobc::coreCallbacksOn3dEngineRedrawnData__eye_get;
*swig__eye_set = *director_frobc::coreCallbacksOn3dEngineRedrawnData__eye_set;
*swig__at_get = *director_frobc::coreCallbacksOn3dEngineRedrawnData__at_get;
*swig__at_set = *director_frobc::coreCallbacksOn3dEngineRedrawnData__at_set;
sub new {
    my $pkg = shift;
    my $self = director_frobc::new_coreCallbacksOn3dEngineRedrawnData(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_frobc::delete_coreCallbacksOn3dEngineRedrawnData($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : director_frob::coreCallbacks ##############

package director_frob::coreCallbacks;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( director_frob );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = director_frobc::new_coreCallbacks(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        director_frobc::delete_coreCallbacks($self);
        delete $OWNER{$self};
    }
}

*On3dEngineRedrawn = *director_frobc::coreCallbacks_On3dEngineRedrawn;
*On3dEngineRedrawn2 = *director_frobc::coreCallbacks_On3dEngineRedrawn2;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package director_frob;

1;
