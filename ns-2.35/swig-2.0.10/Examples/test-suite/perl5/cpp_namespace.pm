# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package cpp_namespace;
use base qw(Exporter);
use base qw(DynaLoader);
package cpp_namespacec;
bootstrap cpp_namespace;
package cpp_namespace;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package cpp_namespace;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package cpp_namespace;

*fact = *cpp_namespacec::fact;
*weird = *cpp_namespacec::weird;
*do_method = *cpp_namespacec::do_method;
*do_method2 = *cpp_namespacec::do_method2;
*foo3 = *cpp_namespacec::foo3;
*do_method3 = *cpp_namespacec::do_method3;

############# Class : cpp_namespace::Test ##############

package cpp_namespace::Test;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( cpp_namespace );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = cpp_namespacec::new_Test(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        cpp_namespacec::delete_Test($self);
        delete $OWNER{$self};
    }
}

*method = *cpp_namespacec::Test_method;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : cpp_namespace::Test2 ##############

package cpp_namespace::Test2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( cpp_namespace );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        cpp_namespacec::delete_Test2($self);
        delete $OWNER{$self};
    }
}

*method = *cpp_namespacec::Test2_method;
sub new {
    my $pkg = shift;
    my $self = cpp_namespacec::new_Test2(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : cpp_namespace::Test3 ##############

package cpp_namespace::Test3;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( cpp_namespace::Test2 cpp_namespace );
%OWNER = ();
%ITERATORS = ();
*method = *cpp_namespacec::Test3_method;
sub new {
    my $pkg = shift;
    my $self = cpp_namespacec::new_Test3(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        cpp_namespacec::delete_Test3($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : cpp_namespace::Test4 ##############

package cpp_namespace::Test4;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( cpp_namespace::Test3 cpp_namespace );
%OWNER = ();
%ITERATORS = ();
*method = *cpp_namespacec::Test4_method;
sub new {
    my $pkg = shift;
    my $self = cpp_namespacec::new_Test4(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        cpp_namespacec::delete_Test4($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : cpp_namespace::Test5 ##############

package cpp_namespace::Test5;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( cpp_namespace::Test3 cpp_namespace );
%OWNER = ();
%ITERATORS = ();
*method = *cpp_namespacec::Test5_method;
sub new {
    my $pkg = shift;
    my $self = cpp_namespacec::new_Test5(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        cpp_namespacec::delete_Test5($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package cpp_namespace;

*Foo = *cpp_namespacec::Foo;
1;
