# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package valuewrapper_opaque;
use base qw(Exporter);
use base qw(DynaLoader);
package valuewrapper_opaquec;
bootstrap valuewrapper_opaque;
package valuewrapper_opaque;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package valuewrapper_opaque;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package valuewrapper_opaque;

*getKlass = *valuewrapper_opaquec::getKlass;
*getA = *valuewrapper_opaquec::getA;
*getC = *valuewrapper_opaquec::getC;
*getInt = *valuewrapper_opaquec::getInt;
*sgetA = *valuewrapper_opaquec::sgetA;
*sgetKlass = *valuewrapper_opaquec::sgetKlass;
*getPtrA = *valuewrapper_opaquec::getPtrA;
*getB = *valuewrapper_opaquec::getB;
*getD = *valuewrapper_opaquec::getD;

############# Class : valuewrapper_opaque::A ##############

package valuewrapper_opaque::A;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( valuewrapper_opaque );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = valuewrapper_opaquec::new_A(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        valuewrapper_opaquec::delete_A($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : valuewrapper_opaque::D ##############

package valuewrapper_opaque::D;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( valuewrapper_opaque );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = valuewrapper_opaquec::new_D(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        valuewrapper_opaquec::delete_D($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : valuewrapper_opaque::Klass ##############

package valuewrapper_opaque::Klass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( valuewrapper_opaque );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = valuewrapper_opaquec::new_Klass(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        valuewrapper_opaquec::delete_Klass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : valuewrapper_opaque::AA ##############

package valuewrapper_opaque::AA;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( valuewrapper_opaque );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = valuewrapper_opaquec::new_AA(@_);
    bless $self, $pkg if defined($self);
}

*swig_innerObj_get = *valuewrapper_opaquec::AA_innerObj_get;
*swig_innerObj_set = *valuewrapper_opaquec::AA_innerObj_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        valuewrapper_opaquec::delete_AA($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : valuewrapper_opaque::Quux ##############

package valuewrapper_opaque::Quux;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( valuewrapper_opaque );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = valuewrapper_opaquec::new_Quux(@_);
    bless $self, $pkg if defined($self);
}

*method = *valuewrapper_opaquec::Quux_method;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        valuewrapper_opaquec::delete_Quux($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package valuewrapper_opaque;

1;
