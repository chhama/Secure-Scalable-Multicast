# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package cpp_enum;
use base qw(Exporter);
use base qw(DynaLoader);
package cpp_enumc;
bootstrap cpp_enum;
package cpp_enum;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package cpp_enum;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package cpp_enum;


############# Class : cpp_enum::StructWithEnums ##############

package cpp_enum::StructWithEnums;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( cpp_enum );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = cpp_enumc::new_StructWithEnums(@_);
    bless $self, $pkg if defined($self);
}

*swig_some_enum_get = *cpp_enumc::StructWithEnums_some_enum_get;
*swig_some_enum_set = *cpp_enumc::StructWithEnums_some_enum_set;
*enum_test1 = *cpp_enumc::StructWithEnums_enum_test1;
*enum_test2 = *cpp_enumc::StructWithEnums_enum_test2;
*enum_test3 = *cpp_enumc::StructWithEnums_enum_test3;
*enum_test4 = *cpp_enumc::StructWithEnums_enum_test4;
*enum_test5 = *cpp_enumc::StructWithEnums_enum_test5;
*enum_test6 = *cpp_enumc::StructWithEnums_enum_test6;
*enum_test7 = *cpp_enumc::StructWithEnums_enum_test7;
*enum_test8 = *cpp_enumc::StructWithEnums_enum_test8;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        cpp_enumc::delete_StructWithEnums($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : cpp_enum::Foo ##############

package cpp_enum::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( cpp_enum );
%OWNER = ();
%ITERATORS = ();
*Hi = *cpp_enumc::Foo_Hi;
*Hello = *cpp_enumc::Foo_Hello;
*swig_hola_get = *cpp_enumc::Foo_hola_get;
*swig_hola_set = *cpp_enumc::Foo_hola_set;
sub new {
    my $pkg = shift;
    my $self = cpp_enumc::new_Foo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        cpp_enumc::delete_Foo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package cpp_enum;

*ENUM_ONE = *cpp_enumc::ENUM_ONE;
*ENUM_TWO = *cpp_enumc::ENUM_TWO;
*Hi = *cpp_enumc::Hi;
*Hello = *cpp_enumc::Hello;
*hi = *cpp_enumc::hi;
*PLAY = *cpp_enumc::PLAY;
*STOP = *cpp_enumc::STOP;
1;
