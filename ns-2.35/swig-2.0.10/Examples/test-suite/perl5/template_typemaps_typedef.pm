# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package template_typemaps_typedef;
use base qw(Exporter);
use base qw(DynaLoader);
package template_typemaps_typedefc;
bootstrap template_typemaps_typedef;
package template_typemaps_typedef;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package template_typemaps_typedef;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package template_typemaps_typedef;

*typedef_test1 = *template_typemaps_typedefc::typedef_test1;
*typedef_test2 = *template_typemaps_typedefc::typedef_test2;
*typedef_test3 = *template_typemaps_typedefc::typedef_test3;
*typedef_test4 = *template_typemaps_typedefc::typedef_test4;
*typedef_test5 = *template_typemaps_typedefc::typedef_test5;
*typedef_test6 = *template_typemaps_typedefc::typedef_test6;

############# Class : template_typemaps_typedef::A ##############

package template_typemaps_typedef::A;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_typemaps_typedef );
%OWNER = ();
%ITERATORS = ();
*swig_val_get = *template_typemaps_typedefc::A_val_get;
*swig_val_set = *template_typemaps_typedefc::A_val_set;
sub new {
    my $pkg = shift;
    my $self = template_typemaps_typedefc::new_A(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_typemaps_typedefc::delete_A($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_typemaps_typedef::PairIntA ##############

package template_typemaps_typedef::PairIntA;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_typemaps_typedef );
%OWNER = ();
%ITERATORS = ();
*swig_first_get = *template_typemaps_typedefc::PairIntA_first_get;
*swig_first_set = *template_typemaps_typedefc::PairIntA_first_set;
*swig_second_get = *template_typemaps_typedefc::PairIntA_second_get;
*swig_second_set = *template_typemaps_typedefc::PairIntA_second_set;
sub new {
    my $pkg = shift;
    my $self = template_typemaps_typedefc::new_PairIntA(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_typemaps_typedefc::delete_PairIntA($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_typemaps_typedef::MultimapIntA ##############

package template_typemaps_typedef::MultimapIntA;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_typemaps_typedef );
%OWNER = ();
%ITERATORS = ();
*typemap_test = *template_typemaps_typedefc::MultimapIntA_typemap_test;
*make_dummy_pair = *template_typemaps_typedefc::MultimapIntA_make_dummy_pair;
sub new {
    my $pkg = shift;
    my $self = template_typemaps_typedefc::new_MultimapIntA(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_typemaps_typedefc::delete_MultimapIntA($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_typemaps_typedef::PairAInt ##############

package template_typemaps_typedef::PairAInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_typemaps_typedef );
%OWNER = ();
%ITERATORS = ();
*swig_first_get = *template_typemaps_typedefc::PairAInt_first_get;
*swig_first_set = *template_typemaps_typedefc::PairAInt_first_set;
*swig_second_get = *template_typemaps_typedefc::PairAInt_second_get;
*swig_second_set = *template_typemaps_typedefc::PairAInt_second_set;
sub new {
    my $pkg = shift;
    my $self = template_typemaps_typedefc::new_PairAInt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_typemaps_typedefc::delete_PairAInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_typemaps_typedef::MultimapAInt ##############

package template_typemaps_typedef::MultimapAInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_typemaps_typedef );
%OWNER = ();
%ITERATORS = ();
*typemap_test = *template_typemaps_typedefc::MultimapAInt_typemap_test;
*make_dummy_pair = *template_typemaps_typedefc::MultimapAInt_make_dummy_pair;
sub new {
    my $pkg = shift;
    my $self = template_typemaps_typedefc::new_MultimapAInt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_typemaps_typedefc::delete_MultimapAInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package template_typemaps_typedef;

1;
