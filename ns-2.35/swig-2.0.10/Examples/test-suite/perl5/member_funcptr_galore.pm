# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package member_funcptr_galore;
use base qw(Exporter);
use base qw(DynaLoader);
package member_funcptr_galorec;
bootstrap member_funcptr_galore;
package member_funcptr_galore;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package member_funcptr_galore;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package member_funcptr_galore;

*do_op = *member_funcptr_galorec::do_op;
*areapt = *member_funcptr_galorec::areapt;
*abcpt = *member_funcptr_galorec::abcpt;
*call1 = *member_funcptr_galorec::call1;
*call2 = *member_funcptr_galorec::call2;
*call3 = *member_funcptr_galorec::call3;
*unreal1 = *member_funcptr_galorec::unreal1;
*unreal2 = *member_funcptr_galorec::unreal2;

############# Class : member_funcptr_galore::Funktions ##############

package member_funcptr_galore::Funktions;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( member_funcptr_galore );
%OWNER = ();
%ITERATORS = ();
*addByValue = *member_funcptr_galorec::Funktions_addByValue;
*addByPointer = *member_funcptr_galorec::Funktions_addByPointer;
*addByReference = *member_funcptr_galorec::Funktions_addByReference;
sub new {
    my $pkg = shift;
    my $self = member_funcptr_galorec::new_Funktions(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        member_funcptr_galorec::delete_Funktions($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : member_funcptr_galore::Shape ##############

package member_funcptr_galore::Shape;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( member_funcptr_galore );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *member_funcptr_galorec::Shape_x_get;
*swig_x_set = *member_funcptr_galorec::Shape_x_set;
*swig_y_get = *member_funcptr_galorec::Shape_y_get;
*swig_y_set = *member_funcptr_galorec::Shape_y_set;
*swig_z_get = *member_funcptr_galorec::Shape_z_get;
*swig_z_set = *member_funcptr_galorec::Shape_z_set;
*move = *member_funcptr_galorec::Shape_move;
*area = *member_funcptr_galorec::Shape_area;
*abc = *member_funcptr_galorec::Shape_abc;
sub new {
    my $pkg = shift;
    my $self = member_funcptr_galorec::new_Shape(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        member_funcptr_galorec::delete_Shape($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package member_funcptr_galore;

*areavar = *member_funcptr_galorec::areavar;
*abcvar = *member_funcptr_galorec::abcvar;
*AREAPT = *member_funcptr_galorec::AREAPT;
*PERIMPT = *member_funcptr_galorec::PERIMPT;
*NULLPT = *member_funcptr_galorec::NULLPT;
*ADD_BY_VALUE = *member_funcptr_galorec::ADD_BY_VALUE;
*ADD_BY_POINTER = *member_funcptr_galorec::ADD_BY_POINTER;
*ADD_BY_REFERENCE = *member_funcptr_galorec::ADD_BY_REFERENCE;
1;
