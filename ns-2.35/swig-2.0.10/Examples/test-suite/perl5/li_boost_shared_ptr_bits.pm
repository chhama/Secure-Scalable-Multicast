# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package li_boost_shared_ptr_bits;
use base qw(Exporter);
use base qw(DynaLoader);
package li_boost_shared_ptr_bitsc;
bootstrap li_boost_shared_ptr_bits;
package li_boost_shared_ptr_bits;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package li_boost_shared_ptr_bits;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package li_boost_shared_ptr_bits;

*boing = *li_boost_shared_ptr_bitsc::boing;
*sum = *li_boost_shared_ptr_bitsc::sum;

############# Class : li_boost_shared_ptr_bits::NonDynamic ##############

package li_boost_shared_ptr_bits::NonDynamic;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_boost_shared_ptr_bits );
%OWNER = ();
%ITERATORS = ();
*swig_i_get = *li_boost_shared_ptr_bitsc::NonDynamic_i_get;
*swig_i_set = *li_boost_shared_ptr_bitsc::NonDynamic_i_set;
sub new {
    my $pkg = shift;
    my $self = li_boost_shared_ptr_bitsc::new_NonDynamic(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_boost_shared_ptr_bitsc::delete_NonDynamic($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_boost_shared_ptr_bits::IntHolder ##############

package li_boost_shared_ptr_bits::IntHolder;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_boost_shared_ptr_bits );
%OWNER = ();
%ITERATORS = ();
*swig_val_get = *li_boost_shared_ptr_bitsc::IntHolder_val_get;
*swig_val_set = *li_boost_shared_ptr_bitsc::IntHolder_val_set;
sub new {
    my $pkg = shift;
    my $self = li_boost_shared_ptr_bitsc::new_IntHolder(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_boost_shared_ptr_bitsc::delete_IntHolder($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_boost_shared_ptr_bits::VectorIntHolder ##############

package li_boost_shared_ptr_bits::VectorIntHolder;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_boost_shared_ptr_bits );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = li_boost_shared_ptr_bitsc::new_VectorIntHolder(@_);
    bless $self, $pkg if defined($self);
}

*size = *li_boost_shared_ptr_bitsc::VectorIntHolder_size;
*empty = *li_boost_shared_ptr_bitsc::VectorIntHolder_empty;
*clear = *li_boost_shared_ptr_bitsc::VectorIntHolder_clear;
*push = *li_boost_shared_ptr_bitsc::VectorIntHolder_push;
*pop = *li_boost_shared_ptr_bitsc::VectorIntHolder_pop;
*get = *li_boost_shared_ptr_bitsc::VectorIntHolder_get;
*set = *li_boost_shared_ptr_bitsc::VectorIntHolder_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_boost_shared_ptr_bitsc::delete_VectorIntHolder($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_boost_shared_ptr_bits::HiddenDestructor ##############

package li_boost_shared_ptr_bits::HiddenDestructor;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_boost_shared_ptr_bits );
%OWNER = ();
*create = *li_boost_shared_ptr_bitsc::HiddenDestructor_create;
*doit = *li_boost_shared_ptr_bitsc::HiddenDestructor_doit;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package li_boost_shared_ptr_bits;

1;
