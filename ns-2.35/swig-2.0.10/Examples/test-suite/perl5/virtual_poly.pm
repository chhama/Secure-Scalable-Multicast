# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package virtual_poly;
use base qw(Exporter);
use base qw(DynaLoader);
package virtual_polyc;
bootstrap virtual_poly;
package virtual_poly;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package virtual_poly;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package virtual_poly;

*incr = *virtual_polyc::incr;

############# Class : virtual_poly::NNumber ##############

package virtual_poly::NNumber;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( virtual_poly );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        virtual_polyc::delete_NNumber($self);
        delete $OWNER{$self};
    }
}

*copy = *virtual_polyc::NNumber_copy;
*ref_this = *virtual_polyc::NNumber_ref_this;
*nnumber = *virtual_polyc::NNumber_nnumber;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : virtual_poly::NInt ##############

package virtual_poly::NInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( virtual_poly::NNumber virtual_poly );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = virtual_polyc::new_NInt(@_);
    bless $self, $pkg if defined($self);
}

*get = *virtual_polyc::NInt_get;
*copy = *virtual_polyc::NInt_copy;
*ref_this = *virtual_polyc::NInt_ref_this;
*narrow = *virtual_polyc::NInt_narrow;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        virtual_polyc::delete_NInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : virtual_poly::NDouble ##############

package virtual_poly::NDouble;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( virtual_poly::NNumber virtual_poly );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = virtual_polyc::new_NDouble(@_);
    bless $self, $pkg if defined($self);
}

*get = *virtual_polyc::NDouble_get;
*copy = *virtual_polyc::NDouble_copy;
*ref_this = *virtual_polyc::NDouble_ref_this;
*narrow = *virtual_polyc::NDouble_narrow;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        virtual_polyc::delete_NDouble($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : virtual_poly::BaseInt ##############

package virtual_poly::BaseInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( virtual_poly );
%OWNER = ();
%ITERATORS = ();
*swig_t_get = *virtual_polyc::BaseInt_t_get;
*swig_t_set = *virtual_polyc::BaseInt_t_set;
*method = *virtual_polyc::BaseInt_method;
*foxy = *virtual_polyc::BaseInt_foxy;
*afunction = *virtual_polyc::BaseInt_afunction;
*defaultargs = *virtual_polyc::BaseInt_defaultargs;
*StaticHidden = *virtual_polyc::BaseInt_StaticHidden;
*AmIAmINotVirtual = *virtual_polyc::BaseInt_AmIAmINotVirtual;
*NotVirtual = *virtual_polyc::BaseInt_NotVirtual;
*covariant = *virtual_polyc::BaseInt_covariant;
*covariant2 = *virtual_polyc::BaseInt_covariant2;
*covariant3 = *virtual_polyc::BaseInt_covariant3;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        virtual_polyc::delete_BaseInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : virtual_poly::DerivedInt ##############

package virtual_poly::DerivedInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( virtual_poly::BaseInt virtual_poly );
%OWNER = ();
%ITERATORS = ();
*method = *virtual_polyc::DerivedInt_method;
*foxy = *virtual_polyc::DerivedInt_foxy;
*afunction = *virtual_polyc::DerivedInt_afunction;
*defaultargs = *virtual_polyc::DerivedInt_defaultargs;
*AmIAmINotVirtual = *virtual_polyc::DerivedInt_AmIAmINotVirtual;
*NotVirtual = *virtual_polyc::DerivedInt_NotVirtual;
*covariant = *virtual_polyc::DerivedInt_covariant;
*covariant2 = *virtual_polyc::DerivedInt_covariant2;
*covariant3 = *virtual_polyc::DerivedInt_covariant3;
*covariant4 = *virtual_polyc::DerivedInt_covariant4;
*IsVirtual = *virtual_polyc::DerivedInt_IsVirtual;
sub new {
    my $pkg = shift;
    my $self = virtual_polyc::new_DerivedInt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        virtual_polyc::delete_DerivedInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : virtual_poly::BottomInt ##############

package virtual_poly::BottomInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( virtual_poly::DerivedInt virtual_poly );
%OWNER = ();
%ITERATORS = ();
*method = *virtual_polyc::BottomInt_method;
*StaticHidden = *virtual_polyc::BottomInt_StaticHidden;
*AmIAmINotVirtual = *virtual_polyc::BottomInt_AmIAmINotVirtual;
*NotVirtual = *virtual_polyc::BottomInt_NotVirtual;
*swig_funcptr_get = *virtual_polyc::BottomInt_funcptr_get;
*swig_funcptr_set = *virtual_polyc::BottomInt_funcptr_set;
*covariant = *virtual_polyc::BottomInt_covariant;
*covariant2 = *virtual_polyc::BottomInt_covariant2;
*covariant3 = *virtual_polyc::BottomInt_covariant3;
*covariant4 = *virtual_polyc::BottomInt_covariant4;
*IsVirtual = *virtual_polyc::BottomInt_IsVirtual;
sub new {
    my $pkg = shift;
    my $self = virtual_polyc::new_BottomInt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        virtual_polyc::delete_BottomInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package virtual_poly;

1;
