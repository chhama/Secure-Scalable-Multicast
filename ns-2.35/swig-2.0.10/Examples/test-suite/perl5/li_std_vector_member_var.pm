# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package li_std_vector_member_var;
use base qw(Exporter);
use base qw(DynaLoader);
package li_std_vector_member_varc;
bootstrap li_std_vector_member_var;
package li_std_vector_member_var;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package li_std_vector_member_var;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package li_std_vector_member_var;


############# Class : li_std_vector_member_var::vectorDbl ##############

package li_std_vector_member_var::vectorDbl;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_std_vector_member_var );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = li_std_vector_member_varc::new_vectorDbl(@_);
    bless $self, $pkg if defined($self);
}

*size = *li_std_vector_member_varc::vectorDbl_size;
*empty = *li_std_vector_member_varc::vectorDbl_empty;
*clear = *li_std_vector_member_varc::vectorDbl_clear;
*push = *li_std_vector_member_varc::vectorDbl_push;
*pop = *li_std_vector_member_varc::vectorDbl_pop;
*get = *li_std_vector_member_varc::vectorDbl_get;
*set = *li_std_vector_member_varc::vectorDbl_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_std_vector_member_varc::delete_vectorDbl($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_std_vector_member_var::Test ##############

package li_std_vector_member_var::Test;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_std_vector_member_var );
%OWNER = ();
%ITERATORS = ();
*swig_v_get = *li_std_vector_member_varc::Test_v_get;
*swig_v_set = *li_std_vector_member_varc::Test_v_set;
*swig_x_get = *li_std_vector_member_varc::Test_x_get;
*swig_x_set = *li_std_vector_member_varc::Test_x_set;
sub new {
    my $pkg = shift;
    my $self = li_std_vector_member_varc::new_Test(@_);
    bless $self, $pkg if defined($self);
}

*f = *li_std_vector_member_varc::Test_f;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_std_vector_member_varc::delete_Test($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_std_vector_member_var::S ##############

package li_std_vector_member_var::S;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_std_vector_member_var );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *li_std_vector_member_varc::S_x_get;
*swig_x_set = *li_std_vector_member_varc::S_x_set;
sub new {
    my $pkg = shift;
    my $self = li_std_vector_member_varc::new_S(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_std_vector_member_varc::delete_S($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_std_vector_member_var::T ##############

package li_std_vector_member_var::T;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_std_vector_member_var );
%OWNER = ();
%ITERATORS = ();
*swig_start_t_get = *li_std_vector_member_varc::T_start_t_get;
*swig_start_t_set = *li_std_vector_member_varc::T_start_t_set;
*swig_length_get = *li_std_vector_member_varc::T_length_get;
*swig_length_set = *li_std_vector_member_varc::T_length_set;
sub new {
    my $pkg = shift;
    my $self = li_std_vector_member_varc::new_T(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_std_vector_member_varc::delete_T($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package li_std_vector_member_var;

1;
