# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package template_default_class_parms_typedef;
use base qw(Exporter);
use base qw(DynaLoader);
package template_default_class_parms_typedefc;
bootstrap template_default_class_parms_typedef;
package template_default_class_parms_typedef;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package template_default_class_parms_typedef;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package template_default_class_parms_typedef;


############# Class : template_default_class_parms_typedef::SomeType ##############

package template_default_class_parms_typedef::SomeType;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_default_class_parms_typedef );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = template_default_class_parms_typedefc::new_SomeType(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_default_class_parms_typedefc::delete_SomeType($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_default_class_parms_typedef::AnotherType ##############

package template_default_class_parms_typedef::AnotherType;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_default_class_parms_typedef );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = template_default_class_parms_typedefc::new_AnotherType(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_default_class_parms_typedefc::delete_AnotherType($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_default_class_parms_typedef::DefaultBar ##############

package template_default_class_parms_typedef::DefaultBar;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_default_class_parms_typedef );
%OWNER = ();
%ITERATORS = ();
*swig_CType_get = *template_default_class_parms_typedefc::DefaultBar_CType_get;
*swig_CType_set = *template_default_class_parms_typedefc::DefaultBar_CType_set;
*swig_DType_get = *template_default_class_parms_typedefc::DefaultBar_DType_get;
*swig_DType_set = *template_default_class_parms_typedefc::DefaultBar_DType_set;
*swig_EType_get = *template_default_class_parms_typedefc::DefaultBar_EType_get;
*swig_EType_set = *template_default_class_parms_typedefc::DefaultBar_EType_set;
*method = *template_default_class_parms_typedefc::DefaultBar_method;
*method_1 = *template_default_class_parms_typedefc::DefaultBar_method_1;
*method_2 = *template_default_class_parms_typedefc::DefaultBar_method_2;
sub new {
    my $pkg = shift;
    my $self = template_default_class_parms_typedefc::new_DefaultBar(@_);
    bless $self, $pkg if defined($self);
}

*method_3 = *template_default_class_parms_typedefc::DefaultBar_method_3;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_default_class_parms_typedefc::delete_DefaultBar($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_default_class_parms_typedef::DefaultFoo ##############

package template_default_class_parms_typedef::DefaultFoo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_default_class_parms_typedef );
%OWNER = ();
%ITERATORS = ();
*swig_TType_get = *template_default_class_parms_typedefc::DefaultFoo_TType_get;
*swig_TType_set = *template_default_class_parms_typedefc::DefaultFoo_TType_set;
*method = *template_default_class_parms_typedefc::DefaultFoo_method;
*method_A = *template_default_class_parms_typedefc::DefaultFoo_method_A;
*method_B = *template_default_class_parms_typedefc::DefaultFoo_method_B;
sub new {
    my $pkg = shift;
    my $self = template_default_class_parms_typedefc::new_DefaultFoo(@_);
    bless $self, $pkg if defined($self);
}

*method_C = *template_default_class_parms_typedefc::DefaultFoo_method_C;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_default_class_parms_typedefc::delete_DefaultFoo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_default_class_parms_typedef::BarAnotherTypeBool ##############

package template_default_class_parms_typedef::BarAnotherTypeBool;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_default_class_parms_typedef );
%OWNER = ();
%ITERATORS = ();
*swig_CType_get = *template_default_class_parms_typedefc::BarAnotherTypeBool_CType_get;
*swig_CType_set = *template_default_class_parms_typedefc::BarAnotherTypeBool_CType_set;
*swig_DType_get = *template_default_class_parms_typedefc::BarAnotherTypeBool_DType_get;
*swig_DType_set = *template_default_class_parms_typedefc::BarAnotherTypeBool_DType_set;
*swig_EType_get = *template_default_class_parms_typedefc::BarAnotherTypeBool_EType_get;
*swig_EType_set = *template_default_class_parms_typedefc::BarAnotherTypeBool_EType_set;
*method = *template_default_class_parms_typedefc::BarAnotherTypeBool_method;
*method_1 = *template_default_class_parms_typedefc::BarAnotherTypeBool_method_1;
*method_2 = *template_default_class_parms_typedefc::BarAnotherTypeBool_method_2;
sub new {
    my $pkg = shift;
    my $self = template_default_class_parms_typedefc::new_BarAnotherTypeBool(@_);
    bless $self, $pkg if defined($self);
}

*method_3 = *template_default_class_parms_typedefc::BarAnotherTypeBool_method_3;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_default_class_parms_typedefc::delete_BarAnotherTypeBool($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_default_class_parms_typedef::FooAnotherType ##############

package template_default_class_parms_typedef::FooAnotherType;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_default_class_parms_typedef );
%OWNER = ();
%ITERATORS = ();
*swig_TType_get = *template_default_class_parms_typedefc::FooAnotherType_TType_get;
*swig_TType_set = *template_default_class_parms_typedefc::FooAnotherType_TType_set;
*method = *template_default_class_parms_typedefc::FooAnotherType_method;
*method_A = *template_default_class_parms_typedefc::FooAnotherType_method_A;
*method_B = *template_default_class_parms_typedefc::FooAnotherType_method_B;
sub new {
    my $pkg = shift;
    my $self = template_default_class_parms_typedefc::new_FooAnotherType(@_);
    bless $self, $pkg if defined($self);
}

*method_C = *template_default_class_parms_typedefc::FooAnotherType_method_C;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_default_class_parms_typedefc::delete_FooAnotherType($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_default_class_parms_typedef::UsesBarDouble ##############

package template_default_class_parms_typedef::UsesBarDouble;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_default_class_parms_typedef );
%OWNER = ();
%ITERATORS = ();
*use_A = *template_default_class_parms_typedefc::UsesBarDouble_use_A;
*use_B = *template_default_class_parms_typedefc::UsesBarDouble_use_B;
*use_C = *template_default_class_parms_typedefc::UsesBarDouble_use_C;
*use_D = *template_default_class_parms_typedefc::UsesBarDouble_use_D;
sub new {
    my $pkg = shift;
    my $self = template_default_class_parms_typedefc::new_UsesBarDouble(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_default_class_parms_typedefc::delete_UsesBarDouble($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package template_default_class_parms_typedef;

1;
