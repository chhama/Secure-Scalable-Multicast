# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package smart_pointer_templatemethods;
use base qw(Exporter);
use base qw(DynaLoader);
package smart_pointer_templatemethodsc;
bootstrap smart_pointer_templatemethods;
package smart_pointer_templatemethods;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package smart_pointer_templatemethods;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package smart_pointer_templatemethods;


############# Class : smart_pointer_templatemethods::InterfaceId ##############

package smart_pointer_templatemethods::InterfaceId;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_templatemethods );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_templatemethodsc::new_InterfaceId(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_templatemethodsc::delete_InterfaceId($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_templatemethods::Objct ##############

package smart_pointer_templatemethods::Objct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_templatemethods );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_templatemethodsc::new_Objct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_templatemethodsc::delete_Objct($self);
        delete $OWNER{$self};
    }
}

*DisposeObjct = *smart_pointer_templatemethodsc::Objct_DisposeObjct;
*QueryInterfaceObjct = *smart_pointer_templatemethodsc::Objct_QueryInterfaceObjct;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_templatemethods::PtrObjct ##############

package smart_pointer_templatemethods::PtrObjct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_templatemethods );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_templatemethodsc::new_PtrObjct(@_);
    bless $self, $pkg if defined($self);
}

*__deref__ = *smart_pointer_templatemethodsc::PtrObjct___deref__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_templatemethodsc::delete_PtrObjct($self);
        delete $OWNER{$self};
    }
}

*DisposeObjct = *smart_pointer_templatemethodsc::PtrObjct_DisposeObjct;
*QueryInterfaceObjct = *smart_pointer_templatemethodsc::PtrObjct_QueryInterfaceObjct;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_templatemethods::PtrInt ##############

package smart_pointer_templatemethods::PtrInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_templatemethods );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_templatemethodsc::new_PtrInt(@_);
    bless $self, $pkg if defined($self);
}

*__deref__ = *smart_pointer_templatemethodsc::PtrInt___deref__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_templatemethodsc::delete_PtrInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_templatemethods::ObjektInt ##############

package smart_pointer_templatemethods::ObjektInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_templatemethods );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_templatemethodsc::new_ObjektInt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_templatemethodsc::delete_ObjektInt($self);
        delete $OWNER{$self};
    }
}

*QueryInterface = *smart_pointer_templatemethodsc::ObjektInt_QueryInterface;
*DisposeObjekt = *smart_pointer_templatemethodsc::ObjektInt_DisposeObjekt;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_templatemethods::PtrObjektInt ##############

package smart_pointer_templatemethods::PtrObjektInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_templatemethods );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_templatemethodsc::new_PtrObjektInt(@_);
    bless $self, $pkg if defined($self);
}

*__deref__ = *smart_pointer_templatemethodsc::PtrObjektInt___deref__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_templatemethodsc::delete_PtrObjektInt($self);
        delete $OWNER{$self};
    }
}

*QueryInterface = *smart_pointer_templatemethodsc::PtrObjektInt_QueryInterface;
*DisposeObjekt = *smart_pointer_templatemethodsc::PtrObjektInt_DisposeObjekt;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package smart_pointer_templatemethods;

1;
