# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package smart_pointer_const_overload;
use base qw(Exporter);
use base qw(DynaLoader);
package smart_pointer_const_overloadc;
bootstrap smart_pointer_const_overload;
package smart_pointer_const_overload;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package smart_pointer_const_overload;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package smart_pointer_const_overload;

*new_int = *smart_pointer_const_overloadc::new_int;
*get_int = *smart_pointer_const_overloadc::get_int;
*set_int = *smart_pointer_const_overloadc::set_int;
*delete_int = *smart_pointer_const_overloadc::delete_int;

############# Class : smart_pointer_const_overload::Foo ##############

package smart_pointer_const_overload::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_const_overload );
%OWNER = ();
%ITERATORS = ();
*swig_x_get = *smart_pointer_const_overloadc::Foo_x_get;
*swig_x_set = *smart_pointer_const_overloadc::Foo_x_set;
*swig_xp_get = *smart_pointer_const_overloadc::Foo_xp_get;
*swig_xp_set = *smart_pointer_const_overloadc::Foo_xp_set;
*swig_y_get = *smart_pointer_const_overloadc::Foo_y_get;
*swig_y_set = *smart_pointer_const_overloadc::Foo_y_set;
*swig_yp_get = *smart_pointer_const_overloadc::Foo_yp_get;
*swig_yp_set = *smart_pointer_const_overloadc::Foo_yp_set;
*swig_access_get = *smart_pointer_const_overloadc::Foo_access_get;
*swig_access_set = *smart_pointer_const_overloadc::Foo_access_set;
sub new {
    my $pkg = shift;
    my $self = smart_pointer_const_overloadc::new_Foo(@_);
    bless $self, $pkg if defined($self);
}

*getx = *smart_pointer_const_overloadc::Foo_getx;
*setx = *smart_pointer_const_overloadc::Foo_setx;
*stat = *smart_pointer_const_overloadc::Foo_stat;
*getx2 = *smart_pointer_const_overloadc::Foo_getx2;
*setx2 = *smart_pointer_const_overloadc::Foo_setx2;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_const_overloadc::delete_Foo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_const_overload::Bar ##############

package smart_pointer_const_overload::Bar;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_const_overload );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_const_overloadc::new_Bar(@_);
    bless $self, $pkg if defined($self);
}

*__deref__ = *smart_pointer_const_overloadc::Bar___deref__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_const_overloadc::delete_Bar($self);
        delete $OWNER{$self};
    }
}

*swig_x_get = *smart_pointer_const_overloadc::Bar_x_get;
*swig_x_set = *smart_pointer_const_overloadc::Bar_x_set;
*swig_xp_get = *smart_pointer_const_overloadc::Bar_xp_get;
*swig_xp_set = *smart_pointer_const_overloadc::Bar_xp_set;
*swig_y_get = *smart_pointer_const_overloadc::Bar_y_get;
*swig_y_set = *smart_pointer_const_overloadc::Bar_y_set;
*swig_yp_get = *smart_pointer_const_overloadc::Bar_yp_get;
*swig_yp_set = *smart_pointer_const_overloadc::Bar_yp_set;
*swig_access_get = *smart_pointer_const_overloadc::Bar_access_get;
*swig_access_set = *smart_pointer_const_overloadc::Bar_access_set;
*getx = *smart_pointer_const_overloadc::Bar_getx;
*setx = *smart_pointer_const_overloadc::Bar_setx;
*stat = *smart_pointer_const_overloadc::Bar_stat;
*getx2 = *smart_pointer_const_overloadc::Bar_getx2;
*setx2 = *smart_pointer_const_overloadc::Bar_setx2;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : smart_pointer_const_overload::Bar2 ##############

package smart_pointer_const_overload::Bar2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( smart_pointer_const_overload );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = smart_pointer_const_overloadc::new_Bar2(@_);
    bless $self, $pkg if defined($self);
}

*__deref__ = *smart_pointer_const_overloadc::Bar2___deref__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        smart_pointer_const_overloadc::delete_Bar2($self);
        delete $OWNER{$self};
    }
}

*swig_x_get = *smart_pointer_const_overloadc::Bar2_x_get;
*swig_x_set = *smart_pointer_const_overloadc::Bar2_x_set;
*swig_xp_get = *smart_pointer_const_overloadc::Bar2_xp_get;
*swig_xp_set = *smart_pointer_const_overloadc::Bar2_xp_set;
*swig_y_get = *smart_pointer_const_overloadc::Bar2_y_get;
*swig_y_set = *smart_pointer_const_overloadc::Bar2_y_set;
*swig_yp_get = *smart_pointer_const_overloadc::Bar2_yp_get;
*swig_yp_set = *smart_pointer_const_overloadc::Bar2_yp_set;
*swig_access_get = *smart_pointer_const_overloadc::Bar2_access_get;
*swig_access_set = *smart_pointer_const_overloadc::Bar2_access_set;
*getx = *smart_pointer_const_overloadc::Bar2_getx;
*setx = *smart_pointer_const_overloadc::Bar2_setx;
*stat = *smart_pointer_const_overloadc::Bar2_stat;
*getx2 = *smart_pointer_const_overloadc::Bar2_getx2;
*setx2 = *smart_pointer_const_overloadc::Bar2_setx2;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package smart_pointer_const_overload;

*CONST_ACCESS = *smart_pointer_const_overloadc::CONST_ACCESS;
*MUTABLE_ACCESS = *smart_pointer_const_overloadc::MUTABLE_ACCESS;
1;
