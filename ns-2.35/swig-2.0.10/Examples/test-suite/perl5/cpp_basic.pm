# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package cpp_basic;
use base qw(Exporter);
use base qw(DynaLoader);
package cpp_basicc;
bootstrap cpp_basic;
package cpp_basic;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package cpp_basic;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package cpp_basic;

*get_func1_ptr = *cpp_basicc::get_func1_ptr;
*get_func2_ptr = *cpp_basicc::get_func2_ptr;
*test_func_ptr = *cpp_basicc::test_func_ptr;

############# Class : cpp_basic::Foo ##############

package cpp_basic::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( cpp_basic );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = cpp_basicc::new_Foo(@_);
    bless $self, $pkg if defined($self);
}

*swig_num_get = *cpp_basicc::Foo_num_get;
*swig_num_set = *cpp_basicc::Foo_num_set;
*func1 = *cpp_basicc::Foo_func1;
*func2 = *cpp_basicc::Foo_func2;
*swig_func_ptr_get = *cpp_basicc::Foo_func_ptr_get;
*swig_func_ptr_set = *cpp_basicc::Foo_func_ptr_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        cpp_basicc::delete_Foo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : cpp_basic::Bar ##############

package cpp_basic::Bar;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( cpp_basic );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = cpp_basicc::new_Bar(@_);
    bless $self, $pkg if defined($self);
}

*swig_fptr_get = *cpp_basicc::Bar_fptr_get;
*swig_fptr_set = *cpp_basicc::Bar_fptr_set;
*swig_fref_get = *cpp_basicc::Bar_fref_get;
*swig_fref_set = *cpp_basicc::Bar_fref_set;
*swig_fval_get = *cpp_basicc::Bar_fval_get;
*swig_fval_set = *cpp_basicc::Bar_fval_set;
*swig_cint_get = *cpp_basicc::Bar_cint_get;
*swig_cint_set = *cpp_basicc::Bar_cint_set;
*global_cint = *cpp_basicc::Bar_global_cint;
*global_cint = *cpp_basicc::Bar_global_cint;
*global_fptr = *cpp_basicc::Bar_global_fptr;
*global_fref = *cpp_basicc::Bar_global_fref;
*global_fval = *cpp_basicc::Bar_global_fval;
*test = *cpp_basicc::Bar_test;
*testFoo = *cpp_basicc::Bar_testFoo;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        cpp_basicc::delete_Bar($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : cpp_basic::Fl_Window ##############

package cpp_basic::Fl_Window;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( cpp_basic );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = cpp_basicc::new_Fl_Window(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        cpp_basicc::delete_Fl_Window($self);
        delete $OWNER{$self};
    }
}

*show = *cpp_basicc::Fl_Window_show;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package cpp_basic;


my %__Bar_global_fptr_hash;
tie %__Bar_global_fptr_hash,"cpp_basic::Foo", $cpp_basicc::Bar_global_fptr;
$Bar_global_fptr= \%__Bar_global_fptr_hash;
bless $Bar_global_fptr, cpp_basic::Foo;

my %__Bar_global_fref_hash;
tie %__Bar_global_fref_hash,"cpp_basic::Foo", $cpp_basicc::Bar_global_fref;
$Bar_global_fref= \%__Bar_global_fref_hash;
bless $Bar_global_fref, cpp_basic::Foo;

my %__Bar_global_fval_hash;
tie %__Bar_global_fval_hash,"cpp_basic::Foo", $cpp_basicc::Bar_global_fval;
$Bar_global_fval= \%__Bar_global_fval_hash;
bless $Bar_global_fval, cpp_basic::Foo;
1;
