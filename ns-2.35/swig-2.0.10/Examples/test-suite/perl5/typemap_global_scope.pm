# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package typemap_global_scope;
use base qw(Exporter);
use base qw(DynaLoader);
package typemap_global_scopec;
bootstrap typemap_global_scope;
package typemap_global_scope;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package typemap_global_scope;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package typemap_global_scope;

*test1a = *typemap_global_scopec::test1a;
*test1b = *typemap_global_scopec::test1b;
*test2a = *typemap_global_scopec::test2a;
*test2b = *typemap_global_scopec::test2b;
*test3a = *typemap_global_scopec::test3a;
*test3b = *typemap_global_scopec::test3b;
*test3c = *typemap_global_scopec::test3c;
*test3d = *typemap_global_scopec::test3d;
*test3e = *typemap_global_scopec::test3e;
*test4a = *typemap_global_scopec::test4a;
*test4b = *typemap_global_scopec::test4b;
*test4c = *typemap_global_scopec::test4c;
*test4d = *typemap_global_scopec::test4d;
*test4e = *typemap_global_scopec::test4e;
*test_template_1a = *typemap_global_scopec::test_template_1a;
*test_template_1b = *typemap_global_scopec::test_template_1b;
*test_template_2a = *typemap_global_scopec::test_template_2a;
*test_template_2b = *typemap_global_scopec::test_template_2b;
*test_template_3a = *typemap_global_scopec::test_template_3a;
*test_template_3b = *typemap_global_scopec::test_template_3b;
*test_template_3c = *typemap_global_scopec::test_template_3c;
*test_template_3d = *typemap_global_scopec::test_template_3d;
*test_template_3e = *typemap_global_scopec::test_template_3e;
*test_template_4a = *typemap_global_scopec::test_template_4a;
*test_template_4b = *typemap_global_scopec::test_template_4b;
*test_template_4c = *typemap_global_scopec::test_template_4c;
*test_template_4d = *typemap_global_scopec::test_template_4d;
*test_template_4e = *typemap_global_scopec::test_template_4e;
*test_enum_1a = *typemap_global_scopec::test_enum_1a;
*test_enum_1b = *typemap_global_scopec::test_enum_1b;
*test_enum_2a = *typemap_global_scopec::test_enum_2a;
*test_enum_2b = *typemap_global_scopec::test_enum_2b;
*test_enum_3a = *typemap_global_scopec::test_enum_3a;
*test_enum_3b = *typemap_global_scopec::test_enum_3b;
*test_enum_3c = *typemap_global_scopec::test_enum_3c;
*test_enum_3d = *typemap_global_scopec::test_enum_3d;
*test_enum_3e = *typemap_global_scopec::test_enum_3e;
*test_enum_4a = *typemap_global_scopec::test_enum_4a;
*test_enum_4b = *typemap_global_scopec::test_enum_4b;
*test_enum_4c = *typemap_global_scopec::test_enum_4c;
*test_enum_4d = *typemap_global_scopec::test_enum_4d;
*test_enum_4e = *typemap_global_scopec::test_enum_4e;

############# Class : typemap_global_scope::Test1 ##############

package typemap_global_scope::Test1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typemap_global_scope );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = typemap_global_scopec::new_Test1(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typemap_global_scopec::delete_Test1($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typemap_global_scope::Test2 ##############

package typemap_global_scope::Test2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typemap_global_scope );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = typemap_global_scopec::new_Test2(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typemap_global_scopec::delete_Test2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typemap_global_scope::Test3 ##############

package typemap_global_scope::Test3;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typemap_global_scope );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = typemap_global_scopec::new_Test3(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typemap_global_scopec::delete_Test3($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typemap_global_scope::Test4 ##############

package typemap_global_scope::Test4;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typemap_global_scope );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = typemap_global_scopec::new_Test4(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typemap_global_scopec::delete_Test4($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typemap_global_scope::XX ##############

package typemap_global_scope::XX;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typemap_global_scope );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = typemap_global_scopec::new_XX(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typemap_global_scopec::delete_XX($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typemap_global_scope::TemplateTest1XX ##############

package typemap_global_scope::TemplateTest1XX;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typemap_global_scope );
%OWNER = ();
%ITERATORS = ();
*swig_m_t_get = *typemap_global_scopec::TemplateTest1XX_m_t_get;
*swig_m_t_set = *typemap_global_scopec::TemplateTest1XX_m_t_set;
sub new {
    my $pkg = shift;
    my $self = typemap_global_scopec::new_TemplateTest1XX(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typemap_global_scopec::delete_TemplateTest1XX($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typemap_global_scope::TemplateTest2XX ##############

package typemap_global_scope::TemplateTest2XX;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typemap_global_scope );
%OWNER = ();
%ITERATORS = ();
*swig_m_t_get = *typemap_global_scopec::TemplateTest2XX_m_t_get;
*swig_m_t_set = *typemap_global_scopec::TemplateTest2XX_m_t_set;
sub new {
    my $pkg = shift;
    my $self = typemap_global_scopec::new_TemplateTest2XX(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typemap_global_scopec::delete_TemplateTest2XX($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typemap_global_scope::TemplateTest3XX ##############

package typemap_global_scope::TemplateTest3XX;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typemap_global_scope );
%OWNER = ();
%ITERATORS = ();
*swig_m_t_get = *typemap_global_scopec::TemplateTest3XX_m_t_get;
*swig_m_t_set = *typemap_global_scopec::TemplateTest3XX_m_t_set;
sub new {
    my $pkg = shift;
    my $self = typemap_global_scopec::new_TemplateTest3XX(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typemap_global_scopec::delete_TemplateTest3XX($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typemap_global_scope::TemplateTest4XX ##############

package typemap_global_scope::TemplateTest4XX;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typemap_global_scope );
%OWNER = ();
%ITERATORS = ();
*swig_m_t_get = *typemap_global_scopec::TemplateTest4XX_m_t_get;
*swig_m_t_set = *typemap_global_scopec::TemplateTest4XX_m_t_set;
sub new {
    my $pkg = shift;
    my $self = typemap_global_scopec::new_TemplateTest4XX(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typemap_global_scopec::delete_TemplateTest4XX($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package typemap_global_scope;

*enum_1 = *typemap_global_scopec::enum_1;
*enum_2 = *typemap_global_scopec::enum_2;
*enum_3 = *typemap_global_scopec::enum_3;
*enum_4 = *typemap_global_scopec::enum_4;
1;
