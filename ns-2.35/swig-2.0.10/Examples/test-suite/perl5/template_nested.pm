# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package template_nested;
use base qw(Exporter);
use base qw(DynaLoader);
package template_nestedc;
bootstrap template_nested;
package template_nested;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package template_nested;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package template_nested;


############# Class : template_nested::NormalClass ##############

package template_nested::NormalClass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_nested );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = template_nestedc::new_NormalClass(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_nestedc::delete_NormalClass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_nested::OuterClass ##############

package template_nested::OuterClass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_nested );
%OWNER = ();
%ITERATORS = ();
*useInner1 = *template_nestedc::OuterClass_useInner1;
*useInner2 = *template_nestedc::OuterClass_useInner2;
*swig_iii_get = *template_nestedc::OuterClass_iii_get;
*swig_iii_set = *template_nestedc::OuterClass_iii_set;
*T_OuterTMethodNormalClass = *template_nestedc::OuterClass_T_OuterTMethodNormalClass;
sub new {
    my $pkg = shift;
    my $self = template_nestedc::new_OuterClass(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_nestedc::delete_OuterClass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_nested::ABC ##############

package template_nested::ABC;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_nested );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = template_nestedc::new_ABC(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_nestedc::delete_ABC($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_nested::TemplateFuncs ##############

package template_nested::TemplateFuncs;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_nested );
%OWNER = ();
%ITERATORS = ();
*T_TemplateFuncs1Int = *template_nestedc::TemplateFuncs_T_TemplateFuncs1Int;
*T_TemplateFuncs2Double = *template_nestedc::TemplateFuncs_T_TemplateFuncs2Double;
sub new {
    my $pkg = shift;
    my $self = template_nestedc::new_TemplateFuncs(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_nestedc::delete_TemplateFuncs($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_nested::T_NormalTemplateNormalClass ##############

package template_nested::T_NormalTemplateNormalClass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_nested );
%OWNER = ();
%ITERATORS = ();
*tmethod = *template_nestedc::T_NormalTemplateNormalClass_tmethod;
sub new {
    my $pkg = shift;
    my $self = template_nestedc::new_T_NormalTemplateNormalClass(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_nestedc::delete_T_NormalTemplateNormalClass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_nested::T_NestedOuterTemplateDouble ##############

package template_nested::T_NestedOuterTemplateDouble;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_nested );
%OWNER = ();
%ITERATORS = ();
*hohum = *template_nestedc::T_NestedOuterTemplateDouble_hohum;
*useNestedInnerTemplate1 = *template_nestedc::T_NestedOuterTemplateDouble_useNestedInnerTemplate1;
*useNestedInnerTemplate2 = *template_nestedc::T_NestedOuterTemplateDouble_useNestedInnerTemplate2;
*useNestedInnerTemplate3 = *template_nestedc::T_NestedOuterTemplateDouble_useNestedInnerTemplate3;
*useNestedStruct = *template_nestedc::T_NestedOuterTemplateDouble_useNestedStruct;
sub new {
    my $pkg = shift;
    my $self = template_nestedc::new_T_NestedOuterTemplateDouble(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_nestedc::delete_T_NestedOuterTemplateDouble($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package template_nested;

1;
