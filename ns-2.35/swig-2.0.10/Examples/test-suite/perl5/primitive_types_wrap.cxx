/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIG_CASTRANK_MODE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Add in functionality missing in older versions of Perl. Much of this is based on Devel-PPPort on cpan. */

/* Add PERL_REVISION, PERL_VERSION, PERL_SUBVERSION if missing */
#ifndef PERL_REVISION
#  if !defined(__PATCHLEVEL_H_INCLUDED__) && !(defined(PATCHLEVEL) && defined(SUBVERSION))
#    define PERL_PATCHLEVEL_H_IMPLICIT
#    include <patchlevel.h>
#  endif
#  if !(defined(PERL_VERSION) || (defined(SUBVERSION) && defined(PATCHLEVEL)))
#    include <could_not_find_Perl_patchlevel.h>
#  endif
#  ifndef PERL_REVISION
#    define PERL_REVISION       (5)
#    define PERL_VERSION        PATCHLEVEL
#    define PERL_SUBVERSION     SUBVERSION
#  endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

#ifndef SvIOK_UV
# define SvIOK_UV(sv)       (SvIOK(sv) && (SvUVX(sv) == SvIVX(sv)))
#endif

#ifndef SvUOK
# define SvUOK(sv)           SvIOK_UV(sv)
#endif

#if ((PERL_VERSION < 4) || ((PERL_VERSION == 4) && (PERL_SUBVERSION <= 5)))
#  define PL_sv_undef               sv_undef
#  define PL_na	                    na
#  define PL_errgv                  errgv
#  define PL_sv_no                  sv_no
#  define PL_sv_yes                 sv_yes
#  define PL_markstack_ptr          markstack_ptr
#endif

#ifndef IVSIZE
#  ifdef LONGSIZE
#    define IVSIZE LONGSIZE
#  else
#    define IVSIZE 4 /* A bold guess, but the best we can make. */
#  endif
#endif

#ifndef INT2PTR
#  if (IVSIZE == PTRSIZE) && (UVSIZE == PTRSIZE)
#    define PTRV                  UV
#    define INT2PTR(any,d)        (any)(d)
#  else
#    if PTRSIZE == LONGSIZE
#      define PTRV                unsigned long
#    else
#      define PTRV                unsigned
#    endif
#    define INT2PTR(any,d)        (any)(PTRV)(d)
#  endif

#  define NUM2PTR(any,d)  (any)(PTRV)(d)
#  define PTR2IV(p)       INT2PTR(IV,p)
#  define PTR2UV(p)       INT2PTR(UV,p)
#  define PTR2NV(p)       NUM2PTR(NV,p)

#  if PTRSIZE == LONGSIZE
#    define PTR2ul(p)     (unsigned long)(p)
#  else
#    define PTR2ul(p)     INT2PTR(unsigned long,p)
#  endif
#endif /* !INT2PTR */

#ifndef SvPV_nolen
# define SvPV_nolen(x) SvPV(x,PL_na)
#endif

#ifndef get_sv
#  define get_sv perl_get_sv
#endif

#ifndef ERRSV
#  define ERRSV get_sv("@",FALSE)
#endif

#ifndef pTHX_
#define pTHX_
#endif   

#include <string.h>
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Perl_ErrorType(int code) {
  switch(code) {
  case SWIG_MemoryError:
    return "MemoryError";
  case SWIG_IOError:
    return "IOError";
  case SWIG_RuntimeError:
    return "RuntimeError";
  case SWIG_IndexError:
    return "IndexError";
  case SWIG_TypeError:
    return "TypeError";
  case SWIG_DivisionByZero:
    return "ZeroDivisionError";
  case SWIG_OverflowError:
    return "OverflowError";
  case SWIG_SyntaxError:
    return "SyntaxError";
  case SWIG_ValueError:
    return "ValueError";
  case SWIG_SystemError:
    return "SystemError";
  case SWIG_AttributeError:
    return "AttributeError";
  default:
    return "RuntimeError";
  }
}


/* -----------------------------------------------------------------------------
 * perlrun.swg
 *
 * This file contains the runtime support for Perl modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef PERL_OBJECT
#define SWIG_PERL_OBJECT_DECL CPerlObj *SWIGUNUSEDPARM(pPerl),
#define SWIG_PERL_OBJECT_CALL pPerl,
#else
#define SWIG_PERL_OBJECT_DECL
#define SWIG_PERL_OBJECT_CALL
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pp, type, flags)           SWIG_Perl_ConvertPtr(SWIG_PERL_OBJECT_CALL obj, pp, type, flags)
#define SWIG_ConvertPtrAndOwn(obj, pp, type, flags,own) SWIG_Perl_ConvertPtrAndOwn(SWIG_PERL_OBJECT_CALL obj, pp, type, flags, own)
#define SWIG_NewPointerObj(p, type, flags)              SWIG_Perl_NewPointerObj(SWIG_PERL_OBJECT_CALL p, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, p, s, type)             SWIG_Perl_ConvertPacked(SWIG_PERL_OBJECT_CALL obj, p, s, type)
#define SWIG_NewPackedObj(p, s, type)	                SWIG_Perl_NewPackedObj(SWIG_PERL_OBJECT_CALL p, s, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Perl_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Perl_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Perl_ErrorType(code)               
#define SWIG_Error(code, msg)            		sv_setpvf(get_sv("@", GV_ADD), "%s %s", SWIG_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    

/* Perl-specific SWIG API */

#define SWIG_MakePtr(sv, ptr, type, flags)              SWIG_Perl_MakePtr(SWIG_PERL_OBJECT_CALL sv, ptr, type, flags)
#define SWIG_MakePackedObj(sv, p, s, type)	        SWIG_Perl_MakePackedObj(SWIG_PERL_OBJECT_CALL sv, p, s, type)
#define SWIG_SetError(str)                              SWIG_Error(SWIG_RuntimeError, str)


#define SWIG_PERL_DECL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_DECL arg1)
#define SWIG_PERL_CALL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_CALL arg1)
#define SWIG_PERL_DECL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_DECL arg1, arg2)
#define SWIG_PERL_CALL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_CALL arg1, arg2)

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER   SWIG_POINTER_OWN
#define SWIG_SHADOW  SWIG_OWNER << 1

#define SWIG_MAYBE_PERL_OBJECT SWIG_PERL_OBJECT_DECL

/* SWIG Perl macros */

/* Macro to declare an XS function */
#ifndef XSPROTO
#   define XSPROTO(name) void name(pTHX_ CV* cv)
#endif

/* Macro to call an XS function */
#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC

#else /* PERL_OBJECT */

#define MAGIC_PPERL
#define SWIGCLASS_STATIC static SWIGUNUSED

#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#else /* MULTIPLICITY */

#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif /* MULTIPLICITY */
#endif /* PERL_OBJECT */

#  ifdef PERL_OBJECT
#    define SWIG_croak_null() SWIG_Perl_croak_null(pPerl)
static void SWIG_Perl_croak_null(CPerlObj *pPerl)
#  else
static void SWIG_croak_null()
#  endif
{
  SV *err = get_sv("@", GV_ADD);
#  if (PERL_VERSION < 6)
  croak("%_", err);
#  else
  if (sv_isobject(err))
    croak(0);
  else
    croak("%s", SvPV_nolen(err));
#  endif
}


/* 
   Define how strict is the cast between strings and integers/doubles
   when overloading between these types occurs.
   
   The default is making it as strict as possible by using SWIG_AddCast
   when needed.
   
   You can use -DSWIG_PERL_NO_STRICT_STR2NUM at compilation time to
   disable the SWIG_AddCast, making the casting between string and
   numbers less strict.

   In the end, we try to solve the overloading between strings and
   numerical types in the more natural way, but if you can avoid it,
   well, avoid it using %rename, for example.
*/
#ifndef SWIG_PERL_NO_STRICT_STR2NUM
# ifndef SWIG_PERL_STRICT_STR2NUM
#  define SWIG_PERL_STRICT_STR2NUM
# endif
#endif
#ifdef SWIG_PERL_STRICT_STR2NUM
/* string takes precedence */
#define SWIG_Str2NumCast(x) SWIG_AddCast(x)  
#else
/* number takes precedence */
#define SWIG_Str2NumCast(x) x
#endif



#include <stdlib.h>

SWIGRUNTIME const char *
SWIG_Perl_TypeProxyName(const swig_type_info *type) {
  if (!type) return NULL;
  if (type->clientdata != NULL) {
    return (const char*) type->clientdata;
  } 
  else {
    return type->name;
  }
}

/* Identical to SWIG_TypeCheck, except for strcmp comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeProxyCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(SWIG_Perl_TypeProxyName(iter->type), c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* Function for getting a pointer value */

SWIGRUNTIME int
SWIG_Perl_ConvertPtrAndOwn(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags, int *own) {
  swig_cast_info *tc;
  void *voidptr = (void *)0;
  SV *tsv = 0;

  if (own)
    *own = 0;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    IV tmp = 0;
    tsv = (SV*) SvRV(sv);
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          sv = mg->mg_obj;
          if (sv_isobject(sv)) {
	    tsv = (SV*)SvRV(sv);
            tmp = SvIV(tsv);
          }
        }
      } else {
        return SWIG_ERROR;
      }
    } else {
      tmp = SvIV(tsv);
    }
    voidptr = INT2PTR(void *,tmp);
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return SWIG_OK;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    if (!SvROK(sv)) {
      /* In Perl 5.12 and later, SVt_RV == SVt_IV, so sv could be a valid integer value.  */
      if (SvIOK(sv)) {
        return SWIG_ERROR;
      } else {
        /* NULL pointer (reference to undef). */
        *(ptr) = (void *) 0;
        return SWIG_OK;
      }
    } else {
      return SWIG_ERROR;
    }
  } else {                            /* Don't know what it is */
    return SWIG_ERROR;
  }
  if (_t) {
    /* Now see if the types match */
    char *_c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeProxyCheck(_c,_t);
    if (!tc) {
      return SWIG_ERROR;
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,voidptr,&newmemory);
      if (newmemory == SWIG_CAST_NEW_MEMORY) {
        assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
        if (own)
          *own = *own | SWIG_CAST_NEW_MEMORY;
      }
    }
  } else {
    *ptr = voidptr;
  }

  /* 
   *  DISOWN implementation: we need a perl guru to check this one.
   */
  if (tsv && (flags & SWIG_POINTER_DISOWN)) {
    /* 
     *  almost copy paste code from below SWIG_POINTER_OWN setting
     */
    SV *obj = sv;
    HV *stash = SvSTASH(SvRV(obj));
    GV *gv = *(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
    if (isGV(gv)) {
      HV *hv = GvHVn(gv);
      /*
       * To set ownership (see below), a newSViv(1) entry is added. 
       * Hence, to remove ownership, we delete the entry.
       */
      if (hv_exists_ent(hv, obj, 0)) {
	hv_delete_ent(hv, obj, 0, 0);
      }
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME int
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  return SWIG_Perl_ConvertPtrAndOwn(sv, ptr, _t, flags, 0);
}

SWIGRUNTIME void
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & (SWIG_SHADOW | SWIG_POINTER_OWN))) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, SWIG_Perl_TypeProxyName(t), ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_POINTER_OWN) {
      HV *hv;
      GV *gv = *(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, SWIG_Perl_TypeProxyName(t), ptr);
  }
}

SWIGRUNTIMEINLINE SV *
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

SWIGRUNTIME void
SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(SWIG_Perl_TypeProxyName(type))) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,SWIG_Perl_TypeProxyName(type));
  sv_setpv(sv, result);
}

SWIGRUNTIME SV *
SWIG_Perl_NewPackedObj(SWIG_MAYBE_PERL_OBJECT void *ptr, int sz, swig_type_info *type) {
  SV *result = sv_newmortal();
  SWIG_Perl_MakePackedObj(result, ptr, sz, type);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return SWIG_ERROR;
  c = SvPV_nolen(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return SWIG_ERROR;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return SWIG_ERROR;
  }
  return SWIG_OK;
}


/* Macros for low-level exception handling */
#define SWIG_croak(x)    { SWIG_Error(SWIG_RuntimeError, x); SWIG_fail; }


typedef XSPROTO(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;


/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
# ifdef __cplusplus
#  define swig_create_magic(s,a,b,c) _swig_create_magic(s,const_cast<char*>(a),b,c)
# else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(s,(char*)(a),b,c)
# endif
# ifndef MULTIPLICITY
SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) 
# else
SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) 
# endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
SWIGRUNTIME void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) 
#endif
{
  MAGIC *mg;
  sv_magic(sv,sv,'U',name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFunc) get;
  mg->mg_virtual->svt_set = (SwigMagicFunc) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}


SWIGRUNTIME swig_module_info *
SWIG_Perl_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  SV *pointer;

  /* first check if pointer already created */
  if (!type_pointer) {
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, FALSE | GV_ADDMULTI);
    if (pointer && SvOK(pointer)) {
      type_pointer = INT2PTR(swig_type_info **, SvIV(pointer));
    }
  }

  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Perl_SetModule(swig_module_info *module) {
  SV *pointer;

  /* create a new pointer */
  pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TRUE | GV_ADDMULTI);
  sv_setiv(pointer, PTR2IV(module));
}

#ifdef __cplusplus
}
#endif

/* Workaround perl5 global namespace pollution. Note that undefining library
 * functions like fopen will not solve the problem on all platforms as fopen
 * might be a macro on Windows but not necessarily on other operating systems. */
#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef do_exec
  #undef do_exec
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef read
  #undef read
#endif
#ifdef write
  #undef write
#endif
#ifdef eof
  #undef eof
#endif
#ifdef close
  #undef close
#endif
#ifdef rewind
  #undef rewind
#endif
#ifdef free
  #undef free
#endif
#ifdef malloc
  #undef malloc
#endif
#ifdef calloc
  #undef calloc
#endif
#ifdef Stat
  #undef Stat
#endif
#ifdef check
  #undef check
#endif
#ifdef seekdir
  #undef seekdir
#endif
#ifdef open
  #undef open
#endif
#ifdef readdir
  #undef readdir
#endif
#ifdef bind
  #undef bind
#endif
#ifdef access
  #undef access
#endif
#ifdef stat
  #undef stat
#endif

#ifdef bool
  /* Leave if macro is from C99 stdbool.h */
  #ifndef __bool_true_false_are_defined
    #undef bool
  #endif
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Foo swig_types[0]
#define SWIGTYPE_p_Test swig_types[1]
#define SWIGTYPE_p_TestDirector swig_types[2]
#define SWIGTYPE_p_a_5__char swig_types[3]
#define SWIGTYPE_p_char swig_types[4]
#define SWIGTYPE_p_unsigned_int swig_types[5]
static swig_type_info *swig_types[7];
static swig_module_info swig_module = {swig_types, 6, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_primitive_types

#define SWIG_name   "primitive_typesc::boot_primitive_types"
#define SWIG_prefix "primitive_typesc::"

#define SWIGVERSION 0x020010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT void SWIG_init (CV* cv);
#else
SWIGEXPORT void SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT void SWIG_init (CV *cv, CPerlObj *);
#endif


#if defined(_MSC_VER)
  #pragma warning(disable: 4290) // C++ exception specification ignored except to indicate a function is not __declspec(nothrow)
#endif


#include <stddef.h>
#include <iostream>
#include <sstream>


  // Integer class, only visible in C++
  struct MyInt
  {
    char name[5];
    int val;

    MyInt(int v = 0): val(v) {
    }
    
    operator int() const { return val; }
  };

  // Template primitive type, only visible in C++
  template <class T>
  struct Param
  {
    char name[5];
    T val;

    Param(T v = 0): val(v) {
      name[0] = 0;
      name[1] = 0;
      name[2] = 0;
      name[3] = 0;
      name[4] = 0;
    }
    
    operator T() const { return val; }
  };

  typedef char namet[5];
  extern namet gbl_namet;
  namet gbl_namet;



  enum Hello {
    Hi, Hola
  };

  typedef char namet[5];
  typedef char* pchar;
  typedef const char* pcharc;
  typedef char* pint;

  char* const def_pchar = (char *const)"hello";
  const char* const def_pcharc = "hija";

  const namet def_namet = {'h','o',0, 'l','a'};

  extern namet gbl_namet;

  char fixsize[8] =  {'h','o',0, 'l','a', 0, 0, 0};


SWIGINTERNINLINE SV *
SWIG_From_long  SWIG_PERL_DECL_ARGS_1(long value)
{
  SV *sv;
  if (value >= IV_MIN && value <= IV_MAX)
    sv = newSViv(value);
  else
    sv = newSVpvf("%ld", value);
  return sv_2mortal(sv);
}


SWIGINTERNINLINE SV *
SWIG_From_int  SWIG_PERL_DECL_ARGS_1(int value)
{    
  return SWIG_From_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERNINLINE SV *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  SV *obj = sv_newmortal();
  if (carray) {
    sv_setpvn(obj, carray, size);
  } else {
    sv_setsv(obj, &PL_sv_undef);
  }
  return obj;
}


SWIGINTERNINLINE SV * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(SV *obj, char** cptr, size_t* psize, int *alloc)
{
  if (SvMAGICAL(obj)) {
     SV *tmp = sv_newmortal();
     SvSetSV(tmp, obj);
     obj = tmp;
  }
  if (SvPOK(obj)) {
    STRLEN len = 0;
    char *cstr = SvPV(obj, len); 
    size_t size = len + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      char* vptr = 0; 
      if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = vptr;
	if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(SV * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE SV *
SWIG_From_char  SWIG_PERL_DECL_ARGS_1(char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERNINLINE SV *
SWIG_From_bool  SWIG_PERL_DECL_ARGS_1(bool value)
{
  return boolSV(value);
}


SWIGINTERNINLINE SV *
SWIG_From_signed_SS_char  SWIG_PERL_DECL_ARGS_1(signed char value)
{    
  return SWIG_From_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_long  SWIG_PERL_DECL_ARGS_1(unsigned long value)
{
  SV *sv;
  if (value <= UV_MAX)
    sv = newSVuv(value);
  else
    sv = newSVpvf("%lu", value);
  return sv_2mortal(sv);
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_char  SWIG_PERL_DECL_ARGS_1(unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_int  SWIG_PERL_DECL_ARGS_1(unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERNINLINE SV *
SWIG_From_short  SWIG_PERL_DECL_ARGS_1(short value)
{    
  return SWIG_From_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_short  SWIG_PERL_DECL_ARGS_1(unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#include <stdio.h>
#if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
# ifndef snprintf
#  define snprintf _snprintf
# endif
#endif


SWIGINTERNINLINE SV *
SWIG_From_long_SS_long  SWIG_PERL_DECL_ARGS_1(long long value)
{
  SV *sv;
  if (value >= IV_MIN && value <= IV_MAX)
    sv = newSViv((IV)(value));
  else {
    //sv = newSVpvf("%lld", value); doesn't work in non 64bit Perl
    char temp[256];
    sprintf(temp, "%lld", value);
    sv = newSVpv(temp, 0);
  }
  return sv_2mortal(sv);
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_DECL_ARGS_1(unsigned long long value)
{
  SV *sv;
  if (value <= UV_MAX)
    sv = newSVuv((UV)(value));
  else {
    //sv = newSVpvf("%llu", value); doesn't work in non 64bit Perl
    char temp[256];
    sprintf(temp, "%llu", value);
    sv = newSVpv(temp, 0);
  }
  return sv_2mortal(sv);
}


SWIGINTERNINLINE SV *
SWIG_From_double  SWIG_PERL_DECL_ARGS_1(double value)
{
  return sv_2mortal(newSVnv(value));
}


SWIGINTERNINLINE SV *
SWIG_From_size_t  SWIG_PERL_DECL_ARGS_1(size_t value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(value));
}


  /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  bool val_bool(bool x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  signed char val_schar(signed char x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned char val_uchar(unsigned char x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  int val_int(int x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned int val_uint(unsigned int x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  short val_short(short x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned short val_ushort(unsigned short x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long val_long(long x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long val_ulong(unsigned long x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long long val_llong(long long x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long long val_ullong(unsigned long long x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  char val_char(char x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pchar val_pchar(pchar x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pcharc val_pcharc(pcharc x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pint val_pint(pint x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Hello val_hello(Hello x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  MyInt val_myint(MyInt x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<int> val_parami(Param<int> x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<double> val_paramd(Param<double> x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<char> val_paramc(Param<char> x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  size_t val_sizet(size_t x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
  /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const bool& ref_bool(const bool& x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const signed char& ref_schar(const signed char& x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned char& ref_uchar(const unsigned char& x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const int& ref_int(const int& x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned int& ref_uint(const unsigned int& x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const short& ref_short(const short& x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned short& ref_ushort(const unsigned short& x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long& ref_long(const long& x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long& ref_ulong(const unsigned long& x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long long& ref_llong(const long long& x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long long& ref_ullong(const unsigned long long& x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const char& ref_char(const char& x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pchar& ref_pchar(const pchar& x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pcharc& ref_pcharc(const pcharc& x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pint& ref_pint(const pint& x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Hello& ref_hello(const Hello& x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const MyInt& ref_myint(const MyInt& x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<int>& ref_parami(const Param<int>& x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<double>& ref_paramd(const Param<double>& x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<char>& ref_paramc(const Param<char>& x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const size_t& ref_sizet(const size_t& x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
  /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const bool cct_bool = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const signed char cct_schar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned char cct_uchar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const int cct_int = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned int cct_uint = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const short cct_short = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned short cct_ushort = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const long cct_long = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned long cct_ulong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const long long cct_llong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const unsigned long long cct_ullong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const char cct_char = 'H';
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const pchar cct_pchar = def_pchar;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const pcharc cct_pcharc = def_pcharc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const pint cct_pint = 0;
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const Hello cct_hello = Hola;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const MyInt cct_myint = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const Param<int> cct_parami = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const Param<double> cct_paramd = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const Param<char> cct_paramc = 'c';
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,267,cct_decl@*/
  const size_t cct_sizet = 1;
/*@SWIG@*/
/*@SWIG@*/
  /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  bool var_bool;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  signed char var_schar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned char var_uchar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  int var_int;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned int var_uint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  short var_short;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned short var_ushort;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long var_long;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long var_ulong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long long var_llong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long long var_ullong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  char var_char;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pchar var_pchar;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pcharc var_pcharc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pint var_pint;
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Hello var_hello;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  MyInt var_myint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<int> var_parami;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<double> var_paramd;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<char> var_paramc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  size_t var_sizet;
/*@SWIG@*/
/*@SWIG@*/

  /*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  namet var_namet;
/*@SWIG@*/

  void var_init() 
  {
    var_pchar = 0;
    var_pcharc = 0;
    var_pint = 0;
    var_namet[0] = 'h';
  }
  


SWIGINTERN int
SWIG_AsVal_bool SWIG_PERL_DECL_ARGS_2(SV *obj, bool* val)
{
  if (obj == &PL_sv_yes) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == &PL_sv_no) { 
    if (val) *val = false;
    return SWIG_OK;
  } else {
    if (val) *val = SvTRUE(obj) ? true : false;
    return SWIG_AddCast(SWIG_OK);    
  }
}


SWIGINTERN int
SWIG_AsVal_double SWIG_PERL_DECL_ARGS_2(SV *obj, double *val)
{
  if (SvNIOK(obj)) {
    if (val) *val = SvNV(obj);
    return SWIG_OK;
  } else if (SvIOK(obj)) {
    if (val) *val = (double) SvIV(obj);
    return SWIG_AddCast(SWIG_OK);
  } else {
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      double v;
      errno = 0;
      v = strtod(nptr, &endptr);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
  }
  return SWIG_TypeError;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long SWIG_PERL_DECL_ARGS_2(SV *obj, long* val)
{
  if (SvUOK(obj)) {
    UV v = SvUV(obj);
    if (v <= LONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (v >= LONG_MIN && v <= LONG_MAX) {
      if(val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      long v;
      errno = 0;
      v = strtol(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_signed_SS_char SWIG_PERL_DECL_ARGS_2(SV * obj, signed char *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SCHAR_MIN || v > SCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< signed char >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_PERL_DECL_ARGS_2(SV *obj, unsigned long *val) 
{
  if (SvUOK(obj)) {
    UV v = SvUV(obj);
    if (v <= ULONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (v >= 0 && v <= ULONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      unsigned long v;
      errno = 0;
      v = strtoul(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char SWIG_PERL_DECL_ARGS_2(SV * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_PERL_DECL_ARGS_2(SV * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int SWIG_PERL_DECL_ARGS_2(SV * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_short SWIG_PERL_DECL_ARGS_2(SV * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short SWIG_PERL_DECL_ARGS_2(SV * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif



SWIGINTERN int
SWIG_AsVal_long_SS_long SWIG_PERL_DECL_ARGS_2(SV *obj, long long *val)
{
  if (SvUOK(obj)) {
    UV v = SvUV(obj);
    if (v < LLONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (v >= LLONG_MIN && v <= LLONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      long long v;
      errno = 0;
      v = strtoll(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      const double mant_max = 1LL << DBL_MANT_DIG;
      const double mant_min = -mant_max;
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
	if (val) *val = (long long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError; 
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_DECL_ARGS_2(SV *obj, unsigned long long *val)
{
  if (SvUOK(obj)) {
    if (val) *val = SvUV(obj);
    return SWIG_OK;
  } else  if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (v >= 0 && v <= ULLONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      unsigned long long v;
      errno = 0;
      v = strtoull(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      const double mant_max = 1LL << DBL_MANT_DIG;
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
	if (val) *val = (unsigned long long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char SWIG_PERL_DECL_ARGS_2(SV * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}





SWIGINTERNINLINE int
SWIG_AsVal_size_t SWIG_PERL_DECL_ARGS_2(SV * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  struct Foo
  {
    int _a;
    
    Foo (int a) : _a(a)
    {
    }
    
    Foo(const Foo&)
    {
    }

    Foo copy(Foo x) 
    {
      return x;
    }

    const Foo copy_c(const Foo x) 
    {
      return x;
    }

    const Foo& copy_r(const Foo& x) 
    {
      return x;
    }

    Foo* this_p() 
    {
      return this;
    }

    Foo& this_r() 
    {
      return *this;
    }
    
  };
  
  typedef Foo* foo_ptr;
  
  foo_ptr fptr_val(foo_ptr a) {
    return a;
  }

  const foo_ptr& fptr_ref(const foo_ptr& a) {
    return a;
  }
  
  
 struct Test 
 {
   Test()
     : var_pchar(0), var_pcharc(0), var_pint(0)
   {
   }

   virtual ~Test()
   {
   }
   
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const bool stc_bool = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const signed char stc_schar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned char stc_uchar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const int stc_int = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned int stc_uint = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const short stc_short = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned short stc_ushort = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const long stc_long = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned long stc_ulong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const long long stc_llong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned long long stc_ullong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const char stc_char = 'H';
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  bool var_bool;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  signed char var_schar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned char var_uchar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  int var_int;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned int var_uint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  short var_short;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned short var_ushort;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long var_long;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long var_ulong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long long var_llong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long long var_ullong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  char var_char;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pchar var_pchar;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pcharc var_pcharc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pint var_pint;
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Hello var_hello;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  MyInt var_myint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<int> var_parami;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<double> var_paramd;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<char> var_paramc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  size_t var_sizet;
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  namet var_namet;
/*@SWIG@*/


   const char* val_namet(namet x) throw(namet)
   {
     return x;
   }

   const char* val_cnamet(const namet x) throw(namet)
   {
     return x;
   }










   
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  bool val_bool(bool x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  signed char val_schar(signed char x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned char val_uchar(unsigned char x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  int val_int(int x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned int val_uint(unsigned int x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  short val_short(short x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned short val_ushort(unsigned short x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long val_long(long x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long val_ulong(unsigned long x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long long val_llong(long long x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long long val_ullong(unsigned long long x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  char val_char(char x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pchar val_pchar(pchar x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pcharc val_pcharc(pcharc x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pint val_pint(pint x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Hello val_hello(Hello x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  MyInt val_myint(MyInt x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<int> val_parami(Param<int> x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<double> val_paramd(Param<double> x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<char> val_paramc(Param<char> x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  size_t val_sizet(size_t x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const bool& ref_bool(const bool& x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const signed char& ref_schar(const signed char& x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned char& ref_uchar(const unsigned char& x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const int& ref_int(const int& x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned int& ref_uint(const unsigned int& x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const short& ref_short(const short& x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned short& ref_ushort(const unsigned short& x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long& ref_long(const long& x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long& ref_ulong(const unsigned long& x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long long& ref_llong(const long long& x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long long& ref_ullong(const unsigned long long& x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const char& ref_char(const char& x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pchar& ref_pchar(const pchar& x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pcharc& ref_pcharc(const pcharc& x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pint& ref_pint(const pint& x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Hello& ref_hello(const Hello& x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const MyInt& ref_myint(const MyInt& x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<int>& ref_parami(const Param<int>& x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<double>& ref_paramd(const Param<double>& x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<char>& ref_paramc(const Param<char>& x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const size_t& ref_sizet(const size_t& x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/

   int c_check() 
   {
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  bool val_tmpbool = 1;
  if (val_bool(val_tmpbool) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_bool(val_tmpbool);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  signed char val_tmpschar = 1;
  if (val_schar(val_tmpschar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_schar(val_tmpschar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned char val_tmpuchar = 1;
  if (val_uchar(val_tmpuchar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_uchar(val_tmpuchar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  int val_tmpint = 1;
  if (val_int(val_tmpint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_int(val_tmpint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned int val_tmpuint = 1;
  if (val_uint(val_tmpuint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_uint(val_tmpuint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  short val_tmpshort = 1;
  if (val_short(val_tmpshort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_short(val_tmpshort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned short val_tmpushort = 1;
  if (val_ushort(val_tmpushort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_ushort(val_tmpushort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long val_tmplong = 1;
  if (val_long(val_tmplong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_long(val_tmplong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long val_tmpulong = 1;
  if (val_ulong(val_tmpulong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_ulong(val_tmpulong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long long val_tmpllong = 1;
  if (val_llong(val_tmpllong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_llong(val_tmpllong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long long val_tmpullong = 1;
  if (val_ullong(val_tmpullong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_ullong(val_tmpullong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  char val_tmpchar = 'H';
  if (val_char(val_tmpchar) != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << val_char(val_tmpchar);
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pchar val_tmppchar = def_pchar;
  if (val_pchar(val_tmppchar) != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << val_pchar(val_tmppchar);
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pcharc val_tmppcharc = def_pcharc;
  if (val_pcharc(val_tmppcharc) != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << val_pcharc(val_tmppcharc);
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pint val_tmppint = 0;
  if (val_pint(val_tmppint) != 0) {
    std::ostringstream a; std::ostringstream b;
    a << val_pint(val_tmppint);
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Hello val_tmphello = Hola;
  if (val_hello(val_tmphello) != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << val_hello(val_tmphello);
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  MyInt val_tmpmyint = 1;
  if (val_myint(val_tmpmyint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_myint(val_tmpmyint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<int> val_tmpparami = 1;
  if (val_parami(val_tmpparami) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_parami(val_tmpparami);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<double> val_tmpparamd = 1;
  if (val_paramd(val_tmpparamd) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_paramd(val_tmpparamd);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<char> val_tmpparamc = 'c';
  if (val_paramc(val_tmpparamc) != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << val_paramc(val_tmpparamc);
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  size_t val_tmpsizet = 1;
  if (val_sizet(val_tmpsizet) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << val_sizet(val_tmpsizet);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in val""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  bool ref_tmpbool = 1;
  if (ref_bool(ref_tmpbool) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_bool(ref_tmpbool);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  signed char ref_tmpschar = 1;
  if (ref_schar(ref_tmpschar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_schar(ref_tmpschar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned char ref_tmpuchar = 1;
  if (ref_uchar(ref_tmpuchar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_uchar(ref_tmpuchar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  int ref_tmpint = 1;
  if (ref_int(ref_tmpint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_int(ref_tmpint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned int ref_tmpuint = 1;
  if (ref_uint(ref_tmpuint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_uint(ref_tmpuint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  short ref_tmpshort = 1;
  if (ref_short(ref_tmpshort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_short(ref_tmpshort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned short ref_tmpushort = 1;
  if (ref_ushort(ref_tmpushort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_ushort(ref_tmpushort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long ref_tmplong = 1;
  if (ref_long(ref_tmplong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_long(ref_tmplong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long ref_tmpulong = 1;
  if (ref_ulong(ref_tmpulong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_ulong(ref_tmpulong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long long ref_tmpllong = 1;
  if (ref_llong(ref_tmpllong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_llong(ref_tmpllong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long long ref_tmpullong = 1;
  if (ref_ullong(ref_tmpullong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_ullong(ref_tmpullong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  char ref_tmpchar = 'H';
  if (ref_char(ref_tmpchar) != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << ref_char(ref_tmpchar);
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pchar ref_tmppchar = def_pchar;
  if (ref_pchar(ref_tmppchar) != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << ref_pchar(ref_tmppchar);
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pcharc ref_tmppcharc = def_pcharc;
  if (ref_pcharc(ref_tmppcharc) != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << ref_pcharc(ref_tmppcharc);
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pint ref_tmppint = 0;
  if (ref_pint(ref_tmppint) != 0) {
    std::ostringstream a; std::ostringstream b;
    a << ref_pint(ref_tmppint);
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Hello ref_tmphello = Hola;
  if (ref_hello(ref_tmphello) != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << ref_hello(ref_tmphello);
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  MyInt ref_tmpmyint = 1;
  if (ref_myint(ref_tmpmyint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_myint(ref_tmpmyint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<int> ref_tmpparami = 1;
  if (ref_parami(ref_tmpparami) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_parami(ref_tmpparami);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<double> ref_tmpparamd = 1;
  if (ref_paramd(ref_tmpparamd) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_paramd(ref_tmpparamd);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<char> ref_tmpparamc = 'c';
  if (ref_paramc(ref_tmpparamc) != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << ref_paramc(ref_tmpparamc);
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  size_t ref_tmpsizet = 1;
  if (ref_sizet(ref_tmpsizet) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << ref_sizet(ref_tmpsizet);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in ref""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     return 1;
   }

   int v_check() 
   {
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << stc_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << var_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pchar != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << var_pchar;
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pcharc != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << var_pcharc;
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pint != 0) {
    std::ostringstream a; std::ostringstream b;
    a << var_pint;
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_hello != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << var_hello;
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_myint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_myint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_parami != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_parami;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramd != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_paramd;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramc != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << var_paramc;
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_sizet != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_sizet;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_namet != def_namet) {
    std::ostringstream a; std::ostringstream b;
    a << var_namet;
    b << def_namet;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""namet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/;
     return 1;
   }

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(bool x) { return 1; }
  virtual int ovr_ref(const bool& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(signed char x) { return 1; }
  virtual int ovr_ref(const signed char& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned char x) { return 1; }
  virtual int ovr_ref(const unsigned char& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(int x) { return 1; }
  virtual int ovr_ref(const int& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned int x) { return 1; }
  virtual int ovr_ref(const unsigned int& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(short x) { return 1; }
  virtual int ovr_ref(const short& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned short x) { return 1; }
  virtual int ovr_ref(const unsigned short& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(long x) { return 1; }
  virtual int ovr_ref(const long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned long x) { return 1; }
  virtual int ovr_ref(const unsigned long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(long long x) { return 1; }
  virtual int ovr_ref(const long long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned long long x) { return 1; }
  virtual int ovr_ref(const unsigned long long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(char x) { return 1; }
  virtual int ovr_ref(const char& x) { return 1; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(pchar x) { return 1; }
  virtual int ovr_ref(const pchar& x) { return 1; }
/*@SWIG@*/
/*@SWIG@*/

   static const double stc_double;
   static const double stc_float;
 };

 struct TestDirector
 {
   TestDirector()
     : var_pchar(0), var_pcharc(0), var_pint(0)
   {
   }

   
   virtual ~TestDirector()
   {
     var_namet[0]='h';
   }

   virtual const char* vval_namet(namet x) throw(namet)
   {
     return x;
   }

   virtual const char* vval_cnamet(const namet x) throw(namet)
   {
     return x;
   }











   /*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const bool stc_bool = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const signed char stc_schar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned char stc_uchar = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const int stc_int = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned int stc_uint = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const short stc_short = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned short stc_ushort = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const long stc_long = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned long stc_ulong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const long long stc_llong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const unsigned long long stc_ullong = 1;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,272,stc_decl@*/
  static const char stc_char = 'H';
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  bool var_bool;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  signed char var_schar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned char var_uchar;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  int var_int;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned int var_uint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  short var_short;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned short var_ushort;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long var_long;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long var_ulong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  long long var_llong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  unsigned long long var_ullong;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  char var_char;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pchar var_pchar;
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pcharc var_pcharc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  pint var_pint;
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Hello var_hello;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  MyInt var_myint;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<int> var_parami;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<double> var_paramd;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  Param<char> var_paramc;
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  size_t var_sizet;
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,282,var_decl@*/
  namet var_namet;
/*@SWIG@*/

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  bool val_bool(bool x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  signed char val_schar(signed char x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned char val_uchar(unsigned char x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  int val_int(int x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned int val_uint(unsigned int x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  short val_short(short x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned short val_ushort(unsigned short x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long val_long(long x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long val_ulong(unsigned long x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long long val_llong(long long x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long long val_ullong(unsigned long long x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  char val_char(char x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pchar val_pchar(pchar x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pcharc val_pcharc(pcharc x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pint val_pint(pint x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Hello val_hello(Hello x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  MyInt val_myint(MyInt x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<int> val_parami(Param<int> x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<double> val_paramd(Param<double> x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<char> val_paramc(Param<char> x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  size_t val_sizet(size_t x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const bool& ref_bool(const bool& x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const signed char& ref_schar(const signed char& x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned char& ref_uchar(const unsigned char& x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const int& ref_int(const int& x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned int& ref_uint(const unsigned int& x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const short& ref_short(const short& x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned short& ref_ushort(const unsigned short& x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long& ref_long(const long& x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long& ref_ulong(const unsigned long& x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long long& ref_llong(const long long& x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long long& ref_ullong(const unsigned long long& x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const char& ref_char(const char& x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pchar& ref_pchar(const pchar& x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pcharc& ref_pcharc(const pcharc& x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pint& ref_pint(const pint& x) throw (pint) { return x; }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Hello& ref_hello(const Hello& x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const MyInt& ref_myint(const MyInt& x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<int>& ref_parami(const Param<int>& x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<double>& ref_paramd(const Param<double>& x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<char>& ref_paramc(const Param<char>& x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const size_t& ref_sizet(const size_t& x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  bool vval_bool(bool x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  signed char vval_schar(signed char x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned char vval_uchar(unsigned char x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  int vval_int(int x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned int vval_uint(unsigned int x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  short vval_short(short x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned short vval_ushort(unsigned short x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long vval_long(long x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long vval_ulong(unsigned long x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  long long vval_llong(long long x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  unsigned long long vval_ullong(unsigned long long x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  char vval_char(char x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pchar vval_pchar(pchar x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pcharc vval_pcharc(pcharc x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  pint vval_pint(pint x) throw (pint) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Hello vval_hello(Hello x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  MyInt vval_myint(MyInt x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<int> vval_parami(Param<int> x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<double> vval_paramd(Param<double> x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  Param<char> vval_paramc(Param<char> x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,287,vval_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,258,val_decl@*/
  size_t vval_sizet(size_t x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const bool& vref_bool(const bool& x) throw (bool) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const signed char& vref_schar(const signed char& x) throw (signed char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned char& vref_uchar(const unsigned char& x) throw (unsigned char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const int& vref_int(const int& x) throw (int) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned int& vref_uint(const unsigned int& x) throw (unsigned int) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const short& vref_short(const short& x) throw (short) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned short& vref_ushort(const unsigned short& x) throw (unsigned short) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long& vref_long(const long& x) throw (long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long& vref_ulong(const unsigned long& x) throw (unsigned long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const long long& vref_llong(const long long& x) throw (long long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const unsigned long long& vref_ullong(const unsigned long long& x) throw (unsigned long long) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const char& vref_char(const char& x) throw (char) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pchar& vref_pchar(const pchar& x) throw (pchar) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pcharc& vref_pcharc(const pcharc& x) throw (pcharc) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const pint& vref_pint(const pint& x) throw (pint) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Hello& vref_hello(const Hello& x) throw (Hello) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const MyInt& vref_myint(const MyInt& x) throw (MyInt) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<int>& vref_parami(const Param<int>& x) throw (Param<int>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<double>& vref_paramd(const Param<double>& x) throw (Param<double>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const Param<char>& vref_paramc(const Param<char>& x) throw (Param<char>) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,291,vref_decl@*/
  virtual /*@SWIG:../../../Examples/test-suite/primitive_types.i,262,ref_decl@*/
  const size_t& vref_sizet(const size_t& x) throw (size_t) { return x; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG@*/

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  bool wrp_vref_bool(bool x) { 
    return vref_bool(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  signed char wrp_vref_schar(signed char x) { 
    return vref_schar(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned char wrp_vref_uchar(unsigned char x) { 
    return vref_uchar(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  int wrp_vref_int(int x) { 
    return vref_int(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned int wrp_vref_uint(unsigned int x) { 
    return vref_uint(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  short wrp_vref_short(short x) { 
    return vref_short(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned short wrp_vref_ushort(unsigned short x) { 
    return vref_ushort(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  long wrp_vref_long(long x) { 
    return vref_long(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned long wrp_vref_ulong(unsigned long x) { 
    return vref_ulong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  long long wrp_vref_llong(long long x) { 
    return vref_llong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned long long wrp_vref_ullong(unsigned long long x) { 
    return vref_ullong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  char wrp_vref_char(char x) { 
    return vref_char(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pchar wrp_vref_pchar(pchar x) { 
    return vref_pchar(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pcharc wrp_vref_pcharc(pcharc x) { 
    return vref_pcharc(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pint wrp_vref_pint(pint x) { 
    return vref_pint(x); 
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Hello wrp_vref_hello(Hello x) { 
    return vref_hello(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  MyInt wrp_vref_myint(MyInt x) { 
    return vref_myint(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<int> wrp_vref_parami(Param<int> x) { 
    return vref_parami(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<double> wrp_vref_paramd(Param<double> x) { 
    return vref_paramd(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<char> wrp_vref_paramc(Param<char> x) { 
    return vref_paramc(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  size_t wrp_vref_sizet(size_t x) { 
    return vref_sizet(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  bool wrp_vval_bool(bool x) { 
    return vval_bool(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  signed char wrp_vval_schar(signed char x) { 
    return vval_schar(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned char wrp_vval_uchar(unsigned char x) { 
    return vval_uchar(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  int wrp_vval_int(int x) { 
    return vval_int(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned int wrp_vval_uint(unsigned int x) { 
    return vval_uint(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  short wrp_vval_short(short x) { 
    return vval_short(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned short wrp_vval_ushort(unsigned short x) { 
    return vval_ushort(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  long wrp_vval_long(long x) { 
    return vval_long(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned long wrp_vval_ulong(unsigned long x) { 
    return vval_ulong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  long long wrp_vval_llong(long long x) { 
    return vval_llong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  unsigned long long wrp_vval_ullong(unsigned long long x) { 
    return vval_ullong(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  char wrp_vval_char(char x) { 
    return vval_char(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pchar wrp_vval_pchar(pchar x) { 
    return vval_pchar(x); 
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pcharc wrp_vval_pcharc(pcharc x) { 
    return vval_pcharc(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  pint wrp_vval_pint(pint x) { 
    return vval_pint(x); 
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Hello wrp_vval_hello(Hello x) { 
    return vval_hello(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  MyInt wrp_vval_myint(MyInt x) { 
    return vval_myint(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<int> wrp_vval_parami(Param<int> x) { 
    return vval_parami(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<double> wrp_vval_paramd(Param<double> x) { 
    return vval_paramd(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  Param<char> wrp_vval_paramc(Param<char> x) { 
    return vval_paramc(x); 
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,345,wrp_decl@*/
  size_t wrp_vval_sizet(size_t x) { 
    return vval_sizet(x); 
  }
/*@SWIG@*/
/*@SWIG@*/

   int c_check() 
   {
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  bool vval_tmpbool = 1;
  if (vval_bool(vval_tmpbool) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_bool(vval_tmpbool);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  signed char vval_tmpschar = 1;
  if (vval_schar(vval_tmpschar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_schar(vval_tmpschar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned char vval_tmpuchar = 1;
  if (vval_uchar(vval_tmpuchar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_uchar(vval_tmpuchar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  int vval_tmpint = 1;
  if (vval_int(vval_tmpint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_int(vval_tmpint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned int vval_tmpuint = 1;
  if (vval_uint(vval_tmpuint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_uint(vval_tmpuint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  short vval_tmpshort = 1;
  if (vval_short(vval_tmpshort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_short(vval_tmpshort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned short vval_tmpushort = 1;
  if (vval_ushort(vval_tmpushort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_ushort(vval_tmpushort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long vval_tmplong = 1;
  if (vval_long(vval_tmplong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_long(vval_tmplong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long vval_tmpulong = 1;
  if (vval_ulong(vval_tmpulong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_ulong(vval_tmpulong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long long vval_tmpllong = 1;
  if (vval_llong(vval_tmpllong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_llong(vval_tmpllong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long long vval_tmpullong = 1;
  if (vval_ullong(vval_tmpullong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_ullong(vval_tmpullong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  char vval_tmpchar = 'H';
  if (vval_char(vval_tmpchar) != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << vval_char(vval_tmpchar);
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pchar vval_tmppchar = def_pchar;
  if (vval_pchar(vval_tmppchar) != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << vval_pchar(vval_tmppchar);
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pcharc vval_tmppcharc = def_pcharc;
  if (vval_pcharc(vval_tmppcharc) != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << vval_pcharc(vval_tmppcharc);
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pint vval_tmppint = 0;
  if (vval_pint(vval_tmppint) != 0) {
    std::ostringstream a; std::ostringstream b;
    a << vval_pint(vval_tmppint);
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Hello vval_tmphello = Hola;
  if (vval_hello(vval_tmphello) != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << vval_hello(vval_tmphello);
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  MyInt vval_tmpmyint = 1;
  if (vval_myint(vval_tmpmyint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_myint(vval_tmpmyint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<int> vval_tmpparami = 1;
  if (vval_parami(vval_tmpparami) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_parami(vval_tmpparami);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<double> vval_tmpparamd = 1;
  if (vval_paramd(vval_tmpparamd) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_paramd(vval_tmpparamd);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<char> vval_tmpparamc = 'c';
  if (vval_paramc(vval_tmpparamc) != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << vval_paramc(vval_tmpparamc);
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  size_t vval_tmpsizet = 1;
  if (vval_sizet(vval_tmpsizet) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vval_sizet(vval_tmpsizet);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vval""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  bool vref_tmpbool = 1;
  if (vref_bool(vref_tmpbool) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_bool(vref_tmpbool);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  signed char vref_tmpschar = 1;
  if (vref_schar(vref_tmpschar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_schar(vref_tmpschar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned char vref_tmpuchar = 1;
  if (vref_uchar(vref_tmpuchar) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_uchar(vref_tmpuchar);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  int vref_tmpint = 1;
  if (vref_int(vref_tmpint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_int(vref_tmpint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned int vref_tmpuint = 1;
  if (vref_uint(vref_tmpuint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_uint(vref_tmpuint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  short vref_tmpshort = 1;
  if (vref_short(vref_tmpshort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_short(vref_tmpshort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned short vref_tmpushort = 1;
  if (vref_ushort(vref_tmpushort) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_ushort(vref_tmpushort);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long vref_tmplong = 1;
  if (vref_long(vref_tmplong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_long(vref_tmplong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long vref_tmpulong = 1;
  if (vref_ulong(vref_tmpulong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_ulong(vref_tmpulong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  long long vref_tmpllong = 1;
  if (vref_llong(vref_tmpllong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_llong(vref_tmpllong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  unsigned long long vref_tmpullong = 1;
  if (vref_ullong(vref_tmpullong) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_ullong(vref_tmpullong);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  char vref_tmpchar = 'H';
  if (vref_char(vref_tmpchar) != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << vref_char(vref_tmpchar);
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pchar vref_tmppchar = def_pchar;
  if (vref_pchar(vref_tmppchar) != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << vref_pchar(vref_tmppchar);
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pcharc vref_tmppcharc = def_pcharc;
  if (vref_pcharc(vref_tmppcharc) != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << vref_pcharc(vref_tmppcharc);
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  pint vref_tmppint = 0;
  if (vref_pint(vref_tmppint) != 0) {
    std::ostringstream a; std::ostringstream b;
    a << vref_pint(vref_tmppint);
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Hello vref_tmphello = Hola;
  if (vref_hello(vref_tmphello) != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << vref_hello(vref_tmphello);
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  MyInt vref_tmpmyint = 1;
  if (vref_myint(vref_tmpmyint) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_myint(vref_tmpmyint);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<int> vref_tmpparami = 1;
  if (vref_parami(vref_tmpparami) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_parami(vref_tmpparami);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<double> vref_tmpparamd = 1;
  if (vref_paramd(vref_tmpparamd) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_paramd(vref_tmpparamd);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  Param<char> vref_tmpparamc = 'c';
  if (vref_paramc(vref_tmpparamc) != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << vref_paramc(vref_tmpparamc);
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,331,call_check@*/
  size_t vref_tmpsizet = 1;
  if (vref_sizet(vref_tmpsizet) != 1) {
    std::ostringstream a; std::ostringstream b;
    a << vref_sizet(vref_tmpsizet);
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in vref""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      // return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     return 1;
   }

   int v_check() 
   {
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << stc_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (stc_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << stc_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in stc""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << var_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pchar != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << var_pchar;
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pcharc != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << var_pcharc;
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pint != 0) {
    std::ostringstream a; std::ostringstream b;
    a << var_pint;
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_hello != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << var_hello;
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_myint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_myint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_parami != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_parami;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramd != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_paramd;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramc != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << var_paramc;
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_sizet != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_sizet;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
     return 1;
   }

   /*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(bool x) { return 1; }
  virtual int ovr_ref(const bool& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(signed char x) { return 1; }
  virtual int ovr_ref(const signed char& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned char x) { return 1; }
  virtual int ovr_ref(const unsigned char& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(int x) { return 1; }
  virtual int ovr_ref(const int& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned int x) { return 1; }
  virtual int ovr_ref(const unsigned int& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(short x) { return 1; }
  virtual int ovr_ref(const short& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned short x) { return 1; }
  virtual int ovr_ref(const unsigned short& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(long x) { return 1; }
  virtual int ovr_ref(const long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned long x) { return 1; }
  virtual int ovr_ref(const unsigned long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(long long x) { return 1; }
  virtual int ovr_ref(const long long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(unsigned long long x) { return 1; }
  virtual int ovr_ref(const unsigned long long& x) { return 1; }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(char x) { return 1; }
  virtual int ovr_ref(const char& x) { return 1; }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,352,ovr_decl@*/
  virtual int ovr_val(pchar x) { return 1; }
  virtual int ovr_ref(const pchar& x) { return 1; }
/*@SWIG@*/
/*@SWIG@*/
   

   virtual Test* vtest(Test* t) const throw (Test)
   {
     return t;
   }
   
 }; 

 int v_check() 
 {
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << cct_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_pchar != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << cct_pchar;
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_pcharc != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << cct_pcharc;
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_pint != 0) {
    std::ostringstream a; std::ostringstream b;
    a << cct_pint;
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_hello != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << cct_hello;
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_myint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_myint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_parami != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_parami;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_paramd != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_paramd;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_paramc != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << cct_paramc;
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (cct_sizet != 1) {
    std::ostringstream a; std::ostringstream b;
    a << cct_sizet;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in cct""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,243,%test_prim_types@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,237,%test_prim_types_ovr@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,220,%test_prim_types_stc@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_bool != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_bool;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""bool : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_schar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_schar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""schar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uchar != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uchar;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_int != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_int;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""int : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_uint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_uint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""uint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_short != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_short;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""short : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ushort != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ushort;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ushort : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_long != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_long;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""long : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ulong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ulong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ulong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_llong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_llong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""llong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_ullong != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_ullong;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""ullong : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_char != 'H') {
    std::ostringstream a; std::ostringstream b;
    a << var_char;
    b << 'H';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""char : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pchar != def_pchar) {
    std::ostringstream a; std::ostringstream b;
    a << var_pchar;
    b << def_pchar;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pchar : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pcharc != def_pcharc) {
    std::ostringstream a; std::ostringstream b;
    a << var_pcharc;
    b << def_pcharc;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pcharc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_pint != 0) {
    std::ostringstream a; std::ostringstream b;
    a << var_pint;
    b << 0;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""pint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/* these ones should behave like primitive types too */
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_hello != Hola) {
    std::ostringstream a; std::ostringstream b;
    a << var_hello;
    b << Hola;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""hello : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_myint != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_myint;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""myint : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_parami != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_parami;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""parami : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramd != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_paramd;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramd : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_paramc != 'c') {
    std::ostringstream a; std::ostringstream b;
    a << var_paramc;
    b << 'c';
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""paramc : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_sizet != 1) {
    std::ostringstream a; std::ostringstream b;
    a << var_sizet;
    b << 1;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""sizet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/
/*@SWIG@*/
   /*@SWIG:../../../Examples/test-suite/primitive_types.i,317,var_check@*/
  if (var_namet != def_namet) {
    std::ostringstream a; std::ostringstream b;
    a << var_namet;
    b << def_namet;
    if (a.str() != b.str()) {
      std::cout << "failing in var""_""namet : "
		<< a.str() << " : " << b.str() << std::endl;
      //      return 0;
    }
  }
/*@SWIG@*/;
   return 1;
 }




  const char* char_foo(float f, const char *s) {
    return s;
  }
  
  int char_foo(double d, int i) {
    return i;
  }
  


SWIGINTERN int
SWIG_AsVal_float SWIG_PERL_DECL_ARGS_2(SV * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


  const double Test::stc_double = 1;
  const double Test::stc_float = 1;


    namespace DCTypes
    {
        typedef const unsigned int cuint;
    }

    namespace DCSystem
    {
        using namespace DCTypes;
        unsigned int SetPos(cuint& x, cuint& y) {return x + y;}
    }

    double val_double_2(double x, const double& y = 3.0) {
      return x + y;
    } 

    double val_double(double x) {
      return x;
    } 

    float val_float_2(float x, const float& y = 3.0) {
      return x + y;
    } 

    // Regression test for bug1699646 - we weren't handling
    // + or - after e for float constants.
    float regression_test_for_bug1699646(float f = 1e-02f) {
      return f;
    } 

    float val_float(float x) {
      return x;
    } 


SWIGINTERNINLINE SV *
SWIG_From_float  SWIG_PERL_DECL_ARGS_1(float value)
{    
  return SWIG_From_double  SWIG_PERL_CALL_ARGS_1(value);
}


  static char *new_pchar(size_t nelements) { 
    return (new char[nelements]);
  }

  static void delete_pchar(char *ary) {
    delete[] ary;
  }

  static char pchar_getitem(char *ary, size_t index) {
    return ary[index];
  }
  static void pchar_setitem(char *ary, size_t index, char value) {
    ary[index] = value;
  }

#ifdef __cplusplus
extern "C" {
#endif

#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_primitive_types_var::
class _wrap_primitive_types_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *SWIGUNUSEDPARM(sv), MAGIC *SWIGUNUSEDPARM(mg)) {
    MAGIC_PPERL
    croak("Value is read-only.");
    return 0;
}
SWIGCLASS_STATIC int _wrap_def_pchar_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtr(def_pchar))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_def_pcharc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtr(def_pcharc))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_def_namet_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  size_t size = 5;
  
  while (size && (def_namet[size - 1] == '\0')) --size;
  
  sv_setsv(sv,SWIG_FromCharPtrAndSize(def_namet, size))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_gbl_namet_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int res = SWIG_AsCharArray(sv, gbl_namet, 5);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""gbl_namet""' of type '""char [5]""'");
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_gbl_namet_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  size_t size = 5;
  
  while (size && (gbl_namet[size - 1] == '\0')) --size;
  
  sv_setsv(sv,SWIG_FromCharPtrAndSize(gbl_namet, size))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_fixsize_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int res = SWIG_AsCharArray(sv, fixsize, 8);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""fixsize""' of type '""char [8]""'");
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_fixsize_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtrAndSize(fixsize, 8))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_bool_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(cct_bool)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_schar_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(cct_schar)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_uchar_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(cct_uchar)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_int_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(cct_int)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_uint_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(cct_uint)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_short_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(cct_short)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_ushort_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(cct_ushort)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_long_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(cct_long)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_ulong_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(cct_ulong)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_llong_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(cct_llong)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_ullong_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(cct_ullong)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_char_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(cct_char)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_pchar_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtr(cct_pchar))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_pcharc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtr(cct_pcharc))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_pint_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtr(cct_pint))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_hello_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(cct_hello)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_myint_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(cct_myint)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_parami_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(cct_parami)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_paramd_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(cct_paramd)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_paramc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(cct_paramc)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cct_sizet_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(cct_sizet)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_bool_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    bool val;
    int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_bool""' of type '""bool""'");
    }
    var_bool = static_cast< bool >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_bool_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(var_bool)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_schar_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    signed char val;
    int res = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_schar""' of type '""signed char""'");
    }
    var_schar = static_cast< signed char >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_schar_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(var_schar)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_uchar_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    unsigned char val;
    int res = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_uchar""' of type '""unsigned char""'");
    }
    var_uchar = static_cast< unsigned char >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_uchar_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(var_uchar)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_int_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_int""' of type '""int""'");
    }
    var_int = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_int_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(var_int)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_uint_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    unsigned int val;
    int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_uint""' of type '""unsigned int""'");
    }
    var_uint = static_cast< unsigned int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_uint_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(var_uint)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_short_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    short val;
    int res = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_short""' of type '""short""'");
    }
    var_short = static_cast< short >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_short_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(var_short)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_ushort_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    unsigned short val;
    int res = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_ushort""' of type '""unsigned short""'");
    }
    var_ushort = static_cast< unsigned short >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_ushort_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(var_ushort)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_long_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    long val;
    int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_long""' of type '""long""'");
    }
    var_long = static_cast< long >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_long_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(var_long)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_ulong_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    unsigned long val;
    int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_ulong""' of type '""unsigned long""'");
    }
    var_ulong = static_cast< unsigned long >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_ulong_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(var_ulong)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_llong_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    long long val;
    int res = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_llong""' of type '""long long""'");
    }
    var_llong = static_cast< long long >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_llong_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(var_llong)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_ullong_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    unsigned long long val;
    int res = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_ullong""' of type '""unsigned long long""'");
    }
    var_ullong = static_cast< unsigned long long >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_ullong_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(var_ullong)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_char_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    char val;
    int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_char""' of type '""char""'");
    }
    var_char = static_cast< char >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_char_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(var_char)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_pchar_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(sv, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_pchar""' of type '""pchar""'");
    }
    if (var_pchar) delete[] var_pchar;
    if (alloc == SWIG_NEWOBJ) {
      var_pchar = cptr;
    } else {
      var_pchar = csize ? (pchar)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_pchar_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtr(var_pchar))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_pcharc_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(sv, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_pcharc""' of type '""pcharc""'");
    }
    if (alloc == SWIG_NEWOBJ) {
      var_pcharc = cptr;
    } else {
      var_pcharc = csize ? (pcharc)reinterpret_cast< char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_pcharc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtr(var_pcharc))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_pint_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    void *temp = 0;
    int res = SWIG_ConvertPtr(sv, &temp, 0, SWIG_POINTER_DISOWN);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_pint""' of type '""pint""'");
    }
    var_pint = (pint) temp;
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_pint_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtr(var_pint))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_hello_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  if (sizeof(int) != sizeof(var_hello)) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""arch, read-only var_hello""' of type '""Hello""'");
  }  else {
    int ecode = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, reinterpret_cast< int* >(&var_hello));
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in variable '""var_hello""' of type '""Hello""'");
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_hello_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(var_hello)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_myint_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_myint""' of type '""MyInt""'");
    }
    var_myint = static_cast< MyInt >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_myint_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(var_myint)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_parami_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_parami""' of type '""Param< int >""'");
    }
    var_parami = static_cast< Param< int > >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_parami_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(var_parami)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_paramd_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    double val;
    int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_paramd""' of type '""Param< double >""'");
    }
    var_paramd = static_cast< Param< double > >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_paramd_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(var_paramd)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_paramc_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    char val;
    int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_paramc""' of type '""Param< char >""'");
    }
    var_paramc = static_cast< Param< char > >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_paramc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(var_paramc)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_sizet_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    size_t val;
    int res = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_sizet""' of type '""size_t""'");
    }
    var_sizet = static_cast< size_t >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_sizet_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(var_sizet)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_namet_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int res = SWIG_AsCharArray(sv, var_namet, 5);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""var_namet""' of type '""char [5]""'");
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_var_namet_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  size_t size = 5;
  
  while (size && (var_namet[size - 1] == '\0')) --size;
  
  sv_setsv(sv,SWIG_FromCharPtrAndSize(var_namet, size))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_Test_stc_double_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(Test::stc_double)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_Test_stc_float_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(Test::stc_float)))  ;
  return 1;
}




#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_val_bool) {
  {
    bool arg1 ;
    bool val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_bool(x);");
    }
    ecode1 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_bool" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
    try {
      result = (bool)val_bool(arg1);
    }
    catch(bool &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_schar) {
  {
    signed char arg1 ;
    signed char val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    signed char result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_schar(x);");
    }
    ecode1 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_schar" "', argument " "1"" of type '" "signed char""'");
    } 
    arg1 = static_cast< signed char >(val1);
    try {
      result = (signed char)val_schar(arg1);
    }
    catch(signed char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_uchar) {
  {
    unsigned char arg1 ;
    unsigned char val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    unsigned char result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_uchar(x);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_uchar" "', argument " "1"" of type '" "unsigned char""'");
    } 
    arg1 = static_cast< unsigned char >(val1);
    try {
      result = (unsigned char)val_uchar(arg1);
    }
    catch(unsigned char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_int) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_int(x);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_int" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    try {
      result = (int)val_int(arg1);
    }
    catch(int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_uint) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_uint(x);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_uint" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    try {
      result = (unsigned int)val_uint(arg1);
    }
    catch(unsigned int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_short) {
  {
    short arg1 ;
    short val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    short result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_short(x);");
    }
    ecode1 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_short" "', argument " "1"" of type '" "short""'");
    } 
    arg1 = static_cast< short >(val1);
    try {
      result = (short)val_short(arg1);
    }
    catch(short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_ushort) {
  {
    unsigned short arg1 ;
    unsigned short val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    unsigned short result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_ushort(x);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_ushort" "', argument " "1"" of type '" "unsigned short""'");
    } 
    arg1 = static_cast< unsigned short >(val1);
    try {
      result = (unsigned short)val_ushort(arg1);
    }
    catch(unsigned short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_long) {
  {
    long arg1 ;
    long val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_long(x);");
    }
    ecode1 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_long" "', argument " "1"" of type '" "long""'");
    } 
    arg1 = static_cast< long >(val1);
    try {
      result = (long)val_long(arg1);
    }
    catch(long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_ulong) {
  {
    unsigned long arg1 ;
    unsigned long val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    unsigned long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_ulong(x);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_ulong" "', argument " "1"" of type '" "unsigned long""'");
    } 
    arg1 = static_cast< unsigned long >(val1);
    try {
      result = (unsigned long)val_ulong(arg1);
    }
    catch(unsigned long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_llong) {
  {
    long long arg1 ;
    long long val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    long long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_llong(x);");
    }
    ecode1 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_llong" "', argument " "1"" of type '" "long long""'");
    } 
    arg1 = static_cast< long long >(val1);
    try {
      result = (long long)val_llong(arg1);
    }
    catch(long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_ullong) {
  {
    unsigned long long arg1 ;
    unsigned long long val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    unsigned long long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_ullong(x);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_ullong" "', argument " "1"" of type '" "unsigned long long""'");
    } 
    arg1 = static_cast< unsigned long long >(val1);
    try {
      result = (unsigned long long)val_ullong(arg1);
    }
    catch(unsigned long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_char) {
  {
    char arg1 ;
    char val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    char result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_char(x);");
    }
    ecode1 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_char" "', argument " "1"" of type '" "char""'");
    } 
    arg1 = static_cast< char >(val1);
    try {
      result = (char)val_char(arg1);
    }
    catch(char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_pchar) {
  {
    pchar arg1 = (pchar) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    pchar result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_pchar(x);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "val_pchar" "', argument " "1"" of type '" "pchar""'");
    }
    arg1 = reinterpret_cast< pchar >(buf1);
    try {
      result = (pchar)val_pchar(arg1);
    }
    catch(pchar _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_val_pcharc) {
  {
    pcharc arg1 = (pcharc) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    pcharc result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_pcharc(x);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "val_pcharc" "', argument " "1"" of type '" "pcharc""'");
    }
    arg1 = reinterpret_cast< pcharc >(buf1);
    try {
      result = (pcharc)val_pcharc((char const *)arg1);
    }
    catch(pcharc _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_val_pint) {
  {
    pint arg1 = (pint) 0 ;
    int res1 ;
    int argvi = 0;
    pint result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_pint(x);");
    }
    res1 = SWIG_ConvertPtr(ST(0),SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "val_pint" "', argument " "1"" of type '" "pint""'"); 
    }
    try {
      result = (pint)val_pint(arg1);
    }
    catch(pint _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_hello) {
  {
    Hello arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Hello result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_hello(x);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_hello" "', argument " "1"" of type '" "Hello""'");
    } 
    arg1 = static_cast< Hello >(val1);
    try {
      result = (Hello)val_hello(arg1);
    }
    catch(Hello &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_myint) {
  {
    MyInt arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    MyInt result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_myint(x);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_myint" "', argument " "1"" of type '" "MyInt""'");
    } 
    arg1 = static_cast< MyInt >(val1);
    try {
      result = val_myint(arg1);
    }
    catch(MyInt &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_parami) {
  {
    Param< int > arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Param< int > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_parami(x);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_parami" "', argument " "1"" of type '" "Param< int >""'");
    } 
    arg1 = static_cast< Param< int > >(val1);
    try {
      result = val_parami(arg1);
    }
    catch(Param< int > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_paramd) {
  {
    Param< double > arg1 ;
    double val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Param< double > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_paramd(x);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_paramd" "', argument " "1"" of type '" "Param< double >""'");
    } 
    arg1 = static_cast< Param< double > >(val1);
    try {
      result = val_paramd(arg1);
    }
    catch(Param< double > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_paramc) {
  {
    Param< char > arg1 ;
    char val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Param< char > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_paramc(x);");
    }
    ecode1 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_paramc" "', argument " "1"" of type '" "Param< char >""'");
    } 
    arg1 = static_cast< Param< char > >(val1);
    try {
      result = val_paramc(arg1);
    }
    catch(Param< char > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_sizet) {
  {
    size_t arg1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_sizet(x);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_sizet" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
    try {
      result = val_sizet(arg1);
    }
    catch(size_t &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_bool) {
  {
    bool *arg1 = 0 ;
    bool temp1 ;
    bool val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    bool *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_bool(x);");
    }
    ecode1 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_bool" "', argument " "1"" of type '" "bool""'");
    } 
    temp1 = static_cast< bool >(val1);
    arg1 = &temp1;
    try {
      result = (bool *) &ref_bool((bool const &)*arg1);
    }
    catch(bool &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_schar) {
  {
    signed char *arg1 = 0 ;
    signed char temp1 ;
    signed char val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    signed char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_schar(x);");
    }
    ecode1 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_schar" "', argument " "1"" of type '" "signed char""'");
    } 
    temp1 = static_cast< signed char >(val1);
    arg1 = &temp1;
    try {
      result = (signed char *) &ref_schar((signed char const &)*arg1);
    }
    catch(signed char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_uchar) {
  {
    unsigned char *arg1 = 0 ;
    unsigned char temp1 ;
    unsigned char val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    unsigned char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_uchar(x);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_uchar" "', argument " "1"" of type '" "unsigned char""'");
    } 
    temp1 = static_cast< unsigned char >(val1);
    arg1 = &temp1;
    try {
      result = (unsigned char *) &ref_uchar((unsigned char const &)*arg1);
    }
    catch(unsigned char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_int) {
  {
    int *arg1 = 0 ;
    int temp1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_int(x);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_int" "', argument " "1"" of type '" "int""'");
    } 
    temp1 = static_cast< int >(val1);
    arg1 = &temp1;
    try {
      result = (int *) &ref_int((int const &)*arg1);
    }
    catch(int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_uint) {
  {
    unsigned int *arg1 = 0 ;
    unsigned int temp1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    unsigned int *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_uint(x);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_uint" "', argument " "1"" of type '" "unsigned int""'");
    } 
    temp1 = static_cast< unsigned int >(val1);
    arg1 = &temp1;
    try {
      result = (unsigned int *) &ref_uint((unsigned int const &)*arg1);
    }
    catch(unsigned int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_short) {
  {
    short *arg1 = 0 ;
    short temp1 ;
    short val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    short *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_short(x);");
    }
    ecode1 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_short" "', argument " "1"" of type '" "short""'");
    } 
    temp1 = static_cast< short >(val1);
    arg1 = &temp1;
    try {
      result = (short *) &ref_short((short const &)*arg1);
    }
    catch(short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_ushort) {
  {
    unsigned short *arg1 = 0 ;
    unsigned short temp1 ;
    unsigned short val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    unsigned short *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_ushort(x);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_ushort" "', argument " "1"" of type '" "unsigned short""'");
    } 
    temp1 = static_cast< unsigned short >(val1);
    arg1 = &temp1;
    try {
      result = (unsigned short *) &ref_ushort((unsigned short const &)*arg1);
    }
    catch(unsigned short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_long) {
  {
    long *arg1 = 0 ;
    long temp1 ;
    long val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    long *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_long(x);");
    }
    ecode1 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_long" "', argument " "1"" of type '" "long""'");
    } 
    temp1 = static_cast< long >(val1);
    arg1 = &temp1;
    try {
      result = (long *) &ref_long((long const &)*arg1);
    }
    catch(long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_ulong) {
  {
    unsigned long *arg1 = 0 ;
    unsigned long temp1 ;
    unsigned long val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    unsigned long *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_ulong(x);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_ulong" "', argument " "1"" of type '" "unsigned long""'");
    } 
    temp1 = static_cast< unsigned long >(val1);
    arg1 = &temp1;
    try {
      result = (unsigned long *) &ref_ulong((unsigned long const &)*arg1);
    }
    catch(unsigned long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_llong) {
  {
    long long *arg1 = 0 ;
    long long temp1 ;
    long long val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    long long *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_llong(x);");
    }
    ecode1 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_llong" "', argument " "1"" of type '" "long long""'");
    } 
    temp1 = static_cast< long long >(val1);
    arg1 = &temp1;
    try {
      result = (long long *) &ref_llong((long long const &)*arg1);
    }
    catch(long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_ullong) {
  {
    unsigned long long *arg1 = 0 ;
    unsigned long long temp1 ;
    unsigned long long val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    unsigned long long *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_ullong(x);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_ullong" "', argument " "1"" of type '" "unsigned long long""'");
    } 
    temp1 = static_cast< unsigned long long >(val1);
    arg1 = &temp1;
    try {
      result = (unsigned long long *) &ref_ullong((unsigned long long const &)*arg1);
    }
    catch(unsigned long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_char) {
  {
    char *arg1 = 0 ;
    char temp1 ;
    char val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_char(x);");
    }
    ecode1 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_char" "', argument " "1"" of type '" "char""'");
    } 
    temp1 = static_cast< char >(val1);
    arg1 = &temp1;
    try {
      result = (char *) &ref_char((char const &)*arg1);
    }
    catch(char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_pchar) {
  {
    pchar *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    pchar temp1 ;
    int argvi = 0;
    pchar *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_pchar(x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_char, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ref_pchar" "', argument " "1"" of type '" "pchar""'"); 
    }
    temp1 = reinterpret_cast< pchar >(argp1);
    arg1 = reinterpret_cast< pchar * >(&temp1);
    try {
      result = (pchar *) &ref_pchar((char *const &)*arg1);
    }
    catch(pchar _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_pcharc) {
  {
    pcharc *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    pcharc temp1 ;
    int argvi = 0;
    pcharc *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_pcharc(x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_char, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ref_pcharc" "', argument " "1"" of type '" "pcharc""'"); 
    }
    temp1 = reinterpret_cast< pcharc >(argp1);
    arg1 = reinterpret_cast< pcharc * >(&temp1);
    try {
      result = (pcharc *) &ref_pcharc((char const *const &)*arg1);
    }
    catch(pcharc _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_pint) {
  {
    pint *arg1 = 0 ;
    pint temp1 = 0 ;
    int res1 ;
    int argvi = 0;
    pint *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_pint(x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), SWIG_as_voidptrptr(&temp1), 0, 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ref_pint" "', argument " "1"" of type '" "Stype""'"); 
    }
    arg1 =  &temp1;
    try {
      result = (pint *) &ref_pint((char *const &)*arg1);
    }
    catch(pint _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_hello) {
  {
    Hello *arg1 = 0 ;
    int val1 ;
    int ecode1 ;
    Hello temp1 ;
    int argvi = 0;
    Hello *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_hello(x);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_hello" "', argument " "1"" of type '" "Hello const &""'");
    } else {
      temp1 = static_cast< Hello >(val1);
      arg1 = &temp1;
    }
    try {
      result = (Hello *) &ref_hello((enum Hello const &)*arg1);
    }
    catch(Hello &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_myint) {
  {
    MyInt *arg1 = 0 ;
    MyInt temp1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    MyInt *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_myint(x);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_myint" "', argument " "1"" of type '" "MyInt""'");
    } 
    temp1 = static_cast< MyInt >(val1);
    arg1 = &temp1;
    try {
      result = (MyInt *) &ref_myint((MyInt const &)*arg1);
    }
    catch(MyInt &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_parami) {
  {
    Param< int > *arg1 = 0 ;
    Param< int > temp1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Param< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_parami(x);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_parami" "', argument " "1"" of type '" "Param< int >""'");
    } 
    temp1 = static_cast< Param< int > >(val1);
    arg1 = &temp1;
    try {
      result = (Param< int > *) &ref_parami((Param< int > const &)*arg1);
    }
    catch(Param< int > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_paramd) {
  {
    Param< double > *arg1 = 0 ;
    Param< double > temp1 ;
    double val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Param< double > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_paramd(x);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_paramd" "', argument " "1"" of type '" "Param< double >""'");
    } 
    temp1 = static_cast< Param< double > >(val1);
    arg1 = &temp1;
    try {
      result = (Param< double > *) &ref_paramd((Param< double > const &)*arg1);
    }
    catch(Param< double > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_paramc) {
  {
    Param< char > *arg1 = 0 ;
    Param< char > temp1 ;
    char val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Param< char > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_paramc(x);");
    }
    ecode1 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_paramc" "', argument " "1"" of type '" "Param< char >""'");
    } 
    temp1 = static_cast< Param< char > >(val1);
    arg1 = &temp1;
    try {
      result = (Param< char > *) &ref_paramc((Param< char > const &)*arg1);
    }
    catch(Param< char > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ref_sizet) {
  {
    size_t *arg1 = 0 ;
    size_t temp1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    size_t *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ref_sizet(x);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ref_sizet" "', argument " "1"" of type '" "size_t""'");
    } 
    temp1 = static_cast< size_t >(val1);
    arg1 = &temp1;
    try {
      result = (size_t *) &ref_sizet((size_t const &)*arg1);
    }
    catch(size_t &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_var_init) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: var_init();");
    }
    var_init();
    ST(argvi) = sv_newmortal();
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_Foo__a_set) {
  {
    Foo *arg1 = (Foo *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Foo__a_set(self,_a);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Foo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo__a_set" "', argument " "1"" of type '" "Foo *""'"); 
    }
    arg1 = reinterpret_cast< Foo * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Foo__a_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->_a = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Foo__a_get) {
  {
    Foo *arg1 = (Foo *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Foo__a_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Foo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo__a_get" "', argument " "1"" of type '" "Foo *""'"); 
    }
    arg1 = reinterpret_cast< Foo * >(argp1);
    result = (int) ((arg1)->_a);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Foo__SWIG_0) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Foo *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_Foo(a);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Foo" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    result = (Foo *)new Foo(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Foo, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Foo__SWIG_1) {
  {
    Foo *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    Foo *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_Foo(Foo const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_Foo,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Foo" "', argument " "1"" of type '" "Foo const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Foo" "', argument " "1"" of type '" "Foo const &""'"); 
    }
    arg1 = reinterpret_cast< Foo * >(argp1);
    result = (Foo *)new Foo((Foo const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Foo, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Foo) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Foo, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_Foo__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_Foo__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_Foo'");
  XSRETURN(0);
}


XS(_wrap_Foo_copy) {
  {
    Foo *arg1 = (Foo *) 0 ;
    SwigValueWrapper< Foo > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    SwigValueWrapper< Foo > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Foo_copy(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Foo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_copy" "', argument " "1"" of type '" "Foo *""'"); 
    }
    arg1 = reinterpret_cast< Foo * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_Foo,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Foo_copy" "', argument " "2"" of type '" "Foo""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Foo_copy" "', argument " "2"" of type '" "Foo""'");
      } else {
        arg2 = *(reinterpret_cast< Foo * >(argp2));
      }
    }
    result = (arg1)->copy(arg2);
    ST(argvi) = SWIG_NewPointerObj((new Foo(static_cast< const Foo& >(result))), SWIGTYPE_p_Foo, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Foo_copy_c) {
  {
    Foo *arg1 = (Foo *) 0 ;
    SwigValueWrapper< Foo > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    SwigValueWrapper< Foo > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Foo_copy_c(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Foo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_copy_c" "', argument " "1"" of type '" "Foo *""'"); 
    }
    arg1 = reinterpret_cast< Foo * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_Foo,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Foo_copy_c" "', argument " "2"" of type '" "Foo const""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Foo_copy_c" "', argument " "2"" of type '" "Foo const""'");
      } else {
        arg2 = *(reinterpret_cast< Foo * >(argp2));
      }
    }
    result = (arg1)->copy_c(arg2);
    ST(argvi) = SWIG_NewPointerObj((new Foo(static_cast< const Foo& >(result))), SWIGTYPE_p_Foo, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Foo_copy_r) {
  {
    Foo *arg1 = (Foo *) 0 ;
    Foo *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    Foo *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Foo_copy_r(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Foo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_copy_r" "', argument " "1"" of type '" "Foo *""'"); 
    }
    arg1 = reinterpret_cast< Foo * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_Foo,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Foo_copy_r" "', argument " "2"" of type '" "Foo const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Foo_copy_r" "', argument " "2"" of type '" "Foo const &""'"); 
    }
    arg2 = reinterpret_cast< Foo * >(argp2);
    result = (Foo *) &(arg1)->copy_r((Foo const &)*arg2);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Foo, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Foo_this_p) {
  {
    Foo *arg1 = (Foo *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    Foo *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Foo_this_p(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Foo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_this_p" "', argument " "1"" of type '" "Foo *""'"); 
    }
    arg1 = reinterpret_cast< Foo * >(argp1);
    result = (Foo *)(arg1)->this_p();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Foo, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Foo_this_r) {
  {
    Foo *arg1 = (Foo *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    Foo *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Foo_this_r(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Foo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Foo_this_r" "', argument " "1"" of type '" "Foo *""'"); 
    }
    arg1 = reinterpret_cast< Foo * >(argp1);
    result = (Foo *) &(arg1)->this_r();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Foo, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Foo) {
  {
    Foo *arg1 = (Foo *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Foo(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Foo, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Foo" "', argument " "1"" of type '" "Foo *""'"); 
    }
    arg1 = reinterpret_cast< Foo * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fptr_val) {
  {
    foo_ptr arg1 = (foo_ptr) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    foo_ptr result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fptr_val(a);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Foo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fptr_val" "', argument " "1"" of type '" "foo_ptr""'"); 
    }
    arg1 = reinterpret_cast< foo_ptr >(argp1);
    result = (foo_ptr)fptr_val(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Foo, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fptr_ref) {
  {
    foo_ptr *arg1 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    foo_ptr temp1 ;
    int argvi = 0;
    foo_ptr *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fptr_ref(a);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_Foo, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fptr_ref" "', argument " "1"" of type '" "foo_ptr""'"); 
    }
    temp1 = reinterpret_cast< foo_ptr >(argp1);
    arg1 = reinterpret_cast< foo_ptr * >(&temp1);
    result = (foo_ptr *) &fptr_ref((Foo *const &)*arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_Foo, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Test) {
  {
    int argvi = 0;
    Test *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_Test();");
    }
    result = (Test *)new Test();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Test, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Test) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Test(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Test" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_bool_set) {
  {
    Test *arg1 = (Test *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_bool_set(self,var_bool);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_bool_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_bool_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->var_bool = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_bool_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_bool_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_bool_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (bool) ((arg1)->var_bool);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_schar_set) {
  {
    Test *arg1 = (Test *) 0 ;
    signed char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_schar_set(self,var_schar);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_schar_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_schar_set" "', argument " "2"" of type '" "signed char""'");
    } 
    arg2 = static_cast< signed char >(val2);
    if (arg1) (arg1)->var_schar = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_schar_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    signed char result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_schar_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_schar_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (signed char) ((arg1)->var_schar);
    ST(argvi) = SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_uchar_set) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_uchar_set(self,var_uchar);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_uchar_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_uchar_set" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    if (arg1) (arg1)->var_uchar = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_uchar_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned char result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_uchar_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_uchar_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (unsigned char) ((arg1)->var_uchar);
    ST(argvi) = SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_int_set) {
  {
    Test *arg1 = (Test *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_int_set(self,var_int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_int_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_int_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->var_int = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_int_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_int_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_int_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (int) ((arg1)->var_int);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_uint_set) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_uint_set(self,var_uint);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_uint_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_uint_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    if (arg1) (arg1)->var_uint = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_uint_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_uint_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_uint_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (unsigned int) ((arg1)->var_uint);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_short_set) {
  {
    Test *arg1 = (Test *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_short_set(self,var_short);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_short_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_short_set" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    if (arg1) (arg1)->var_short = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_short_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    short result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_short_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_short_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (short) ((arg1)->var_short);
    ST(argvi) = SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_ushort_set) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_ushort_set(self,var_ushort);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ushort_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_ushort_set" "', argument " "2"" of type '" "unsigned short""'");
    } 
    arg2 = static_cast< unsigned short >(val2);
    if (arg1) (arg1)->var_ushort = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_ushort_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned short result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_ushort_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ushort_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (unsigned short) ((arg1)->var_ushort);
    ST(argvi) = SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_long_set) {
  {
    Test *arg1 = (Test *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_long_set(self,var_long);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_long_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_long_set" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    if (arg1) (arg1)->var_long = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_long_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_long_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_long_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (long) ((arg1)->var_long);
    ST(argvi) = SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_ulong_set) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_ulong_set(self,var_ulong);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ulong_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_ulong_set" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    if (arg1) (arg1)->var_ulong = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_ulong_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_ulong_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ulong_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (unsigned long) ((arg1)->var_ulong);
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_llong_set) {
  {
    Test *arg1 = (Test *) 0 ;
    long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_llong_set(self,var_llong);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_llong_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_llong_set" "', argument " "2"" of type '" "long long""'");
    } 
    arg2 = static_cast< long long >(val2);
    if (arg1) (arg1)->var_llong = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_llong_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    long long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_llong_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_llong_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (long long) ((arg1)->var_llong);
    ST(argvi) = SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_ullong_set) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_ullong_set(self,var_ullong);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ullong_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_ullong_set" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    arg2 = static_cast< unsigned long long >(val2);
    if (arg1) (arg1)->var_ullong = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_ullong_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned long long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_ullong_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_ullong_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (unsigned long long) ((arg1)->var_ullong);
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_char_set) {
  {
    Test *arg1 = (Test *) 0 ;
    char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_char_set(self,var_char);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_char_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_char_set" "', argument " "2"" of type '" "char""'");
    } 
    arg2 = static_cast< char >(val2);
    if (arg1) (arg1)->var_char = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_char_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_char_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_char_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (char) ((arg1)->var_char);
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_pchar_set) {
  {
    Test *arg1 = (Test *) 0 ;
    pchar arg2 = (pchar) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_pchar_set(self,var_pchar);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pchar_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_var_pchar_set" "', argument " "2"" of type '" "pchar""'");
    }
    arg2 = reinterpret_cast< pchar >(buf2);
    if (arg1->var_pchar) delete[] arg1->var_pchar;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
      arg1->var_pchar = (pchar)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
    } else {
      arg1->var_pchar = 0;
    }
    ST(argvi) = sv_newmortal();
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_pchar_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    pchar result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_pchar_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pchar_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (pchar) ((arg1)->var_pchar);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_pcharc_set) {
  {
    Test *arg1 = (Test *) 0 ;
    pcharc arg2 = (pcharc) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_pcharc_set(self,var_pcharc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pcharc_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_var_pcharc_set" "', argument " "2"" of type '" "pcharc""'");
    }
    arg2 = reinterpret_cast< pcharc >(buf2);
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
      arg1->var_pcharc = (pcharc)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
    } else {
      arg1->var_pcharc = 0;
    }
    ST(argvi) = sv_newmortal();
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_pcharc_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    pcharc result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_pcharc_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pcharc_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (pcharc) ((arg1)->var_pcharc);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_pint_set) {
  {
    Test *arg1 = (Test *) 0 ;
    pint arg2 = (pint) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_pint_set(self,var_pint);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pint_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1),SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_var_pint_set" "', argument " "2"" of type '" "pint""'"); 
    }
    if (arg1->var_pint) delete[] arg1->var_pint;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
      arg1->var_pint = (pint)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
    } else {
      arg1->var_pint = 0;
    }
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_pint_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    pint result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_pint_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_pint_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (pint) ((arg1)->var_pint);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_hello_set) {
  {
    Test *arg1 = (Test *) 0 ;
    Hello arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_hello_set(self,var_hello);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_hello_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_hello_set" "', argument " "2"" of type '" "Hello""'");
    } 
    arg2 = static_cast< Hello >(val2);
    if (arg1) (arg1)->var_hello = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_hello_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    Hello result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_hello_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_hello_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (Hello) ((arg1)->var_hello);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_myint_set) {
  {
    Test *arg1 = (Test *) 0 ;
    MyInt arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_myint_set(self,var_myint);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_myint_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_myint_set" "', argument " "2"" of type '" "MyInt""'");
    } 
    arg2 = static_cast< MyInt >(val2);
    if (arg1) (arg1)->var_myint = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_myint_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    MyInt result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_myint_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_myint_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result =  ((arg1)->var_myint);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_parami_set) {
  {
    Test *arg1 = (Test *) 0 ;
    Param< int > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_parami_set(self,var_parami);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_parami_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_parami_set" "', argument " "2"" of type '" "Param< int >""'");
    } 
    arg2 = static_cast< Param< int > >(val2);
    if (arg1) (arg1)->var_parami = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_parami_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    Param< int > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_parami_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_parami_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result =  ((arg1)->var_parami);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_paramd_set) {
  {
    Test *arg1 = (Test *) 0 ;
    Param< double > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_paramd_set(self,var_paramd);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_paramd_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_paramd_set" "', argument " "2"" of type '" "Param< double >""'");
    } 
    arg2 = static_cast< Param< double > >(val2);
    if (arg1) (arg1)->var_paramd = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_paramd_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    Param< double > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_paramd_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_paramd_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result =  ((arg1)->var_paramd);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_paramc_set) {
  {
    Test *arg1 = (Test *) 0 ;
    Param< char > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_paramc_set(self,var_paramc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_paramc_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_paramc_set" "', argument " "2"" of type '" "Param< char >""'");
    } 
    arg2 = static_cast< Param< char > >(val2);
    if (arg1) (arg1)->var_paramc = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_paramc_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    Param< char > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_paramc_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_paramc_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result =  ((arg1)->var_paramc);
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_sizet_set) {
  {
    Test *arg1 = (Test *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_sizet_set(self,var_sizet);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_sizet_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_var_sizet_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->var_sizet = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_sizet_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_sizet_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_sizet_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result =  ((arg1)->var_sizet);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_namet_set) {
  {
    Test *arg1 = (Test *) 0 ;
    char *arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char temp2[5] ;
    int res2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_var_namet_set(self,var_namet);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_namet_set" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_AsCharArray(ST(1), temp2, 5);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_var_namet_set" "', argument " "2"" of type '" "char [5]""'");
    }
    arg2 = reinterpret_cast< char * >(temp2);
    if (arg2) memcpy(arg1->var_namet,arg2,5*sizeof(char));
    else memset(arg1->var_namet,0,5*sizeof(char));
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_var_namet_get) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_var_namet_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_var_namet_get" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (char *) ((arg1)->var_namet);
    {
      size_t size = 5;
      
      while (size && (result[size - 1] == '\0')) --size;
      
      ST(argvi) = SWIG_FromCharPtrAndSize(result, size); argvi++ ;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_namet) {
  {
    Test *arg1 = (Test *) 0 ;
    char *arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char temp2[5] ;
    int res2 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_namet(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_namet" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_AsCharArray(ST(1), temp2, 5);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_namet" "', argument " "2"" of type '" "char [5]""'");
    }
    arg2 = reinterpret_cast< char * >(temp2);
    try {
      result = (char *)(arg1)->val_namet(arg2);
    }
    catch(namet _e) {
      {
        size_t size = 5;
        
        while (size && (_e[size - 1] == '\0')) --size;
        
        sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtrAndSize(_e, size)); SWIG_fail ; 
      }
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_cnamet) {
  {
    Test *arg1 = (Test *) 0 ;
    char *arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char temp2[5] ;
    int res2 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_cnamet(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_cnamet" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_AsCharArray(ST(1), temp2, 5);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_cnamet" "', argument " "2"" of type '" "char const [5]""'");
    }
    arg2 = reinterpret_cast< char * >(temp2);
    try {
      result = (char *)(arg1)->val_cnamet(arg2);
    }
    catch(namet _e) {
      {
        size_t size = 5;
        
        while (size && (_e[size - 1] == '\0')) --size;
        
        sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtrAndSize(_e, size)); SWIG_fail ; 
      }
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_bool) {
  {
    Test *arg1 = (Test *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_bool(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_bool" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_bool" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    try {
      result = (bool)(arg1)->val_bool(arg2);
    }
    catch(bool &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_schar) {
  {
    Test *arg1 = (Test *) 0 ;
    signed char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    signed char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_schar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_schar" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_schar" "', argument " "2"" of type '" "signed char""'");
    } 
    arg2 = static_cast< signed char >(val2);
    try {
      result = (signed char)(arg1)->val_schar(arg2);
    }
    catch(signed char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_uchar) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_uchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_uchar" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_uchar" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    try {
      result = (unsigned char)(arg1)->val_uchar(arg2);
    }
    catch(unsigned char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_int) {
  {
    Test *arg1 = (Test *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_int(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_int" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_int" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (int)(arg1)->val_int(arg2);
    }
    catch(int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_uint) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_uint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_uint" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_uint" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    try {
      result = (unsigned int)(arg1)->val_uint(arg2);
    }
    catch(unsigned int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_short) {
  {
    Test *arg1 = (Test *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    short result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_short(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_short" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_short" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    try {
      result = (short)(arg1)->val_short(arg2);
    }
    catch(short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_ushort) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned short result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_ushort(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_ushort" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_ushort" "', argument " "2"" of type '" "unsigned short""'");
    } 
    arg2 = static_cast< unsigned short >(val2);
    try {
      result = (unsigned short)(arg1)->val_ushort(arg2);
    }
    catch(unsigned short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_long) {
  {
    Test *arg1 = (Test *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_long(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_long" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_long" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    try {
      result = (long)(arg1)->val_long(arg2);
    }
    catch(long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_ulong) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_ulong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_ulong" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_ulong" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    try {
      result = (unsigned long)(arg1)->val_ulong(arg2);
    }
    catch(unsigned long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_llong) {
  {
    Test *arg1 = (Test *) 0 ;
    long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_llong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_llong" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_llong" "', argument " "2"" of type '" "long long""'");
    } 
    arg2 = static_cast< long long >(val2);
    try {
      result = (long long)(arg1)->val_llong(arg2);
    }
    catch(long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_ullong) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_ullong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_ullong" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_ullong" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    arg2 = static_cast< unsigned long long >(val2);
    try {
      result = (unsigned long long)(arg1)->val_ullong(arg2);
    }
    catch(unsigned long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_char) {
  {
    Test *arg1 = (Test *) 0 ;
    char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_char(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_char" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_char" "', argument " "2"" of type '" "char""'");
    } 
    arg2 = static_cast< char >(val2);
    try {
      result = (char)(arg1)->val_char(arg2);
    }
    catch(char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_pchar) {
  {
    Test *arg1 = (Test *) 0 ;
    pchar arg2 = (pchar) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    pchar result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_pchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_pchar" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_pchar" "', argument " "2"" of type '" "pchar""'");
    }
    arg2 = reinterpret_cast< pchar >(buf2);
    try {
      result = (pchar)(arg1)->val_pchar(arg2);
    }
    catch(pchar _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_pcharc) {
  {
    Test *arg1 = (Test *) 0 ;
    pcharc arg2 = (pcharc) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    pcharc result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_pcharc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_pcharc" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_pcharc" "', argument " "2"" of type '" "pcharc""'");
    }
    arg2 = reinterpret_cast< pcharc >(buf2);
    try {
      result = (pcharc)(arg1)->val_pcharc(arg2);
    }
    catch(pcharc _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_pint) {
  {
    Test *arg1 = (Test *) 0 ;
    pint arg2 = (pint) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    int argvi = 0;
    pint result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_pint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_pint" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_val_pint" "', argument " "2"" of type '" "pint""'"); 
    }
    try {
      result = (pint)(arg1)->val_pint(arg2);
    }
    catch(pint _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_hello) {
  {
    Test *arg1 = (Test *) 0 ;
    Hello arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Hello result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_hello(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_hello" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_hello" "', argument " "2"" of type '" "Hello""'");
    } 
    arg2 = static_cast< Hello >(val2);
    try {
      result = (Hello)(arg1)->val_hello(arg2);
    }
    catch(Hello &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_myint) {
  {
    Test *arg1 = (Test *) 0 ;
    MyInt arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    MyInt result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_myint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_myint" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_myint" "', argument " "2"" of type '" "MyInt""'");
    } 
    arg2 = static_cast< MyInt >(val2);
    try {
      result = (arg1)->val_myint(arg2);
    }
    catch(MyInt &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_parami) {
  {
    Test *arg1 = (Test *) 0 ;
    Param< int > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< int > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_parami(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_parami" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_parami" "', argument " "2"" of type '" "Param< int >""'");
    } 
    arg2 = static_cast< Param< int > >(val2);
    try {
      result = (arg1)->val_parami(arg2);
    }
    catch(Param< int > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_paramd) {
  {
    Test *arg1 = (Test *) 0 ;
    Param< double > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< double > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_paramd(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_paramd" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_paramd" "', argument " "2"" of type '" "Param< double >""'");
    } 
    arg2 = static_cast< Param< double > >(val2);
    try {
      result = (arg1)->val_paramd(arg2);
    }
    catch(Param< double > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_paramc) {
  {
    Test *arg1 = (Test *) 0 ;
    Param< char > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< char > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_paramc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_paramc" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_paramc" "', argument " "2"" of type '" "Param< char >""'");
    } 
    arg2 = static_cast< Param< char > >(val2);
    try {
      result = (arg1)->val_paramc(arg2);
    }
    catch(Param< char > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_val_sizet) {
  {
    Test *arg1 = (Test *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_val_sizet(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_val_sizet" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_val_sizet" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    try {
      result = (arg1)->val_sizet(arg2);
    }
    catch(size_t &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_bool) {
  {
    Test *arg1 = (Test *) 0 ;
    bool *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool temp2 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    bool *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_bool(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_bool" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_bool" "', argument " "2"" of type '" "bool""'");
    } 
    temp2 = static_cast< bool >(val2);
    arg2 = &temp2;
    try {
      result = (bool *) &(arg1)->ref_bool((bool const &)*arg2);
    }
    catch(bool &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_schar) {
  {
    Test *arg1 = (Test *) 0 ;
    signed char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char temp2 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    signed char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_schar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_schar" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_schar" "', argument " "2"" of type '" "signed char""'");
    } 
    temp2 = static_cast< signed char >(val2);
    arg2 = &temp2;
    try {
      result = (signed char *) &(arg1)->ref_schar((signed char const &)*arg2);
    }
    catch(signed char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_uchar) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char temp2 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_uchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_uchar" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_uchar" "', argument " "2"" of type '" "unsigned char""'");
    } 
    temp2 = static_cast< unsigned char >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned char *) &(arg1)->ref_uchar((unsigned char const &)*arg2);
    }
    catch(unsigned char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_int) {
  {
    Test *arg1 = (Test *) 0 ;
    int *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_int(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_int" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_int" "', argument " "2"" of type '" "int""'");
    } 
    temp2 = static_cast< int >(val2);
    arg2 = &temp2;
    try {
      result = (int *) &(arg1)->ref_int((int const &)*arg2);
    }
    catch(int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_uint) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned int *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int temp2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_uint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_uint" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_uint" "', argument " "2"" of type '" "unsigned int""'");
    } 
    temp2 = static_cast< unsigned int >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned int *) &(arg1)->ref_uint((unsigned int const &)*arg2);
    }
    catch(unsigned int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_short) {
  {
    Test *arg1 = (Test *) 0 ;
    short *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short temp2 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    short *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_short(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_short" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_short" "', argument " "2"" of type '" "short""'");
    } 
    temp2 = static_cast< short >(val2);
    arg2 = &temp2;
    try {
      result = (short *) &(arg1)->ref_short((short const &)*arg2);
    }
    catch(short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_ushort) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned short *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short temp2 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned short *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_ushort(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_ushort" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_ushort" "', argument " "2"" of type '" "unsigned short""'");
    } 
    temp2 = static_cast< unsigned short >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned short *) &(arg1)->ref_ushort((unsigned short const &)*arg2);
    }
    catch(unsigned short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_long) {
  {
    Test *arg1 = (Test *) 0 ;
    long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long temp2 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_long(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_long" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_long" "', argument " "2"" of type '" "long""'");
    } 
    temp2 = static_cast< long >(val2);
    arg2 = &temp2;
    try {
      result = (long *) &(arg1)->ref_long((long const &)*arg2);
    }
    catch(long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_ulong) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long temp2 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_ulong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_ulong" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_ulong" "', argument " "2"" of type '" "unsigned long""'");
    } 
    temp2 = static_cast< unsigned long >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned long *) &(arg1)->ref_ulong((unsigned long const &)*arg2);
    }
    catch(unsigned long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_llong) {
  {
    Test *arg1 = (Test *) 0 ;
    long long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long temp2 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long long *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_llong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_llong" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_llong" "', argument " "2"" of type '" "long long""'");
    } 
    temp2 = static_cast< long long >(val2);
    arg2 = &temp2;
    try {
      result = (long long *) &(arg1)->ref_llong((long long const &)*arg2);
    }
    catch(long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_ullong) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned long long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long temp2 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long long *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_ullong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_ullong" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_ullong" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    temp2 = static_cast< unsigned long long >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned long long *) &(arg1)->ref_ullong((unsigned long long const &)*arg2);
    }
    catch(unsigned long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_char) {
  {
    Test *arg1 = (Test *) 0 ;
    char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char temp2 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_char(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_char" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_char" "', argument " "2"" of type '" "char""'");
    } 
    temp2 = static_cast< char >(val2);
    arg2 = &temp2;
    try {
      result = (char *) &(arg1)->ref_char((char const &)*arg2);
    }
    catch(char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_pchar) {
  {
    Test *arg1 = (Test *) 0 ;
    pchar *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    pchar temp2 ;
    int argvi = 0;
    pchar *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_pchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_pchar" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_char, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ref_pchar" "', argument " "2"" of type '" "pchar""'"); 
    }
    temp2 = reinterpret_cast< pchar >(argp2);
    arg2 = reinterpret_cast< pchar * >(&temp2);
    try {
      result = (pchar *) &(arg1)->ref_pchar((pchar const &)*arg2);
    }
    catch(pchar _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_pcharc) {
  {
    Test *arg1 = (Test *) 0 ;
    pcharc *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    pcharc temp2 ;
    int argvi = 0;
    pcharc *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_pcharc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_pcharc" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_char, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ref_pcharc" "', argument " "2"" of type '" "pcharc""'"); 
    }
    temp2 = reinterpret_cast< pcharc >(argp2);
    arg2 = reinterpret_cast< pcharc * >(&temp2);
    try {
      result = (pcharc *) &(arg1)->ref_pcharc((pcharc const &)*arg2);
    }
    catch(pcharc _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_pint) {
  {
    Test *arg1 = (Test *) 0 ;
    pint *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    pint temp2 = 0 ;
    int res2 ;
    int argvi = 0;
    pint *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_pint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_pint" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), SWIG_as_voidptrptr(&temp2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ref_pint" "', argument " "2"" of type '" "Stype""'"); 
    }
    arg2 =  &temp2;
    try {
      result = (pint *) &(arg1)->ref_pint((pint const &)*arg2);
    }
    catch(pint _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_hello) {
  {
    Test *arg1 = (Test *) 0 ;
    Hello *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 ;
    Hello temp2 ;
    int argvi = 0;
    Hello *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_hello(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_hello" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_hello" "', argument " "2"" of type '" "Hello const &""'");
    } else {
      temp2 = static_cast< Hello >(val2);
      arg2 = &temp2;
    }
    try {
      result = (Hello *) &(arg1)->ref_hello((Hello const &)*arg2);
    }
    catch(Hello &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_myint) {
  {
    Test *arg1 = (Test *) 0 ;
    MyInt *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    MyInt temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    MyInt *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_myint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_myint" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_myint" "', argument " "2"" of type '" "MyInt""'");
    } 
    temp2 = static_cast< MyInt >(val2);
    arg2 = &temp2;
    try {
      result = (MyInt *) &(arg1)->ref_myint((MyInt const &)*arg2);
    }
    catch(MyInt &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_parami) {
  {
    Test *arg1 = (Test *) 0 ;
    Param< int > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    Param< int > temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_parami(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_parami" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_parami" "', argument " "2"" of type '" "Param< int >""'");
    } 
    temp2 = static_cast< Param< int > >(val2);
    arg2 = &temp2;
    try {
      result = (Param< int > *) &(arg1)->ref_parami((Param< int > const &)*arg2);
    }
    catch(Param< int > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_paramd) {
  {
    Test *arg1 = (Test *) 0 ;
    Param< double > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    Param< double > temp2 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< double > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_paramd(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_paramd" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_paramd" "', argument " "2"" of type '" "Param< double >""'");
    } 
    temp2 = static_cast< Param< double > >(val2);
    arg2 = &temp2;
    try {
      result = (Param< double > *) &(arg1)->ref_paramd((Param< double > const &)*arg2);
    }
    catch(Param< double > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_paramc) {
  {
    Test *arg1 = (Test *) 0 ;
    Param< char > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    Param< char > temp2 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< char > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_paramc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_paramc" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_paramc" "', argument " "2"" of type '" "Param< char >""'");
    } 
    temp2 = static_cast< Param< char > >(val2);
    arg2 = &temp2;
    try {
      result = (Param< char > *) &(arg1)->ref_paramc((Param< char > const &)*arg2);
    }
    catch(Param< char > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ref_sizet) {
  {
    Test *arg1 = (Test *) 0 ;
    size_t *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t temp2 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    size_t *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ref_sizet(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ref_sizet" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ref_sizet" "', argument " "2"" of type '" "size_t""'");
    } 
    temp2 = static_cast< size_t >(val2);
    arg2 = &temp2;
    try {
      result = (size_t *) &(arg1)->ref_sizet((size_t const &)*arg2);
    }
    catch(size_t &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_c_check) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_c_check(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_c_check" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (int)(arg1)->c_check();
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_v_check) {
  {
    Test *arg1 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Test_v_check(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_v_check" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    result = (int)(arg1)->v_check();
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val__SWIG_0) {
  {
    Test *arg1 = (Test *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_ref__SWIG_0) {
  {
    Test *arg1 = (Test *) 0 ;
    bool *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool temp2 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "bool""'");
    } 
    temp2 = static_cast< bool >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((bool const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val__SWIG_1) {
  {
    Test *arg1 = (Test *) 0 ;
    signed char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "signed char""'");
    } 
    arg2 = static_cast< signed char >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_ref__SWIG_1) {
  {
    Test *arg1 = (Test *) 0 ;
    signed char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char temp2 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "signed char""'");
    } 
    temp2 = static_cast< signed char >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((signed char const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val__SWIG_2) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_ref__SWIG_2) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char temp2 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned char""'");
    } 
    temp2 = static_cast< unsigned char >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((unsigned char const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val__SWIG_3) {
  {
    Test *arg1 = (Test *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_ref__SWIG_3) {
  {
    Test *arg1 = (Test *) 0 ;
    int *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "int""'");
    } 
    temp2 = static_cast< int >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((int const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val__SWIG_4) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_ref__SWIG_4) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned int *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int temp2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned int""'");
    } 
    temp2 = static_cast< unsigned int >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((unsigned int const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val__SWIG_5) {
  {
    Test *arg1 = (Test *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_ref__SWIG_5) {
  {
    Test *arg1 = (Test *) 0 ;
    short *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short temp2 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "short""'");
    } 
    temp2 = static_cast< short >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((short const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val__SWIG_6) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned short""'");
    } 
    arg2 = static_cast< unsigned short >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_ref__SWIG_6) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned short *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short temp2 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned short""'");
    } 
    temp2 = static_cast< unsigned short >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((unsigned short const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val__SWIG_7) {
  {
    Test *arg1 = (Test *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_ref__SWIG_7) {
  {
    Test *arg1 = (Test *) 0 ;
    long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long temp2 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "long""'");
    } 
    temp2 = static_cast< long >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((long const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val__SWIG_8) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_ref__SWIG_8) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long temp2 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned long""'");
    } 
    temp2 = static_cast< unsigned long >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((unsigned long const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val__SWIG_9) {
  {
    Test *arg1 = (Test *) 0 ;
    long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "long long""'");
    } 
    arg2 = static_cast< long long >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_ref__SWIG_9) {
  {
    Test *arg1 = (Test *) 0 ;
    long long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long temp2 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "long long""'");
    } 
    temp2 = static_cast< long long >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((long long const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val__SWIG_10) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    arg2 = static_cast< unsigned long long >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_ref__SWIG_10) {
  {
    Test *arg1 = (Test *) 0 ;
    unsigned long long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long temp2 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    temp2 = static_cast< unsigned long long >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((unsigned long long const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val__SWIG_11) {
  {
    Test *arg1 = (Test *) 0 ;
    char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "char""'");
    } 
    arg2 = static_cast< char >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_ref__SWIG_11) {
  {
    Test *arg1 = (Test *) 0 ;
    char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char temp2 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "char""'");
    } 
    temp2 = static_cast< char >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((char const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val__SWIG_12) {
  {
    Test *arg1 = (Test *) 0 ;
    pchar arg2 = (pchar) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_val" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ovr_val" "', argument " "2"" of type '" "pchar""'");
    }
    arg2 = reinterpret_cast< pchar >(buf2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_val) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 7;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_7:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 8;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_8:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 9;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_9:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 10;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_10:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 11;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_11:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 12;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_12:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 13;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_13:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_val__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_val__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_val__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_val__SWIG_6); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_val__SWIG_5); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_val__SWIG_4); return;
    case 7:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_val__SWIG_3); return;
    case 8:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_val__SWIG_8); return;
    case 9:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_val__SWIG_7); return;
    case 10:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_val__SWIG_10); return;
    case 11:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_val__SWIG_9); return;
    case 12:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_val__SWIG_11); return;
    case 13:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_val__SWIG_12); return;
    }
  }
  
  croak("No matching function for overloaded 'Test_ovr_val'");
  XSRETURN(0);
}


XS(_wrap_Test_ovr_ref__SWIG_12) {
  {
    Test *arg1 = (Test *) 0 ;
    pchar *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    pchar temp2 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Test_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Test_ovr_ref" "', argument " "1"" of type '" "Test *""'"); 
    }
    arg1 = reinterpret_cast< Test * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_char, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Test_ovr_ref" "', argument " "2"" of type '" "pchar""'"); 
    }
    temp2 = reinterpret_cast< pchar >(argp2);
    arg2 = reinterpret_cast< pchar * >(&temp2);
    result = (int)(arg1)->ovr_ref((pchar const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Test_ovr_ref) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_char, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 7;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_7:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 8;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_8:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 9;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_9:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 10;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_10:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 11;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_11:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 12;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_12:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_Test, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 13;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_13:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_ref__SWIG_12); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_ref__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_ref__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_ref__SWIG_1); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_ref__SWIG_6); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_ref__SWIG_5); return;
    case 7:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_ref__SWIG_4); return;
    case 8:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_ref__SWIG_3); return;
    case 9:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_ref__SWIG_8); return;
    case 10:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_ref__SWIG_7); return;
    case 11:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_ref__SWIG_10); return;
    case 12:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_ref__SWIG_9); return;
    case 13:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Test_ovr_ref__SWIG_11); return;
    }
  }
  
  croak("No matching function for overloaded 'Test_ovr_ref'");
  XSRETURN(0);
}


XS(_wrap_new_TestDirector) {
  {
    int argvi = 0;
    TestDirector *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TestDirector();");
    }
    result = (TestDirector *)new TestDirector();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TestDirector, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_TestDirector) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TestDirector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TestDirector" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_namet) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    char *arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char temp2[5] ;
    int res2 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_namet(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_namet" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharArray(ST(1), temp2, 5);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_namet" "', argument " "2"" of type '" "char [5]""'");
    }
    arg2 = reinterpret_cast< char * >(temp2);
    try {
      result = (char *)(arg1)->vval_namet(arg2);
    }
    catch(namet _e) {
      {
        size_t size = 5;
        
        while (size && (_e[size - 1] == '\0')) --size;
        
        sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtrAndSize(_e, size)); SWIG_fail ; 
      }
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_cnamet) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    char *arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char temp2[5] ;
    int res2 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_cnamet(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_cnamet" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharArray(ST(1), temp2, 5);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_cnamet" "', argument " "2"" of type '" "char const [5]""'");
    }
    arg2 = reinterpret_cast< char * >(temp2);
    try {
      result = (char *)(arg1)->vval_cnamet(arg2);
    }
    catch(namet _e) {
      {
        size_t size = 5;
        
        while (size && (_e[size - 1] == '\0')) --size;
        
        sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtrAndSize(_e, size)); SWIG_fail ; 
      }
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_bool_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_bool_set(self,var_bool);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_bool_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_bool_set" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (arg1) (arg1)->var_bool = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_bool_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_bool_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_bool_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (bool) ((arg1)->var_bool);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_schar_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    signed char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_schar_set(self,var_schar);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_schar_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_schar_set" "', argument " "2"" of type '" "signed char""'");
    } 
    arg2 = static_cast< signed char >(val2);
    if (arg1) (arg1)->var_schar = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_schar_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    signed char result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_schar_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_schar_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (signed char) ((arg1)->var_schar);
    ST(argvi) = SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_uchar_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_uchar_set(self,var_uchar);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_uchar_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_uchar_set" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    if (arg1) (arg1)->var_uchar = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_uchar_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned char result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_uchar_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_uchar_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (unsigned char) ((arg1)->var_uchar);
    ST(argvi) = SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_int_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_int_set(self,var_int);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_int_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_int_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->var_int = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_int_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_int_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_int_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (int) ((arg1)->var_int);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_uint_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_uint_set(self,var_uint);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_uint_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_uint_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    if (arg1) (arg1)->var_uint = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_uint_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_uint_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_uint_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (unsigned int) ((arg1)->var_uint);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_short_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_short_set(self,var_short);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_short_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_short_set" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    if (arg1) (arg1)->var_short = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_short_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    short result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_short_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_short_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (short) ((arg1)->var_short);
    ST(argvi) = SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_ushort_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_ushort_set(self,var_ushort);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ushort_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_ushort_set" "', argument " "2"" of type '" "unsigned short""'");
    } 
    arg2 = static_cast< unsigned short >(val2);
    if (arg1) (arg1)->var_ushort = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_ushort_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned short result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_ushort_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ushort_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (unsigned short) ((arg1)->var_ushort);
    ST(argvi) = SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_long_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_long_set(self,var_long);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_long_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_long_set" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    if (arg1) (arg1)->var_long = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_long_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_long_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_long_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (long) ((arg1)->var_long);
    ST(argvi) = SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_ulong_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_ulong_set(self,var_ulong);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ulong_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_ulong_set" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    if (arg1) (arg1)->var_ulong = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_ulong_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_ulong_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ulong_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (unsigned long) ((arg1)->var_ulong);
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_llong_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_llong_set(self,var_llong);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_llong_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_llong_set" "', argument " "2"" of type '" "long long""'");
    } 
    arg2 = static_cast< long long >(val2);
    if (arg1) (arg1)->var_llong = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_llong_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    long long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_llong_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_llong_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (long long) ((arg1)->var_llong);
    ST(argvi) = SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_ullong_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_ullong_set(self,var_ullong);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ullong_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_ullong_set" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    arg2 = static_cast< unsigned long long >(val2);
    if (arg1) (arg1)->var_ullong = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_ullong_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned long long result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_ullong_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_ullong_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (unsigned long long) ((arg1)->var_ullong);
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_char_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_char_set(self,var_char);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_char_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_char_set" "', argument " "2"" of type '" "char""'");
    } 
    arg2 = static_cast< char >(val2);
    if (arg1) (arg1)->var_char = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_char_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_char_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_char_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (char) ((arg1)->var_char);
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_pchar_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pchar arg2 = (pchar) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_pchar_set(self,var_pchar);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pchar_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_var_pchar_set" "', argument " "2"" of type '" "pchar""'");
    }
    arg2 = reinterpret_cast< pchar >(buf2);
    if (arg1->var_pchar) delete[] arg1->var_pchar;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
      arg1->var_pchar = (pchar)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
    } else {
      arg1->var_pchar = 0;
    }
    ST(argvi) = sv_newmortal();
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_pchar_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    pchar result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_pchar_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pchar_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (pchar) ((arg1)->var_pchar);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_pcharc_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pcharc arg2 = (pcharc) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_pcharc_set(self,var_pcharc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pcharc_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_var_pcharc_set" "', argument " "2"" of type '" "pcharc""'");
    }
    arg2 = reinterpret_cast< pcharc >(buf2);
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
      arg1->var_pcharc = (pcharc)reinterpret_cast< char* >(memcpy((new char[size]), arg2, sizeof(char)*(size)));
    } else {
      arg1->var_pcharc = 0;
    }
    ST(argvi) = sv_newmortal();
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_pcharc_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    pcharc result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_pcharc_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pcharc_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (pcharc) ((arg1)->var_pcharc);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_pint_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pint arg2 = (pint) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_pint_set(self,var_pint);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pint_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1),SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_var_pint_set" "', argument " "2"" of type '" "pint""'"); 
    }
    if (arg1->var_pint) delete[] arg1->var_pint;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
      arg1->var_pint = (pint)reinterpret_cast< char* >(memcpy((new char[size]), reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
    } else {
      arg1->var_pint = 0;
    }
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_pint_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    pint result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_pint_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_pint_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (pint) ((arg1)->var_pint);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_hello_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Hello arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_hello_set(self,var_hello);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_hello_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_hello_set" "', argument " "2"" of type '" "Hello""'");
    } 
    arg2 = static_cast< Hello >(val2);
    if (arg1) (arg1)->var_hello = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_hello_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    Hello result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_hello_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_hello_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (Hello) ((arg1)->var_hello);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_myint_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    MyInt arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_myint_set(self,var_myint);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_myint_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_myint_set" "', argument " "2"" of type '" "MyInt""'");
    } 
    arg2 = static_cast< MyInt >(val2);
    if (arg1) (arg1)->var_myint = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_myint_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    MyInt result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_myint_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_myint_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result =  ((arg1)->var_myint);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_parami_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< int > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_parami_set(self,var_parami);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_parami_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_parami_set" "', argument " "2"" of type '" "Param< int >""'");
    } 
    arg2 = static_cast< Param< int > >(val2);
    if (arg1) (arg1)->var_parami = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_parami_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    Param< int > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_parami_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_parami_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result =  ((arg1)->var_parami);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_paramd_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< double > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_paramd_set(self,var_paramd);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_paramd_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_paramd_set" "', argument " "2"" of type '" "Param< double >""'");
    } 
    arg2 = static_cast< Param< double > >(val2);
    if (arg1) (arg1)->var_paramd = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_paramd_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    Param< double > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_paramd_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_paramd_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result =  ((arg1)->var_paramd);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_paramc_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< char > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_paramc_set(self,var_paramc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_paramc_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_paramc_set" "', argument " "2"" of type '" "Param< char >""'");
    } 
    arg2 = static_cast< Param< char > >(val2);
    if (arg1) (arg1)->var_paramc = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_paramc_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    Param< char > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_paramc_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_paramc_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result =  ((arg1)->var_paramc);
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_sizet_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_sizet_set(self,var_sizet);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_sizet_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_var_sizet_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->var_sizet = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_sizet_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_sizet_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_sizet_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result =  ((arg1)->var_sizet);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_namet_set) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    char *arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char temp2[5] ;
    int res2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_var_namet_set(self,var_namet);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_namet_set" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharArray(ST(1), temp2, 5);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_var_namet_set" "', argument " "2"" of type '" "char [5]""'");
    }
    arg2 = reinterpret_cast< char * >(temp2);
    if (arg2) memcpy(arg1->var_namet,arg2,5*sizeof(char));
    else memset(arg1->var_namet,0,5*sizeof(char));
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_var_namet_get) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_var_namet_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_var_namet_get" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (char *) ((arg1)->var_namet);
    {
      size_t size = 5;
      
      while (size && (result[size - 1] == '\0')) --size;
      
      ST(argvi) = SWIG_FromCharPtrAndSize(result, size); argvi++ ;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_bool) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_bool(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_bool" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    try {
      result = (bool)(arg1)->val_bool(arg2);
    }
    catch(bool &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_schar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    signed char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    signed char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_schar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_schar" "', argument " "2"" of type '" "signed char""'");
    } 
    arg2 = static_cast< signed char >(val2);
    try {
      result = (signed char)(arg1)->val_schar(arg2);
    }
    catch(signed char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_uchar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_uchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_uchar" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    try {
      result = (unsigned char)(arg1)->val_uchar(arg2);
    }
    catch(unsigned char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_int) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_int(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_int" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_int" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (int)(arg1)->val_int(arg2);
    }
    catch(int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_uint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_uint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_uint" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    try {
      result = (unsigned int)(arg1)->val_uint(arg2);
    }
    catch(unsigned int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_short) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    short result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_short(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_short" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_short" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    try {
      result = (short)(arg1)->val_short(arg2);
    }
    catch(short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_ushort) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned short result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_ushort(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_ushort" "', argument " "2"" of type '" "unsigned short""'");
    } 
    arg2 = static_cast< unsigned short >(val2);
    try {
      result = (unsigned short)(arg1)->val_ushort(arg2);
    }
    catch(unsigned short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_long) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_long(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_long" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_long" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    try {
      result = (long)(arg1)->val_long(arg2);
    }
    catch(long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_ulong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_ulong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_ulong" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    try {
      result = (unsigned long)(arg1)->val_ulong(arg2);
    }
    catch(unsigned long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_llong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_llong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_llong" "', argument " "2"" of type '" "long long""'");
    } 
    arg2 = static_cast< long long >(val2);
    try {
      result = (long long)(arg1)->val_llong(arg2);
    }
    catch(long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_ullong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_ullong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_ullong" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    arg2 = static_cast< unsigned long long >(val2);
    try {
      result = (unsigned long long)(arg1)->val_ullong(arg2);
    }
    catch(unsigned long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_char) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_char(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_char" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_char" "', argument " "2"" of type '" "char""'");
    } 
    arg2 = static_cast< char >(val2);
    try {
      result = (char)(arg1)->val_char(arg2);
    }
    catch(char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_pchar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pchar arg2 = (pchar) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    pchar result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_pchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_val_pchar" "', argument " "2"" of type '" "pchar""'");
    }
    arg2 = reinterpret_cast< pchar >(buf2);
    try {
      result = (pchar)(arg1)->val_pchar(arg2);
    }
    catch(pchar _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_pcharc) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pcharc arg2 = (pcharc) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    pcharc result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_pcharc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_val_pcharc" "', argument " "2"" of type '" "pcharc""'");
    }
    arg2 = reinterpret_cast< pcharc >(buf2);
    try {
      result = (pcharc)(arg1)->val_pcharc(arg2);
    }
    catch(pcharc _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_pint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pint arg2 = (pint) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    int argvi = 0;
    pint result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_pint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_val_pint" "', argument " "2"" of type '" "pint""'"); 
    }
    try {
      result = (pint)(arg1)->val_pint(arg2);
    }
    catch(pint _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_hello) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Hello arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Hello result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_hello(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_hello" "', argument " "2"" of type '" "Hello""'");
    } 
    arg2 = static_cast< Hello >(val2);
    try {
      result = (Hello)(arg1)->val_hello(arg2);
    }
    catch(Hello &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_myint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    MyInt arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    MyInt result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_myint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_myint" "', argument " "2"" of type '" "MyInt""'");
    } 
    arg2 = static_cast< MyInt >(val2);
    try {
      result = (arg1)->val_myint(arg2);
    }
    catch(MyInt &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_parami) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< int > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< int > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_parami(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_parami" "', argument " "2"" of type '" "Param< int >""'");
    } 
    arg2 = static_cast< Param< int > >(val2);
    try {
      result = (arg1)->val_parami(arg2);
    }
    catch(Param< int > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_paramd) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< double > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< double > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_paramd(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_paramd" "', argument " "2"" of type '" "Param< double >""'");
    } 
    arg2 = static_cast< Param< double > >(val2);
    try {
      result = (arg1)->val_paramd(arg2);
    }
    catch(Param< double > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_paramc) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< char > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< char > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_paramc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_paramc" "', argument " "2"" of type '" "Param< char >""'");
    } 
    arg2 = static_cast< Param< char > >(val2);
    try {
      result = (arg1)->val_paramc(arg2);
    }
    catch(Param< char > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_val_sizet) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_val_sizet(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_val_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_val_sizet" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    try {
      result = (arg1)->val_sizet(arg2);
    }
    catch(size_t &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_bool) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    bool *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool temp2 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    bool *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_bool(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_bool" "', argument " "2"" of type '" "bool""'");
    } 
    temp2 = static_cast< bool >(val2);
    arg2 = &temp2;
    try {
      result = (bool *) &(arg1)->ref_bool((bool const &)*arg2);
    }
    catch(bool &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_schar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    signed char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char temp2 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    signed char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_schar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_schar" "', argument " "2"" of type '" "signed char""'");
    } 
    temp2 = static_cast< signed char >(val2);
    arg2 = &temp2;
    try {
      result = (signed char *) &(arg1)->ref_schar((signed char const &)*arg2);
    }
    catch(signed char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_uchar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char temp2 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_uchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_uchar" "', argument " "2"" of type '" "unsigned char""'");
    } 
    temp2 = static_cast< unsigned char >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned char *) &(arg1)->ref_uchar((unsigned char const &)*arg2);
    }
    catch(unsigned char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_int) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    int *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_int(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_int" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_int" "', argument " "2"" of type '" "int""'");
    } 
    temp2 = static_cast< int >(val2);
    arg2 = &temp2;
    try {
      result = (int *) &(arg1)->ref_int((int const &)*arg2);
    }
    catch(int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_uint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned int *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int temp2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_uint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_uint" "', argument " "2"" of type '" "unsigned int""'");
    } 
    temp2 = static_cast< unsigned int >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned int *) &(arg1)->ref_uint((unsigned int const &)*arg2);
    }
    catch(unsigned int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_short) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    short *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short temp2 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    short *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_short(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_short" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_short" "', argument " "2"" of type '" "short""'");
    } 
    temp2 = static_cast< short >(val2);
    arg2 = &temp2;
    try {
      result = (short *) &(arg1)->ref_short((short const &)*arg2);
    }
    catch(short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_ushort) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned short *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short temp2 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned short *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_ushort(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_ushort" "', argument " "2"" of type '" "unsigned short""'");
    } 
    temp2 = static_cast< unsigned short >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned short *) &(arg1)->ref_ushort((unsigned short const &)*arg2);
    }
    catch(unsigned short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_long) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long temp2 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_long(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_long" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_long" "', argument " "2"" of type '" "long""'");
    } 
    temp2 = static_cast< long >(val2);
    arg2 = &temp2;
    try {
      result = (long *) &(arg1)->ref_long((long const &)*arg2);
    }
    catch(long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_ulong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long temp2 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_ulong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_ulong" "', argument " "2"" of type '" "unsigned long""'");
    } 
    temp2 = static_cast< unsigned long >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned long *) &(arg1)->ref_ulong((unsigned long const &)*arg2);
    }
    catch(unsigned long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_llong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long temp2 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long long *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_llong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_llong" "', argument " "2"" of type '" "long long""'");
    } 
    temp2 = static_cast< long long >(val2);
    arg2 = &temp2;
    try {
      result = (long long *) &(arg1)->ref_llong((long long const &)*arg2);
    }
    catch(long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_ullong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long temp2 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long long *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_ullong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_ullong" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    temp2 = static_cast< unsigned long long >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned long long *) &(arg1)->ref_ullong((unsigned long long const &)*arg2);
    }
    catch(unsigned long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_char) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char temp2 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_char(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_char" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_char" "', argument " "2"" of type '" "char""'");
    } 
    temp2 = static_cast< char >(val2);
    arg2 = &temp2;
    try {
      result = (char *) &(arg1)->ref_char((char const &)*arg2);
    }
    catch(char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_pchar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pchar *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    pchar temp2 ;
    int argvi = 0;
    pchar *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_pchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_char, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ref_pchar" "', argument " "2"" of type '" "pchar""'"); 
    }
    temp2 = reinterpret_cast< pchar >(argp2);
    arg2 = reinterpret_cast< pchar * >(&temp2);
    try {
      result = (pchar *) &(arg1)->ref_pchar((pchar const &)*arg2);
    }
    catch(pchar _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_pcharc) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pcharc *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    pcharc temp2 ;
    int argvi = 0;
    pcharc *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_pcharc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_char, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ref_pcharc" "', argument " "2"" of type '" "pcharc""'"); 
    }
    temp2 = reinterpret_cast< pcharc >(argp2);
    arg2 = reinterpret_cast< pcharc * >(&temp2);
    try {
      result = (pcharc *) &(arg1)->ref_pcharc((pcharc const &)*arg2);
    }
    catch(pcharc _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_pint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pint *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    pint temp2 = 0 ;
    int res2 ;
    int argvi = 0;
    pint *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_pint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), SWIG_as_voidptrptr(&temp2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ref_pint" "', argument " "2"" of type '" "Stype""'"); 
    }
    arg2 =  &temp2;
    try {
      result = (pint *) &(arg1)->ref_pint((pint const &)*arg2);
    }
    catch(pint _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_hello) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Hello *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 ;
    Hello temp2 ;
    int argvi = 0;
    Hello *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_hello(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_hello" "', argument " "2"" of type '" "Hello const &""'");
    } else {
      temp2 = static_cast< Hello >(val2);
      arg2 = &temp2;
    }
    try {
      result = (Hello *) &(arg1)->ref_hello((Hello const &)*arg2);
    }
    catch(Hello &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_myint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    MyInt *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    MyInt temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    MyInt *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_myint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_myint" "', argument " "2"" of type '" "MyInt""'");
    } 
    temp2 = static_cast< MyInt >(val2);
    arg2 = &temp2;
    try {
      result = (MyInt *) &(arg1)->ref_myint((MyInt const &)*arg2);
    }
    catch(MyInt &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_parami) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< int > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    Param< int > temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_parami(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_parami" "', argument " "2"" of type '" "Param< int >""'");
    } 
    temp2 = static_cast< Param< int > >(val2);
    arg2 = &temp2;
    try {
      result = (Param< int > *) &(arg1)->ref_parami((Param< int > const &)*arg2);
    }
    catch(Param< int > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_paramd) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< double > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    Param< double > temp2 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< double > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_paramd(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_paramd" "', argument " "2"" of type '" "Param< double >""'");
    } 
    temp2 = static_cast< Param< double > >(val2);
    arg2 = &temp2;
    try {
      result = (Param< double > *) &(arg1)->ref_paramd((Param< double > const &)*arg2);
    }
    catch(Param< double > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_paramc) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< char > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    Param< char > temp2 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< char > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_paramc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_paramc" "', argument " "2"" of type '" "Param< char >""'");
    } 
    temp2 = static_cast< Param< char > >(val2);
    arg2 = &temp2;
    try {
      result = (Param< char > *) &(arg1)->ref_paramc((Param< char > const &)*arg2);
    }
    catch(Param< char > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ref_sizet) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    size_t *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t temp2 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    size_t *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ref_sizet(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ref_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ref_sizet" "', argument " "2"" of type '" "size_t""'");
    } 
    temp2 = static_cast< size_t >(val2);
    arg2 = &temp2;
    try {
      result = (size_t *) &(arg1)->ref_sizet((size_t const &)*arg2);
    }
    catch(size_t &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_bool) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_bool(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_bool" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    try {
      result = (bool)(arg1)->vval_bool(arg2);
    }
    catch(bool &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_schar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    signed char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    signed char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_schar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_schar" "', argument " "2"" of type '" "signed char""'");
    } 
    arg2 = static_cast< signed char >(val2);
    try {
      result = (signed char)(arg1)->vval_schar(arg2);
    }
    catch(signed char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_uchar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_uchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_uchar" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    try {
      result = (unsigned char)(arg1)->vval_uchar(arg2);
    }
    catch(unsigned char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_int) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_int(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_int" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_int" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    try {
      result = (int)(arg1)->vval_int(arg2);
    }
    catch(int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_uint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_uint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_uint" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    try {
      result = (unsigned int)(arg1)->vval_uint(arg2);
    }
    catch(unsigned int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_short) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    short result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_short(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_short" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_short" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    try {
      result = (short)(arg1)->vval_short(arg2);
    }
    catch(short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_ushort) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned short result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_ushort(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_ushort" "', argument " "2"" of type '" "unsigned short""'");
    } 
    arg2 = static_cast< unsigned short >(val2);
    try {
      result = (unsigned short)(arg1)->vval_ushort(arg2);
    }
    catch(unsigned short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_long) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_long(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_long" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_long" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    try {
      result = (long)(arg1)->vval_long(arg2);
    }
    catch(long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_ulong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_ulong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_ulong" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    try {
      result = (unsigned long)(arg1)->vval_ulong(arg2);
    }
    catch(unsigned long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_llong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_llong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_llong" "', argument " "2"" of type '" "long long""'");
    } 
    arg2 = static_cast< long long >(val2);
    try {
      result = (long long)(arg1)->vval_llong(arg2);
    }
    catch(long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_ullong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_ullong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_ullong" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    arg2 = static_cast< unsigned long long >(val2);
    try {
      result = (unsigned long long)(arg1)->vval_ullong(arg2);
    }
    catch(unsigned long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_char) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_char(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_char" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_char" "', argument " "2"" of type '" "char""'");
    } 
    arg2 = static_cast< char >(val2);
    try {
      result = (char)(arg1)->vval_char(arg2);
    }
    catch(char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_pchar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pchar arg2 = (pchar) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    pchar result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_pchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_pchar" "', argument " "2"" of type '" "pchar""'");
    }
    arg2 = reinterpret_cast< pchar >(buf2);
    try {
      result = (pchar)(arg1)->vval_pchar(arg2);
    }
    catch(pchar _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_pcharc) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pcharc arg2 = (pcharc) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    pcharc result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_pcharc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_pcharc" "', argument " "2"" of type '" "pcharc""'");
    }
    arg2 = reinterpret_cast< pcharc >(buf2);
    try {
      result = (pcharc)(arg1)->vval_pcharc(arg2);
    }
    catch(pcharc _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_pint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pint arg2 = (pint) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    int argvi = 0;
    pint result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_pint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vval_pint" "', argument " "2"" of type '" "pint""'"); 
    }
    try {
      result = (pint)(arg1)->vval_pint(arg2);
    }
    catch(pint _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_hello) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Hello arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Hello result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_hello(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_hello" "', argument " "2"" of type '" "Hello""'");
    } 
    arg2 = static_cast< Hello >(val2);
    try {
      result = (Hello)(arg1)->vval_hello(arg2);
    }
    catch(Hello &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_myint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    MyInt arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    MyInt result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_myint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_myint" "', argument " "2"" of type '" "MyInt""'");
    } 
    arg2 = static_cast< MyInt >(val2);
    try {
      result = (arg1)->vval_myint(arg2);
    }
    catch(MyInt &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_parami) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< int > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< int > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_parami(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_parami" "', argument " "2"" of type '" "Param< int >""'");
    } 
    arg2 = static_cast< Param< int > >(val2);
    try {
      result = (arg1)->vval_parami(arg2);
    }
    catch(Param< int > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_paramd) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< double > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< double > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_paramd(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_paramd" "', argument " "2"" of type '" "Param< double >""'");
    } 
    arg2 = static_cast< Param< double > >(val2);
    try {
      result = (arg1)->vval_paramd(arg2);
    }
    catch(Param< double > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_paramc) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< char > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< char > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_paramc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_paramc" "', argument " "2"" of type '" "Param< char >""'");
    } 
    arg2 = static_cast< Param< char > >(val2);
    try {
      result = (arg1)->vval_paramc(arg2);
    }
    catch(Param< char > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vval_sizet) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vval_sizet(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vval_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vval_sizet" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    try {
      result = (arg1)->vval_sizet(arg2);
    }
    catch(size_t &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_bool) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    bool *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool temp2 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    bool *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_bool(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_bool" "', argument " "2"" of type '" "bool""'");
    } 
    temp2 = static_cast< bool >(val2);
    arg2 = &temp2;
    try {
      result = (bool *) &(arg1)->vref_bool((bool const &)*arg2);
    }
    catch(bool &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_schar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    signed char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char temp2 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    signed char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_schar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_schar" "', argument " "2"" of type '" "signed char""'");
    } 
    temp2 = static_cast< signed char >(val2);
    arg2 = &temp2;
    try {
      result = (signed char *) &(arg1)->vref_schar((signed char const &)*arg2);
    }
    catch(signed char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_uchar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char temp2 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_uchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_uchar" "', argument " "2"" of type '" "unsigned char""'");
    } 
    temp2 = static_cast< unsigned char >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned char *) &(arg1)->vref_uchar((unsigned char const &)*arg2);
    }
    catch(unsigned char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_int) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    int *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_int(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_int" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_int" "', argument " "2"" of type '" "int""'");
    } 
    temp2 = static_cast< int >(val2);
    arg2 = &temp2;
    try {
      result = (int *) &(arg1)->vref_int((int const &)*arg2);
    }
    catch(int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_uint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned int *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int temp2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_uint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_uint" "', argument " "2"" of type '" "unsigned int""'");
    } 
    temp2 = static_cast< unsigned int >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned int *) &(arg1)->vref_uint((unsigned int const &)*arg2);
    }
    catch(unsigned int &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_short) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    short *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short temp2 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    short *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_short(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_short" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_short" "', argument " "2"" of type '" "short""'");
    } 
    temp2 = static_cast< short >(val2);
    arg2 = &temp2;
    try {
      result = (short *) &(arg1)->vref_short((short const &)*arg2);
    }
    catch(short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_ushort) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned short *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short temp2 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned short *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_ushort(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_ushort" "', argument " "2"" of type '" "unsigned short""'");
    } 
    temp2 = static_cast< unsigned short >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned short *) &(arg1)->vref_ushort((unsigned short const &)*arg2);
    }
    catch(unsigned short &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_long) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long temp2 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_long(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_long" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_long" "', argument " "2"" of type '" "long""'");
    } 
    temp2 = static_cast< long >(val2);
    arg2 = &temp2;
    try {
      result = (long *) &(arg1)->vref_long((long const &)*arg2);
    }
    catch(long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_ulong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long temp2 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_ulong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_ulong" "', argument " "2"" of type '" "unsigned long""'");
    } 
    temp2 = static_cast< unsigned long >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned long *) &(arg1)->vref_ulong((unsigned long const &)*arg2);
    }
    catch(unsigned long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_llong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long temp2 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long long *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_llong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_llong" "', argument " "2"" of type '" "long long""'");
    } 
    temp2 = static_cast< long long >(val2);
    arg2 = &temp2;
    try {
      result = (long long *) &(arg1)->vref_llong((long long const &)*arg2);
    }
    catch(long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_ullong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long temp2 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long long *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_ullong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_ullong" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    temp2 = static_cast< unsigned long long >(val2);
    arg2 = &temp2;
    try {
      result = (unsigned long long *) &(arg1)->vref_ullong((unsigned long long const &)*arg2);
    }
    catch(unsigned long long &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_char) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char temp2 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_char(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_char" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_char" "', argument " "2"" of type '" "char""'");
    } 
    temp2 = static_cast< char >(val2);
    arg2 = &temp2;
    try {
      result = (char *) &(arg1)->vref_char((char const &)*arg2);
    }
    catch(char &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_pchar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pchar *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    pchar temp2 ;
    int argvi = 0;
    pchar *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_pchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_char, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vref_pchar" "', argument " "2"" of type '" "pchar""'"); 
    }
    temp2 = reinterpret_cast< pchar >(argp2);
    arg2 = reinterpret_cast< pchar * >(&temp2);
    try {
      result = (pchar *) &(arg1)->vref_pchar((pchar const &)*arg2);
    }
    catch(pchar _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_pcharc) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pcharc *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    pcharc temp2 ;
    int argvi = 0;
    pcharc *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_pcharc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_char, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vref_pcharc" "', argument " "2"" of type '" "pcharc""'"); 
    }
    temp2 = reinterpret_cast< pcharc >(argp2);
    arg2 = reinterpret_cast< pcharc * >(&temp2);
    try {
      result = (pcharc *) &(arg1)->vref_pcharc((pcharc const &)*arg2);
    }
    catch(pcharc _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_pint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pint *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    pint temp2 = 0 ;
    int res2 ;
    int argvi = 0;
    pint *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_pint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), SWIG_as_voidptrptr(&temp2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vref_pint" "', argument " "2"" of type '" "Stype""'"); 
    }
    arg2 =  &temp2;
    try {
      result = (pint *) &(arg1)->vref_pint((pint const &)*arg2);
    }
    catch(pint _e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_FromCharPtr(_e)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(*result), SWIGTYPE_p_char, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_hello) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Hello *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 ;
    Hello temp2 ;
    int argvi = 0;
    Hello *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_hello(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_hello" "', argument " "2"" of type '" "Hello const &""'");
    } else {
      temp2 = static_cast< Hello >(val2);
      arg2 = &temp2;
    }
    try {
      result = (Hello *) &(arg1)->vref_hello((Hello const &)*arg2);
    }
    catch(Hello &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_myint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    MyInt *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    MyInt temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    MyInt *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_myint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_myint" "', argument " "2"" of type '" "MyInt""'");
    } 
    temp2 = static_cast< MyInt >(val2);
    arg2 = &temp2;
    try {
      result = (MyInt *) &(arg1)->vref_myint((MyInt const &)*arg2);
    }
    catch(MyInt &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_parami) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< int > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    Param< int > temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_parami(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_parami" "', argument " "2"" of type '" "Param< int >""'");
    } 
    temp2 = static_cast< Param< int > >(val2);
    arg2 = &temp2;
    try {
      result = (Param< int > *) &(arg1)->vref_parami((Param< int > const &)*arg2);
    }
    catch(Param< int > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_paramd) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< double > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    Param< double > temp2 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< double > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_paramd(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_paramd" "', argument " "2"" of type '" "Param< double >""'");
    } 
    temp2 = static_cast< Param< double > >(val2);
    arg2 = &temp2;
    try {
      result = (Param< double > *) &(arg1)->vref_paramd((Param< double > const &)*arg2);
    }
    catch(Param< double > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_paramc) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< char > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    Param< char > temp2 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< char > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_paramc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_paramc" "', argument " "2"" of type '" "Param< char >""'");
    } 
    temp2 = static_cast< Param< char > >(val2);
    arg2 = &temp2;
    try {
      result = (Param< char > *) &(arg1)->vref_paramc((Param< char > const &)*arg2);
    }
    catch(Param< char > &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_vref_sizet) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    size_t *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t temp2 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    size_t *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vref_sizet(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vref_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_vref_sizet" "', argument " "2"" of type '" "size_t""'");
    } 
    temp2 = static_cast< size_t >(val2);
    arg2 = &temp2;
    try {
      result = (size_t *) &(arg1)->vref_sizet((size_t const &)*arg2);
    }
    catch(size_t &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(_e))); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_bool) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_bool(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_bool" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    result = (bool)(arg1)->wrp_vref_bool(arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_schar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    signed char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    signed char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_schar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_schar" "', argument " "2"" of type '" "signed char""'");
    } 
    arg2 = static_cast< signed char >(val2);
    result = (signed char)(arg1)->wrp_vref_schar(arg2);
    ST(argvi) = SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_uchar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_uchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_uchar" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    result = (unsigned char)(arg1)->wrp_vref_uchar(arg2);
    ST(argvi) = SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_int) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_int(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_int" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_int" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (int)(arg1)->wrp_vref_int(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_uint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_uint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_uint" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (unsigned int)(arg1)->wrp_vref_uint(arg2);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_short) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    short result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_short(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_short" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_short" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    result = (short)(arg1)->wrp_vref_short(arg2);
    ST(argvi) = SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_ushort) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned short result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_ushort(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_ushort" "', argument " "2"" of type '" "unsigned short""'");
    } 
    arg2 = static_cast< unsigned short >(val2);
    result = (unsigned short)(arg1)->wrp_vref_ushort(arg2);
    ST(argvi) = SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_long) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_long(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_long" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_long" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    result = (long)(arg1)->wrp_vref_long(arg2);
    ST(argvi) = SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_ulong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_ulong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_ulong" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    result = (unsigned long)(arg1)->wrp_vref_ulong(arg2);
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_llong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_llong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_llong" "', argument " "2"" of type '" "long long""'");
    } 
    arg2 = static_cast< long long >(val2);
    result = (long long)(arg1)->wrp_vref_llong(arg2);
    ST(argvi) = SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_ullong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_ullong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_ullong" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    arg2 = static_cast< unsigned long long >(val2);
    result = (unsigned long long)(arg1)->wrp_vref_ullong(arg2);
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_char) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_char(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_char" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_char" "', argument " "2"" of type '" "char""'");
    } 
    arg2 = static_cast< char >(val2);
    result = (char)(arg1)->wrp_vref_char(arg2);
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_pchar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pchar arg2 = (pchar) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    pchar result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_pchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vref_pchar" "', argument " "2"" of type '" "pchar""'");
    }
    arg2 = reinterpret_cast< pchar >(buf2);
    result = (pchar)(arg1)->wrp_vref_pchar(arg2);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_pcharc) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pcharc arg2 = (pcharc) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    pcharc result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_pcharc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vref_pcharc" "', argument " "2"" of type '" "pcharc""'");
    }
    arg2 = reinterpret_cast< pcharc >(buf2);
    result = (pcharc)(arg1)->wrp_vref_pcharc(arg2);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_pint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pint arg2 = (pint) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    int argvi = 0;
    pint result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_pint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vref_pint" "', argument " "2"" of type '" "pint""'"); 
    }
    result = (pint)(arg1)->wrp_vref_pint(arg2);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_hello) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Hello arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Hello result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_hello(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_hello" "', argument " "2"" of type '" "Hello""'");
    } 
    arg2 = static_cast< Hello >(val2);
    result = (Hello)(arg1)->wrp_vref_hello(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_myint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    MyInt arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    MyInt result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_myint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_myint" "', argument " "2"" of type '" "MyInt""'");
    } 
    arg2 = static_cast< MyInt >(val2);
    result = (arg1)->wrp_vref_myint(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_parami) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< int > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< int > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_parami(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_parami" "', argument " "2"" of type '" "Param< int >""'");
    } 
    arg2 = static_cast< Param< int > >(val2);
    result = (arg1)->wrp_vref_parami(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_paramd) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< double > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< double > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_paramd(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_paramd" "', argument " "2"" of type '" "Param< double >""'");
    } 
    arg2 = static_cast< Param< double > >(val2);
    result = (arg1)->wrp_vref_paramd(arg2);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_paramc) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< char > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< char > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_paramc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_paramc" "', argument " "2"" of type '" "Param< char >""'");
    } 
    arg2 = static_cast< Param< char > >(val2);
    result = (arg1)->wrp_vref_paramc(arg2);
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vref_sizet) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vref_sizet(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vref_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vref_sizet" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (arg1)->wrp_vref_sizet(arg2);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_bool) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_bool(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_bool" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_bool" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    result = (bool)(arg1)->wrp_vval_bool(arg2);
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_schar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    signed char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    signed char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_schar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_schar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_schar" "', argument " "2"" of type '" "signed char""'");
    } 
    arg2 = static_cast< signed char >(val2);
    result = (signed char)(arg1)->wrp_vval_schar(arg2);
    ST(argvi) = SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_uchar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_uchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_uchar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_uchar" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    result = (unsigned char)(arg1)->wrp_vval_uchar(arg2);
    ST(argvi) = SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_int) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_int(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_int" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_int" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (int)(arg1)->wrp_vval_int(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_uint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_uint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_uint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_uint" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (unsigned int)(arg1)->wrp_vval_uint(arg2);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_short) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    short result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_short(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_short" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_short" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    result = (short)(arg1)->wrp_vval_short(arg2);
    ST(argvi) = SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_ushort) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned short result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_ushort(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_ushort" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_ushort" "', argument " "2"" of type '" "unsigned short""'");
    } 
    arg2 = static_cast< unsigned short >(val2);
    result = (unsigned short)(arg1)->wrp_vval_ushort(arg2);
    ST(argvi) = SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_long) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_long(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_long" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_long" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    result = (long)(arg1)->wrp_vval_long(arg2);
    ST(argvi) = SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_ulong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_ulong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_ulong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_ulong" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    result = (unsigned long)(arg1)->wrp_vval_ulong(arg2);
    ST(argvi) = SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_llong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    long long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_llong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_llong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_llong" "', argument " "2"" of type '" "long long""'");
    } 
    arg2 = static_cast< long long >(val2);
    result = (long long)(arg1)->wrp_vval_llong(arg2);
    ST(argvi) = SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_ullong) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned long long result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_ullong(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_ullong" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_ullong" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    arg2 = static_cast< unsigned long long >(val2);
    result = (unsigned long long)(arg1)->wrp_vval_ullong(arg2);
    ST(argvi) = SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_char) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_char(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_char" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_char" "', argument " "2"" of type '" "char""'");
    } 
    arg2 = static_cast< char >(val2);
    result = (char)(arg1)->wrp_vval_char(arg2);
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_pchar) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pchar arg2 = (pchar) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    pchar result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_pchar(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_pchar" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vval_pchar" "', argument " "2"" of type '" "pchar""'");
    }
    arg2 = reinterpret_cast< pchar >(buf2);
    result = (pchar)(arg1)->wrp_vval_pchar(arg2);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_pcharc) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pcharc arg2 = (pcharc) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    pcharc result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_pcharc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_pcharc" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vval_pcharc" "', argument " "2"" of type '" "pcharc""'");
    }
    arg2 = reinterpret_cast< pcharc >(buf2);
    result = (pcharc)(arg1)->wrp_vval_pcharc(arg2);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_pint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pint arg2 = (pint) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    int argvi = 0;
    pint result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_pint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_pint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1),SWIG_as_voidptrptr(&arg2), 0, 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_wrp_vval_pint" "', argument " "2"" of type '" "pint""'"); 
    }
    result = (pint)(arg1)->wrp_vval_pint(arg2);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_hello) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Hello arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Hello result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_hello(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_hello" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_hello" "', argument " "2"" of type '" "Hello""'");
    } 
    arg2 = static_cast< Hello >(val2);
    result = (Hello)(arg1)->wrp_vval_hello(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_myint) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    MyInt arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    MyInt result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_myint(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_myint" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_myint" "', argument " "2"" of type '" "MyInt""'");
    } 
    arg2 = static_cast< MyInt >(val2);
    result = (arg1)->wrp_vval_myint(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_parami) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< int > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< int > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_parami(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_parami" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_parami" "', argument " "2"" of type '" "Param< int >""'");
    } 
    arg2 = static_cast< Param< int > >(val2);
    result = (arg1)->wrp_vval_parami(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_paramd) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< double > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< double > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_paramd(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_paramd" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_paramd" "', argument " "2"" of type '" "Param< double >""'");
    } 
    arg2 = static_cast< Param< double > >(val2);
    result = (arg1)->wrp_vval_paramd(arg2);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_paramc) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Param< char > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Param< char > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_paramc(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_paramc" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_paramc" "', argument " "2"" of type '" "Param< char >""'");
    } 
    arg2 = static_cast< Param< char > >(val2);
    result = (arg1)->wrp_vval_paramc(arg2);
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_wrp_vval_sizet) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    size_t result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_wrp_vval_sizet(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_wrp_vval_sizet" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_wrp_vval_sizet" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (arg1)->wrp_vval_sizet(arg2);
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_c_check) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_c_check(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_c_check" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (int)(arg1)->c_check();
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_v_check) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: TestDirector_v_check(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_v_check" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    result = (int)(arg1)->v_check();
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val__SWIG_0) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_ref__SWIG_0) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    bool *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool temp2 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "bool""'");
    } 
    temp2 = static_cast< bool >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((bool const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val__SWIG_1) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    signed char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "signed char""'");
    } 
    arg2 = static_cast< signed char >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_ref__SWIG_1) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    signed char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    signed char temp2 ;
    signed char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "signed char""'");
    } 
    temp2 = static_cast< signed char >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((signed char const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val__SWIG_2) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_ref__SWIG_2) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char temp2 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned char""'");
    } 
    temp2 = static_cast< unsigned char >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((unsigned char const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val__SWIG_3) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_ref__SWIG_3) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    int *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int temp2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "int""'");
    } 
    temp2 = static_cast< int >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((int const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val__SWIG_4) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_ref__SWIG_4) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned int *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int temp2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned int""'");
    } 
    temp2 = static_cast< unsigned int >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((unsigned int const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val__SWIG_5) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_ref__SWIG_5) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    short *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short temp2 ;
    short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "short""'");
    } 
    temp2 = static_cast< short >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((short const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val__SWIG_6) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned short""'");
    } 
    arg2 = static_cast< unsigned short >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_ref__SWIG_6) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned short *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned short temp2 ;
    unsigned short val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned short""'");
    } 
    temp2 = static_cast< unsigned short >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((unsigned short const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val__SWIG_7) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_ref__SWIG_7) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long temp2 ;
    long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "long""'");
    } 
    temp2 = static_cast< long >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((long const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val__SWIG_8) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_ref__SWIG_8) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long temp2 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned long""'");
    } 
    temp2 = static_cast< unsigned long >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((unsigned long const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val__SWIG_9) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "long long""'");
    } 
    arg2 = static_cast< long long >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_ref__SWIG_9) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    long long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long long temp2 ;
    long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "long long""'");
    } 
    temp2 = static_cast< long long >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((long long const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val__SWIG_10) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    arg2 = static_cast< unsigned long long >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_ref__SWIG_10) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    unsigned long long *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long long temp2 ;
    unsigned long long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "unsigned long long""'");
    } 
    temp2 = static_cast< unsigned long long >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((unsigned long long const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val__SWIG_11) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "char""'");
    } 
    arg2 = static_cast< char >(val2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_ref__SWIG_11) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    char *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char temp2 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "char""'");
    } 
    temp2 = static_cast< char >(val2);
    arg2 = &temp2;
    result = (int)(arg1)->ovr_ref((char const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val__SWIG_12) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pchar arg2 = (pchar) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_val(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_val" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ovr_val" "', argument " "2"" of type '" "pchar""'");
    }
    arg2 = reinterpret_cast< pchar >(buf2);
    result = (int)(arg1)->ovr_val(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_val) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 7;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_7:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 8;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_8:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 9;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_9:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 10;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_10:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 11;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_11:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 12;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_12:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 13;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_13:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_val__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_val__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_val__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_val__SWIG_6); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_val__SWIG_5); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_val__SWIG_4); return;
    case 7:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_val__SWIG_3); return;
    case 8:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_val__SWIG_8); return;
    case 9:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_val__SWIG_7); return;
    case 10:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_val__SWIG_10); return;
    case 11:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_val__SWIG_9); return;
    case 12:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_val__SWIG_11); return;
    case 13:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_val__SWIG_12); return;
    }
  }
  
  croak("No matching function for overloaded 'TestDirector_ovr_val'");
  XSRETURN(0);
}


XS(_wrap_TestDirector_ovr_ref__SWIG_12) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    pchar *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    pchar temp2 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_ovr_ref(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_ovr_ref" "', argument " "1"" of type '" "TestDirector *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_char, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_ovr_ref" "', argument " "2"" of type '" "pchar""'"); 
    }
    temp2 = reinterpret_cast< pchar >(argp2);
    arg2 = reinterpret_cast< pchar * >(&temp2);
    result = (int)(arg1)->ovr_ref((pchar const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TestDirector_ovr_ref) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_char, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_signed_SS_char SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 7;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_7:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 8;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_8:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 9;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_9:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 10;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_10:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 11;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_11:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_long_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 12;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_12:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_TestDirector, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 13;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_13:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_ref__SWIG_12); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_ref__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_ref__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_ref__SWIG_1); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_ref__SWIG_6); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_ref__SWIG_5); return;
    case 7:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_ref__SWIG_4); return;
    case 8:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_ref__SWIG_3); return;
    case 9:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_ref__SWIG_8); return;
    case 10:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_ref__SWIG_7); return;
    case 11:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_ref__SWIG_10); return;
    case 12:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_ref__SWIG_9); return;
    case 13:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_TestDirector_ovr_ref__SWIG_11); return;
    }
  }
  
  croak("No matching function for overloaded 'TestDirector_ovr_ref'");
  XSRETURN(0);
}


XS(_wrap_TestDirector_vtest) {
  {
    TestDirector *arg1 = (TestDirector *) 0 ;
    Test *arg2 = (Test *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    Test *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TestDirector_vtest(self,t);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TestDirector, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TestDirector_vtest" "', argument " "1"" of type '" "TestDirector const *""'"); 
    }
    arg1 = reinterpret_cast< TestDirector * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_Test, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestDirector_vtest" "', argument " "2"" of type '" "Test *""'"); 
    }
    arg2 = reinterpret_cast< Test * >(argp2);
    try {
      result = (Test *)((TestDirector const *)arg1)->vtest(arg2);
    }
    catch(Test &_e) {
      sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new Test(static_cast< const Test& >(_e))),SWIGTYPE_p_Test,SWIG_POINTER_OWN)); SWIG_fail ;
    }
    
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Test, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_v_check) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: v_check();");
    }
    result = (int)v_check();
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_char_foo__SWIG_0) {
  {
    float arg1 ;
    char *arg2 = (char *) 0 ;
    float val1 ;
    int ecode1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: char_foo(f,s);");
    }
    ecode1 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "char_foo" "', argument " "1"" of type '" "float""'");
    } 
    arg1 = static_cast< float >(val1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "char_foo" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    result = (char *)char_foo(arg1,(char const *)arg2);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_char_foo__SWIG_1) {
  {
    double arg1 ;
    int arg2 ;
    double val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: char_foo(d,i);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "char_foo" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "char_foo" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (int)char_foo(arg1,arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_char_foo) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_char_foo__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_char_foo__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'char_foo'");
  XSRETURN(0);
}


XS(_wrap_SetPos) {
  {
    DCTypes::cuint *arg1 = 0 ;
    DCTypes::cuint *arg2 = 0 ;
    unsigned int temp1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    unsigned int temp2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SetPos(x,y);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SetPos" "', argument " "1"" of type '" "unsigned int""'");
    } 
    temp1 = static_cast< unsigned int >(val1);
    arg1 = &temp1;
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetPos" "', argument " "2"" of type '" "unsigned int""'");
    } 
    temp2 = static_cast< unsigned int >(val2);
    arg2 = &temp2;
    result = (unsigned int)DCSystem::SetPos((unsigned int const &)*arg1,(unsigned int const &)*arg2);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_double_2__SWIG_0) {
  {
    double arg1 ;
    double *arg2 = 0 ;
    double val1 ;
    int ecode1 = 0 ;
    double temp2 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: val_double_2(x,y);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_double_2" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "val_double_2" "', argument " "2"" of type '" "double""'");
    } 
    temp2 = static_cast< double >(val2);
    arg2 = &temp2;
    result = (double)val_double_2(arg1,(double const &)*arg2);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_double_2__SWIG_1) {
  {
    double arg1 ;
    double val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_double_2(x);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_double_2" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    result = (double)val_double_2(arg1);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_double_2) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_val_double_2__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_val_double_2__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'val_double_2'");
  XSRETURN(0);
}


XS(_wrap_val_double) {
  {
    double arg1 ;
    double val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_double(x);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_double" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    result = (double)val_double(arg1);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_float_2__SWIG_0) {
  {
    float arg1 ;
    float *arg2 = 0 ;
    float val1 ;
    int ecode1 = 0 ;
    float temp2 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: val_float_2(x,y);");
    }
    ecode1 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_float_2" "', argument " "1"" of type '" "float""'");
    } 
    arg1 = static_cast< float >(val1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "val_float_2" "', argument " "2"" of type '" "float""'");
    } 
    temp2 = static_cast< float >(val2);
    arg2 = &temp2;
    result = (float)val_float_2(arg1,(float const &)*arg2);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_float_2__SWIG_1) {
  {
    float arg1 ;
    float val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_float_2(x);");
    }
    ecode1 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_float_2" "', argument " "1"" of type '" "float""'");
    } 
    arg1 = static_cast< float >(val1);
    result = (float)val_float_2(arg1);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_val_float_2) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_val_float_2__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_val_float_2__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'val_float_2'");
  XSRETURN(0);
}


XS(_wrap_regression_test_for_bug1699646__SWIG_0) {
  {
    float arg1 ;
    float val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: regression_test_for_bug1699646(f);");
    }
    ecode1 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "regression_test_for_bug1699646" "', argument " "1"" of type '" "float""'");
    } 
    arg1 = static_cast< float >(val1);
    result = (float)regression_test_for_bug1699646(arg1);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_regression_test_for_bug1699646__SWIG_1) {
  {
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: regression_test_for_bug1699646();");
    }
    result = (float)regression_test_for_bug1699646();
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_regression_test_for_bug1699646) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_regression_test_for_bug1699646__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_regression_test_for_bug1699646__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'regression_test_for_bug1699646'");
  XSRETURN(0);
}


XS(_wrap_val_float) {
  {
    float arg1 ;
    float val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: val_float(x);");
    }
    ecode1 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "val_float" "', argument " "1"" of type '" "float""'");
    } 
    arg1 = static_cast< float >(val1);
    result = (float)val_float(arg1);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_pchar) {
  {
    size_t arg1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_pchar(nelements);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_pchar" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
    result = (char *)new_pchar(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_char, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_pchar) {
  {
    char *arg1 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_pchar(ary);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_char, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pchar" "', argument " "1"" of type '" "char *""'"); 
    }
    arg1 = reinterpret_cast< char * >(argp1);
    delete_pchar(arg1);
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_pchar_getitem) {
  {
    char *arg1 = (char *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: pchar_getitem(ary,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_char, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pchar_getitem" "', argument " "1"" of type '" "char *""'"); 
    }
    arg1 = reinterpret_cast< char * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pchar_getitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (char)pchar_getitem(arg1,arg2);
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_pchar_setitem) {
  {
    char *arg1 = (char *) 0 ;
    size_t arg2 ;
    char arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    char val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: pchar_setitem(ary,index,value);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_char, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pchar_setitem" "', argument " "1"" of type '" "char *""'"); 
    }
    arg1 = reinterpret_cast< char * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pchar_setitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pchar_setitem" "', argument " "3"" of type '" "char""'");
    } 
    arg3 = static_cast< char >(val3);
    pchar_setitem(arg1,arg2,arg3);
    ST(argvi) = sv_newmortal();
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_Foo = {"_p_Foo", "foo_ptr|Foo *", 0, 0, (void*)"primitive_types::Foo", 0};
static swig_type_info _swigt__p_Test = {"_p_Test", "Test *", 0, 0, (void*)"primitive_types::Test", 0};
static swig_type_info _swigt__p_TestDirector = {"_p_TestDirector", "TestDirector *", 0, 0, (void*)"primitive_types::TestDirector", 0};
static swig_type_info _swigt__p_a_5__char = {"_p_a_5__char", "namet *|char (*)[5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|pcharc|pint|pchar", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "DCTypes::cuint *|unsigned int *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Foo,
  &_swigt__p_Test,
  &_swigt__p_TestDirector,
  &_swigt__p_a_5__char,
  &_swigt__p_char,
  &_swigt__p_unsigned_int,
};

static swig_cast_info _swigc__p_Foo[] = {  {&_swigt__p_Foo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Test[] = {  {&_swigt__p_Test, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TestDirector[] = {  {&_swigt__p_TestDirector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_5__char[] = {  {&_swigt__p_a_5__char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Foo,
  _swigc__p_Test,
  _swigc__p_TestDirector,
  _swigc__p_a_5__char,
  _swigc__p_char,
  _swigc__p_unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
    { "primitive_typesc::def_pchar", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_def_pchar_get,0 },
    { "primitive_typesc::def_pcharc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_def_pcharc_get,0 },
    { "primitive_typesc::def_namet", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_def_namet_get,0 },
    { "primitive_typesc::gbl_namet", MAGIC_CLASS _wrap_gbl_namet_set, MAGIC_CLASS _wrap_gbl_namet_get,0 },
    { "primitive_typesc::fixsize", MAGIC_CLASS _wrap_fixsize_set, MAGIC_CLASS _wrap_fixsize_get,0 },
    { "primitive_typesc::cct_bool", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_bool_get,0 },
    { "primitive_typesc::cct_schar", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_schar_get,0 },
    { "primitive_typesc::cct_uchar", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_uchar_get,0 },
    { "primitive_typesc::cct_int", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_int_get,0 },
    { "primitive_typesc::cct_uint", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_uint_get,0 },
    { "primitive_typesc::cct_short", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_short_get,0 },
    { "primitive_typesc::cct_ushort", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_ushort_get,0 },
    { "primitive_typesc::cct_long", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_long_get,0 },
    { "primitive_typesc::cct_ulong", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_ulong_get,0 },
    { "primitive_typesc::cct_llong", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_llong_get,0 },
    { "primitive_typesc::cct_ullong", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_ullong_get,0 },
    { "primitive_typesc::cct_char", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_char_get,0 },
    { "primitive_typesc::cct_pchar", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_pchar_get,0 },
    { "primitive_typesc::cct_pcharc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_pcharc_get,0 },
    { "primitive_typesc::cct_pint", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_pint_get,0 },
    { "primitive_typesc::cct_hello", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_hello_get,0 },
    { "primitive_typesc::cct_myint", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_myint_get,0 },
    { "primitive_typesc::cct_parami", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_parami_get,0 },
    { "primitive_typesc::cct_paramd", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_paramd_get,0 },
    { "primitive_typesc::cct_paramc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_paramc_get,0 },
    { "primitive_typesc::cct_sizet", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_cct_sizet_get,0 },
    { "primitive_typesc::var_bool", MAGIC_CLASS _wrap_var_bool_set, MAGIC_CLASS _wrap_var_bool_get,0 },
    { "primitive_typesc::var_schar", MAGIC_CLASS _wrap_var_schar_set, MAGIC_CLASS _wrap_var_schar_get,0 },
    { "primitive_typesc::var_uchar", MAGIC_CLASS _wrap_var_uchar_set, MAGIC_CLASS _wrap_var_uchar_get,0 },
    { "primitive_typesc::var_int", MAGIC_CLASS _wrap_var_int_set, MAGIC_CLASS _wrap_var_int_get,0 },
    { "primitive_typesc::var_uint", MAGIC_CLASS _wrap_var_uint_set, MAGIC_CLASS _wrap_var_uint_get,0 },
    { "primitive_typesc::var_short", MAGIC_CLASS _wrap_var_short_set, MAGIC_CLASS _wrap_var_short_get,0 },
    { "primitive_typesc::var_ushort", MAGIC_CLASS _wrap_var_ushort_set, MAGIC_CLASS _wrap_var_ushort_get,0 },
    { "primitive_typesc::var_long", MAGIC_CLASS _wrap_var_long_set, MAGIC_CLASS _wrap_var_long_get,0 },
    { "primitive_typesc::var_ulong", MAGIC_CLASS _wrap_var_ulong_set, MAGIC_CLASS _wrap_var_ulong_get,0 },
    { "primitive_typesc::var_llong", MAGIC_CLASS _wrap_var_llong_set, MAGIC_CLASS _wrap_var_llong_get,0 },
    { "primitive_typesc::var_ullong", MAGIC_CLASS _wrap_var_ullong_set, MAGIC_CLASS _wrap_var_ullong_get,0 },
    { "primitive_typesc::var_char", MAGIC_CLASS _wrap_var_char_set, MAGIC_CLASS _wrap_var_char_get,0 },
    { "primitive_typesc::var_pchar", MAGIC_CLASS _wrap_var_pchar_set, MAGIC_CLASS _wrap_var_pchar_get,0 },
    { "primitive_typesc::var_pcharc", MAGIC_CLASS _wrap_var_pcharc_set, MAGIC_CLASS _wrap_var_pcharc_get,0 },
    { "primitive_typesc::var_pint", MAGIC_CLASS _wrap_var_pint_set, MAGIC_CLASS _wrap_var_pint_get,0 },
    { "primitive_typesc::var_hello", MAGIC_CLASS _wrap_var_hello_set, MAGIC_CLASS _wrap_var_hello_get,0 },
    { "primitive_typesc::var_myint", MAGIC_CLASS _wrap_var_myint_set, MAGIC_CLASS _wrap_var_myint_get,0 },
    { "primitive_typesc::var_parami", MAGIC_CLASS _wrap_var_parami_set, MAGIC_CLASS _wrap_var_parami_get,0 },
    { "primitive_typesc::var_paramd", MAGIC_CLASS _wrap_var_paramd_set, MAGIC_CLASS _wrap_var_paramd_get,0 },
    { "primitive_typesc::var_paramc", MAGIC_CLASS _wrap_var_paramc_set, MAGIC_CLASS _wrap_var_paramc_get,0 },
    { "primitive_typesc::var_sizet", MAGIC_CLASS _wrap_var_sizet_set, MAGIC_CLASS _wrap_var_sizet_get,0 },
    { "primitive_typesc::var_namet", MAGIC_CLASS _wrap_var_namet_set, MAGIC_CLASS _wrap_var_namet_get,0 },
    { "primitive_typesc::Test_stc_double", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_Test_stc_double_get,0 },
    { "primitive_typesc::Test_stc_float", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_Test_stc_float_get,0 },
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"primitive_typesc::val_bool", _wrap_val_bool},
{"primitive_typesc::val_schar", _wrap_val_schar},
{"primitive_typesc::val_uchar", _wrap_val_uchar},
{"primitive_typesc::val_int", _wrap_val_int},
{"primitive_typesc::val_uint", _wrap_val_uint},
{"primitive_typesc::val_short", _wrap_val_short},
{"primitive_typesc::val_ushort", _wrap_val_ushort},
{"primitive_typesc::val_long", _wrap_val_long},
{"primitive_typesc::val_ulong", _wrap_val_ulong},
{"primitive_typesc::val_llong", _wrap_val_llong},
{"primitive_typesc::val_ullong", _wrap_val_ullong},
{"primitive_typesc::val_char", _wrap_val_char},
{"primitive_typesc::val_pchar", _wrap_val_pchar},
{"primitive_typesc::val_pcharc", _wrap_val_pcharc},
{"primitive_typesc::val_pint", _wrap_val_pint},
{"primitive_typesc::val_hello", _wrap_val_hello},
{"primitive_typesc::val_myint", _wrap_val_myint},
{"primitive_typesc::val_parami", _wrap_val_parami},
{"primitive_typesc::val_paramd", _wrap_val_paramd},
{"primitive_typesc::val_paramc", _wrap_val_paramc},
{"primitive_typesc::val_sizet", _wrap_val_sizet},
{"primitive_typesc::ref_bool", _wrap_ref_bool},
{"primitive_typesc::ref_schar", _wrap_ref_schar},
{"primitive_typesc::ref_uchar", _wrap_ref_uchar},
{"primitive_typesc::ref_int", _wrap_ref_int},
{"primitive_typesc::ref_uint", _wrap_ref_uint},
{"primitive_typesc::ref_short", _wrap_ref_short},
{"primitive_typesc::ref_ushort", _wrap_ref_ushort},
{"primitive_typesc::ref_long", _wrap_ref_long},
{"primitive_typesc::ref_ulong", _wrap_ref_ulong},
{"primitive_typesc::ref_llong", _wrap_ref_llong},
{"primitive_typesc::ref_ullong", _wrap_ref_ullong},
{"primitive_typesc::ref_char", _wrap_ref_char},
{"primitive_typesc::ref_pchar", _wrap_ref_pchar},
{"primitive_typesc::ref_pcharc", _wrap_ref_pcharc},
{"primitive_typesc::ref_pint", _wrap_ref_pint},
{"primitive_typesc::ref_hello", _wrap_ref_hello},
{"primitive_typesc::ref_myint", _wrap_ref_myint},
{"primitive_typesc::ref_parami", _wrap_ref_parami},
{"primitive_typesc::ref_paramd", _wrap_ref_paramd},
{"primitive_typesc::ref_paramc", _wrap_ref_paramc},
{"primitive_typesc::ref_sizet", _wrap_ref_sizet},
{"primitive_typesc::var_init", _wrap_var_init},
{"primitive_typesc::Foo__a_set", _wrap_Foo__a_set},
{"primitive_typesc::Foo__a_get", _wrap_Foo__a_get},
{"primitive_typesc::new_Foo", _wrap_new_Foo},
{"primitive_typesc::Foo_copy", _wrap_Foo_copy},
{"primitive_typesc::Foo_copy_c", _wrap_Foo_copy_c},
{"primitive_typesc::Foo_copy_r", _wrap_Foo_copy_r},
{"primitive_typesc::Foo_this_p", _wrap_Foo_this_p},
{"primitive_typesc::Foo_this_r", _wrap_Foo_this_r},
{"primitive_typesc::delete_Foo", _wrap_delete_Foo},
{"primitive_typesc::fptr_val", _wrap_fptr_val},
{"primitive_typesc::fptr_ref", _wrap_fptr_ref},
{"primitive_typesc::new_Test", _wrap_new_Test},
{"primitive_typesc::delete_Test", _wrap_delete_Test},
{"primitive_typesc::Test_var_bool_set", _wrap_Test_var_bool_set},
{"primitive_typesc::Test_var_bool_get", _wrap_Test_var_bool_get},
{"primitive_typesc::Test_var_schar_set", _wrap_Test_var_schar_set},
{"primitive_typesc::Test_var_schar_get", _wrap_Test_var_schar_get},
{"primitive_typesc::Test_var_uchar_set", _wrap_Test_var_uchar_set},
{"primitive_typesc::Test_var_uchar_get", _wrap_Test_var_uchar_get},
{"primitive_typesc::Test_var_int_set", _wrap_Test_var_int_set},
{"primitive_typesc::Test_var_int_get", _wrap_Test_var_int_get},
{"primitive_typesc::Test_var_uint_set", _wrap_Test_var_uint_set},
{"primitive_typesc::Test_var_uint_get", _wrap_Test_var_uint_get},
{"primitive_typesc::Test_var_short_set", _wrap_Test_var_short_set},
{"primitive_typesc::Test_var_short_get", _wrap_Test_var_short_get},
{"primitive_typesc::Test_var_ushort_set", _wrap_Test_var_ushort_set},
{"primitive_typesc::Test_var_ushort_get", _wrap_Test_var_ushort_get},
{"primitive_typesc::Test_var_long_set", _wrap_Test_var_long_set},
{"primitive_typesc::Test_var_long_get", _wrap_Test_var_long_get},
{"primitive_typesc::Test_var_ulong_set", _wrap_Test_var_ulong_set},
{"primitive_typesc::Test_var_ulong_get", _wrap_Test_var_ulong_get},
{"primitive_typesc::Test_var_llong_set", _wrap_Test_var_llong_set},
{"primitive_typesc::Test_var_llong_get", _wrap_Test_var_llong_get},
{"primitive_typesc::Test_var_ullong_set", _wrap_Test_var_ullong_set},
{"primitive_typesc::Test_var_ullong_get", _wrap_Test_var_ullong_get},
{"primitive_typesc::Test_var_char_set", _wrap_Test_var_char_set},
{"primitive_typesc::Test_var_char_get", _wrap_Test_var_char_get},
{"primitive_typesc::Test_var_pchar_set", _wrap_Test_var_pchar_set},
{"primitive_typesc::Test_var_pchar_get", _wrap_Test_var_pchar_get},
{"primitive_typesc::Test_var_pcharc_set", _wrap_Test_var_pcharc_set},
{"primitive_typesc::Test_var_pcharc_get", _wrap_Test_var_pcharc_get},
{"primitive_typesc::Test_var_pint_set", _wrap_Test_var_pint_set},
{"primitive_typesc::Test_var_pint_get", _wrap_Test_var_pint_get},
{"primitive_typesc::Test_var_hello_set", _wrap_Test_var_hello_set},
{"primitive_typesc::Test_var_hello_get", _wrap_Test_var_hello_get},
{"primitive_typesc::Test_var_myint_set", _wrap_Test_var_myint_set},
{"primitive_typesc::Test_var_myint_get", _wrap_Test_var_myint_get},
{"primitive_typesc::Test_var_parami_set", _wrap_Test_var_parami_set},
{"primitive_typesc::Test_var_parami_get", _wrap_Test_var_parami_get},
{"primitive_typesc::Test_var_paramd_set", _wrap_Test_var_paramd_set},
{"primitive_typesc::Test_var_paramd_get", _wrap_Test_var_paramd_get},
{"primitive_typesc::Test_var_paramc_set", _wrap_Test_var_paramc_set},
{"primitive_typesc::Test_var_paramc_get", _wrap_Test_var_paramc_get},
{"primitive_typesc::Test_var_sizet_set", _wrap_Test_var_sizet_set},
{"primitive_typesc::Test_var_sizet_get", _wrap_Test_var_sizet_get},
{"primitive_typesc::Test_var_namet_set", _wrap_Test_var_namet_set},
{"primitive_typesc::Test_var_namet_get", _wrap_Test_var_namet_get},
{"primitive_typesc::Test_val_namet", _wrap_Test_val_namet},
{"primitive_typesc::Test_val_cnamet", _wrap_Test_val_cnamet},
{"primitive_typesc::Test_val_bool", _wrap_Test_val_bool},
{"primitive_typesc::Test_val_schar", _wrap_Test_val_schar},
{"primitive_typesc::Test_val_uchar", _wrap_Test_val_uchar},
{"primitive_typesc::Test_val_int", _wrap_Test_val_int},
{"primitive_typesc::Test_val_uint", _wrap_Test_val_uint},
{"primitive_typesc::Test_val_short", _wrap_Test_val_short},
{"primitive_typesc::Test_val_ushort", _wrap_Test_val_ushort},
{"primitive_typesc::Test_val_long", _wrap_Test_val_long},
{"primitive_typesc::Test_val_ulong", _wrap_Test_val_ulong},
{"primitive_typesc::Test_val_llong", _wrap_Test_val_llong},
{"primitive_typesc::Test_val_ullong", _wrap_Test_val_ullong},
{"primitive_typesc::Test_val_char", _wrap_Test_val_char},
{"primitive_typesc::Test_val_pchar", _wrap_Test_val_pchar},
{"primitive_typesc::Test_val_pcharc", _wrap_Test_val_pcharc},
{"primitive_typesc::Test_val_pint", _wrap_Test_val_pint},
{"primitive_typesc::Test_val_hello", _wrap_Test_val_hello},
{"primitive_typesc::Test_val_myint", _wrap_Test_val_myint},
{"primitive_typesc::Test_val_parami", _wrap_Test_val_parami},
{"primitive_typesc::Test_val_paramd", _wrap_Test_val_paramd},
{"primitive_typesc::Test_val_paramc", _wrap_Test_val_paramc},
{"primitive_typesc::Test_val_sizet", _wrap_Test_val_sizet},
{"primitive_typesc::Test_ref_bool", _wrap_Test_ref_bool},
{"primitive_typesc::Test_ref_schar", _wrap_Test_ref_schar},
{"primitive_typesc::Test_ref_uchar", _wrap_Test_ref_uchar},
{"primitive_typesc::Test_ref_int", _wrap_Test_ref_int},
{"primitive_typesc::Test_ref_uint", _wrap_Test_ref_uint},
{"primitive_typesc::Test_ref_short", _wrap_Test_ref_short},
{"primitive_typesc::Test_ref_ushort", _wrap_Test_ref_ushort},
{"primitive_typesc::Test_ref_long", _wrap_Test_ref_long},
{"primitive_typesc::Test_ref_ulong", _wrap_Test_ref_ulong},
{"primitive_typesc::Test_ref_llong", _wrap_Test_ref_llong},
{"primitive_typesc::Test_ref_ullong", _wrap_Test_ref_ullong},
{"primitive_typesc::Test_ref_char", _wrap_Test_ref_char},
{"primitive_typesc::Test_ref_pchar", _wrap_Test_ref_pchar},
{"primitive_typesc::Test_ref_pcharc", _wrap_Test_ref_pcharc},
{"primitive_typesc::Test_ref_pint", _wrap_Test_ref_pint},
{"primitive_typesc::Test_ref_hello", _wrap_Test_ref_hello},
{"primitive_typesc::Test_ref_myint", _wrap_Test_ref_myint},
{"primitive_typesc::Test_ref_parami", _wrap_Test_ref_parami},
{"primitive_typesc::Test_ref_paramd", _wrap_Test_ref_paramd},
{"primitive_typesc::Test_ref_paramc", _wrap_Test_ref_paramc},
{"primitive_typesc::Test_ref_sizet", _wrap_Test_ref_sizet},
{"primitive_typesc::Test_c_check", _wrap_Test_c_check},
{"primitive_typesc::Test_v_check", _wrap_Test_v_check},
{"primitive_typesc::Test_ovr_val", _wrap_Test_ovr_val},
{"primitive_typesc::Test_ovr_ref", _wrap_Test_ovr_ref},
{"primitive_typesc::new_TestDirector", _wrap_new_TestDirector},
{"primitive_typesc::delete_TestDirector", _wrap_delete_TestDirector},
{"primitive_typesc::TestDirector_vval_namet", _wrap_TestDirector_vval_namet},
{"primitive_typesc::TestDirector_vval_cnamet", _wrap_TestDirector_vval_cnamet},
{"primitive_typesc::TestDirector_var_bool_set", _wrap_TestDirector_var_bool_set},
{"primitive_typesc::TestDirector_var_bool_get", _wrap_TestDirector_var_bool_get},
{"primitive_typesc::TestDirector_var_schar_set", _wrap_TestDirector_var_schar_set},
{"primitive_typesc::TestDirector_var_schar_get", _wrap_TestDirector_var_schar_get},
{"primitive_typesc::TestDirector_var_uchar_set", _wrap_TestDirector_var_uchar_set},
{"primitive_typesc::TestDirector_var_uchar_get", _wrap_TestDirector_var_uchar_get},
{"primitive_typesc::TestDirector_var_int_set", _wrap_TestDirector_var_int_set},
{"primitive_typesc::TestDirector_var_int_get", _wrap_TestDirector_var_int_get},
{"primitive_typesc::TestDirector_var_uint_set", _wrap_TestDirector_var_uint_set},
{"primitive_typesc::TestDirector_var_uint_get", _wrap_TestDirector_var_uint_get},
{"primitive_typesc::TestDirector_var_short_set", _wrap_TestDirector_var_short_set},
{"primitive_typesc::TestDirector_var_short_get", _wrap_TestDirector_var_short_get},
{"primitive_typesc::TestDirector_var_ushort_set", _wrap_TestDirector_var_ushort_set},
{"primitive_typesc::TestDirector_var_ushort_get", _wrap_TestDirector_var_ushort_get},
{"primitive_typesc::TestDirector_var_long_set", _wrap_TestDirector_var_long_set},
{"primitive_typesc::TestDirector_var_long_get", _wrap_TestDirector_var_long_get},
{"primitive_typesc::TestDirector_var_ulong_set", _wrap_TestDirector_var_ulong_set},
{"primitive_typesc::TestDirector_var_ulong_get", _wrap_TestDirector_var_ulong_get},
{"primitive_typesc::TestDirector_var_llong_set", _wrap_TestDirector_var_llong_set},
{"primitive_typesc::TestDirector_var_llong_get", _wrap_TestDirector_var_llong_get},
{"primitive_typesc::TestDirector_var_ullong_set", _wrap_TestDirector_var_ullong_set},
{"primitive_typesc::TestDirector_var_ullong_get", _wrap_TestDirector_var_ullong_get},
{"primitive_typesc::TestDirector_var_char_set", _wrap_TestDirector_var_char_set},
{"primitive_typesc::TestDirector_var_char_get", _wrap_TestDirector_var_char_get},
{"primitive_typesc::TestDirector_var_pchar_set", _wrap_TestDirector_var_pchar_set},
{"primitive_typesc::TestDirector_var_pchar_get", _wrap_TestDirector_var_pchar_get},
{"primitive_typesc::TestDirector_var_pcharc_set", _wrap_TestDirector_var_pcharc_set},
{"primitive_typesc::TestDirector_var_pcharc_get", _wrap_TestDirector_var_pcharc_get},
{"primitive_typesc::TestDirector_var_pint_set", _wrap_TestDirector_var_pint_set},
{"primitive_typesc::TestDirector_var_pint_get", _wrap_TestDirector_var_pint_get},
{"primitive_typesc::TestDirector_var_hello_set", _wrap_TestDirector_var_hello_set},
{"primitive_typesc::TestDirector_var_hello_get", _wrap_TestDirector_var_hello_get},
{"primitive_typesc::TestDirector_var_myint_set", _wrap_TestDirector_var_myint_set},
{"primitive_typesc::TestDirector_var_myint_get", _wrap_TestDirector_var_myint_get},
{"primitive_typesc::TestDirector_var_parami_set", _wrap_TestDirector_var_parami_set},
{"primitive_typesc::TestDirector_var_parami_get", _wrap_TestDirector_var_parami_get},
{"primitive_typesc::TestDirector_var_paramd_set", _wrap_TestDirector_var_paramd_set},
{"primitive_typesc::TestDirector_var_paramd_get", _wrap_TestDirector_var_paramd_get},
{"primitive_typesc::TestDirector_var_paramc_set", _wrap_TestDirector_var_paramc_set},
{"primitive_typesc::TestDirector_var_paramc_get", _wrap_TestDirector_var_paramc_get},
{"primitive_typesc::TestDirector_var_sizet_set", _wrap_TestDirector_var_sizet_set},
{"primitive_typesc::TestDirector_var_sizet_get", _wrap_TestDirector_var_sizet_get},
{"primitive_typesc::TestDirector_var_namet_set", _wrap_TestDirector_var_namet_set},
{"primitive_typesc::TestDirector_var_namet_get", _wrap_TestDirector_var_namet_get},
{"primitive_typesc::TestDirector_val_bool", _wrap_TestDirector_val_bool},
{"primitive_typesc::TestDirector_val_schar", _wrap_TestDirector_val_schar},
{"primitive_typesc::TestDirector_val_uchar", _wrap_TestDirector_val_uchar},
{"primitive_typesc::TestDirector_val_int", _wrap_TestDirector_val_int},
{"primitive_typesc::TestDirector_val_uint", _wrap_TestDirector_val_uint},
{"primitive_typesc::TestDirector_val_short", _wrap_TestDirector_val_short},
{"primitive_typesc::TestDirector_val_ushort", _wrap_TestDirector_val_ushort},
{"primitive_typesc::TestDirector_val_long", _wrap_TestDirector_val_long},
{"primitive_typesc::TestDirector_val_ulong", _wrap_TestDirector_val_ulong},
{"primitive_typesc::TestDirector_val_llong", _wrap_TestDirector_val_llong},
{"primitive_typesc::TestDirector_val_ullong", _wrap_TestDirector_val_ullong},
{"primitive_typesc::TestDirector_val_char", _wrap_TestDirector_val_char},
{"primitive_typesc::TestDirector_val_pchar", _wrap_TestDirector_val_pchar},
{"primitive_typesc::TestDirector_val_pcharc", _wrap_TestDirector_val_pcharc},
{"primitive_typesc::TestDirector_val_pint", _wrap_TestDirector_val_pint},
{"primitive_typesc::TestDirector_val_hello", _wrap_TestDirector_val_hello},
{"primitive_typesc::TestDirector_val_myint", _wrap_TestDirector_val_myint},
{"primitive_typesc::TestDirector_val_parami", _wrap_TestDirector_val_parami},
{"primitive_typesc::TestDirector_val_paramd", _wrap_TestDirector_val_paramd},
{"primitive_typesc::TestDirector_val_paramc", _wrap_TestDirector_val_paramc},
{"primitive_typesc::TestDirector_val_sizet", _wrap_TestDirector_val_sizet},
{"primitive_typesc::TestDirector_ref_bool", _wrap_TestDirector_ref_bool},
{"primitive_typesc::TestDirector_ref_schar", _wrap_TestDirector_ref_schar},
{"primitive_typesc::TestDirector_ref_uchar", _wrap_TestDirector_ref_uchar},
{"primitive_typesc::TestDirector_ref_int", _wrap_TestDirector_ref_int},
{"primitive_typesc::TestDirector_ref_uint", _wrap_TestDirector_ref_uint},
{"primitive_typesc::TestDirector_ref_short", _wrap_TestDirector_ref_short},
{"primitive_typesc::TestDirector_ref_ushort", _wrap_TestDirector_ref_ushort},
{"primitive_typesc::TestDirector_ref_long", _wrap_TestDirector_ref_long},
{"primitive_typesc::TestDirector_ref_ulong", _wrap_TestDirector_ref_ulong},
{"primitive_typesc::TestDirector_ref_llong", _wrap_TestDirector_ref_llong},
{"primitive_typesc::TestDirector_ref_ullong", _wrap_TestDirector_ref_ullong},
{"primitive_typesc::TestDirector_ref_char", _wrap_TestDirector_ref_char},
{"primitive_typesc::TestDirector_ref_pchar", _wrap_TestDirector_ref_pchar},
{"primitive_typesc::TestDirector_ref_pcharc", _wrap_TestDirector_ref_pcharc},
{"primitive_typesc::TestDirector_ref_pint", _wrap_TestDirector_ref_pint},
{"primitive_typesc::TestDirector_ref_hello", _wrap_TestDirector_ref_hello},
{"primitive_typesc::TestDirector_ref_myint", _wrap_TestDirector_ref_myint},
{"primitive_typesc::TestDirector_ref_parami", _wrap_TestDirector_ref_parami},
{"primitive_typesc::TestDirector_ref_paramd", _wrap_TestDirector_ref_paramd},
{"primitive_typesc::TestDirector_ref_paramc", _wrap_TestDirector_ref_paramc},
{"primitive_typesc::TestDirector_ref_sizet", _wrap_TestDirector_ref_sizet},
{"primitive_typesc::TestDirector_vval_bool", _wrap_TestDirector_vval_bool},
{"primitive_typesc::TestDirector_vval_schar", _wrap_TestDirector_vval_schar},
{"primitive_typesc::TestDirector_vval_uchar", _wrap_TestDirector_vval_uchar},
{"primitive_typesc::TestDirector_vval_int", _wrap_TestDirector_vval_int},
{"primitive_typesc::TestDirector_vval_uint", _wrap_TestDirector_vval_uint},
{"primitive_typesc::TestDirector_vval_short", _wrap_TestDirector_vval_short},
{"primitive_typesc::TestDirector_vval_ushort", _wrap_TestDirector_vval_ushort},
{"primitive_typesc::TestDirector_vval_long", _wrap_TestDirector_vval_long},
{"primitive_typesc::TestDirector_vval_ulong", _wrap_TestDirector_vval_ulong},
{"primitive_typesc::TestDirector_vval_llong", _wrap_TestDirector_vval_llong},
{"primitive_typesc::TestDirector_vval_ullong", _wrap_TestDirector_vval_ullong},
{"primitive_typesc::TestDirector_vval_char", _wrap_TestDirector_vval_char},
{"primitive_typesc::TestDirector_vval_pchar", _wrap_TestDirector_vval_pchar},
{"primitive_typesc::TestDirector_vval_pcharc", _wrap_TestDirector_vval_pcharc},
{"primitive_typesc::TestDirector_vval_pint", _wrap_TestDirector_vval_pint},
{"primitive_typesc::TestDirector_vval_hello", _wrap_TestDirector_vval_hello},
{"primitive_typesc::TestDirector_vval_myint", _wrap_TestDirector_vval_myint},
{"primitive_typesc::TestDirector_vval_parami", _wrap_TestDirector_vval_parami},
{"primitive_typesc::TestDirector_vval_paramd", _wrap_TestDirector_vval_paramd},
{"primitive_typesc::TestDirector_vval_paramc", _wrap_TestDirector_vval_paramc},
{"primitive_typesc::TestDirector_vval_sizet", _wrap_TestDirector_vval_sizet},
{"primitive_typesc::TestDirector_vref_bool", _wrap_TestDirector_vref_bool},
{"primitive_typesc::TestDirector_vref_schar", _wrap_TestDirector_vref_schar},
{"primitive_typesc::TestDirector_vref_uchar", _wrap_TestDirector_vref_uchar},
{"primitive_typesc::TestDirector_vref_int", _wrap_TestDirector_vref_int},
{"primitive_typesc::TestDirector_vref_uint", _wrap_TestDirector_vref_uint},
{"primitive_typesc::TestDirector_vref_short", _wrap_TestDirector_vref_short},
{"primitive_typesc::TestDirector_vref_ushort", _wrap_TestDirector_vref_ushort},
{"primitive_typesc::TestDirector_vref_long", _wrap_TestDirector_vref_long},
{"primitive_typesc::TestDirector_vref_ulong", _wrap_TestDirector_vref_ulong},
{"primitive_typesc::TestDirector_vref_llong", _wrap_TestDirector_vref_llong},
{"primitive_typesc::TestDirector_vref_ullong", _wrap_TestDirector_vref_ullong},
{"primitive_typesc::TestDirector_vref_char", _wrap_TestDirector_vref_char},
{"primitive_typesc::TestDirector_vref_pchar", _wrap_TestDirector_vref_pchar},
{"primitive_typesc::TestDirector_vref_pcharc", _wrap_TestDirector_vref_pcharc},
{"primitive_typesc::TestDirector_vref_pint", _wrap_TestDirector_vref_pint},
{"primitive_typesc::TestDirector_vref_hello", _wrap_TestDirector_vref_hello},
{"primitive_typesc::TestDirector_vref_myint", _wrap_TestDirector_vref_myint},
{"primitive_typesc::TestDirector_vref_parami", _wrap_TestDirector_vref_parami},
{"primitive_typesc::TestDirector_vref_paramd", _wrap_TestDirector_vref_paramd},
{"primitive_typesc::TestDirector_vref_paramc", _wrap_TestDirector_vref_paramc},
{"primitive_typesc::TestDirector_vref_sizet", _wrap_TestDirector_vref_sizet},
{"primitive_typesc::TestDirector_wrp_vref_bool", _wrap_TestDirector_wrp_vref_bool},
{"primitive_typesc::TestDirector_wrp_vref_schar", _wrap_TestDirector_wrp_vref_schar},
{"primitive_typesc::TestDirector_wrp_vref_uchar", _wrap_TestDirector_wrp_vref_uchar},
{"primitive_typesc::TestDirector_wrp_vref_int", _wrap_TestDirector_wrp_vref_int},
{"primitive_typesc::TestDirector_wrp_vref_uint", _wrap_TestDirector_wrp_vref_uint},
{"primitive_typesc::TestDirector_wrp_vref_short", _wrap_TestDirector_wrp_vref_short},
{"primitive_typesc::TestDirector_wrp_vref_ushort", _wrap_TestDirector_wrp_vref_ushort},
{"primitive_typesc::TestDirector_wrp_vref_long", _wrap_TestDirector_wrp_vref_long},
{"primitive_typesc::TestDirector_wrp_vref_ulong", _wrap_TestDirector_wrp_vref_ulong},
{"primitive_typesc::TestDirector_wrp_vref_llong", _wrap_TestDirector_wrp_vref_llong},
{"primitive_typesc::TestDirector_wrp_vref_ullong", _wrap_TestDirector_wrp_vref_ullong},
{"primitive_typesc::TestDirector_wrp_vref_char", _wrap_TestDirector_wrp_vref_char},
{"primitive_typesc::TestDirector_wrp_vref_pchar", _wrap_TestDirector_wrp_vref_pchar},
{"primitive_typesc::TestDirector_wrp_vref_pcharc", _wrap_TestDirector_wrp_vref_pcharc},
{"primitive_typesc::TestDirector_wrp_vref_pint", _wrap_TestDirector_wrp_vref_pint},
{"primitive_typesc::TestDirector_wrp_vref_hello", _wrap_TestDirector_wrp_vref_hello},
{"primitive_typesc::TestDirector_wrp_vref_myint", _wrap_TestDirector_wrp_vref_myint},
{"primitive_typesc::TestDirector_wrp_vref_parami", _wrap_TestDirector_wrp_vref_parami},
{"primitive_typesc::TestDirector_wrp_vref_paramd", _wrap_TestDirector_wrp_vref_paramd},
{"primitive_typesc::TestDirector_wrp_vref_paramc", _wrap_TestDirector_wrp_vref_paramc},
{"primitive_typesc::TestDirector_wrp_vref_sizet", _wrap_TestDirector_wrp_vref_sizet},
{"primitive_typesc::TestDirector_wrp_vval_bool", _wrap_TestDirector_wrp_vval_bool},
{"primitive_typesc::TestDirector_wrp_vval_schar", _wrap_TestDirector_wrp_vval_schar},
{"primitive_typesc::TestDirector_wrp_vval_uchar", _wrap_TestDirector_wrp_vval_uchar},
{"primitive_typesc::TestDirector_wrp_vval_int", _wrap_TestDirector_wrp_vval_int},
{"primitive_typesc::TestDirector_wrp_vval_uint", _wrap_TestDirector_wrp_vval_uint},
{"primitive_typesc::TestDirector_wrp_vval_short", _wrap_TestDirector_wrp_vval_short},
{"primitive_typesc::TestDirector_wrp_vval_ushort", _wrap_TestDirector_wrp_vval_ushort},
{"primitive_typesc::TestDirector_wrp_vval_long", _wrap_TestDirector_wrp_vval_long},
{"primitive_typesc::TestDirector_wrp_vval_ulong", _wrap_TestDirector_wrp_vval_ulong},
{"primitive_typesc::TestDirector_wrp_vval_llong", _wrap_TestDirector_wrp_vval_llong},
{"primitive_typesc::TestDirector_wrp_vval_ullong", _wrap_TestDirector_wrp_vval_ullong},
{"primitive_typesc::TestDirector_wrp_vval_char", _wrap_TestDirector_wrp_vval_char},
{"primitive_typesc::TestDirector_wrp_vval_pchar", _wrap_TestDirector_wrp_vval_pchar},
{"primitive_typesc::TestDirector_wrp_vval_pcharc", _wrap_TestDirector_wrp_vval_pcharc},
{"primitive_typesc::TestDirector_wrp_vval_pint", _wrap_TestDirector_wrp_vval_pint},
{"primitive_typesc::TestDirector_wrp_vval_hello", _wrap_TestDirector_wrp_vval_hello},
{"primitive_typesc::TestDirector_wrp_vval_myint", _wrap_TestDirector_wrp_vval_myint},
{"primitive_typesc::TestDirector_wrp_vval_parami", _wrap_TestDirector_wrp_vval_parami},
{"primitive_typesc::TestDirector_wrp_vval_paramd", _wrap_TestDirector_wrp_vval_paramd},
{"primitive_typesc::TestDirector_wrp_vval_paramc", _wrap_TestDirector_wrp_vval_paramc},
{"primitive_typesc::TestDirector_wrp_vval_sizet", _wrap_TestDirector_wrp_vval_sizet},
{"primitive_typesc::TestDirector_c_check", _wrap_TestDirector_c_check},
{"primitive_typesc::TestDirector_v_check", _wrap_TestDirector_v_check},
{"primitive_typesc::TestDirector_ovr_val", _wrap_TestDirector_ovr_val},
{"primitive_typesc::TestDirector_ovr_ref", _wrap_TestDirector_ovr_ref},
{"primitive_typesc::TestDirector_vtest", _wrap_TestDirector_vtest},
{"primitive_typesc::v_check", _wrap_v_check},
{"primitive_typesc::char_foo", _wrap_char_foo},
{"primitive_typesc::SetPos", _wrap_SetPos},
{"primitive_typesc::val_double_2", _wrap_val_double_2},
{"primitive_typesc::val_double", _wrap_val_double},
{"primitive_typesc::val_float_2", _wrap_val_float_2},
{"primitive_typesc::regression_test_for_bug1699646", _wrap_regression_test_for_bug1699646},
{"primitive_typesc::val_float", _wrap_val_float},
{"primitive_typesc::new_pchar", _wrap_new_pchar},
{"primitive_typesc::delete_pchar", _wrap_delete_pchar},
{"primitive_typesc::pchar_getitem", _wrap_pchar_getitem},
{"primitive_typesc::pchar_setitem", _wrap_pchar_setitem},
{0,0}
};
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
  dXSARGS;
  int i;
  
  SWIG_InitializeModule(0);
  
  /* Install commands */
  for (i = 0; swig_commands[i].name; i++) {
    /* Casts only needed for Perl < 5.10. */
#ifdef __cplusplus
    newXS(const_cast<char*>(swig_commands[i].name), swig_commands[i].wrapper, const_cast<char*>(__FILE__));
#else
    newXS((char*)swig_commands[i].name, swig_commands[i].wrapper, (char*)__FILE__);
#endif
  }
  
  /* Install variables */
  for (i = 0; swig_variables[i].name; i++) {
    SV *sv;
    sv = get_sv(swig_variables[i].name, TRUE | 0x2 | GV_ADDMULTI);
    if (swig_variables[i].type) {
      SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
    } else {
      sv_setiv(sv,(IV) 0);
    }
    swig_create_magic(sv, swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
  }
  
  /* Install constant */
  for (i = 0; swig_constants[i].type; i++) {
    SV *sv;
    sv = get_sv(swig_constants[i].name, TRUE | 0x2 | GV_ADDMULTI);
    switch(swig_constants[i].type) {
    case SWIG_INT:
      sv_setiv(sv, (IV) swig_constants[i].lvalue);
      break;
    case SWIG_FLOAT:
      sv_setnv(sv, (double) swig_constants[i].dvalue);
      break;
    case SWIG_STRING:
      sv_setpv(sv, (const char *) swig_constants[i].pvalue);
      break;
    case SWIG_POINTER:
      SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
      break;
    case SWIG_BINARY:
      SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
      break;
    default:
      break;
    }
    SvREADONLY_on(sv);
  }
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Hi", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(Hi)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Hola", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(Hola)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_bool", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_schar", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_uchar", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_int", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_uint", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_short", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_ushort", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_long", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_ulong", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_llong", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_ullong", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_float", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_double", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_char", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >('H')));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_pint", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_sizet", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_myint", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_parami", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_paramd", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "def_paramc", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >('c')));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_bool", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_schar", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_uchar", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_int", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_uint", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_short", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_ushort", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_long", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_ulong", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_llong", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_ullong", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_char", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >('H')));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_pchar", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_FromCharPtr(def_pchar));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_pcharc", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_FromCharPtr(def_pcharc));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_pint", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_FromCharPtr(0));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_hello", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(Hola)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_myint", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_parami", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_paramd", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_paramc", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >('c')));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "sct_sizet", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_Foo, (void*) "primitive_types::Foo");
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Test_stc_bool", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(Test::stc_bool)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Test_stc_schar", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(Test::stc_schar)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Test_stc_uchar", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(Test::stc_uchar)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Test_stc_int", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(Test::stc_int)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Test_stc_uint", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(Test::stc_uint)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Test_stc_short", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(Test::stc_short)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Test_stc_ushort", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(Test::stc_ushort)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Test_stc_long", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(Test::stc_long)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Test_stc_ulong", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(Test::stc_ulong)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Test_stc_llong", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(Test::stc_llong)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Test_stc_ullong", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(Test::stc_ullong)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Test_stc_char", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(Test::stc_char)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_Test, (void*) "primitive_types::Test");
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TestDirector_stc_bool", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(TestDirector::stc_bool)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TestDirector_stc_schar", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_signed_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< signed char >(TestDirector::stc_schar)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TestDirector_stc_uchar", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(TestDirector::stc_uchar)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TestDirector_stc_int", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TestDirector::stc_int)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TestDirector_stc_uint", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(TestDirector::stc_uint)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TestDirector_stc_short", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(TestDirector::stc_short)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TestDirector_stc_ushort", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(TestDirector::stc_ushort)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TestDirector_stc_long", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long  SWIG_PERL_CALL_ARGS_1(static_cast< long >(TestDirector::stc_long)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TestDirector_stc_ulong", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(TestDirector::stc_ulong)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TestDirector_stc_llong", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< long long >(TestDirector::stc_llong)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TestDirector_stc_ullong", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_long_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long long >(TestDirector::stc_ullong)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TestDirector_stc_char", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(TestDirector::stc_char)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_TestDirector, (void*) "primitive_types::TestDirector");
  ST(0) = &PL_sv_yes;
  XSRETURN(1);
}

