# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package array_member;
use base qw(Exporter);
use base qw(DynaLoader);
package array_memberc;
bootstrap array_member;
package array_member;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package array_member;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package array_member;

*set_value = *array_memberc::set_value;
*get_value = *array_memberc::get_value;

############# Class : array_member::Foo ##############

package array_member::Foo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( array_member );
%OWNER = ();
%ITERATORS = ();
*swig_text_get = *array_memberc::Foo_text_get;
*swig_text_set = *array_memberc::Foo_text_set;
*swig_data_get = *array_memberc::Foo_data_get;
*swig_data_set = *array_memberc::Foo_data_set;
sub new {
    my $pkg = shift;
    my $self = array_memberc::new_Foo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        array_memberc::delete_Foo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : array_member::Material ##############

package array_member::Material;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( array_member );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = array_memberc::new_Material(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        array_memberc::delete_Material($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : array_member::RayPacketData ##############

package array_member::RayPacketData;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( array_member );
%OWNER = ();
%ITERATORS = ();
*Size = *array_memberc::RayPacketData_Size;
*swig_chitMat_get = *array_memberc::RayPacketData_chitMat_get;
*swig_chitMat_set = *array_memberc::RayPacketData_chitMat_set;
*swig_hitMat_val_get = *array_memberc::RayPacketData_hitMat_val_get;
*swig_hitMat_val_set = *array_memberc::RayPacketData_hitMat_val_set;
*swig_hitMat_get = *array_memberc::RayPacketData_hitMat_get;
*swig_hitMat_set = *array_memberc::RayPacketData_hitMat_set;
*swig_chitMat2_get = *array_memberc::RayPacketData_chitMat2_get;
*swig_chitMat2_set = *array_memberc::RayPacketData_chitMat2_set;
*swig_hitMat_val2_get = *array_memberc::RayPacketData_hitMat_val2_get;
*swig_hitMat_val2_set = *array_memberc::RayPacketData_hitMat_val2_set;
*swig_hitMat2_get = *array_memberc::RayPacketData_hitMat2_get;
*swig_hitMat2_set = *array_memberc::RayPacketData_hitMat2_set;
sub new {
    my $pkg = shift;
    my $self = array_memberc::new_RayPacketData(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        array_memberc::delete_RayPacketData($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : array_member::MyBuff ##############

package array_member::MyBuff;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( array_member );
%OWNER = ();
%ITERATORS = ();
*swig_i_get = *array_memberc::MyBuff_i_get;
*swig_i_set = *array_memberc::MyBuff_i_set;
*swig_x_get = *array_memberc::MyBuff_x_get;
*swig_x_set = *array_memberc::MyBuff_x_set;
sub new {
    my $pkg = shift;
    my $self = array_memberc::new_MyBuff(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        array_memberc::delete_MyBuff($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : array_member::MySBuff ##############

package array_member::MySBuff;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( array_member );
%OWNER = ();
%ITERATORS = ();
*swig_i_get = *array_memberc::MySBuff_i_get;
*swig_i_set = *array_memberc::MySBuff_i_set;
*swig_x_get = *array_memberc::MySBuff_x_get;
*swig_x_set = *array_memberc::MySBuff_x_set;
sub new {
    my $pkg = shift;
    my $self = array_memberc::new_MySBuff(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        array_memberc::delete_MySBuff($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package array_member;

*global_data = *array_memberc::global_data;
*BUFF_LEN = *array_memberc::BUFF_LEN;
1;
