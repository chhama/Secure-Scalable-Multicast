# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package reference_global_vars;
use base qw(Exporter);
use base qw(DynaLoader);
package reference_global_varsc;
bootstrap reference_global_vars;
package reference_global_vars;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package reference_global_vars;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package reference_global_vars;

*getconstTC = *reference_global_varsc::getconstTC;
*setref_bool = *reference_global_varsc::setref_bool;
*createref_bool = *reference_global_varsc::createref_bool;
*value_bool = *reference_global_varsc::value_bool;
*setref_char = *reference_global_varsc::setref_char;
*createref_char = *reference_global_varsc::createref_char;
*value_char = *reference_global_varsc::value_char;
*setref_unsigned_char = *reference_global_varsc::setref_unsigned_char;
*createref_unsigned_char = *reference_global_varsc::createref_unsigned_char;
*value_unsigned_char = *reference_global_varsc::value_unsigned_char;
*setref_signed_char = *reference_global_varsc::setref_signed_char;
*createref_signed_char = *reference_global_varsc::createref_signed_char;
*value_signed_char = *reference_global_varsc::value_signed_char;
*setref_short = *reference_global_varsc::setref_short;
*createref_short = *reference_global_varsc::createref_short;
*value_short = *reference_global_varsc::value_short;
*setref_unsigned_short = *reference_global_varsc::setref_unsigned_short;
*createref_unsigned_short = *reference_global_varsc::createref_unsigned_short;
*value_unsigned_short = *reference_global_varsc::value_unsigned_short;
*setref_int = *reference_global_varsc::setref_int;
*createref_int = *reference_global_varsc::createref_int;
*value_int = *reference_global_varsc::value_int;
*setref_unsigned_int = *reference_global_varsc::setref_unsigned_int;
*createref_unsigned_int = *reference_global_varsc::createref_unsigned_int;
*value_unsigned_int = *reference_global_varsc::value_unsigned_int;
*setref_long = *reference_global_varsc::setref_long;
*createref_long = *reference_global_varsc::createref_long;
*value_long = *reference_global_varsc::value_long;
*setref_unsigned_long = *reference_global_varsc::setref_unsigned_long;
*createref_unsigned_long = *reference_global_varsc::createref_unsigned_long;
*value_unsigned_long = *reference_global_varsc::value_unsigned_long;
*setref_float = *reference_global_varsc::setref_float;
*createref_float = *reference_global_varsc::createref_float;
*value_float = *reference_global_varsc::value_float;
*setref_double = *reference_global_varsc::setref_double;
*createref_double = *reference_global_varsc::createref_double;
*value_double = *reference_global_varsc::value_double;
*setref_long_long = *reference_global_varsc::setref_long_long;
*createref_long_long = *reference_global_varsc::createref_long_long;
*value_long_long = *reference_global_varsc::value_long_long;
*setref_unsigned_long_long = *reference_global_varsc::setref_unsigned_long_long;
*createref_unsigned_long_long = *reference_global_varsc::createref_unsigned_long_long;
*value_unsigned_long_long = *reference_global_varsc::value_unsigned_long_long;
*setref_TestClass = *reference_global_varsc::setref_TestClass;
*createref_TestClass = *reference_global_varsc::createref_TestClass;
*value_TestClass = *reference_global_varsc::value_TestClass;

############# Class : reference_global_vars::TestClass ##############

package reference_global_vars::TestClass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( reference_global_vars );
%OWNER = ();
%ITERATORS = ();
*swig_num_get = *reference_global_varsc::TestClass_num_get;
*swig_num_set = *reference_global_varsc::TestClass_num_set;
sub new {
    my $pkg = shift;
    my $self = reference_global_varsc::new_TestClass(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        reference_global_varsc::delete_TestClass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package reference_global_vars;

*var_bool = *reference_global_varsc::var_bool;
*var_char = *reference_global_varsc::var_char;
*var_unsigned_char = *reference_global_varsc::var_unsigned_char;
*var_signed_char = *reference_global_varsc::var_signed_char;
*var_short = *reference_global_varsc::var_short;
*var_unsigned_short = *reference_global_varsc::var_unsigned_short;
*var_int = *reference_global_varsc::var_int;
*var_unsigned_int = *reference_global_varsc::var_unsigned_int;
*var_long = *reference_global_varsc::var_long;
*var_unsigned_long = *reference_global_varsc::var_unsigned_long;
*var_float = *reference_global_varsc::var_float;
*var_double = *reference_global_varsc::var_double;
*var_long_long = *reference_global_varsc::var_long_long;
*var_unsigned_long_long = *reference_global_varsc::var_unsigned_long_long;

my %__var_TestClass_hash;
tie %__var_TestClass_hash,"reference_global_vars::TestClass", $reference_global_varsc::var_TestClass;
$var_TestClass= \%__var_TestClass_hash;
bless $var_TestClass, reference_global_vars::TestClass;
1;
