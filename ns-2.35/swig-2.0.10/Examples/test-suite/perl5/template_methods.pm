# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package template_methods;
use base qw(Exporter);
use base qw(DynaLoader);
package template_methodsc;
bootstrap template_methods;
package template_methods;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package template_methods;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package template_methods;

*convolve1Bool = *template_methodsc::convolve1Bool;
*convolve2Float = *template_methodsc::convolve2Float;
*convolve3FloatRenamed = *template_methodsc::convolve3FloatRenamed;
*convolve4Float = *template_methodsc::convolve4Float;
*convolve4FloatRenamed = *template_methodsc::convolve4FloatRenamed;
*convolve5FloatRenamed = *template_methodsc::convolve5FloatRenamed;

############# Class : template_methods::Klass ##############

package template_methods::Klass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_methods );
%OWNER = ();
%ITERATORS = ();
*KlassTMethodBoolRenamed = *template_methodsc::Klass_KlassTMethodBoolRenamed;
*KlassTMethodBool = *template_methodsc::Klass_KlassTMethodBool;
*KlassStaticTMethodBoolRenamed = *template_methodsc::Klass_KlassStaticTMethodBoolRenamed;
*KlassStaticTMethodBool = *template_methodsc::Klass_KlassStaticTMethodBool;
sub new {
    my $pkg = shift;
    my $self = template_methodsc::new_Klass(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_methodsc::delete_Klass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_methods::ComponentProperties ##############

package template_methods::ComponentProperties;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_methods );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = template_methodsc::new_ComponentProperties(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_methodsc::delete_ComponentProperties($self);
        delete $OWNER{$self};
    }
}

*adda = *template_methodsc::ComponentProperties_adda;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package template_methods;

1;
