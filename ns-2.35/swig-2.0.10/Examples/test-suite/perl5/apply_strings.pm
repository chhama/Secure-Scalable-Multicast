# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package apply_strings;
use base qw(Exporter);
use base qw(DynaLoader);
package apply_stringsc;
bootstrap apply_strings;
package apply_strings;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package apply_strings;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package apply_strings;

*UCharFunction = *apply_stringsc::UCharFunction;
*SCharFunction = *apply_stringsc::SCharFunction;
*CUCharFunction = *apply_stringsc::CUCharFunction;
*CSCharFunction = *apply_stringsc::CSCharFunction;
*CharFunction = *apply_stringsc::CharFunction;
*CCharFunction = *apply_stringsc::CCharFunction;

############# Class : apply_strings::TNumber ##############

package apply_strings::TNumber;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( apply_strings );
%OWNER = ();
%ITERATORS = ();
*swig_DigitsMemberA_get = *apply_stringsc::TNumber_DigitsMemberA_get;
*swig_DigitsMemberA_set = *apply_stringsc::TNumber_DigitsMemberA_set;
*swig_DigitsMemberB_get = *apply_stringsc::TNumber_DigitsMemberB_get;
*swig_DigitsMemberB_set = *apply_stringsc::TNumber_DigitsMemberB_set;
sub new {
    my $pkg = shift;
    my $self = apply_stringsc::new_TNumber(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        apply_stringsc::delete_TNumber($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : apply_strings::DirectorTest ##############

package apply_strings::DirectorTest;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( apply_strings );
%OWNER = ();
%ITERATORS = ();
*UCharFunction = *apply_stringsc::DirectorTest_UCharFunction;
*SCharFunction = *apply_stringsc::DirectorTest_SCharFunction;
*CUCharFunction = *apply_stringsc::DirectorTest_CUCharFunction;
*CSCharFunction = *apply_stringsc::DirectorTest_CSCharFunction;
*CharFunction = *apply_stringsc::DirectorTest_CharFunction;
*CCharFunction = *apply_stringsc::DirectorTest_CCharFunction;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        apply_stringsc::delete_DirectorTest($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = apply_stringsc::new_DirectorTest(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package apply_strings;

*DigitsGlobalA = *apply_stringsc::DigitsGlobalA;
*DigitsGlobalB = *apply_stringsc::DigitsGlobalB;
*DigitsGlobalC = *apply_stringsc::DigitsGlobalC;
1;
