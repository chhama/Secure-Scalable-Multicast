# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package nested_structs;
use base qw(Exporter);
use base qw(DynaLoader);
package nested_structsc;
bootstrap nested_structs;
package nested_structs;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package nested_structs;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package nested_structs;

*setValues = *nested_structsc::setValues;

############# Class : nested_structs::Outer ##############

package nested_structs::Outer;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( nested_structs );
%OWNER = ();
%ITERATORS = ();
*swig_inner1_get = *nested_structsc::Outer_inner1_get;
*swig_inner1_set = *nested_structsc::Outer_inner1_set;
*swig_inner2_get = *nested_structsc::Outer_inner2_get;
*swig_inner2_set = *nested_structsc::Outer_inner2_set;
*swig_inner3_get = *nested_structsc::Outer_inner3_get;
*swig_inner3_set = *nested_structsc::Outer_inner3_set;
*swig_inner4_get = *nested_structsc::Outer_inner4_get;
*swig_inner4_set = *nested_structsc::Outer_inner4_set;
*swig_inside1_get = *nested_structsc::Outer_inside1_get;
*swig_inside1_set = *nested_structsc::Outer_inside1_set;
*swig_inside2_get = *nested_structsc::Outer_inside2_get;
*swig_inside2_set = *nested_structsc::Outer_inside2_set;
*swig_inside3_get = *nested_structsc::Outer_inside3_get;
*swig_inside3_set = *nested_structsc::Outer_inside3_set;
*swig_inside4_get = *nested_structsc::Outer_inside4_get;
*swig_inside4_set = *nested_structsc::Outer_inside4_set;
sub new {
    my $pkg = shift;
    my $self = nested_structsc::new_Outer(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        nested_structsc::delete_Outer($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : nested_structs::Outer_inside4 ##############

package nested_structs::Outer_inside4;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( nested_structs );
%OWNER = ();
%ITERATORS = ();
*swig_val_get = *nested_structsc::Outer_inside4_val_get;
*swig_val_set = *nested_structsc::Outer_inside4_val_set;
sub new {
    my $pkg = shift;
    my $self = nested_structsc::new_Outer_inside4(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        nested_structsc::delete_Outer_inside4($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : nested_structs::Outer_inside3 ##############

package nested_structs::Outer_inside3;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( nested_structs );
%OWNER = ();
%ITERATORS = ();
*swig_val_get = *nested_structsc::Outer_inside3_val_get;
*swig_val_set = *nested_structsc::Outer_inside3_val_set;
sub new {
    my $pkg = shift;
    my $self = nested_structsc::new_Outer_inside3(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        nested_structsc::delete_Outer_inside3($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : nested_structs::Outer_inside2 ##############

package nested_structs::Outer_inside2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( nested_structs );
%OWNER = ();
%ITERATORS = ();
*swig_val_get = *nested_structsc::Outer_inside2_val_get;
*swig_val_set = *nested_structsc::Outer_inside2_val_set;
sub new {
    my $pkg = shift;
    my $self = nested_structsc::new_Outer_inside2(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        nested_structsc::delete_Outer_inside2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : nested_structs::Outer_inside1 ##############

package nested_structs::Outer_inside1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( nested_structs );
%OWNER = ();
%ITERATORS = ();
*swig_val_get = *nested_structsc::Outer_inside1_val_get;
*swig_val_set = *nested_structsc::Outer_inside1_val_set;
sub new {
    my $pkg = shift;
    my $self = nested_structsc::new_Outer_inside1(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        nested_structsc::delete_Outer_inside1($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : nested_structs::Outer_inner4 ##############

package nested_structs::Outer_inner4;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( nested_structs );
%OWNER = ();
%ITERATORS = ();
*swig_val_get = *nested_structsc::Outer_inner4_val_get;
*swig_val_set = *nested_structsc::Outer_inner4_val_set;
sub new {
    my $pkg = shift;
    my $self = nested_structsc::new_Outer_inner4(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        nested_structsc::delete_Outer_inner4($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : nested_structs::Outer_inner3 ##############

package nested_structs::Outer_inner3;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( nested_structs );
%OWNER = ();
%ITERATORS = ();
*swig_val_get = *nested_structsc::Outer_inner3_val_get;
*swig_val_set = *nested_structsc::Outer_inner3_val_set;
sub new {
    my $pkg = shift;
    my $self = nested_structsc::new_Outer_inner3(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        nested_structsc::delete_Outer_inner3($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : nested_structs::Outer_inner2 ##############

package nested_structs::Outer_inner2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( nested_structs );
%OWNER = ();
%ITERATORS = ();
*swig_val_get = *nested_structsc::Outer_inner2_val_get;
*swig_val_set = *nested_structsc::Outer_inner2_val_set;
sub new {
    my $pkg = shift;
    my $self = nested_structsc::new_Outer_inner2(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        nested_structsc::delete_Outer_inner2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : nested_structs::Outer_inner1 ##############

package nested_structs::Outer_inner1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( nested_structs );
%OWNER = ();
%ITERATORS = ();
*swig_val_get = *nested_structsc::Outer_inner1_val_get;
*swig_val_set = *nested_structsc::Outer_inner1_val_set;
sub new {
    my $pkg = shift;
    my $self = nested_structsc::new_Outer_inner1(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        nested_structsc::delete_Outer_inner1($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package nested_structs;


my %__outer_hash;
tie %__outer_hash,"nested_structs::Outer", $nested_structsc::outer;
$outer= \%__outer_hash;
bless $outer, nested_structs::Outer;
1;
