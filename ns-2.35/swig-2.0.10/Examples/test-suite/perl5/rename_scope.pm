# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package rename_scope;
use base qw(Exporter);
use base qw(DynaLoader);
package rename_scopec;
bootstrap rename_scope;
package rename_scope;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package rename_scope;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package rename_scope;

*equals = *rename_scopec::equals;

############# Class : rename_scope::Interface_UP ##############

package rename_scope::Interface_UP;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename_scope );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rename_scopec::new_Interface_UP(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename_scopec::delete_Interface_UP($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename_scope::Interface_BP ##############

package rename_scope::Interface_BP;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename_scope );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rename_scopec::new_Interface_BP(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename_scopec::delete_Interface_BP($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename_scope::Natural_UP ##############

package rename_scope::Natural_UP;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename_scope::Interface_UP rename_scope );
%OWNER = ();
%ITERATORS = ();
*rtest = *rename_scopec::Natural_UP_rtest;
sub new {
    my $pkg = shift;
    my $self = rename_scopec::new_Natural_UP(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename_scopec::delete_Natural_UP($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename_scope::Natural_BP ##############

package rename_scope::Natural_BP;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename_scope::Interface_BP rename_scope );
%OWNER = ();
%ITERATORS = ();
*rtest = *rename_scopec::Natural_BP_rtest;
sub new {
    my $pkg = shift;
    my $self = rename_scopec::new_Natural_BP(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename_scopec::delete_Natural_BP($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename_scope::Bucket ##############

package rename_scope::Bucket;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename_scope );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rename_scopec::new_Bucket(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename_scopec::delete_Bucket($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package rename_scope;

*UnaryPolarization = *rename_scopec::UnaryPolarization;
*BinaryPolarization = *rename_scopec::BinaryPolarization;
1;
