# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package using_directive_and_declaration_forward;
use base qw(Exporter);
use base qw(DynaLoader);
package using_directive_and_declaration_forwardc;
bootstrap using_directive_and_declaration_forward;
package using_directive_and_declaration_forward;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package using_directive_and_declaration_forward;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package using_directive_and_declaration_forward;

*useit1 = *using_directive_and_declaration_forwardc::useit1;
*useit1a = *using_directive_and_declaration_forwardc::useit1a;
*useit1b = *using_directive_and_declaration_forwardc::useit1b;
*useit1c = *using_directive_and_declaration_forwardc::useit1c;
*useit2 = *using_directive_and_declaration_forwardc::useit2;
*useit2a = *using_directive_and_declaration_forwardc::useit2a;
*useit2b = *using_directive_and_declaration_forwardc::useit2b;
*useit2c = *using_directive_and_declaration_forwardc::useit2c;
*useit2d = *using_directive_and_declaration_forwardc::useit2d;
*useit3 = *using_directive_and_declaration_forwardc::useit3;
*useit3a = *using_directive_and_declaration_forwardc::useit3a;
*useit3b = *using_directive_and_declaration_forwardc::useit3b;
*useit3c = *using_directive_and_declaration_forwardc::useit3c;
*useit3d = *using_directive_and_declaration_forwardc::useit3d;
*useit4 = *using_directive_and_declaration_forwardc::useit4;
*useit4a = *using_directive_and_declaration_forwardc::useit4a;
*useit4b = *using_directive_and_declaration_forwardc::useit4b;
*useit4c = *using_directive_and_declaration_forwardc::useit4c;
*useit4d = *using_directive_and_declaration_forwardc::useit4d;
*useit5 = *using_directive_and_declaration_forwardc::useit5;
*useit5a = *using_directive_and_declaration_forwardc::useit5a;
*useit5b = *using_directive_and_declaration_forwardc::useit5b;
*useit5c = *using_directive_and_declaration_forwardc::useit5c;
*useit5d = *using_directive_and_declaration_forwardc::useit5d;
*useit7 = *using_directive_and_declaration_forwardc::useit7;
*useit7a = *using_directive_and_declaration_forwardc::useit7a;
*useit7b = *using_directive_and_declaration_forwardc::useit7b;
*useit7c = *using_directive_and_declaration_forwardc::useit7c;
*useit7d = *using_directive_and_declaration_forwardc::useit7d;

############# Class : using_directive_and_declaration_forward::Thing1 ##############

package using_directive_and_declaration_forward::Thing1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( using_directive_and_declaration_forward );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = using_directive_and_declaration_forwardc::new_Thing1(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        using_directive_and_declaration_forwardc::delete_Thing1($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : using_directive_and_declaration_forward::Thing2 ##############

package using_directive_and_declaration_forward::Thing2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( using_directive_and_declaration_forward );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = using_directive_and_declaration_forwardc::new_Thing2(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        using_directive_and_declaration_forwardc::delete_Thing2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : using_directive_and_declaration_forward::Thing3 ##############

package using_directive_and_declaration_forward::Thing3;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( using_directive_and_declaration_forward );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = using_directive_and_declaration_forwardc::new_Thing3(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        using_directive_and_declaration_forwardc::delete_Thing3($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : using_directive_and_declaration_forward::Thing4 ##############

package using_directive_and_declaration_forward::Thing4;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( using_directive_and_declaration_forward );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = using_directive_and_declaration_forwardc::new_Thing4(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        using_directive_and_declaration_forwardc::delete_Thing4($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : using_directive_and_declaration_forward::Thing5 ##############

package using_directive_and_declaration_forward::Thing5;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( using_directive_and_declaration_forward );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = using_directive_and_declaration_forwardc::new_Thing5(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        using_directive_and_declaration_forwardc::delete_Thing5($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : using_directive_and_declaration_forward::Thing7 ##############

package using_directive_and_declaration_forward::Thing7;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( using_directive_and_declaration_forward );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = using_directive_and_declaration_forwardc::new_Thing7(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        using_directive_and_declaration_forwardc::delete_Thing7($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package using_directive_and_declaration_forward;

1;
