# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package li_windows;
use base qw(Exporter);
use base qw(DynaLoader);
package li_windowsc;
bootstrap li_windows;
package li_windows;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package li_windows;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package li_windows;

*int8_val = *li_windowsc::int8_val;
*int16_val = *li_windowsc::int16_val;
*int32_val = *li_windowsc::int32_val;
*int64_val = *li_windowsc::int64_val;
*uint8_val = *li_windowsc::uint8_val;
*uint16_val = *li_windowsc::uint16_val;
*uint32_val = *li_windowsc::uint32_val;
*uint64_val = *li_windowsc::uint64_val;
*int8_ref = *li_windowsc::int8_ref;
*int16_ref = *li_windowsc::int16_ref;
*int32_ref = *li_windowsc::int32_ref;
*int64_ref = *li_windowsc::int64_ref;
*uint8_ref = *li_windowsc::uint8_ref;
*uint16_ref = *li_windowsc::uint16_ref;
*uint32_ref = *li_windowsc::uint32_ref;
*uint64_ref = *li_windowsc::uint64_ref;
*int8_td = *li_windowsc::int8_td;
*int16_td = *li_windowsc::int16_td;
*int32_td = *li_windowsc::int32_td;
*int64_td = *li_windowsc::int64_td;
*uint8_td = *li_windowsc::uint8_td;
*uint16_td = *li_windowsc::uint16_td;
*uint32_td = *li_windowsc::uint32_td;
*uint64_td = *li_windowsc::uint64_td;
*declspecstdcall = *li_windowsc::declspecstdcall;
*mefod = *li_windowsc::mefod;
*funktion = *li_windowsc::funktion;

############# Class : li_windows::WindowsInts ##############

package li_windows::WindowsInts;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_windows );
%OWNER = ();
%ITERATORS = ();
*swig_int8_member_get = *li_windowsc::WindowsInts_int8_member_get;
*swig_int8_member_set = *li_windowsc::WindowsInts_int8_member_set;
*swig_int16_member_get = *li_windowsc::WindowsInts_int16_member_get;
*swig_int16_member_set = *li_windowsc::WindowsInts_int16_member_set;
*swig_int32_member_get = *li_windowsc::WindowsInts_int32_member_get;
*swig_int32_member_set = *li_windowsc::WindowsInts_int32_member_set;
*swig_int64_member_get = *li_windowsc::WindowsInts_int64_member_get;
*swig_int64_member_set = *li_windowsc::WindowsInts_int64_member_set;
*swig_uint8_member_get = *li_windowsc::WindowsInts_uint8_member_get;
*swig_uint8_member_set = *li_windowsc::WindowsInts_uint8_member_set;
*swig_uint16_member_get = *li_windowsc::WindowsInts_uint16_member_get;
*swig_uint16_member_set = *li_windowsc::WindowsInts_uint16_member_set;
*swig_uint32_member_get = *li_windowsc::WindowsInts_uint32_member_get;
*swig_uint32_member_set = *li_windowsc::WindowsInts_uint32_member_set;
*swig_uint64_member_get = *li_windowsc::WindowsInts_uint64_member_get;
*swig_uint64_member_set = *li_windowsc::WindowsInts_uint64_member_set;
sub new {
    my $pkg = shift;
    my $self = li_windowsc::new_WindowsInts(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_windowsc::delete_WindowsInts($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package li_windows;

*int8_global = *li_windowsc::int8_global;
*int16_global = *li_windowsc::int16_global;
*int32_global = *li_windowsc::int32_global;
*int64_global = *li_windowsc::int64_global;
*uint8_global = *li_windowsc::uint8_global;
*uint16_global = *li_windowsc::uint16_global;
*uint32_global = *li_windowsc::uint32_global;
*uint64_global = *li_windowsc::uint64_global;
1;
