# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package ignore_parameter;
use base qw(Exporter);
use base qw(DynaLoader);
package ignore_parameterc;
bootstrap ignore_parameter;
package ignore_parameter;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package ignore_parameter;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package ignore_parameter;

*jaguar = *ignore_parameterc::jaguar;
*lotus = *ignore_parameterc::lotus;
*tvr = *ignore_parameterc::tvr;
*ferrari = *ignore_parameterc::ferrari;

############# Class : ignore_parameter::SportsCars ##############

package ignore_parameter::SportsCars;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( ignore_parameter );
%OWNER = ();
%ITERATORS = ();
*daimler = *ignore_parameterc::SportsCars_daimler;
*astonmartin = *ignore_parameterc::SportsCars_astonmartin;
*bugatti = *ignore_parameterc::SportsCars_bugatti;
*lamborghini = *ignore_parameterc::SportsCars_lamborghini;
sub new {
    my $pkg = shift;
    my $self = ignore_parameterc::new_SportsCars(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        ignore_parameterc::delete_SportsCars($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : ignore_parameter::MiniCooper ##############

package ignore_parameter::MiniCooper;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( ignore_parameter );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = ignore_parameterc::new_MiniCooper(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        ignore_parameterc::delete_MiniCooper($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : ignore_parameter::MorrisMinor ##############

package ignore_parameter::MorrisMinor;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( ignore_parameter );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = ignore_parameterc::new_MorrisMinor(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        ignore_parameterc::delete_MorrisMinor($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : ignore_parameter::FordAnglia ##############

package ignore_parameter::FordAnglia;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( ignore_parameter );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = ignore_parameterc::new_FordAnglia(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        ignore_parameterc::delete_FordAnglia($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : ignore_parameter::AustinAllegro ##############

package ignore_parameter::AustinAllegro;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( ignore_parameter );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = ignore_parameterc::new_AustinAllegro(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        ignore_parameterc::delete_AustinAllegro($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package ignore_parameter;

1;
