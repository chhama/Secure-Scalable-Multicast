# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package exception_order;
use base qw(Exporter);
use base qw(DynaLoader);
package exception_orderc;
bootstrap exception_order;
package exception_order;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package exception_order;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package exception_order;


############# Class : exception_order::E1 ##############

package exception_order::E1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( exception_order );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = exception_orderc::new_E1(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        exception_orderc::delete_E1($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : exception_order::E2 ##############

package exception_order::E2;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( exception_order );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = exception_orderc::new_E2(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        exception_orderc::delete_E2($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : exception_order::E3 ##############

package exception_order::E3;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( exception_order );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = exception_orderc::new_E3(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        exception_orderc::delete_E3($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : exception_order::A ##############

package exception_order::A;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( exception_order );
%OWNER = ();
%ITERATORS = ();
*sfoovar = *exception_orderc::A_sfoovar;
*CSFOOVAR = *exception_orderc::A_CSFOOVAR;
*CSFOOVAR = *exception_orderc::A_CSFOOVAR;
*swig_foovar_get = *exception_orderc::A_foovar_get;
*swig_foovar_set = *exception_orderc::A_foovar_set;
*swig_efoovar_get = *exception_orderc::A_efoovar_get;
*swig_efoovar_set = *exception_orderc::A_efoovar_set;
*foo = *exception_orderc::A_foo;
*bar = *exception_orderc::A_bar;
*foobar = *exception_orderc::A_foobar;
*barfoo = *exception_orderc::A_barfoo;
sub new {
    my $pkg = shift;
    my $self = exception_orderc::new_A(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        exception_orderc::delete_A($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : exception_order::ET_i ##############

package exception_order::ET_i;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( exception_order );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = exception_orderc::new_ET_i(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        exception_orderc::delete_ET_i($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : exception_order::ET_d ##############

package exception_order::ET_d;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( exception_order );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = exception_orderc::new_ET_d(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        exception_orderc::delete_ET_d($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package exception_order;

*efoovar = *exception_orderc::efoovar;
*foovar = *exception_orderc::foovar;
*cfoovar = *exception_orderc::cfoovar;
*A_sfoovar = *exception_orderc::A_sfoovar;
1;
