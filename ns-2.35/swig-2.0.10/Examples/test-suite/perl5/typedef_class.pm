# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package typedef_class;
use base qw(Exporter);
use base qw(DynaLoader);
package typedef_classc;
bootstrap typedef_class;
package typedef_class;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package typedef_class;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package typedef_class;


############# Class : typedef_class::RealA ##############

package typedef_class::RealA;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typedef_class );
%OWNER = ();
%ITERATORS = ();
*swig_a_get = *typedef_classc::RealA_a_get;
*swig_a_set = *typedef_classc::RealA_a_set;
sub new {
    my $pkg = shift;
    my $self = typedef_classc::new_RealA(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typedef_classc::delete_RealA($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typedef_class::B ##############

package typedef_class::B;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typedef_class );
%OWNER = ();
%ITERATORS = ();
*testA = *typedef_classc::B_testA;
sub new {
    my $pkg = shift;
    my $self = typedef_classc::new_B(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typedef_classc::delete_B($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typedef_class::BBB ##############

package typedef_class::BBB;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typedef_class );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = typedef_classc::new_BBB(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typedef_classc::delete_BBB($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : typedef_class::BB ##############

package typedef_class::BB;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( typedef_class );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = typedef_classc::new_BB(@_);
    bless $self, $pkg if defined($self);
}

*swig_aa_var_get = *typedef_classc::BB_aa_var_get;
*swig_aa_var_set = *typedef_classc::BB_aa_var_set;
*aa_method = *typedef_classc::BB_aa_method;
*aa_static_method = *typedef_classc::BB_aa_static_method;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        typedef_classc::delete_BB($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package typedef_class;

1;
