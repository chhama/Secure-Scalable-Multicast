# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package arrays_global_twodim;
use base qw(Exporter);
use base qw(DynaLoader);
package arrays_global_twodimc;
bootstrap arrays_global_twodim;
package arrays_global_twodim;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package arrays_global_twodim;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package arrays_global_twodim;

*fn_taking_arrays = *arrays_global_twodimc::fn_taking_arrays;
*get_2d_array = *arrays_global_twodimc::get_2d_array;

############# Class : arrays_global_twodim::SimpleStruct ##############

package arrays_global_twodim::SimpleStruct;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( arrays_global_twodim );
%OWNER = ();
%ITERATORS = ();
*swig_double_field_get = *arrays_global_twodimc::SimpleStruct_double_field_get;
*swig_double_field_set = *arrays_global_twodimc::SimpleStruct_double_field_set;
sub new {
    my $pkg = shift;
    my $self = arrays_global_twodimc::new_SimpleStruct(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        arrays_global_twodimc::delete_SimpleStruct($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : arrays_global_twodim::Material ##############

package arrays_global_twodim::Material;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( arrays_global_twodim );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = arrays_global_twodimc::new_Material(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        arrays_global_twodimc::delete_Material($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package arrays_global_twodim;

*ARRAY_LEN_X = *arrays_global_twodimc::ARRAY_LEN_X;
*ARRAY_LEN_Y = *arrays_global_twodimc::ARRAY_LEN_Y;
*One = *arrays_global_twodimc::One;
*Two = *arrays_global_twodimc::Two;
*Three = *arrays_global_twodimc::Three;
*Four = *arrays_global_twodimc::Four;
*Five = *arrays_global_twodimc::Five;
*array_c = *arrays_global_twodimc::array_c;
*array_sc = *arrays_global_twodimc::array_sc;
*array_uc = *arrays_global_twodimc::array_uc;
*array_s = *arrays_global_twodimc::array_s;
*array_us = *arrays_global_twodimc::array_us;
*array_i = *arrays_global_twodimc::array_i;
*array_ui = *arrays_global_twodimc::array_ui;
*array_l = *arrays_global_twodimc::array_l;
*array_ul = *arrays_global_twodimc::array_ul;
*array_ll = *arrays_global_twodimc::array_ll;
*array_f = *arrays_global_twodimc::array_f;
*array_d = *arrays_global_twodimc::array_d;
*array_struct = *arrays_global_twodimc::array_struct;
*array_structpointers = *arrays_global_twodimc::array_structpointers;
*array_ipointers = *arrays_global_twodimc::array_ipointers;
*array_enum = *arrays_global_twodimc::array_enum;
*array_enumpointers = *arrays_global_twodimc::array_enumpointers;
*array_const_i = *arrays_global_twodimc::array_const_i;
*Size = *arrays_global_twodimc::Size;
*chitMat = *arrays_global_twodimc::chitMat;
*hitMat_val = *arrays_global_twodimc::hitMat_val;
*hitMat = *arrays_global_twodimc::hitMat;
1;
