# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package li_typemaps_apply;
use base qw(Exporter);
use base qw(DynaLoader);
package li_typemaps_applyc;
bootstrap li_typemaps_apply;
package li_typemaps_apply;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package li_typemaps_apply;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package li_typemaps_apply;

*input_ptr_bool = *li_typemaps_applyc::input_ptr_bool;
*input_ref_bool = *li_typemaps_applyc::input_ref_bool;
*output_ptr_bool = *li_typemaps_applyc::output_ptr_bool;
*output_ref_bool = *li_typemaps_applyc::output_ref_bool;
*inout_ptr_bool = *li_typemaps_applyc::inout_ptr_bool;
*inout_ref_bool = *li_typemaps_applyc::inout_ref_bool;
*input_ptr_int = *li_typemaps_applyc::input_ptr_int;
*input_ref_int = *li_typemaps_applyc::input_ref_int;
*output_ptr_int = *li_typemaps_applyc::output_ptr_int;
*output_ref_int = *li_typemaps_applyc::output_ref_int;
*inout_ptr_int = *li_typemaps_applyc::inout_ptr_int;
*inout_ref_int = *li_typemaps_applyc::inout_ref_int;
*input_ptr_short = *li_typemaps_applyc::input_ptr_short;
*input_ref_short = *li_typemaps_applyc::input_ref_short;
*output_ptr_short = *li_typemaps_applyc::output_ptr_short;
*output_ref_short = *li_typemaps_applyc::output_ref_short;
*inout_ptr_short = *li_typemaps_applyc::inout_ptr_short;
*inout_ref_short = *li_typemaps_applyc::inout_ref_short;
*input_ptr_long = *li_typemaps_applyc::input_ptr_long;
*input_ref_long = *li_typemaps_applyc::input_ref_long;
*output_ptr_long = *li_typemaps_applyc::output_ptr_long;
*output_ref_long = *li_typemaps_applyc::output_ref_long;
*inout_ptr_long = *li_typemaps_applyc::inout_ptr_long;
*inout_ref_long = *li_typemaps_applyc::inout_ref_long;
*input_ptr_uint = *li_typemaps_applyc::input_ptr_uint;
*input_ref_uint = *li_typemaps_applyc::input_ref_uint;
*output_ptr_uint = *li_typemaps_applyc::output_ptr_uint;
*output_ref_uint = *li_typemaps_applyc::output_ref_uint;
*inout_ptr_uint = *li_typemaps_applyc::inout_ptr_uint;
*inout_ref_uint = *li_typemaps_applyc::inout_ref_uint;
*input_ptr_ushort = *li_typemaps_applyc::input_ptr_ushort;
*input_ref_ushort = *li_typemaps_applyc::input_ref_ushort;
*output_ptr_ushort = *li_typemaps_applyc::output_ptr_ushort;
*output_ref_ushort = *li_typemaps_applyc::output_ref_ushort;
*inout_ptr_ushort = *li_typemaps_applyc::inout_ptr_ushort;
*inout_ref_ushort = *li_typemaps_applyc::inout_ref_ushort;
*input_ptr_ulong = *li_typemaps_applyc::input_ptr_ulong;
*input_ref_ulong = *li_typemaps_applyc::input_ref_ulong;
*output_ptr_ulong = *li_typemaps_applyc::output_ptr_ulong;
*output_ref_ulong = *li_typemaps_applyc::output_ref_ulong;
*inout_ptr_ulong = *li_typemaps_applyc::inout_ptr_ulong;
*inout_ref_ulong = *li_typemaps_applyc::inout_ref_ulong;
*input_ptr_uchar = *li_typemaps_applyc::input_ptr_uchar;
*input_ref_uchar = *li_typemaps_applyc::input_ref_uchar;
*output_ptr_uchar = *li_typemaps_applyc::output_ptr_uchar;
*output_ref_uchar = *li_typemaps_applyc::output_ref_uchar;
*inout_ptr_uchar = *li_typemaps_applyc::inout_ptr_uchar;
*inout_ref_uchar = *li_typemaps_applyc::inout_ref_uchar;
*input_ptr_schar = *li_typemaps_applyc::input_ptr_schar;
*input_ref_schar = *li_typemaps_applyc::input_ref_schar;
*output_ptr_schar = *li_typemaps_applyc::output_ptr_schar;
*output_ref_schar = *li_typemaps_applyc::output_ref_schar;
*inout_ptr_schar = *li_typemaps_applyc::inout_ptr_schar;
*inout_ref_schar = *li_typemaps_applyc::inout_ref_schar;
*input_ptr_float = *li_typemaps_applyc::input_ptr_float;
*input_ref_float = *li_typemaps_applyc::input_ref_float;
*output_ptr_float = *li_typemaps_applyc::output_ptr_float;
*output_ref_float = *li_typemaps_applyc::output_ref_float;
*inout_ptr_float = *li_typemaps_applyc::inout_ptr_float;
*inout_ref_float = *li_typemaps_applyc::inout_ref_float;
*input_ptr_double = *li_typemaps_applyc::input_ptr_double;
*input_ref_double = *li_typemaps_applyc::input_ref_double;
*output_ptr_double = *li_typemaps_applyc::output_ptr_double;
*output_ref_double = *li_typemaps_applyc::output_ref_double;
*inout_ptr_double = *li_typemaps_applyc::inout_ptr_double;
*inout_ref_double = *li_typemaps_applyc::inout_ref_double;
*input_ptr_longlong = *li_typemaps_applyc::input_ptr_longlong;
*input_ref_longlong = *li_typemaps_applyc::input_ref_longlong;
*output_ptr_longlong = *li_typemaps_applyc::output_ptr_longlong;
*output_ref_longlong = *li_typemaps_applyc::output_ref_longlong;
*inout_ptr_longlong = *li_typemaps_applyc::inout_ptr_longlong;
*inout_ref_longlong = *li_typemaps_applyc::inout_ref_longlong;
*input_ptr_ulonglong = *li_typemaps_applyc::input_ptr_ulonglong;
*input_ref_ulonglong = *li_typemaps_applyc::input_ref_ulonglong;
*output_ptr_ulonglong = *li_typemaps_applyc::output_ptr_ulonglong;
*output_ref_ulonglong = *li_typemaps_applyc::output_ref_ulonglong;
*inout_ptr_ulonglong = *li_typemaps_applyc::inout_ptr_ulonglong;
*inout_ref_ulonglong = *li_typemaps_applyc::inout_ref_ulonglong;

# ------- VARIABLE STUBS --------

package li_typemaps_apply;

1;
