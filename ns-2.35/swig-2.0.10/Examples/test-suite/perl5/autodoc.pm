# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package autodoc;
use base qw(Exporter);
use base qw(DynaLoader);
package autodocc;
bootstrap autodoc;
package autodoc;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package autodoc;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package autodoc;

*funk = *autodocc::funk;
*funkdefaults = *autodocc::funkdefaults;
*func_input = *autodocc::func_input;
*func_output = *autodocc::func_output;
*func_inout = *autodocc::func_inout;
*func_cb = *autodocc::func_cb;
*banana = *autodocc::banana;

############# Class : autodoc::A ##############

package autodoc::A;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( autodoc );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = autodocc::new_A(@_);
    bless $self, $pkg if defined($self);
}

*funk = *autodocc::A_funk;
*func0 = *autodocc::A_func0;
*func1 = *autodocc::A_func1;
*func2 = *autodocc::A_func2;
*func3 = *autodocc::A_func3;
*func0default = *autodocc::A_func0default;
*func1default = *autodocc::A_func1default;
*func2default = *autodocc::A_func2default;
*func3default = *autodocc::A_func3default;
*func0static = *autodocc::A_func0static;
*func1static = *autodocc::A_func1static;
*func2static = *autodocc::A_func2static;
*func3static = *autodocc::A_func3static;
*swig_variable_a_get = *autodocc::A_variable_a_get;
*swig_variable_a_set = *autodocc::A_variable_a_set;
*swig_variable_b_get = *autodocc::A_variable_b_get;
*swig_variable_b_set = *autodocc::A_variable_b_set;
*swig_variable_c_get = *autodocc::A_variable_c_get;
*swig_variable_c_set = *autodocc::A_variable_c_set;
*swig_variable_d_get = *autodocc::A_variable_d_get;
*swig_variable_d_set = *autodocc::A_variable_d_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        autodocc::delete_A($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : autodoc::B ##############

package autodoc::B;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( autodoc );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = autodocc::new_B(@_);
    bless $self, $pkg if defined($self);
}

*funk = *autodocc::B_funk;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        autodocc::delete_B($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : autodoc::C ##############

package autodoc::C;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( autodoc );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = autodocc::new_C(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        autodocc::delete_C($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : autodoc::D ##############

package autodoc::D;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( autodoc );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = autodocc::new_D(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        autodocc::delete_D($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : autodoc::E ##############

package autodoc::E;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( autodoc );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = autodocc::new_E(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        autodocc::delete_E($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : autodoc::F ##############

package autodoc::F;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( autodoc );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = autodocc::new_F(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        autodocc::delete_F($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : autodoc::S ##############

package autodoc::S;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( autodoc );
%OWNER = ();
%ITERATORS = ();
*swig_a_get = *autodocc::S_a_get;
*swig_a_set = *autodocc::S_a_set;
*swig_b_get = *autodocc::S_b_get;
*swig_b_set = *autodocc::S_b_set;
sub new {
    my $pkg = shift;
    my $self = autodocc::new_S(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        autodocc::delete_S($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package autodoc;

*hi = *autodocc::hi;
*hello = *autodocc::hello;
*FUNC_CB_CALLBACK = *autodocc::FUNC_CB_CALLBACK;
1;
