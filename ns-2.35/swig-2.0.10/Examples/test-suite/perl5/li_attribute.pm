# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package li_attribute;
use base qw(Exporter);
use base qw(DynaLoader);
package li_attributec;
bootstrap li_attribute;
package li_attribute;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package li_attribute;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package li_attribute;


############# Class : li_attribute::A ##############

package li_attribute::A;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_attribute );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = li_attributec::new_A(@_);
    bless $self, $pkg if defined($self);
}

*swig_a_get = *li_attributec::A_a_get;
*swig_a_set = *li_attributec::A_a_set;
*swig_b_get = *li_attributec::A_b_get;
*swig_b_set = *li_attributec::A_b_set;
*swig_c_get = *li_attributec::A_c_get;
*swig_c_set = *li_attributec::A_c_set;
*swig_d_get = *li_attributec::A_d_get;
*swig_d_set = *li_attributec::A_d_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_attributec::delete_A($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_attribute::B ##############

package li_attribute::B;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_attribute );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = li_attributec::new_B(@_);
    bless $self, $pkg if defined($self);
}

*swig_a_get = *li_attributec::B_a_get;
*swig_a_set = *li_attributec::B_a_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_attributec::delete_B($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_attribute::Param_i ##############

package li_attribute::Param_i;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_attribute );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = li_attributec::new_Param_i(@_);
    bless $self, $pkg if defined($self);
}

*swig_value_get = *li_attributec::Param_i_value_get;
*swig_value_set = *li_attributec::Param_i_value_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_attributec::delete_Param_i($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_attribute::MyFoo ##############

package li_attribute::MyFoo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_attribute );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = li_attributec::new_MyFoo(@_);
    bless $self, $pkg if defined($self);
}

*swig_x_get = *li_attributec::MyFoo_x_get;
*swig_x_set = *li_attributec::MyFoo_x_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_attributec::delete_MyFoo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_attribute::MyClass ##############

package li_attribute::MyClass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_attribute );
%OWNER = ();
%ITERATORS = ();
*swig_Foo_get = *li_attributec::MyClass_Foo_get;
*swig_Foo_set = *li_attributec::MyClass_Foo_set;
sub new {
    my $pkg = shift;
    my $self = li_attributec::new_MyClass(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_attributec::delete_MyClass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_attribute::MyClassVal ##############

package li_attribute::MyClassVal;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_attribute );
%OWNER = ();
%ITERATORS = ();
*swig_ReadWriteFoo_get = *li_attributec::MyClassVal_ReadWriteFoo_get;
*swig_ReadWriteFoo_set = *li_attributec::MyClassVal_ReadWriteFoo_set;
*swig_ReadOnlyFoo_get = *li_attributec::MyClassVal_ReadOnlyFoo_get;
*swig_ReadOnlyFoo_set = *li_attributec::MyClassVal_ReadOnlyFoo_set;
sub new {
    my $pkg = shift;
    my $self = li_attributec::new_MyClassVal(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_attributec::delete_MyClassVal($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : li_attribute::MyStringyClass ##############

package li_attribute::MyStringyClass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( li_attribute );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = li_attributec::new_MyStringyClass(@_);
    bless $self, $pkg if defined($self);
}

*swig_ReadWriteString_get = *li_attributec::MyStringyClass_ReadWriteString_get;
*swig_ReadWriteString_set = *li_attributec::MyStringyClass_ReadWriteString_set;
*swig_ReadOnlyString_get = *li_attributec::MyStringyClass_ReadOnlyString_get;
*swig_ReadOnlyString_set = *li_attributec::MyStringyClass_ReadOnlyString_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        li_attributec::delete_MyStringyClass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package li_attribute;

1;
