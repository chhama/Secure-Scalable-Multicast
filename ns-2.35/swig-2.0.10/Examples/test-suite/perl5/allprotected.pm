# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package allprotected;
use base qw(Exporter);
use base qw(DynaLoader);
package allprotectedc;
bootstrap allprotected;
package allprotected;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package allprotected;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package allprotected;


############# Class : allprotected::Klass ##############

package allprotected::Klass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( allprotected );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = allprotectedc::new_Klass(@_);
    bless $self, $pkg if defined($self);
}

*getName = *allprotectedc::Klass_getName;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        allprotectedc::delete_Klass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : allprotected::PublicBase ##############

package allprotected::PublicBase;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( allprotected );
%OWNER = ();
%ITERATORS = ();
*EnumVal1 = *allprotectedc::PublicBase_EnumVal1;
*EnumVal2 = *allprotectedc::PublicBase_EnumVal2;
sub new {
    my $pkg = shift;
    my $self = allprotectedc::new_PublicBase(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        allprotectedc::delete_PublicBase($self);
        delete $OWNER{$self};
    }
}

*virtualMethod = *allprotectedc::PublicBase_virtualMethod;
*instanceMethod = *allprotectedc::PublicBase_instanceMethod;
*instanceOverloaded = *allprotectedc::PublicBase_instanceOverloaded;
*staticMethod = *allprotectedc::PublicBase_staticMethod;
*staticOverloaded = *allprotectedc::PublicBase_staticOverloaded;
*swig_instanceMemberVariable_get = *allprotectedc::PublicBase_instanceMemberVariable_get;
*swig_instanceMemberVariable_set = *allprotectedc::PublicBase_instanceMemberVariable_set;
*staticMemberVariable = *allprotectedc::PublicBase_staticMemberVariable;
*staticConstMemberVariable = *allprotectedc::PublicBase_staticConstMemberVariable;
*staticConstMemberVariable = *allprotectedc::PublicBase_staticConstMemberVariable;
*swig_anEnum_get = *allprotectedc::PublicBase_anEnum_get;
*swig_anEnum_set = *allprotectedc::PublicBase_anEnum_set;
*swig_stringMember_get = *allprotectedc::PublicBase_stringMember_get;
*swig_stringMember_set = *allprotectedc::PublicBase_stringMember_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : allprotected::ProtectedBase ##############

package allprotected::ProtectedBase;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( allprotected );
%OWNER = ();
*EnumVal1 = *allprotectedc::ProtectedBase_EnumVal1;
*EnumVal2 = *allprotectedc::ProtectedBase_EnumVal2;
*getName = *allprotectedc::ProtectedBase_getName;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package allprotected;

*PublicBase_staticMemberVariable = *allprotectedc::PublicBase_staticMemberVariable;
1;
