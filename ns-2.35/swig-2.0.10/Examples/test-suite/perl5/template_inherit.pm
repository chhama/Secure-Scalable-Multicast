# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package template_inherit;
use base qw(Exporter);
use base qw(DynaLoader);
package template_inheritc;
bootstrap template_inherit;
package template_inherit;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package template_inherit;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package template_inherit;

*invoke_blah_int = *template_inheritc::invoke_blah_int;
*invoke_blah_double = *template_inheritc::invoke_blah_double;
*invoke_blah_uint = *template_inheritc::invoke_blah_uint;

############# Class : template_inherit::FooInt ##############

package template_inherit::FooInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_inherit );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_inheritc::delete_FooInt($self);
        delete $OWNER{$self};
    }
}

*blah = *template_inheritc::FooInt_blah;
*foomethod = *template_inheritc::FooInt_foomethod;
sub new {
    my $pkg = shift;
    my $self = template_inheritc::new_FooInt(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_inherit::FooDouble ##############

package template_inherit::FooDouble;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_inherit );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_inheritc::delete_FooDouble($self);
        delete $OWNER{$self};
    }
}

*blah = *template_inheritc::FooDouble_blah;
*foomethod = *template_inheritc::FooDouble_foomethod;
sub new {
    my $pkg = shift;
    my $self = template_inheritc::new_FooDouble(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_inherit::FooUInt ##############

package template_inherit::FooUInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_inherit );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_inheritc::delete_FooUInt($self);
        delete $OWNER{$self};
    }
}

*blah = *template_inheritc::FooUInt_blah;
*foomethod = *template_inheritc::FooUInt_foomethod;
sub new {
    my $pkg = shift;
    my $self = template_inheritc::new_FooUInt(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_inherit::BarInt ##############

package template_inherit::BarInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_inherit::FooInt template_inherit );
%OWNER = ();
%ITERATORS = ();
*blah = *template_inheritc::BarInt_blah;
sub new {
    my $pkg = shift;
    my $self = template_inheritc::new_BarInt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_inheritc::delete_BarInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_inherit::BarDouble ##############

package template_inherit::BarDouble;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_inherit::FooDouble template_inherit );
%OWNER = ();
%ITERATORS = ();
*blah = *template_inheritc::BarDouble_blah;
sub new {
    my $pkg = shift;
    my $self = template_inheritc::new_BarDouble(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_inheritc::delete_BarDouble($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : template_inherit::BarUInt ##############

package template_inherit::BarUInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( template_inherit::FooUInt template_inherit );
%OWNER = ();
%ITERATORS = ();
*blah = *template_inheritc::BarUInt_blah;
sub new {
    my $pkg = shift;
    my $self = template_inheritc::new_BarUInt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        template_inheritc::delete_BarUInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package template_inherit;

1;
