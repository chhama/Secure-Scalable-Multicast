# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package rename3;
use base qw(Exporter);
use base qw(DynaLoader);
package rename3c;
bootstrap rename3;
package rename3;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package rename3;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package rename3;


############# Class : rename3::Klass ##############

package rename3::Klass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename3 );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rename3c::new_Klass(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename3c::delete_Klass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename3::Another ##############

package rename3::Another;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename3 );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rename3c::new_Another(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename3c::delete_Another($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename3::ABC ##############

package rename3::ABC;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename3 );
%OWNER = ();
%ITERATORS = ();
*methodABC = *rename3c::ABC_methodABC;
*methodKlass = *rename3c::ABC_methodKlass;
*opABC = *rename3c::ABC_opABC;
*opKlass = *rename3c::ABC_opKlass;
sub new {
    my $pkg = shift;
    my $self = rename3c::new_ABC(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename3c::delete_ABC($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename3::XYZInt ##############

package rename3::XYZInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename3 );
%OWNER = ();
%ITERATORS = ();
*opIntPtrA = *rename3c::XYZInt_opIntPtrA;
*opIntPtrB = *rename3c::XYZInt_opIntPtrB;
*opAnother2 = *rename3c::XYZInt_opAnother2;
*tMethod2 = *rename3c::XYZInt_tMethod2;
*tMethodNotXYZ2 = *rename3c::XYZInt_tMethodNotXYZ2;
*tMethodXYZ2 = *rename3c::XYZInt_tMethodXYZ2;
*opT2 = *rename3c::XYZInt_opT2;
*opNotXYZ2 = *rename3c::XYZInt_opNotXYZ2;
*opXYZ2 = *rename3c::XYZInt_opXYZ2;
sub new {
    my $pkg = shift;
    my $self = rename3c::new_XYZInt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename3c::delete_XYZInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename3::XYZDouble ##############

package rename3::XYZDouble;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename3 );
%OWNER = ();
%ITERATORS = ();
*opIntPtrA = *rename3c::XYZDouble_opIntPtrA;
*opIntPtrB = *rename3c::XYZDouble_opIntPtrB;
*opAnother1 = *rename3c::XYZDouble_opAnother1;
*tMethod1 = *rename3c::XYZDouble_tMethod1;
*tMethodNotXYZ1 = *rename3c::XYZDouble_tMethodNotXYZ1;
*tMethodXYZ1 = *rename3c::XYZDouble_tMethodXYZ1;
*opT1 = *rename3c::XYZDouble_opT1;
*opNotXYZ1 = *rename3c::XYZDouble_opNotXYZ1;
*opXYZ1 = *rename3c::XYZDouble_opXYZ1;
sub new {
    my $pkg = shift;
    my $self = rename3c::new_XYZDouble(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename3c::delete_XYZDouble($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename3::XYZKlass ##############

package rename3::XYZKlass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename3 );
%OWNER = ();
%ITERATORS = ();
*opIntPtrA = *rename3c::XYZKlass_opIntPtrA;
*opIntPtrB = *rename3c::XYZKlass_opIntPtrB;
*opAnother3 = *rename3c::XYZKlass_opAnother3;
*tMethod3 = *rename3c::XYZKlass_tMethod3;
*tMethodNotXYZ3 = *rename3c::XYZKlass_tMethodNotXYZ3;
*tMethodXYZ3 = *rename3c::XYZKlass_tMethodXYZ3;
*opT3 = *rename3c::XYZKlass_opT3;
*opNotXYZ3 = *rename3c::XYZKlass_opNotXYZ3;
*opXYZ3 = *rename3c::XYZKlass_opXYZ3;
sub new {
    my $pkg = shift;
    my $self = rename3c::new_XYZKlass(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename3c::delete_XYZKlass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename3::XYZEnu ##############

package rename3::XYZEnu;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename3 );
%OWNER = ();
%ITERATORS = ();
*opIntPtrA = *rename3c::XYZEnu_opIntPtrA;
*opIntPtrB = *rename3c::XYZEnu_opIntPtrB;
*opAnother4 = *rename3c::XYZEnu_opAnother4;
*tMethod4 = *rename3c::XYZEnu_tMethod4;
*tMethodNotXYZ4 = *rename3c::XYZEnu_tMethodNotXYZ4;
*tMethodXYZ4 = *rename3c::XYZEnu_tMethodXYZ4;
*opT4 = *rename3c::XYZEnu_opT4;
*opNotXYZ4 = *rename3c::XYZEnu_opNotXYZ4;
*opXYZ4 = *rename3c::XYZEnu_opXYZ4;
sub new {
    my $pkg = shift;
    my $self = rename3c::new_XYZEnu(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename3c::delete_XYZEnu($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename3::NotXYZInt ##############

package rename3::NotXYZInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename3 );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rename3c::new_NotXYZInt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename3c::delete_NotXYZInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename3::NotXYZDouble ##############

package rename3::NotXYZDouble;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename3 );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rename3c::new_NotXYZDouble(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename3c::delete_NotXYZDouble($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename3::NotXYZKlass ##############

package rename3::NotXYZKlass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename3 );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rename3c::new_NotXYZKlass(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename3c::delete_NotXYZKlass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : rename3::NotXYZEnu ##############

package rename3::NotXYZEnu;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( rename3 );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = rename3c::new_NotXYZEnu(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        rename3c::delete_NotXYZEnu($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package rename3;

*En1 = *rename3c::En1;
*En2 = *rename3c::En2;
*En3 = *rename3c::En3;
1;
