/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIG_CASTRANK_MODE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Add in functionality missing in older versions of Perl. Much of this is based on Devel-PPPort on cpan. */

/* Add PERL_REVISION, PERL_VERSION, PERL_SUBVERSION if missing */
#ifndef PERL_REVISION
#  if !defined(__PATCHLEVEL_H_INCLUDED__) && !(defined(PATCHLEVEL) && defined(SUBVERSION))
#    define PERL_PATCHLEVEL_H_IMPLICIT
#    include <patchlevel.h>
#  endif
#  if !(defined(PERL_VERSION) || (defined(SUBVERSION) && defined(PATCHLEVEL)))
#    include <could_not_find_Perl_patchlevel.h>
#  endif
#  ifndef PERL_REVISION
#    define PERL_REVISION       (5)
#    define PERL_VERSION        PATCHLEVEL
#    define PERL_SUBVERSION     SUBVERSION
#  endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

#ifndef SvIOK_UV
# define SvIOK_UV(sv)       (SvIOK(sv) && (SvUVX(sv) == SvIVX(sv)))
#endif

#ifndef SvUOK
# define SvUOK(sv)           SvIOK_UV(sv)
#endif

#if ((PERL_VERSION < 4) || ((PERL_VERSION == 4) && (PERL_SUBVERSION <= 5)))
#  define PL_sv_undef               sv_undef
#  define PL_na	                    na
#  define PL_errgv                  errgv
#  define PL_sv_no                  sv_no
#  define PL_sv_yes                 sv_yes
#  define PL_markstack_ptr          markstack_ptr
#endif

#ifndef IVSIZE
#  ifdef LONGSIZE
#    define IVSIZE LONGSIZE
#  else
#    define IVSIZE 4 /* A bold guess, but the best we can make. */
#  endif
#endif

#ifndef INT2PTR
#  if (IVSIZE == PTRSIZE) && (UVSIZE == PTRSIZE)
#    define PTRV                  UV
#    define INT2PTR(any,d)        (any)(d)
#  else
#    if PTRSIZE == LONGSIZE
#      define PTRV                unsigned long
#    else
#      define PTRV                unsigned
#    endif
#    define INT2PTR(any,d)        (any)(PTRV)(d)
#  endif

#  define NUM2PTR(any,d)  (any)(PTRV)(d)
#  define PTR2IV(p)       INT2PTR(IV,p)
#  define PTR2UV(p)       INT2PTR(UV,p)
#  define PTR2NV(p)       NUM2PTR(NV,p)

#  if PTRSIZE == LONGSIZE
#    define PTR2ul(p)     (unsigned long)(p)
#  else
#    define PTR2ul(p)     INT2PTR(unsigned long,p)
#  endif
#endif /* !INT2PTR */

#ifndef SvPV_nolen
# define SvPV_nolen(x) SvPV(x,PL_na)
#endif

#ifndef get_sv
#  define get_sv perl_get_sv
#endif

#ifndef ERRSV
#  define ERRSV get_sv("@",FALSE)
#endif

#ifndef pTHX_
#define pTHX_
#endif   

#include <string.h>
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Perl_ErrorType(int code) {
  switch(code) {
  case SWIG_MemoryError:
    return "MemoryError";
  case SWIG_IOError:
    return "IOError";
  case SWIG_RuntimeError:
    return "RuntimeError";
  case SWIG_IndexError:
    return "IndexError";
  case SWIG_TypeError:
    return "TypeError";
  case SWIG_DivisionByZero:
    return "ZeroDivisionError";
  case SWIG_OverflowError:
    return "OverflowError";
  case SWIG_SyntaxError:
    return "SyntaxError";
  case SWIG_ValueError:
    return "ValueError";
  case SWIG_SystemError:
    return "SystemError";
  case SWIG_AttributeError:
    return "AttributeError";
  default:
    return "RuntimeError";
  }
}


/* -----------------------------------------------------------------------------
 * perlrun.swg
 *
 * This file contains the runtime support for Perl modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef PERL_OBJECT
#define SWIG_PERL_OBJECT_DECL CPerlObj *SWIGUNUSEDPARM(pPerl),
#define SWIG_PERL_OBJECT_CALL pPerl,
#else
#define SWIG_PERL_OBJECT_DECL
#define SWIG_PERL_OBJECT_CALL
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pp, type, flags)           SWIG_Perl_ConvertPtr(SWIG_PERL_OBJECT_CALL obj, pp, type, flags)
#define SWIG_ConvertPtrAndOwn(obj, pp, type, flags,own) SWIG_Perl_ConvertPtrAndOwn(SWIG_PERL_OBJECT_CALL obj, pp, type, flags, own)
#define SWIG_NewPointerObj(p, type, flags)              SWIG_Perl_NewPointerObj(SWIG_PERL_OBJECT_CALL p, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, p, s, type)             SWIG_Perl_ConvertPacked(SWIG_PERL_OBJECT_CALL obj, p, s, type)
#define SWIG_NewPackedObj(p, s, type)	                SWIG_Perl_NewPackedObj(SWIG_PERL_OBJECT_CALL p, s, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Perl_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Perl_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Perl_ErrorType(code)               
#define SWIG_Error(code, msg)            		sv_setpvf(get_sv("@", GV_ADD), "%s %s", SWIG_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    

/* Perl-specific SWIG API */

#define SWIG_MakePtr(sv, ptr, type, flags)              SWIG_Perl_MakePtr(SWIG_PERL_OBJECT_CALL sv, ptr, type, flags)
#define SWIG_MakePackedObj(sv, p, s, type)	        SWIG_Perl_MakePackedObj(SWIG_PERL_OBJECT_CALL sv, p, s, type)
#define SWIG_SetError(str)                              SWIG_Error(SWIG_RuntimeError, str)


#define SWIG_PERL_DECL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_DECL arg1)
#define SWIG_PERL_CALL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_CALL arg1)
#define SWIG_PERL_DECL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_DECL arg1, arg2)
#define SWIG_PERL_CALL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_CALL arg1, arg2)

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER   SWIG_POINTER_OWN
#define SWIG_SHADOW  SWIG_OWNER << 1

#define SWIG_MAYBE_PERL_OBJECT SWIG_PERL_OBJECT_DECL

/* SWIG Perl macros */

/* Macro to declare an XS function */
#ifndef XSPROTO
#   define XSPROTO(name) void name(pTHX_ CV* cv)
#endif

/* Macro to call an XS function */
#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC

#else /* PERL_OBJECT */

#define MAGIC_PPERL
#define SWIGCLASS_STATIC static SWIGUNUSED

#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#else /* MULTIPLICITY */

#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif /* MULTIPLICITY */
#endif /* PERL_OBJECT */

#  ifdef PERL_OBJECT
#    define SWIG_croak_null() SWIG_Perl_croak_null(pPerl)
static void SWIG_Perl_croak_null(CPerlObj *pPerl)
#  else
static void SWIG_croak_null()
#  endif
{
  SV *err = get_sv("@", GV_ADD);
#  if (PERL_VERSION < 6)
  croak("%_", err);
#  else
  if (sv_isobject(err))
    croak(0);
  else
    croak("%s", SvPV_nolen(err));
#  endif
}


/* 
   Define how strict is the cast between strings and integers/doubles
   when overloading between these types occurs.
   
   The default is making it as strict as possible by using SWIG_AddCast
   when needed.
   
   You can use -DSWIG_PERL_NO_STRICT_STR2NUM at compilation time to
   disable the SWIG_AddCast, making the casting between string and
   numbers less strict.

   In the end, we try to solve the overloading between strings and
   numerical types in the more natural way, but if you can avoid it,
   well, avoid it using %rename, for example.
*/
#ifndef SWIG_PERL_NO_STRICT_STR2NUM
# ifndef SWIG_PERL_STRICT_STR2NUM
#  define SWIG_PERL_STRICT_STR2NUM
# endif
#endif
#ifdef SWIG_PERL_STRICT_STR2NUM
/* string takes precedence */
#define SWIG_Str2NumCast(x) SWIG_AddCast(x)  
#else
/* number takes precedence */
#define SWIG_Str2NumCast(x) x
#endif



#include <stdlib.h>

SWIGRUNTIME const char *
SWIG_Perl_TypeProxyName(const swig_type_info *type) {
  if (!type) return NULL;
  if (type->clientdata != NULL) {
    return (const char*) type->clientdata;
  } 
  else {
    return type->name;
  }
}

/* Identical to SWIG_TypeCheck, except for strcmp comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeProxyCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(SWIG_Perl_TypeProxyName(iter->type), c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* Function for getting a pointer value */

SWIGRUNTIME int
SWIG_Perl_ConvertPtrAndOwn(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags, int *own) {
  swig_cast_info *tc;
  void *voidptr = (void *)0;
  SV *tsv = 0;

  if (own)
    *own = 0;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    IV tmp = 0;
    tsv = (SV*) SvRV(sv);
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          sv = mg->mg_obj;
          if (sv_isobject(sv)) {
	    tsv = (SV*)SvRV(sv);
            tmp = SvIV(tsv);
          }
        }
      } else {
        return SWIG_ERROR;
      }
    } else {
      tmp = SvIV(tsv);
    }
    voidptr = INT2PTR(void *,tmp);
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return SWIG_OK;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    if (!SvROK(sv)) {
      /* In Perl 5.12 and later, SVt_RV == SVt_IV, so sv could be a valid integer value.  */
      if (SvIOK(sv)) {
        return SWIG_ERROR;
      } else {
        /* NULL pointer (reference to undef). */
        *(ptr) = (void *) 0;
        return SWIG_OK;
      }
    } else {
      return SWIG_ERROR;
    }
  } else {                            /* Don't know what it is */
    return SWIG_ERROR;
  }
  if (_t) {
    /* Now see if the types match */
    char *_c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeProxyCheck(_c,_t);
    if (!tc) {
      return SWIG_ERROR;
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,voidptr,&newmemory);
      if (newmemory == SWIG_CAST_NEW_MEMORY) {
        assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
        if (own)
          *own = *own | SWIG_CAST_NEW_MEMORY;
      }
    }
  } else {
    *ptr = voidptr;
  }

  /* 
   *  DISOWN implementation: we need a perl guru to check this one.
   */
  if (tsv && (flags & SWIG_POINTER_DISOWN)) {
    /* 
     *  almost copy paste code from below SWIG_POINTER_OWN setting
     */
    SV *obj = sv;
    HV *stash = SvSTASH(SvRV(obj));
    GV *gv = *(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
    if (isGV(gv)) {
      HV *hv = GvHVn(gv);
      /*
       * To set ownership (see below), a newSViv(1) entry is added. 
       * Hence, to remove ownership, we delete the entry.
       */
      if (hv_exists_ent(hv, obj, 0)) {
	hv_delete_ent(hv, obj, 0, 0);
      }
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME int
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  return SWIG_Perl_ConvertPtrAndOwn(sv, ptr, _t, flags, 0);
}

SWIGRUNTIME void
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & (SWIG_SHADOW | SWIG_POINTER_OWN))) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, SWIG_Perl_TypeProxyName(t), ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_POINTER_OWN) {
      HV *hv;
      GV *gv = *(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, SWIG_Perl_TypeProxyName(t), ptr);
  }
}

SWIGRUNTIMEINLINE SV *
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

SWIGRUNTIME void
SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(SWIG_Perl_TypeProxyName(type))) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,SWIG_Perl_TypeProxyName(type));
  sv_setpv(sv, result);
}

SWIGRUNTIME SV *
SWIG_Perl_NewPackedObj(SWIG_MAYBE_PERL_OBJECT void *ptr, int sz, swig_type_info *type) {
  SV *result = sv_newmortal();
  SWIG_Perl_MakePackedObj(result, ptr, sz, type);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return SWIG_ERROR;
  c = SvPV_nolen(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return SWIG_ERROR;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return SWIG_ERROR;
  }
  return SWIG_OK;
}


/* Macros for low-level exception handling */
#define SWIG_croak(x)    { SWIG_Error(SWIG_RuntimeError, x); SWIG_fail; }


typedef XSPROTO(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;


/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
# ifdef __cplusplus
#  define swig_create_magic(s,a,b,c) _swig_create_magic(s,const_cast<char*>(a),b,c)
# else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(s,(char*)(a),b,c)
# endif
# ifndef MULTIPLICITY
SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) 
# else
SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) 
# endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
SWIGRUNTIME void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) 
#endif
{
  MAGIC *mg;
  sv_magic(sv,sv,'U',name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFunc) get;
  mg->mg_virtual->svt_set = (SwigMagicFunc) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}


SWIGRUNTIME swig_module_info *
SWIG_Perl_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  SV *pointer;

  /* first check if pointer already created */
  if (!type_pointer) {
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, FALSE | GV_ADDMULTI);
    if (pointer && SvOK(pointer)) {
      type_pointer = INT2PTR(swig_type_info **, SvIV(pointer));
    }
  }

  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Perl_SetModule(swig_module_info *module) {
  SV *pointer;

  /* create a new pointer */
  pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TRUE | GV_ADDMULTI);
  sv_setiv(pointer, PTR2IV(module));
}

#ifdef __cplusplus
}
#endif

/* Workaround perl5 global namespace pollution. Note that undefining library
 * functions like fopen will not solve the problem on all platforms as fopen
 * might be a macro on Windows but not necessarily on other operating systems. */
#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef do_exec
  #undef do_exec
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef read
  #undef read
#endif
#ifdef write
  #undef write
#endif
#ifdef eof
  #undef eof
#endif
#ifdef close
  #undef close
#endif
#ifdef rewind
  #undef rewind
#endif
#ifdef free
  #undef free
#endif
#ifdef malloc
  #undef malloc
#endif
#ifdef calloc
  #undef calloc
#endif
#ifdef Stat
  #undef Stat
#endif
#ifdef check
  #undef check
#endif
#ifdef seekdir
  #undef seekdir
#endif
#ifdef open
  #undef open
#endif
#ifdef readdir
  #undef readdir
#endif
#ifdef bind
  #undef bind
#endif
#ifdef access
  #undef access
#endif
#ifdef stat
  #undef stat
#endif

#ifdef bool
  /* Leave if macro is from C99 stdbool.h */
  #ifndef __bool_true_false_are_defined
    #undef bool
  #endif
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AlsoEmpty swig_types[0]
#define SWIGTYPE_p_AnonSpace__AnonStruct swig_types[1]
#define SWIGTYPE_p_AnonSpace__namedanonspace swig_types[2]
#define SWIGTYPE_p_IgnoreTest swig_types[3]
#define SWIGTYPE_p_Instances swig_types[4]
#define SWIGTYPE_p_Name__TClassT_int_t swig_types[5]
#define SWIGTYPE_p_Obscure swig_types[6]
#define SWIGTYPE_p_OldNameStruct swig_types[7]
#define SWIGTYPE_p_RepeatSpace__repeat swig_types[8]
#define SWIGTYPE_p_SpeedClass swig_types[9]
#define SWIGTYPE_p_TemplateClassT_int_t swig_types[10]
#define SWIGTYPE_p_TreesClass swig_types[11]
#define SWIGTYPE_p_TreesClass__trees swig_types[12]
#define SWIGTYPE_p_TwoNamesStruct swig_types[13]
#define SWIGTYPE_p_char swig_types[14]
#define SWIGTYPE_p_curly__greasy__FirStruct swig_types[15]
#define SWIGTYPE_p_curly__greasy__HairStruct swig_types[16]
#define SWIGTYPE_p_doublename swig_types[17]
#define SWIGTYPE_p_hairtd1 swig_types[18]
#define SWIGTYPE_p_hairtd2 swig_types[19]
#define SWIGTYPE_p_hairtd3 swig_types[20]
#define SWIGTYPE_p_hairtd4 swig_types[21]
#define SWIGTYPE_p_hairtd5 swig_types[22]
#define SWIGTYPE_p_hairtd6 swig_types[23]
#define SWIGTYPE_p_hairtd7 swig_types[24]
#define SWIGTYPE_p_hairtd8 swig_types[25]
#define SWIGTYPE_p_hairtd9 swig_types[26]
#define SWIGTYPE_p_hairtdA swig_types[27]
#define SWIGTYPE_p_namedanon swig_types[28]
#define SWIGTYPE_p_old_name swig_types[29]
#define SWIGTYPE_p_scientiststd1 swig_types[30]
#define SWIGTYPE_p_scientiststd2 swig_types[31]
#define SWIGTYPE_p_scientiststd3 swig_types[32]
#define SWIGTYPE_p_singlename swig_types[33]
#define SWIGTYPE_p_speedtd1 swig_types[34]
#define SWIGTYPE_p_treestd1 swig_types[35]
#define SWIGTYPE_p_treestd2 swig_types[36]
#define SWIGTYPE_p_treestd3 swig_types[37]
#define SWIGTYPE_p_treestd4 swig_types[38]
#define SWIGTYPE_p_treestd5 swig_types[39]
#define SWIGTYPE_p_twonamestag swig_types[40]
static swig_type_info *swig_types[42];
static swig_module_info swig_module = {swig_types, 41, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_enum_thorough

#define SWIG_name   "enum_thoroughc::boot_enum_thorough"
#define SWIG_prefix "enum_thoroughc::"

#define SWIGVERSION 0x020010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT void SWIG_init (CV* cv);
#else
SWIGEXPORT void SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT void SWIG_init (CV *cv, CPerlObj *);
#endif



enum { AnonEnum1, AnonEnum2 = 100 };
enum { ReallyAnInteger = 200 };
//enum { AnonEnum3, AnonEnum4 } instance;
namespace AnonSpace {
  enum { AnonSpaceEnum1, AnonSpaceEnum2 = 300 };
  struct AnonStruct {
    enum { AnonStructEnum1, AnonStructEnum2 = 400 };
  };
}


enum colour { red=-1, blue, green = 10 };
colour colourTest1(colour e) { return e; }
enum colour colourTest2(enum colour e) { return e; }
const colour colourTest3(const colour e) { return e; }
const enum colour colourTest4(const enum colour e) { return e; }

colour myColour;

struct SpeedClass {
  enum speed { slow=10, medium=20, fast=30, lightning };
  typedef enum speed speedtd1;

  int                           speedTest0(int s) { return s; }
  speed                         speedTest1(speed s) { return s; }
  enum speed                    speedTest2(enum speed s) { return s; }
  const speed                   speedTest3(const speed s) { return s; }
  const enum speed              speedTest4(const enum speed s) { return s; }
  speedtd1                      speedTest5(speedtd1 s) { return s; }
  const speedtd1                speedTest6(const speedtd1 s) { return s; }
  const speed &                 speedTest7(const speed &s) { return s; }
  const enum speed &            speedTest8(const enum speed &s) { return s; }

  const colour myColour2;
  speedtd1 mySpeedtd1;
  SpeedClass() : myColour2(red), mySpeedtd1(slow) { }
private:
  SpeedClass& operator=(const SpeedClass&);
};

int                            speedTest0(int s) { return s; }
SpeedClass::speed              speedTest1(SpeedClass::speed s) { return s; }
enum SpeedClass::speed         speedTest2(enum SpeedClass::speed s) { return s; }
const SpeedClass::speed        speedTest3(const SpeedClass::speed s) { return s; }
const enum SpeedClass::speed   speedTest4(const enum SpeedClass::speed s) { return s; }
const SpeedClass::speed &      speedTest5(const SpeedClass::speed &s) { return s; }


typedef enum { NamedAnon1, NamedAnon2 } namedanon;

namedanon                       namedanonTest1(namedanon e) { return e; } 

typedef enum twonamestag { TwoNames1, TwoNames2, TwoNames3 = 33 } twonames;

twonames                        twonamesTest1(twonames e) { return e; } 
twonamestag                     twonamesTest2(twonamestag e) { return e; } 
enum twonamestag                twonamesTest3(enum twonamestag e) { return e; } 

struct TwoNamesStruct {
  typedef enum twonamestag { TwoNamesStruct1, TwoNamesStruct2 } twonames;
  twonames                      twonamesTest1(twonames e) { return e; } 
  twonamestag                   twonamesTest2(twonamestag e) { return e; } 
  enum twonamestag              twonamesTest3(enum twonamestag e) { return e; } 
};

namespace AnonSpace{
  typedef enum { NamedAnonSpace1, NamedAnonSpace2 } namedanonspace;
  namedanonspace                namedanonspaceTest1(namedanonspace e) { return e; } 
  AnonSpace::namedanonspace     namedanonspaceTest2(AnonSpace::namedanonspace e) { return e; } 
}
AnonSpace::namedanonspace       namedanonspaceTest3(AnonSpace::namedanonspace e) { return e; } 
using namespace AnonSpace;
namedanonspace                  namedanonspaceTest4(namedanonspace e) { return e; } 


template<typename T> struct TemplateClass {
  enum scientists { einstein, galileo = 10 }; 
  typedef enum scientists scientiststd1;
  typedef scientists scientiststd2;
  typedef scientiststd1 scientiststd3;
  scientists                                scientistsTest1(scientists e) { return e; }
  enum scientists                           scientistsTest2(enum scientists e) { return e; }
  const scientists                          scientistsTest3(const scientists e) { return e; }
  const enum scientists                     scientistsTest4(const enum scientists e) { return e; }
  typename TemplateClass<T>::scientists     scientistsTest5(typename TemplateClass<T>::scientists e) { return e; }
  const typename TemplateClass<T>::scientists        scientistsTest6(const typename TemplateClass<T>::scientists e) { return e; }
  enum TemplateClass<T>::scientists         scientistsTest7(enum TemplateClass<T>::scientists e) { return e; }
  const enum TemplateClass<T>::scientists   scientistsTest8(const enum TemplateClass<T>::scientists e) { return e; }
  typename TemplateClass::scientists        scientistsTest9(typename TemplateClass::scientists e) { return e; }
//  enum TemplateClass::scientists            scientistsTestA(enum TemplateClass::scientists e) { return e; }
  const typename TemplateClass::scientists  scientistsTestB(const typename TemplateClass::scientists e) { return e; }
//  const enum TemplateClass::scientists      scientistsTestC(const enum TemplateClass::scientists e) { return e; }
  scientiststd1                             scientistsTestD(scientiststd1 e) { return e; }
  scientiststd2                             scientistsTestE(scientiststd2 e) { return e; }
  scientiststd3                             scientistsTestF(scientiststd3 e) { return e; }
  typename TemplateClass<T>::scientiststd1  scientistsTestG(typename TemplateClass<T>::scientiststd1 e) { return e; }
  typename TemplateClass<T>::scientiststd2  scientistsTestH(typename TemplateClass<T>::scientiststd2 e) { return e; }
  typename TemplateClass<T>::scientiststd3  scientistsTestI(typename TemplateClass<T>::scientiststd3 e) { return e; }
  const scientists &                        scientistsTestJ(const scientists &e) { return e; }
};

TemplateClass<int>::scientists              scientistsTest1(TemplateClass<int>::scientists e) { return e; }
const TemplateClass<int>::scientists        scientistsTest2(const TemplateClass<int>::scientists e) { return e; }
enum TemplateClass<int>::scientists         scientistsTest3(enum TemplateClass<int>::scientists e) { return e; }
const enum TemplateClass<int>::scientists   scientistsTest4(const enum TemplateClass<int>::scientists e) { return e; }
TemplateClass<int>::scientiststd1           scientistsTest5(TemplateClass<int>::scientiststd1 e) { return e; }
TemplateClass<int>::scientiststd2           scientistsTest6(TemplateClass<int>::scientiststd2 e) { return e; }
TemplateClass<int>::scientiststd3           scientistsTest7(TemplateClass<int>::scientiststd3 e) { return e; }
const TemplateClass<int>::scientiststd3 &   scientistsTest8(const TemplateClass<int>::scientiststd3 &e) { return e; }


namespace Name {
template<typename T> struct TClass {
  enum scientists { faraday, bell = 20 }; 
  typedef enum scientists scientiststd1;
  typedef scientists scientiststd2;
  typedef scientiststd1 scientiststd3;
  scientists                                scientistsNameTest1(scientists e) { return e; }
  enum scientists                           scientistsNameTest2(enum scientists e) { return e; }
  const scientists                          scientistsNameTest3(const scientists e) { return e; }
  const enum scientists                     scientistsNameTest4(const enum scientists e) { return e; }
  typename TClass<T>::scientists            scientistsNameTest5(typename TClass<T>::scientists e) { return e; }
  const typename TClass<T>::scientists      scientistsNameTest6(const typename TClass<T>::scientists e) { return e; }
  enum TClass<T>::scientists                scientistsNameTest7(enum TClass<T>::scientists e) { return e; }
  const enum TClass<T>::scientists          scientistsNameTest8(const enum TClass<T>::scientists e) { return e; }
  typename TClass::scientists               scientistsNameTest9(typename TClass::scientists e) { return e; }
//  enum TClass::scientists                   scientistsNameTestA(enum TClass::scientists e) { return e; }
  const typename TClass::scientists         scientistsNameTestB(const typename TClass::scientists e) { return e; }
//  const enum TClass::scientists             scientistsNameTestC(const enum TClass::scientists e) { return e; }
  scientiststd1                             scientistsNameTestD(scientiststd1 e) { return e; }
  scientiststd2                             scientistsNameTestE(scientiststd2 e) { return e; }
  scientiststd3                             scientistsNameTestF(scientiststd3 e) { return e; }
  typename TClass<T>::scientiststd1         scientistsNameTestG(typename TClass<T>::scientiststd1 e) { return e; }
  typename TClass<T>::scientiststd2         scientistsNameTestH(typename TClass<T>::scientiststd2 e) { return e; }
  typename TClass<T>::scientiststd3         scientistsNameTestI(typename TClass<T>::scientiststd3 e) { return e; }

  typename Name::TClass<T>::scientists      scientistsNameSpaceTest1(typename Name::TClass<T>::scientists e) { return e; }
  const typename Name::TClass<T>::scientists         scientistsNameSpaceTest2(const typename Name::TClass<T>::scientists e) { return e; }
  enum Name::TClass<T>::scientists          scientistsNameSpaceTest3(enum Name::TClass<T>::scientists e) { return e; }
  const enum Name::TClass<T>::scientists    scientistsNameSpaceTest4(const enum Name::TClass<T>::scientists e) { return e; }
  typename Name::TClass<T>::scientiststd1   scientistsNameSpaceTest5(typename Name::TClass<T>::scientiststd1 e) { return e; }
  typename Name::TClass<T>::scientiststd2   scientistsNameSpaceTest6(typename Name::TClass<T>::scientiststd2 e) { return e; }
  typename Name::TClass<T>::scientiststd3   scientistsNameSpaceTest7(typename Name::TClass<T>::scientiststd3 e) { return e; }

  // Test TemplateClass::scientists rather then TClass::scientists
  ::TemplateClass<int>::scientists              scientistsOtherTest1(::TemplateClass<int>::scientists e) { return e; }
  const ::TemplateClass<int>::scientists        scientistsOtherTest2(const ::TemplateClass<int>::scientists e) { return e; }
  enum ::TemplateClass<int>::scientists         scientistsOtherTest3(enum ::TemplateClass<int>::scientists e) { return e; }
  const enum ::TemplateClass<int>::scientists   scientistsOtherTest4(const enum ::TemplateClass<int>::scientists e) { return e; }
  ::TemplateClass<int>::scientiststd1           scientistsOtherTest5(::TemplateClass<int>::scientiststd1 e) { return e; }
  ::TemplateClass<int>::scientiststd2           scientistsOtherTest6(::TemplateClass<int>::scientiststd2 e) { return e; }
  ::TemplateClass<int>::scientiststd3           scientistsOtherTest7(::TemplateClass<int>::scientiststd3 e) { return e; }
};

TClass<int>::scientists                     scientistsNameTest1(TClass<int>::scientists e) { return e; }
const TClass<int>::scientists               scientistsNameTest2(const TClass<int>::scientists e) { return e; }
enum TClass<int>::scientists                scientistsNameTest3(enum TClass<int>::scientists e) { return e; }
const enum TClass<int>::scientists          scientistsNameTest4(const enum TClass<int>::scientists e) { return e; }
TClass<int>::scientiststd1                  scientistsNameTest5(TClass<int>::scientiststd1 e) { return e; }
TClass<int>::scientiststd2                  scientistsNameTest6(TClass<int>::scientiststd2 e) { return e; }
TClass<int>::scientiststd3                  scientistsNameTest7(TClass<int>::scientiststd3 e) { return e; }

Name::TClass<int>::scientists               scientistsNameSpaceTest1(Name::TClass<int>::scientists e) { return e; }
const Name::TClass<int>::scientists         scientistsNameSpaceTest2(const Name::TClass<int>::scientists e) { return e; }
enum Name::TClass<int>::scientists          scientistsNameSpaceTest3(enum Name::TClass<int>::scientists e) { return e; }
const enum Name::TClass<int>::scientists    scientistsNameSpaceTest4(const enum Name::TClass<int>::scientists e) { return e; }
Name::TClass<int>::scientiststd1            scientistsNameSpaceTest5(Name::TClass<int>::scientiststd1 e) { return e; }
Name::TClass<int>::scientiststd2            scientistsNameSpaceTest6(Name::TClass<int>::scientiststd2 e) { return e; }
Name::TClass<int>::scientiststd3            scientistsNameSpaceTest7(Name::TClass<int>::scientiststd3 e) { return e; }
}

Name::TClass<int>::scientists               scientistsNameSpaceTest8(Name::TClass<int>::scientists e) { return e; }
const Name::TClass<int>::scientists         scientistsNameSpaceTest9(const Name::TClass<int>::scientists e) { return e; }
enum Name::TClass<int>::scientists          scientistsNameSpaceTestA(enum Name::TClass<int>::scientists e) { return e; }
const enum Name::TClass<int>::scientists    scientistsNameSpaceTestB(const enum Name::TClass<int>::scientists e) { return e; }
Name::TClass<int>::scientiststd1            scientistsNameSpaceTestC(Name::TClass<int>::scientiststd1 e) { return e; }
Name::TClass<int>::scientiststd2            scientistsNameSpaceTestD(Name::TClass<int>::scientiststd2 e) { return e; }
Name::TClass<int>::scientiststd3            scientistsNameSpaceTestE(Name::TClass<int>::scientiststd3 e) { return e; }

using namespace Name;
TClass<int>::scientists                     scientistsNameSpaceTestF(TClass<int>::scientists e) { return e; }
const TClass<int>::scientists               scientistsNameSpaceTestG(const TClass<int>::scientists e) { return e; }
enum TClass<int>::scientists                scientistsNameSpaceTestH(enum TClass<int>::scientists e) { return e; }
const enum TClass<int>::scientists          scientistsNameSpaceTestI(const enum TClass<int>::scientists e) { return e; }
TClass<int>::scientiststd1                  scientistsNameSpaceTestJ(TClass<int>::scientiststd1 e) { return e; }
TClass<int>::scientiststd2                  scientistsNameSpaceTestK(TClass<int>::scientiststd2 e) { return e; }
TClass<int>::scientiststd3                  scientistsNameSpaceTestL(TClass<int>::scientiststd3 e) { return e; }



SWIGINTERNINLINE SV *
SWIG_From_long  SWIG_PERL_DECL_ARGS_1(long value)
{
  SV *sv;
  if (value >= IV_MIN && value <= IV_MAX)
    sv = newSViv(value);
  else
    sv = newSVpvf("%ld", value);
  return sv_2mortal(sv);
}


SWIGINTERNINLINE SV *
SWIG_From_int  SWIG_PERL_DECL_ARGS_1(int value)
{    
  return SWIG_From_long  SWIG_PERL_CALL_ARGS_1(value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double SWIG_PERL_DECL_ARGS_2(SV *obj, double *val)
{
  if (SvNIOK(obj)) {
    if (val) *val = SvNV(obj);
    return SWIG_OK;
  } else if (SvIOK(obj)) {
    if (val) *val = (double) SvIV(obj);
    return SWIG_AddCast(SWIG_OK);
  } else {
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      double v;
      errno = 0;
      v = strtod(nptr, &endptr);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
  }
  return SWIG_TypeError;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long SWIG_PERL_DECL_ARGS_2(SV *obj, long* val)
{
  if (SvUOK(obj)) {
    UV v = SvUV(obj);
    if (v <= LONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (v >= LONG_MIN && v <= LONG_MAX) {
      if(val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      long v;
      errno = 0;
      v = strtol(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_PERL_DECL_ARGS_2(SV * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


enum old_name { argh, eek = -1 };
typedef old_name old_nametd;
old_name                            renameTest1(old_name e) { return e; }
old_nametd                          renameTest2(old_nametd e) { return e; }

struct OldNameStruct {
  enum enumeration {whizz, kerboom, pop};
  enumeration                       renameTest1(enumeration e) { return e; }
  OldNameStruct::enumeration        renameTest2(OldNameStruct::enumeration e) { return e; }

  enum simple {simple1};
  typedef enum doublenametag {doublename1} doublename;
  typedef enum {singlename1} singlename;

  simple                            renameTest3(simple e) { return e; }
  doublename                        renameTest4(doublename e) { return e; }
  doublenametag                     renameTest5(doublenametag e) { return e; }
  singlename                        renameTest6(singlename e) { return e; }
};

OldNameStruct::enumeration          renameTest3(OldNameStruct::enumeration e) { return e; }
OldNameStruct::simple               renameTest4(OldNameStruct::simple e) { return e; }
OldNameStruct::doublename           renameTest5(OldNameStruct::doublename e) { return e; }
OldNameStruct::doublenametag        renameTest6(OldNameStruct::doublenametag e) { return e; }
OldNameStruct::singlename           renameTest7(OldNameStruct::singlename e) { return e; }


struct TreesClass {
  enum trees {oak, fir, pine };
  typedef enum trees treestd1;
  typedef trees treestd2;
  typedef treestd1 treestd3;
  typedef TreesClass::trees treestd4;
  typedef treestd1 treestd5;

  trees                             treesTest1(trees e) { return e; }
  treestd1                          treesTest2(treestd1 e) { return e; }
  treestd2                          treesTest3(treestd2 e) { return e; }
  treestd3                          treesTest4(treestd3 e) { return e; }
  treestd4                          treesTest5(treestd4 e) { return e; }
  treestd5                          treesTest6(treestd5 e) { return e; }
  const trees                       treesTest7(const trees e) { return e; }
  const treestd1                    treesTest8(const treestd1 e) { return e; }
  const treestd2                    treesTest9(const treestd2 e) { return e; }
  const treestd3                    treesTestA(const treestd3 e) { return e; }
  const treestd4                    treesTestB(const treestd4 e) { return e; }
  const treestd5                    treesTestC(const treestd5 e) { return e; }
  TreesClass::trees                 treesTestD(TreesClass::trees e) { return e; }
  TreesClass::treestd1              treesTestE(TreesClass::treestd1 e) { return e; }
  TreesClass::treestd2              treesTestF(TreesClass::treestd2 e) { return e; }
  TreesClass::treestd3              treesTestG(TreesClass::treestd3 e) { return e; }
  TreesClass::treestd4              treesTestH(TreesClass::treestd4 e) { return e; }
  TreesClass::treestd5              treesTestI(TreesClass::treestd5 e) { return e; }
  const TreesClass::trees           treesTestJ(const TreesClass::trees e) { return e; }
  const TreesClass::treestd1        treesTestK(const TreesClass::treestd1 e) { return e; }
  const TreesClass::treestd2        treesTestL(const TreesClass::treestd2 e) { return e; }
  const TreesClass::treestd3        treesTestM(const TreesClass::treestd3 e) { return e; }
  const TreesClass::treestd4        treesTestN(const TreesClass::treestd4 e) { return e; }
  const TreesClass::treestd5        treesTestO(const TreesClass::treestd5 e) { return e; }
};

TreesClass::trees                   treesTest1(TreesClass::trees e) { return e; }
TreesClass::treestd1                treesTest2(TreesClass::treestd1 e) { return e; }
TreesClass::treestd2                treesTest3(TreesClass::treestd2 e) { return e; }
TreesClass::treestd3                treesTest4(TreesClass::treestd3 e) { return e; }
TreesClass::treestd4                treesTest5(TreesClass::treestd4 e) { return e; }
TreesClass::treestd5                treesTest6(TreesClass::treestd5 e) { return e; }
const TreesClass::trees             treesTest7(const TreesClass::trees e) { return e; }
const TreesClass::treestd1          treesTest8(const TreesClass::treestd1 e) { return e; }
const TreesClass::treestd2          treesTest9(const TreesClass::treestd2 e) { return e; }
const TreesClass::treestd3          treesTestA(const TreesClass::treestd3 e) { return e; }
const TreesClass::treestd4          treesTestB(const TreesClass::treestd4 e) { return e; }
const TreesClass::treestd5          treesTestC(const TreesClass::treestd5 e) { return e; }

typedef enum TreesClass::trees treesglobaltd1;
typedef TreesClass::trees treesglobaltd2;
typedef TreesClass::treestd1 treesglobaltd3;
typedef TreesClass::treestd2 treesglobaltd4;
typedef treesglobaltd4 treesglobaltd5;

treesglobaltd1                      treesTestD(treesglobaltd1 e) { return e; }
treesglobaltd2                      treesTestE(treesglobaltd2 e) { return e; }
treesglobaltd3                      treesTestF(treesglobaltd3 e) { return e; }
treesglobaltd4                      treesTestG(treesglobaltd4 e) { return e; }
treesglobaltd5                      treesTestH(treesglobaltd5 e) { return e; }
const treesglobaltd1                treesTestI(const treesglobaltd1 e) { return e; }
const treesglobaltd2                treesTestJ(const treesglobaltd2 e) { return e; }
const treesglobaltd3                treesTestK(const treesglobaltd3 e) { return e; }
const treesglobaltd4                treesTestL(const treesglobaltd4 e) { return e; }
const treesglobaltd5                treesTestM(const treesglobaltd5 e) { return e; }

typedef const enum TreesClass::trees treesglobaltd6;
typedef const TreesClass::trees treesglobaltd7;
typedef const TreesClass::treestd1 treesglobaltd8;
typedef const TreesClass::treestd2 treesglobaltd9;
typedef const treesglobaltd4 treesglobaltdA;

//treesglobaltd6                      treesTestN(treesglobaltd6 e) { return e; } // casting using an int instead of treesglobaltd6
treesglobaltd7                      treesTestO(treesglobaltd7 e) { return e; }
treesglobaltd8                      treesTestP(treesglobaltd8 e) { return e; }
treesglobaltd9                      treesTestQ(treesglobaltd9 e) { return e; }
treesglobaltdA                      treesTestR(treesglobaltdA e) { return e; }

namespace curly {
  namespace greasy {
    struct HairStruct {
      enum hair { blonde=0xFF0, ginger };
      typedef hair hairtd1;
      typedef HairStruct::hair hairtd2;
      typedef greasy::HairStruct::hair hairtd3;
      typedef curly::greasy::HairStruct::hair hairtd4;
      typedef ::curly::greasy::HairStruct::hair hairtd5;
      typedef hairtd1 hairtd6;
      typedef HairStruct::hairtd1 hairtd7;
      typedef greasy::HairStruct::hairtd1 hairtd8;
      typedef curly::greasy::HairStruct::hairtd1 hairtd9;
      typedef ::curly::greasy::HairStruct::hairtd1 hairtdA;
      hair                          hairTest1(hair e) { return e; }
      hairtd1                       hairTest2(hairtd1 e) { return e; }
      hairtd2                       hairTest3(hairtd2 e) { return e; }
      hairtd3                       hairTest4(hairtd3 e) { return e; }
      hairtd4                       hairTest5(hairtd4 e) { return e; }
      hairtd5                       hairTest6(hairtd5 e) { return e; }
      hairtd6                       hairTest7(hairtd6 e) { return e; }
      hairtd7                       hairTest8(hairtd7 e) { return e; }
      hairtd8                       hairTest9(hairtd8 e) { return e; }
      hairtd9                       hairTestA(hairtd9 e) { return e; }
      hairtdA                       hairTestB(hairtdA e) { return e; }

      ::colour                      colourTest1(::colour e) { return e; }
      enum colour                   colourTest2(enum colour e) { return e; }
      namedanon                     namedanonTest1(namedanon e) { return e; }
      AnonSpace::namedanonspace      namedanonspaceTest1(AnonSpace::namedanonspace e) { return e; }

      treesglobaltd1                treesGlobalTest1(treesglobaltd1 e) { return e; }
      treesglobaltd2                treesGlobalTest2(treesglobaltd2 e) { return e; }
      treesglobaltd3                treesGlobalTest3(treesglobaltd3 e) { return e; }
      treesglobaltd4                treesGlobalTest4(treesglobaltd4 e) { return e; }
      treesglobaltd5                treesGlobalTest5(treesglobaltd5 e) { return e; }

    };
    HairStruct::hair                hairTest1(HairStruct::hair e) { return e; }
    HairStruct::hairtd1             hairTest2(HairStruct::hairtd1 e) { return e; }
    HairStruct::hairtd2             hairTest3(HairStruct::hairtd2 e) { return e; }
    HairStruct::hairtd3             hairTest4(HairStruct::hairtd3 e) { return e; }
    HairStruct::hairtd4             hairTest5(HairStruct::hairtd4 e) { return e; }
    HairStruct::hairtd5             hairTest6(HairStruct::hairtd5 e) { return e; }
    HairStruct::hairtd6             hairTest7(HairStruct::hairtd6 e) { return e; }
    HairStruct::hairtd7             hairTest8(HairStruct::hairtd7 e) { return e; }
    HairStruct::hairtd8             hairTest9(HairStruct::hairtd8 e) { return e; }
    HairStruct::hairtd9             hairTestA(HairStruct::hairtd9 e) { return e; }
    HairStruct::hairtdA             hairTestB(HairStruct::hairtdA e) { return e; }
    const HairStruct::hair &        hairTestC(const HairStruct::hair &e) { return e; }
  }
  greasy::HairStruct::hair          hairTestA1(greasy::HairStruct::hair e) { return e; }
  greasy::HairStruct::hairtd1       hairTestA2(greasy::HairStruct::hairtd1 e) { return e; }
  greasy::HairStruct::hairtd2       hairTestA3(greasy::HairStruct::hairtd2 e) { return e; }
  greasy::HairStruct::hairtd3       hairTestA4(greasy::HairStruct::hairtd3 e) { return e; }
  greasy::HairStruct::hairtd4       hairTestA5(greasy::HairStruct::hairtd4 e) { return e; }
  greasy::HairStruct::hairtd5       hairTestA6(greasy::HairStruct::hairtd5 e) { return e; }
  greasy::HairStruct::hairtd6       hairTestA7(greasy::HairStruct::hairtd6 e) { return e; }
  greasy::HairStruct::hairtd7       hairTestA8(greasy::HairStruct::hairtd7 e) { return e; }
  greasy::HairStruct::hairtd8       hairTestA9(greasy::HairStruct::hairtd8 e) { return e; }
  greasy::HairStruct::hairtd9       hairTestAA(greasy::HairStruct::hairtd9 e) { return e; }
  greasy::HairStruct::hairtdA       hairTestAB(greasy::HairStruct::hairtdA e) { return e; }
  const greasy::HairStruct::hairtdA &     hairTestAC(const greasy::HairStruct::hairtdA &e) { return e; }
}
curly::greasy::HairStruct::hair     hairTestB1(curly::greasy::HairStruct::hair e) { return e; }
curly::greasy::HairStruct::hairtd1  hairTestB2(curly::greasy::HairStruct::hairtd1 e) { return e; }
curly::greasy::HairStruct::hairtd2  hairTestB3(curly::greasy::HairStruct::hairtd2 e) { return e; }
curly::greasy::HairStruct::hairtd3  hairTestB4(curly::greasy::HairStruct::hairtd3 e) { return e; }
curly::greasy::HairStruct::hairtd4  hairTestB5(curly::greasy::HairStruct::hairtd4 e) { return e; }
curly::greasy::HairStruct::hairtd5  hairTestB6(curly::greasy::HairStruct::hairtd5 e) { return e; }
curly::greasy::HairStruct::hairtd6  hairTestB7(curly::greasy::HairStruct::hairtd6 e) { return e; }
curly::greasy::HairStruct::hairtd7  hairTestB8(curly::greasy::HairStruct::hairtd7 e) { return e; }
curly::greasy::HairStruct::hairtd8  hairTestB9(curly::greasy::HairStruct::hairtd8 e) { return e; }
curly::greasy::HairStruct::hairtd9  hairTestBA(curly::greasy::HairStruct::hairtd9 e) { return e; }
curly::greasy::HairStruct::hairtdA  hairTestBB(curly::greasy::HairStruct::hairtdA e) { return e; }
const curly::greasy::HairStruct::hairtdA & hairTestBC(const curly::greasy::HairStruct::hairtdA &e) { return e; }

using curly::greasy::HairStruct;
HairStruct::hair                    hairTestC1(HairStruct::hair e) { return e; }
HairStruct::hairtd1                 hairTestC2(HairStruct::hairtd1 e) { return e; }
HairStruct::hairtd2                 hairTestC3(HairStruct::hairtd2 e) { return e; }
HairStruct::hairtd3                 hairTestC4(HairStruct::hairtd3 e) { return e; }
HairStruct::hairtd4                 hairTestC5(HairStruct::hairtd4 e) { return e; }
HairStruct::hairtd5                 hairTestC6(HairStruct::hairtd5 e) { return e; }
HairStruct::hairtd6                 hairTestC7(HairStruct::hairtd6 e) { return e; }
HairStruct::hairtd7                 hairTestC8(HairStruct::hairtd7 e) { return e; }
HairStruct::hairtd8                 hairTestC9(HairStruct::hairtd8 e) { return e; }
HairStruct::hairtd9                 hairTestCA(HairStruct::hairtd9 e) { return e; }
HairStruct::hairtdA                 hairTestCB(HairStruct::hairtdA e) { return e; }
const HairStruct::hairtdA &         hairTestCC(const HairStruct::hairtdA &e) { return e; }

namespace curly {
  namespace greasy {
    struct FirStruct : HairStruct {
      hair                          hairTestFir1(hair e) { return e; }
      hairtd1                       hairTestFir2(hairtd1 e) { return e; }
      hairtd2                       hairTestFir3(hairtd2 e) { return e; }
      hairtd3                       hairTestFir4(hairtd3 e) { return e; }
      hairtd4                       hairTestFir5(hairtd4 e) { return e; }
      hairtd5                       hairTestFir6(hairtd5 e) { return e; }
      hairtd6                       hairTestFir7(hairtd6 e) { return e; }
      hairtd7                       hairTestFir8(hairtd7 e) { return e; }
      hairtd8                       hairTestFir9(hairtd8 e) { return e; }
      hairtd9                       hairTestFirA(hairtd9 e) { return e; }
      hairtdA                       hairTestFirB(hairtdA e) { return e; }
    };
  }
}

struct Obscure {
  enum Zero {};
  enum One {one};
  enum Two {two, twoagain};
#if defined(SWIG)
  // g++-4.3 warns about this
  typedef enum Empty {};
#endif
  typedef enum {} AlsoEmpty;
};

// Unnamed enum instance
extern "C" {
enum { globalinstance1, globalinstance2, globalinstance3 = 30 } GlobalInstance;
}

struct Instances {
  enum { memberinstance1, memberinstance2, memberinstance3 = 300 } MemberInstance;
  Instances() : MemberInstance(memberinstance3) {}
};



struct IgnoreTest {
  enum IgnoreA { ignoreA_zero, ignoreA_one, ignoreA_two, ignoreA_three, ignoreA_ten=10, ignoreA_eleven, ignoreA_twelve, ignoreA_thirteen, ignoreA_fourteen, ignoreA_twenty=20, ignoreA_thirty=30, ignoreA_thirty_one, ignoreA_thirty_two, ignoreA_thirty_three };
  enum IgnoreB { ignoreB_ten=10, ignoreB_eleven, ignoreB_twelve, ignoreB_twenty=20, ignoreB_thirty=30, ignoreB_thirty_one, ignoreB_thirty_two, ignoreB_forty=40, ignoreB_forty_one, ignoreB_forty_two };
  enum IgnoreC { ignoreC_ten=10, ignoreC_eleven, ignoreC_twelve, ignoreC_twenty=20, ignoreC_thirty=30, ignoreC_thirty_one, ignoreC_thirty_two, ignoreC_forty=40, ignoreC_forty_one, ignoreC_forty_two };
  enum IgnoreD { ignoreD_ten=10, ignoreD_twenty=20, ignoreD_twenty_one, ignoreD_twenty_two };
  enum IgnoreE { ignoreE_zero, ignoreE_twenty=20, ignoreE_twenty_one, ignoreE_twenty_two };
};

IgnoreTest::IgnoreA ignoreATest(IgnoreTest::IgnoreA n) { return n; }
IgnoreTest::IgnoreB ignoreBTest(IgnoreTest::IgnoreB n) { return n; }
IgnoreTest::IgnoreC ignoreCTest(IgnoreTest::IgnoreC n) { return n; }
IgnoreTest::IgnoreD ignoreDTest(IgnoreTest::IgnoreD n) { return n; }
IgnoreTest::IgnoreE ignoreETest(IgnoreTest::IgnoreE n) { return n; }


namespace RepeatSpace {
typedef enum
{
   one = 1,
   initial = one,
   two,
   three,
   llast = three,
   end = llast
} repeat;
repeat repeatTest(repeat e) { return e; }
}


namespace DifferentSpace {
enum DifferentTypes {
  typeint = 10,
  typeboolfalse = false,
  typebooltrue = true,
  typebooltwo,
  typechar = 'C',
  typedefaultint
};
DifferentTypes differentTypesTest(DifferentTypes n) { return n; }

enum {
  global_typeint = 10,
  global_typeboolfalse = false,
  global_typebooltrue = true,
  global_typebooltwo,
  global_typechar = 'C',
  global_typedefaultint
};
int globalDifferentTypesTest(int n) { return n; }
}



SWIGINTERNINLINE SV *
SWIG_From_bool  SWIG_PERL_DECL_ARGS_1(bool value)
{
  return boolSV(value);
}


SWIGINTERNINLINE SV *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  SV *obj = sv_newmortal();
  if (carray) {
    sv_setpvn(obj, carray, size);
  } else {
    sv_setsv(obj, &PL_sv_undef);
  }
  return obj;
}


SWIGINTERNINLINE SV *
SWIG_From_char  SWIG_PERL_DECL_ARGS_1(char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


namespace DifferentSpace {
enum DifferentTypesNoConst {
  typeint_noconst = 10,
  typeboolfalse_noconst = false,
  typebooltrue_noconst = true,
  typebooltwo_noconst,
  typechar_noconst = 'C',
  typedefaultint_noconst
};

enum {
  global_typeint_noconst = 10,
  global_typeboolfalse_noconst = false,
  global_typebooltrue_noconst = true,
  global_typebooltwo_noconst,
  global_typechar_noconst = 'C',
  global_typedefaultint_noconst
};
}


#ifdef __cplusplus
extern "C" {
#endif

#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_enum_thorough_var::
class _wrap_enum_thorough_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *SWIGUNUSEDPARM(sv), MAGIC *SWIGUNUSEDPARM(mg)) {
    MAGIC_PPERL
    croak("Value is read-only.");
    return 0;
}
SWIGCLASS_STATIC int _wrap_myColour_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  if (sizeof(int) != sizeof(myColour)) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""arch, read-only myColour""' of type '""colour""'");
  }  else {
    int ecode = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, reinterpret_cast< int* >(&myColour));
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in variable '""myColour""' of type '""colour""'");
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_myColour_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(myColour)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_GlobalInstance_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  if (sizeof(int) != sizeof(GlobalInstance)) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""arch, read-only GlobalInstance""' of type '""enum $unnamed5$""'");
  }  else {
    int ecode = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, reinterpret_cast< int* >(&GlobalInstance));
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in variable '""GlobalInstance""' of type '""enum $unnamed5$""'");
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_GlobalInstance_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GlobalInstance)))  ;
  return 1;
}




#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_new_AnonStruct) {
  {
    int argvi = 0;
    AnonSpace::AnonStruct *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_AnonStruct();");
    }
    result = (AnonSpace::AnonStruct *)new AnonSpace::AnonStruct();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AnonSpace__AnonStruct, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_AnonStruct) {
  {
    AnonSpace::AnonStruct *arg1 = (AnonSpace::AnonStruct *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_AnonStruct(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_AnonSpace__AnonStruct, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AnonStruct" "', argument " "1"" of type '" "AnonSpace::AnonStruct *""'"); 
    }
    arg1 = reinterpret_cast< AnonSpace::AnonStruct * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_colourTest1) {
  {
    colour arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    colour result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: colourTest1(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "colourTest1" "', argument " "1"" of type '" "colour""'");
    } 
    arg1 = static_cast< colour >(val1);
    result = (colour)colourTest1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_colourTest2) {
  {
    enum colour arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum colour result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: colourTest2(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "colourTest2" "', argument " "1"" of type '" "enum colour""'");
    } 
    arg1 = static_cast< enum colour >(val1);
    result = (enum colour)colourTest2(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_colourTest3) {
  {
    colour arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    colour result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: colourTest3(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "colourTest3" "', argument " "1"" of type '" "colour""'");
    } 
    arg1 = static_cast< colour >(val1);
    result = (colour)colourTest3(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_colourTest4) {
  {
    enum colour arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum colour result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: colourTest4(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "colourTest4" "', argument " "1"" of type '" "enum colour""'");
    } 
    arg1 = static_cast< enum colour >(val1);
    result = (enum colour)colourTest4(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SpeedClass_speedTest0) {
  {
    SpeedClass *arg1 = (SpeedClass *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SpeedClass_speedTest0(self,s);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest0" "', argument " "1"" of type '" "SpeedClass *""'"); 
    }
    arg1 = reinterpret_cast< SpeedClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest0" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    result = (int)(arg1)->speedTest0(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SpeedClass_speedTest1) {
  {
    SpeedClass *arg1 = (SpeedClass *) 0 ;
    SpeedClass::speed arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    SpeedClass::speed result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SpeedClass_speedTest1(self,s);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest1" "', argument " "1"" of type '" "SpeedClass *""'"); 
    }
    arg1 = reinterpret_cast< SpeedClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest1" "', argument " "2"" of type '" "SpeedClass::speed""'");
    } 
    arg2 = static_cast< SpeedClass::speed >(val2);
    result = (SpeedClass::speed)(arg1)->speedTest1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SpeedClass_speedTest2) {
  {
    SpeedClass *arg1 = (SpeedClass *) 0 ;
    enum SpeedClass::speed arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum SpeedClass::speed result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SpeedClass_speedTest2(self,s);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest2" "', argument " "1"" of type '" "SpeedClass *""'"); 
    }
    arg1 = reinterpret_cast< SpeedClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest2" "', argument " "2"" of type '" "enum SpeedClass::speed""'");
    } 
    arg2 = static_cast< enum SpeedClass::speed >(val2);
    result = (enum SpeedClass::speed)(arg1)->speedTest2(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SpeedClass_speedTest3) {
  {
    SpeedClass *arg1 = (SpeedClass *) 0 ;
    SpeedClass::speed arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    SpeedClass::speed result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SpeedClass_speedTest3(self,s);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest3" "', argument " "1"" of type '" "SpeedClass *""'"); 
    }
    arg1 = reinterpret_cast< SpeedClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest3" "', argument " "2"" of type '" "SpeedClass::speed""'");
    } 
    arg2 = static_cast< SpeedClass::speed >(val2);
    result = (SpeedClass::speed)(arg1)->speedTest3(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SpeedClass_speedTest4) {
  {
    SpeedClass *arg1 = (SpeedClass *) 0 ;
    enum SpeedClass::speed arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum SpeedClass::speed result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SpeedClass_speedTest4(self,s);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest4" "', argument " "1"" of type '" "SpeedClass *""'"); 
    }
    arg1 = reinterpret_cast< SpeedClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest4" "', argument " "2"" of type '" "enum SpeedClass::speed""'");
    } 
    arg2 = static_cast< enum SpeedClass::speed >(val2);
    result = (enum SpeedClass::speed)(arg1)->speedTest4(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SpeedClass_speedTest5) {
  {
    SpeedClass *arg1 = (SpeedClass *) 0 ;
    SpeedClass::speedtd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    SpeedClass::speedtd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SpeedClass_speedTest5(self,s);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest5" "', argument " "1"" of type '" "SpeedClass *""'"); 
    }
    arg1 = reinterpret_cast< SpeedClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest5" "', argument " "2"" of type '" "SpeedClass::speedtd1""'");
    } 
    arg2 = static_cast< SpeedClass::speedtd1 >(val2);
    result = (SpeedClass::speedtd1)(arg1)->speedTest5(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SpeedClass_speedTest6) {
  {
    SpeedClass *arg1 = (SpeedClass *) 0 ;
    SpeedClass::speedtd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    SpeedClass::speedtd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SpeedClass_speedTest6(self,s);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest6" "', argument " "1"" of type '" "SpeedClass *""'"); 
    }
    arg1 = reinterpret_cast< SpeedClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest6" "', argument " "2"" of type '" "SpeedClass::speedtd1""'");
    } 
    arg2 = static_cast< SpeedClass::speedtd1 >(val2);
    result = (SpeedClass::speedtd1)(arg1)->speedTest6(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SpeedClass_speedTest7) {
  {
    SpeedClass *arg1 = (SpeedClass *) 0 ;
    SpeedClass::speed *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 ;
    SpeedClass::speed temp2 ;
    int argvi = 0;
    SpeedClass::speed *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SpeedClass_speedTest7(self,s);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest7" "', argument " "1"" of type '" "SpeedClass *""'"); 
    }
    arg1 = reinterpret_cast< SpeedClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest7" "', argument " "2"" of type '" "SpeedClass::speed const &""'");
    } else {
      temp2 = static_cast< SpeedClass::speed >(val2);
      arg2 = &temp2;
    }
    result = (SpeedClass::speed *) &(arg1)->speedTest7((SpeedClass::speed const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SpeedClass_speedTest8) {
  {
    SpeedClass *arg1 = (SpeedClass *) 0 ;
    enum SpeedClass::speed *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 ;
    enum SpeedClass::speed temp2 ;
    int argvi = 0;
    enum SpeedClass::speed *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SpeedClass_speedTest8(self,s);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_speedTest8" "', argument " "1"" of type '" "SpeedClass *""'"); 
    }
    arg1 = reinterpret_cast< SpeedClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_speedTest8" "', argument " "2"" of type '" "enum SpeedClass::speed const &""'");
    } else {
      temp2 = static_cast< enum SpeedClass::speed >(val2);
      arg2 = &temp2;
    }
    result = (enum SpeedClass::speed *) &(arg1)->speedTest8((enum SpeedClass::speed const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SpeedClass_myColour2_get) {
  {
    SpeedClass *arg1 = (SpeedClass *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    colour result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SpeedClass_myColour2_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_myColour2_get" "', argument " "1"" of type '" "SpeedClass *""'"); 
    }
    arg1 = reinterpret_cast< SpeedClass * >(argp1);
    result = (colour)(colour) ((arg1)->myColour2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SpeedClass_mySpeedtd1_set) {
  {
    SpeedClass *arg1 = (SpeedClass *) 0 ;
    SpeedClass::speedtd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SpeedClass_mySpeedtd1_set(self,mySpeedtd1);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_mySpeedtd1_set" "', argument " "1"" of type '" "SpeedClass *""'"); 
    }
    arg1 = reinterpret_cast< SpeedClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpeedClass_mySpeedtd1_set" "', argument " "2"" of type '" "SpeedClass::speedtd1""'");
    } 
    arg2 = static_cast< SpeedClass::speedtd1 >(val2);
    if (arg1) (arg1)->mySpeedtd1 = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SpeedClass_mySpeedtd1_get) {
  {
    SpeedClass *arg1 = (SpeedClass *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    SpeedClass::speedtd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SpeedClass_mySpeedtd1_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SpeedClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpeedClass_mySpeedtd1_get" "', argument " "1"" of type '" "SpeedClass *""'"); 
    }
    arg1 = reinterpret_cast< SpeedClass * >(argp1);
    result = (SpeedClass::speedtd1) ((arg1)->mySpeedtd1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SpeedClass) {
  {
    int argvi = 0;
    SpeedClass *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_SpeedClass();");
    }
    result = (SpeedClass *)new SpeedClass();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpeedClass, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SpeedClass) {
  {
    SpeedClass *arg1 = (SpeedClass *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SpeedClass(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SpeedClass, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpeedClass" "', argument " "1"" of type '" "SpeedClass *""'"); 
    }
    arg1 = reinterpret_cast< SpeedClass * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_speedTest0) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: speedTest0(s);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "speedTest0" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    result = (int)speedTest0(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_speedTest1) {
  {
    SpeedClass::speed arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    SpeedClass::speed result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: speedTest1(s);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "speedTest1" "', argument " "1"" of type '" "SpeedClass::speed""'");
    } 
    arg1 = static_cast< SpeedClass::speed >(val1);
    result = (SpeedClass::speed)speedTest1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_speedTest2) {
  {
    enum SpeedClass::speed arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum SpeedClass::speed result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: speedTest2(s);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "speedTest2" "', argument " "1"" of type '" "enum SpeedClass::speed""'");
    } 
    arg1 = static_cast< enum SpeedClass::speed >(val1);
    result = (enum SpeedClass::speed)speedTest2(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_speedTest3) {
  {
    SpeedClass::speed arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    SpeedClass::speed result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: speedTest3(s);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "speedTest3" "', argument " "1"" of type '" "SpeedClass::speed""'");
    } 
    arg1 = static_cast< SpeedClass::speed >(val1);
    result = (SpeedClass::speed)speedTest3(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_speedTest4) {
  {
    enum SpeedClass::speed arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum SpeedClass::speed result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: speedTest4(s);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "speedTest4" "', argument " "1"" of type '" "enum SpeedClass::speed""'");
    } 
    arg1 = static_cast< enum SpeedClass::speed >(val1);
    result = (enum SpeedClass::speed)speedTest4(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_speedTest5) {
  {
    SpeedClass::speed *arg1 = 0 ;
    int val1 ;
    int ecode1 ;
    SpeedClass::speed temp1 ;
    int argvi = 0;
    SpeedClass::speed *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: speedTest5(s);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "speedTest5" "', argument " "1"" of type '" "SpeedClass::speed const &""'");
    } else {
      temp1 = static_cast< SpeedClass::speed >(val1);
      arg1 = &temp1;
    }
    result = (SpeedClass::speed *) &speedTest5((enum SpeedClass::speed const &)*arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_namedanonTest1) {
  {
    namedanon arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    namedanon result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: namedanonTest1(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "namedanonTest1" "', argument " "1"" of type '" "namedanon""'");
    } 
    arg1 = static_cast< namedanon >(val1);
    result = (namedanon)namedanonTest1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_twonamesTest1) {
  {
    twonames arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    twonames result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: twonamesTest1(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "twonamesTest1" "', argument " "1"" of type '" "twonames""'");
    } 
    arg1 = static_cast< twonames >(val1);
    result = (twonames)twonamesTest1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_twonamesTest2) {
  {
    twonamestag arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    twonamestag result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: twonamesTest2(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "twonamesTest2" "', argument " "1"" of type '" "twonamestag""'");
    } 
    arg1 = static_cast< twonamestag >(val1);
    result = (twonamestag)twonamesTest2(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_twonamesTest3) {
  {
    enum twonamestag arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum twonamestag result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: twonamesTest3(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "twonamesTest3" "', argument " "1"" of type '" "enum twonamestag""'");
    } 
    arg1 = static_cast< enum twonamestag >(val1);
    result = (enum twonamestag)twonamesTest3(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TwoNamesStruct_twonamesTest1) {
  {
    TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
    TwoNamesStruct::twonames arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TwoNamesStruct::twonames result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TwoNamesStruct_twonamesTest1(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TwoNamesStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoNamesStruct_twonamesTest1" "', argument " "1"" of type '" "TwoNamesStruct *""'"); 
    }
    arg1 = reinterpret_cast< TwoNamesStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoNamesStruct_twonamesTest1" "', argument " "2"" of type '" "TwoNamesStruct::twonames""'");
    } 
    arg2 = static_cast< TwoNamesStruct::twonames >(val2);
    result = (TwoNamesStruct::twonames)(arg1)->twonamesTest1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TwoNamesStruct_twonamesTest2) {
  {
    TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
    TwoNamesStruct::twonamestag arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TwoNamesStruct::twonamestag result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TwoNamesStruct_twonamesTest2(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TwoNamesStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoNamesStruct_twonamesTest2" "', argument " "1"" of type '" "TwoNamesStruct *""'"); 
    }
    arg1 = reinterpret_cast< TwoNamesStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoNamesStruct_twonamesTest2" "', argument " "2"" of type '" "TwoNamesStruct::twonamestag""'");
    } 
    arg2 = static_cast< TwoNamesStruct::twonamestag >(val2);
    result = (TwoNamesStruct::twonamestag)(arg1)->twonamesTest2(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TwoNamesStruct_twonamesTest3) {
  {
    TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
    enum TwoNamesStruct::twonamestag arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum TwoNamesStruct::twonamestag result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TwoNamesStruct_twonamesTest3(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TwoNamesStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwoNamesStruct_twonamesTest3" "', argument " "1"" of type '" "TwoNamesStruct *""'"); 
    }
    arg1 = reinterpret_cast< TwoNamesStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TwoNamesStruct_twonamesTest3" "', argument " "2"" of type '" "enum TwoNamesStruct::twonamestag""'");
    } 
    arg2 = static_cast< enum TwoNamesStruct::twonamestag >(val2);
    result = (enum TwoNamesStruct::twonamestag)(arg1)->twonamesTest3(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TwoNamesStruct) {
  {
    int argvi = 0;
    TwoNamesStruct *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TwoNamesStruct();");
    }
    result = (TwoNamesStruct *)new TwoNamesStruct();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TwoNamesStruct, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_TwoNamesStruct) {
  {
    TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TwoNamesStruct(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TwoNamesStruct, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TwoNamesStruct" "', argument " "1"" of type '" "TwoNamesStruct *""'"); 
    }
    arg1 = reinterpret_cast< TwoNamesStruct * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_namedanonspaceTest1) {
  {
    AnonSpace::namedanonspace arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    AnonSpace::namedanonspace result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: namedanonspaceTest1(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "namedanonspaceTest1" "', argument " "1"" of type '" "AnonSpace::namedanonspace""'");
    } 
    arg1 = static_cast< AnonSpace::namedanonspace >(val1);
    result = (AnonSpace::namedanonspace)AnonSpace::namedanonspaceTest1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_namedanonspaceTest2) {
  {
    AnonSpace::namedanonspace arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    AnonSpace::namedanonspace result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: namedanonspaceTest2(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "namedanonspaceTest2" "', argument " "1"" of type '" "AnonSpace::namedanonspace""'");
    } 
    arg1 = static_cast< AnonSpace::namedanonspace >(val1);
    result = (AnonSpace::namedanonspace)AnonSpace::namedanonspaceTest2(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_namedanonspaceTest3) {
  {
    AnonSpace::namedanonspace arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    AnonSpace::namedanonspace result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: namedanonspaceTest3(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "namedanonspaceTest3" "', argument " "1"" of type '" "AnonSpace::namedanonspace""'");
    } 
    arg1 = static_cast< AnonSpace::namedanonspace >(val1);
    result = (AnonSpace::namedanonspace)namedanonspaceTest3(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_namedanonspaceTest4) {
  {
    AnonSpace::namedanonspace arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    AnonSpace::namedanonspace result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: namedanonspaceTest4(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "namedanonspaceTest4" "', argument " "1"" of type '" "AnonSpace::namedanonspace""'");
    } 
    arg1 = static_cast< AnonSpace::namedanonspace >(val1);
    result = (AnonSpace::namedanonspace)namedanonspaceTest4(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsTest1) {
  {
    TemplateClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsTest1(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest1" "', argument " "1"" of type '" "TemplateClass< int >::scientists""'");
    } 
    arg1 = static_cast< TemplateClass< int >::scientists >(val1);
    result = (TemplateClass< int >::scientists)scientistsTest1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsTest2) {
  {
    TemplateClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsTest2(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest2" "', argument " "1"" of type '" "TemplateClass< int >::scientists""'");
    } 
    arg1 = static_cast< TemplateClass< int >::scientists >(val1);
    result = (TemplateClass< int >::scientists)scientistsTest2(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsTest3) {
  {
    enum TemplateClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsTest3(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest3" "', argument " "1"" of type '" "enum TemplateClass< int >::scientists""'");
    } 
    arg1 = static_cast< enum TemplateClass< int >::scientists >(val1);
    result = (enum TemplateClass< int >::scientists)scientistsTest3(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsTest4) {
  {
    enum TemplateClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsTest4(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest4" "', argument " "1"" of type '" "enum TemplateClass< int >::scientists""'");
    } 
    arg1 = static_cast< enum TemplateClass< int >::scientists >(val1);
    result = (enum TemplateClass< int >::scientists)scientistsTest4(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsTest5) {
  {
    TemplateClass< int >::scientiststd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientiststd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsTest5(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest5" "', argument " "1"" of type '" "TemplateClass< int >::scientiststd1""'");
    } 
    arg1 = static_cast< TemplateClass< int >::scientiststd1 >(val1);
    result = (TemplateClass< int >::scientiststd1)scientistsTest5(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsTest6) {
  {
    TemplateClass< int >::scientiststd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientiststd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsTest6(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest6" "', argument " "1"" of type '" "TemplateClass< int >::scientiststd2""'");
    } 
    arg1 = static_cast< TemplateClass< int >::scientiststd2 >(val1);
    result = (TemplateClass< int >::scientiststd2)scientistsTest6(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsTest7) {
  {
    TemplateClass< int >::scientiststd3 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientiststd3 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsTest7(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest7" "', argument " "1"" of type '" "TemplateClass< int >::scientiststd3""'");
    } 
    arg1 = static_cast< TemplateClass< int >::scientiststd3 >(val1);
    result = (TemplateClass< int >::scientiststd3)scientistsTest7(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsTest8) {
  {
    TemplateClass< int >::scientiststd3 *arg1 = 0 ;
    int val1 ;
    int ecode1 ;
    TemplateClass< int >::scientiststd3 temp1 ;
    int argvi = 0;
    TemplateClass< int >::scientiststd3 *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsTest8(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsTest8" "', argument " "1"" of type '" "TemplateClass< int >::scientiststd3 const &""'");
    } else {
      temp1 = static_cast< TemplateClass< int >::scientiststd3 >(val1);
      arg1 = &temp1;
    }
    result = (TemplateClass< int >::scientiststd3 *) &scientistsTest8((enum TemplateClass< int >::scientists const &)*arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameTest1) {
  {
    Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameTest1(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest1" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientists >(val1);
    result = (Name::TClass< int >::scientists)Name::scientistsNameTest1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameTest2) {
  {
    Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameTest2(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest2" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientists >(val1);
    result = (Name::TClass< int >::scientists)Name::scientistsNameTest2(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameTest3) {
  {
    enum Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameTest3(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest3" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
    result = (enum Name::TClass< int >::scientists)Name::scientistsNameTest3(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameTest4) {
  {
    enum Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameTest4(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest4" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
    result = (enum Name::TClass< int >::scientists)Name::scientistsNameTest4(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameTest5) {
  {
    Name::TClass< int >::scientiststd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameTest5(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest5" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd1""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientiststd1 >(val1);
    result = (Name::TClass< int >::scientiststd1)Name::scientistsNameTest5(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameTest6) {
  {
    Name::TClass< int >::scientiststd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameTest6(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest6" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd2""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientiststd2 >(val1);
    result = (Name::TClass< int >::scientiststd2)Name::scientistsNameTest6(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameTest7) {
  {
    Name::TClass< int >::scientiststd3 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd3 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameTest7(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameTest7" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd3""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientiststd3 >(val1);
    result = (Name::TClass< int >::scientiststd3)Name::scientistsNameTest7(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTest1) {
  {
    Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTest1(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest1" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientists >(val1);
    result = (Name::TClass< int >::scientists)Name::scientistsNameSpaceTest1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTest2) {
  {
    Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTest2(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest2" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientists >(val1);
    result = (Name::TClass< int >::scientists)Name::scientistsNameSpaceTest2(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTest3) {
  {
    enum Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTest3(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest3" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
    result = (enum Name::TClass< int >::scientists)Name::scientistsNameSpaceTest3(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTest4) {
  {
    enum Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTest4(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest4" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
    result = (enum Name::TClass< int >::scientists)Name::scientistsNameSpaceTest4(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTest5) {
  {
    Name::TClass< int >::scientiststd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTest5(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest5" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd1""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientiststd1 >(val1);
    result = (Name::TClass< int >::scientiststd1)Name::scientistsNameSpaceTest5(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTest6) {
  {
    Name::TClass< int >::scientiststd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTest6(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest6" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd2""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientiststd2 >(val1);
    result = (Name::TClass< int >::scientiststd2)Name::scientistsNameSpaceTest6(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTest7) {
  {
    Name::TClass< int >::scientiststd3 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd3 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTest7(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest7" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd3""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientiststd3 >(val1);
    result = (Name::TClass< int >::scientiststd3)Name::scientistsNameSpaceTest7(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTest8) {
  {
    Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTest8(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest8" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientists >(val1);
    result = (Name::TClass< int >::scientists)scientistsNameSpaceTest8(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTest9) {
  {
    Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTest9(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTest9" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientists >(val1);
    result = (Name::TClass< int >::scientists)scientistsNameSpaceTest9(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTestA) {
  {
    enum Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTestA(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestA" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
    result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestA(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTestB) {
  {
    enum Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTestB(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestB" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
    result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestB(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTestC) {
  {
    Name::TClass< int >::scientiststd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTestC(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestC" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd1""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientiststd1 >(val1);
    result = (Name::TClass< int >::scientiststd1)scientistsNameSpaceTestC(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTestD) {
  {
    Name::TClass< int >::scientiststd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTestD(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestD" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd2""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientiststd2 >(val1);
    result = (Name::TClass< int >::scientiststd2)scientistsNameSpaceTestD(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTestE) {
  {
    Name::TClass< int >::scientiststd3 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd3 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTestE(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestE" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd3""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientiststd3 >(val1);
    result = (Name::TClass< int >::scientiststd3)scientistsNameSpaceTestE(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTestF) {
  {
    Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTestF(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestF" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientists >(val1);
    result = (Name::TClass< int >::scientists)scientistsNameSpaceTestF(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTestG) {
  {
    Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTestG(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestG" "', argument " "1"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientists >(val1);
    result = (Name::TClass< int >::scientists)scientistsNameSpaceTestG(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTestH) {
  {
    enum Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTestH(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestH" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
    result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestH(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTestI) {
  {
    enum Name::TClass< int >::scientists arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTestI(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestI" "', argument " "1"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg1 = static_cast< enum Name::TClass< int >::scientists >(val1);
    result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestI(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTestJ) {
  {
    Name::TClass< int >::scientiststd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTestJ(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestJ" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd1""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientiststd1 >(val1);
    result = (Name::TClass< int >::scientiststd1)scientistsNameSpaceTestJ(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTestK) {
  {
    Name::TClass< int >::scientiststd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTestK(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestK" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd2""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientiststd2 >(val1);
    result = (Name::TClass< int >::scientiststd2)scientistsNameSpaceTestK(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_scientistsNameSpaceTestL) {
  {
    Name::TClass< int >::scientiststd3 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd3 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: scientistsNameSpaceTestL(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "scientistsNameSpaceTestL" "', argument " "1"" of type '" "Name::TClass< int >::scientiststd3""'");
    } 
    arg1 = static_cast< Name::TClass< int >::scientiststd3 >(val1);
    result = (Name::TClass< int >::scientiststd3)scientistsNameSpaceTestL(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTest1) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTest1(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest1" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest1" "', argument " "2"" of type '" "TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< TemplateClass< int >::scientists >(val2);
    result = (TemplateClass< int >::scientists)(arg1)->scientistsTest1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTest2) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    enum TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTest2(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest2" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest2" "', argument " "2"" of type '" "enum TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< enum TemplateClass< int >::scientists >(val2);
    result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest2(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTest3) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTest3(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest3" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest3" "', argument " "2"" of type '" "TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< TemplateClass< int >::scientists >(val2);
    result = (TemplateClass< int >::scientists)(arg1)->scientistsTest3(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTest4) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    enum TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTest4(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest4" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest4" "', argument " "2"" of type '" "enum TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< enum TemplateClass< int >::scientists >(val2);
    result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest4(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTest5) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTest5(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest5" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest5" "', argument " "2"" of type '" "TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< TemplateClass< int >::scientists >(val2);
    result = (TemplateClass< int >::scientists)(arg1)->scientistsTest5(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTest6) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTest6(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest6" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest6" "', argument " "2"" of type '" "TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< TemplateClass< int >::scientists >(val2);
    result = (TemplateClass< int >::scientists)(arg1)->scientistsTest6(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTest7) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    enum TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTest7(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest7" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest7" "', argument " "2"" of type '" "enum TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< enum TemplateClass< int >::scientists >(val2);
    result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest7(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTest8) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    enum TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTest8(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest8" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest8" "', argument " "2"" of type '" "enum TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< enum TemplateClass< int >::scientists >(val2);
    result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest8(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTest9) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTest9(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTest9" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTest9" "', argument " "2"" of type '" "TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< TemplateClass< int >::scientists >(val2);
    result = (TemplateClass< int >::scientists)(arg1)->scientistsTest9(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTestB) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTestB(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestB" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestB" "', argument " "2"" of type '" "TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< TemplateClass< int >::scientists >(val2);
    result = (TemplateClass< int >::scientists)(arg1)->scientistsTestB(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTestD) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    TemplateClass< int >::scientiststd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientiststd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTestD(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestD" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestD" "', argument " "2"" of type '" "TemplateClass< int >::scientiststd1""'");
    } 
    arg2 = static_cast< TemplateClass< int >::scientiststd1 >(val2);
    result = (TemplateClass< int >::scientiststd1)(arg1)->scientistsTestD(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTestE) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    TemplateClass< int >::scientiststd2 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientiststd2 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTestE(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestE" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestE" "', argument " "2"" of type '" "TemplateClass< int >::scientiststd2""'");
    } 
    arg2 = static_cast< TemplateClass< int >::scientiststd2 >(val2);
    result = (TemplateClass< int >::scientiststd2)(arg1)->scientistsTestE(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTestF) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    TemplateClass< int >::scientiststd3 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientiststd3 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTestF(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestF" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestF" "', argument " "2"" of type '" "TemplateClass< int >::scientiststd3""'");
    } 
    arg2 = static_cast< TemplateClass< int >::scientiststd3 >(val2);
    result = (TemplateClass< int >::scientiststd3)(arg1)->scientistsTestF(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTestG) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    TemplateClass< int >::scientiststd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientiststd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTestG(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestG" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestG" "', argument " "2"" of type '" "TemplateClass< int >::scientiststd1""'");
    } 
    arg2 = static_cast< TemplateClass< int >::scientiststd1 >(val2);
    result = (TemplateClass< int >::scientiststd1)(arg1)->scientistsTestG(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTestH) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    TemplateClass< int >::scientiststd2 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientiststd2 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTestH(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestH" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestH" "', argument " "2"" of type '" "TemplateClass< int >::scientiststd2""'");
    } 
    arg2 = static_cast< TemplateClass< int >::scientiststd2 >(val2);
    result = (TemplateClass< int >::scientiststd2)(arg1)->scientistsTestH(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTestI) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    TemplateClass< int >::scientiststd3 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TemplateClass< int >::scientiststd3 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTestI(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestI" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestI" "', argument " "2"" of type '" "TemplateClass< int >::scientiststd3""'");
    } 
    arg2 = static_cast< TemplateClass< int >::scientiststd3 >(val2);
    result = (TemplateClass< int >::scientiststd3)(arg1)->scientistsTestI(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TemplateClassInt_scientistsTestJ) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    TemplateClass< int >::scientists *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 ;
    TemplateClass< int >::scientists temp2 ;
    int argvi = 0;
    TemplateClass< int >::scientists *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TemplateClassInt_scientistsTestJ(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TemplateClassInt_scientistsTestJ" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TemplateClassInt_scientistsTestJ" "', argument " "2"" of type '" "TemplateClass< int >::scientists const &""'");
    } else {
      temp2 = static_cast< TemplateClass< int >::scientists >(val2);
      arg2 = &temp2;
    }
    result = (TemplateClass< int >::scientists *) &(arg1)->scientistsTestJ((TemplateClass< int >::scientists const &)*arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TemplateClassInt) {
  {
    int argvi = 0;
    TemplateClass< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TemplateClassInt();");
    }
    result = (TemplateClass< int > *)new TemplateClass< int >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TemplateClassT_int_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_TemplateClassInt) {
  {
    TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TemplateClassInt(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TemplateClassT_int_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TemplateClassInt" "', argument " "1"" of type '" "TemplateClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< TemplateClass< int > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTest1) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTest1(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest1" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest1" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientists >(val2);
    result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTest2) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    enum Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTest2(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest2" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest2" "', argument " "2"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< enum Name::TClass< int >::scientists >(val2);
    result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest2(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTest3) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTest3(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest3" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest3" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientists >(val2);
    result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest3(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTest4) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    enum Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTest4(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest4" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest4" "', argument " "2"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< enum Name::TClass< int >::scientists >(val2);
    result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest4(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTest5) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTest5(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest5" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest5" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientists >(val2);
    result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest5(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTest6) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTest6(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest6" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest6" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientists >(val2);
    result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest6(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTest7) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    enum Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTest7(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest7" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest7" "', argument " "2"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< enum Name::TClass< int >::scientists >(val2);
    result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest7(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTest8) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    enum Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTest8(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest8" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest8" "', argument " "2"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< enum Name::TClass< int >::scientists >(val2);
    result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest8(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTest9) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTest9(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTest9" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTest9" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientists >(val2);
    result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest9(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTestB) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTestB(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestB" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestB" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientists >(val2);
    result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTestB(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTestD) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientiststd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTestD(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestD" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestD" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd1""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientiststd1 >(val2);
    result = (Name::TClass< int >::scientiststd1)(arg1)->scientistsNameTestD(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTestE) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientiststd2 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd2 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTestE(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestE" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestE" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd2""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientiststd2 >(val2);
    result = (Name::TClass< int >::scientiststd2)(arg1)->scientistsNameTestE(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTestF) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientiststd3 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd3 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTestF(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestF" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestF" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd3""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientiststd3 >(val2);
    result = (Name::TClass< int >::scientiststd3)(arg1)->scientistsNameTestF(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTestG) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientiststd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTestG(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestG" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestG" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd1""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientiststd1 >(val2);
    result = (Name::TClass< int >::scientiststd1)(arg1)->scientistsNameTestG(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTestH) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientiststd2 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd2 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTestH(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestH" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestH" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd2""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientiststd2 >(val2);
    result = (Name::TClass< int >::scientiststd2)(arg1)->scientistsNameTestH(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameTestI) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientiststd3 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd3 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameTestI(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameTestI" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameTestI" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd3""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientiststd3 >(val2);
    result = (Name::TClass< int >::scientiststd3)(arg1)->scientistsNameTestI(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameSpaceTest1) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameSpaceTest1(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest1" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest1" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientists >(val2);
    result = (Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameSpaceTest2) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameSpaceTest2(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest2" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest2" "', argument " "2"" of type '" "Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientists >(val2);
    result = (Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest2(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameSpaceTest3) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    enum Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameSpaceTest3(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest3" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest3" "', argument " "2"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< enum Name::TClass< int >::scientists >(val2);
    result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest3(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameSpaceTest4) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    enum Name::TClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum Name::TClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameSpaceTest4(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest4" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest4" "', argument " "2"" of type '" "enum Name::TClass< int >::scientists""'");
    } 
    arg2 = static_cast< enum Name::TClass< int >::scientists >(val2);
    result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest4(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameSpaceTest5) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientiststd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameSpaceTest5(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest5" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest5" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd1""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientiststd1 >(val2);
    result = (Name::TClass< int >::scientiststd1)(arg1)->scientistsNameSpaceTest5(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameSpaceTest6) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientiststd2 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd2 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameSpaceTest6(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest6" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest6" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd2""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientiststd2 >(val2);
    result = (Name::TClass< int >::scientiststd2)(arg1)->scientistsNameSpaceTest6(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsNameSpaceTest7) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    Name::TClass< int >::scientiststd3 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    Name::TClass< int >::scientiststd3 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsNameSpaceTest7(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsNameSpaceTest7" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsNameSpaceTest7" "', argument " "2"" of type '" "Name::TClass< int >::scientiststd3""'");
    } 
    arg2 = static_cast< Name::TClass< int >::scientiststd3 >(val2);
    result = (Name::TClass< int >::scientiststd3)(arg1)->scientistsNameSpaceTest7(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsOtherTest1) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    ::TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    ::TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsOtherTest1(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest1" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest1" "', argument " "2"" of type '" "::TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< ::TemplateClass< int >::scientists >(val2);
    result = (::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsOtherTest2) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    ::TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    ::TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsOtherTest2(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest2" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest2" "', argument " "2"" of type '" "::TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< ::TemplateClass< int >::scientists >(val2);
    result = (::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest2(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsOtherTest3) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    enum ::TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum ::TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsOtherTest3(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest3" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest3" "', argument " "2"" of type '" "enum ::TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< enum ::TemplateClass< int >::scientists >(val2);
    result = (enum ::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest3(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsOtherTest4) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    enum ::TemplateClass< int >::scientists arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum ::TemplateClass< int >::scientists result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsOtherTest4(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest4" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest4" "', argument " "2"" of type '" "enum ::TemplateClass< int >::scientists""'");
    } 
    arg2 = static_cast< enum ::TemplateClass< int >::scientists >(val2);
    result = (enum ::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest4(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsOtherTest5) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    ::TemplateClass< int >::scientiststd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    ::TemplateClass< int >::scientiststd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsOtherTest5(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest5" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest5" "', argument " "2"" of type '" "::TemplateClass< int >::scientiststd1""'");
    } 
    arg2 = static_cast< ::TemplateClass< int >::scientiststd1 >(val2);
    result = (::TemplateClass< int >::scientiststd1)(arg1)->scientistsOtherTest5(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsOtherTest6) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    ::TemplateClass< int >::scientiststd2 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    ::TemplateClass< int >::scientiststd2 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsOtherTest6(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest6" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest6" "', argument " "2"" of type '" "::TemplateClass< int >::scientiststd2""'");
    } 
    arg2 = static_cast< ::TemplateClass< int >::scientiststd2 >(val2);
    result = (::TemplateClass< int >::scientiststd2)(arg1)->scientistsOtherTest6(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TClassInt_scientistsOtherTest7) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    ::TemplateClass< int >::scientiststd3 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    ::TemplateClass< int >::scientiststd3 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TClassInt_scientistsOtherTest7(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TClassInt_scientistsOtherTest7" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TClassInt_scientistsOtherTest7" "', argument " "2"" of type '" "::TemplateClass< int >::scientiststd3""'");
    } 
    arg2 = static_cast< ::TemplateClass< int >::scientiststd3 >(val2);
    result = (::TemplateClass< int >::scientiststd3)(arg1)->scientistsOtherTest7(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TClassInt) {
  {
    int argvi = 0;
    Name::TClass< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TClassInt();");
    }
    result = (Name::TClass< int > *)new Name::TClass< int >();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Name__TClassT_int_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_TClassInt) {
  {
    Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TClassInt(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Name__TClassT_int_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TClassInt" "', argument " "1"" of type '" "Name::TClass< int > *""'"); 
    }
    arg1 = reinterpret_cast< Name::TClass< int > * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_renameTest1) {
  {
    old_name arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    old_name result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: renameTest1(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest1" "', argument " "1"" of type '" "old_name""'");
    } 
    arg1 = static_cast< old_name >(val1);
    result = (old_name)renameTest1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_renameTest2) {
  {
    old_nametd arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    old_nametd result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: renameTest2(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest2" "', argument " "1"" of type '" "old_nametd""'");
    } 
    arg1 = static_cast< old_nametd >(val1);
    result = (old_nametd)renameTest2(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_NewNameStruct_renameTest1) {
  {
    OldNameStruct *arg1 = (OldNameStruct *) 0 ;
    OldNameStruct::enumeration arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    OldNameStruct::enumeration result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: NewNameStruct_renameTest1(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_OldNameStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewNameStruct_renameTest1" "', argument " "1"" of type '" "OldNameStruct *""'"); 
    }
    arg1 = reinterpret_cast< OldNameStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewNameStruct_renameTest1" "', argument " "2"" of type '" "OldNameStruct::enumeration""'");
    } 
    arg2 = static_cast< OldNameStruct::enumeration >(val2);
    result = (OldNameStruct::enumeration)(arg1)->renameTest1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_NewNameStruct_renameTest2) {
  {
    OldNameStruct *arg1 = (OldNameStruct *) 0 ;
    OldNameStruct::enumeration arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    OldNameStruct::enumeration result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: NewNameStruct_renameTest2(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_OldNameStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewNameStruct_renameTest2" "', argument " "1"" of type '" "OldNameStruct *""'"); 
    }
    arg1 = reinterpret_cast< OldNameStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewNameStruct_renameTest2" "', argument " "2"" of type '" "OldNameStruct::enumeration""'");
    } 
    arg2 = static_cast< OldNameStruct::enumeration >(val2);
    result = (OldNameStruct::enumeration)(arg1)->renameTest2(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_NewNameStruct_renameTest3) {
  {
    OldNameStruct *arg1 = (OldNameStruct *) 0 ;
    OldNameStruct::simple arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    OldNameStruct::simple result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: NewNameStruct_renameTest3(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_OldNameStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewNameStruct_renameTest3" "', argument " "1"" of type '" "OldNameStruct *""'"); 
    }
    arg1 = reinterpret_cast< OldNameStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewNameStruct_renameTest3" "', argument " "2"" of type '" "OldNameStruct::simple""'");
    } 
    arg2 = static_cast< OldNameStruct::simple >(val2);
    result = (OldNameStruct::simple)(arg1)->renameTest3(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_NewNameStruct_renameTest4) {
  {
    OldNameStruct *arg1 = (OldNameStruct *) 0 ;
    OldNameStruct::doublename arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    OldNameStruct::doublename result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: NewNameStruct_renameTest4(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_OldNameStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewNameStruct_renameTest4" "', argument " "1"" of type '" "OldNameStruct *""'"); 
    }
    arg1 = reinterpret_cast< OldNameStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewNameStruct_renameTest4" "', argument " "2"" of type '" "OldNameStruct::doublename""'");
    } 
    arg2 = static_cast< OldNameStruct::doublename >(val2);
    result = (OldNameStruct::doublename)(arg1)->renameTest4(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_NewNameStruct_renameTest5) {
  {
    OldNameStruct *arg1 = (OldNameStruct *) 0 ;
    OldNameStruct::doublenametag arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    OldNameStruct::doublenametag result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: NewNameStruct_renameTest5(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_OldNameStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewNameStruct_renameTest5" "', argument " "1"" of type '" "OldNameStruct *""'"); 
    }
    arg1 = reinterpret_cast< OldNameStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewNameStruct_renameTest5" "', argument " "2"" of type '" "OldNameStruct::doublenametag""'");
    } 
    arg2 = static_cast< OldNameStruct::doublenametag >(val2);
    result = (OldNameStruct::doublenametag)(arg1)->renameTest5(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_NewNameStruct_renameTest6) {
  {
    OldNameStruct *arg1 = (OldNameStruct *) 0 ;
    OldNameStruct::singlename arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    OldNameStruct::singlename result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: NewNameStruct_renameTest6(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_OldNameStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NewNameStruct_renameTest6" "', argument " "1"" of type '" "OldNameStruct *""'"); 
    }
    arg1 = reinterpret_cast< OldNameStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NewNameStruct_renameTest6" "', argument " "2"" of type '" "OldNameStruct::singlename""'");
    } 
    arg2 = static_cast< OldNameStruct::singlename >(val2);
    result = (OldNameStruct::singlename)(arg1)->renameTest6(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_NewNameStruct) {
  {
    int argvi = 0;
    OldNameStruct *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_NewNameStruct();");
    }
    result = (OldNameStruct *)new OldNameStruct();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OldNameStruct, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_NewNameStruct) {
  {
    OldNameStruct *arg1 = (OldNameStruct *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_NewNameStruct(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_OldNameStruct, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NewNameStruct" "', argument " "1"" of type '" "OldNameStruct *""'"); 
    }
    arg1 = reinterpret_cast< OldNameStruct * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_renameTest3) {
  {
    OldNameStruct::enumeration arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    OldNameStruct::enumeration result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: renameTest3(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest3" "', argument " "1"" of type '" "OldNameStruct::enumeration""'");
    } 
    arg1 = static_cast< OldNameStruct::enumeration >(val1);
    result = (OldNameStruct::enumeration)renameTest3(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_renameTest4) {
  {
    OldNameStruct::simple arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    OldNameStruct::simple result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: renameTest4(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest4" "', argument " "1"" of type '" "OldNameStruct::simple""'");
    } 
    arg1 = static_cast< OldNameStruct::simple >(val1);
    result = (OldNameStruct::simple)renameTest4(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_renameTest5) {
  {
    OldNameStruct::doublename arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    OldNameStruct::doublename result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: renameTest5(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest5" "', argument " "1"" of type '" "OldNameStruct::doublename""'");
    } 
    arg1 = static_cast< OldNameStruct::doublename >(val1);
    result = (OldNameStruct::doublename)renameTest5(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_renameTest6) {
  {
    OldNameStruct::doublenametag arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    OldNameStruct::doublenametag result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: renameTest6(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest6" "', argument " "1"" of type '" "OldNameStruct::doublenametag""'");
    } 
    arg1 = static_cast< OldNameStruct::doublenametag >(val1);
    result = (OldNameStruct::doublenametag)renameTest6(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_renameTest7) {
  {
    OldNameStruct::singlename arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    OldNameStruct::singlename result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: renameTest7(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "renameTest7" "', argument " "1"" of type '" "OldNameStruct::singlename""'");
    } 
    arg1 = static_cast< OldNameStruct::singlename >(val1);
    result = (OldNameStruct::singlename)renameTest7(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTest1) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::trees arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::trees result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTest1(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest1" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest1" "', argument " "2"" of type '" "TreesClass::trees""'");
    } 
    arg2 = static_cast< TreesClass::trees >(val2);
    result = (TreesClass::trees)(arg1)->treesTest1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTest2) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTest2(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest2" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest2" "', argument " "2"" of type '" "TreesClass::treestd1""'");
    } 
    arg2 = static_cast< TreesClass::treestd1 >(val2);
    result = (TreesClass::treestd1)(arg1)->treesTest2(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTest3) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd2 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd2 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTest3(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest3" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest3" "', argument " "2"" of type '" "TreesClass::treestd2""'");
    } 
    arg2 = static_cast< TreesClass::treestd2 >(val2);
    result = (TreesClass::treestd2)(arg1)->treesTest3(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTest4) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd3 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd3 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTest4(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest4" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest4" "', argument " "2"" of type '" "TreesClass::treestd3""'");
    } 
    arg2 = static_cast< TreesClass::treestd3 >(val2);
    result = (TreesClass::treestd3)(arg1)->treesTest4(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTest5) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd4 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd4 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTest5(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest5" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest5" "', argument " "2"" of type '" "TreesClass::treestd4""'");
    } 
    arg2 = static_cast< TreesClass::treestd4 >(val2);
    result = (TreesClass::treestd4)(arg1)->treesTest5(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTest6) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd5 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd5 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTest6(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest6" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest6" "', argument " "2"" of type '" "TreesClass::treestd5""'");
    } 
    arg2 = static_cast< TreesClass::treestd5 >(val2);
    result = (TreesClass::treestd5)(arg1)->treesTest6(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTest7) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::trees arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::trees result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTest7(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest7" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest7" "', argument " "2"" of type '" "TreesClass::trees""'");
    } 
    arg2 = static_cast< TreesClass::trees >(val2);
    result = (TreesClass::trees)(arg1)->treesTest7(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTest8) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTest8(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest8" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest8" "', argument " "2"" of type '" "TreesClass::treestd1""'");
    } 
    arg2 = static_cast< TreesClass::treestd1 >(val2);
    result = (TreesClass::treestd1)(arg1)->treesTest8(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTest9) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd2 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd2 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTest9(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTest9" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTest9" "', argument " "2"" of type '" "TreesClass::treestd2""'");
    } 
    arg2 = static_cast< TreesClass::treestd2 >(val2);
    result = (TreesClass::treestd2)(arg1)->treesTest9(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestA) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd3 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd3 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestA(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestA" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestA" "', argument " "2"" of type '" "TreesClass::treestd3""'");
    } 
    arg2 = static_cast< TreesClass::treestd3 >(val2);
    result = (TreesClass::treestd3)(arg1)->treesTestA(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestB) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd4 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd4 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestB(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestB" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestB" "', argument " "2"" of type '" "TreesClass::treestd4""'");
    } 
    arg2 = static_cast< TreesClass::treestd4 >(val2);
    result = (TreesClass::treestd4)(arg1)->treesTestB(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestC) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd5 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd5 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestC(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestC" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestC" "', argument " "2"" of type '" "TreesClass::treestd5""'");
    } 
    arg2 = static_cast< TreesClass::treestd5 >(val2);
    result = (TreesClass::treestd5)(arg1)->treesTestC(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestD) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::trees arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::trees result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestD(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestD" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestD" "', argument " "2"" of type '" "TreesClass::trees""'");
    } 
    arg2 = static_cast< TreesClass::trees >(val2);
    result = (TreesClass::trees)(arg1)->treesTestD(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestE) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestE(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestE" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestE" "', argument " "2"" of type '" "TreesClass::treestd1""'");
    } 
    arg2 = static_cast< TreesClass::treestd1 >(val2);
    result = (TreesClass::treestd1)(arg1)->treesTestE(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestF) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd2 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd2 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestF(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestF" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestF" "', argument " "2"" of type '" "TreesClass::treestd2""'");
    } 
    arg2 = static_cast< TreesClass::treestd2 >(val2);
    result = (TreesClass::treestd2)(arg1)->treesTestF(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestG) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd3 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd3 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestG(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestG" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestG" "', argument " "2"" of type '" "TreesClass::treestd3""'");
    } 
    arg2 = static_cast< TreesClass::treestd3 >(val2);
    result = (TreesClass::treestd3)(arg1)->treesTestG(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestH) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd4 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd4 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestH(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestH" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestH" "', argument " "2"" of type '" "TreesClass::treestd4""'");
    } 
    arg2 = static_cast< TreesClass::treestd4 >(val2);
    result = (TreesClass::treestd4)(arg1)->treesTestH(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestI) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd5 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd5 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestI(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestI" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestI" "', argument " "2"" of type '" "TreesClass::treestd5""'");
    } 
    arg2 = static_cast< TreesClass::treestd5 >(val2);
    result = (TreesClass::treestd5)(arg1)->treesTestI(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestJ) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::trees arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::trees result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestJ(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestJ" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestJ" "', argument " "2"" of type '" "TreesClass::trees""'");
    } 
    arg2 = static_cast< TreesClass::trees >(val2);
    result = (TreesClass::trees)(arg1)->treesTestJ(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestK) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestK(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestK" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestK" "', argument " "2"" of type '" "TreesClass::treestd1""'");
    } 
    arg2 = static_cast< TreesClass::treestd1 >(val2);
    result = (TreesClass::treestd1)(arg1)->treesTestK(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestL) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd2 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd2 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestL(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestL" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestL" "', argument " "2"" of type '" "TreesClass::treestd2""'");
    } 
    arg2 = static_cast< TreesClass::treestd2 >(val2);
    result = (TreesClass::treestd2)(arg1)->treesTestL(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestM) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd3 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd3 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestM(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestM" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestM" "', argument " "2"" of type '" "TreesClass::treestd3""'");
    } 
    arg2 = static_cast< TreesClass::treestd3 >(val2);
    result = (TreesClass::treestd3)(arg1)->treesTestM(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestN) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd4 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd4 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestN(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestN" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestN" "', argument " "2"" of type '" "TreesClass::treestd4""'");
    } 
    arg2 = static_cast< TreesClass::treestd4 >(val2);
    result = (TreesClass::treestd4)(arg1)->treesTestN(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_TreesClass_treesTestO) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    TreesClass::treestd5 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    TreesClass::treestd5 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: TreesClass_treesTestO(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreesClass_treesTestO" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreesClass_treesTestO" "', argument " "2"" of type '" "TreesClass::treestd5""'");
    } 
    arg2 = static_cast< TreesClass::treestd5 >(val2);
    result = (TreesClass::treestd5)(arg1)->treesTestO(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_TreesClass) {
  {
    int argvi = 0;
    TreesClass *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_TreesClass();");
    }
    result = (TreesClass *)new TreesClass();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TreesClass, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_TreesClass) {
  {
    TreesClass *arg1 = (TreesClass *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_TreesClass(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_TreesClass, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreesClass" "', argument " "1"" of type '" "TreesClass *""'"); 
    }
    arg1 = reinterpret_cast< TreesClass * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTest1) {
  {
    TreesClass::trees arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::trees result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTest1(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest1" "', argument " "1"" of type '" "TreesClass::trees""'");
    } 
    arg1 = static_cast< TreesClass::trees >(val1);
    result = (TreesClass::trees)treesTest1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTest2) {
  {
    TreesClass::treestd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::treestd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTest2(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest2" "', argument " "1"" of type '" "TreesClass::treestd1""'");
    } 
    arg1 = static_cast< TreesClass::treestd1 >(val1);
    result = (TreesClass::treestd1)treesTest2(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTest3) {
  {
    TreesClass::treestd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::treestd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTest3(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest3" "', argument " "1"" of type '" "TreesClass::treestd2""'");
    } 
    arg1 = static_cast< TreesClass::treestd2 >(val1);
    result = (TreesClass::treestd2)treesTest3(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTest4) {
  {
    TreesClass::treestd3 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::treestd3 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTest4(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest4" "', argument " "1"" of type '" "TreesClass::treestd3""'");
    } 
    arg1 = static_cast< TreesClass::treestd3 >(val1);
    result = (TreesClass::treestd3)treesTest4(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTest5) {
  {
    TreesClass::treestd4 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::treestd4 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTest5(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest5" "', argument " "1"" of type '" "TreesClass::treestd4""'");
    } 
    arg1 = static_cast< TreesClass::treestd4 >(val1);
    result = (TreesClass::treestd4)treesTest5(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTest6) {
  {
    TreesClass::treestd5 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::treestd5 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTest6(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest6" "', argument " "1"" of type '" "TreesClass::treestd5""'");
    } 
    arg1 = static_cast< TreesClass::treestd5 >(val1);
    result = (TreesClass::treestd5)treesTest6(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTest7) {
  {
    TreesClass::trees arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::trees result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTest7(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest7" "', argument " "1"" of type '" "TreesClass::trees""'");
    } 
    arg1 = static_cast< TreesClass::trees >(val1);
    result = (TreesClass::trees)treesTest7(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTest8) {
  {
    TreesClass::treestd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::treestd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTest8(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest8" "', argument " "1"" of type '" "TreesClass::treestd1""'");
    } 
    arg1 = static_cast< TreesClass::treestd1 >(val1);
    result = (TreesClass::treestd1)treesTest8(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTest9) {
  {
    TreesClass::treestd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::treestd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTest9(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTest9" "', argument " "1"" of type '" "TreesClass::treestd2""'");
    } 
    arg1 = static_cast< TreesClass::treestd2 >(val1);
    result = (TreesClass::treestd2)treesTest9(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestA) {
  {
    TreesClass::treestd3 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::treestd3 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestA(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestA" "', argument " "1"" of type '" "TreesClass::treestd3""'");
    } 
    arg1 = static_cast< TreesClass::treestd3 >(val1);
    result = (TreesClass::treestd3)treesTestA(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestB) {
  {
    TreesClass::treestd4 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::treestd4 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestB(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestB" "', argument " "1"" of type '" "TreesClass::treestd4""'");
    } 
    arg1 = static_cast< TreesClass::treestd4 >(val1);
    result = (TreesClass::treestd4)treesTestB(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestC) {
  {
    TreesClass::treestd5 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::treestd5 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestC(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestC" "', argument " "1"" of type '" "TreesClass::treestd5""'");
    } 
    arg1 = static_cast< TreesClass::treestd5 >(val1);
    result = (TreesClass::treestd5)treesTestC(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestD) {
  {
    treesglobaltd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    treesglobaltd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestD(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestD" "', argument " "1"" of type '" "treesglobaltd1""'");
    } 
    arg1 = static_cast< treesglobaltd1 >(val1);
    result = (treesglobaltd1)treesTestD(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestE) {
  {
    treesglobaltd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    treesglobaltd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestE(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestE" "', argument " "1"" of type '" "treesglobaltd2""'");
    } 
    arg1 = static_cast< treesglobaltd2 >(val1);
    result = (treesglobaltd2)treesTestE(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestF) {
  {
    treesglobaltd3 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    treesglobaltd3 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestF(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestF" "', argument " "1"" of type '" "treesglobaltd3""'");
    } 
    arg1 = static_cast< treesglobaltd3 >(val1);
    result = (treesglobaltd3)treesTestF(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestG) {
  {
    treesglobaltd4 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    treesglobaltd4 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestG(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestG" "', argument " "1"" of type '" "treesglobaltd4""'");
    } 
    arg1 = static_cast< treesglobaltd4 >(val1);
    result = (treesglobaltd4)treesTestG(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestH) {
  {
    treesglobaltd5 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    treesglobaltd5 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestH(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestH" "', argument " "1"" of type '" "treesglobaltd5""'");
    } 
    arg1 = static_cast< treesglobaltd5 >(val1);
    result = (treesglobaltd5)treesTestH(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestI) {
  {
    treesglobaltd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    treesglobaltd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestI(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestI" "', argument " "1"" of type '" "treesglobaltd1""'");
    } 
    arg1 = static_cast< treesglobaltd1 >(val1);
    result = (treesglobaltd1)treesTestI(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestJ) {
  {
    treesglobaltd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    treesglobaltd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestJ(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestJ" "', argument " "1"" of type '" "treesglobaltd2""'");
    } 
    arg1 = static_cast< treesglobaltd2 >(val1);
    result = (treesglobaltd2)treesTestJ(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestK) {
  {
    treesglobaltd3 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    treesglobaltd3 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestK(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestK" "', argument " "1"" of type '" "treesglobaltd3""'");
    } 
    arg1 = static_cast< treesglobaltd3 >(val1);
    result = (treesglobaltd3)treesTestK(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestL) {
  {
    treesglobaltd4 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    treesglobaltd4 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestL(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestL" "', argument " "1"" of type '" "treesglobaltd4""'");
    } 
    arg1 = static_cast< treesglobaltd4 >(val1);
    result = (treesglobaltd4)treesTestL(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestM) {
  {
    treesglobaltd5 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    treesglobaltd5 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestM(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestM" "', argument " "1"" of type '" "treesglobaltd5""'");
    } 
    arg1 = static_cast< treesglobaltd5 >(val1);
    result = (treesglobaltd5)treesTestM(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestO) {
  {
    TreesClass::trees arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::trees result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestO(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestO" "', argument " "1"" of type '" "TreesClass::trees""'");
    } 
    arg1 = static_cast< TreesClass::trees >(val1);
    result = (TreesClass::trees)treesTestO(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestP) {
  {
    TreesClass::treestd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::treestd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestP(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestP" "', argument " "1"" of type '" "TreesClass::treestd1""'");
    } 
    arg1 = static_cast< TreesClass::treestd1 >(val1);
    result = (TreesClass::treestd1)treesTestP(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestQ) {
  {
    TreesClass::treestd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    TreesClass::treestd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestQ(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestQ" "', argument " "1"" of type '" "TreesClass::treestd2""'");
    } 
    arg1 = static_cast< TreesClass::treestd2 >(val1);
    result = (TreesClass::treestd2)treesTestQ(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_treesTestR) {
  {
    treesglobaltd4 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    treesglobaltd4 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: treesTestR(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "treesTestR" "', argument " "1"" of type '" "treesglobaltd4""'");
    } 
    arg1 = static_cast< treesglobaltd4 >(val1);
    result = (treesglobaltd4)treesTestR(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_hairTest1) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    curly::greasy::HairStruct::hair arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hair result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_hairTest1(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest1" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest1" "', argument " "2"" of type '" "curly::greasy::HairStruct::hair""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hair >(val2);
    result = (curly::greasy::HairStruct::hair)(arg1)->hairTest1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_hairTest2) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    curly::greasy::HairStruct::hairtd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_hairTest2(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest2" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest2" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd1""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd1 >(val2);
    result = (curly::greasy::HairStruct::hairtd1)(arg1)->hairTest2(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_hairTest3) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    curly::greasy::HairStruct::hairtd2 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd2 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_hairTest3(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest3" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest3" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd2""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd2 >(val2);
    result = (curly::greasy::HairStruct::hairtd2)(arg1)->hairTest3(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_hairTest4) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    curly::greasy::HairStruct::hairtd3 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd3 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_hairTest4(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest4" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest4" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd3""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd3 >(val2);
    result = (curly::greasy::HairStruct::hairtd3)(arg1)->hairTest4(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_hairTest5) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    curly::greasy::HairStruct::hairtd4 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd4 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_hairTest5(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest5" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest5" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd4""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd4 >(val2);
    result = (curly::greasy::HairStruct::hairtd4)(arg1)->hairTest5(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_hairTest6) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    curly::greasy::HairStruct::hairtd5 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd5 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_hairTest6(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest6" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest6" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd5""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd5 >(val2);
    result = (curly::greasy::HairStruct::hairtd5)(arg1)->hairTest6(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_hairTest7) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    curly::greasy::HairStruct::hairtd6 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd6 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_hairTest7(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest7" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest7" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd6""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd6 >(val2);
    result = (curly::greasy::HairStruct::hairtd6)(arg1)->hairTest7(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_hairTest8) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    curly::greasy::HairStruct::hairtd7 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd7 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_hairTest8(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest8" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest8" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd7""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd7 >(val2);
    result = (curly::greasy::HairStruct::hairtd7)(arg1)->hairTest8(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_hairTest9) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    curly::greasy::HairStruct::hairtd8 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd8 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_hairTest9(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTest9" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTest9" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd8""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd8 >(val2);
    result = (curly::greasy::HairStruct::hairtd8)(arg1)->hairTest9(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_hairTestA) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    curly::greasy::HairStruct::hairtd9 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd9 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_hairTestA(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTestA" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTestA" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd9""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd9 >(val2);
    result = (curly::greasy::HairStruct::hairtd9)(arg1)->hairTestA(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_hairTestB) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    curly::greasy::HairStruct::hairtdA arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtdA result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_hairTestB(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_hairTestB" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_hairTestB" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtdA""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtdA >(val2);
    result = (curly::greasy::HairStruct::hairtdA)(arg1)->hairTestB(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_colourTest1) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    ::colour arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    ::colour result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_colourTest1(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_colourTest1" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_colourTest1" "', argument " "2"" of type '" "::colour""'");
    } 
    arg2 = static_cast< ::colour >(val2);
    result = (::colour)(arg1)->colourTest1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_colourTest2) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    enum colour arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    enum colour result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_colourTest2(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_colourTest2" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_colourTest2" "', argument " "2"" of type '" "enum colour""'");
    } 
    arg2 = static_cast< enum colour >(val2);
    result = (enum colour)(arg1)->colourTest2(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_namedanonTest1) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    namedanon arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    namedanon result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_namedanonTest1(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_namedanonTest1" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_namedanonTest1" "', argument " "2"" of type '" "namedanon""'");
    } 
    arg2 = static_cast< namedanon >(val2);
    result = (namedanon)(arg1)->namedanonTest1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_namedanonspaceTest1) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    AnonSpace::namedanonspace arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    AnonSpace::namedanonspace result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_namedanonspaceTest1(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_namedanonspaceTest1" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_namedanonspaceTest1" "', argument " "2"" of type '" "AnonSpace::namedanonspace""'");
    } 
    arg2 = static_cast< AnonSpace::namedanonspace >(val2);
    result = (AnonSpace::namedanonspace)(arg1)->namedanonspaceTest1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_treesGlobalTest1) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    treesglobaltd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    treesglobaltd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_treesGlobalTest1(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_treesGlobalTest1" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_treesGlobalTest1" "', argument " "2"" of type '" "treesglobaltd1""'");
    } 
    arg2 = static_cast< treesglobaltd1 >(val2);
    result = (treesglobaltd1)(arg1)->treesGlobalTest1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_treesGlobalTest2) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    treesglobaltd2 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    treesglobaltd2 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_treesGlobalTest2(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_treesGlobalTest2" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_treesGlobalTest2" "', argument " "2"" of type '" "treesglobaltd2""'");
    } 
    arg2 = static_cast< treesglobaltd2 >(val2);
    result = (treesglobaltd2)(arg1)->treesGlobalTest2(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_treesGlobalTest3) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    treesglobaltd3 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    treesglobaltd3 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_treesGlobalTest3(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_treesGlobalTest3" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_treesGlobalTest3" "', argument " "2"" of type '" "treesglobaltd3""'");
    } 
    arg2 = static_cast< treesglobaltd3 >(val2);
    result = (treesglobaltd3)(arg1)->treesGlobalTest3(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_treesGlobalTest4) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    treesglobaltd4 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    treesglobaltd4 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_treesGlobalTest4(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_treesGlobalTest4" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_treesGlobalTest4" "', argument " "2"" of type '" "treesglobaltd4""'");
    } 
    arg2 = static_cast< treesglobaltd4 >(val2);
    result = (treesglobaltd4)(arg1)->treesGlobalTest4(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HairStruct_treesGlobalTest5) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    treesglobaltd5 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    treesglobaltd5 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HairStruct_treesGlobalTest5(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HairStruct_treesGlobalTest5" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HairStruct_treesGlobalTest5" "', argument " "2"" of type '" "treesglobaltd5""'");
    } 
    arg2 = static_cast< treesglobaltd5 >(val2);
    result = (treesglobaltd5)(arg1)->treesGlobalTest5(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_HairStruct) {
  {
    int argvi = 0;
    curly::greasy::HairStruct *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_HairStruct();");
    }
    result = (curly::greasy::HairStruct *)new curly::greasy::HairStruct();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_curly__greasy__HairStruct, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_HairStruct) {
  {
    curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_HairStruct(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__HairStruct, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HairStruct" "', argument " "1"" of type '" "curly::greasy::HairStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::HairStruct * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTest1) {
  {
    curly::greasy::HairStruct::hair arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hair result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTest1(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest1" "', argument " "1"" of type '" "curly::greasy::HairStruct::hair""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hair >(val1);
    result = (curly::greasy::HairStruct::hair)curly::greasy::hairTest1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTest2) {
  {
    curly::greasy::HairStruct::hairtd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTest2(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest2" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd1""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd1 >(val1);
    result = (curly::greasy::HairStruct::hairtd1)curly::greasy::hairTest2(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTest3) {
  {
    curly::greasy::HairStruct::hairtd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTest3(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest3" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd2""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd2 >(val1);
    result = (curly::greasy::HairStruct::hairtd2)curly::greasy::hairTest3(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTest4) {
  {
    curly::greasy::HairStruct::hairtd3 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd3 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTest4(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest4" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd3""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd3 >(val1);
    result = (curly::greasy::HairStruct::hairtd3)curly::greasy::hairTest4(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTest5) {
  {
    curly::greasy::HairStruct::hairtd4 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd4 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTest5(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest5" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd4""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd4 >(val1);
    result = (curly::greasy::HairStruct::hairtd4)curly::greasy::hairTest5(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTest6) {
  {
    curly::greasy::HairStruct::hairtd5 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd5 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTest6(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest6" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd5""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd5 >(val1);
    result = (curly::greasy::HairStruct::hairtd5)curly::greasy::hairTest6(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTest7) {
  {
    curly::greasy::HairStruct::hairtd6 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd6 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTest7(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest7" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd6""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd6 >(val1);
    result = (curly::greasy::HairStruct::hairtd6)curly::greasy::hairTest7(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTest8) {
  {
    curly::greasy::HairStruct::hairtd7 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd7 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTest8(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest8" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd7""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd7 >(val1);
    result = (curly::greasy::HairStruct::hairtd7)curly::greasy::hairTest8(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTest9) {
  {
    curly::greasy::HairStruct::hairtd8 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd8 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTest9(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTest9" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd8""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd8 >(val1);
    result = (curly::greasy::HairStruct::hairtd8)curly::greasy::hairTest9(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestA) {
  {
    curly::greasy::HairStruct::hairtd9 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd9 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestA(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd9""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd9 >(val1);
    result = (curly::greasy::HairStruct::hairtd9)curly::greasy::hairTestA(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestB) {
  {
    curly::greasy::HairStruct::hairtdA arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtdA result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestB(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtdA""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtdA >(val1);
    result = (curly::greasy::HairStruct::hairtdA)curly::greasy::hairTestB(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestC) {
  {
    curly::greasy::HairStruct::hair *arg1 = 0 ;
    int val1 ;
    int ecode1 ;
    curly::greasy::HairStruct::hair temp1 ;
    int argvi = 0;
    curly::greasy::HairStruct::hair *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestC(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC" "', argument " "1"" of type '" "curly::greasy::HairStruct::hair const &""'");
    } else {
      temp1 = static_cast< curly::greasy::HairStruct::hair >(val1);
      arg1 = &temp1;
    }
    result = (curly::greasy::HairStruct::hair *) &curly::greasy::hairTestC((enum curly::greasy::HairStruct::hair const &)*arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestA1) {
  {
    curly::greasy::HairStruct::hair arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hair result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestA1(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA1" "', argument " "1"" of type '" "curly::greasy::HairStruct::hair""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hair >(val1);
    result = (curly::greasy::HairStruct::hair)curly::hairTestA1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestA2) {
  {
    curly::greasy::HairStruct::hairtd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestA2(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA2" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd1""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd1 >(val1);
    result = (curly::greasy::HairStruct::hairtd1)curly::hairTestA2(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestA3) {
  {
    curly::greasy::HairStruct::hairtd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestA3(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA3" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd2""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd2 >(val1);
    result = (curly::greasy::HairStruct::hairtd2)curly::hairTestA3(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestA4) {
  {
    curly::greasy::HairStruct::hairtd3 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd3 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestA4(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA4" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd3""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd3 >(val1);
    result = (curly::greasy::HairStruct::hairtd3)curly::hairTestA4(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestA5) {
  {
    curly::greasy::HairStruct::hairtd4 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd4 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestA5(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA5" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd4""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd4 >(val1);
    result = (curly::greasy::HairStruct::hairtd4)curly::hairTestA5(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestA6) {
  {
    curly::greasy::HairStruct::hairtd5 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd5 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestA6(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA6" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd5""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd5 >(val1);
    result = (curly::greasy::HairStruct::hairtd5)curly::hairTestA6(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestA7) {
  {
    curly::greasy::HairStruct::hairtd6 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd6 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestA7(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA7" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd6""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd6 >(val1);
    result = (curly::greasy::HairStruct::hairtd6)curly::hairTestA7(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestA8) {
  {
    curly::greasy::HairStruct::hairtd7 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd7 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestA8(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA8" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd7""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd7 >(val1);
    result = (curly::greasy::HairStruct::hairtd7)curly::hairTestA8(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestA9) {
  {
    curly::greasy::HairStruct::hairtd8 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd8 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestA9(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestA9" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd8""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd8 >(val1);
    result = (curly::greasy::HairStruct::hairtd8)curly::hairTestA9(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestAA) {
  {
    curly::greasy::HairStruct::hairtd9 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd9 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestAA(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestAA" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd9""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd9 >(val1);
    result = (curly::greasy::HairStruct::hairtd9)curly::hairTestAA(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestAB) {
  {
    curly::greasy::HairStruct::hairtdA arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtdA result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestAB(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestAB" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtdA""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtdA >(val1);
    result = (curly::greasy::HairStruct::hairtdA)curly::hairTestAB(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestAC) {
  {
    curly::greasy::HairStruct::hairtdA *arg1 = 0 ;
    int val1 ;
    int ecode1 ;
    curly::greasy::HairStruct::hairtdA temp1 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtdA *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestAC(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestAC" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtdA const &""'");
    } else {
      temp1 = static_cast< curly::greasy::HairStruct::hairtdA >(val1);
      arg1 = &temp1;
    }
    result = (curly::greasy::HairStruct::hairtdA *) &curly::hairTestAC((enum curly::greasy::HairStruct::hair const &)*arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestB1) {
  {
    curly::greasy::HairStruct::hair arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hair result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestB1(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB1" "', argument " "1"" of type '" "curly::greasy::HairStruct::hair""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hair >(val1);
    result = (curly::greasy::HairStruct::hair)hairTestB1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestB2) {
  {
    curly::greasy::HairStruct::hairtd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestB2(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB2" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd1""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd1 >(val1);
    result = (curly::greasy::HairStruct::hairtd1)hairTestB2(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestB3) {
  {
    curly::greasy::HairStruct::hairtd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestB3(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB3" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd2""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd2 >(val1);
    result = (curly::greasy::HairStruct::hairtd2)hairTestB3(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestB4) {
  {
    curly::greasy::HairStruct::hairtd3 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd3 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestB4(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB4" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd3""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd3 >(val1);
    result = (curly::greasy::HairStruct::hairtd3)hairTestB4(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestB5) {
  {
    curly::greasy::HairStruct::hairtd4 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd4 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestB5(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB5" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd4""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd4 >(val1);
    result = (curly::greasy::HairStruct::hairtd4)hairTestB5(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestB6) {
  {
    curly::greasy::HairStruct::hairtd5 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd5 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestB6(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB6" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd5""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd5 >(val1);
    result = (curly::greasy::HairStruct::hairtd5)hairTestB6(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestB7) {
  {
    curly::greasy::HairStruct::hairtd6 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd6 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestB7(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB7" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd6""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd6 >(val1);
    result = (curly::greasy::HairStruct::hairtd6)hairTestB7(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestB8) {
  {
    curly::greasy::HairStruct::hairtd7 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd7 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestB8(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB8" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd7""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd7 >(val1);
    result = (curly::greasy::HairStruct::hairtd7)hairTestB8(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestB9) {
  {
    curly::greasy::HairStruct::hairtd8 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd8 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestB9(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestB9" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd8""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd8 >(val1);
    result = (curly::greasy::HairStruct::hairtd8)hairTestB9(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestBA) {
  {
    curly::greasy::HairStruct::hairtd9 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd9 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestBA(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestBA" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtd9""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtd9 >(val1);
    result = (curly::greasy::HairStruct::hairtd9)hairTestBA(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestBB) {
  {
    curly::greasy::HairStruct::hairtdA arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtdA result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestBB(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestBB" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtdA""'");
    } 
    arg1 = static_cast< curly::greasy::HairStruct::hairtdA >(val1);
    result = (curly::greasy::HairStruct::hairtdA)hairTestBB(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestBC) {
  {
    curly::greasy::HairStruct::hairtdA *arg1 = 0 ;
    int val1 ;
    int ecode1 ;
    curly::greasy::HairStruct::hairtdA temp1 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtdA *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestBC(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestBC" "', argument " "1"" of type '" "curly::greasy::HairStruct::hairtdA const &""'");
    } else {
      temp1 = static_cast< curly::greasy::HairStruct::hairtdA >(val1);
      arg1 = &temp1;
    }
    result = (curly::greasy::HairStruct::hairtdA *) &hairTestBC((enum curly::greasy::HairStruct::hair const &)*arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestC1) {
  {
    HairStruct::hair arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    HairStruct::hair result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestC1(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC1" "', argument " "1"" of type '" "HairStruct::hair""'");
    } 
    arg1 = static_cast< HairStruct::hair >(val1);
    result = (HairStruct::hair)hairTestC1(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestC2) {
  {
    HairStruct::hairtd1 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    HairStruct::hairtd1 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestC2(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC2" "', argument " "1"" of type '" "HairStruct::hairtd1""'");
    } 
    arg1 = static_cast< HairStruct::hairtd1 >(val1);
    result = (HairStruct::hairtd1)hairTestC2(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestC3) {
  {
    HairStruct::hairtd2 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    HairStruct::hairtd2 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestC3(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC3" "', argument " "1"" of type '" "HairStruct::hairtd2""'");
    } 
    arg1 = static_cast< HairStruct::hairtd2 >(val1);
    result = (HairStruct::hairtd2)hairTestC3(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestC4) {
  {
    HairStruct::hairtd3 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    HairStruct::hairtd3 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestC4(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC4" "', argument " "1"" of type '" "HairStruct::hairtd3""'");
    } 
    arg1 = static_cast< HairStruct::hairtd3 >(val1);
    result = (HairStruct::hairtd3)hairTestC4(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestC5) {
  {
    HairStruct::hairtd4 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    HairStruct::hairtd4 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestC5(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC5" "', argument " "1"" of type '" "HairStruct::hairtd4""'");
    } 
    arg1 = static_cast< HairStruct::hairtd4 >(val1);
    result = (HairStruct::hairtd4)hairTestC5(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestC6) {
  {
    HairStruct::hairtd5 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    HairStruct::hairtd5 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestC6(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC6" "', argument " "1"" of type '" "HairStruct::hairtd5""'");
    } 
    arg1 = static_cast< HairStruct::hairtd5 >(val1);
    result = (HairStruct::hairtd5)hairTestC6(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestC7) {
  {
    HairStruct::hairtd6 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    HairStruct::hairtd6 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestC7(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC7" "', argument " "1"" of type '" "HairStruct::hairtd6""'");
    } 
    arg1 = static_cast< HairStruct::hairtd6 >(val1);
    result = (HairStruct::hairtd6)hairTestC7(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestC8) {
  {
    HairStruct::hairtd7 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    HairStruct::hairtd7 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestC8(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC8" "', argument " "1"" of type '" "HairStruct::hairtd7""'");
    } 
    arg1 = static_cast< HairStruct::hairtd7 >(val1);
    result = (HairStruct::hairtd7)hairTestC8(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestC9) {
  {
    HairStruct::hairtd8 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    HairStruct::hairtd8 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestC9(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestC9" "', argument " "1"" of type '" "HairStruct::hairtd8""'");
    } 
    arg1 = static_cast< HairStruct::hairtd8 >(val1);
    result = (HairStruct::hairtd8)hairTestC9(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestCA) {
  {
    HairStruct::hairtd9 arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    HairStruct::hairtd9 result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestCA(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestCA" "', argument " "1"" of type '" "HairStruct::hairtd9""'");
    } 
    arg1 = static_cast< HairStruct::hairtd9 >(val1);
    result = (HairStruct::hairtd9)hairTestCA(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestCB) {
  {
    HairStruct::hairtdA arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    HairStruct::hairtdA result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestCB(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestCB" "', argument " "1"" of type '" "HairStruct::hairtdA""'");
    } 
    arg1 = static_cast< HairStruct::hairtdA >(val1);
    result = (HairStruct::hairtdA)hairTestCB(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_hairTestCC) {
  {
    HairStruct::hairtdA *arg1 = 0 ;
    int val1 ;
    int ecode1 ;
    HairStruct::hairtdA temp1 ;
    int argvi = 0;
    HairStruct::hairtdA *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: hairTestCC(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "hairTestCC" "', argument " "1"" of type '" "HairStruct::hairtdA const &""'");
    } else {
      temp1 = static_cast< HairStruct::hairtdA >(val1);
      arg1 = &temp1;
    }
    result = (HairStruct::hairtdA *) &hairTestCC((enum curly::greasy::HairStruct::hair const &)*arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(*result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_FirStruct_hairTestFir1) {
  {
    curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
    curly::greasy::HairStruct::hair arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hair result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: FirStruct_hairTestFir1(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir1" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir1" "', argument " "2"" of type '" "curly::greasy::HairStruct::hair""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hair >(val2);
    result = (curly::greasy::HairStruct::hair)(arg1)->hairTestFir1(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_FirStruct_hairTestFir2) {
  {
    curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
    curly::greasy::HairStruct::hairtd1 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd1 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: FirStruct_hairTestFir2(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir2" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir2" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd1""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd1 >(val2);
    result = (curly::greasy::HairStruct::hairtd1)(arg1)->hairTestFir2(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_FirStruct_hairTestFir3) {
  {
    curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
    curly::greasy::HairStruct::hairtd2 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd2 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: FirStruct_hairTestFir3(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir3" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir3" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd2""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd2 >(val2);
    result = (curly::greasy::HairStruct::hairtd2)(arg1)->hairTestFir3(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_FirStruct_hairTestFir4) {
  {
    curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
    curly::greasy::HairStruct::hairtd3 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd3 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: FirStruct_hairTestFir4(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir4" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir4" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd3""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd3 >(val2);
    result = (curly::greasy::HairStruct::hairtd3)(arg1)->hairTestFir4(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_FirStruct_hairTestFir5) {
  {
    curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
    curly::greasy::HairStruct::hairtd4 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd4 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: FirStruct_hairTestFir5(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir5" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir5" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd4""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd4 >(val2);
    result = (curly::greasy::HairStruct::hairtd4)(arg1)->hairTestFir5(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_FirStruct_hairTestFir6) {
  {
    curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
    curly::greasy::HairStruct::hairtd5 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd5 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: FirStruct_hairTestFir6(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir6" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir6" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd5""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd5 >(val2);
    result = (curly::greasy::HairStruct::hairtd5)(arg1)->hairTestFir6(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_FirStruct_hairTestFir7) {
  {
    curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
    curly::greasy::HairStruct::hairtd6 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd6 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: FirStruct_hairTestFir7(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir7" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir7" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd6""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd6 >(val2);
    result = (curly::greasy::HairStruct::hairtd6)(arg1)->hairTestFir7(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_FirStruct_hairTestFir8) {
  {
    curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
    curly::greasy::HairStruct::hairtd7 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd7 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: FirStruct_hairTestFir8(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir8" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir8" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd7""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd7 >(val2);
    result = (curly::greasy::HairStruct::hairtd7)(arg1)->hairTestFir8(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_FirStruct_hairTestFir9) {
  {
    curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
    curly::greasy::HairStruct::hairtd8 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd8 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: FirStruct_hairTestFir9(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFir9" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFir9" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd8""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd8 >(val2);
    result = (curly::greasy::HairStruct::hairtd8)(arg1)->hairTestFir9(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_FirStruct_hairTestFirA) {
  {
    curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
    curly::greasy::HairStruct::hairtd9 arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtd9 result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: FirStruct_hairTestFirA(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFirA" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFirA" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtd9""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtd9 >(val2);
    result = (curly::greasy::HairStruct::hairtd9)(arg1)->hairTestFirA(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_FirStruct_hairTestFirB) {
  {
    curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
    curly::greasy::HairStruct::hairtdA arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    curly::greasy::HairStruct::hairtdA result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: FirStruct_hairTestFirB(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__FirStruct, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FirStruct_hairTestFirB" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FirStruct_hairTestFirB" "', argument " "2"" of type '" "curly::greasy::HairStruct::hairtdA""'");
    } 
    arg2 = static_cast< curly::greasy::HairStruct::hairtdA >(val2);
    result = (curly::greasy::HairStruct::hairtdA)(arg1)->hairTestFirB(arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_FirStruct) {
  {
    int argvi = 0;
    curly::greasy::FirStruct *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_FirStruct();");
    }
    result = (curly::greasy::FirStruct *)new curly::greasy::FirStruct();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_curly__greasy__FirStruct, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_FirStruct) {
  {
    curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_FirStruct(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_curly__greasy__FirStruct, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FirStruct" "', argument " "1"" of type '" "curly::greasy::FirStruct *""'"); 
    }
    arg1 = reinterpret_cast< curly::greasy::FirStruct * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Obscure) {
  {
    int argvi = 0;
    Obscure *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_Obscure();");
    }
    result = (Obscure *)new Obscure();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Obscure, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Obscure) {
  {
    Obscure *arg1 = (Obscure *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Obscure(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Obscure, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Obscure" "', argument " "1"" of type '" "Obscure *""'"); 
    }
    arg1 = reinterpret_cast< Obscure * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Instances_MemberInstance_set) {
  {
    Instances *arg1 = (Instances *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Instances_MemberInstance_set(self,MemberInstance);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Instances, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instances_MemberInstance_set" "', argument " "1"" of type '" "Instances *""'"); 
    }
    arg1 = reinterpret_cast< Instances * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Instances_MemberInstance_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1 && sizeof(int) == sizeof((arg1)->MemberInstance)) *(int*)(void*)&((arg1)->MemberInstance) = arg2;
    ST(argvi) = sv_newmortal();
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Instances_MemberInstance_get) {
  {
    Instances *arg1 = (Instances *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Instances_MemberInstance_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Instances, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Instances_MemberInstance_get" "', argument " "1"" of type '" "Instances *""'"); 
    }
    arg1 = reinterpret_cast< Instances * >(argp1);
    result = (int) ((arg1)->MemberInstance);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_Instances) {
  {
    int argvi = 0;
    Instances *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_Instances();");
    }
    result = (Instances *)new Instances();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Instances, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Instances) {
  {
    Instances *arg1 = (Instances *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Instances(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Instances, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Instances" "', argument " "1"" of type '" "Instances *""'"); 
    }
    arg1 = reinterpret_cast< Instances * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IgnoreTest) {
  {
    int argvi = 0;
    IgnoreTest *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_IgnoreTest();");
    }
    result = (IgnoreTest *)new IgnoreTest();
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IgnoreTest, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IgnoreTest) {
  {
    IgnoreTest *arg1 = (IgnoreTest *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IgnoreTest(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_IgnoreTest, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IgnoreTest" "', argument " "1"" of type '" "IgnoreTest *""'"); 
    }
    arg1 = reinterpret_cast< IgnoreTest * >(argp1);
    delete arg1;
    ST(argvi) = sv_newmortal();
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ignoreATest) {
  {
    IgnoreTest::IgnoreA arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    IgnoreTest::IgnoreA result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ignoreATest(n);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ignoreATest" "', argument " "1"" of type '" "IgnoreTest::IgnoreA""'");
    } 
    arg1 = static_cast< IgnoreTest::IgnoreA >(val1);
    result = (IgnoreTest::IgnoreA)ignoreATest(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ignoreBTest) {
  {
    IgnoreTest::IgnoreB arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    IgnoreTest::IgnoreB result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ignoreBTest(n);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ignoreBTest" "', argument " "1"" of type '" "IgnoreTest::IgnoreB""'");
    } 
    arg1 = static_cast< IgnoreTest::IgnoreB >(val1);
    result = (IgnoreTest::IgnoreB)ignoreBTest(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ignoreCTest) {
  {
    IgnoreTest::IgnoreC arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    IgnoreTest::IgnoreC result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ignoreCTest(n);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ignoreCTest" "', argument " "1"" of type '" "IgnoreTest::IgnoreC""'");
    } 
    arg1 = static_cast< IgnoreTest::IgnoreC >(val1);
    result = (IgnoreTest::IgnoreC)ignoreCTest(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ignoreDTest) {
  {
    IgnoreTest::IgnoreD arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    IgnoreTest::IgnoreD result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ignoreDTest(n);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ignoreDTest" "', argument " "1"" of type '" "IgnoreTest::IgnoreD""'");
    } 
    arg1 = static_cast< IgnoreTest::IgnoreD >(val1);
    result = (IgnoreTest::IgnoreD)ignoreDTest(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ignoreETest) {
  {
    IgnoreTest::IgnoreE arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    IgnoreTest::IgnoreE result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ignoreETest(n);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ignoreETest" "', argument " "1"" of type '" "IgnoreTest::IgnoreE""'");
    } 
    arg1 = static_cast< IgnoreTest::IgnoreE >(val1);
    result = (IgnoreTest::IgnoreE)ignoreETest(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_repeatTest) {
  {
    RepeatSpace::repeat arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    RepeatSpace::repeat result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: repeatTest(e);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "repeatTest" "', argument " "1"" of type '" "RepeatSpace::repeat""'");
    } 
    arg1 = static_cast< RepeatSpace::repeat >(val1);
    result = (RepeatSpace::repeat)RepeatSpace::repeatTest(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_differentTypesTest) {
  {
    DifferentSpace::DifferentTypes arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    DifferentSpace::DifferentTypes result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: differentTypesTest(n);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "differentTypesTest" "', argument " "1"" of type '" "DifferentSpace::DifferentTypes""'");
    } 
    arg1 = static_cast< DifferentSpace::DifferentTypes >(val1);
    result = (DifferentSpace::DifferentTypes)DifferentSpace::differentTypesTest(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_globalDifferentTypesTest) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: globalDifferentTypesTest(n);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "globalDifferentTypesTest" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    result = (int)DifferentSpace::globalDifferentTypesTest(arg1);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_curly__greasy__FirStructTo_p_curly__greasy__HairStruct(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((curly::greasy::HairStruct *)  ((curly::greasy::FirStruct *) x));
}
static swig_type_info _swigt__p_AlsoEmpty = {"_p_AlsoEmpty", "AlsoEmpty *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AnonSpace__AnonStruct = {"_p_AnonSpace__AnonStruct", "AnonSpace::AnonStruct *", 0, 0, (void*)"enum_thorough::AnonStruct", 0};
static swig_type_info _swigt__p_AnonSpace__namedanonspace = {"_p_AnonSpace__namedanonspace", "enum AnonSpace::namedanonspace *|AnonSpace::namedanonspace *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IgnoreTest = {"_p_IgnoreTest", "IgnoreTest *", 0, 0, (void*)"enum_thorough::IgnoreTest", 0};
static swig_type_info _swigt__p_Instances = {"_p_Instances", "Instances *", 0, 0, (void*)"enum_thorough::Instances", 0};
static swig_type_info _swigt__p_Name__TClassT_int_t = {"_p_Name__TClassT_int_t", "Name::TClass< int > *", 0, 0, (void*)"enum_thorough::TClassInt", 0};
static swig_type_info _swigt__p_Obscure = {"_p_Obscure", "Obscure *", 0, 0, (void*)"enum_thorough::Obscure", 0};
static swig_type_info _swigt__p_OldNameStruct = {"_p_OldNameStruct", "OldNameStruct *", 0, 0, (void*)"enum_thorough::NewNameStruct", 0};
static swig_type_info _swigt__p_RepeatSpace__repeat = {"_p_RepeatSpace__repeat", "enum RepeatSpace::repeat *|RepeatSpace::repeat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpeedClass = {"_p_SpeedClass", "SpeedClass *", 0, 0, (void*)"enum_thorough::SpeedClass", 0};
static swig_type_info _swigt__p_TemplateClassT_int_t = {"_p_TemplateClassT_int_t", "TemplateClass< int > *", 0, 0, (void*)"enum_thorough::TemplateClassInt", 0};
static swig_type_info _swigt__p_TreesClass = {"_p_TreesClass", "TreesClass *", 0, 0, (void*)"enum_thorough::TreesClass", 0};
static swig_type_info _swigt__p_TreesClass__trees = {"_p_TreesClass__trees", "treesglobaltd7 *|treesglobaltd4 *|treesglobaltd1 *|treesglobaltd8 *|treesglobaltd5 *|enum TreesClass::trees *|treesglobaltd2 *|treesglobaltd9 *|treesglobaltd6 *|treesglobaltd3 *|treesglobaltdA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TwoNamesStruct = {"_p_TwoNamesStruct", "TwoNamesStruct *", 0, 0, (void*)"enum_thorough::TwoNamesStruct", 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_curly__greasy__FirStruct = {"_p_curly__greasy__FirStruct", "curly::greasy::FirStruct *", 0, 0, (void*)"enum_thorough::FirStruct", 0};
static swig_type_info _swigt__p_curly__greasy__HairStruct = {"_p_curly__greasy__HairStruct", "curly::greasy::HairStruct *", 0, 0, (void*)"enum_thorough::HairStruct", 0};
static swig_type_info _swigt__p_doublename = {"_p_doublename", "doublename *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd1 = {"_p_hairtd1", "hairtd1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd2 = {"_p_hairtd2", "hairtd2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd3 = {"_p_hairtd3", "hairtd3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd4 = {"_p_hairtd4", "hairtd4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd5 = {"_p_hairtd5", "hairtd5 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd6 = {"_p_hairtd6", "hairtd6 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd7 = {"_p_hairtd7", "hairtd7 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd8 = {"_p_hairtd8", "hairtd8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtd9 = {"_p_hairtd9", "hairtd9 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hairtdA = {"_p_hairtdA", "hairtdA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_namedanon = {"_p_namedanon", "enum namedanon *|namedanon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_old_name = {"_p_old_name", "enum old_name *|old_nametd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scientiststd1 = {"_p_scientiststd1", "scientiststd1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scientiststd2 = {"_p_scientiststd2", "scientiststd2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_scientiststd3 = {"_p_scientiststd3", "scientiststd3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_singlename = {"_p_singlename", "singlename *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_speedtd1 = {"_p_speedtd1", "speedtd1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd1 = {"_p_treestd1", "treestd1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd2 = {"_p_treestd2", "treestd2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd3 = {"_p_treestd3", "treestd3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd4 = {"_p_treestd4", "treestd4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_treestd5 = {"_p_treestd5", "treestd5 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_twonamestag = {"_p_twonamestag", "enum twonamestag *|twonames *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AlsoEmpty,
  &_swigt__p_AnonSpace__AnonStruct,
  &_swigt__p_AnonSpace__namedanonspace,
  &_swigt__p_IgnoreTest,
  &_swigt__p_Instances,
  &_swigt__p_Name__TClassT_int_t,
  &_swigt__p_Obscure,
  &_swigt__p_OldNameStruct,
  &_swigt__p_RepeatSpace__repeat,
  &_swigt__p_SpeedClass,
  &_swigt__p_TemplateClassT_int_t,
  &_swigt__p_TreesClass,
  &_swigt__p_TreesClass__trees,
  &_swigt__p_TwoNamesStruct,
  &_swigt__p_char,
  &_swigt__p_curly__greasy__FirStruct,
  &_swigt__p_curly__greasy__HairStruct,
  &_swigt__p_doublename,
  &_swigt__p_hairtd1,
  &_swigt__p_hairtd2,
  &_swigt__p_hairtd3,
  &_swigt__p_hairtd4,
  &_swigt__p_hairtd5,
  &_swigt__p_hairtd6,
  &_swigt__p_hairtd7,
  &_swigt__p_hairtd8,
  &_swigt__p_hairtd9,
  &_swigt__p_hairtdA,
  &_swigt__p_namedanon,
  &_swigt__p_old_name,
  &_swigt__p_scientiststd1,
  &_swigt__p_scientiststd2,
  &_swigt__p_scientiststd3,
  &_swigt__p_singlename,
  &_swigt__p_speedtd1,
  &_swigt__p_treestd1,
  &_swigt__p_treestd2,
  &_swigt__p_treestd3,
  &_swigt__p_treestd4,
  &_swigt__p_treestd5,
  &_swigt__p_twonamestag,
};

static swig_cast_info _swigc__p_AlsoEmpty[] = {  {&_swigt__p_AlsoEmpty, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnonSpace__AnonStruct[] = {  {&_swigt__p_AnonSpace__AnonStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AnonSpace__namedanonspace[] = {  {&_swigt__p_AnonSpace__namedanonspace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IgnoreTest[] = {  {&_swigt__p_IgnoreTest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Instances[] = {  {&_swigt__p_Instances, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Name__TClassT_int_t[] = {  {&_swigt__p_Name__TClassT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Obscure[] = {  {&_swigt__p_Obscure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OldNameStruct[] = {  {&_swigt__p_OldNameStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RepeatSpace__repeat[] = {  {&_swigt__p_RepeatSpace__repeat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpeedClass[] = {  {&_swigt__p_SpeedClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TemplateClassT_int_t[] = {  {&_swigt__p_TemplateClassT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TreesClass[] = {  {&_swigt__p_TreesClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TreesClass__trees[] = {  {&_swigt__p_TreesClass__trees, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TwoNamesStruct[] = {  {&_swigt__p_TwoNamesStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_curly__greasy__FirStruct[] = {  {&_swigt__p_curly__greasy__FirStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_curly__greasy__HairStruct[] = {  {&_swigt__p_curly__greasy__HairStruct, 0, 0, 0},  {&_swigt__p_curly__greasy__FirStruct, _p_curly__greasy__FirStructTo_p_curly__greasy__HairStruct, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_doublename[] = {  {&_swigt__p_doublename, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd1[] = {  {&_swigt__p_hairtd1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd2[] = {  {&_swigt__p_hairtd2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd3[] = {  {&_swigt__p_hairtd3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd4[] = {  {&_swigt__p_hairtd4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd5[] = {  {&_swigt__p_hairtd5, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd6[] = {  {&_swigt__p_hairtd6, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd7[] = {  {&_swigt__p_hairtd7, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd8[] = {  {&_swigt__p_hairtd8, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtd9[] = {  {&_swigt__p_hairtd9, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hairtdA[] = {  {&_swigt__p_hairtdA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_namedanon[] = {  {&_swigt__p_namedanon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_old_name[] = {  {&_swigt__p_old_name, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scientiststd1[] = {  {&_swigt__p_scientiststd1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scientiststd2[] = {  {&_swigt__p_scientiststd2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_scientiststd3[] = {  {&_swigt__p_scientiststd3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_singlename[] = {  {&_swigt__p_singlename, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_speedtd1[] = {  {&_swigt__p_speedtd1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd1[] = {  {&_swigt__p_treestd1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd2[] = {  {&_swigt__p_treestd2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd3[] = {  {&_swigt__p_treestd3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd4[] = {  {&_swigt__p_treestd4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_treestd5[] = {  {&_swigt__p_treestd5, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_twonamestag[] = {  {&_swigt__p_twonamestag, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AlsoEmpty,
  _swigc__p_AnonSpace__AnonStruct,
  _swigc__p_AnonSpace__namedanonspace,
  _swigc__p_IgnoreTest,
  _swigc__p_Instances,
  _swigc__p_Name__TClassT_int_t,
  _swigc__p_Obscure,
  _swigc__p_OldNameStruct,
  _swigc__p_RepeatSpace__repeat,
  _swigc__p_SpeedClass,
  _swigc__p_TemplateClassT_int_t,
  _swigc__p_TreesClass,
  _swigc__p_TreesClass__trees,
  _swigc__p_TwoNamesStruct,
  _swigc__p_char,
  _swigc__p_curly__greasy__FirStruct,
  _swigc__p_curly__greasy__HairStruct,
  _swigc__p_doublename,
  _swigc__p_hairtd1,
  _swigc__p_hairtd2,
  _swigc__p_hairtd3,
  _swigc__p_hairtd4,
  _swigc__p_hairtd5,
  _swigc__p_hairtd6,
  _swigc__p_hairtd7,
  _swigc__p_hairtd8,
  _swigc__p_hairtd9,
  _swigc__p_hairtdA,
  _swigc__p_namedanon,
  _swigc__p_old_name,
  _swigc__p_scientiststd1,
  _swigc__p_scientiststd2,
  _swigc__p_scientiststd3,
  _swigc__p_singlename,
  _swigc__p_speedtd1,
  _swigc__p_treestd1,
  _swigc__p_treestd2,
  _swigc__p_treestd3,
  _swigc__p_treestd4,
  _swigc__p_treestd5,
  _swigc__p_twonamestag,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
    { "enum_thoroughc::myColour", MAGIC_CLASS _wrap_myColour_set, MAGIC_CLASS _wrap_myColour_get,0 },
    { "enum_thoroughc::GlobalInstance", MAGIC_CLASS _wrap_GlobalInstance_set, MAGIC_CLASS _wrap_GlobalInstance_get,0 },
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"enum_thoroughc::new_AnonStruct", _wrap_new_AnonStruct},
{"enum_thoroughc::delete_AnonStruct", _wrap_delete_AnonStruct},
{"enum_thoroughc::colourTest1", _wrap_colourTest1},
{"enum_thoroughc::colourTest2", _wrap_colourTest2},
{"enum_thoroughc::colourTest3", _wrap_colourTest3},
{"enum_thoroughc::colourTest4", _wrap_colourTest4},
{"enum_thoroughc::SpeedClass_speedTest0", _wrap_SpeedClass_speedTest0},
{"enum_thoroughc::SpeedClass_speedTest1", _wrap_SpeedClass_speedTest1},
{"enum_thoroughc::SpeedClass_speedTest2", _wrap_SpeedClass_speedTest2},
{"enum_thoroughc::SpeedClass_speedTest3", _wrap_SpeedClass_speedTest3},
{"enum_thoroughc::SpeedClass_speedTest4", _wrap_SpeedClass_speedTest4},
{"enum_thoroughc::SpeedClass_speedTest5", _wrap_SpeedClass_speedTest5},
{"enum_thoroughc::SpeedClass_speedTest6", _wrap_SpeedClass_speedTest6},
{"enum_thoroughc::SpeedClass_speedTest7", _wrap_SpeedClass_speedTest7},
{"enum_thoroughc::SpeedClass_speedTest8", _wrap_SpeedClass_speedTest8},
{"enum_thoroughc::SpeedClass_myColour2_get", _wrap_SpeedClass_myColour2_get},
{"enum_thoroughc::SpeedClass_mySpeedtd1_set", _wrap_SpeedClass_mySpeedtd1_set},
{"enum_thoroughc::SpeedClass_mySpeedtd1_get", _wrap_SpeedClass_mySpeedtd1_get},
{"enum_thoroughc::new_SpeedClass", _wrap_new_SpeedClass},
{"enum_thoroughc::delete_SpeedClass", _wrap_delete_SpeedClass},
{"enum_thoroughc::speedTest0", _wrap_speedTest0},
{"enum_thoroughc::speedTest1", _wrap_speedTest1},
{"enum_thoroughc::speedTest2", _wrap_speedTest2},
{"enum_thoroughc::speedTest3", _wrap_speedTest3},
{"enum_thoroughc::speedTest4", _wrap_speedTest4},
{"enum_thoroughc::speedTest5", _wrap_speedTest5},
{"enum_thoroughc::namedanonTest1", _wrap_namedanonTest1},
{"enum_thoroughc::twonamesTest1", _wrap_twonamesTest1},
{"enum_thoroughc::twonamesTest2", _wrap_twonamesTest2},
{"enum_thoroughc::twonamesTest3", _wrap_twonamesTest3},
{"enum_thoroughc::TwoNamesStruct_twonamesTest1", _wrap_TwoNamesStruct_twonamesTest1},
{"enum_thoroughc::TwoNamesStruct_twonamesTest2", _wrap_TwoNamesStruct_twonamesTest2},
{"enum_thoroughc::TwoNamesStruct_twonamesTest3", _wrap_TwoNamesStruct_twonamesTest3},
{"enum_thoroughc::new_TwoNamesStruct", _wrap_new_TwoNamesStruct},
{"enum_thoroughc::delete_TwoNamesStruct", _wrap_delete_TwoNamesStruct},
{"enum_thoroughc::namedanonspaceTest1", _wrap_namedanonspaceTest1},
{"enum_thoroughc::namedanonspaceTest2", _wrap_namedanonspaceTest2},
{"enum_thoroughc::namedanonspaceTest3", _wrap_namedanonspaceTest3},
{"enum_thoroughc::namedanonspaceTest4", _wrap_namedanonspaceTest4},
{"enum_thoroughc::scientistsTest1", _wrap_scientistsTest1},
{"enum_thoroughc::scientistsTest2", _wrap_scientistsTest2},
{"enum_thoroughc::scientistsTest3", _wrap_scientistsTest3},
{"enum_thoroughc::scientistsTest4", _wrap_scientistsTest4},
{"enum_thoroughc::scientistsTest5", _wrap_scientistsTest5},
{"enum_thoroughc::scientistsTest6", _wrap_scientistsTest6},
{"enum_thoroughc::scientistsTest7", _wrap_scientistsTest7},
{"enum_thoroughc::scientistsTest8", _wrap_scientistsTest8},
{"enum_thoroughc::scientistsNameTest1", _wrap_scientistsNameTest1},
{"enum_thoroughc::scientistsNameTest2", _wrap_scientistsNameTest2},
{"enum_thoroughc::scientistsNameTest3", _wrap_scientistsNameTest3},
{"enum_thoroughc::scientistsNameTest4", _wrap_scientistsNameTest4},
{"enum_thoroughc::scientistsNameTest5", _wrap_scientistsNameTest5},
{"enum_thoroughc::scientistsNameTest6", _wrap_scientistsNameTest6},
{"enum_thoroughc::scientistsNameTest7", _wrap_scientistsNameTest7},
{"enum_thoroughc::scientistsNameSpaceTest1", _wrap_scientistsNameSpaceTest1},
{"enum_thoroughc::scientistsNameSpaceTest2", _wrap_scientistsNameSpaceTest2},
{"enum_thoroughc::scientistsNameSpaceTest3", _wrap_scientistsNameSpaceTest3},
{"enum_thoroughc::scientistsNameSpaceTest4", _wrap_scientistsNameSpaceTest4},
{"enum_thoroughc::scientistsNameSpaceTest5", _wrap_scientistsNameSpaceTest5},
{"enum_thoroughc::scientistsNameSpaceTest6", _wrap_scientistsNameSpaceTest6},
{"enum_thoroughc::scientistsNameSpaceTest7", _wrap_scientistsNameSpaceTest7},
{"enum_thoroughc::scientistsNameSpaceTest8", _wrap_scientistsNameSpaceTest8},
{"enum_thoroughc::scientistsNameSpaceTest9", _wrap_scientistsNameSpaceTest9},
{"enum_thoroughc::scientistsNameSpaceTestA", _wrap_scientistsNameSpaceTestA},
{"enum_thoroughc::scientistsNameSpaceTestB", _wrap_scientistsNameSpaceTestB},
{"enum_thoroughc::scientistsNameSpaceTestC", _wrap_scientistsNameSpaceTestC},
{"enum_thoroughc::scientistsNameSpaceTestD", _wrap_scientistsNameSpaceTestD},
{"enum_thoroughc::scientistsNameSpaceTestE", _wrap_scientistsNameSpaceTestE},
{"enum_thoroughc::scientistsNameSpaceTestF", _wrap_scientistsNameSpaceTestF},
{"enum_thoroughc::scientistsNameSpaceTestG", _wrap_scientistsNameSpaceTestG},
{"enum_thoroughc::scientistsNameSpaceTestH", _wrap_scientistsNameSpaceTestH},
{"enum_thoroughc::scientistsNameSpaceTestI", _wrap_scientistsNameSpaceTestI},
{"enum_thoroughc::scientistsNameSpaceTestJ", _wrap_scientistsNameSpaceTestJ},
{"enum_thoroughc::scientistsNameSpaceTestK", _wrap_scientistsNameSpaceTestK},
{"enum_thoroughc::scientistsNameSpaceTestL", _wrap_scientistsNameSpaceTestL},
{"enum_thoroughc::TemplateClassInt_scientistsTest1", _wrap_TemplateClassInt_scientistsTest1},
{"enum_thoroughc::TemplateClassInt_scientistsTest2", _wrap_TemplateClassInt_scientistsTest2},
{"enum_thoroughc::TemplateClassInt_scientistsTest3", _wrap_TemplateClassInt_scientistsTest3},
{"enum_thoroughc::TemplateClassInt_scientistsTest4", _wrap_TemplateClassInt_scientistsTest4},
{"enum_thoroughc::TemplateClassInt_scientistsTest5", _wrap_TemplateClassInt_scientistsTest5},
{"enum_thoroughc::TemplateClassInt_scientistsTest6", _wrap_TemplateClassInt_scientistsTest6},
{"enum_thoroughc::TemplateClassInt_scientistsTest7", _wrap_TemplateClassInt_scientistsTest7},
{"enum_thoroughc::TemplateClassInt_scientistsTest8", _wrap_TemplateClassInt_scientistsTest8},
{"enum_thoroughc::TemplateClassInt_scientistsTest9", _wrap_TemplateClassInt_scientistsTest9},
{"enum_thoroughc::TemplateClassInt_scientistsTestB", _wrap_TemplateClassInt_scientistsTestB},
{"enum_thoroughc::TemplateClassInt_scientistsTestD", _wrap_TemplateClassInt_scientistsTestD},
{"enum_thoroughc::TemplateClassInt_scientistsTestE", _wrap_TemplateClassInt_scientistsTestE},
{"enum_thoroughc::TemplateClassInt_scientistsTestF", _wrap_TemplateClassInt_scientistsTestF},
{"enum_thoroughc::TemplateClassInt_scientistsTestG", _wrap_TemplateClassInt_scientistsTestG},
{"enum_thoroughc::TemplateClassInt_scientistsTestH", _wrap_TemplateClassInt_scientistsTestH},
{"enum_thoroughc::TemplateClassInt_scientistsTestI", _wrap_TemplateClassInt_scientistsTestI},
{"enum_thoroughc::TemplateClassInt_scientistsTestJ", _wrap_TemplateClassInt_scientistsTestJ},
{"enum_thoroughc::new_TemplateClassInt", _wrap_new_TemplateClassInt},
{"enum_thoroughc::delete_TemplateClassInt", _wrap_delete_TemplateClassInt},
{"enum_thoroughc::TClassInt_scientistsNameTest1", _wrap_TClassInt_scientistsNameTest1},
{"enum_thoroughc::TClassInt_scientistsNameTest2", _wrap_TClassInt_scientistsNameTest2},
{"enum_thoroughc::TClassInt_scientistsNameTest3", _wrap_TClassInt_scientistsNameTest3},
{"enum_thoroughc::TClassInt_scientistsNameTest4", _wrap_TClassInt_scientistsNameTest4},
{"enum_thoroughc::TClassInt_scientistsNameTest5", _wrap_TClassInt_scientistsNameTest5},
{"enum_thoroughc::TClassInt_scientistsNameTest6", _wrap_TClassInt_scientistsNameTest6},
{"enum_thoroughc::TClassInt_scientistsNameTest7", _wrap_TClassInt_scientistsNameTest7},
{"enum_thoroughc::TClassInt_scientistsNameTest8", _wrap_TClassInt_scientistsNameTest8},
{"enum_thoroughc::TClassInt_scientistsNameTest9", _wrap_TClassInt_scientistsNameTest9},
{"enum_thoroughc::TClassInt_scientistsNameTestB", _wrap_TClassInt_scientistsNameTestB},
{"enum_thoroughc::TClassInt_scientistsNameTestD", _wrap_TClassInt_scientistsNameTestD},
{"enum_thoroughc::TClassInt_scientistsNameTestE", _wrap_TClassInt_scientistsNameTestE},
{"enum_thoroughc::TClassInt_scientistsNameTestF", _wrap_TClassInt_scientistsNameTestF},
{"enum_thoroughc::TClassInt_scientistsNameTestG", _wrap_TClassInt_scientistsNameTestG},
{"enum_thoroughc::TClassInt_scientistsNameTestH", _wrap_TClassInt_scientistsNameTestH},
{"enum_thoroughc::TClassInt_scientistsNameTestI", _wrap_TClassInt_scientistsNameTestI},
{"enum_thoroughc::TClassInt_scientistsNameSpaceTest1", _wrap_TClassInt_scientistsNameSpaceTest1},
{"enum_thoroughc::TClassInt_scientistsNameSpaceTest2", _wrap_TClassInt_scientistsNameSpaceTest2},
{"enum_thoroughc::TClassInt_scientistsNameSpaceTest3", _wrap_TClassInt_scientistsNameSpaceTest3},
{"enum_thoroughc::TClassInt_scientistsNameSpaceTest4", _wrap_TClassInt_scientistsNameSpaceTest4},
{"enum_thoroughc::TClassInt_scientistsNameSpaceTest5", _wrap_TClassInt_scientistsNameSpaceTest5},
{"enum_thoroughc::TClassInt_scientistsNameSpaceTest6", _wrap_TClassInt_scientistsNameSpaceTest6},
{"enum_thoroughc::TClassInt_scientistsNameSpaceTest7", _wrap_TClassInt_scientistsNameSpaceTest7},
{"enum_thoroughc::TClassInt_scientistsOtherTest1", _wrap_TClassInt_scientistsOtherTest1},
{"enum_thoroughc::TClassInt_scientistsOtherTest2", _wrap_TClassInt_scientistsOtherTest2},
{"enum_thoroughc::TClassInt_scientistsOtherTest3", _wrap_TClassInt_scientistsOtherTest3},
{"enum_thoroughc::TClassInt_scientistsOtherTest4", _wrap_TClassInt_scientistsOtherTest4},
{"enum_thoroughc::TClassInt_scientistsOtherTest5", _wrap_TClassInt_scientistsOtherTest5},
{"enum_thoroughc::TClassInt_scientistsOtherTest6", _wrap_TClassInt_scientistsOtherTest6},
{"enum_thoroughc::TClassInt_scientistsOtherTest7", _wrap_TClassInt_scientistsOtherTest7},
{"enum_thoroughc::new_TClassInt", _wrap_new_TClassInt},
{"enum_thoroughc::delete_TClassInt", _wrap_delete_TClassInt},
{"enum_thoroughc::renameTest1", _wrap_renameTest1},
{"enum_thoroughc::renameTest2", _wrap_renameTest2},
{"enum_thoroughc::NewNameStruct_renameTest1", _wrap_NewNameStruct_renameTest1},
{"enum_thoroughc::NewNameStruct_renameTest2", _wrap_NewNameStruct_renameTest2},
{"enum_thoroughc::NewNameStruct_renameTest3", _wrap_NewNameStruct_renameTest3},
{"enum_thoroughc::NewNameStruct_renameTest4", _wrap_NewNameStruct_renameTest4},
{"enum_thoroughc::NewNameStruct_renameTest5", _wrap_NewNameStruct_renameTest5},
{"enum_thoroughc::NewNameStruct_renameTest6", _wrap_NewNameStruct_renameTest6},
{"enum_thoroughc::new_NewNameStruct", _wrap_new_NewNameStruct},
{"enum_thoroughc::delete_NewNameStruct", _wrap_delete_NewNameStruct},
{"enum_thoroughc::renameTest3", _wrap_renameTest3},
{"enum_thoroughc::renameTest4", _wrap_renameTest4},
{"enum_thoroughc::renameTest5", _wrap_renameTest5},
{"enum_thoroughc::renameTest6", _wrap_renameTest6},
{"enum_thoroughc::renameTest7", _wrap_renameTest7},
{"enum_thoroughc::TreesClass_treesTest1", _wrap_TreesClass_treesTest1},
{"enum_thoroughc::TreesClass_treesTest2", _wrap_TreesClass_treesTest2},
{"enum_thoroughc::TreesClass_treesTest3", _wrap_TreesClass_treesTest3},
{"enum_thoroughc::TreesClass_treesTest4", _wrap_TreesClass_treesTest4},
{"enum_thoroughc::TreesClass_treesTest5", _wrap_TreesClass_treesTest5},
{"enum_thoroughc::TreesClass_treesTest6", _wrap_TreesClass_treesTest6},
{"enum_thoroughc::TreesClass_treesTest7", _wrap_TreesClass_treesTest7},
{"enum_thoroughc::TreesClass_treesTest8", _wrap_TreesClass_treesTest8},
{"enum_thoroughc::TreesClass_treesTest9", _wrap_TreesClass_treesTest9},
{"enum_thoroughc::TreesClass_treesTestA", _wrap_TreesClass_treesTestA},
{"enum_thoroughc::TreesClass_treesTestB", _wrap_TreesClass_treesTestB},
{"enum_thoroughc::TreesClass_treesTestC", _wrap_TreesClass_treesTestC},
{"enum_thoroughc::TreesClass_treesTestD", _wrap_TreesClass_treesTestD},
{"enum_thoroughc::TreesClass_treesTestE", _wrap_TreesClass_treesTestE},
{"enum_thoroughc::TreesClass_treesTestF", _wrap_TreesClass_treesTestF},
{"enum_thoroughc::TreesClass_treesTestG", _wrap_TreesClass_treesTestG},
{"enum_thoroughc::TreesClass_treesTestH", _wrap_TreesClass_treesTestH},
{"enum_thoroughc::TreesClass_treesTestI", _wrap_TreesClass_treesTestI},
{"enum_thoroughc::TreesClass_treesTestJ", _wrap_TreesClass_treesTestJ},
{"enum_thoroughc::TreesClass_treesTestK", _wrap_TreesClass_treesTestK},
{"enum_thoroughc::TreesClass_treesTestL", _wrap_TreesClass_treesTestL},
{"enum_thoroughc::TreesClass_treesTestM", _wrap_TreesClass_treesTestM},
{"enum_thoroughc::TreesClass_treesTestN", _wrap_TreesClass_treesTestN},
{"enum_thoroughc::TreesClass_treesTestO", _wrap_TreesClass_treesTestO},
{"enum_thoroughc::new_TreesClass", _wrap_new_TreesClass},
{"enum_thoroughc::delete_TreesClass", _wrap_delete_TreesClass},
{"enum_thoroughc::treesTest1", _wrap_treesTest1},
{"enum_thoroughc::treesTest2", _wrap_treesTest2},
{"enum_thoroughc::treesTest3", _wrap_treesTest3},
{"enum_thoroughc::treesTest4", _wrap_treesTest4},
{"enum_thoroughc::treesTest5", _wrap_treesTest5},
{"enum_thoroughc::treesTest6", _wrap_treesTest6},
{"enum_thoroughc::treesTest7", _wrap_treesTest7},
{"enum_thoroughc::treesTest8", _wrap_treesTest8},
{"enum_thoroughc::treesTest9", _wrap_treesTest9},
{"enum_thoroughc::treesTestA", _wrap_treesTestA},
{"enum_thoroughc::treesTestB", _wrap_treesTestB},
{"enum_thoroughc::treesTestC", _wrap_treesTestC},
{"enum_thoroughc::treesTestD", _wrap_treesTestD},
{"enum_thoroughc::treesTestE", _wrap_treesTestE},
{"enum_thoroughc::treesTestF", _wrap_treesTestF},
{"enum_thoroughc::treesTestG", _wrap_treesTestG},
{"enum_thoroughc::treesTestH", _wrap_treesTestH},
{"enum_thoroughc::treesTestI", _wrap_treesTestI},
{"enum_thoroughc::treesTestJ", _wrap_treesTestJ},
{"enum_thoroughc::treesTestK", _wrap_treesTestK},
{"enum_thoroughc::treesTestL", _wrap_treesTestL},
{"enum_thoroughc::treesTestM", _wrap_treesTestM},
{"enum_thoroughc::treesTestO", _wrap_treesTestO},
{"enum_thoroughc::treesTestP", _wrap_treesTestP},
{"enum_thoroughc::treesTestQ", _wrap_treesTestQ},
{"enum_thoroughc::treesTestR", _wrap_treesTestR},
{"enum_thoroughc::HairStruct_hairTest1", _wrap_HairStruct_hairTest1},
{"enum_thoroughc::HairStruct_hairTest2", _wrap_HairStruct_hairTest2},
{"enum_thoroughc::HairStruct_hairTest3", _wrap_HairStruct_hairTest3},
{"enum_thoroughc::HairStruct_hairTest4", _wrap_HairStruct_hairTest4},
{"enum_thoroughc::HairStruct_hairTest5", _wrap_HairStruct_hairTest5},
{"enum_thoroughc::HairStruct_hairTest6", _wrap_HairStruct_hairTest6},
{"enum_thoroughc::HairStruct_hairTest7", _wrap_HairStruct_hairTest7},
{"enum_thoroughc::HairStruct_hairTest8", _wrap_HairStruct_hairTest8},
{"enum_thoroughc::HairStruct_hairTest9", _wrap_HairStruct_hairTest9},
{"enum_thoroughc::HairStruct_hairTestA", _wrap_HairStruct_hairTestA},
{"enum_thoroughc::HairStruct_hairTestB", _wrap_HairStruct_hairTestB},
{"enum_thoroughc::HairStruct_colourTest1", _wrap_HairStruct_colourTest1},
{"enum_thoroughc::HairStruct_colourTest2", _wrap_HairStruct_colourTest2},
{"enum_thoroughc::HairStruct_namedanonTest1", _wrap_HairStruct_namedanonTest1},
{"enum_thoroughc::HairStruct_namedanonspaceTest1", _wrap_HairStruct_namedanonspaceTest1},
{"enum_thoroughc::HairStruct_treesGlobalTest1", _wrap_HairStruct_treesGlobalTest1},
{"enum_thoroughc::HairStruct_treesGlobalTest2", _wrap_HairStruct_treesGlobalTest2},
{"enum_thoroughc::HairStruct_treesGlobalTest3", _wrap_HairStruct_treesGlobalTest3},
{"enum_thoroughc::HairStruct_treesGlobalTest4", _wrap_HairStruct_treesGlobalTest4},
{"enum_thoroughc::HairStruct_treesGlobalTest5", _wrap_HairStruct_treesGlobalTest5},
{"enum_thoroughc::new_HairStruct", _wrap_new_HairStruct},
{"enum_thoroughc::delete_HairStruct", _wrap_delete_HairStruct},
{"enum_thoroughc::hairTest1", _wrap_hairTest1},
{"enum_thoroughc::hairTest2", _wrap_hairTest2},
{"enum_thoroughc::hairTest3", _wrap_hairTest3},
{"enum_thoroughc::hairTest4", _wrap_hairTest4},
{"enum_thoroughc::hairTest5", _wrap_hairTest5},
{"enum_thoroughc::hairTest6", _wrap_hairTest6},
{"enum_thoroughc::hairTest7", _wrap_hairTest7},
{"enum_thoroughc::hairTest8", _wrap_hairTest8},
{"enum_thoroughc::hairTest9", _wrap_hairTest9},
{"enum_thoroughc::hairTestA", _wrap_hairTestA},
{"enum_thoroughc::hairTestB", _wrap_hairTestB},
{"enum_thoroughc::hairTestC", _wrap_hairTestC},
{"enum_thoroughc::hairTestA1", _wrap_hairTestA1},
{"enum_thoroughc::hairTestA2", _wrap_hairTestA2},
{"enum_thoroughc::hairTestA3", _wrap_hairTestA3},
{"enum_thoroughc::hairTestA4", _wrap_hairTestA4},
{"enum_thoroughc::hairTestA5", _wrap_hairTestA5},
{"enum_thoroughc::hairTestA6", _wrap_hairTestA6},
{"enum_thoroughc::hairTestA7", _wrap_hairTestA7},
{"enum_thoroughc::hairTestA8", _wrap_hairTestA8},
{"enum_thoroughc::hairTestA9", _wrap_hairTestA9},
{"enum_thoroughc::hairTestAA", _wrap_hairTestAA},
{"enum_thoroughc::hairTestAB", _wrap_hairTestAB},
{"enum_thoroughc::hairTestAC", _wrap_hairTestAC},
{"enum_thoroughc::hairTestB1", _wrap_hairTestB1},
{"enum_thoroughc::hairTestB2", _wrap_hairTestB2},
{"enum_thoroughc::hairTestB3", _wrap_hairTestB3},
{"enum_thoroughc::hairTestB4", _wrap_hairTestB4},
{"enum_thoroughc::hairTestB5", _wrap_hairTestB5},
{"enum_thoroughc::hairTestB6", _wrap_hairTestB6},
{"enum_thoroughc::hairTestB7", _wrap_hairTestB7},
{"enum_thoroughc::hairTestB8", _wrap_hairTestB8},
{"enum_thoroughc::hairTestB9", _wrap_hairTestB9},
{"enum_thoroughc::hairTestBA", _wrap_hairTestBA},
{"enum_thoroughc::hairTestBB", _wrap_hairTestBB},
{"enum_thoroughc::hairTestBC", _wrap_hairTestBC},
{"enum_thoroughc::hairTestC1", _wrap_hairTestC1},
{"enum_thoroughc::hairTestC2", _wrap_hairTestC2},
{"enum_thoroughc::hairTestC3", _wrap_hairTestC3},
{"enum_thoroughc::hairTestC4", _wrap_hairTestC4},
{"enum_thoroughc::hairTestC5", _wrap_hairTestC5},
{"enum_thoroughc::hairTestC6", _wrap_hairTestC6},
{"enum_thoroughc::hairTestC7", _wrap_hairTestC7},
{"enum_thoroughc::hairTestC8", _wrap_hairTestC8},
{"enum_thoroughc::hairTestC9", _wrap_hairTestC9},
{"enum_thoroughc::hairTestCA", _wrap_hairTestCA},
{"enum_thoroughc::hairTestCB", _wrap_hairTestCB},
{"enum_thoroughc::hairTestCC", _wrap_hairTestCC},
{"enum_thoroughc::FirStruct_hairTestFir1", _wrap_FirStruct_hairTestFir1},
{"enum_thoroughc::FirStruct_hairTestFir2", _wrap_FirStruct_hairTestFir2},
{"enum_thoroughc::FirStruct_hairTestFir3", _wrap_FirStruct_hairTestFir3},
{"enum_thoroughc::FirStruct_hairTestFir4", _wrap_FirStruct_hairTestFir4},
{"enum_thoroughc::FirStruct_hairTestFir5", _wrap_FirStruct_hairTestFir5},
{"enum_thoroughc::FirStruct_hairTestFir6", _wrap_FirStruct_hairTestFir6},
{"enum_thoroughc::FirStruct_hairTestFir7", _wrap_FirStruct_hairTestFir7},
{"enum_thoroughc::FirStruct_hairTestFir8", _wrap_FirStruct_hairTestFir8},
{"enum_thoroughc::FirStruct_hairTestFir9", _wrap_FirStruct_hairTestFir9},
{"enum_thoroughc::FirStruct_hairTestFirA", _wrap_FirStruct_hairTestFirA},
{"enum_thoroughc::FirStruct_hairTestFirB", _wrap_FirStruct_hairTestFirB},
{"enum_thoroughc::new_FirStruct", _wrap_new_FirStruct},
{"enum_thoroughc::delete_FirStruct", _wrap_delete_FirStruct},
{"enum_thoroughc::new_Obscure", _wrap_new_Obscure},
{"enum_thoroughc::delete_Obscure", _wrap_delete_Obscure},
{"enum_thoroughc::Instances_MemberInstance_set", _wrap_Instances_MemberInstance_set},
{"enum_thoroughc::Instances_MemberInstance_get", _wrap_Instances_MemberInstance_get},
{"enum_thoroughc::new_Instances", _wrap_new_Instances},
{"enum_thoroughc::delete_Instances", _wrap_delete_Instances},
{"enum_thoroughc::new_IgnoreTest", _wrap_new_IgnoreTest},
{"enum_thoroughc::delete_IgnoreTest", _wrap_delete_IgnoreTest},
{"enum_thoroughc::ignoreATest", _wrap_ignoreATest},
{"enum_thoroughc::ignoreBTest", _wrap_ignoreBTest},
{"enum_thoroughc::ignoreCTest", _wrap_ignoreCTest},
{"enum_thoroughc::ignoreDTest", _wrap_ignoreDTest},
{"enum_thoroughc::ignoreETest", _wrap_ignoreETest},
{"enum_thoroughc::repeatTest", _wrap_repeatTest},
{"enum_thoroughc::differentTypesTest", _wrap_differentTypesTest},
{"enum_thoroughc::globalDifferentTypesTest", _wrap_globalDifferentTypesTest},
{0,0}
};
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
  dXSARGS;
  int i;
  
  SWIG_InitializeModule(0);
  
  /* Install commands */
  for (i = 0; swig_commands[i].name; i++) {
    /* Casts only needed for Perl < 5.10. */
#ifdef __cplusplus
    newXS(const_cast<char*>(swig_commands[i].name), swig_commands[i].wrapper, const_cast<char*>(__FILE__));
#else
    newXS((char*)swig_commands[i].name, swig_commands[i].wrapper, (char*)__FILE__);
#endif
  }
  
  /* Install variables */
  for (i = 0; swig_variables[i].name; i++) {
    SV *sv;
    sv = get_sv(swig_variables[i].name, TRUE | 0x2 | GV_ADDMULTI);
    if (swig_variables[i].type) {
      SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
    } else {
      sv_setiv(sv,(IV) 0);
    }
    swig_create_magic(sv, swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
  }
  
  /* Install constant */
  for (i = 0; swig_constants[i].type; i++) {
    SV *sv;
    sv = get_sv(swig_constants[i].name, TRUE | 0x2 | GV_ADDMULTI);
    switch(swig_constants[i].type) {
    case SWIG_INT:
      sv_setiv(sv, (IV) swig_constants[i].lvalue);
      break;
    case SWIG_FLOAT:
      sv_setnv(sv, (double) swig_constants[i].dvalue);
      break;
    case SWIG_STRING:
      sv_setpv(sv, (const char *) swig_constants[i].pvalue);
      break;
    case SWIG_POINTER:
      SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
      break;
    case SWIG_BINARY:
      SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
      break;
    default:
      break;
    }
    SvREADONLY_on(sv);
  }
  
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AnonEnum1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(AnonEnum1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AnonEnum2", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(AnonEnum2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ReallyAnInteger", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(ReallyAnInteger)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AnonSpaceEnum1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(AnonSpace::AnonSpaceEnum1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AnonSpaceEnum2", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(AnonSpace::AnonSpaceEnum2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AnonStruct_AnonStructEnum1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(AnonSpace::AnonStruct::AnonStructEnum1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "AnonStruct_AnonStructEnum2", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(AnonSpace::AnonStruct::AnonStructEnum2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_AnonSpace__AnonStruct, (void*) "enum_thorough::AnonStruct");
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "red", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(red)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "blue", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(blue)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "green", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(green)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SpeedClass_slow", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(SpeedClass::slow)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SpeedClass_medium", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(SpeedClass::medium)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SpeedClass_fast", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(SpeedClass::fast)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SpeedClass_lightning", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(SpeedClass::lightning)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_SpeedClass, (void*) "enum_thorough::SpeedClass");
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NamedAnon1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(NamedAnon1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NamedAnon2", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(NamedAnon2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TwoNames1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TwoNames1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TwoNames2", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TwoNames2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TwoNames3", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TwoNames3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TwoNamesStruct_TwoNamesStruct1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TwoNamesStruct::TwoNamesStruct1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TwoNamesStruct_TwoNamesStruct2", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TwoNamesStruct::TwoNamesStruct2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_TwoNamesStruct, (void*) "enum_thorough::TwoNamesStruct");
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NamedAnonSpace1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(AnonSpace::NamedAnonSpace1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NamedAnonSpace2", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(AnonSpace::NamedAnonSpace2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TemplateClassInt_einstein", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TemplateClass< int >::einstein)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TemplateClassInt_galileo", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TemplateClass< int >::galileo)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_TemplateClassT_int_t, (void*) "enum_thorough::TemplateClassInt");
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TClassInt_faraday", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(Name::TClass< int >::faraday)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TClassInt_bell", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(Name::TClass< int >::bell)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_Name__TClassT_int_t, (void*) "enum_thorough::TClassInt");
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "argh", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(argh)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "eek", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(eek)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NewNameStruct_whizz", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(OldNameStruct::whizz)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NewNameStruct_bang", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(OldNameStruct::kerboom)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NewNameStruct_pop", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(OldNameStruct::pop)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NewNameStruct_simple1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(OldNameStruct::simple1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NewNameStruct_doublename1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(OldNameStruct::doublename1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NewNameStruct_singlename1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(OldNameStruct::singlename1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_OldNameStruct, (void*) "enum_thorough::NewNameStruct");
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TreesClass_oak", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TreesClass::oak)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TreesClass_fir", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TreesClass::fir)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TreesClass_pine", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TreesClass::pine)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_TreesClass, (void*) "enum_thorough::TreesClass");
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "HairStruct_blonde", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(curly::greasy::HairStruct::blonde)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "HairStruct_ginger", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(curly::greasy::HairStruct::ginger)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_curly__greasy__HairStruct, (void*) "enum_thorough::HairStruct");
  SWIG_TypeClientData(SWIGTYPE_p_curly__greasy__FirStruct, (void*) "enum_thorough::FirStruct");
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Obscure_one", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(Obscure::one)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Obscure_two", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(Obscure::two)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Obscure_twoagain", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(Obscure::twoagain)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_Obscure, (void*) "enum_thorough::Obscure");
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "globalinstance1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(globalinstance1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "globalinstance2", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(globalinstance2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "globalinstance3", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(globalinstance3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Instances_memberinstance1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(Instances::memberinstance1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Instances_memberinstance2", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(Instances::memberinstance2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Instances_memberinstance3", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(Instances::memberinstance3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_Instances, (void*) "enum_thorough::Instances");
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreA_zero", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreA_zero)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreA_three", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreA_three)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreA_ten", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreA_ten)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreA_eleven", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreA_eleven)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreA_thirteen", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreA_thirteen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreA_fourteen", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreA_fourteen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreA_twenty", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreA_twenty)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreA_thirty", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreA_thirty)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreA_thirty_two", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreA_thirty_two)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreA_thirty_three", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreA_thirty_three)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreB_eleven", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreB_eleven)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreB_twelve", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreB_twelve)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreB_thirty_one", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreB_thirty_one)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreB_thirty_two", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreB_thirty_two)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreB_forty_one", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreB_forty_one)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreB_forty_two", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreB_forty_two)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreC_ten", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreC_ten)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreC_twelve", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreC_twelve)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreC_twenty", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreC_twenty)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreC_thirty", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreC_thirty)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreC_thirty_two", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreC_thirty_two)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreC_forty", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreC_forty)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreC_forty_two", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreC_forty_two)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreD_twenty_one", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreD_twenty_one)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreD_twenty_two", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreD_twenty_two)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreE_zero", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreE_zero)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreE_twenty_one", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreE_twenty_one)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IgnoreTest_ignoreE_twenty_two", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IgnoreTest::ignoreE_twenty_two)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_IgnoreTest, (void*) "enum_thorough::IgnoreTest");
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "one", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(RepeatSpace::one)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "initial", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(RepeatSpace::initial)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "two", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(RepeatSpace::two)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "three", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(RepeatSpace::three)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "llast", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(RepeatSpace::llast)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "end", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(RepeatSpace::end)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "typeint", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DifferentSpace::typeint)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "typeboolfalse", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(DifferentSpace::typeboolfalse)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "typebooltrue", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(DifferentSpace::typebooltrue)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "typebooltwo", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DifferentSpace::typebooltwo)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "typechar", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(DifferentSpace::typechar)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "typedefaultint", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DifferentSpace::typedefaultint)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "global_typeint", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DifferentSpace::global_typeint)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "global_typeboolfalse", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(DifferentSpace::global_typeboolfalse)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "global_typebooltrue", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(DifferentSpace::global_typebooltrue)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "global_typebooltwo", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DifferentSpace::global_typebooltwo)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "global_typechar", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(DifferentSpace::global_typechar)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "global_typedefaultint", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DifferentSpace::global_typedefaultint)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "typeint_noconst", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DifferentSpace::typeint_noconst)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "typeboolfalse_noconst", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(DifferentSpace::typeboolfalse_noconst)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "typebooltrue_noconst", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(DifferentSpace::typebooltrue_noconst)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "typebooltwo_noconst", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DifferentSpace::typebooltwo_noconst)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "typechar_noconst", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(DifferentSpace::typechar_noconst)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "typedefaultint_noconst", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DifferentSpace::typedefaultint_noconst)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "global_typeint_noconst", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DifferentSpace::global_typeint_noconst)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "global_typeboolfalse_noconst", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(DifferentSpace::global_typeboolfalse_noconst)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "global_typebooltrue_noconst", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(DifferentSpace::global_typebooltrue_noconst)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "global_typebooltwo_noconst", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DifferentSpace::global_typebooltwo_noconst)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "global_typechar_noconst", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(DifferentSpace::global_typechar_noconst)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/home/chhama/Dropbox/mtp/o-ns-allinone-2.35.1/ns-2.35/swig-2.0.10/Lib/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "global_typedefaultint_noconst", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DifferentSpace::global_typedefaultint_noconst)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  ST(0) = &PL_sv_yes;
  XSRETURN(1);
}

