# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package features;
use base qw(Exporter);
use base qw(DynaLoader);
package featuresc;
bootstrap features;
package features;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package features;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package features;

*FooBarInt = *featuresc::FooBarInt;

############# Class : features::Simple ##############

package features::Simple;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( features );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = featuresc::new_Simple(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        featuresc::delete_Simple($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : features::SimpleNS ##############

package features::SimpleNS;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( features );
%OWNER = ();
%ITERATORS = ();
*method = *featuresc::SimpleNS_method;
*afunction = *featuresc::SimpleNS_afunction;
sub new {
    my $pkg = shift;
    my $self = featuresc::new_SimpleNS(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        featuresc::delete_SimpleNS($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : features::SimpleInt ##############

package features::SimpleInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( features );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = featuresc::new_SimpleInt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        featuresc::delete_SimpleInt($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : features::TemplateInt ##############

package features::TemplateInt;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( features );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = featuresc::new_TemplateInt(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        featuresc::delete_TemplateInt($self);
        delete $OWNER{$self};
    }
}

*foo = *featuresc::TemplateInt_foo;
*bar = *featuresc::TemplateInt_bar;
*get = *featuresc::TemplateInt_get;
*set = *featuresc::TemplateInt_set;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : features::WildCards ##############

package features::WildCards;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( features );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        featuresc::delete_WildCards($self);
        delete $OWNER{$self};
    }
}

*incy = *featuresc::WildCards_incy;
*wincy = *featuresc::WildCards_wincy;
*spider = *featuresc::WildCards_spider;
sub new {
    my $pkg = shift;
    my $self = featuresc::new_WildCards(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : features::Animals ##############

package features::Animals;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( features );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = featuresc::new_Animals(@_);
    bless $self, $pkg if defined($self);
}

*lions = *featuresc::Animals_lions;
*leopards = *featuresc::Animals_leopards;
*cheetahs = *featuresc::Animals_cheetahs;
*jackal = *featuresc::Animals_jackal;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        featuresc::delete_Animals($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : features::Base ##############

package features::Base;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( features );
%OWNER = ();
%ITERATORS = ();
*__iadd__ = *featuresc::Base___iadd__;
*virtualmethod = *featuresc::Base_virtualmethod;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        featuresc::delete_Base($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = featuresc::new_Base(@_);
    bless $self, $pkg if defined($self);
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : features::Derived ##############

package features::Derived;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( features::Base features );
%OWNER = ();
%ITERATORS = ();
*virtualmethod = *featuresc::Derived_virtualmethod;
sub new {
    my $pkg = shift;
    my $self = featuresc::new_Derived(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        featuresc::delete_Derived($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : features::ConversionOperators ##############

package features::ConversionOperators;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( features );
%OWNER = ();
%ITERATORS = ();
*opbool = *featuresc::ConversionOperators_opbool;
*opuint = *featuresc::ConversionOperators_opuint;
sub new {
    my $pkg = shift;
    my $self = featuresc::new_ConversionOperators(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        featuresc::delete_ConversionOperators($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package features;

1;
