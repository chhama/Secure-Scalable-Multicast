/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package enum_thorough;

public class IgnoreTest {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected IgnoreTest(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IgnoreTest obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        enum_thoroughJNI.delete_IgnoreTest(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public IgnoreTest() {
    this(enum_thoroughJNI.new_IgnoreTest(), true);
  }

  public final static class IgnoreA {
    public final static IgnoreTest.IgnoreA ignoreA_zero = new IgnoreTest.IgnoreA("ignoreA_zero");
    public final static IgnoreTest.IgnoreA ignoreA_three = new IgnoreTest.IgnoreA("ignoreA_three", enum_thoroughJNI.IgnoreTest_ignoreA_three_get());
    public final static IgnoreTest.IgnoreA ignoreA_ten = new IgnoreTest.IgnoreA("ignoreA_ten", 10);
    public final static IgnoreTest.IgnoreA ignoreA_eleven = new IgnoreTest.IgnoreA("ignoreA_eleven");
    public final static IgnoreTest.IgnoreA ignoreA_thirteen = new IgnoreTest.IgnoreA("ignoreA_thirteen", enum_thoroughJNI.IgnoreTest_ignoreA_thirteen_get());
    public final static IgnoreTest.IgnoreA ignoreA_fourteen = new IgnoreTest.IgnoreA("ignoreA_fourteen");
    public final static IgnoreTest.IgnoreA ignoreA_twenty = new IgnoreTest.IgnoreA("ignoreA_twenty", 20);
    public final static IgnoreTest.IgnoreA ignoreA_thirty = new IgnoreTest.IgnoreA("ignoreA_thirty", 30);
    public final static IgnoreTest.IgnoreA ignoreA_thirty_two = new IgnoreTest.IgnoreA("ignoreA_thirty_two", (30) + 2);
    public final static IgnoreTest.IgnoreA ignoreA_thirty_three = new IgnoreTest.IgnoreA("ignoreA_thirty_three");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static IgnoreA swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + IgnoreA.class + " with value " + swigValue);
    }

    private IgnoreA(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private IgnoreA(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private IgnoreA(String swigName, IgnoreA swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static IgnoreA[] swigValues = { ignoreA_zero, ignoreA_three, ignoreA_ten, ignoreA_eleven, ignoreA_thirteen, ignoreA_fourteen, ignoreA_twenty, ignoreA_thirty, ignoreA_thirty_two, ignoreA_thirty_three };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class IgnoreB {
    public final static IgnoreTest.IgnoreB ignoreB_eleven = new IgnoreTest.IgnoreB("ignoreB_eleven", (10) + 1);
    public final static IgnoreTest.IgnoreB ignoreB_twelve = new IgnoreTest.IgnoreB("ignoreB_twelve");
    public final static IgnoreTest.IgnoreB ignoreB_thirty_one = new IgnoreTest.IgnoreB("ignoreB_thirty_one", (30) + 1);
    public final static IgnoreTest.IgnoreB ignoreB_thirty_two = new IgnoreTest.IgnoreB("ignoreB_thirty_two");
    public final static IgnoreTest.IgnoreB ignoreB_forty_one = new IgnoreTest.IgnoreB("ignoreB_forty_one", (40) + 1);
    public final static IgnoreTest.IgnoreB ignoreB_forty_two = new IgnoreTest.IgnoreB("ignoreB_forty_two");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static IgnoreB swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + IgnoreB.class + " with value " + swigValue);
    }

    private IgnoreB(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private IgnoreB(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private IgnoreB(String swigName, IgnoreB swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static IgnoreB[] swigValues = { ignoreB_eleven, ignoreB_twelve, ignoreB_thirty_one, ignoreB_thirty_two, ignoreB_forty_one, ignoreB_forty_two };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class IgnoreC {
    public final static IgnoreTest.IgnoreC ignoreC_ten = new IgnoreTest.IgnoreC("ignoreC_ten", 10);
    public final static IgnoreTest.IgnoreC ignoreC_twelve = new IgnoreTest.IgnoreC("ignoreC_twelve", (10) + 2);
    public final static IgnoreTest.IgnoreC ignoreC_twenty = new IgnoreTest.IgnoreC("ignoreC_twenty", 20);
    public final static IgnoreTest.IgnoreC ignoreC_thirty = new IgnoreTest.IgnoreC("ignoreC_thirty", 30);
    public final static IgnoreTest.IgnoreC ignoreC_thirty_two = new IgnoreTest.IgnoreC("ignoreC_thirty_two", (30) + 2);
    public final static IgnoreTest.IgnoreC ignoreC_forty = new IgnoreTest.IgnoreC("ignoreC_forty", 40);
    public final static IgnoreTest.IgnoreC ignoreC_forty_two = new IgnoreTest.IgnoreC("ignoreC_forty_two", (40) + 2);

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static IgnoreC swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + IgnoreC.class + " with value " + swigValue);
    }

    private IgnoreC(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private IgnoreC(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private IgnoreC(String swigName, IgnoreC swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static IgnoreC[] swigValues = { ignoreC_ten, ignoreC_twelve, ignoreC_twenty, ignoreC_thirty, ignoreC_thirty_two, ignoreC_forty, ignoreC_forty_two };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class IgnoreD {
    public final static IgnoreTest.IgnoreD ignoreD_twenty_one = new IgnoreTest.IgnoreD("ignoreD_twenty_one", (20) + 1);
    public final static IgnoreTest.IgnoreD ignoreD_twenty_two = new IgnoreTest.IgnoreD("ignoreD_twenty_two");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static IgnoreD swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + IgnoreD.class + " with value " + swigValue);
    }

    private IgnoreD(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private IgnoreD(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private IgnoreD(String swigName, IgnoreD swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static IgnoreD[] swigValues = { ignoreD_twenty_one, ignoreD_twenty_two };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class IgnoreE {
    public final static IgnoreTest.IgnoreE ignoreE_zero = new IgnoreTest.IgnoreE("ignoreE_zero");
    public final static IgnoreTest.IgnoreE ignoreE_twenty_one = new IgnoreTest.IgnoreE("ignoreE_twenty_one", (20) + 1);
    public final static IgnoreTest.IgnoreE ignoreE_twenty_two = new IgnoreTest.IgnoreE("ignoreE_twenty_two");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static IgnoreE swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + IgnoreE.class + " with value " + swigValue);
    }

    private IgnoreE(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private IgnoreE(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private IgnoreE(String swigName, IgnoreE swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static IgnoreE[] swigValues = { ignoreE_zero, ignoreE_twenty_one, ignoreE_twenty_two };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
