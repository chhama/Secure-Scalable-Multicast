/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package enum_thorough;

public class Obscure {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Obscure(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Obscure obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        enum_thoroughJNI.delete_Obscure(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Obscure() {
    this(enum_thoroughJNI.new_Obscure(), true);
  }

  public final static class Zero {

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Zero swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Zero.class + " with value " + swigValue);
    }

    private Zero(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Zero(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Zero(String swigName, Zero swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Zero[] swigValues = {  };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class One {
    public final static Obscure.One one = new Obscure.One("one");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static One swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + One.class + " with value " + swigValue);
    }

    private One(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private One(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private One(String swigName, One swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static One[] swigValues = { one };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Two {
    public final static Obscure.Two two = new Obscure.Two("two");
    public final static Obscure.Two twoagain = new Obscure.Two("twoagain");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Two swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Two.class + " with value " + swigValue);
    }

    private Two(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Two(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Two(String swigName, Two swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Two[] swigValues = { two, twoagain };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Empty {

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Empty swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Empty.class + " with value " + swigValue);
    }

    private Empty(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Empty(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Empty(String swigName, Empty swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Empty[] swigValues = {  };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AlsoEmpty {

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AlsoEmpty swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AlsoEmpty.class + " with value " + swigValue);
    }

    private AlsoEmpty(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AlsoEmpty(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AlsoEmpty(String swigName, AlsoEmpty swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AlsoEmpty[] swigValues = {  };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
