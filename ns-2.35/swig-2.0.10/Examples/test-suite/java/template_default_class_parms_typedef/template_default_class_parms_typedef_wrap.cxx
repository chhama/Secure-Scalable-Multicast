/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


namespace Space {
  struct SomeType {};
  struct AnotherType {};
  template<typename CC, typename DD = SomeType, typename EE = int> class Bar {
  public:
    typedef CC C;
    typedef DD D;
    typedef EE E;
    C CType;
    D DType;
    E EType;
    // Use typedef with no qualifiers
    Bar(C c, D d, E e) {}
    C method(C c, D d, E e) { return c; }

    // Use typedef with classname qualifiers
    Bar(bool, typename Bar::C c, typename Bar::D d, typename Bar::E e) {}
    typename Bar::C method_1(typename Bar::C c, typename Bar::D d, typename Bar::E e) { return c; }

    // Use typedef with classname and full template parameter qualifiers
    Bar(bool, bool, typename Bar<CC, DD, EE>::C c, typename Bar<CC, DD, EE>::D d, typename Bar<CC, DD, EE>::E e) {}
    typename Bar<CC, DD, EE>::C method_2(typename Bar<CC, DD, EE>::C c, typename Bar<CC, DD, EE>::D d, typename Bar<CC, DD, EE>::E e) { return c; }

    // Use typedef with namespace and classname and full template parameter qualifiers
    Bar(bool, bool, bool, typename Space::Bar<CC, DD, EE>::C c, typename Space::Bar<CC, DD, EE>::D d, typename Space::Bar<CC, DD, EE>::E e) {}
    typename Space::Bar<CC, DD, EE>::C method_3(typename Space::Bar<CC, DD, EE>::C c, typename Space::Bar<CC, DD, EE>::D d, typename Space::Bar<CC, DD, EE>::E e) { return c; }
  };
  template<typename TT = SomeType> class Foo {
  public:
    typedef TT T;
    T TType;

    // Use typedef with no qualifiers
    Foo(T t) {}
    T method(T t) { return t; }

    // Use typedef with classname qualifiers
    Foo(const T &, T t) {}
    typename Foo::T method_A(typename Foo::T t) { return t; }

    // Use typedef with classname and full template parameter qualifiers
    Foo(const typename Foo<TT>::T &, const typename Foo<TT>::T &, typename Foo<TT>::T t) {}
    typename Foo<TT>::T method_B(typename Foo<TT>::T t) { return t; }

    // Use typedef with namespace and classname and full template parameter qualifiers
    Foo(const typename Foo<TT>::T &, const typename Foo<TT>::T &, const typename Foo<TT>::T &, typename Foo<TT>::T t) {}
    typename Foo<TT>::T method_C(typename Foo<TT>::T t) { return t; }
  };
  template<typename T = int> class ATemplate {};

  template<typename T> struct UsesBar {
    void use_A(typename Bar<T>::C, typename Bar<T>::D, typename Bar<T>::E) {}
    void use_B(const typename Bar<T>::C &, const typename Bar<T>::D &, const typename Bar<T>::E &) {}
    void use_C(typename Space::Bar<T>::C, typename Space::Bar<T>::D, typename Space::Bar<T>::E) {}
    void use_D(const typename Space::Bar<T>::C &, const typename Space::Bar<T>::D &, const typename Space::Bar<T>::E &) {}
  };
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1SomeType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::SomeType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::SomeType *)new Space::SomeType();
  *(Space::SomeType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_delete_1SomeType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::SomeType *arg1 = (Space::SomeType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::SomeType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1AnotherType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::AnotherType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::AnotherType *)new Space::AnotherType();
  *(Space::AnotherType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_delete_1AnotherType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::AnotherType *arg1 = (Space::AnotherType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::AnotherType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultBar_1CType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Space::Bar< double > *arg1 = (Space::Bar< double > *) 0 ;
  Space::Bar< double >::C arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Bar< double > **)&jarg1; 
  arg2 = (Space::Bar< double >::C)jarg2; 
  if (arg1) (arg1)->CType = arg2;
}


SWIGEXPORT jdouble JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultBar_1CType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Space::Bar< double > *arg1 = (Space::Bar< double > *) 0 ;
  Space::Bar< double >::C result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Bar< double > **)&jarg1; 
  result = (Space::Bar< double >::C) ((arg1)->CType);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultBar_1DType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::Bar< double > *arg1 = (Space::Bar< double > *) 0 ;
  Space::Bar< double >::D *arg2 = (Space::Bar< double >::D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Bar< double > **)&jarg1; 
  arg2 = *(Space::Bar< double >::D **)&jarg2; 
  if (arg1) (arg1)->DType = *arg2;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultBar_1DType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Bar< double > *arg1 = (Space::Bar< double > *) 0 ;
  Space::Bar< double >::D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Bar< double > **)&jarg1; 
  result = (Space::Bar< double >::D *)& ((arg1)->DType);
  *(Space::Bar< double >::D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultBar_1EType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Space::Bar< double > *arg1 = (Space::Bar< double > *) 0 ;
  Space::Bar< double >::E arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Bar< double > **)&jarg1; 
  arg2 = (Space::Bar< double >::E)jarg2; 
  if (arg1) (arg1)->EType = arg2;
}


SWIGEXPORT jint JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultBar_1EType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Space::Bar< double > *arg1 = (Space::Bar< double > *) 0 ;
  Space::Bar< double >::E result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Bar< double > **)&jarg1; 
  result = (Space::Bar< double >::E) ((arg1)->EType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1DefaultBar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  Space::Bar< double >::C arg1 ;
  Space::Bar< double >::D arg2 ;
  Space::Bar< double >::E arg3 ;
  Space::Bar< double >::D *argp2 ;
  Space::Bar< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (Space::Bar< double >::C)jarg1; 
  argp2 = *(Space::Bar< double >::D **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< double >::D");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Space::Bar< double >::E)jarg3; 
  result = (Space::Bar< double > *)new Space::Bar< double >(arg1,arg2,arg3);
  *(Space::Bar< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultBar_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  Space::Bar< double > *arg1 = (Space::Bar< double > *) 0 ;
  Space::Bar< double >::C arg2 ;
  Space::Bar< double >::D arg3 ;
  Space::Bar< double >::E arg4 ;
  Space::Bar< double >::D *argp3 ;
  Space::Bar< double >::C result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Space::Bar< double > **)&jarg1; 
  arg2 = (Space::Bar< double >::C)jarg2; 
  argp3 = *(Space::Bar< double >::D **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< double >::D");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (Space::Bar< double >::E)jarg4; 
  result = (Space::Bar< double >::C)(arg1)->method(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1DefaultBar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  bool arg1 ;
  Space::Bar< double,Space::SomeType,int >::C arg2 ;
  Space::Bar< double,Space::SomeType,int >::D arg3 ;
  Space::Bar< double,Space::SomeType,int >::E arg4 ;
  Space::Bar< double,Space::SomeType,int >::D *argp3 ;
  Space::Bar< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = jarg1 ? true : false; 
  arg2 = (Space::Bar< double,Space::SomeType,int >::C)jarg2; 
  argp3 = *(Space::Bar< double,Space::SomeType,int >::D **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< double,Space::SomeType,int >::D");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (Space::Bar< double,Space::SomeType,int >::E)jarg4; 
  result = (Space::Bar< double > *)new Space::Bar< double >(arg1,arg2,arg3,arg4);
  *(Space::Bar< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultBar_1method_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  Space::Bar< double > *arg1 = (Space::Bar< double > *) 0 ;
  Space::Bar< double,Space::SomeType,int >::C arg2 ;
  Space::Bar< double,Space::SomeType,int >::D arg3 ;
  Space::Bar< double,Space::SomeType,int >::E arg4 ;
  Space::Bar< double,Space::SomeType,int >::D *argp3 ;
  Space::Bar< double,Space::SomeType,int >::C result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Space::Bar< double > **)&jarg1; 
  arg2 = (Space::Bar< double,Space::SomeType,int >::C)jarg2; 
  argp3 = *(Space::Bar< double,Space::SomeType,int >::D **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< double,Space::SomeType,int >::D");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (Space::Bar< double,Space::SomeType,int >::E)jarg4; 
  result = (Space::Bar< double,Space::SomeType,int >::C)(arg1)->method_1(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1DefaultBar_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  Space::Bar< double,Space::SomeType,int >::C arg3 ;
  Space::Bar< double,Space::SomeType,int >::D arg4 ;
  Space::Bar< double,Space::SomeType,int >::E arg5 ;
  Space::Bar< double,Space::SomeType,int >::D *argp4 ;
  Space::Bar< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = (Space::Bar< double,Space::SomeType,int >::C)jarg3; 
  argp4 = *(Space::Bar< double,Space::SomeType,int >::D **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< double,Space::SomeType,int >::D");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (Space::Bar< double,Space::SomeType,int >::E)jarg5; 
  result = (Space::Bar< double > *)new Space::Bar< double >(arg1,arg2,arg3,arg4,arg5);
  *(Space::Bar< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultBar_1method_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  Space::Bar< double > *arg1 = (Space::Bar< double > *) 0 ;
  Space::Bar< double,Space::SomeType,int >::C arg2 ;
  Space::Bar< double,Space::SomeType,int >::D arg3 ;
  Space::Bar< double,Space::SomeType,int >::E arg4 ;
  Space::Bar< double,Space::SomeType,int >::D *argp3 ;
  Space::Bar< double,Space::SomeType,int >::C result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Space::Bar< double > **)&jarg1; 
  arg2 = (Space::Bar< double,Space::SomeType,int >::C)jarg2; 
  argp3 = *(Space::Bar< double,Space::SomeType,int >::D **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< double,Space::SomeType,int >::D");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (Space::Bar< double,Space::SomeType,int >::E)jarg4; 
  result = (Space::Bar< double,Space::SomeType,int >::C)(arg1)->method_2(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1DefaultBar_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2, jboolean jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  bool arg3 ;
  Space::Bar< double,Space::SomeType,int >::C arg4 ;
  Space::Bar< double,Space::SomeType,int >::D arg5 ;
  Space::Bar< double,Space::SomeType,int >::E arg6 ;
  Space::Bar< double,Space::SomeType,int >::D *argp5 ;
  Space::Bar< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Space::Bar< double,Space::SomeType,int >::C)jarg4; 
  argp5 = *(Space::Bar< double,Space::SomeType,int >::D **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< double,Space::SomeType,int >::D");
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (Space::Bar< double,Space::SomeType,int >::E)jarg6; 
  result = (Space::Bar< double > *)new Space::Bar< double >(arg1,arg2,arg3,arg4,arg5,arg6);
  *(Space::Bar< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultBar_1method_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jdouble jresult = 0 ;
  Space::Bar< double > *arg1 = (Space::Bar< double > *) 0 ;
  Space::Bar< double,Space::SomeType,int >::C arg2 ;
  Space::Bar< double,Space::SomeType,int >::D arg3 ;
  Space::Bar< double,Space::SomeType,int >::E arg4 ;
  Space::Bar< double,Space::SomeType,int >::D *argp3 ;
  Space::Bar< double,Space::SomeType,int >::C result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Space::Bar< double > **)&jarg1; 
  arg2 = (Space::Bar< double,Space::SomeType,int >::C)jarg2; 
  argp3 = *(Space::Bar< double,Space::SomeType,int >::D **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< double,Space::SomeType,int >::D");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (Space::Bar< double,Space::SomeType,int >::E)jarg4; 
  result = (Space::Bar< double,Space::SomeType,int >::C)(arg1)->method_3(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_delete_1DefaultBar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Bar< double > *arg1 = (Space::Bar< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::Bar< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultFoo_1TType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::Foo< > *arg1 = (Space::Foo< > *) 0 ;
  Space::Foo< >::T *arg2 = (Space::Foo< >::T *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Foo< > **)&jarg1; 
  arg2 = *(Space::Foo< >::T **)&jarg2; 
  if (arg1) (arg1)->TType = *arg2;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultFoo_1TType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Foo< > *arg1 = (Space::Foo< > *) 0 ;
  Space::Foo< >::T *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Foo< > **)&jarg1; 
  result = (Space::Foo< >::T *)& ((arg1)->TType);
  *(Space::Foo< >::T **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1DefaultFoo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Foo< >::T arg1 ;
  Space::Foo< >::T *argp1 ;
  Space::Foo< > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Space::Foo< >::T **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< >::T");
    return 0;
  }
  arg1 = *argp1; 
  result = (Space::Foo< > *)new Space::Foo< >(arg1);
  *(Space::Foo< > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultFoo_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Space::Foo< > *arg1 = (Space::Foo< > *) 0 ;
  Space::Foo< >::T arg2 ;
  Space::Foo< >::T *argp2 ;
  Space::Foo< >::T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Foo< > **)&jarg1; 
  argp2 = *(Space::Foo< >::T **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< >::T");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->method(arg2);
  *(Space::Foo< >::T **)&jresult = new Space::Foo< >::T((const Space::Foo< >::T &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1DefaultFoo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Space::Foo< >::T *arg1 = 0 ;
  Space::Foo< >::T arg2 ;
  Space::Foo< >::T *argp2 ;
  Space::Foo< > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Foo< >::T **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Foo< >::T const & reference is null");
    return 0;
  } 
  argp2 = *(Space::Foo< >::T **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< >::T");
    return 0;
  }
  arg2 = *argp2; 
  result = (Space::Foo< > *)new Space::Foo< >((Space::Foo< >::T const &)*arg1,arg2);
  *(Space::Foo< > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultFoo_1method_1A(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Space::Foo< > *arg1 = (Space::Foo< > *) 0 ;
  Space::Foo< Space::SomeType >::T arg2 ;
  Space::Foo< Space::SomeType >::T *argp2 ;
  Space::Foo< Space::SomeType >::T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Foo< > **)&jarg1; 
  argp2 = *(Space::Foo< Space::SomeType >::T **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< Space::SomeType >::T");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->method_A(arg2);
  *(Space::Foo< Space::SomeType >::T **)&jresult = new Space::Foo< Space::SomeType >::T((const Space::Foo< Space::SomeType >::T &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1DefaultFoo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Space::Foo< Space::SomeType >::T *arg1 = 0 ;
  Space::Foo< Space::SomeType >::T *arg2 = 0 ;
  Space::Foo< Space::SomeType >::T arg3 ;
  Space::Foo< Space::SomeType >::T *argp3 ;
  Space::Foo< > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Space::Foo< Space::SomeType >::T **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Foo< Space::SomeType >::T const & reference is null");
    return 0;
  } 
  arg2 = *(Space::Foo< Space::SomeType >::T **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Foo< Space::SomeType >::T const & reference is null");
    return 0;
  } 
  argp3 = *(Space::Foo< Space::SomeType >::T **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< Space::SomeType >::T");
    return 0;
  }
  arg3 = *argp3; 
  result = (Space::Foo< > *)new Space::Foo< >((Space::Foo< Space::SomeType >::T const &)*arg1,(Space::Foo< Space::SomeType >::T const &)*arg2,arg3);
  *(Space::Foo< > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultFoo_1method_1B(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Space::Foo< > *arg1 = (Space::Foo< > *) 0 ;
  Space::Foo< Space::SomeType >::T arg2 ;
  Space::Foo< Space::SomeType >::T *argp2 ;
  Space::Foo< Space::SomeType >::T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Foo< > **)&jarg1; 
  argp2 = *(Space::Foo< Space::SomeType >::T **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< Space::SomeType >::T");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->method_B(arg2);
  *(Space::Foo< Space::SomeType >::T **)&jresult = new Space::Foo< Space::SomeType >::T((const Space::Foo< Space::SomeType >::T &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1DefaultFoo_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Space::Foo< Space::SomeType >::T *arg1 = 0 ;
  Space::Foo< Space::SomeType >::T *arg2 = 0 ;
  Space::Foo< Space::SomeType >::T *arg3 = 0 ;
  Space::Foo< Space::SomeType >::T arg4 ;
  Space::Foo< Space::SomeType >::T *argp4 ;
  Space::Foo< > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Space::Foo< Space::SomeType >::T **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Foo< Space::SomeType >::T const & reference is null");
    return 0;
  } 
  arg2 = *(Space::Foo< Space::SomeType >::T **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Foo< Space::SomeType >::T const & reference is null");
    return 0;
  } 
  arg3 = *(Space::Foo< Space::SomeType >::T **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Foo< Space::SomeType >::T const & reference is null");
    return 0;
  } 
  argp4 = *(Space::Foo< Space::SomeType >::T **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< Space::SomeType >::T");
    return 0;
  }
  arg4 = *argp4; 
  result = (Space::Foo< > *)new Space::Foo< >((Space::Foo< Space::SomeType >::T const &)*arg1,(Space::Foo< Space::SomeType >::T const &)*arg2,(Space::Foo< Space::SomeType >::T const &)*arg3,arg4);
  *(Space::Foo< > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_DefaultFoo_1method_1C(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Space::Foo< > *arg1 = (Space::Foo< > *) 0 ;
  Space::Foo< Space::SomeType >::T arg2 ;
  Space::Foo< Space::SomeType >::T *argp2 ;
  Space::Foo< Space::SomeType >::T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Foo< > **)&jarg1; 
  argp2 = *(Space::Foo< Space::SomeType >::T **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< Space::SomeType >::T");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->method_C(arg2);
  *(Space::Foo< Space::SomeType >::T **)&jresult = new Space::Foo< Space::SomeType >::T((const Space::Foo< Space::SomeType >::T &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_delete_1DefaultFoo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Foo< > *arg1 = (Space::Foo< > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::Foo< > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_BarAnotherTypeBool_1CType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::Bar< Space::AnotherType,bool > *arg1 = (Space::Bar< Space::AnotherType,bool > *) 0 ;
  Space::Bar< Space::AnotherType,bool >::C *arg2 = (Space::Bar< Space::AnotherType,bool >::C *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Bar< Space::AnotherType,bool > **)&jarg1; 
  arg2 = *(Space::Bar< Space::AnotherType,bool >::C **)&jarg2; 
  if (arg1) (arg1)->CType = *arg2;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_BarAnotherTypeBool_1CType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Bar< Space::AnotherType,bool > *arg1 = (Space::Bar< Space::AnotherType,bool > *) 0 ;
  Space::Bar< Space::AnotherType,bool >::C *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Bar< Space::AnotherType,bool > **)&jarg1; 
  result = (Space::Bar< Space::AnotherType,bool >::C *)& ((arg1)->CType);
  *(Space::Bar< Space::AnotherType,bool >::C **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_BarAnotherTypeBool_1DType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Space::Bar< Space::AnotherType,bool > *arg1 = (Space::Bar< Space::AnotherType,bool > *) 0 ;
  Space::Bar< Space::AnotherType,bool >::D arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Bar< Space::AnotherType,bool > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DType = arg2;
}


SWIGEXPORT jboolean JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_BarAnotherTypeBool_1DType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Space::Bar< Space::AnotherType,bool > *arg1 = (Space::Bar< Space::AnotherType,bool > *) 0 ;
  Space::Bar< Space::AnotherType,bool >::D result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Bar< Space::AnotherType,bool > **)&jarg1; 
  result = (Space::Bar< Space::AnotherType,bool >::D) ((arg1)->DType);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_BarAnotherTypeBool_1EType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Space::Bar< Space::AnotherType,bool > *arg1 = (Space::Bar< Space::AnotherType,bool > *) 0 ;
  Space::Bar< Space::AnotherType,bool >::E arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Bar< Space::AnotherType,bool > **)&jarg1; 
  arg2 = (Space::Bar< Space::AnotherType,bool >::E)jarg2; 
  if (arg1) (arg1)->EType = arg2;
}


SWIGEXPORT jint JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_BarAnotherTypeBool_1EType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Space::Bar< Space::AnotherType,bool > *arg1 = (Space::Bar< Space::AnotherType,bool > *) 0 ;
  Space::Bar< Space::AnotherType,bool >::E result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Bar< Space::AnotherType,bool > **)&jarg1; 
  result = (Space::Bar< Space::AnotherType,bool >::E) ((arg1)->EType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1BarAnotherTypeBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  jlong jresult = 0 ;
  Space::Bar< Space::AnotherType,bool >::C arg1 ;
  Space::Bar< Space::AnotherType,bool >::D arg2 ;
  Space::Bar< Space::AnotherType,bool >::E arg3 ;
  Space::Bar< Space::AnotherType,bool >::C *argp1 ;
  Space::Bar< Space::AnotherType,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Space::Bar< Space::AnotherType,bool >::C **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< Space::AnotherType,bool >::C");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (Space::Bar< Space::AnotherType,bool >::E)jarg3; 
  result = (Space::Bar< Space::AnotherType,bool > *)new Space::Bar< Space::AnotherType,bool >(arg1,arg2,arg3);
  *(Space::Bar< Space::AnotherType,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_BarAnotherTypeBool_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jlong jresult = 0 ;
  Space::Bar< Space::AnotherType,bool > *arg1 = (Space::Bar< Space::AnotherType,bool > *) 0 ;
  Space::Bar< Space::AnotherType,bool >::C arg2 ;
  Space::Bar< Space::AnotherType,bool >::D arg3 ;
  Space::Bar< Space::AnotherType,bool >::E arg4 ;
  Space::Bar< Space::AnotherType,bool >::C *argp2 ;
  Space::Bar< Space::AnotherType,bool >::C result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Bar< Space::AnotherType,bool > **)&jarg1; 
  argp2 = *(Space::Bar< Space::AnotherType,bool >::C **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< Space::AnotherType,bool >::C");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Space::Bar< Space::AnotherType,bool >::E)jarg4; 
  result = (arg1)->method(arg2,arg3,arg4);
  *(Space::Bar< Space::AnotherType,bool >::C **)&jresult = new Space::Bar< Space::AnotherType,bool >::C((const Space::Bar< Space::AnotherType,bool >::C &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1BarAnotherTypeBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jlong jresult = 0 ;
  bool arg1 ;
  Space::Bar< Space::AnotherType,bool,int >::C arg2 ;
  Space::Bar< Space::AnotherType,bool,int >::D arg3 ;
  Space::Bar< Space::AnotherType,bool,int >::E arg4 ;
  Space::Bar< Space::AnotherType,bool,int >::C *argp2 ;
  Space::Bar< Space::AnotherType,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1 ? true : false; 
  argp2 = *(Space::Bar< Space::AnotherType,bool,int >::C **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< Space::AnotherType,bool,int >::C");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Space::Bar< Space::AnotherType,bool,int >::E)jarg4; 
  result = (Space::Bar< Space::AnotherType,bool > *)new Space::Bar< Space::AnotherType,bool >(arg1,arg2,arg3,arg4);
  *(Space::Bar< Space::AnotherType,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_BarAnotherTypeBool_1method_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jlong jresult = 0 ;
  Space::Bar< Space::AnotherType,bool > *arg1 = (Space::Bar< Space::AnotherType,bool > *) 0 ;
  Space::Bar< Space::AnotherType,bool,int >::C arg2 ;
  Space::Bar< Space::AnotherType,bool,int >::D arg3 ;
  Space::Bar< Space::AnotherType,bool,int >::E arg4 ;
  Space::Bar< Space::AnotherType,bool,int >::C *argp2 ;
  Space::Bar< Space::AnotherType,bool,int >::C result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Bar< Space::AnotherType,bool > **)&jarg1; 
  argp2 = *(Space::Bar< Space::AnotherType,bool,int >::C **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< Space::AnotherType,bool,int >::C");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Space::Bar< Space::AnotherType,bool,int >::E)jarg4; 
  result = (arg1)->method_1(arg2,arg3,arg4);
  *(Space::Bar< Space::AnotherType,bool,int >::C **)&jresult = new Space::Bar< Space::AnotherType,bool,int >::C((const Space::Bar< Space::AnotherType,bool,int >::C &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1BarAnotherTypeBool_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4, jint jarg5) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  Space::Bar< Space::AnotherType,bool,int >::C arg3 ;
  Space::Bar< Space::AnotherType,bool,int >::D arg4 ;
  Space::Bar< Space::AnotherType,bool,int >::E arg5 ;
  Space::Bar< Space::AnotherType,bool,int >::C *argp3 ;
  Space::Bar< Space::AnotherType,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  argp3 = *(Space::Bar< Space::AnotherType,bool,int >::C **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< Space::AnotherType,bool,int >::C");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (Space::Bar< Space::AnotherType,bool,int >::E)jarg5; 
  result = (Space::Bar< Space::AnotherType,bool > *)new Space::Bar< Space::AnotherType,bool >(arg1,arg2,arg3,arg4,arg5);
  *(Space::Bar< Space::AnotherType,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_BarAnotherTypeBool_1method_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jlong jresult = 0 ;
  Space::Bar< Space::AnotherType,bool > *arg1 = (Space::Bar< Space::AnotherType,bool > *) 0 ;
  Space::Bar< Space::AnotherType,bool,int >::C arg2 ;
  Space::Bar< Space::AnotherType,bool,int >::D arg3 ;
  Space::Bar< Space::AnotherType,bool,int >::E arg4 ;
  Space::Bar< Space::AnotherType,bool,int >::C *argp2 ;
  Space::Bar< Space::AnotherType,bool,int >::C result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Bar< Space::AnotherType,bool > **)&jarg1; 
  argp2 = *(Space::Bar< Space::AnotherType,bool,int >::C **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< Space::AnotherType,bool,int >::C");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Space::Bar< Space::AnotherType,bool,int >::E)jarg4; 
  result = (arg1)->method_2(arg2,arg3,arg4);
  *(Space::Bar< Space::AnotherType,bool,int >::C **)&jresult = new Space::Bar< Space::AnotherType,bool,int >::C((const Space::Bar< Space::AnotherType,bool,int >::C &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1BarAnotherTypeBool_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jboolean jarg1, jboolean jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jint jarg6) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool arg2 ;
  bool arg3 ;
  Space::Bar< Space::AnotherType,bool,int >::C arg4 ;
  Space::Bar< Space::AnotherType,bool,int >::D arg5 ;
  Space::Bar< Space::AnotherType,bool,int >::E arg6 ;
  Space::Bar< Space::AnotherType,bool,int >::C *argp4 ;
  Space::Bar< Space::AnotherType,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  argp4 = *(Space::Bar< Space::AnotherType,bool,int >::C **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< Space::AnotherType,bool,int >::C");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (Space::Bar< Space::AnotherType,bool,int >::E)jarg6; 
  result = (Space::Bar< Space::AnotherType,bool > *)new Space::Bar< Space::AnotherType,bool >(arg1,arg2,arg3,arg4,arg5,arg6);
  *(Space::Bar< Space::AnotherType,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_BarAnotherTypeBool_1method_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  jlong jresult = 0 ;
  Space::Bar< Space::AnotherType,bool > *arg1 = (Space::Bar< Space::AnotherType,bool > *) 0 ;
  Space::Bar< Space::AnotherType,bool,int >::C arg2 ;
  Space::Bar< Space::AnotherType,bool,int >::D arg3 ;
  Space::Bar< Space::AnotherType,bool,int >::E arg4 ;
  Space::Bar< Space::AnotherType,bool,int >::C *argp2 ;
  Space::Bar< Space::AnotherType,bool,int >::C result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Bar< Space::AnotherType,bool > **)&jarg1; 
  argp2 = *(Space::Bar< Space::AnotherType,bool,int >::C **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< Space::AnotherType,bool,int >::C");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Space::Bar< Space::AnotherType,bool,int >::E)jarg4; 
  result = (arg1)->method_3(arg2,arg3,arg4);
  *(Space::Bar< Space::AnotherType,bool,int >::C **)&jresult = new Space::Bar< Space::AnotherType,bool,int >::C((const Space::Bar< Space::AnotherType,bool,int >::C &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_delete_1BarAnotherTypeBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Bar< Space::AnotherType,bool > *arg1 = (Space::Bar< Space::AnotherType,bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::Bar< Space::AnotherType,bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_FooAnotherType_1TType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::Foo< Space::AnotherType > *arg1 = (Space::Foo< Space::AnotherType > *) 0 ;
  Space::Foo< Space::AnotherType >::T *arg2 = (Space::Foo< Space::AnotherType >::T *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Foo< Space::AnotherType > **)&jarg1; 
  arg2 = *(Space::Foo< Space::AnotherType >::T **)&jarg2; 
  if (arg1) (arg1)->TType = *arg2;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_FooAnotherType_1TType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Foo< Space::AnotherType > *arg1 = (Space::Foo< Space::AnotherType > *) 0 ;
  Space::Foo< Space::AnotherType >::T *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Foo< Space::AnotherType > **)&jarg1; 
  result = (Space::Foo< Space::AnotherType >::T *)& ((arg1)->TType);
  *(Space::Foo< Space::AnotherType >::T **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1FooAnotherType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Foo< Space::AnotherType >::T arg1 ;
  Space::Foo< Space::AnotherType >::T *argp1 ;
  Space::Foo< Space::AnotherType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Space::Foo< Space::AnotherType >::T **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< Space::AnotherType >::T");
    return 0;
  }
  arg1 = *argp1; 
  result = (Space::Foo< Space::AnotherType > *)new Space::Foo< Space::AnotherType >(arg1);
  *(Space::Foo< Space::AnotherType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_FooAnotherType_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Space::Foo< Space::AnotherType > *arg1 = (Space::Foo< Space::AnotherType > *) 0 ;
  Space::Foo< Space::AnotherType >::T arg2 ;
  Space::Foo< Space::AnotherType >::T *argp2 ;
  Space::Foo< Space::AnotherType >::T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Foo< Space::AnotherType > **)&jarg1; 
  argp2 = *(Space::Foo< Space::AnotherType >::T **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< Space::AnotherType >::T");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->method(arg2);
  *(Space::Foo< Space::AnotherType >::T **)&jresult = new Space::Foo< Space::AnotherType >::T((const Space::Foo< Space::AnotherType >::T &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1FooAnotherType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Space::Foo< Space::AnotherType >::T *arg1 = 0 ;
  Space::Foo< Space::AnotherType >::T arg2 ;
  Space::Foo< Space::AnotherType >::T *argp2 ;
  Space::Foo< Space::AnotherType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Foo< Space::AnotherType >::T **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Foo< Space::AnotherType >::T const & reference is null");
    return 0;
  } 
  argp2 = *(Space::Foo< Space::AnotherType >::T **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< Space::AnotherType >::T");
    return 0;
  }
  arg2 = *argp2; 
  result = (Space::Foo< Space::AnotherType > *)new Space::Foo< Space::AnotherType >((Space::Foo< Space::AnotherType >::T const &)*arg1,arg2);
  *(Space::Foo< Space::AnotherType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_FooAnotherType_1method_1A(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Space::Foo< Space::AnotherType > *arg1 = (Space::Foo< Space::AnotherType > *) 0 ;
  Space::Foo< Space::AnotherType >::T arg2 ;
  Space::Foo< Space::AnotherType >::T *argp2 ;
  Space::Foo< Space::AnotherType >::T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Foo< Space::AnotherType > **)&jarg1; 
  argp2 = *(Space::Foo< Space::AnotherType >::T **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< Space::AnotherType >::T");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->method_A(arg2);
  *(Space::Foo< Space::AnotherType >::T **)&jresult = new Space::Foo< Space::AnotherType >::T((const Space::Foo< Space::AnotherType >::T &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1FooAnotherType_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Space::Foo< Space::AnotherType >::T *arg1 = 0 ;
  Space::Foo< Space::AnotherType >::T *arg2 = 0 ;
  Space::Foo< Space::AnotherType >::T arg3 ;
  Space::Foo< Space::AnotherType >::T *argp3 ;
  Space::Foo< Space::AnotherType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Space::Foo< Space::AnotherType >::T **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Foo< Space::AnotherType >::T const & reference is null");
    return 0;
  } 
  arg2 = *(Space::Foo< Space::AnotherType >::T **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Foo< Space::AnotherType >::T const & reference is null");
    return 0;
  } 
  argp3 = *(Space::Foo< Space::AnotherType >::T **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< Space::AnotherType >::T");
    return 0;
  }
  arg3 = *argp3; 
  result = (Space::Foo< Space::AnotherType > *)new Space::Foo< Space::AnotherType >((Space::Foo< Space::AnotherType >::T const &)*arg1,(Space::Foo< Space::AnotherType >::T const &)*arg2,arg3);
  *(Space::Foo< Space::AnotherType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_FooAnotherType_1method_1B(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Space::Foo< Space::AnotherType > *arg1 = (Space::Foo< Space::AnotherType > *) 0 ;
  Space::Foo< Space::AnotherType >::T arg2 ;
  Space::Foo< Space::AnotherType >::T *argp2 ;
  Space::Foo< Space::AnotherType >::T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Foo< Space::AnotherType > **)&jarg1; 
  argp2 = *(Space::Foo< Space::AnotherType >::T **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< Space::AnotherType >::T");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->method_B(arg2);
  *(Space::Foo< Space::AnotherType >::T **)&jresult = new Space::Foo< Space::AnotherType >::T((const Space::Foo< Space::AnotherType >::T &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1FooAnotherType_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Space::Foo< Space::AnotherType >::T *arg1 = 0 ;
  Space::Foo< Space::AnotherType >::T *arg2 = 0 ;
  Space::Foo< Space::AnotherType >::T *arg3 = 0 ;
  Space::Foo< Space::AnotherType >::T arg4 ;
  Space::Foo< Space::AnotherType >::T *argp4 ;
  Space::Foo< Space::AnotherType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Space::Foo< Space::AnotherType >::T **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Foo< Space::AnotherType >::T const & reference is null");
    return 0;
  } 
  arg2 = *(Space::Foo< Space::AnotherType >::T **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Foo< Space::AnotherType >::T const & reference is null");
    return 0;
  } 
  arg3 = *(Space::Foo< Space::AnotherType >::T **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Foo< Space::AnotherType >::T const & reference is null");
    return 0;
  } 
  argp4 = *(Space::Foo< Space::AnotherType >::T **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< Space::AnotherType >::T");
    return 0;
  }
  arg4 = *argp4; 
  result = (Space::Foo< Space::AnotherType > *)new Space::Foo< Space::AnotherType >((Space::Foo< Space::AnotherType >::T const &)*arg1,(Space::Foo< Space::AnotherType >::T const &)*arg2,(Space::Foo< Space::AnotherType >::T const &)*arg3,arg4);
  *(Space::Foo< Space::AnotherType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_FooAnotherType_1method_1C(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Space::Foo< Space::AnotherType > *arg1 = (Space::Foo< Space::AnotherType > *) 0 ;
  Space::Foo< Space::AnotherType >::T arg2 ;
  Space::Foo< Space::AnotherType >::T *argp2 ;
  Space::Foo< Space::AnotherType >::T result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::Foo< Space::AnotherType > **)&jarg1; 
  argp2 = *(Space::Foo< Space::AnotherType >::T **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Foo< Space::AnotherType >::T");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->method_C(arg2);
  *(Space::Foo< Space::AnotherType >::T **)&jresult = new Space::Foo< Space::AnotherType >::T((const Space::Foo< Space::AnotherType >::T &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_delete_1FooAnotherType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Foo< Space::AnotherType > *arg1 = (Space::Foo< Space::AnotherType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::Foo< Space::AnotherType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_UsesBarDouble_1use_1A(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  Space::UsesBar< double > *arg1 = (Space::UsesBar< double > *) 0 ;
  Space::Bar< double,Space::SomeType,int >::C arg2 ;
  Space::Bar< double,Space::SomeType,int >::D arg3 ;
  Space::Bar< double,Space::SomeType,int >::E arg4 ;
  Space::Bar< double,Space::SomeType,int >::D *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Space::UsesBar< double > **)&jarg1; 
  arg2 = (Space::Bar< double,Space::SomeType,int >::C)jarg2; 
  argp3 = *(Space::Bar< double,Space::SomeType,int >::D **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< double,Space::SomeType,int >::D");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (Space::Bar< double,Space::SomeType,int >::E)jarg4; 
  (arg1)->use_A(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_UsesBarDouble_1use_1B(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  Space::UsesBar< double > *arg1 = (Space::UsesBar< double > *) 0 ;
  Space::Bar< double,Space::SomeType,int >::C *arg2 = 0 ;
  Space::Bar< double,Space::SomeType,int >::D *arg3 = 0 ;
  Space::Bar< double,Space::SomeType,int >::E *arg4 = 0 ;
  Space::Bar< double,Space::SomeType,int >::C temp2 ;
  Space::Bar< double,Space::SomeType,int >::E temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Space::UsesBar< double > **)&jarg1; 
  temp2 = (Space::Bar< double,Space::SomeType,int >::C)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Space::Bar< double,Space::SomeType,int >::D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Bar< double,Space::SomeType,int >::D const & reference is null");
    return ;
  } 
  temp4 = (Space::Bar< double,Space::SomeType,int >::E)jarg4; 
  arg4 = &temp4; 
  (arg1)->use_B((Space::Bar< double,Space::SomeType,int >::C const &)*arg2,(Space::Bar< double,Space::SomeType,int >::D const &)*arg3,(Space::Bar< double,Space::SomeType,int >::E const &)*arg4);
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_UsesBarDouble_1use_1C(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  Space::UsesBar< double > *arg1 = (Space::UsesBar< double > *) 0 ;
  Space::Bar< double,Space::SomeType,int >::C arg2 ;
  Space::Bar< double,Space::SomeType,int >::D arg3 ;
  Space::Bar< double,Space::SomeType,int >::E arg4 ;
  Space::Bar< double,Space::SomeType,int >::D *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Space::UsesBar< double > **)&jarg1; 
  arg2 = (Space::Bar< double,Space::SomeType,int >::C)jarg2; 
  argp3 = *(Space::Bar< double,Space::SomeType,int >::D **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Bar< double,Space::SomeType,int >::D");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (Space::Bar< double,Space::SomeType,int >::E)jarg4; 
  (arg1)->use_C(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_UsesBarDouble_1use_1D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  Space::UsesBar< double > *arg1 = (Space::UsesBar< double > *) 0 ;
  Space::Bar< double,Space::SomeType,int >::C *arg2 = 0 ;
  Space::Bar< double,Space::SomeType,int >::D *arg3 = 0 ;
  Space::Bar< double,Space::SomeType,int >::E *arg4 = 0 ;
  Space::Bar< double,Space::SomeType,int >::C temp2 ;
  Space::Bar< double,Space::SomeType,int >::E temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Space::UsesBar< double > **)&jarg1; 
  temp2 = (Space::Bar< double,Space::SomeType,int >::C)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Space::Bar< double,Space::SomeType,int >::D **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Bar< double,Space::SomeType,int >::D const & reference is null");
    return ;
  } 
  temp4 = (Space::Bar< double,Space::SomeType,int >::E)jarg4; 
  arg4 = &temp4; 
  (arg1)->use_D((Space::Bar< double,Space::SomeType,int >::C const &)*arg2,(Space::Bar< double,Space::SomeType,int >::D const &)*arg3,(Space::Bar< double,Space::SomeType,int >::E const &)*arg4);
}


SWIGEXPORT jlong JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_new_1UsesBarDouble(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::UsesBar< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::UsesBar< double > *)new Space::UsesBar< double >();
  *(Space::UsesBar< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1class_1parms_1typedef_template_1default_1class_1parms_1typedefJNI_delete_1UsesBarDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::UsesBar< double > *arg1 = (Space::UsesBar< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::UsesBar< double > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

