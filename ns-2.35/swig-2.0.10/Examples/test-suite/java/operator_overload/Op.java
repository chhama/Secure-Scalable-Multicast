/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package operator_overload;

public class Op {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Op(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Op obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        operator_overloadJNI.delete_Op(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setI(int value) {
    operator_overloadJNI.Op_i_set(swigCPtr, this, value);
  }

  public int getI() {
    return operator_overloadJNI.Op_i_get(swigCPtr, this);
  }

  public Op(int a) {
    this(operator_overloadJNI.new_Op__SWIG_0(a), true);
  }

  public Op() {
    this(operator_overloadJNI.new_Op__SWIG_1(), true);
  }

  public Op(Op o) {
    this(operator_overloadJNI.new_Op__SWIG_2(Op.getCPtr(o), o), true);
  }

  public Op Equal(Op o) {
    return new Op(operator_overloadJNI.Op_Equal(swigCPtr, this, Op.getCPtr(o), o), false);
  }

  public void PlusEqual(Op o) {
    operator_overloadJNI.Op_PlusEqual(swigCPtr, this, Op.getCPtr(o), o);
  }

  public void MinusEqual(Op o) {
    operator_overloadJNI.Op_MinusEqual(swigCPtr, this, Op.getCPtr(o), o);
  }

  public void MultiplyEqual(Op o) {
    operator_overloadJNI.Op_MultiplyEqual(swigCPtr, this, Op.getCPtr(o), o);
  }

  public void DivideEqual(Op o) {
    operator_overloadJNI.Op_DivideEqual(swigCPtr, this, Op.getCPtr(o), o);
  }

  public void PercentEqual(Op o) {
    operator_overloadJNI.Op_PercentEqual(swigCPtr, this, Op.getCPtr(o), o);
  }

  public Op Minus() {
    return new Op(operator_overloadJNI.Op_Minus__SWIG_0(swigCPtr, this), true);
  }

  public boolean Not() {
    return operator_overloadJNI.Op_Not(swigCPtr, this);
  }

  public int IndexIntoConst(long idx) {
    return operator_overloadJNI.Op_IndexIntoConst(swigCPtr, this, idx);
  }

  public SWIGTYPE_p_int IndexInto(long idx) {
    return new SWIGTYPE_p_int(operator_overloadJNI.Op_IndexInto(swigCPtr, this, idx), false);
  }

  public int Functor(int a) {
    return operator_overloadJNI.Op_Functor__SWIG_0(swigCPtr, this, a);
  }

  public int Functor() {
    return operator_overloadJNI.Op_Functor__SWIG_1(swigCPtr, this);
  }

  public int Functor(int a, int b) {
    return operator_overloadJNI.Op_Functor__SWIG_2(swigCPtr, this, a, b);
  }

  public Op PlusPlusPrefix() {
    return new Op(operator_overloadJNI.Op_PlusPlusPrefix(swigCPtr, this), false);
  }

  public Op PlusPlusPostfix(int arg0) {
    return new Op(operator_overloadJNI.Op_PlusPlusPostfix(swigCPtr, this, arg0), true);
  }

  public Op MinusMinusPrefix() {
    return new Op(operator_overloadJNI.Op_MinusMinusPrefix(swigCPtr, this), false);
  }

  public Op MinusMinusPostfix(int arg0) {
    return new Op(operator_overloadJNI.Op_MinusMinusPostfix(swigCPtr, this, arg0), true);
  }

  public double DoubleCast() {
    return operator_overloadJNI.Op_DoubleCast(swigCPtr, this);
  }

  public int IntCast() {
    return operator_overloadJNI.Op_IntCast(swigCPtr, this);
  }

  public static void sanity_check() {
    operator_overloadJNI.Op_sanity_check();
  }

  public Op And(Op b) {
    return new Op(operator_overloadJNI.Op_And(swigCPtr, this, Op.getCPtr(b), b), true);
  }

  public Op Or(Op b) {
    return new Op(operator_overloadJNI.Op_Or(swigCPtr, this, Op.getCPtr(b), b), true);
  }

  public Op Plus(Op b) {
    return new Op(operator_overloadJNI.Op_Plus(swigCPtr, this, Op.getCPtr(b), b), true);
  }

  public Op Minus(Op b) {
    return new Op(operator_overloadJNI.Op_Minus__SWIG_1(swigCPtr, this, Op.getCPtr(b), b), true);
  }

  public Op Multiply(Op b) {
    return new Op(operator_overloadJNI.Op_Multiply(swigCPtr, this, Op.getCPtr(b), b), true);
  }

  public Op Divide(Op b) {
    return new Op(operator_overloadJNI.Op_Divide(swigCPtr, this, Op.getCPtr(b), b), true);
  }

  public Op Percent(Op b) {
    return new Op(operator_overloadJNI.Op_Percent(swigCPtr, this, Op.getCPtr(b), b), true);
  }

  public boolean EqualEqual(Op b) {
    return operator_overloadJNI.Op_EqualEqual(swigCPtr, this, Op.getCPtr(b), b);
  }

  public boolean NotEqual(Op b) {
    return operator_overloadJNI.Op_NotEqual(swigCPtr, this, Op.getCPtr(b), b);
  }

  public boolean LessThan(Op b) {
    return operator_overloadJNI.Op_LessThan(swigCPtr, this, Op.getCPtr(b), b);
  }

  public boolean LessThanEqual(Op b) {
    return operator_overloadJNI.Op_LessThanEqual(swigCPtr, this, Op.getCPtr(b), b);
  }

  public boolean GreaterThan(Op b) {
    return operator_overloadJNI.Op_GreaterThan(swigCPtr, this, Op.getCPtr(b), b);
  }

  public boolean GreaterThanEqual(Op b) {
    return operator_overloadJNI.Op_GreaterThanEqual(swigCPtr, this, Op.getCPtr(b), b);
  }

  public Op __rsub__(int b) {
    return new Op(operator_overloadJNI.Op___rsub__(swigCPtr, this, b), true);
  }

  public String __str__() {
    return operator_overloadJNI.Op___str__(swigCPtr, this);
  }

  public int __getitem__(long i) {
    return operator_overloadJNI.Op___getitem__(swigCPtr, this, i);
  }

  public void __setitem__(long i, int v) {
    operator_overloadJNI.Op___setitem__(swigCPtr, this, i, v);
  }

}
