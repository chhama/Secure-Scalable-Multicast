/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package operator_overload;

public class operator_overloadJNI {
  public final static native void Op_i_set(long jarg1, Op jarg1_, int jarg2);
  public final static native int Op_i_get(long jarg1, Op jarg1_);
  public final static native long new_Op__SWIG_0(int jarg1);
  public final static native long new_Op__SWIG_1();
  public final static native long new_Op__SWIG_2(long jarg1, Op jarg1_);
  public final static native void delete_Op(long jarg1);
  public final static native long And(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Or(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Op_Equal(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native void Op_PlusEqual(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native void Op_MinusEqual(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native void Op_MultiplyEqual(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native void Op_DivideEqual(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native void Op_PercentEqual(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Plus(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Minus(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Multiply(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Divide(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Percent(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Op_Minus__SWIG_0(long jarg1, Op jarg1_);
  public final static native boolean Op_Not(long jarg1, Op jarg1_);
  public final static native int Op_IndexIntoConst(long jarg1, Op jarg1_, long jarg2);
  public final static native long Op_IndexInto(long jarg1, Op jarg1_, long jarg2);
  public final static native int Op_Functor__SWIG_0(long jarg1, Op jarg1_, int jarg2);
  public final static native int Op_Functor__SWIG_1(long jarg1, Op jarg1_);
  public final static native int Op_Functor__SWIG_2(long jarg1, Op jarg1_, int jarg2, int jarg3);
  public final static native long Op_PlusPlusPrefix(long jarg1, Op jarg1_);
  public final static native long Op_PlusPlusPostfix(long jarg1, Op jarg1_, int jarg2);
  public final static native long Op_MinusMinusPrefix(long jarg1, Op jarg1_);
  public final static native long Op_MinusMinusPostfix(long jarg1, Op jarg1_, int jarg2);
  public final static native double Op_DoubleCast(long jarg1, Op jarg1_);
  public final static native int Op_IntCast(long jarg1, Op jarg1_);
  public final static native void Op_sanity_check();
  public final static native long Op_And(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Op_Or(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Op_Plus(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Op_Minus__SWIG_1(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Op_Multiply(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Op_Divide(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Op_Percent(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native boolean Op_EqualEqual(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native boolean Op_NotEqual(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native boolean Op_LessThan(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native boolean Op_LessThanEqual(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native boolean Op_GreaterThan(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native boolean Op_GreaterThanEqual(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long Op___rsub__(long jarg1, Op jarg1_, int jarg2);
  public final static native String Op___str__(long jarg1, Op jarg1_);
  public final static native int Op___getitem__(long jarg1, Op jarg1_, long jarg2);
  public final static native void Op___setitem__(long jarg1, Op jarg1_, long jarg2, int jarg3);
  public final static native boolean EqualEqual(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native boolean NotEqual(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native boolean LessThan(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native boolean LessThanEqual(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native boolean GreaterThan(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native boolean GreaterThanEqual(long jarg1, Op jarg1_, long jarg2, Op jarg2_);
  public final static native long new_OpDerived__SWIG_0(int jarg1);
  public final static native long new_OpDerived__SWIG_1();
  public final static native int OpDerived_IntCast(long jarg1, OpDerived jarg1_);
  public final static native void delete_OpDerived(long jarg1);
  public final static native long OpDerived_SWIGUpcast(long jarg1);
}
