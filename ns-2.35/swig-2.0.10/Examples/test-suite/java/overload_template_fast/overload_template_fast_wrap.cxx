/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



int foo() {
  return 3;
}

template <class T>
  int foo(T x) {
     return (int)x;
  }

template<class T>
  T maximum(T a, T b) { return  (a > b) ? a : b; }


  int mix1(const char* msg) { return 101; }
  template<typename T> int mix1(T t, const T& tt) { return 102; }
  template<typename T> int mix1(T t) { return 103; }


  template<typename T> int mix2(T t, const T& tt) { return 102; }
  int mix2(const char* msg) { return 101; }
  template<typename T> int mix2(T t) { return 103; }


  template<typename T> int mix3(T t, const T& tt) { return 102; }
  template<typename T> int mix3(T t) { return 103; }
  int mix3(const char* msg) { return 101; }


template<typename T> int overtparams1(T t) { return 10; }
template<typename T, typename U> int overtparams1(T t, U u) { return 20; }


template<typename T> int overtparams2(T t) { return 30; }
template<typename T, typename U> int overtparams2(T t, U u) { return 40; }


template<typename T> int overloaded(T t) { return 50; }
int overloaded() { return 60; }
template<typename T, typename U> int overloaded(T t, U u) { return 70; }


int overloadedagain(const char* msg) { return 80; }
template<typename T> int overloadedagain() { return 90; }
template<typename T, typename U> int overloadedagain(T t, U u) { return 100; }


template<typename T> void xyz() {}
template<> void xyz<double>() {}
void xyz() {}


template<typename T> int specialization(T t) { return 200; }
template<typename T, typename U> int specialization(T t, U u) { return 201; }
template<> int specialization(int t) { return 202; }
template<> int specialization<double>(double t) { return 203; }
template<> int specialization(int t, int u) { return 204; }
template<> int specialization<double,double>(double t, double u) { return 205; }


int overload(const char *c) { return 0; }
template<typename T> int overload(T t) { return 10; }
template<typename T> int overload(T t, const T &tref) { return 20; }
template<typename T> int overload(T t, const char *c) { return 30; }
template<> int overload<double>(double t, const char *c) { return 40; }
int overload() { return 50; }

class Klass {};


namespace space {
  int nsoverload(const char *c) { return 1000; }
  template<typename T> int nsoverload(T t) { return 1010; }
  template<typename T> int nsoverload(T t, const T &tref) { return 1020; }
  template<typename T> int nsoverload(T t, const char *c) { return 1030; }
  template<> int nsoverload<double>(double t, const char *c) { return 1040; }
  int nsoverload() { return 1050; }
}


  namespace space 
  {
    template <class T>
    struct Foo 
    {
      void bar(T t1) { }
      void bar(T t1, T t2) { }
      void bar(int a, int b, int c) { }
    };
    struct A
    {
      template <class Y>
      static void fooT(Y y) { }

    };

  }
  template <class T>
    struct Bar
    {
      void foo(T t1) { }
      void foo(T t1, T t2) { }
      void foo(int a, int b, int c) { }
      template <class Y>
      void fooT(Y y) { }
    };


  struct B
  {
    template <class Y>
    void barT(Y y) { }
    
  };
  


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_foo_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)foo();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_foo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)foo< int >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_foo_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (int)foo< double >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_maximum_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)maximum< int >(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_maximum_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)maximum< double >(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_mix1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)mix1((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_mix1_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)mix1< double >(arg1,(double const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_mix1_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (int)mix1< double >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_mix2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)mix2((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_mix2_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)mix2< double >(arg1,(double const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_mix2_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (int)mix2< double >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_mix3_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)mix3((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_mix3_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)mix3< double >(arg1,(double const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_mix3_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (int)mix3< double >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overtparams1_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)overtparams1< int >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overtparams1_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)overtparams1< double,int >(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overtparams2(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)overtparams2< double,int >(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overloaded_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)overloaded();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overloaded_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)overloaded< double,int >(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overloadedagain_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)overloadedagain((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overloadedagain_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)overloadedagain< double >();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_xyz(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  xyz();
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_xyz_1double(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  xyz< double >();
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_xyz_1int(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  xyz< int >();
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_specialization_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)specialization< int >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_specialization_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (int)specialization< double >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_specialization_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)specialization< int,int >(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_specialization_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (int)specialization< double,double >(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_specialization_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)specialization< char const *,char const * >((char const *)arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overload_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)overload((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overload_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)overload();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_new_1Klass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Klass *)new Klass();
  *(Klass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_delete_1Klass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Klass *arg1 = (Klass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Klass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overload_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)overload< int >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overload_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)overload< int >(arg1,(int const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overload_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)overload< int >(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overload_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Klass arg1 ;
  Klass *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Klass **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)overload< Klass >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overload_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Klass arg1 ;
  Klass *arg2 = 0 ;
  Klass *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(Klass **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(Klass **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Klass const & reference is null");
    return 0;
  } 
  result = (int)overload< Klass >(arg1,(Klass const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overload_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Klass arg1 ;
  char *arg2 = (char *) 0 ;
  Klass *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Klass **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)overload< Klass >(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overload_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (int)overload< double >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overload_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)overload< double >(arg1,(double const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_overload_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jdouble jarg1, jstring jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)overload< double >(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_nsoverload_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)space::nsoverload((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_nsoverload_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)space::nsoverload();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_nsoverload_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)space::SWIGTEMPLATEDISAMBIGUATOR nsoverload< int >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_nsoverload_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)space::SWIGTEMPLATEDISAMBIGUATOR nsoverload< int >(arg1,(int const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_nsoverload_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)space::SWIGTEMPLATEDISAMBIGUATOR nsoverload< int >(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_nsoverload_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Klass arg1 ;
  Klass *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Klass **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)space::SWIGTEMPLATEDISAMBIGUATOR nsoverload< Klass >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_nsoverload_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  Klass arg1 ;
  Klass *arg2 = 0 ;
  Klass *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(Klass **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(Klass **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Klass const & reference is null");
    return 0;
  } 
  result = (int)space::SWIGTEMPLATEDISAMBIGUATOR nsoverload< Klass >(arg1,(Klass const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_nsoverload_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Klass arg1 ;
  char *arg2 = (char *) 0 ;
  Klass *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Klass **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)space::SWIGTEMPLATEDISAMBIGUATOR nsoverload< Klass >(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_nsoverload_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (int)space::SWIGTEMPLATEDISAMBIGUATOR nsoverload< double >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_nsoverload_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)space::SWIGTEMPLATEDISAMBIGUATOR nsoverload< double >(arg1,(double const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_nsoverload_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jdouble jarg1, jstring jarg2) {
  jint jresult = 0 ;
  double arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)space::SWIGTEMPLATEDISAMBIGUATOR nsoverload< double >(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_A_1foo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  double arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  space::A::SWIGTEMPLATEDISAMBIGUATOR fooT< double >(arg1);
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_A_1foo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  space::A::SWIGTEMPLATEDISAMBIGUATOR fooT< int >(arg1);
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_A_1foo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jchar jarg1) {
  char arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (char)jarg1; 
  space::A::SWIGTEMPLATEDISAMBIGUATOR fooT< char >(arg1);
}


SWIGEXPORT jlong JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_new_1A(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  space::A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (space::A *)new space::A();
  *(space::A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_delete_1A(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  space::A *arg1 = (space::A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(space::A **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_B_1foo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  B *arg1 = (B *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR barT< double >(arg2);
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_B_1foo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  B *arg1 = (B *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR barT< int >(arg2);
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_B_1foo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  B *arg1 = (B *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  arg2 = (char)jarg2; 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR barT< char >(arg2);
}


SWIGEXPORT jlong JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_new_1B(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  B *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (B *)new B();
  *(B **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_delete_1B(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  B *arg1 = (B *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(B **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_Bar_1d_1foo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Bar< double > *arg1 = (Bar< double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar< double > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->foo(arg2);
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_Bar_1d_1foo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  Bar< double > *arg1 = (Bar< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar< double > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->foo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_Bar_1d_1foo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  Bar< double > *arg1 = (Bar< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->foo(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_new_1Bar_1d(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bar< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bar< double > *)new Bar< double >();
  *(Bar< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_delete_1Bar_1d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bar< double > *arg1 = (Bar< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bar< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_Foo_1d_1bar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  space::Foo< double > *arg1 = (space::Foo< double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(space::Foo< double > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->bar(arg2);
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_Foo_1d_1bar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  space::Foo< double > *arg1 = (space::Foo< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(space::Foo< double > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->bar(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_Foo_1d_1bar_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  space::Foo< double > *arg1 = (space::Foo< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(space::Foo< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->bar(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_new_1Foo_1d(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  space::Foo< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (space::Foo< double > *)new space::Foo< double >();
  *(space::Foo< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_overload_1template_1fast_overload_1template_1fastJNI_delete_1Foo_1d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  space::Foo< double > *arg1 = (space::Foo< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(space::Foo< double > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

