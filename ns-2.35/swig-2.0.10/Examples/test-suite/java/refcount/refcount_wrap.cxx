/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

 
#include <iostream> 
#include "refcount.h"



  struct A : RCObj
  {
    A() {}
    
    ~A() 
    {
      // std::cout << "deleting a" << std::endl;
    }

#ifdef SWIGRUBY 
    // fix strange ruby + virtual derivation problem
    using RCObjBase::ref_count;
#endif
  };

  struct A1 : A 
  {
  protected:
    A1() {}
  };

  struct A2 : A
  {
  };

  struct A3 : A1, private A2
  {    
  };



  
  struct B : RCObj
  {
    B(A* a) : _a(a) {}
    
    A* get_a() 
    {
      return _a;
    }
    
    static B* create(A* a)
    {
      return new B(a);
    }
    
    B* cloner() 
    {
      return new B(_a);
    }

    ~B() 
    {
      // std::cout << "deleting b" << std::endl;
    }

    RCPtr<A> get_rca() {
      return _a;      
    }

  private:
    RCPtr<A> _a;
  };

struct B* global_create(A* a)
{
  return new B(a);
}

struct Factory {
  static B* create(A* a)
  {
    return new B(a);
  }
  B* create2(A* a)
  {
    return new B(a);
  }
};



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_refcount_refcountJNI_RCObjBase_1ref_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCObjBase *arg1 = (RCObjBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCObjBase **)&jarg1; 
  result = (int)((RCObjBase const *)arg1)->ref_count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_refcount_refcountJNI_RCObjBase_1addref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCObjBase *arg1 = (RCObjBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCObjBase **)&jarg1; 
  result = (int)((RCObjBase const *)arg1)->addref();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_refcount_refcountJNI_RCObjBase_1delref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RCObjBase *arg1 = (RCObjBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RCObjBase **)&jarg1; 
  result = (int)((RCObjBase const *)arg1)->delref();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_refcount_refcountJNI_delete_1RCObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RCObj *arg1 = (RCObj *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RCObj **)&jarg1; 
  arg1->delref();
}


SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_new_1A(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (A *)new A();
  *(A **)&jresult = result; 
  result->addref();
  return jresult;
}


SWIGEXPORT void JNICALL Java_refcount_refcountJNI_delete_1A(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  A *arg1 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(A **)&jarg1; 
  arg1->delref();
}


SWIGEXPORT void JNICALL Java_refcount_refcountJNI_delete_1A1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  A1 *arg1 = (A1 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(A1 **)&jarg1; 
  arg1->delref();
}


SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_new_1A2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  A2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (A2 *)new A2();
  *(A2 **)&jresult = result; 
  result->addref();
  return jresult;
}


SWIGEXPORT void JNICALL Java_refcount_refcountJNI_delete_1A2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  A2 *arg1 = (A2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(A2 **)&jarg1; 
  arg1->delref();
}


SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_new_1A3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  A3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (A3 *)new A3();
  *(A3 **)&jresult = result; 
  result->addref();
  return jresult;
}


SWIGEXPORT void JNICALL Java_refcount_refcountJNI_delete_1A3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  A3 *arg1 = (A3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(A3 **)&jarg1; 
  arg1->delref();
}


SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_new_1B(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  A *arg1 = (A *) 0 ;
  B *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (B *)new B(arg1);
  *(B **)&jresult = result; 
  result->addref();
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_B_1get_1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  B *arg1 = (B *) 0 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  result = (A *)(arg1)->get_a();
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_B_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  A *arg1 = (A *) 0 ;
  B *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (B *)B::create(arg1);
  *(B **)&jresult = result; 
  result->addref();
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_B_1cloner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  B *arg1 = (B *) 0 ;
  B *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  result = (B *)(arg1)->cloner();
  *(B **)&jresult = result; 
  result->addref();
  return jresult;
}


SWIGEXPORT void JNICALL Java_refcount_refcountJNI_delete_1B(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  B *arg1 = (B *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(B **)&jarg1; 
  arg1->delref();
}


SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_B_1get_1rca(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  B *arg1 = (B *) 0 ;
  SwigValueWrapper< RCPtr< A > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  result = (arg1)->get_rca();
  *(RCPtr< A > **)&jresult = new RCPtr< A >((const RCPtr< A > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_global_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  A *arg1 = (A *) 0 ;
  B *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (B *)global_create(arg1);
  *(B **)&jresult = result; 
  result->addref();
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_Factory_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  A *arg1 = (A *) 0 ;
  B *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (B *)Factory::create(arg1);
  *(B **)&jresult = result; 
  result->addref();
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_Factory_1create2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Factory *arg1 = (Factory *) 0 ;
  A *arg2 = (A *) 0 ;
  B *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Factory **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  result = (B *)(arg1)->create2(arg2);
  *(B **)&jresult = result; 
  result->addref();
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_new_1Factory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Factory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Factory *)new Factory();
  *(Factory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_refcount_refcountJNI_delete_1Factory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Factory *arg1 = (Factory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Factory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_RCObj_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(RCObjBase **)&baseptr = *(RCObj **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_A_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(RCObj **)&baseptr = *(A **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_A1_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(A **)&baseptr = *(A1 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_A2_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(A **)&baseptr = *(A2 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_A3_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(A1 **)&baseptr = *(A3 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_refcount_refcountJNI_B_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(RCObj **)&baseptr = *(B **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

