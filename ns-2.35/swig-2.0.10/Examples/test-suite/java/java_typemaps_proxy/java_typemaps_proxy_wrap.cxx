/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


namespace NS {
    class Greeting {
    public:
        void hello() {}
        static void ciao(Greeting* g) {}
    };
    class Farewell {
    public:
        void methodmodifiertest() {}
    };
    template<class T> class Adieu {};
}


struct Without {
  Without(Without *p) : var(0) {}
  static void static_method(Without *p) {}
  void member_method(Without *p) {}
  Without *var;
};
Without *global_without = 0;
void global_method_without(Without *p) {}
struct With {
  With(With *p) {}
  static void static_method(With *p) {}
  void member_method(With *p) {}
};
void global_method_with(With *p) {}


class ConstWithout {
public:
  ConstWithout(const ConstWithout *p) : const_var(0), var_const(0) {}
  static void static_method(const ConstWithout *p) {}
  void member_method(const ConstWithout *p) {}
  void const_member_method(const ConstWithout *p) const {}
  const ConstWithout * const_var;
  const ConstWithout * const var_const;
private:
  ConstWithout& operator=(const ConstWithout &);
};
const ConstWithout * global_constwithout = 0;
void global_method_constwithout(const ConstWithout *p) {}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_Greeting_1hello(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  NS::Greeting *arg1 = (NS::Greeting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NS::Greeting **)&jarg1; 
  (arg1)->hello();
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_Greeting_1ciao(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  NS::Greeting *arg1 = (NS::Greeting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NS::Greeting **)&jarg1; 
  NS::Greeting::ciao(arg1);
}


SWIGEXPORT jlong JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_new_1Greeting(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NS::Greeting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NS::Greeting *)new NS::Greeting();
  *(NS::Greeting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_delete_1Greeting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NS::Greeting *arg1 = (NS::Greeting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NS::Greeting **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_Farewell_1methodmodifiertest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  NS::Farewell *arg1 = (NS::Farewell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NS::Farewell **)&jarg1; 
  (arg1)->methodmodifiertest();
}


SWIGEXPORT jlong JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_new_1Farewell(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NS::Farewell *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NS::Farewell *)new NS::Farewell();
  *(NS::Farewell **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_delete_1Farewell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NS::Farewell *arg1 = (NS::Farewell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NS::Farewell **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_new_1AdieuIntPtrPtr(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NS::Adieu< int ** > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NS::Adieu< int ** > *)new NS::Adieu< int ** >();
  *(NS::Adieu< int ** > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_delete_1AdieuIntPtrPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NS::Adieu< int ** > *arg1 = (NS::Adieu< int ** > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NS::Adieu< int ** > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_new_1Without(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Without *arg1 = (Without *) 0 ;
  Without *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Without **)&jarg1; 
  result = (Without *)new Without(arg1);
  *(Without **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_Without_1static_1method(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Without *arg1 = (Without *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Without **)&jarg1; 
  Without::static_method(arg1);
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_Without_1member_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Without *arg1 = (Without *) 0 ;
  Without *arg2 = (Without *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Without **)&jarg1; 
  arg2 = *(Without **)&jarg2; 
  (arg1)->member_method(arg2);
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_Without_1var_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  Without *arg1 = (Without *) 0 ;
  Without *arg2 = (Without *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Without **)&jarg1; 
  arg2 = *(Without **)&jarg2; 
  if (arg1) (arg1)->var = arg2;
}


SWIGEXPORT jlong JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_Without_1var_1get(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Without *arg1 = (Without *) 0 ;
  Without *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Without **)&jarg1; 
  result = (Without *) ((arg1)->var);
  *(Without **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_delete_1Without(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Without *arg1 = (Without *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Without **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_global_1without_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Without *arg1 = (Without *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Without **)&jarg1; 
  global_without = arg1;
}


SWIGEXPORT jlong JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_global_1without_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Without *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Without *)global_without;
  *(Without **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_global_1method_1without(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Without *arg1 = (Without *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Without **)&jarg1; 
  global_method_without(arg1);
}


SWIGEXPORT jlong JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_new_1With(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  With *arg1 = (With *) 0 ;
  With *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(With **)&jarg1; 
  result = (With *)new With(arg1);
  *(With **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_With_1static_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  With *arg1 = (With *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(With **)&jarg1; 
  With::static_method(arg1);
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_With_1member_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  With *arg1 = (With *) 0 ;
  With *arg2 = (With *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(With **)&jarg1; 
  arg2 = *(With **)&jarg2; 
  (arg1)->member_method(arg2);
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_delete_1With(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  With *arg1 = (With *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(With **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_global_1method_1with(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  With *arg1 = (With *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(With **)&jarg1; 
  global_method_with(arg1);
}


SWIGEXPORT jlong JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_new_1ConstWithout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ConstWithout *arg1 = (ConstWithout *) 0 ;
  ConstWithout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConstWithout **)&jarg1; 
  result = (ConstWithout *)new ConstWithout((ConstWithout const *)arg1);
  *(ConstWithout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_ConstWithout_1static_1method(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConstWithout *arg1 = (ConstWithout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConstWithout **)&jarg1; 
  ConstWithout::static_method((ConstWithout const *)arg1);
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_ConstWithout_1member_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ConstWithout *arg1 = (ConstWithout *) 0 ;
  ConstWithout *arg2 = (ConstWithout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConstWithout **)&jarg1; 
  arg2 = *(ConstWithout **)&jarg2; 
  (arg1)->member_method((ConstWithout const *)arg2);
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_ConstWithout_1const_1member_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  ConstWithout *arg1 = (ConstWithout *) 0 ;
  ConstWithout *arg2 = (ConstWithout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConstWithout **)&jarg1; 
  arg2 = *(ConstWithout **)&jarg2; 
  ((ConstWithout const *)arg1)->const_member_method((ConstWithout const *)arg2);
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_ConstWithout_1const_1var_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ConstWithout *arg1 = (ConstWithout *) 0 ;
  ConstWithout *arg2 = (ConstWithout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConstWithout **)&jarg1; 
  arg2 = *(ConstWithout **)&jarg2; 
  if (arg1) (arg1)->const_var = (ConstWithout const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_ConstWithout_1const_1var_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConstWithout *arg1 = (ConstWithout *) 0 ;
  ConstWithout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConstWithout **)&jarg1; 
  result = (ConstWithout *) ((arg1)->const_var);
  *(ConstWithout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_ConstWithout_1var_1const_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConstWithout *arg1 = (ConstWithout *) 0 ;
  ConstWithout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConstWithout **)&jarg1; 
  result = (ConstWithout *)(ConstWithout *) ((arg1)->var_const);
  *(ConstWithout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_delete_1ConstWithout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConstWithout *arg1 = (ConstWithout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConstWithout **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_global_1constwithout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConstWithout *arg1 = (ConstWithout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConstWithout **)&jarg1; 
  global_constwithout = (ConstWithout const *)arg1;
}


SWIGEXPORT jlong JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_global_1constwithout_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ConstWithout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ConstWithout *)global_constwithout;
  *(ConstWithout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_java_1typemaps_1proxy_java_1typemaps_1proxyJNI_global_1method_1constwithout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConstWithout *arg1 = (ConstWithout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConstWithout **)&jarg1; 
  global_method_constwithout((ConstWithout const *)arg1);
}


#ifdef __cplusplus
}
#endif

