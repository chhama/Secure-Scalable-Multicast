/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>


#include <algorithm>
#include <functional>
#include <numeric>

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< bool >::const_reference std_vector_Sl_bool_Sg__get(std::vector< bool > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_bool_Sg__set(std::vector< bool > *self,int i,std::vector< bool >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< char >::const_reference std_vector_Sl_char_Sg__get(std::vector< char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_char_Sg__set(std::vector< char > *self,int i,std::vector< char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< short >::const_reference std_vector_Sl_short_Sg__get(std::vector< short > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_short_Sg__set(std::vector< short > *self,int i,std::vector< short >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< long >::const_reference std_vector_Sl_long_Sg__get(std::vector< long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_Sg__set(std::vector< long > *self,int i,std::vector< long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned char >::const_reference std_vector_Sl_unsigned_SS_char_Sg__get(std::vector< unsigned char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__set(std::vector< unsigned char > *self,int i,std::vector< unsigned char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned int >::const_reference std_vector_Sl_unsigned_SS_int_Sg__get(std::vector< unsigned int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__set(std::vector< unsigned int > *self,int i,std::vector< unsigned int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned short >::const_reference std_vector_Sl_unsigned_SS_short_Sg__get(std::vector< unsigned short > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_short_Sg__set(std::vector< unsigned short > *self,int i,std::vector< unsigned short >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned long >::const_reference std_vector_Sl_unsigned_SS_long_Sg__get(std::vector< unsigned long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_long_Sg__set(std::vector< unsigned long > *self,int i,std::vector< unsigned long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

typedef float Real;
size_t typedef_test(std::vector<int>::size_type s) { return s; }

SWIGINTERN std::vector< float >::const_reference std_vector_Sl_Real_Sg__get(std::vector< Real > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Real_Sg__set(std::vector< Real > *self,int i,std::vector< float >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }


double average(std::vector<int> v) {
    return std::accumulate(v.begin(),v.end(),0.0)/v.size();
}

std::vector<Real> half(const std::vector<Real>& v) {
    std::vector<Real> w(v);
    for (std::vector<Real>::size_type i=0; i<w.size(); i++)
        w[i] /= 2.0;
    return w;
}

void halve_in_place(std::vector<double>& v) {
    std::transform(v.begin(),v.end(),v.begin(),
                   std::bind2nd(std::divides<double>(),2.0));
}

struct Struct {
  double num;
  Struct() : num(0.0) {}
  Struct(double d) : num(d) {}
};

struct Structure {
  double num;
  Structure() : num(0.0) {}
  Structure(double d) : num(d) {}
};

const std::vector<Real> & vecreal(const std::vector<Real> & vec) { return vec; }

const std::vector<int> & vecintptr(const std::vector<int> & vec) { return vec; }
const std::vector<int *> & vecintptr(const std::vector<int *> & vec) { return vec; }
const std::vector<const int *> & vecintconstptr(const std::vector<const int *> & vec) { return vec; }

const std::vector<Struct> & vecstruct(const std::vector<Struct> & vec) { return vec; }
const std::vector<Struct *> & vecstructptr(const std::vector<Struct *> & vec) { return vec; }
const std::vector<const Struct *> & vecstructconstptr(const std::vector<const Struct *> & vec) { return vec; }

SWIGINTERN std::vector< int * >::const_reference std_vector_Sl_int_Sm__Sg__get(std::vector< int * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sm__Sg__set(std::vector< int * > *self,int i,std::vector< int * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int const * >::const_reference std_vector_Sl_int_SS_const_Sm__Sg__get(std::vector< int const * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_SS_const_Sm__Sg__set(std::vector< int const * > *self,int i,std::vector< int const * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< Struct >::const_reference std_vector_Sl_Struct_Sg__get(std::vector< Struct > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Struct_Sg__set(std::vector< Struct > *self,int i,std::vector< Struct >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< Struct * >::const_reference std_vector_Sl_Struct_Sm__Sg__get(std::vector< Struct * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Struct_Sm__Sg__set(std::vector< Struct * > *self,int i,std::vector< Struct * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< Struct const * >::const_reference std_vector_Sl_Struct_SS_const_Sm__Sg__get(std::vector< Struct const * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Struct_SS_const_Sm__Sg__set(std::vector< Struct const * > *self,int i,std::vector< Struct const * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

  struct MyClass {};
  typedef MyClass *MyClassPtr;
  typedef std::vector<MyClassPtr> MyClassVector;

SWIGINTERN std::vector< MyClass * >::const_reference std_vector_Sl_MyClass_Sm__Sg__get(std::vector< MyClass * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_MyClass_Sm__Sg__set(std::vector< MyClass * > *self,int i,std::vector< MyClass * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

  class RetsMetadata
  {
  public:
    MyClassVector GetAllResources(size_t n) const
    {
      return MyClassVector(n, 0);
    }
  };


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1BoolVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< bool > *)new std::vector< bool >();
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1BoolVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bool >::size_type arg1 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< bool >::size_type)jarg1; 
  result = (std::vector< bool > *)new std::vector< bool >(arg1);
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_BoolVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = ((std::vector< bool > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_BoolVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = ((std::vector< bool > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_BoolVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (std::vector< bool >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_BoolVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = (bool)((std::vector< bool > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_BoolVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_BoolVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::value_type *arg2 = 0 ;
  std::vector< bool >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< bool >::value_type const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_BoolVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::const_reference result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< bool >::const_reference)std_vector_Sl_bool_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_BoolVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::value_type *arg3 = 0 ;
  std::vector< bool >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__set(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1BoolVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1CharVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< char > *)new std::vector< char >();
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1CharVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< char >::size_type arg1 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< char >::size_type)jarg1; 
  result = (std::vector< char > *)new std::vector< char >(arg1);
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_CharVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = ((std::vector< char > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_CharVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = ((std::vector< char > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_CharVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (std::vector< char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_CharVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = (bool)((std::vector< char > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_CharVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_CharVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  std::vector< char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  temp2 = (std::vector< char >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
}


SWIGEXPORT jchar JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_CharVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jchar)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_CharVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  std::vector< char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__set(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1CharVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1ShortVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< short > *)new std::vector< short >();
  *(std::vector< short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1ShortVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< short >::size_type arg1 ;
  std::vector< short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< short >::size_type)jarg1; 
  result = (std::vector< short > *)new std::vector< short >(arg1);
  *(std::vector< short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ShortVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  result = ((std::vector< short > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ShortVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  result = ((std::vector< short > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ShortVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  arg2 = (std::vector< short >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ShortVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  result = (bool)((std::vector< short > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ShortVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ShortVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  std::vector< short >::value_type *arg2 = 0 ;
  std::vector< short >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  temp2 = (std::vector< short >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< short >::value_type const &)*arg2);
}


SWIGEXPORT jshort JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ShortVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  int arg2 ;
  std::vector< short >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< short >::value_type *) &std_vector_Sl_short_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ShortVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  int arg2 ;
  std::vector< short >::value_type *arg3 = 0 ;
  std::vector< short >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< short > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< short >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_short_Sg__set(arg1,arg2,(short const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1ShortVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< short > *arg1 = (std::vector< short > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< short > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1LongVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< long > *)new std::vector< long >();
  *(std::vector< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1LongVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< long >::size_type arg1 ;
  std::vector< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< long >::size_type)jarg1; 
  result = (std::vector< long > *)new std::vector< long >(arg1);
  *(std::vector< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_LongVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = ((std::vector< long > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_LongVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = ((std::vector< long > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_LongVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (std::vector< long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_LongVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = (bool)((std::vector< long > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_LongVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_LongVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::value_type *arg2 = 0 ;
  std::vector< long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  temp2 = (std::vector< long >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< long >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_LongVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  std::vector< long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< long >::value_type *) &std_vector_Sl_long_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_LongVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  std::vector< long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< long >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_long_Sg__set(arg1,arg2,(long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1LongVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< long > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1UCharVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
  *(std::vector< unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1UCharVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned char >::size_type arg1 ;
  std::vector< unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned char >::size_type)jarg1; 
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >(arg1);
  *(std::vector< unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UCharVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  result = ((std::vector< unsigned char > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UCharVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  result = ((std::vector< unsigned char > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UCharVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UCharVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  result = (bool)((std::vector< unsigned char > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UCharVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UCharVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  temp2 = (std::vector< unsigned char >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned char >::value_type const &)*arg2);
}


SWIGEXPORT jshort JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UCharVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_unsigned_SS_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UCharVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__set(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1UCharVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< unsigned char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1UIntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  *(std::vector< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1UIntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned int >::size_type arg1 ;
  std::vector< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned int >::size_type)jarg1; 
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  *(std::vector< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UIntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  result = ((std::vector< unsigned int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UIntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  result = ((std::vector< unsigned int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UIntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UIntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  result = (bool)((std::vector< unsigned int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UIntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UIntVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  temp2 = (std::vector< unsigned int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UIntVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_unsigned_SS_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UIntVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__set(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1UIntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1UShortVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >();
  *(std::vector< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1UShortVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned short >::size_type arg1 ;
  std::vector< unsigned short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned short >::size_type)jarg1; 
  result = (std::vector< unsigned short > *)new std::vector< unsigned short >(arg1);
  *(std::vector< unsigned short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UShortVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned short > **)&jarg1; 
  result = ((std::vector< unsigned short > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UShortVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned short > **)&jarg1; 
  result = ((std::vector< unsigned short > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UShortVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  std::vector< unsigned short >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned short > **)&jarg1; 
  arg2 = (std::vector< unsigned short >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UShortVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned short > **)&jarg1; 
  result = (bool)((std::vector< unsigned short > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UShortVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned short > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UShortVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  std::vector< unsigned short >::value_type *arg2 = 0 ;
  std::vector< unsigned short >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned short > **)&jarg1; 
  temp2 = (std::vector< unsigned short >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned short >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UShortVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  int arg2 ;
  std::vector< unsigned short >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned short > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned short >::value_type *) &std_vector_Sl_unsigned_SS_short_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_UShortVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  int arg2 ;
  std::vector< unsigned short >::value_type *arg3 = 0 ;
  std::vector< unsigned short >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned short > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned short >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_short_Sg__set(arg1,arg2,(unsigned short const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1UShortVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< unsigned short > *arg1 = (std::vector< unsigned short > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< unsigned short > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1ULongVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< unsigned long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >();
  *(std::vector< unsigned long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1ULongVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned long >::size_type arg1 ;
  std::vector< unsigned long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned long >::size_type)jarg1; 
  result = (std::vector< unsigned long > *)new std::vector< unsigned long >(arg1);
  *(std::vector< unsigned long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ULongVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  result = ((std::vector< unsigned long > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ULongVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  result = ((std::vector< unsigned long > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ULongVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  arg2 = (std::vector< unsigned long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ULongVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  result = (bool)((std::vector< unsigned long > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ULongVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ULongVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  std::vector< unsigned long >::value_type *arg2 = 0 ;
  std::vector< unsigned long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  temp2 = (std::vector< unsigned long >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned long >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ULongVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  int arg2 ;
  std::vector< unsigned long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned long >::value_type *) &std_vector_Sl_unsigned_SS_long_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_ULongVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  int arg2 ;
  std::vector< unsigned long >::value_type *arg3 = 0 ;
  std::vector< unsigned long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned long >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_long_Sg__set(arg1,arg2,(unsigned long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1ULongVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< unsigned long > *arg1 = (std::vector< unsigned long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< unsigned long > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1DoubleVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1DoubleVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_DoubleVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_DoubleVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_DoubleVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_DoubleVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_DoubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_DoubleVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_DoubleVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_DoubleVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1DoubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_typedef_1test(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = typedef_test(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1RealVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Real > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Real > *)new std::vector< Real >();
  *(std::vector< Real > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1RealVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< float >::size_type arg1 ;
  std::vector< Real > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< float >::size_type)jarg1; 
  result = (std::vector< Real > *)new std::vector< Real >(arg1);
  *(std::vector< Real > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_RealVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Real > **)&jarg1; 
  result = ((std::vector< Real > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_RealVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Real > **)&jarg1; 
  result = ((std::vector< Real > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_RealVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Real > **)&jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_RealVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Real > **)&jarg1; 
  result = (bool)((std::vector< Real > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_RealVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Real > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_RealVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  std::vector< float >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Real > **)&jarg1; 
  temp2 = (std::vector< float >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_RealVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Real > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_Real_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_RealVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  std::vector< float >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Real > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< float >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_Real_Sg__set(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1RealVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Real > *arg1 = (std::vector< Real > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Real > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_average(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::vector< int > arg1 ;
  std::vector< int > *argp1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg1 = *argp1; 
  result = (double)average(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_half(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Real > *arg1 = 0 ;
  std::vector< Real > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Real > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Real > const & reference is null");
    return 0;
  } 
  result = half((std::vector< float > const &)*arg1);
  *(std::vector< Real > **)&jresult = new std::vector< Real >((const std::vector< Real > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_halve_1in_1place(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return ;
  } 
  halve_in_place(*arg1);
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_Struct_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Struct *arg1 = (Struct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Struct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->num = arg2;
}


SWIGEXPORT jdouble JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_Struct_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Struct *arg1 = (Struct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Struct **)&jarg1; 
  result = (double) ((arg1)->num);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1Struct_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Struct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Struct *)new Struct();
  *(Struct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1Struct_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  Struct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (Struct *)new Struct(arg1);
  *(Struct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1Struct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Struct *arg1 = (Struct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Struct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_Structure_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Structure *arg1 = (Structure *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Structure **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->num = arg2;
}


SWIGEXPORT jdouble JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_Structure_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Structure *arg1 = (Structure *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Structure **)&jarg1; 
  result = (double) ((arg1)->num);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1Structure_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Structure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Structure *)new Structure();
  *(Structure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1Structure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  Structure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (Structure *)new Structure(arg1);
  *(Structure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1Structure(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Structure *arg1 = (Structure *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Structure **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_vecreal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Real > *arg1 = 0 ;
  std::vector< Real > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Real > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Real > const & reference is null");
    return 0;
  } 
  result = (std::vector< Real > *) &vecreal((std::vector< float > const &)*arg1);
  *(std::vector< Real > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_vecintptr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int > const & reference is null");
    return 0;
  } 
  result = (std::vector< int > *) &vecintptr((std::vector< int > const &)*arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_vecintptr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int * > *arg1 = 0 ;
  std::vector< int * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int * > const & reference is null");
    return 0;
  } 
  result = (std::vector< int * > *) &vecintptr((std::vector< int * > const &)*arg1);
  *(std::vector< int * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_vecintconstptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int const * > *arg1 = 0 ;
  std::vector< int const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int const * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int const * > const & reference is null");
    return 0;
  } 
  result = (std::vector< int const * > *) &vecintconstptr((std::vector< int const * > const &)*arg1);
  *(std::vector< int const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_vecstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Struct > *arg1 = 0 ;
  std::vector< Struct > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Struct > const & reference is null");
    return 0;
  } 
  result = (std::vector< Struct > *) &vecstruct((std::vector< Struct > const &)*arg1);
  *(std::vector< Struct > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_vecstructptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Struct * > *arg1 = 0 ;
  std::vector< Struct * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Struct * > const & reference is null");
    return 0;
  } 
  result = (std::vector< Struct * > *) &vecstructptr((std::vector< Struct * > const &)*arg1);
  *(std::vector< Struct * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_vecstructconstptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Struct const * > *arg1 = 0 ;
  std::vector< Struct const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct const * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Struct const * > const & reference is null");
    return 0;
  } 
  result = (std::vector< Struct const * > *) &vecstructconstptr((std::vector< Struct const * > const &)*arg1);
  *(std::vector< Struct const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1IntPtrVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int * > *)new std::vector< int * >();
  *(std::vector< int * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1IntPtrVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int * >::size_type arg1 ;
  std::vector< int * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int * >::size_type)jarg1; 
  result = (std::vector< int * > *)new std::vector< int * >(arg1);
  *(std::vector< int * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntPtrVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  std::vector< int * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int * > **)&jarg1; 
  result = ((std::vector< int * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntPtrVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  std::vector< int * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int * > **)&jarg1; 
  result = ((std::vector< int * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntPtrVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  std::vector< int * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int * > **)&jarg1; 
  arg2 = (std::vector< int * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntPtrVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int * > **)&jarg1; 
  result = (bool)((std::vector< int * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntPtrVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntPtrVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  std::vector< int * >::value_type *arg2 = 0 ;
  std::vector< int * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int * > **)&jarg1; 
  temp2 = *(std::vector< int * >::value_type *)&jarg2;
  arg2 = (std::vector< int * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< int * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntPtrVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  int arg2 ;
  std::vector< int * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int * >::value_type *) &std_vector_Sl_int_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< int * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntPtrVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  int arg2 ;
  std::vector< int * >::value_type *arg3 = 0 ;
  std::vector< int * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< int * >::value_type *)&jarg3;
  arg3 = (std::vector< int * >::value_type *)&temp3; 
  try {
    std_vector_Sl_int_Sm__Sg__set(arg1,arg2,(int *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1IntPtrVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int * > *arg1 = (std::vector< int * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1IntConstPtrVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int const * > *)new std::vector< int const * >();
  *(std::vector< int const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1IntConstPtrVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int const * >::size_type arg1 ;
  std::vector< int const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int const * >::size_type)jarg1; 
  result = (std::vector< int const * > *)new std::vector< int const * >(arg1);
  *(std::vector< int const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntConstPtrVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  std::vector< int const * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int const * > **)&jarg1; 
  result = ((std::vector< int const * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntConstPtrVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  std::vector< int const * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int const * > **)&jarg1; 
  result = ((std::vector< int const * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntConstPtrVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  std::vector< int const * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int const * > **)&jarg1; 
  arg2 = (std::vector< int const * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntConstPtrVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int const * > **)&jarg1; 
  result = (bool)((std::vector< int const * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntConstPtrVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int const * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntConstPtrVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  std::vector< int const * >::value_type *arg2 = 0 ;
  std::vector< int const * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int const * > **)&jarg1; 
  temp2 = *(std::vector< int const * >::value_type *)&jarg2;
  arg2 = (std::vector< int const * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< int const * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntConstPtrVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  int arg2 ;
  std::vector< int const * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int const * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int const * >::value_type *) &std_vector_Sl_int_SS_const_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< int const * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_IntConstPtrVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  int arg2 ;
  std::vector< int const * >::value_type *arg3 = 0 ;
  std::vector< int const * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int const * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< int const * >::value_type *)&jarg3;
  arg3 = (std::vector< int const * >::value_type *)&temp3; 
  try {
    std_vector_Sl_int_SS_const_Sm__Sg__set(arg1,arg2,(int const *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1IntConstPtrVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int const * > *arg1 = (std::vector< int const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1StructVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Struct > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Struct > *)new std::vector< Struct >();
  *(std::vector< Struct > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1StructVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Struct >::size_type arg1 ;
  std::vector< Struct > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Struct >::size_type)jarg1; 
  result = (std::vector< Struct > *)new std::vector< Struct >(arg1);
  *(std::vector< Struct > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  std::vector< Struct >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct > **)&jarg1; 
  result = ((std::vector< Struct > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  std::vector< Struct >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct > **)&jarg1; 
  result = ((std::vector< Struct > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  std::vector< Struct >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct > **)&jarg1; 
  arg2 = (std::vector< Struct >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct > **)&jarg1; 
  result = (bool)((std::vector< Struct > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  std::vector< Struct >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Struct > **)&jarg1; 
  arg2 = *(std::vector< Struct >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Struct >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< Struct >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  int arg2 ;
  std::vector< Struct >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Struct >::value_type *) &std_vector_Sl_Struct_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Struct >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  int arg2 ;
  std::vector< Struct >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Struct > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< Struct >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Struct >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Struct_Sg__set(arg1,arg2,(Struct const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1StructVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Struct > *arg1 = (std::vector< Struct > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Struct > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1StructPtrVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Struct * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Struct * > *)new std::vector< Struct * >();
  *(std::vector< Struct * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1StructPtrVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Struct * >::size_type arg1 ;
  std::vector< Struct * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Struct * >::size_type)jarg1; 
  result = (std::vector< Struct * > *)new std::vector< Struct * >(arg1);
  *(std::vector< Struct * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructPtrVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  std::vector< Struct * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct * > **)&jarg1; 
  result = ((std::vector< Struct * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructPtrVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  std::vector< Struct * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct * > **)&jarg1; 
  result = ((std::vector< Struct * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructPtrVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  std::vector< Struct * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct * > **)&jarg1; 
  arg2 = (std::vector< Struct * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructPtrVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct * > **)&jarg1; 
  result = (bool)((std::vector< Struct * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructPtrVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructPtrVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  std::vector< Struct * >::value_type *arg2 = 0 ;
  std::vector< Struct * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Struct * > **)&jarg1; 
  temp2 = *(std::vector< Struct * >::value_type *)&jarg2;
  arg2 = (std::vector< Struct * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< Struct * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructPtrVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  int arg2 ;
  std::vector< Struct * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Struct * >::value_type *) &std_vector_Sl_Struct_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Struct * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructPtrVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  int arg2 ;
  std::vector< Struct * >::value_type *arg3 = 0 ;
  std::vector< Struct * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Struct * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< Struct * >::value_type *)&jarg3;
  arg3 = (std::vector< Struct * >::value_type *)&temp3; 
  try {
    std_vector_Sl_Struct_Sm__Sg__set(arg1,arg2,(Struct *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1StructPtrVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Struct * > *arg1 = (std::vector< Struct * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Struct * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1StructConstPtrVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Struct const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Struct const * > *)new std::vector< Struct const * >();
  *(std::vector< Struct const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1StructConstPtrVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Struct const * >::size_type arg1 ;
  std::vector< Struct const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Struct const * >::size_type)jarg1; 
  result = (std::vector< Struct const * > *)new std::vector< Struct const * >(arg1);
  *(std::vector< Struct const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructConstPtrVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  std::vector< Struct const * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct const * > **)&jarg1; 
  result = ((std::vector< Struct const * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructConstPtrVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  std::vector< Struct const * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct const * > **)&jarg1; 
  result = ((std::vector< Struct const * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructConstPtrVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  std::vector< Struct const * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct const * > **)&jarg1; 
  arg2 = (std::vector< Struct const * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructConstPtrVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct const * > **)&jarg1; 
  result = (bool)((std::vector< Struct const * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructConstPtrVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct const * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructConstPtrVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  std::vector< Struct const * >::value_type *arg2 = 0 ;
  std::vector< Struct const * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Struct const * > **)&jarg1; 
  temp2 = *(std::vector< Struct const * >::value_type *)&jarg2;
  arg2 = (std::vector< Struct const * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< Struct const * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructConstPtrVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  int arg2 ;
  std::vector< Struct const * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Struct const * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Struct const * >::value_type *) &std_vector_Sl_Struct_SS_const_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Struct const * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_StructConstPtrVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  int arg2 ;
  std::vector< Struct const * >::value_type *arg3 = 0 ;
  std::vector< Struct const * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Struct const * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< Struct const * >::value_type *)&jarg3;
  arg3 = (std::vector< Struct const * >::value_type *)&temp3; 
  try {
    std_vector_Sl_Struct_SS_const_Sm__Sg__set(arg1,arg2,(Struct const *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1StructConstPtrVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Struct const * > *arg1 = (std::vector< Struct const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Struct const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1MyClass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MyClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MyClass *)new MyClass();
  *(MyClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1MyClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MyClass *arg1 = (MyClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MyClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1MyClassPtrVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< MyClass * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< MyClass * > *)new std::vector< MyClass * >();
  *(std::vector< MyClass * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1MyClassPtrVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< MyClass * >::size_type arg1 ;
  std::vector< MyClass * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< MyClass * >::size_type)jarg1; 
  result = (std::vector< MyClass * > *)new std::vector< MyClass * >(arg1);
  *(std::vector< MyClass * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_MyClassPtrVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  std::vector< MyClass * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< MyClass * > **)&jarg1; 
  result = ((std::vector< MyClass * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_MyClassPtrVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  std::vector< MyClass * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< MyClass * > **)&jarg1; 
  result = ((std::vector< MyClass * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_MyClassPtrVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  std::vector< MyClass * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< MyClass * > **)&jarg1; 
  arg2 = (std::vector< MyClass * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_MyClassPtrVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< MyClass * > **)&jarg1; 
  result = (bool)((std::vector< MyClass * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_MyClassPtrVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< MyClass * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_MyClassPtrVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  std::vector< MyClass * >::value_type *arg2 = 0 ;
  std::vector< MyClass * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< MyClass * > **)&jarg1; 
  temp2 = *(std::vector< MyClass * >::value_type *)&jarg2;
  arg2 = (std::vector< MyClass * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< MyClass * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_MyClassPtrVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  int arg2 ;
  std::vector< MyClass * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< MyClass * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MyClass * >::value_type *) &std_vector_Sl_MyClass_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< MyClass * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_MyClassPtrVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  int arg2 ;
  std::vector< MyClass * >::value_type *arg3 = 0 ;
  std::vector< MyClass * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< MyClass * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< MyClass * >::value_type *)&jarg3;
  arg3 = (std::vector< MyClass * >::value_type *)&temp3; 
  try {
    std_vector_Sl_MyClass_Sm__Sg__set(arg1,arg2,(MyClass *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1MyClassPtrVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< MyClass * > *arg1 = (std::vector< MyClass * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< MyClass * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_RetsMetadata_1GetAllResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  RetsMetadata *arg1 = (RetsMetadata *) 0 ;
  size_t arg2 ;
  MyClassVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RetsMetadata **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((RetsMetadata const *)arg1)->GetAllResources(arg2);
  *(MyClassVector **)&jresult = new MyClassVector((const MyClassVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_new_1RetsMetadata(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RetsMetadata *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RetsMetadata *)new RetsMetadata();
  *(RetsMetadata **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1vector_li_1std_1vectorJNI_delete_1RetsMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RetsMetadata *arg1 = (RetsMetadata *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RetsMetadata **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

