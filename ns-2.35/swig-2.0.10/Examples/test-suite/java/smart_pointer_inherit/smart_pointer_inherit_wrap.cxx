/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



  namespace hi
  {    
    struct Base 
    {
      Base(int i) : val(i) {}
      virtual ~Base() { }
      virtual int value() = 0;
      virtual int value2() { return val; }
      virtual int value3() { return val; }
      int valuehide() { return val; }
      int val;
    };    
    
    struct Derived : Base 
    {
      Derived(int i) : Base(i) {}
      virtual int value() { return val; }
      virtual int value3() { return Base::value3(); }
      int valuehide() { return -1; }
    };

    template <typename T> struct SmartPtr
    {
      SmartPtr(T *t) : ptr(t) {}
      T * operator->() const { return ptr; }
    private:
      T *ptr;
    };
  }


#include <stdexcept>


#include <vector>
#include <stdexcept>


class ItkLevelSetNodeUS2 {
};

SWIGINTERN std::vector< ItkLevelSetNodeUS2 >::const_reference std_vector_Sl_ItkLevelSetNodeUS2_Sg__get(std::vector< ItkLevelSetNodeUS2 > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ItkLevelSetNodeUS2_Sg__set(std::vector< ItkLevelSetNodeUS2 > *self,int i,std::vector< ItkLevelSetNodeUS2 >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

class ItkVectorContainerUILSNUS2 : public std::vector< ItkLevelSetNodeUS2 > {
};

class ItkVectorContainerUILSNUS2_Pointer {
  public:
    ItkVectorContainerUILSNUS2 * operator->() const { return 0; }
};



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_delete_1Base(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  hi::Base *arg1 = (hi::Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(hi::Base **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_Base_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::Base *arg1 = (hi::Base *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::Base **)&jarg1; 
  result = (int)(arg1)->value();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_Base_1value2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::Base *arg1 = (hi::Base *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::Base **)&jarg1; 
  result = (int)(arg1)->value2();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_Base_1value3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::Base *arg1 = (hi::Base *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::Base **)&jarg1; 
  result = (int)(arg1)->value3();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_Base_1valuehide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::Base *arg1 = (hi::Base *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::Base **)&jarg1; 
  result = (int)(arg1)->valuehide();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_Base_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  hi::Base *arg1 = (hi::Base *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::Base **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->val = arg2;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_Base_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::Base *arg1 = (hi::Base *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::Base **)&jarg1; 
  result = (int) ((arg1)->val);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_new_1Derived(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  hi::Derived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (hi::Derived *)new hi::Derived(arg1);
  *(hi::Derived **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_Derived_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::Derived *arg1 = (hi::Derived *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::Derived **)&jarg1; 
  result = (int)(arg1)->value();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_Derived_1value3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::Derived *arg1 = (hi::Derived *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::Derived **)&jarg1; 
  result = (int)(arg1)->value3();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_Derived_1valuehide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::Derived *arg1 = (hi::Derived *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::Derived **)&jarg1; 
  result = (int)(arg1)->valuehide();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_delete_1Derived(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  hi::Derived *arg1 = (hi::Derived *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(hi::Derived **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_new_1SmartBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  hi::Base *arg1 = (hi::Base *) 0 ;
  hi::SmartPtr< hi::Base > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::Base **)&jarg1; 
  result = (hi::SmartPtr< hi::Base > *)new hi::SmartPtr< hi::Base >(arg1);
  *(hi::SmartPtr< hi::Base > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartBase_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  hi::SmartPtr< hi::Base > *arg1 = (hi::SmartPtr< hi::Base > *) 0 ;
  hi::Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Base > **)&jarg1; 
  result = (hi::Base *)((hi::SmartPtr< hi::Base > const *)arg1)->operator ->();
  *(hi::Base **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_delete_1SmartBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  hi::SmartPtr< hi::Base > *arg1 = (hi::SmartPtr< hi::Base > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(hi::SmartPtr< hi::Base > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartBase_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::SmartPtr< hi::Base > *arg1 = (hi::SmartPtr< hi::Base > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Base > **)&jarg1; 
  result = (int)(*arg1)->value();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartBase_1value2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::SmartPtr< hi::Base > *arg1 = (hi::SmartPtr< hi::Base > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Base > **)&jarg1; 
  result = (int)(*arg1)->value2();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartBase_1value3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::SmartPtr< hi::Base > *arg1 = (hi::SmartPtr< hi::Base > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Base > **)&jarg1; 
  result = (int)(*arg1)->value3();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartBase_1valuehide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::SmartPtr< hi::Base > *arg1 = (hi::SmartPtr< hi::Base > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Base > **)&jarg1; 
  result = (int)(*arg1)->valuehide();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartBase_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  hi::SmartPtr< hi::Base > *arg1 = (hi::SmartPtr< hi::Base > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Base > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (*arg1)->val = arg2;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartBase_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::SmartPtr< hi::Base > *arg1 = (hi::SmartPtr< hi::Base > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Base > **)&jarg1; 
  result = (int) ((*arg1)->val);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_new_1SmartDerived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  hi::Derived *arg1 = (hi::Derived *) 0 ;
  hi::SmartPtr< hi::Derived > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::Derived **)&jarg1; 
  result = (hi::SmartPtr< hi::Derived > *)new hi::SmartPtr< hi::Derived >(arg1);
  *(hi::SmartPtr< hi::Derived > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartDerived_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  hi::SmartPtr< hi::Derived > *arg1 = (hi::SmartPtr< hi::Derived > *) 0 ;
  hi::Derived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Derived > **)&jarg1; 
  result = (hi::Derived *)((hi::SmartPtr< hi::Derived > const *)arg1)->operator ->();
  *(hi::Derived **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_delete_1SmartDerived(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  hi::SmartPtr< hi::Derived > *arg1 = (hi::SmartPtr< hi::Derived > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(hi::SmartPtr< hi::Derived > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartDerived_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::SmartPtr< hi::Derived > *arg1 = (hi::SmartPtr< hi::Derived > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Derived > **)&jarg1; 
  result = (int)(*arg1)->value();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartDerived_1value3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::SmartPtr< hi::Derived > *arg1 = (hi::SmartPtr< hi::Derived > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Derived > **)&jarg1; 
  result = (int)(*arg1)->value3();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartDerived_1valuehide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::SmartPtr< hi::Derived > *arg1 = (hi::SmartPtr< hi::Derived > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Derived > **)&jarg1; 
  result = (int)(*arg1)->valuehide();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartDerived_1value2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::SmartPtr< hi::Derived > *arg1 = (hi::SmartPtr< hi::Derived > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Derived > **)&jarg1; 
  result = (int)(*arg1)->value2();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartDerived_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  hi::SmartPtr< hi::Derived > *arg1 = (hi::SmartPtr< hi::Derived > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Derived > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (*arg1)->val = arg2;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_SmartDerived_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::SmartPtr< hi::Derived > *arg1 = (hi::SmartPtr< hi::Derived > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::SmartPtr< hi::Derived > **)&jarg1; 
  result = (int) ((*arg1)->val);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_new_1ItkLevelSetNodeUS2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ItkLevelSetNodeUS2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ItkLevelSetNodeUS2 *)new ItkLevelSetNodeUS2();
  *(ItkLevelSetNodeUS2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_delete_1ItkLevelSetNodeUS2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ItkLevelSetNodeUS2 *arg1 = (ItkLevelSetNodeUS2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ItkLevelSetNodeUS2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_new_1VectorLevelSetNodeUS2_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ItkLevelSetNodeUS2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< ItkLevelSetNodeUS2 > *)new std::vector< ItkLevelSetNodeUS2 >();
  *(std::vector< ItkLevelSetNodeUS2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_new_1VectorLevelSetNodeUS2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< ItkLevelSetNodeUS2 >::size_type arg1 ;
  std::vector< ItkLevelSetNodeUS2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< ItkLevelSetNodeUS2 >::size_type)jarg1; 
  result = (std::vector< ItkLevelSetNodeUS2 > *)new std::vector< ItkLevelSetNodeUS2 >(arg1);
  *(std::vector< ItkLevelSetNodeUS2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_VectorLevelSetNodeUS2_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ItkLevelSetNodeUS2 > *arg1 = (std::vector< ItkLevelSetNodeUS2 > *) 0 ;
  std::vector< ItkLevelSetNodeUS2 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ItkLevelSetNodeUS2 > **)&jarg1; 
  result = ((std::vector< ItkLevelSetNodeUS2 > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_VectorLevelSetNodeUS2_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ItkLevelSetNodeUS2 > *arg1 = (std::vector< ItkLevelSetNodeUS2 > *) 0 ;
  std::vector< ItkLevelSetNodeUS2 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ItkLevelSetNodeUS2 > **)&jarg1; 
  result = ((std::vector< ItkLevelSetNodeUS2 > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_VectorLevelSetNodeUS2_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ItkLevelSetNodeUS2 > *arg1 = (std::vector< ItkLevelSetNodeUS2 > *) 0 ;
  std::vector< ItkLevelSetNodeUS2 >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ItkLevelSetNodeUS2 > **)&jarg1; 
  arg2 = (std::vector< ItkLevelSetNodeUS2 >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_VectorLevelSetNodeUS2_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ItkLevelSetNodeUS2 > *arg1 = (std::vector< ItkLevelSetNodeUS2 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ItkLevelSetNodeUS2 > **)&jarg1; 
  result = (bool)((std::vector< ItkLevelSetNodeUS2 > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_VectorLevelSetNodeUS2_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ItkLevelSetNodeUS2 > *arg1 = (std::vector< ItkLevelSetNodeUS2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ItkLevelSetNodeUS2 > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_VectorLevelSetNodeUS2_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ItkLevelSetNodeUS2 > *arg1 = (std::vector< ItkLevelSetNodeUS2 > *) 0 ;
  std::vector< ItkLevelSetNodeUS2 >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ItkLevelSetNodeUS2 > **)&jarg1; 
  arg2 = *(std::vector< ItkLevelSetNodeUS2 >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ItkLevelSetNodeUS2 >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< ItkLevelSetNodeUS2 >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_VectorLevelSetNodeUS2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ItkLevelSetNodeUS2 > *arg1 = (std::vector< ItkLevelSetNodeUS2 > *) 0 ;
  int arg2 ;
  std::vector< ItkLevelSetNodeUS2 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ItkLevelSetNodeUS2 > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ItkLevelSetNodeUS2 >::value_type *) &std_vector_Sl_ItkLevelSetNodeUS2_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ItkLevelSetNodeUS2 >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_VectorLevelSetNodeUS2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ItkLevelSetNodeUS2 > *arg1 = (std::vector< ItkLevelSetNodeUS2 > *) 0 ;
  int arg2 ;
  std::vector< ItkLevelSetNodeUS2 >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ItkLevelSetNodeUS2 > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ItkLevelSetNodeUS2 >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ItkLevelSetNodeUS2 >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_ItkLevelSetNodeUS2_Sg__set(arg1,arg2,(ItkLevelSetNodeUS2 const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_delete_1VectorLevelSetNodeUS2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ItkLevelSetNodeUS2 > *arg1 = (std::vector< ItkLevelSetNodeUS2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ItkLevelSetNodeUS2 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_new_1ItkVectorContainerUILSNUS2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ItkVectorContainerUILSNUS2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ItkVectorContainerUILSNUS2 *)new ItkVectorContainerUILSNUS2();
  *(ItkVectorContainerUILSNUS2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_delete_1ItkVectorContainerUILSNUS2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ItkVectorContainerUILSNUS2 *arg1 = (ItkVectorContainerUILSNUS2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ItkVectorContainerUILSNUS2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_ItkVectorContainerUILSNUS2_1Pointer_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ItkVectorContainerUILSNUS2_Pointer *arg1 = (ItkVectorContainerUILSNUS2_Pointer *) 0 ;
  ItkVectorContainerUILSNUS2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ItkVectorContainerUILSNUS2_Pointer **)&jarg1; 
  result = (ItkVectorContainerUILSNUS2 *)((ItkVectorContainerUILSNUS2_Pointer const *)arg1)->operator ->();
  *(ItkVectorContainerUILSNUS2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_new_1ItkVectorContainerUILSNUS2_1Pointer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ItkVectorContainerUILSNUS2_Pointer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ItkVectorContainerUILSNUS2_Pointer *)new ItkVectorContainerUILSNUS2_Pointer();
  *(ItkVectorContainerUILSNUS2_Pointer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_delete_1ItkVectorContainerUILSNUS2_1Pointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ItkVectorContainerUILSNUS2_Pointer *arg1 = (ItkVectorContainerUILSNUS2_Pointer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ItkVectorContainerUILSNUS2_Pointer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_ItkVectorContainerUILSNUS2_1Pointer_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ItkVectorContainerUILSNUS2_Pointer *arg1 = (ItkVectorContainerUILSNUS2_Pointer *) 0 ;
  std::vector< ItkLevelSetNodeUS2 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ItkVectorContainerUILSNUS2_Pointer **)&jarg1; 
  result = (*arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_ItkVectorContainerUILSNUS2_1Pointer_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ItkVectorContainerUILSNUS2_Pointer *arg1 = (ItkVectorContainerUILSNUS2_Pointer *) 0 ;
  std::vector< ItkLevelSetNodeUS2 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ItkVectorContainerUILSNUS2_Pointer **)&jarg1; 
  result = (*arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_ItkVectorContainerUILSNUS2_1Pointer_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ItkVectorContainerUILSNUS2_Pointer *arg1 = (ItkVectorContainerUILSNUS2_Pointer *) 0 ;
  std::vector< ItkLevelSetNodeUS2 >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ItkVectorContainerUILSNUS2_Pointer **)&jarg1; 
  arg2 = (std::vector< ItkLevelSetNodeUS2 >::size_type)jarg2; 
  (*arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_ItkVectorContainerUILSNUS2_1Pointer_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ItkVectorContainerUILSNUS2_Pointer *arg1 = (ItkVectorContainerUILSNUS2_Pointer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ItkVectorContainerUILSNUS2_Pointer **)&jarg1; 
  result = (bool)(*arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_ItkVectorContainerUILSNUS2_1Pointer_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ItkVectorContainerUILSNUS2_Pointer *arg1 = (ItkVectorContainerUILSNUS2_Pointer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ItkVectorContainerUILSNUS2_Pointer **)&jarg1; 
  (*arg1)->clear();
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_ItkVectorContainerUILSNUS2_1Pointer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ItkVectorContainerUILSNUS2_Pointer *arg1 = (ItkVectorContainerUILSNUS2_Pointer *) 0 ;
  std::vector< ItkLevelSetNodeUS2 >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ItkVectorContainerUILSNUS2_Pointer **)&jarg1; 
  arg2 = *(std::vector< ItkLevelSetNodeUS2 >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ItkLevelSetNodeUS2 >::value_type const & reference is null");
    return ;
  } 
  (*arg1)->push_back((std::vector< ItkLevelSetNodeUS2 >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_ItkVectorContainerUILSNUS2_1Pointer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ItkVectorContainerUILSNUS2_Pointer *arg1 = (ItkVectorContainerUILSNUS2_Pointer *) 0 ;
  int arg2 ;
  std::vector< ItkLevelSetNodeUS2 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ItkVectorContainerUILSNUS2_Pointer **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ItkLevelSetNodeUS2 >::value_type *) &std_vector_Sl_ItkLevelSetNodeUS2_Sg__get((std::vector< ItkLevelSetNodeUS2 >*)(arg1)->operator ->(),arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< ItkLevelSetNodeUS2 >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_ItkVectorContainerUILSNUS2_1Pointer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  ItkVectorContainerUILSNUS2_Pointer *arg1 = (ItkVectorContainerUILSNUS2_Pointer *) 0 ;
  int arg2 ;
  std::vector< ItkLevelSetNodeUS2 >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ItkVectorContainerUILSNUS2_Pointer **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< ItkLevelSetNodeUS2 >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ItkLevelSetNodeUS2 >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_ItkLevelSetNodeUS2_Sg__set((std::vector< ItkLevelSetNodeUS2 >*)(arg1)->operator ->(),arg2,(std::vector< ItkLevelSetNodeUS2 >::value_type const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_Derived_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(hi::Base **)&baseptr = *(hi::Derived **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_smart_1pointer_1inherit_smart_1pointer_1inheritJNI_ItkVectorContainerUILSNUS2_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(std::vector< ItkLevelSetNodeUS2 > **)&baseptr = *(ItkVectorContainerUILSNUS2 **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

