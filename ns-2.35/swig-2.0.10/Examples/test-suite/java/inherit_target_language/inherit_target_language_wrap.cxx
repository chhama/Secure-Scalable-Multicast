/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


struct Base1 { virtual ~Base1() {} };
struct Base2 { virtual ~Base2() {} };
struct Derived1 : Base1 {};
struct Derived2 : Base2 {};


struct MBase1a { virtual ~MBase1a() {} virtual void a() {} };
struct MBase1b { virtual ~MBase1b() {} virtual void b() {} };
struct MBase2a { virtual ~MBase2a() {} virtual void c() {} };
struct MBase2b { virtual ~MBase2b() {} virtual void d() {} };
struct MultipleDerived1 : MBase1a, MBase1b {};
struct MultipleDerived2 : MBase1a, MBase2b {};


struct MBase3a { virtual ~MBase3a() {} virtual void e() {} };
struct MBase3b { virtual ~MBase3b() {} virtual void f() {} };
struct MBase4a { virtual ~MBase4a() {} virtual void g() {} };
struct MBase4b { virtual ~MBase4b() {} virtual void h() {} };
struct MultipleDerived3 : MBase3a, MBase3b {};
struct MultipleDerived4 : MBase4a, MBase4b {};


struct BaseX            { virtual ~BaseX() {}; void basex() {} };
struct DerivedX : BaseX { void derivedx() {} };


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_delete_1Base2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Base2 *arg1 = (Base2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Base2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_new_1Base2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Base2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Base2 *)new Base2();
  *(Base2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_new_1Derived1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Derived1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Derived1 *)new Derived1();
  *(Derived1 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_delete_1Derived1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Derived1 *arg1 = (Derived1 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Derived1 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_new_1Derived2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Derived2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Derived2 *)new Derived2();
  *(Derived2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_delete_1Derived2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Derived2 *arg1 = (Derived2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Derived2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_delete_1MBase2a(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MBase2a *arg1 = (MBase2a *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MBase2a **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_MBase2a_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MBase2a *arg1 = (MBase2a *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MBase2a **)&jarg1; 
  (arg1)->c();
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_new_1MBase2a(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MBase2a *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MBase2a *)new MBase2a();
  *(MBase2a **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_delete_1MBase2b(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MBase2b *arg1 = (MBase2b *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MBase2b **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_MBase2b_1d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MBase2b *arg1 = (MBase2b *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MBase2b **)&jarg1; 
  (arg1)->d();
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_new_1MBase2b(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MBase2b *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MBase2b *)new MBase2b();
  *(MBase2b **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_new_1MultipleDerived1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MultipleDerived1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MultipleDerived1 *)new MultipleDerived1();
  *(MultipleDerived1 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_delete_1MultipleDerived1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MultipleDerived1 *arg1 = (MultipleDerived1 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultipleDerived1 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_new_1MultipleDerived2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MultipleDerived2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MultipleDerived2 *)new MultipleDerived2();
  *(MultipleDerived2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_delete_1MultipleDerived2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MultipleDerived2 *arg1 = (MultipleDerived2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultipleDerived2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_delete_1MBase3b(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MBase3b *arg1 = (MBase3b *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MBase3b **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_MBase3b_1f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MBase3b *arg1 = (MBase3b *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MBase3b **)&jarg1; 
  (arg1)->f();
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_new_1MBase3b(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MBase3b *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MBase3b *)new MBase3b();
  *(MBase3b **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_delete_1MBase4a(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MBase4a *arg1 = (MBase4a *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MBase4a **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_MBase4a_1g(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MBase4a *arg1 = (MBase4a *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MBase4a **)&jarg1; 
  (arg1)->g();
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_new_1MBase4a(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MBase4a *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MBase4a *)new MBase4a();
  *(MBase4a **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_new_1MultipleDerived3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MultipleDerived3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MultipleDerived3 *)new MultipleDerived3();
  *(MultipleDerived3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_delete_1MultipleDerived3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MultipleDerived3 *arg1 = (MultipleDerived3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultipleDerived3 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_new_1MultipleDerived4(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MultipleDerived4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MultipleDerived4 *)new MultipleDerived4();
  *(MultipleDerived4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_delete_1MultipleDerived4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MultipleDerived4 *arg1 = (MultipleDerived4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MultipleDerived4 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_delete_1BaseX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BaseX *arg1 = (BaseX *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BaseX **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_BaseX_1basex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BaseX *arg1 = (BaseX *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BaseX **)&jarg1; 
  (arg1)->basex();
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_new_1BaseX(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BaseX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BaseX *)new BaseX();
  *(BaseX **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_DerivedX_1derivedx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DerivedX *arg1 = (DerivedX *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DerivedX **)&jarg1; 
  (arg1)->derivedx();
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_new_1DerivedX(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DerivedX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DerivedX *)new DerivedX();
  *(DerivedX **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_delete_1DerivedX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DerivedX *arg1 = (DerivedX *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DerivedX **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_MultipleDerived3_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MBase3b **)&baseptr = *(MultipleDerived3 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_MultipleDerived4_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MBase4a **)&baseptr = *(MultipleDerived4 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_inherit_1target_1language_inherit_1target_1languageJNI_DerivedX_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BaseX **)&baseptr = *(DerivedX **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

