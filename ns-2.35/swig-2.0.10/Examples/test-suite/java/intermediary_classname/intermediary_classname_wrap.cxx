/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_intermediary_classname = NULL;
    jmethodID director_methids[6];
  }
}


template<class T> T maximum(const T a, const T b) { return  a>b ? a : b; }

template<class T> class vector {
  T *v;
  int sz;
 public:
  vector(int _sz) {
    v = new T[_sz];
    sz = _sz;
  }
  T &get(int index) {
    return v[index];
  }
  void set(int index, T &val) {
    v[index] = val;
  }
  void testconst(const T x) { }
};

#if defined(_MSC_VER)
  #pragma warning(disable: 4290) // C++ exception specification ignored except to indicate a function is not __declspec(nothrow)
#endif

class Base {
public:
  Base() : mVectInt(0) {}
  Base(Base *b) : mVectInt(0) {}
  virtual ~Base() {}
  virtual Base& m1(Base &b) { return b; }
  virtual Base& m1out() { static Base b; return b; }
  virtual Base* m2(Base *b) { return b; }
//  virtual Base m3(Base b) { return b; }
  vector<int> mVectInt;
  int mInt;
  enum en { en1, en2 };
  en enummethod(en e) { return e; }
};
class Derived : public Base {
public:
  Derived(Base *b) : Base(b) {}
  virtual Base& m1(Base &b) { return b; }
  virtual Base* m2(Base *b) { return b; }
//  virtual Base m3(Base b) { return b; }
  void throwspec() throw (int, Base) {}
};
#if defined(_MSC_VER)
  #pragma warning(default: 4290) // C++ exception specification ignored except to indicate a function is not __declspec(nothrow)
#endif



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "intermediary_classname_wrap.h"

SwigDirector_Base::SwigDirector_Base(JNIEnv *jenv) : Base(), Swig::Director(jenv) {
}

SwigDirector_Base::SwigDirector_Base(JNIEnv *jenv, Base *b) : Base(b), Swig::Director(jenv) {
}

SwigDirector_Base::~SwigDirector_Base() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


Base &SwigDirector_Base::m1(Base &b) {
  static Base result_default = Base () ;
  Base *c_result = &result_default ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jb = 0 ;
  
  if (!swig_override[0]) {
    return Base::m1(b);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(Base **)&jb = (Base *) &b; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_intermediary_classname, Swig::director_methids[0], swigjobj, jb);
    if (jenv->ExceptionCheck() == JNI_TRUE) return *c_result;
    if (!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type Base &");
      return *c_result;
    }
    c_result = *(Base **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return *c_result;
}

Base &SwigDirector_Base::m1out() {
  static Base result_default = Base () ;
  Base *c_result = &result_default ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return Base::m1out();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_intermediary_classname, Swig::director_methids[1], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return *c_result;
    if (!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type Base &");
      return *c_result;
    }
    c_result = *(Base **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return *c_result;
}

Base *SwigDirector_Base::m2(Base *b) {
  Base *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jb = 0 ;
  
  if (!swig_override[2]) {
    return Base::m2(b);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((Base **)&jb) = (Base *) b; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_intermediary_classname, Swig::director_methids[2], swigjobj, jb);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(Base **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Base::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "m1", "(Lintermediary_classname/Base;)Lintermediary_classname/Base;", NULL 
    },
    {
      "m1out", "()Lintermediary_classname/Base;", NULL 
    },
    {
      "m2", "(Lintermediary_classname/Base;)Lintermediary_classname/Base;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("intermediary_classname/Base");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Derived::SwigDirector_Derived(JNIEnv *jenv, Base *b) : Derived(b), Swig::Director(jenv) {
}

SwigDirector_Derived::~SwigDirector_Derived() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


Base &SwigDirector_Derived::m1(Base &b) {
  static Base result_default = Base () ;
  Base *c_result = &result_default ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jb = 0 ;
  
  if (!swig_override[0]) {
    return Derived::m1(b);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(Base **)&jb = (Base *) &b; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_intermediary_classname, Swig::director_methids[3], swigjobj, jb);
    if (jenv->ExceptionCheck() == JNI_TRUE) return *c_result;
    if (!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type Base &");
      return *c_result;
    }
    c_result = *(Base **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return *c_result;
}

Base &SwigDirector_Derived::m1out() {
  static Base result_default = Base () ;
  Base *c_result = &result_default ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return Base::m1out();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_intermediary_classname, Swig::director_methids[4], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return *c_result;
    if (!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type Base &");
      return *c_result;
    }
    c_result = *(Base **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return *c_result;
}

Base *SwigDirector_Derived::m2(Base *b) {
  Base *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jb = 0 ;
  
  if (!swig_override[2]) {
    return Derived::m2(b);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((Base **)&jb) = (Base *) b; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_intermediary_classname, Swig::director_methids[5], swigjobj, jb);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(Base **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Derived::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "m1", "(Lintermediary_classname/Base;)Lintermediary_classname/Base;", NULL 
    },
    {
      "m1out", "()Lintermediary_classname/Base;", NULL 
    },
    {
      "m2", "(Lintermediary_classname/Base;)Lintermediary_classname/Base;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("intermediary_classname/Derived");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_new_1Base_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Base *)new SwigDirector_Base(jenv);
  *(Base **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_new_1Base_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  result = (Base *)new SwigDirector_Base(jenv,arg1);
  *(Base **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_delete_1Base(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Base *arg1 = (Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Base **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_Base_1m1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  Base *arg2 = 0 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Base **)&jarg1; 
  arg2 = *(Base **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Base & reference is null");
    return 0;
  } 
  result = (Base *) &(arg1)->m1(*arg2);
  {
    // XYZ& typemap out
    jresult = 0; // remove unused variable warning
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_Base_1m1SwigExplicitBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  Base *arg2 = 0 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Base **)&jarg1; 
  arg2 = *(Base **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Base & reference is null");
    return 0;
  } 
  result = (Base *) &(arg1)->Base::m1(*arg2);
  {
    // XYZ& typemap out
    jresult = 0; // remove unused variable warning
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_Base_1m1out(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  result = (Base *) &(arg1)->m1out();
  {
    // XYZ& typemap out
    jresult = 0; // remove unused variable warning
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_Base_1m1outSwigExplicitBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  result = (Base *) &(arg1)->Base::m1out();
  {
    // XYZ& typemap out
    jresult = 0; // remove unused variable warning
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_Base_1m2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  Base *arg2 = (Base *) 0 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Base **)&jarg1; 
  arg2 = *(Base **)&jarg2; 
  result = (Base *)(arg1)->m2(arg2);
  *(Base **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_Base_1m2SwigExplicitBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  Base *arg2 = (Base *) 0 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Base **)&jarg1; 
  arg2 = *(Base **)&jarg2; 
  result = (Base *)(arg1)->Base::m2(arg2);
  *(Base **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_Base_1mVectInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Base *arg1 = (Base *) 0 ;
  vector< int > *arg2 = (vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Base **)&jarg1; 
  arg2 = *(vector< int > **)&jarg2; 
  if (arg1) (arg1)->mVectInt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_Base_1mVectInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  result = (vector< int > *)& ((arg1)->mVectInt);
  *(vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_Base_1mInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Base *arg1 = (Base *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mInt = arg2;
}


SWIGEXPORT jint JNICALL Java_intermediary_1classname_intermediary_1classname_Base_1mInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  result = (int) ((arg1)->mInt);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_intermediary_1classname_intermediary_1classname_Base_1enummethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  Base::en arg2 ;
  Base::en result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = (Base::en)jarg2; 
  result = (Base::en)(arg1)->enummethod(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_Base_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Base *obj = *((Base **)&objarg);
  (void)jcls;
  SwigDirector_Base *director = dynamic_cast<SwigDirector_Base *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_Base_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Base *obj = *((Base **)&objarg);
  SwigDirector_Base *director = dynamic_cast<SwigDirector_Base *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_new_1Derived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  Derived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  result = (Derived *)new SwigDirector_Derived(jenv,arg1);
  *(Derived **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_Derived_1m1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  Base *arg2 = 0 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = *(Base **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Base & reference is null");
    return 0;
  } 
  result = (Base *) &(arg1)->m1(*arg2);
  {
    // XYZ& typemap out
    jresult = 0; // remove unused variable warning
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_Derived_1m1SwigExplicitDerived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  Base *arg2 = 0 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = *(Base **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Base & reference is null");
    return 0;
  } 
  result = (Base *) &(arg1)->Derived::m1(*arg2);
  {
    // XYZ& typemap out
    jresult = 0; // remove unused variable warning
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_Derived_1m2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  Base *arg2 = (Base *) 0 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = *(Base **)&jarg2; 
  result = (Base *)(arg1)->m2(arg2);
  *(Base **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_Derived_1m2SwigExplicitDerived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  Base *arg2 = (Base *) 0 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = *(Base **)&jarg2; 
  result = (Base *)(arg1)->Derived::m2(arg2);
  *(Base **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_Derived_1throwspec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Derived *arg1 = (Derived *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  try {
    (arg1)->throwspec();
  }
  catch(int &_e) {
    char error_msg[256];
    sprintf(error_msg, "C++ int exception thrown, value: %d", _e);
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, error_msg);
    return ; 
  }
  catch(Base &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Base exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_delete_1Derived(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Derived *arg1 = (Derived *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Derived **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_Derived_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Derived *obj = *((Derived **)&objarg);
  (void)jcls;
  SwigDirector_Derived *director = dynamic_cast<SwigDirector_Derived *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_Derived_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Derived *obj = *((Derived **)&objarg);
  SwigDirector_Derived *director = dynamic_cast<SwigDirector_Derived *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jint JNICALL Java_intermediary_1classname_intermediary_1classname_maxint(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)maximum< int >(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_intermediary_1classname_intermediary_1classname_maxdouble(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)maximum< double >(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_new_1vecint(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (vector< int > *)new vector< int >(arg1);
  *(vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_vecint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  vector< int > *arg1 = (vector< int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int *) &(arg1)->get(arg2);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_vecint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  vector< int > *arg1 = (vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  (arg1)->set(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_vecint_1testconst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  vector< int > *arg1 = (vector< int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->testconst(arg2);
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_delete_1vecint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vector< int > *arg1 = (vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_new_1vecdouble(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (vector< double > *)new vector< double >(arg1);
  *(vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_vecdouble_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  vector< double > *arg1 = (vector< double > *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double *) &(arg1)->get(arg2);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_vecdouble_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  vector< double > *arg1 = (vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  (arg1)->set(arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_vecdouble_1testconst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  vector< double > *arg1 = (vector< double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< double > **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->testconst(arg2);
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_delete_1vecdouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vector< double > *arg1 = (vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_maxintp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  int (*arg1)[10] = (int (*)[10]) (int (*)[10])0 ;
  int (*arg2)[10] = (int (*)[10]) (int (*)[10])0 ;
  int (*result)[10] = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int (**)[10])&jarg1; 
  arg2 = *(int (**)[10])&jarg2; 
  result = (int (*)[10])maximum< int (*)[10] >((int (*)[10])arg1,(int (*)[10])arg2);
  *(int (**)[10])&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_new_1vecintp(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  vector< int (*)[10] > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (vector< int (*)[10] > *)new vector< int (*)[10] >(arg1);
  *(vector< int (*)[10] > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_vecintp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  vector< int (*)[10] > *arg1 = (vector< int (*)[10] > *) 0 ;
  int arg2 ;
  int (**result)[10] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int (*)[10] > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int (**)[10]) &(arg1)->get(arg2);
  *(int (***)[10])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_vecintp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  vector< int (*)[10] > *arg1 = (vector< int (*)[10] > *) 0 ;
  int arg2 ;
  int (**arg3)[10] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int (*)[10] > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int (***)[10])&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int (*&)[10] reference is null");
    return ;
  } 
  (arg1)->set(arg2,(int (*&)[10])*arg3);
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_vecintp_1testconst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  vector< int (*)[10] > *arg1 = (vector< int (*)[10] > *) 0 ;
  int (*arg2)[10] = (int (*)[10]) (int (*)[10])0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< int (*)[10] > **)&jarg1; 
  arg2 = *(int (**)[10])&jarg2; 
  (arg1)->testconst((int (*)[10])arg2);
}


SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_delete_1vecintp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  vector< int (*)[10] > *arg1 = (vector< int (*)[10] > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(vector< int (*)[10] > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_intermediary_1classname_intermediary_1classname_Derived_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Base **)&baseptr = *(Derived **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_intermediary_1classname_intermediary_1classname_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[6] = {
    {
      "SwigDirector_Base_m1", "(Lintermediary_classname/Base;J)J" 
    },
    {
      "SwigDirector_Base_m1out", "(Lintermediary_classname/Base;)J" 
    },
    {
      "SwigDirector_Base_m2", "(Lintermediary_classname/Base;J)J" 
    },
    {
      "SwigDirector_Derived_m1", "(Lintermediary_classname/Derived;J)J" 
    },
    {
      "SwigDirector_Derived_m1out", "(Lintermediary_classname/Derived;)J" 
    },
    {
      "SwigDirector_Derived_m2", "(Lintermediary_classname/Derived;J)J" 
    }
  };
  Swig::jclass_intermediary_classname = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_intermediary_classname) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

