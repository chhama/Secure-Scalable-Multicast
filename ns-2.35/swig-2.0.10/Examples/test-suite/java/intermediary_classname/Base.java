/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package intermediary_classname;

public class Base {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Base(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Base obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        intermediary_classname.delete_Base(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    intermediary_classname.Base_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    intermediary_classname.Base_change_ownership(this, swigCPtr, true);
  }

  public Base() {
    this(intermediary_classname.new_Base__SWIG_0(), true);
    intermediary_classname.Base_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public Base(Base b) {
    this(intermediary_classname.new_Base__SWIG_1(Base.getCPtr(b), b), true);
    intermediary_classname.Base_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public Base m1(Base b) throws IllegalAccessException/*outBase&*/ {
    return new Base((getClass() == Base.class) ? intermediary_classname.Base_m1(swigCPtr, this, Base.getCPtr(b), b) : intermediary_classname.Base_m1SwigExplicitBase(swigCPtr, this, Base.getCPtr(b), b), false);
  }

  public Base m1out() throws IllegalAccessException/*outBase&*/ {
    return new Base((getClass() == Base.class) ? intermediary_classname.Base_m1out(swigCPtr, this) : intermediary_classname.Base_m1outSwigExplicitBase(swigCPtr, this), false);
  }

  public Base m2(Base b) {
    long cPtr = (getClass() == Base.class) ? intermediary_classname.Base_m2(swigCPtr, this, Base.getCPtr(b), b) : intermediary_classname.Base_m2SwigExplicitBase(swigCPtr, this, Base.getCPtr(b), b);
    return (cPtr == 0) ? null : new Base(cPtr, false);
  }

  public void setMVectInt(vecint value) {
    intermediary_classname.Base_mVectInt_set(swigCPtr, this, vecint.getCPtr(value), value);
  }

  public vecint getMVectInt() {
    long cPtr = intermediary_classname.Base_mVectInt_get(swigCPtr, this);
    return (cPtr == 0) ? null : new vecint(cPtr, false);
  }

  public void setMInt(int value) {
    intermediary_classname.Base_mInt_set(swigCPtr, this, value);
  }

  public int getMInt() {
    return intermediary_classname.Base_mInt_get(swigCPtr, this);
  }

  public Base.en enummethod(Base.en e) {
    return Base.en.swigToEnum(intermediary_classname.Base_enummethod(swigCPtr, this, e.swigValue()));
  }

  public final static class en {
    public final static Base.en en1 = new Base.en("en1");
    public final static Base.en en2 = new Base.en("en2");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static en swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + en.class + " with value " + swigValue);
    }

    private en(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private en(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private en(String swigName, en swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static en[] swigValues = { en1, en2 };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
