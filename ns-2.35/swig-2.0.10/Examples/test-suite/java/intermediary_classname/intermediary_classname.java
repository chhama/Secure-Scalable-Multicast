/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package intermediary_classname;

public class intermediary_classname {
  public final static native long new_Base__SWIG_0();
  public final static native long new_Base__SWIG_1(long jarg1, Base jarg1_);
  public final static native void delete_Base(long jarg1);
  public final static native long Base_m1(long jarg1, Base jarg1_, long jarg2, Base jarg2_) throws IllegalAccessException/*outBase&*/;
  public final static native long Base_m1SwigExplicitBase(long jarg1, Base jarg1_, long jarg2, Base jarg2_) throws IllegalAccessException/*outBase&*/;
  public final static native long Base_m1out(long jarg1, Base jarg1_) throws IllegalAccessException/*outBase&*/;
  public final static native long Base_m1outSwigExplicitBase(long jarg1, Base jarg1_) throws IllegalAccessException/*outBase&*/;
  public final static native long Base_m2(long jarg1, Base jarg1_, long jarg2, Base jarg2_);
  public final static native long Base_m2SwigExplicitBase(long jarg1, Base jarg1_, long jarg2, Base jarg2_);
  public final static native void Base_mVectInt_set(long jarg1, Base jarg1_, long jarg2, vecint jarg2_);
  public final static native long Base_mVectInt_get(long jarg1, Base jarg1_);
  public final static native void Base_mInt_set(long jarg1, Base jarg1_, int jarg2);
  public final static native int Base_mInt_get(long jarg1, Base jarg1_);
  public final static native int Base_enummethod(long jarg1, Base jarg1_, int jarg2);
  public final static native void Base_director_connect(Base obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Base_change_ownership(Base obj, long cptr, boolean take_or_release);
  public final static native long new_Derived(long jarg1, Base jarg1_);
  public final static native long Derived_m1(long jarg1, Derived jarg1_, long jarg2, Base jarg2_) throws IllegalAccessException/*outBase&*/;
  public final static native long Derived_m1SwigExplicitDerived(long jarg1, Derived jarg1_, long jarg2, Base jarg2_) throws IllegalAccessException/*outBase&*/;
  public final static native long Derived_m2(long jarg1, Derived jarg1_, long jarg2, Base jarg2_);
  public final static native long Derived_m2SwigExplicitDerived(long jarg1, Derived jarg1_, long jarg2, Base jarg2_);
  public final static native void Derived_throwspec(long jarg1, Derived jarg1_);
  public final static native void delete_Derived(long jarg1);
  public final static native void Derived_director_connect(Derived obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Derived_change_ownership(Derived obj, long cptr, boolean take_or_release);
  public final static native int maxint(int jarg1, int jarg2);
  public final static native double maxdouble(double jarg1, double jarg2);
  public final static native long new_vecint(int jarg1);
  public final static native long vecint_get(long jarg1, vecint jarg1_, int jarg2);
  public final static native void vecint_set(long jarg1, vecint jarg1_, int jarg2, long jarg3);
  public final static native void vecint_testconst(long jarg1, vecint jarg1_, int jarg2);
  public final static native void delete_vecint(long jarg1);
  public final static native long new_vecdouble(int jarg1);
  public final static native long vecdouble_get(long jarg1, vecdouble jarg1_, int jarg2);
  public final static native void vecdouble_set(long jarg1, vecdouble jarg1_, int jarg2, long jarg3);
  public final static native void vecdouble_testconst(long jarg1, vecdouble jarg1_, double jarg2);
  public final static native void delete_vecdouble(long jarg1);
  public final static native long maxintp(long jarg1, long jarg2);
  public final static native long new_vecintp(int jarg1);
  public final static native long vecintp_get(long jarg1, vecintp jarg1_, int jarg2);
  public final static native void vecintp_set(long jarg1, vecintp jarg1_, int jarg2, long jarg3);
  public final static native void vecintp_testconst(long jarg1, vecintp jarg1_, long jarg2);
  public final static native void delete_vecintp(long jarg1);
  public final static native long Derived_SWIGUpcast(long jarg1);

  public static long SwigDirector_Base_m1(Base self, long b) throws IllegalAccessException/*outBase&*/, ClassNotFoundException/*javadirectorinBase&*/, InstantiationException/*javadirectoroutBase&*/ {
    return Base.getCPtr(self.m1(new Base(b, false)/*javadirectorin*/))/* XYZ& typemap directorout*/;
  }
  public static long SwigDirector_Base_m1out(Base self) throws InstantiationException/*javadirectoroutBase&*/, IllegalAccessException/*outBase&*/ {
    return Base.getCPtr(self.m1out())/* XYZ& typemap directorout*/;
  }
  public static long SwigDirector_Base_m2(Base self, long b) {
    return Base.getCPtr(self.m2((b == 0) ? null : new Base(b, false)));
  }
  public static long SwigDirector_Derived_m1(Derived self, long b) throws IllegalAccessException/*outBase&*/, ClassNotFoundException/*javadirectorinBase&*/, InstantiationException/*javadirectoroutBase&*/ {
    return Base.getCPtr(self.m1(new Base(b, false)/*javadirectorin*/))/* XYZ& typemap directorout*/;
  }
  public static long SwigDirector_Derived_m1out(Derived self) throws IllegalAccessException/*outBase&*/, InstantiationException/*javadirectoroutBase&*/ {
    return Base.getCPtr(self.m1out())/* XYZ& typemap directorout*/;
  }
  public static long SwigDirector_Derived_m2(Derived self, long b) {
    return Base.getCPtr(self.m2((b == 0) ? null : new Base(b, false)));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
