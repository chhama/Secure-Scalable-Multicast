/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#ifdef _MSC_VER /* Visual C++ */
    typedef __int64 LongLong;
    typedef unsigned __int64 UnsignedLongLong;
#else
    typedef long long LongLong;
    typedef unsigned long long UnsignedLongLong;
#endif


// pass by value
LongLong value1(LongLong x) { return x; }
UnsignedLongLong value2(UnsignedLongLong x) { return x; }

// pass by reference
const LongLong &ref1(const LongLong &x) { return x; }
const UnsignedLongLong &ref2(const UnsignedLongLong &x) { return x; }

// global variables
LongLong global1;
UnsignedLongLong global2;

// global reference variables
const LongLong& global_ref1 = global1;
const UnsignedLongLong& global_ref2 = global2;


LongLong in_longlong(LongLong *INPUT) { return *INPUT; }
UnsignedLongLong in_ulonglong(UnsignedLongLong *INPUT) { return *INPUT; }
LongLong inr_longlong(LongLong &INPUT) { return INPUT; }
UnsignedLongLong inr_ulonglong(UnsignedLongLong &INPUT) { return INPUT; }

void out_longlong(LongLong x, LongLong *OUTPUT) {  *OUTPUT = x; }
void out_ulonglong(UnsignedLongLong x, UnsignedLongLong *OUTPUT) {  *OUTPUT = x; }
void outr_longlong(LongLong x, LongLong &OUTPUT) {  OUTPUT = x; }
void outr_ulonglong(UnsignedLongLong x, UnsignedLongLong &OUTPUT) {  OUTPUT = x; }

void inout_longlong(LongLong *INOUT) {  *INOUT = *INOUT; }
void inout_ulonglong(UnsignedLongLong *INOUT) {  *INOUT = *INOUT; }
void inoutr_longlong(LongLong &INOUT) {  INOUT = INOUT; }
void inoutr_ulonglong(UnsignedLongLong &INOUT) {  INOUT = INOUT; }


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_long_1long_1apply_long_1long_1applyJNI_value1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  LongLong arg1 ;
  LongLong result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (LongLong)jarg1; 
  result = value1(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_long_1long_1apply_long_1long_1applyJNI_value2(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jobject jresult = 0 ;
  UnsignedLongLong arg1 ;
  UnsignedLongLong result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    for(i=0; i<sz; i++) {
      arg1 = (arg1 << 8) | (UnsignedLongLong)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = value2(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_long_1long_1apply_long_1long_1applyJNI_ref1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  LongLong *arg1 = 0 ;
  LongLong temp1 ;
  LongLong *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (LongLong)jarg1; 
  arg1 = &temp1; 
  result = (LongLong *) &ref1((LongLong const &)*arg1);
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_long_1long_1apply_long_1long_1applyJNI_ref2(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jobject jresult = 0 ;
  UnsignedLongLong *arg1 = 0 ;
  UnsignedLongLong temp1 ;
  UnsignedLongLong *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = &temp1;
    temp1 = 0;
    for(i=0; i<sz; i++) {
      temp1 = (temp1 << 8) | (UnsignedLongLong)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (UnsignedLongLong *) &ref2((UnsignedLongLong const &)*arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(*result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_long_1long_1apply_long_1long_1applyJNI_global1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LongLong arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (LongLong)jarg1; 
  global1 = arg1;
}


SWIGEXPORT jlong JNICALL Java_long_1long_1apply_long_1long_1applyJNI_global1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LongLong result;
  
  (void)jenv;
  (void)jcls;
  result = global1;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_long_1long_1apply_long_1long_1applyJNI_global2_1set(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  UnsignedLongLong arg1 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    for(i=0; i<sz; i++) {
      arg1 = (arg1 << 8) | (UnsignedLongLong)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  global2 = arg1;
}


SWIGEXPORT jobject JNICALL Java_long_1long_1apply_long_1long_1applyJNI_global2_1get(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  UnsignedLongLong result;
  
  (void)jenv;
  (void)jcls;
  result = global2;
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_long_1long_1apply_long_1long_1applyJNI_global_1ref1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LongLong *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LongLong *) &(LongLong const &)global_ref1;
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_long_1long_1apply_long_1long_1applyJNI_global_1ref2_1get(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  UnsignedLongLong *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UnsignedLongLong *) &(UnsignedLongLong const &)global_ref2;
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(*result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_long_1long_1apply_long_1long_1applyJNI_in_1longlong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  LongLong *arg1 = (LongLong *) 0 ;
  LongLong result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (LongLong *)&jarg1; 
  result = in_longlong(arg1);
  jresult = (jlong)result; 
  
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_long_1long_1apply_long_1long_1applyJNI_in_1ulonglong(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jobject jresult = 0 ;
  UnsignedLongLong *arg1 = (UnsignedLongLong *) 0 ;
  UnsignedLongLong temp1 ;
  UnsignedLongLong result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    temp1 = 0;
    for(i=0; i<sz; i++) {
      temp1 = (temp1 << 8) | (UnsignedLongLong)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    arg1 = &temp1;
  }
  result = in_ulonglong(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_long_1long_1apply_long_1long_1applyJNI_inr_1longlong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  LongLong *arg1 = 0 ;
  LongLong result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (LongLong *)&jarg1; 
  result = inr_longlong(*arg1);
  jresult = (jlong)result; 
  
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_long_1long_1apply_long_1long_1applyJNI_inr_1ulonglong(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jobject jresult = 0 ;
  UnsignedLongLong *arg1 = 0 ;
  UnsignedLongLong temp1 ;
  UnsignedLongLong result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    temp1 = 0;
    for(i=0; i<sz; i++) {
      temp1 = (temp1 << 8) | (UnsignedLongLong)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    arg1 = &temp1;
  }
  result = inr_ulonglong(*arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_long_1long_1apply_long_1long_1applyJNI_out_1longlong(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2) {
  LongLong arg1 ;
  LongLong *arg2 = (LongLong *) 0 ;
  LongLong temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (LongLong)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (LongLong)0;
    arg2 = &temp2; 
  }
  out_longlong(arg1,arg2);
  {
    jlong jvalue = (jlong)temp2;
    jenv->SetLongArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_long_1long_1apply_long_1long_1applyJNI_out_1ulonglong(JNIEnv *jenv, jclass jcls, jobject jarg1, jobjectArray jarg2) {
  UnsignedLongLong arg1 ;
  UnsignedLongLong *arg2 = (UnsignedLongLong *) 0 ;
  UnsignedLongLong temp2 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    for(i=0; i<sz; i++) {
      arg1 = (arg1 << 8) | (UnsignedLongLong)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (UnsignedLongLong)0;
    arg2 = &temp2; 
  }
  out_ulonglong(arg1,arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(temp2>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->SetObjectArrayElement(jarg2, 0, bigint);
  }
  
}


SWIGEXPORT void JNICALL Java_long_1long_1apply_long_1long_1applyJNI_outr_1longlong(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2) {
  LongLong arg1 ;
  LongLong *arg2 = 0 ;
  LongLong temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (LongLong)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (LongLong)0;
    arg2 = &temp2; 
  }
  outr_longlong(arg1,*arg2);
  {
    jlong jvalue = (jlong)temp2;
    jenv->SetLongArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_long_1long_1apply_long_1long_1applyJNI_outr_1ulonglong(JNIEnv *jenv, jclass jcls, jobject jarg1, jobjectArray jarg2) {
  UnsignedLongLong arg1 ;
  UnsignedLongLong *arg2 = 0 ;
  UnsignedLongLong temp2 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    for(i=0; i<sz; i++) {
      arg1 = (arg1 << 8) | (UnsignedLongLong)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (UnsignedLongLong)0;
    arg2 = &temp2; 
  }
  outr_ulonglong(arg1,*arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(temp2>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->SetObjectArrayElement(jarg2, 0, bigint);
  }
  
}


SWIGEXPORT void JNICALL Java_long_1long_1apply_long_1long_1applyJNI_inout_1longlong(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  LongLong *arg1 = (LongLong *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (LongLong *) jenv->GetLongArrayElements(jarg1, 0); 
  }
  inout_longlong(arg1);
  {
    jenv->ReleaseLongArrayElements(jarg1, (jlong *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_long_1long_1apply_long_1long_1applyJNI_inout_1ulonglong(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  UnsignedLongLong *arg1 = (UnsignedLongLong *) 0 ;
  UnsignedLongLong temp1 ;
  
  (void)jenv;
  (void)jcls;
  {
    jobject bigint;
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    bigint = jenv->GetObjectArrayElement(jarg1, 0);
    if (!bigint) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array element null");
      return ;
    }
    clazz = jenv->GetObjectClass(bigint);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(bigint, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    temp1 = 0;
    for(i=0; i<sz; i++) {
      temp1 = (temp1 << 8) | (UnsignedLongLong)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    arg1 = &temp1;
  }
  inout_ulonglong(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(temp1>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->SetObjectArrayElement(jarg1, 0, bigint);
  }
  
}


SWIGEXPORT void JNICALL Java_long_1long_1apply_long_1long_1applyJNI_inoutr_1longlong(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  LongLong *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (LongLong *) jenv->GetLongArrayElements(jarg1, 0); 
  }
  inoutr_longlong(*arg1);
  {
    jenv->ReleaseLongArrayElements(jarg1, (jlong *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_long_1long_1apply_long_1long_1applyJNI_inoutr_1ulonglong(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  UnsignedLongLong *arg1 = 0 ;
  UnsignedLongLong temp1 ;
  
  (void)jenv;
  (void)jcls;
  {
    jobject bigint;
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    bigint = jenv->GetObjectArrayElement(jarg1, 0);
    if (!bigint) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array element null");
      return ;
    }
    clazz = jenv->GetObjectClass(bigint);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(bigint, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    temp1 = 0;
    for(i=0; i<sz; i++) {
      temp1 = (temp1 << 8) | (UnsignedLongLong)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    arg1 = &temp1;
  }
  inoutr_ulonglong(*arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(temp1>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->SetObjectArrayElement(jarg1, 0, bigint);
  }
  
}


#ifdef __cplusplus
}
#endif

