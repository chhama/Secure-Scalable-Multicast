/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_director_primitivesJNI = NULL;
    jmethodID director_methids[20];
  }
}

#include <string>


#include <cstdio>
#include <iostream>


// Use for debugging
bool PrintDebug = false;

enum HShadowMode
{
  HShadowNone = 1,
  HShadowSoft = 2,
  HShadowHard = 3
};

class Base {
protected:
  double m_dd;
public:

  Base(double dd) : m_dd(dd) {}
  virtual ~Base() {}

  virtual void NoParmsMethod() { if (PrintDebug) std::cout << "Base - NoParmsMethod()" << std::endl; }
  virtual bool BoolMethod(bool x) { if (PrintDebug) std::cout << "Base - BoolMethod(" << x << ")" << std::endl; return x; }
  virtual int IntMethod(int x) { if (PrintDebug) std::cout << "Base - IntMethod(" << x << ")" << std::endl; return x; }
  virtual unsigned int UIntMethod(unsigned int x) { if (PrintDebug) std::cout << "Base - UIntMethod(" << x << ")" << std::endl; return x; }
  virtual float FloatMethod(float x) { if (PrintDebug) std::cout << "Base - FloatMethod(" << x << ")" << std::endl; return x; }
  virtual char * CharPtrMethod(char * x) { if (PrintDebug) std::cout << "Base - CharPtrMethod(" << x << ")" << std::endl; return x; }
  virtual const char * ConstCharPtrMethod(const char * x) { if (PrintDebug) std::cout << "Base - ConstCharPtrMethod(" << x << ")" << std::endl; return x; }
  virtual HShadowMode EnumMethod(HShadowMode x) { if (PrintDebug) std::cout << "Base - EnumMethod(" << x << ")" << std::endl; return x; }
  virtual void ManyParmsMethod(bool b, int i, unsigned int u, float f, char * c, const char * cc, HShadowMode h) { if (PrintDebug) std::cout << "Base - ManyParmsMethod(" << b << ", " << i << ", " << u << ", " << f << ", " << c << ", " << cc << ", " << h << ")" << std::endl; }
  virtual void NotOverriddenMethod() { if (PrintDebug) std::cout << "Base - NotOverriddenMethod()" << std::endl; }
};

class Derived : public Base {
public:
  Derived(double dd) : Base(dd) {}
  virtual ~Derived() {}

  virtual void NoParmsMethod() { if (PrintDebug) std::cout << "Derived - NoParmsMethod()" << std::endl; }
  virtual bool BoolMethod(bool x) { if (PrintDebug) std::cout << "Derived - BoolMethod(" << x << ")" << std::endl; return x; }
  virtual int IntMethod(int x) { if (PrintDebug) std::cout << "Derived - IntMethod(" << x << ")" << std::endl; return x; }
  virtual unsigned int UIntMethod(unsigned int x) { if (PrintDebug) std::cout << "Derived - UIntMethod(" << x << ")" << std::endl; return x; }
  virtual float FloatMethod(float x) { if (PrintDebug) std::cout << "Derived - FloatMethod(" << x << ")" << std::endl; return x; }
  virtual char * CharPtrMethod(char * x) { if (PrintDebug) std::cout << "Derived - CharPtrMethod(" << x << ")" << std::endl; return x; }
  virtual const char * ConstCharPtrMethod(const char * x) { if (PrintDebug) std::cout << "Derived - ConstCharPtrMethod(" << x << ")" << std::endl; return x; }
  virtual HShadowMode EnumMethod(HShadowMode x) { if (PrintDebug) std::cout << "Derived - EnumMethod(" << x << ")" << std::endl; return x; }
  virtual void ManyParmsMethod(bool b, int i, unsigned int u, float f, char * c, const char * cc, HShadowMode h) { if (PrintDebug) std::cout << "Derived - ManyParmsMethod(" << b << ", " << i << ", " << u << ", " << f << ", " << c << ", " << cc << ", " << h << ")" << std::endl; }
};


class Caller {
private:
  Base *m_base;
  void delBase() { delete m_base; m_base = 0; }
public:
  Caller(): m_base(0) {}
  virtual ~Caller() { delBase(); }
  void set(Base *b) { delBase(); m_base = b; }
  void reset() { m_base = 0; }

  void NoParmsMethodCall() { m_base->NoParmsMethod(); }
  bool BoolMethodCall(bool x) { return m_base->BoolMethod(x); }
  int IntMethodCall(int x) { return m_base->IntMethod(x); }
  unsigned int UIntMethodCall(unsigned int x) { return m_base->UIntMethod(x); }
  float FloatMethodCall(float x) { return m_base->FloatMethod(x); }
  char * CharPtrMethodCall(char * x) { return m_base->CharPtrMethod(x); }
  const char * ConstCharPtrMethodCall(const char * x) { return m_base->ConstCharPtrMethod(x); }
  HShadowMode EnumMethodCall(HShadowMode x) { return m_base->EnumMethod(x); }
  virtual void ManyParmsMethodCall(bool b, int i, unsigned int u, float f, char * c, const char * cc, HShadowMode h) { return m_base->ManyParmsMethod(b, i, u, f, c, cc, h); }
  virtual void NotOverriddenMethodCall() { m_base->NotOverriddenMethod(); }
};




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "director_primitives_wrap.h"

SwigDirector_Base::SwigDirector_Base(JNIEnv *jenv, double dd) : Base(dd), Swig::Director(jenv) {
}

SwigDirector_Base::~SwigDirector_Base() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Base::NoParmsMethod() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    Base::NoParmsMethod();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[0], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_Base::BoolMethod(bool x) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jx  ;
  
  if (!swig_override[1]) {
    return Base::BoolMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jboolean) x;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[1], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_Base::IntMethod(int x) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jx  ;
  
  if (!swig_override[2]) {
    return Base::IntMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jint) x;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[2], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

unsigned int SwigDirector_Base::UIntMethod(unsigned int x) {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jx  ;
  
  if (!swig_override[3]) {
    return Base::UIntMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jlong) x;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[3], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

float SwigDirector_Base::FloatMethod(float x) {
  float c_result = SwigValueInit< float >() ;
  jfloat jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  
  if (!swig_override[4]) {
    return Base::FloatMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jresult = (jfloat) jenv->CallStaticFloatMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[4], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (float)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

char *SwigDirector_Base::CharPtrMethod(char *x) {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jx = 0 ;
  
  if (!swig_override[5]) {
    return Base::CharPtrMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = 0;
    if (x) {
      jx = jenv->NewStringUTF((const char *)x);
      if (!jx) return c_result;
    }
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[5], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

char const *SwigDirector_Base::ConstCharPtrMethod(char const *x) {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jx = 0 ;
  
  if (!swig_override[6]) {
    return Base::ConstCharPtrMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = 0;
    if (x) {
      jx = jenv->NewStringUTF((const char *)x);
      if (!jx) return (char const *)c_result;
    }
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[6], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

HShadowMode SwigDirector_Base::EnumMethod(HShadowMode x) {
  HShadowMode c_result = SwigValueInit< HShadowMode >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jx  ;
  
  if (!swig_override[7]) {
    return Base::EnumMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jint) x;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[7], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (HShadowMode)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Base::ManyParmsMethod(bool b, int i, unsigned int u, float f, char *c, char const *cc, HShadowMode h) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jb  ;
  jint ji  ;
  jlong ju  ;
  jfloat jf  ;
  jstring jc = 0 ;
  jstring jcc = 0 ;
  jint jh  ;
  
  if (!swig_override[8]) {
    Base::ManyParmsMethod(b,i,u,f,c,cc,h);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jb = (jboolean) b;
    ji = (jint) i;
    ju = (jlong) u;
    jf = (jfloat) f;
    jc = 0;
    if (c) {
      jc = jenv->NewStringUTF((const char *)c);
      if (!jc) return ;
    }
    jcc = 0;
    if (cc) {
      jcc = jenv->NewStringUTF((const char *)cc);
      if (!jcc) return ;
    }
    jh = (jint) h;
    jenv->CallStaticVoidMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[8], swigjobj, jb, ji, ju, jf, jc, jcc, jh);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Base::NotOverriddenMethod() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[9]) {
    Base::NotOverriddenMethod();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[9], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Base::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "NoParmsMethod", "()V", NULL 
    },
    {
      "BoolMethod", "(Z)Z", NULL 
    },
    {
      "IntMethod", "(I)I", NULL 
    },
    {
      "UIntMethod", "(J)J", NULL 
    },
    {
      "FloatMethod", "(F)F", NULL 
    },
    {
      "CharPtrMethod", "(Ljava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "ConstCharPtrMethod", "(Ljava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "EnumMethod", "(Ldirector_primitives/HShadowMode;)Ldirector_primitives/HShadowMode;", NULL 
    },
    {
      "ManyParmsMethod", "(ZIJFLjava/lang/String;Ljava/lang/String;Ldirector_primitives/HShadowMode;)V", NULL 
    },
    {
      "NotOverriddenMethod", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("director_primitives/Base");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 10; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Derived::SwigDirector_Derived(JNIEnv *jenv, double dd) : Derived(dd), Swig::Director(jenv) {
}

SwigDirector_Derived::~SwigDirector_Derived() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Derived::NoParmsMethod() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    Derived::NoParmsMethod();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[10], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_Derived::BoolMethod(bool x) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jx  ;
  
  if (!swig_override[1]) {
    return Derived::BoolMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jboolean) x;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[11], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_Derived::IntMethod(int x) {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jx  ;
  
  if (!swig_override[2]) {
    return Derived::IntMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jint) x;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[12], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

unsigned int SwigDirector_Derived::UIntMethod(unsigned int x) {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jx  ;
  
  if (!swig_override[3]) {
    return Derived::UIntMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jlong) x;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[13], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

float SwigDirector_Derived::FloatMethod(float x) {
  float c_result = SwigValueInit< float >() ;
  jfloat jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  
  if (!swig_override[4]) {
    return Derived::FloatMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jresult = (jfloat) jenv->CallStaticFloatMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[14], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (float)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

char *SwigDirector_Derived::CharPtrMethod(char *x) {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jx = 0 ;
  
  if (!swig_override[5]) {
    return Derived::CharPtrMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = 0;
    if (x) {
      jx = jenv->NewStringUTF((const char *)x);
      if (!jx) return c_result;
    }
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[15], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

char const *SwigDirector_Derived::ConstCharPtrMethod(char const *x) {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jx = 0 ;
  
  if (!swig_override[6]) {
    return Derived::ConstCharPtrMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = 0;
    if (x) {
      jx = jenv->NewStringUTF((const char *)x);
      if (!jx) return (char const *)c_result;
    }
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[16], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

HShadowMode SwigDirector_Derived::EnumMethod(HShadowMode x) {
  HShadowMode c_result = SwigValueInit< HShadowMode >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jx  ;
  
  if (!swig_override[7]) {
    return Derived::EnumMethod(x);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jint) x;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[17], swigjobj, jx);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (HShadowMode)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Derived::ManyParmsMethod(bool b, int i, unsigned int u, float f, char *c, char const *cc, HShadowMode h) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jb  ;
  jint ji  ;
  jlong ju  ;
  jfloat jf  ;
  jstring jc = 0 ;
  jstring jcc = 0 ;
  jint jh  ;
  
  if (!swig_override[8]) {
    Derived::ManyParmsMethod(b,i,u,f,c,cc,h);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jb = (jboolean) b;
    ji = (jint) i;
    ju = (jlong) u;
    jf = (jfloat) f;
    jc = 0;
    if (c) {
      jc = jenv->NewStringUTF((const char *)c);
      if (!jc) return ;
    }
    jcc = 0;
    if (cc) {
      jcc = jenv->NewStringUTF((const char *)cc);
      if (!jcc) return ;
    }
    jh = (jint) h;
    jenv->CallStaticVoidMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[18], swigjobj, jb, ji, ju, jf, jc, jcc, jh);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Derived::NotOverriddenMethod() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[9]) {
    Base::NotOverriddenMethod();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_director_primitivesJNI, Swig::director_methids[19], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Derived::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "NoParmsMethod", "()V", NULL 
    },
    {
      "BoolMethod", "(Z)Z", NULL 
    },
    {
      "IntMethod", "(I)I", NULL 
    },
    {
      "UIntMethod", "(J)J", NULL 
    },
    {
      "FloatMethod", "(F)F", NULL 
    },
    {
      "CharPtrMethod", "(Ljava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "ConstCharPtrMethod", "(Ljava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "EnumMethod", "(Ldirector_primitives/HShadowMode;)Ldirector_primitives/HShadowMode;", NULL 
    },
    {
      "ManyParmsMethod", "(ZIJFLjava/lang/String;Ljava/lang/String;Ldirector_primitives/HShadowMode;)V", NULL 
    },
    {
      "NotOverriddenMethod", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("director_primitives/Derived");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 10; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_PrintDebug_1set(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  PrintDebug = arg1;
}


SWIGEXPORT jboolean JNICALL Java_director_1primitives_director_1primitivesJNI_PrintDebug_1get(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)PrintDebug;
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1primitives_director_1primitivesJNI_HShadowNone_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  HShadowMode result;
  
  (void)jenv;
  (void)jcls;
  result = (HShadowMode)HShadowNone;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1primitives_director_1primitivesJNI_HShadowSoft_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  HShadowMode result;
  
  (void)jenv;
  (void)jcls;
  result = (HShadowMode)HShadowSoft;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1primitives_director_1primitivesJNI_HShadowHard_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  HShadowMode result;
  
  (void)jenv;
  (void)jcls;
  result = (HShadowMode)HShadowHard;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1primitives_director_1primitivesJNI_new_1Base(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (Base *)new SwigDirector_Base(jenv,arg1);
  *(Base **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_delete_1Base(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Base *arg1 = (Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Base **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1NoParmsMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Base *arg1 = (Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  (arg1)->NoParmsMethod();
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1NoParmsMethodSwigExplicitBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Base *arg1 = (Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  (arg1)->Base::NoParmsMethod();
}


SWIGEXPORT jboolean JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1BoolMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->BoolMethod(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1BoolMethodSwigExplicitBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Base::BoolMethod(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1IntMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->IntMethod(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1IntMethodSwigExplicitBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->Base::IntMethod(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1UIntMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->UIntMethod(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1UIntMethodSwigExplicitBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->Base::UIntMethod(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1FloatMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  float arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->FloatMethod(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1FloatMethodSwigExplicitBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  float arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->Base::FloatMethod(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1CharPtrMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->CharPtrMethod(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1CharPtrMethodSwigExplicitBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->Base::CharPtrMethod(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1ConstCharPtrMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->ConstCharPtrMethod((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1ConstCharPtrMethodSwigExplicitBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->Base::ConstCharPtrMethod((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1EnumMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  HShadowMode arg2 ;
  HShadowMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = (HShadowMode)jarg2; 
  result = (HShadowMode)(arg1)->EnumMethod(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1EnumMethodSwigExplicitBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  HShadowMode arg2 ;
  HShadowMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = (HShadowMode)jarg2; 
  result = (HShadowMode)(arg1)->Base::EnumMethod(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1ManyParmsMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jlong jarg4, jfloat jarg5, jstring jarg6, jstring jarg7, jint jarg8) {
  Base *arg1 = (Base *) 0 ;
  bool arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  HShadowMode arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return ;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  arg8 = (HShadowMode)jarg8; 
  (arg1)->ManyParmsMethod(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1ManyParmsMethodSwigExplicitBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jlong jarg4, jfloat jarg5, jstring jarg6, jstring jarg7, jint jarg8) {
  Base *arg1 = (Base *) 0 ;
  bool arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  HShadowMode arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return ;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  arg8 = (HShadowMode)jarg8; 
  (arg1)->Base::ManyParmsMethod(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1NotOverriddenMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Base *arg1 = (Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  (arg1)->NotOverriddenMethod();
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1NotOverriddenMethodSwigExplicitBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Base *arg1 = (Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  (arg1)->Base::NotOverriddenMethod();
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Base *obj = *((Base **)&objarg);
  (void)jcls;
  SwigDirector_Base *director = dynamic_cast<SwigDirector_Base *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Base_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Base *obj = *((Base **)&objarg);
  SwigDirector_Base *director = dynamic_cast<SwigDirector_Base *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_director_1primitives_director_1primitivesJNI_new_1Derived(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  Derived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (Derived *)new SwigDirector_Derived(jenv,arg1);
  *(Derived **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_delete_1Derived(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Derived *arg1 = (Derived *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Derived **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1NoParmsMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Derived *arg1 = (Derived *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  (arg1)->NoParmsMethod();
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1NoParmsMethodSwigExplicitDerived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Derived *arg1 = (Derived *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  (arg1)->Derived::NoParmsMethod();
}


SWIGEXPORT jboolean JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1BoolMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->BoolMethod(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1BoolMethodSwigExplicitDerived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Derived::BoolMethod(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1IntMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->IntMethod(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1IntMethodSwigExplicitDerived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->Derived::IntMethod(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1UIntMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->UIntMethod(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1UIntMethodSwigExplicitDerived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->Derived::UIntMethod(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1FloatMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  float arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->FloatMethod(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1FloatMethodSwigExplicitDerived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  float arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->Derived::FloatMethod(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1CharPtrMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->CharPtrMethod(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1CharPtrMethodSwigExplicitDerived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->Derived::CharPtrMethod(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1ConstCharPtrMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->ConstCharPtrMethod((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1ConstCharPtrMethodSwigExplicitDerived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->Derived::ConstCharPtrMethod((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1EnumMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  HShadowMode arg2 ;
  HShadowMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = (HShadowMode)jarg2; 
  result = (HShadowMode)(arg1)->EnumMethod(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1EnumMethodSwigExplicitDerived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  HShadowMode arg2 ;
  HShadowMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = (HShadowMode)jarg2; 
  result = (HShadowMode)(arg1)->Derived::EnumMethod(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1ManyParmsMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jlong jarg4, jfloat jarg5, jstring jarg6, jstring jarg7, jint jarg8) {
  Derived *arg1 = (Derived *) 0 ;
  bool arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  HShadowMode arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return ;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  arg8 = (HShadowMode)jarg8; 
  (arg1)->ManyParmsMethod(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1ManyParmsMethodSwigExplicitDerived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jlong jarg4, jfloat jarg5, jstring jarg6, jstring jarg7, jint jarg8) {
  Derived *arg1 = (Derived *) 0 ;
  bool arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  HShadowMode arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return ;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  arg8 = (HShadowMode)jarg8; 
  (arg1)->Derived::ManyParmsMethod(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Derived *obj = *((Derived **)&objarg);
  (void)jcls;
  SwigDirector_Derived *director = dynamic_cast<SwigDirector_Derived *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Derived *obj = *((Derived **)&objarg);
  SwigDirector_Derived *director = dynamic_cast<SwigDirector_Derived *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_director_1primitives_director_1primitivesJNI_new_1Caller(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Caller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Caller *)new Caller();
  *(Caller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_delete_1Caller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Caller *arg1 = (Caller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Caller **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Caller_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Caller *arg1 = (Caller *) 0 ;
  Base *arg2 = (Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Caller **)&jarg1; 
  arg2 = *(Base **)&jarg2; 
  (arg1)->set(arg2);
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Caller_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Caller *arg1 = (Caller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Caller **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Caller_1NoParmsMethodCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Caller *arg1 = (Caller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Caller **)&jarg1; 
  (arg1)->NoParmsMethodCall();
}


SWIGEXPORT jboolean JNICALL Java_director_1primitives_director_1primitivesJNI_Caller_1BoolMethodCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  Caller *arg1 = (Caller *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Caller **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->BoolMethodCall(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1primitives_director_1primitivesJNI_Caller_1IntMethodCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Caller *arg1 = (Caller *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Caller **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->IntMethodCall(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1primitives_director_1primitivesJNI_Caller_1UIntMethodCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Caller *arg1 = (Caller *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Caller **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(arg1)->UIntMethodCall(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_director_1primitives_director_1primitivesJNI_Caller_1FloatMethodCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  Caller *arg1 = (Caller *) 0 ;
  float arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Caller **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (float)(arg1)->FloatMethodCall(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_director_1primitives_director_1primitivesJNI_Caller_1CharPtrMethodCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Caller *arg1 = (Caller *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Caller **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->CharPtrMethodCall(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_director_1primitives_director_1primitivesJNI_Caller_1ConstCharPtrMethodCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  Caller *arg1 = (Caller *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Caller **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->ConstCharPtrMethodCall((char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1primitives_director_1primitivesJNI_Caller_1EnumMethodCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Caller *arg1 = (Caller *) 0 ;
  HShadowMode arg2 ;
  HShadowMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Caller **)&jarg1; 
  arg2 = (HShadowMode)jarg2; 
  result = (HShadowMode)(arg1)->EnumMethodCall(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Caller_1ManyParmsMethodCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3, jlong jarg4, jfloat jarg5, jstring jarg6, jstring jarg7, jint jarg8) {
  Caller *arg1 = (Caller *) 0 ;
  bool arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  HShadowMode arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Caller **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return ;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  arg8 = (HShadowMode)jarg8; 
  (arg1)->ManyParmsMethodCall(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
}


SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_Caller_1NotOverriddenMethodCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Caller *arg1 = (Caller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Caller **)&jarg1; 
  (arg1)->NotOverriddenMethodCall();
}


SWIGEXPORT jlong JNICALL Java_director_1primitives_director_1primitivesJNI_Derived_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Base **)&baseptr = *(Derived **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_director_1primitives_director_1primitivesJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[20] = {
    {
      "SwigDirector_Base_NoParmsMethod", "(Ldirector_primitives/Base;)V" 
    },
    {
      "SwigDirector_Base_BoolMethod", "(Ldirector_primitives/Base;Z)Z" 
    },
    {
      "SwigDirector_Base_IntMethod", "(Ldirector_primitives/Base;I)I" 
    },
    {
      "SwigDirector_Base_UIntMethod", "(Ldirector_primitives/Base;J)J" 
    },
    {
      "SwigDirector_Base_FloatMethod", "(Ldirector_primitives/Base;F)F" 
    },
    {
      "SwigDirector_Base_CharPtrMethod", "(Ldirector_primitives/Base;Ljava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_Base_ConstCharPtrMethod", "(Ldirector_primitives/Base;Ljava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_Base_EnumMethod", "(Ldirector_primitives/Base;I)I" 
    },
    {
      "SwigDirector_Base_ManyParmsMethod", "(Ldirector_primitives/Base;ZIJFLjava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Base_NotOverriddenMethod", "(Ldirector_primitives/Base;)V" 
    },
    {
      "SwigDirector_Derived_NoParmsMethod", "(Ldirector_primitives/Derived;)V" 
    },
    {
      "SwigDirector_Derived_BoolMethod", "(Ldirector_primitives/Derived;Z)Z" 
    },
    {
      "SwigDirector_Derived_IntMethod", "(Ldirector_primitives/Derived;I)I" 
    },
    {
      "SwigDirector_Derived_UIntMethod", "(Ldirector_primitives/Derived;J)J" 
    },
    {
      "SwigDirector_Derived_FloatMethod", "(Ldirector_primitives/Derived;F)F" 
    },
    {
      "SwigDirector_Derived_CharPtrMethod", "(Ldirector_primitives/Derived;Ljava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_Derived_ConstCharPtrMethod", "(Ldirector_primitives/Derived;Ljava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_Derived_EnumMethod", "(Ldirector_primitives/Derived;I)I" 
    },
    {
      "SwigDirector_Derived_ManyParmsMethod", "(Ldirector_primitives/Derived;ZIJFLjava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Derived_NotOverriddenMethod", "(Ldirector_primitives/Derived;)V" 
    }
  };
  Swig::jclass_director_primitivesJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_director_primitivesJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

