/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package enum_thorough_proper;

public class IgnoreTest {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected IgnoreTest(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IgnoreTest obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        enum_thorough_properJNI.delete_IgnoreTest(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public IgnoreTest() {
    this(enum_thorough_properJNI.new_IgnoreTest(), true);
  }

  public enum IgnoreA {
    ignoreA_zero,
    ignoreA_three(enum_thorough_properJNI.IgnoreTest_ignoreA_three_get()),
    ignoreA_ten(10),
    ignoreA_eleven,
    ignoreA_thirteen(enum_thorough_properJNI.IgnoreTest_ignoreA_thirteen_get()),
    ignoreA_fourteen,
    ignoreA_twenty(20),
    ignoreA_thirty(30),
    ignoreA_thirty_two((30) + 2),
    ignoreA_thirty_three;

    public final int swigValue() {
      return swigValue;
    }

    public static IgnoreA swigToEnum(int swigValue) {
      IgnoreA[] swigValues = IgnoreA.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (IgnoreA swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + IgnoreA.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private IgnoreA() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private IgnoreA(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private IgnoreA(IgnoreA swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum IgnoreB {
    ignoreB_eleven((10) + 1),
    ignoreB_twelve,
    ignoreB_thirty_one((30) + 1),
    ignoreB_thirty_two,
    ignoreB_forty_one((40) + 1),
    ignoreB_forty_two;

    public final int swigValue() {
      return swigValue;
    }

    public static IgnoreB swigToEnum(int swigValue) {
      IgnoreB[] swigValues = IgnoreB.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (IgnoreB swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + IgnoreB.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private IgnoreB() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private IgnoreB(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private IgnoreB(IgnoreB swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum IgnoreC {
    ignoreC_ten(10),
    ignoreC_twelve((10) + 2),
    ignoreC_twenty(20),
    ignoreC_thirty(30),
    ignoreC_thirty_two((30) + 2),
    ignoreC_forty(40),
    ignoreC_forty_two((40) + 2);

    public final int swigValue() {
      return swigValue;
    }

    public static IgnoreC swigToEnum(int swigValue) {
      IgnoreC[] swigValues = IgnoreC.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (IgnoreC swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + IgnoreC.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private IgnoreC() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private IgnoreC(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private IgnoreC(IgnoreC swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum IgnoreD {
    ignoreD_twenty_one((20) + 1),
    ignoreD_twenty_two;

    public final int swigValue() {
      return swigValue;
    }

    public static IgnoreD swigToEnum(int swigValue) {
      IgnoreD[] swigValues = IgnoreD.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (IgnoreD swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + IgnoreD.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private IgnoreD() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private IgnoreD(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private IgnoreD(IgnoreD swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum IgnoreE {
    ignoreE_zero,
    ignoreE_twenty_one((20) + 1),
    ignoreE_twenty_two;

    public final int swigValue() {
      return swigValue;
    }

    public static IgnoreE swigToEnum(int swigValue) {
      IgnoreE[] swigValues = IgnoreE.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (IgnoreE swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + IgnoreE.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private IgnoreE() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private IgnoreE(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private IgnoreE(IgnoreE swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
