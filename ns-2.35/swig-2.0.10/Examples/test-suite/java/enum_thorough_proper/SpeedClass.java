/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package enum_thorough_proper;

public class SpeedClass {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected SpeedClass(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SpeedClass obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        enum_thorough_properJNI.delete_SpeedClass(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public int speedTest0(int s) {
    return enum_thorough_properJNI.SpeedClass_speedTest0(swigCPtr, this, s);
  }

  public SpeedClass.speed speedTest1(SpeedClass.speed s) {
    return SpeedClass.speed.swigToEnum(enum_thorough_properJNI.SpeedClass_speedTest1(swigCPtr, this, s.swigValue()));
  }

  public SpeedClass.speed speedTest2(SpeedClass.speed s) {
    return SpeedClass.speed.swigToEnum(enum_thorough_properJNI.SpeedClass_speedTest2(swigCPtr, this, s.swigValue()));
  }

  public SpeedClass.speed speedTest3(SpeedClass.speed s) {
    return SpeedClass.speed.swigToEnum(enum_thorough_properJNI.SpeedClass_speedTest3(swigCPtr, this, s.swigValue()));
  }

  public SpeedClass.speed speedTest4(SpeedClass.speed s) {
    return SpeedClass.speed.swigToEnum(enum_thorough_properJNI.SpeedClass_speedTest4(swigCPtr, this, s.swigValue()));
  }

  public SpeedClass.speed speedTest5(SpeedClass.speed s) {
    return SpeedClass.speed.swigToEnum(enum_thorough_properJNI.SpeedClass_speedTest5(swigCPtr, this, s.swigValue()));
  }

  public SpeedClass.speed speedTest6(SpeedClass.speed s) {
    return SpeedClass.speed.swigToEnum(enum_thorough_properJNI.SpeedClass_speedTest6(swigCPtr, this, s.swigValue()));
  }

  public SpeedClass.speed speedTest7(SpeedClass.speed s) {
    return SpeedClass.speed.swigToEnum(enum_thorough_properJNI.SpeedClass_speedTest7(swigCPtr, this, s.swigValue()));
  }

  public SpeedClass.speed speedTest8(SpeedClass.speed s) {
    return SpeedClass.speed.swigToEnum(enum_thorough_properJNI.SpeedClass_speedTest8(swigCPtr, this, s.swigValue()));
  }

  public colour getMyColour2() {
    return colour.swigToEnum(enum_thorough_properJNI.SpeedClass_myColour2_get(swigCPtr, this));
  }

  public void setMySpeedtd1(SpeedClass.speed value) {
    enum_thorough_properJNI.SpeedClass_mySpeedtd1_set(swigCPtr, this, value.swigValue());
  }

  public SpeedClass.speed getMySpeedtd1() {
    return SpeedClass.speed.swigToEnum(enum_thorough_properJNI.SpeedClass_mySpeedtd1_get(swigCPtr, this));
  }

  public SpeedClass() {
    this(enum_thorough_properJNI.new_SpeedClass(), true);
  }

  public enum speed {
    slow(enum_thorough_properJNI.SpeedClass_slow_get()),
    medium(enum_thorough_properJNI.SpeedClass_medium_get()),
    fast(enum_thorough_properJNI.SpeedClass_fast_get()),
    lightning;

    public final int swigValue() {
      return swigValue;
    }

    public static speed swigToEnum(int swigValue) {
      speed[] swigValues = speed.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (speed swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + speed.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private speed() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private speed(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private speed(speed swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
