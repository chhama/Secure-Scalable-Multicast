/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package enum_thorough_proper;

public class Obscure {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Obscure(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Obscure obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        enum_thorough_properJNI.delete_Obscure(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Obscure() {
    this(enum_thorough_properJNI.new_Obscure(), true);
  }

  public enum Zero {
  ;

    public final int swigValue() {
      return swigValue;
    }

    public static Zero swigToEnum(int swigValue) {
      Zero[] swigValues = Zero.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Zero swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Zero.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Zero() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Zero(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Zero(Zero swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum One {
    one;

    public final int swigValue() {
      return swigValue;
    }

    public static One swigToEnum(int swigValue) {
      One[] swigValues = One.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (One swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + One.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private One() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private One(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private One(One swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum Two {
    two,
    twoagain;

    public final int swigValue() {
      return swigValue;
    }

    public static Two swigToEnum(int swigValue) {
      Two[] swigValues = Two.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Two swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Two.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Two() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Two(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Two(Two swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum Empty {
  ;

    public final int swigValue() {
      return swigValue;
    }

    public static Empty swigToEnum(int swigValue) {
      Empty[] swigValues = Empty.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Empty swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Empty.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Empty() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Empty(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Empty(Empty swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum AlsoEmpty {
  ;

    public final int swigValue() {
      return swigValue;
    }

    public static AlsoEmpty swigToEnum(int swigValue) {
      AlsoEmpty[] swigValues = AlsoEmpty.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (AlsoEmpty swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + AlsoEmpty.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private AlsoEmpty() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private AlsoEmpty(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private AlsoEmpty(AlsoEmpty swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
