/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package enum_thorough_proper;

public class TreesClass {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected TreesClass(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TreesClass obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        enum_thorough_properJNI.delete_TreesClass(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public TreesClass.trees treesTest1(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTest1(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTest2(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTest2(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTest3(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTest3(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTest4(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTest4(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTest5(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTest5(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTest6(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTest6(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTest7(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTest7(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTest8(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTest8(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTest9(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTest9(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestA(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestA(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestB(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestB(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestC(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestC(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestD(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestD(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestE(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestE(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestF(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestF(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestG(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestG(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestH(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestH(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestI(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestI(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestJ(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestJ(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestK(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestK(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestL(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestL(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestM(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestM(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestN(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestN(swigCPtr, this, e.swigValue()));
  }

  public TreesClass.trees treesTestO(TreesClass.trees e) {
    return TreesClass.trees.swigToEnum(enum_thorough_properJNI.TreesClass_treesTestO(swigCPtr, this, e.swigValue()));
  }

  public TreesClass() {
    this(enum_thorough_properJNI.new_TreesClass(), true);
  }

  public enum trees {
    oak,
    fir,
    pine;

    public final int swigValue() {
      return swigValue;
    }

    public static trees swigToEnum(int swigValue) {
      trees[] swigValues = trees.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (trees swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + trees.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private trees() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private trees(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private trees(trees swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
