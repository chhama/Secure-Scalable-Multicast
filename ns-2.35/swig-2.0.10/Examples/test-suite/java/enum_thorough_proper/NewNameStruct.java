/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package enum_thorough_proper;

public class NewNameStruct {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected NewNameStruct(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(NewNameStruct obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        enum_thorough_properJNI.delete_NewNameStruct(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public NewNameStruct.enumeration renameTest1(NewNameStruct.enumeration e) {
    return NewNameStruct.enumeration.swigToEnum(enum_thorough_properJNI.NewNameStruct_renameTest1(swigCPtr, this, e.swigValue()));
  }

  public NewNameStruct.enumeration renameTest2(NewNameStruct.enumeration e) {
    return NewNameStruct.enumeration.swigToEnum(enum_thorough_properJNI.NewNameStruct_renameTest2(swigCPtr, this, e.swigValue()));
  }

  public NewNameStruct.simplerenamed renameTest3(NewNameStruct.simplerenamed e) {
    return NewNameStruct.simplerenamed.swigToEnum(enum_thorough_properJNI.NewNameStruct_renameTest3(swigCPtr, this, e.swigValue()));
  }

  public NewNameStruct.doublenamerenamed renameTest4(NewNameStruct.doublenamerenamed e) {
    return NewNameStruct.doublenamerenamed.swigToEnum(enum_thorough_properJNI.NewNameStruct_renameTest4(swigCPtr, this, e.swigValue()));
  }

  public NewNameStruct.doublenamerenamed renameTest5(NewNameStruct.doublenamerenamed e) {
    return NewNameStruct.doublenamerenamed.swigToEnum(enum_thorough_properJNI.NewNameStruct_renameTest5(swigCPtr, this, e.swigValue()));
  }

  public NewNameStruct.singlenamerenamed renameTest6(NewNameStruct.singlenamerenamed e) {
    return NewNameStruct.singlenamerenamed.swigToEnum(enum_thorough_properJNI.NewNameStruct_renameTest6(swigCPtr, this, e.swigValue()));
  }

  public NewNameStruct() {
    this(enum_thorough_properJNI.new_NewNameStruct(), true);
  }

  public enum enumeration {
    whizz,
    bang,
    pop;

    public final int swigValue() {
      return swigValue;
    }

    public static enumeration swigToEnum(int swigValue) {
      enumeration[] swigValues = enumeration.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (enumeration swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + enumeration.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private enumeration() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private enumeration(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private enumeration(enumeration swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum simplerenamed {
    simple1;

    public final int swigValue() {
      return swigValue;
    }

    public static simplerenamed swigToEnum(int swigValue) {
      simplerenamed[] swigValues = simplerenamed.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (simplerenamed swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + simplerenamed.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private simplerenamed() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private simplerenamed(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private simplerenamed(simplerenamed swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum doublenamerenamed {
    doublename1;

    public final int swigValue() {
      return swigValue;
    }

    public static doublenamerenamed swigToEnum(int swigValue) {
      doublenamerenamed[] swigValues = doublenamerenamed.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (doublenamerenamed swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + doublenamerenamed.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private doublenamerenamed() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private doublenamerenamed(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private doublenamerenamed(doublenamerenamed swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum singlenamerenamed {
    singlename1;

    public final int swigValue() {
      return swigValue;
    }

    public static singlenamerenamed swigToEnum(int swigValue) {
      singlenamerenamed[] swigValues = singlenamerenamed.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (singlenamerenamed swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + singlenamerenamed.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private singlenamerenamed() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private singlenamerenamed(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private singlenamerenamed(singlenamerenamed swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

}
