/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



  enum Hola {
    hi, hello
  };
  
  struct A {
    A(int a, short b, Hola h) {}
    int funk(int a) { return a; }

    int func0(short, int c, int d) { return c; }
    int func1(short, int c, int d) { return c; }    
    int func2(short, int c, int d) { return c; }
    int func3(short, int c, int d) { return c; }

    int func0default(A *e, short, int c, int d, double f = 2) { return 0; }
    int func1default(A *e, short, int c, int d, double f = 2) { return 0; }    
    int func2default(A *e, short, int c, int d, double f = 2) { return 0; }
    int func3default(A *e, short, int c, int d, double f = 2) { return 0; }

    static int func0static(A *e, short, int c, int d, double f = 2) { return 0; }
    static int func1static(A *e, short, int c, int d, double f = 2) { return 0; }    
    static int func2static(A *e, short, int c, int d, double f = 2) { return 0; }
    static int func3static(A *e, short, int c, int d, double f = 2) { return 0; }

    int variable_a;
    int variable_b;
    int variable_c;
    int variable_d;
  }; 


  
  struct B {
    B(int a, int b, Hola h) {}
    int funk(int c, int d) { return c; }
  }; 

  struct C {
    C(int a, int b, Hola h) {}
  }; 
  struct D {
    D(int a, int b, Hola h) {}
  }; 
  struct E {
    E(int a, int b, Hola h) {}
  }; 
  struct F {
    F(int a, int b, Hola h) {}
  }; 

  int funk(A *e, short, int c, int d) { return c; }
  int funkdefaults(A *e, short, int c, int d, double f = 2) { return c; }


  int func_input(int *INPUT) {
    return 1;
  }
  int func_output(int *OUTPUT) {
    *OUTPUT = 2;
    return 1;
  }
  int func_inout(int *INOUT) {
    *INOUT += 1;
    return 1;
  }


  int func_cb(int c, int d) { return c; }


typedef struct tagS {
  int a;
  char b;
} S;

typedef int Integer;

void banana(S *a, const struct tagS *b, int c, Integer d) {}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_autodoc_autodocJNI_new_1A(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  short arg2 ;
  Hola arg3 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (Hola)jarg3; 
  result = (A *)new A(arg1,arg2,arg3);
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1funk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->funk(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = 0; arg4 = 0;
  result = (int)(arg1)->func0(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = 0; arg4 = 0;
  result = (int)(arg1)->func1(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = 0; arg4 = 0;
  result = (int)(arg1)->func2(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = 0; arg4 = 0;
  result = (int)(arg1)->func3(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func0default_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jint jarg4, jdouble jarg6) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  A *arg2 = (A *) 0 ;
  short arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(A **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  arg3 = (short)jarg3; 
  arg4 = 0; arg5 = 0;
  arg6 = (double)jarg6; 
  result = (int)(arg1)->func0default(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func0default_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jint jarg4) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  A *arg2 = (A *) 0 ;
  short arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(A **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  arg3 = (short)jarg3; 
  arg4 = 0; arg5 = 0;
  result = (int)(arg1)->func0default(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func1default_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jint jarg4, jdouble jarg6) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  A *arg2 = (A *) 0 ;
  short arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(A **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  arg3 = (short)jarg3; 
  arg4 = 0; arg5 = 0;
  arg6 = (double)jarg6; 
  result = (int)(arg1)->func1default(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func1default_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jint jarg4) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  A *arg2 = (A *) 0 ;
  short arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(A **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  arg3 = (short)jarg3; 
  arg4 = 0; arg5 = 0;
  result = (int)(arg1)->func1default(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func2default_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jint jarg4, jdouble jarg6) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  A *arg2 = (A *) 0 ;
  short arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(A **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  arg3 = (short)jarg3; 
  arg4 = 0; arg5 = 0;
  arg6 = (double)jarg6; 
  result = (int)(arg1)->func2default(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func2default_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jint jarg4) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  A *arg2 = (A *) 0 ;
  short arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(A **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  arg3 = (short)jarg3; 
  arg4 = 0; arg5 = 0;
  result = (int)(arg1)->func2default(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func3default_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jint jarg4, jdouble jarg6) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  A *arg2 = (A *) 0 ;
  short arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(A **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  arg3 = (short)jarg3; 
  arg4 = 0; arg5 = 0;
  arg6 = (double)jarg6; 
  result = (int)(arg1)->func3default(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func3default_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jshort jarg3, jint jarg4) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  A *arg2 = (A *) 0 ;
  short arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(A **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  arg3 = (short)jarg3; 
  arg4 = 0; arg5 = 0;
  result = (int)(arg1)->func3default(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func0static_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3, jdouble jarg5) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = 0; arg4 = 0;
  arg5 = (double)jarg5; 
  result = (int)A::func0static(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func0static_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = 0; arg4 = 0;
  result = (int)A::func0static(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func1static_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3, jdouble jarg5) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = 0; arg4 = 0;
  arg5 = (double)jarg5; 
  result = (int)A::func1static(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func1static_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = 0; arg4 = 0;
  result = (int)A::func1static(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func2static_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3, jdouble jarg5) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = 0; arg4 = 0;
  arg5 = (double)jarg5; 
  result = (int)A::func2static(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func2static_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = 0; arg4 = 0;
  result = (int)A::func2static(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func3static_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3, jdouble jarg5) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = 0; arg4 = 0;
  arg5 = (double)jarg5; 
  result = (int)A::func3static(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1func3static_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = 0; arg4 = 0;
  result = (int)A::func3static(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_A_1variable_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  A *arg1 = (A *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->variable_a = arg2;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1variable_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (int) ((arg1)->variable_a);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_A_1variable_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  A *arg1 = (A *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->variable_b = arg2;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1variable_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (int) ((arg1)->variable_b);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_A_1variable_1c_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  A *arg1 = (A *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->variable_c = arg2;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1variable_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (int) ((arg1)->variable_c);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_A_1variable_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  A *arg1 = (A *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->variable_d = arg2;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_A_1variable_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (int) ((arg1)->variable_d);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_delete_1A(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  A *arg1 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(A **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_autodoc_autodocJNI_new_1B(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  Hola arg3 ;
  B *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Hola)jarg3; 
  result = (B *)new B(arg1,arg2,arg3);
  *(B **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_B_1funk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  B *arg1 = (B *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->funk(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_delete_1B(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  B *arg1 = (B *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(B **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_autodoc_autodocJNI_new_1C(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  Hola arg3 ;
  C *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Hola)jarg3; 
  result = (C *)new C(arg1,arg2,arg3);
  *(C **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_delete_1C(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  C *arg1 = (C *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(C **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_autodoc_autodocJNI_new_1D(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  Hola arg3 ;
  D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Hola)jarg3; 
  result = (D *)new D(arg1,arg2,arg3);
  *(D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_delete_1D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  D *arg1 = (D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_autodoc_autodocJNI_new_1E(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  Hola arg3 ;
  E *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Hola)jarg3; 
  result = (E *)new E(arg1,arg2,arg3);
  *(E **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_delete_1E(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  E *arg1 = (E *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(E **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_autodoc_autodocJNI_new_1F(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  Hola arg3 ;
  F *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Hola)jarg3; 
  result = (F *)new F(arg1,arg2,arg3);
  *(F **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_delete_1F(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  F *arg1 = (F *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(F **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_funk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)funk(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_funkdefaults_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3, jint jarg4, jdouble jarg5) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  double arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  result = (int)funkdefaults(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_funkdefaults_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  short arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)funkdefaults(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_func_1input(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int *)&jarg1; 
  result = (int)func_input(arg1);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_func_1output(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int temp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp1 = (int)0;
    arg1 = &temp1; 
  }
  result = (int)func_output(arg1);
  jresult = (jint)result; 
  {
    jint jvalue = (jint)temp1;
    jenv->SetIntArrayRegion(jarg1, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_func_1inout(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    arg1 = (int *) jenv->GetIntArrayElements(jarg1, 0); 
  }
  result = (int)func_inout(arg1);
  jresult = (jint)result; 
  {
    jenv->ReleaseIntArrayElements(jarg1, (jint *)arg1, 0); 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_autodoc_autodocJNI_FUNC_1CB_1CALLBACK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int (*result)(int,int) = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int (*)(int,int))func_cb;
  *(int (**)(int,int))&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_func_1cb(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)func_cb(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_S_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  tagS *arg1 = (tagS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagS **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT jint JNICALL Java_autodoc_autodocJNI_S_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  tagS *arg1 = (tagS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagS **)&jarg1; 
  result = (int) ((arg1)->a);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_S_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  tagS *arg1 = (tagS *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagS **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jchar JNICALL Java_autodoc_autodocJNI_S_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  tagS *arg1 = (tagS *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagS **)&jarg1; 
  result = (char) ((arg1)->b);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_autodoc_autodocJNI_new_1S(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tagS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tagS *)new tagS();
  *(tagS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_delete_1S(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tagS *arg1 = (tagS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tagS **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_autodoc_autodocJNI_banana(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  S *arg1 = (S *) 0 ;
  tagS *arg2 = (tagS *) 0 ;
  int arg3 ;
  Integer arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(S **)&jarg1; 
  arg2 = *(tagS **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Integer)jarg4; 
  banana(arg1,(tagS const *)arg2,arg3,arg4);
}


#ifdef __cplusplus
}
#endif

