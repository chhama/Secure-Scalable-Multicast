/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


namespace ns {
  template <class T> struct ForwardTemplate {
    void tmethod(T t) {}
  };
}



namespace ns {

  class NormalClass {
  public:
    NormalClass() {}
    ~NormalClass() {}
  };

  template <class T> struct NormalTemplate {
    void tmethod(T t) {}
  };

  class OuterClass {
  public:
    template <class T> struct Inner1 {
      template <class U> struct SuperInner1 {
        void method1(U t) {}
      };
      template <class V> struct SuperInner2 {
        void method1(V t) {}
      };
      template <class W> void tmethod(W w) {}
      template <class X> void tmethodAgain(X x) {}
      template <class Y> struct SuperBase : public SuperInner1<Y> {
        void method1(Y y) {}
      };
    };
    Inner1<int> useInner1(const Inner1<int>& inner) { return inner; }

    template <class Z> void InnerTMethod(Z z) {}

    template <class T> class Inner2 : public NormalTemplate<T> {
    public:
      template <class U> class SuperInner1 {
      public:
        SuperInner1() {}
        void method1(U t) {}
      };
      template <class V> struct SuperInner2 {
        void method1(V t) {}
      };
      int embeddedVar;
      template <class X> void tmethod(X x) {}
      template <class Y> struct SuperBase : public SuperInner1<Y> {
        void method1(Y y) {}
      };
    };
    Inner2<int> useInner2(const Inner2<int>& inner) { return inner; }
    int iii;
  };
  struct ABC {
    ABC() {}
    ~ABC() {}
  };

  struct TemplateFuncs {
    template <class X> X templateMethod1(X x) { return x; }
    template <class X> X templateMethod2(X x) { return x; }
  };

  template <typename UU> struct OuterTemplate {
    template <typename VV> struct NestedInnerTemplate1 {
      template <typename Z> void NestedInnerInnerTMethod(Z z) {}
      void hohum() {}
    };
    template <typename W> void NestedInnerTMethod(UU u, W w) {}
    template <typename VV> struct NestedInnerTemplate2 {
      void hohum() {}
    };
    UU hohum(UU u) { return u; }
    template <typename VV> struct NestedInnerTemplate3 : public NestedInnerTemplate2<VV> {
      void hohum() {}
    };
    struct NestedStruct {
      NestedStruct() {}
      void hohum() {}
    };
    NestedInnerTemplate1<short> useNestedInnerTemplate1(const NestedInnerTemplate1<short>& inner) { return inner; }
    NestedInnerTemplate2<short> useNestedInnerTemplate2(const NestedInnerTemplate2<short>& inner) { return inner; }
    NestedInnerTemplate3<short> useNestedInnerTemplate3(const NestedInnerTemplate3<short>& inner) { return inner; }
    NestedStruct useNestedStruct(const NestedStruct& inner) { return inner; }
  };
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_template_1nested_template_1nestedJNI_new_1NormalClass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ns::NormalClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ns::NormalClass *)new ns::NormalClass();
  *(ns::NormalClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1nested_template_1nestedJNI_delete_1NormalClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ns::NormalClass *arg1 = (ns::NormalClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ns::NormalClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1nested_template_1nestedJNI_OuterClass_1useInner1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ns::OuterClass *arg1 = (ns::OuterClass *) 0 ;
  ns::OuterClass::Inner1< int > *arg2 = 0 ;
  SwigValueWrapper< ns::OuterClass::Inner1< int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ns::OuterClass **)&jarg1; 
  arg2 = *(ns::OuterClass::Inner1< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ns::OuterClass::Inner1< int > const & reference is null");
    return 0;
  } 
  result = (arg1)->useInner1((ns::OuterClass::Inner1< int > const &)*arg2);
  *(ns::OuterClass::Inner1< int > **)&jresult = new ns::OuterClass::Inner1< int >((const ns::OuterClass::Inner1< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1nested_template_1nestedJNI_OuterClass_1useInner2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ns::OuterClass *arg1 = (ns::OuterClass *) 0 ;
  ns::OuterClass::Inner2< int > *arg2 = 0 ;
  SwigValueWrapper< ns::OuterClass::Inner2< int > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ns::OuterClass **)&jarg1; 
  arg2 = *(ns::OuterClass::Inner2< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ns::OuterClass::Inner2< int > const & reference is null");
    return 0;
  } 
  result = (arg1)->useInner2((ns::OuterClass::Inner2< int > const &)*arg2);
  *(ns::OuterClass::Inner2< int > **)&jresult = new ns::OuterClass::Inner2< int >((const ns::OuterClass::Inner2< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1nested_template_1nestedJNI_OuterClass_1iii_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ns::OuterClass *arg1 = (ns::OuterClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ns::OuterClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iii = arg2;
}


SWIGEXPORT jint JNICALL Java_template_1nested_template_1nestedJNI_OuterClass_1iii_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ns::OuterClass *arg1 = (ns::OuterClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ns::OuterClass **)&jarg1; 
  result = (int) ((arg1)->iii);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1nested_template_1nestedJNI_OuterClass_1T_1OuterTMethodNormalClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ns::OuterClass *arg1 = (ns::OuterClass *) 0 ;
  ns::NormalClass arg2 ;
  ns::NormalClass *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ns::OuterClass **)&jarg1; 
  argp2 = *(ns::NormalClass **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ns::NormalClass");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SWIGTEMPLATEDISAMBIGUATOR InnerTMethod< ns::NormalClass >(arg2);
}


SWIGEXPORT jlong JNICALL Java_template_1nested_template_1nestedJNI_new_1OuterClass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ns::OuterClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ns::OuterClass *)new ns::OuterClass();
  *(ns::OuterClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1nested_template_1nestedJNI_delete_1OuterClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ns::OuterClass *arg1 = (ns::OuterClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ns::OuterClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1nested_template_1nestedJNI_new_1ABC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ns::ABC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ns::ABC *)new ns::ABC();
  *(ns::ABC **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1nested_template_1nestedJNI_delete_1ABC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ns::ABC *arg1 = (ns::ABC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ns::ABC **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_template_1nested_template_1nestedJNI_TemplateFuncs_1T_1TemplateFuncs1Int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ns::TemplateFuncs *arg1 = (ns::TemplateFuncs *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ns::TemplateFuncs **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->SWIGTEMPLATEDISAMBIGUATOR templateMethod1< int >(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_template_1nested_template_1nestedJNI_TemplateFuncs_1T_1TemplateFuncs2Double(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  ns::TemplateFuncs *arg1 = (ns::TemplateFuncs *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ns::TemplateFuncs **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->SWIGTEMPLATEDISAMBIGUATOR templateMethod2< double >(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1nested_template_1nestedJNI_new_1TemplateFuncs(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ns::TemplateFuncs *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ns::TemplateFuncs *)new ns::TemplateFuncs();
  *(ns::TemplateFuncs **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1nested_template_1nestedJNI_delete_1TemplateFuncs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ns::TemplateFuncs *arg1 = (ns::TemplateFuncs *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ns::TemplateFuncs **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1nested_template_1nestedJNI_T_1NormalTemplateNormalClass_1tmethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ns::NormalTemplate< ns::NormalClass > *arg1 = (ns::NormalTemplate< ns::NormalClass > *) 0 ;
  ns::NormalClass arg2 ;
  ns::NormalClass *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ns::NormalTemplate< ns::NormalClass > **)&jarg1; 
  argp2 = *(ns::NormalClass **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ns::NormalClass");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->tmethod(arg2);
}


SWIGEXPORT jlong JNICALL Java_template_1nested_template_1nestedJNI_new_1T_1NormalTemplateNormalClass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ns::NormalTemplate< ns::NormalClass > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ns::NormalTemplate< ns::NormalClass > *)new ns::NormalTemplate< ns::NormalClass >();
  *(ns::NormalTemplate< ns::NormalClass > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1nested_template_1nestedJNI_delete_1T_1NormalTemplateNormalClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ns::NormalTemplate< ns::NormalClass > *arg1 = (ns::NormalTemplate< ns::NormalClass > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ns::NormalTemplate< ns::NormalClass > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_template_1nested_template_1nestedJNI_T_1NestedOuterTemplateDouble_1hohum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  ns::OuterTemplate< double > *arg1 = (ns::OuterTemplate< double > *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ns::OuterTemplate< double > **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->hohum(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1nested_template_1nestedJNI_T_1NestedOuterTemplateDouble_1useNestedInnerTemplate1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ns::OuterTemplate< double > *arg1 = (ns::OuterTemplate< double > *) 0 ;
  ns::OuterTemplate< double >::NestedInnerTemplate1< short > *arg2 = 0 ;
  SwigValueWrapper< ns::OuterTemplate< double >::NestedInnerTemplate1< short > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ns::OuterTemplate< double > **)&jarg1; 
  arg2 = *(ns::OuterTemplate< double >::NestedInnerTemplate1< short > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ns::OuterTemplate< double >::NestedInnerTemplate1< short > const & reference is null");
    return 0;
  } 
  result = (arg1)->useNestedInnerTemplate1((ns::OuterTemplate< double >::NestedInnerTemplate1< short > const &)*arg2);
  *(ns::OuterTemplate< double >::NestedInnerTemplate1< short > **)&jresult = new ns::OuterTemplate< double >::NestedInnerTemplate1< short >((const ns::OuterTemplate< double >::NestedInnerTemplate1< short > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1nested_template_1nestedJNI_T_1NestedOuterTemplateDouble_1useNestedInnerTemplate2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ns::OuterTemplate< double > *arg1 = (ns::OuterTemplate< double > *) 0 ;
  ns::OuterTemplate< double >::NestedInnerTemplate2< short > *arg2 = 0 ;
  SwigValueWrapper< ns::OuterTemplate< double >::NestedInnerTemplate2< short > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ns::OuterTemplate< double > **)&jarg1; 
  arg2 = *(ns::OuterTemplate< double >::NestedInnerTemplate2< short > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ns::OuterTemplate< double >::NestedInnerTemplate2< short > const & reference is null");
    return 0;
  } 
  result = (arg1)->useNestedInnerTemplate2((ns::OuterTemplate< double >::NestedInnerTemplate2< short > const &)*arg2);
  *(ns::OuterTemplate< double >::NestedInnerTemplate2< short > **)&jresult = new ns::OuterTemplate< double >::NestedInnerTemplate2< short >((const ns::OuterTemplate< double >::NestedInnerTemplate2< short > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1nested_template_1nestedJNI_T_1NestedOuterTemplateDouble_1useNestedInnerTemplate3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ns::OuterTemplate< double > *arg1 = (ns::OuterTemplate< double > *) 0 ;
  ns::OuterTemplate< double >::NestedInnerTemplate3< short > *arg2 = 0 ;
  SwigValueWrapper< ns::OuterTemplate< double >::NestedInnerTemplate3< short > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ns::OuterTemplate< double > **)&jarg1; 
  arg2 = *(ns::OuterTemplate< double >::NestedInnerTemplate3< short > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ns::OuterTemplate< double >::NestedInnerTemplate3< short > const & reference is null");
    return 0;
  } 
  result = (arg1)->useNestedInnerTemplate3((ns::OuterTemplate< double >::NestedInnerTemplate3< short > const &)*arg2);
  *(ns::OuterTemplate< double >::NestedInnerTemplate3< short > **)&jresult = new ns::OuterTemplate< double >::NestedInnerTemplate3< short >((const ns::OuterTemplate< double >::NestedInnerTemplate3< short > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1nested_template_1nestedJNI_T_1NestedOuterTemplateDouble_1useNestedStruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ns::OuterTemplate< double > *arg1 = (ns::OuterTemplate< double > *) 0 ;
  ns::OuterTemplate< double >::NestedStruct *arg2 = 0 ;
  ns::OuterTemplate< double >::NestedStruct result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ns::OuterTemplate< double > **)&jarg1; 
  arg2 = *(ns::OuterTemplate< double >::NestedStruct **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ns::OuterTemplate< double >::NestedStruct const & reference is null");
    return 0;
  } 
  result = (arg1)->useNestedStruct((ns::OuterTemplate< double >::NestedStruct const &)*arg2);
  *(ns::OuterTemplate< double >::NestedStruct **)&jresult = new ns::OuterTemplate< double >::NestedStruct((const ns::OuterTemplate< double >::NestedStruct &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1nested_template_1nestedJNI_new_1T_1NestedOuterTemplateDouble(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ns::OuterTemplate< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ns::OuterTemplate< double > *)new ns::OuterTemplate< double >();
  *(ns::OuterTemplate< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1nested_template_1nestedJNI_delete_1T_1NestedOuterTemplateDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ns::OuterTemplate< double > *arg1 = (ns::OuterTemplate< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ns::OuterTemplate< double > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

