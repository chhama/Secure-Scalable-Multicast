/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


int CONST_ACCESS = 1;
int MUTABLE_ACCESS = 2;

int *new_int(int ivalue) {
  int *i = (int *) malloc(sizeof(ivalue));
  *i = ivalue;
  return i;
}

int get_int(int *i) {
  return *i;
}

void set_int(int *i, int ivalue) {
  *i = ivalue;
}

void delete_int(int *i) {
  free(i);
}

struct Foo {
   int x;
   int * const xp;
   const int y;
   const int *yp;
   int access;
   Foo() : x(0), xp(&x), y(0), yp(&y), access(0) { }
   int getx() const { return x; }
   void setx(int x_) { x = x_; }
   static void stat() {}
};

SWIGINTERN int Foo_getx2(Foo const *self){ return self->x; }
SWIGINTERN void Foo_setx2(Foo *self,int x_){ self->x = x_; }

class Bar {
   Foo *f;
public:
   Bar(Foo *f) : f(f) { }
   const Foo *operator->() const {
       f->access = CONST_ACCESS;
       return f;
   }
   Foo *operator->() {
       f->access = MUTABLE_ACCESS;
       return f;
   }
};

class Bar2 {
   Foo *f;
public:
   Bar2(Foo *f) : f(f) { }
   Foo *operator->() {
       f->access = MUTABLE_ACCESS;
       return f;
   }
   const Foo *operator->() const {
       f->access = CONST_ACCESS;
       return f;
   }
};


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_CONST_1ACCESS_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  CONST_ACCESS = arg1;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_CONST_1ACCESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CONST_ACCESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_MUTABLE_1ACCESS_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  MUTABLE_ACCESS = arg1;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_MUTABLE_1ACCESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MUTABLE_ACCESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_new_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)new_int(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_get_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  result = (int)get_int(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_set_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  set_int(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_delete_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_int(arg1);
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Foo_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Foo_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Foo_1xp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (int *)(int *) ((arg1)->xp);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Foo_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (int)(int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Foo_1yp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  if (arg1) (arg1)->yp = (int const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Foo_1yp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (int *) ((arg1)->yp);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Foo_1access_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->access = arg2;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Foo_1access_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (int) ((arg1)->access);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_new_1Foo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo *)new Foo();
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Foo_1getx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (int)((Foo const *)arg1)->getx();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Foo_1setx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setx(arg2);
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Foo_1stat(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  Foo::stat();
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Foo_1getx2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (int)Foo_getx2((Foo const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Foo_1setx2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  Foo_setx2(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_delete_1Foo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_new_1Bar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  Bar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (Bar *)new Bar(arg1);
  *(Bar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1_1_1deref_1_1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bar *arg1 = (Bar *) 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  result = (Foo *)((Bar const *)arg1)->operator ->();
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_delete_1Bar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bar *arg1 = (Bar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bar *arg1 = (Bar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (*arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bar *arg1 = (Bar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  result = (int) ((*(Bar const *)arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1xp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bar *arg1 = (Bar *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  result = (int *)(int *) ((*(Bar const *)arg1)->xp);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bar *arg1 = (Bar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  result = (int)(int) ((*(Bar const *)arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1yp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Bar *arg1 = (Bar *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  if (arg1) (*arg1)->yp = (int const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1yp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bar *arg1 = (Bar *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  result = (int *) ((*(Bar const *)arg1)->yp);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1access_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bar *arg1 = (Bar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (*arg1)->access = arg2;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1access_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bar *arg1 = (Bar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  result = (int) ((*(Bar const *)arg1)->access);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1getx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bar *arg1 = (Bar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  result = (int)(*((Bar const *)arg1))->getx();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1setx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bar *arg1 = (Bar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->setx(arg2);
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1stat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Bar *arg1 = (Bar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  (*(Bar const *)arg1)->stat();
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1getx2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bar *arg1 = (Bar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  result = (int)Foo_getx2((Foo const *)((Bar const *)arg1)->operator ->());
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar_1setx2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bar *arg1 = (Bar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  arg2 = (int)jarg2; 
  Foo_setx2((Foo*)(arg1)->operator ->(),arg2);
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_new_1Bar2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  Bar2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (Bar2 *)new Bar2(arg1);
  *(Bar2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1_1_1deref_1_1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bar2 *arg1 = (Bar2 *) 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  result = (Foo *)(arg1)->operator ->();
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_delete_1Bar2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bar2 *arg1 = (Bar2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bar2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bar2 *arg1 = (Bar2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (*arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bar2 *arg1 = (Bar2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  result = (int) ((*(Bar2 const *)arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1xp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bar2 *arg1 = (Bar2 *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  result = (int *)(int *) ((*(Bar2 const *)arg1)->xp);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bar2 *arg1 = (Bar2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  result = (int)(int) ((*(Bar2 const *)arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1yp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Bar2 *arg1 = (Bar2 *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  if (arg1) (*arg1)->yp = (int const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1yp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bar2 *arg1 = (Bar2 *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  result = (int *) ((*(Bar2 const *)arg1)->yp);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1access_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bar2 *arg1 = (Bar2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (*arg1)->access = arg2;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1access_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bar2 *arg1 = (Bar2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  result = (int) ((*(Bar2 const *)arg1)->access);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1getx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bar2 *arg1 = (Bar2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  result = (int)(*((Bar2 const *)arg1))->getx();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1setx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bar2 *arg1 = (Bar2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->setx(arg2);
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1stat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Bar2 *arg1 = (Bar2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  (*(Bar2 const *)arg1)->stat();
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1getx2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bar2 *arg1 = (Bar2 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  result = (int)Foo_getx2((Foo const *)((Bar2 const *)arg1)->operator ->());
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1const_1overload_smart_1pointer_1const_1overloadJNI_Bar2_1setx2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Bar2 *arg1 = (Bar2 *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar2 **)&jarg1; 
  arg2 = (int)jarg2; 
  Foo_setx2((Foo*)(arg1)->operator ->(),arg2);
}


#ifdef __cplusplus
}
#endif

