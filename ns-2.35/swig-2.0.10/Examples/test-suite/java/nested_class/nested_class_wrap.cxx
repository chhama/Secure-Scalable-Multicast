/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


struct Outer {
  typedef int Integer;
  ///////////////////////////////////////////
  struct InnerStruct1 {
    Integer x;
  };

  class InnerClass1 {
  public:
    Integer x;
  };

  union InnerUnion1 {
    Integer x;
    double y;
  };

  ///////////////////////////////////////////
#ifdef SWIG
/* some compilers do not accept these */
  class {
  public:
    Integer a;
  };

  struct {
    Integer b;
  };
#endif

  union {
    Integer c;
    double d;
  };

  ///////////////////////////////////////////
  class InnerClass2 {
  public:
    Integer x;
  } InnerClass2Instance;

  struct InnerStruct2 {
    Integer x;
  } InnerStruct2Instance;

  union InnerUnion2 {
    Integer x;
    double y;
  } InnerUnion2Instance;

  ///////////////////////////////////////////
  class {
  public:
    Integer x;
  } InnerClass3Instance;

  struct {
    Integer x;
  } InnerStruct3Instance;

  union {
    Integer x;
    double y;
  } InnerUnion3Instance;

  ///////////////////////////////////////////
  typedef class {
  public:
    Integer x;
  } InnerClass4Typedef;

  typedef struct {
    Integer x;
  } InnerStruct4Typedef;

  typedef union {
    Integer x;
    double y;
  } InnerUnion4Typedef;

  ///////////////////////////////////////////
  typedef class InnerClass5 {
  public:
    Integer x;
  } InnerClass5Typedef;

  typedef struct InnerStruct5 {
    Integer x;
  } InnerStruct5Typedef;

  typedef union InnerUnion5 {
    Integer x;
    double y;
  } InnerUnion5Typedef;

  // bug #909387 - inner declared types are treated as forward declarations
  InnerStruct1* makeInnerStruct1() { return 0; }
  InnerClass1* makeInnerClass1() { return 0; }
  InnerUnion1* makeInnerUnion1() { return 0; }

  InnerStruct2* makeInnerStruct2() { return 0; }
  InnerClass2* makeInnerClass2() { return 0; }
  InnerUnion2* makeInnerUnion2() { return 0; }

  InnerStruct4Typedef* makeInnerStruct4Typedef() { return 0; }
  InnerClass4Typedef* makeInnerClass4Typedef() { return 0; }
  InnerUnion4Typedef* makeInnerUnion4Typedef() { return 0; }

  InnerStruct5* makeInnerStruct5() { return 0; }
  InnerClass5* makeInnerClass5() { return 0; }
  InnerUnion5* makeInnerUnion5() { return 0; }

  InnerStruct5Typedef* makeInnerStruct5Typedef() { return 0; }
  InnerClass5Typedef* makeInnerClass5Typedef() { return 0; }
  InnerUnion5Typedef* makeInnerUnion5Typedef() { return 0; }

  ///////////////////////////////////////////
  struct InnerMultiple {
    Integer x;
  } MultipleInstance1, MultipleInstance2, *MultipleInstance3, MultipleInstance4[2];

  struct InnerMultipleDerived : public InnerMultiple {
    Integer xx;
  } MultipleDerivedInstance1, MultipleDerivedInstance2, *MultipleDerivedInstance3, MultipleDerivedInstance4[2];

  struct {
    Integer x;
  } MultipleInstanceAnon1, MultipleInstanceAnon2, *MultipleInstanceAnon3, MultipleInstanceAnon4[2];

  struct : public InnerMultiple {
    Integer xx;
  } MultipleInstanceAnonDerived1, MultipleInstanceAnonDerived2, *MultipleInstanceAnonDerived3, MultipleInstanceAnonDerived4[2];

#ifdef SWIG
/* some compilers do not accept these */
  struct : public InnerMultiple {
    Integer xx;
  };

  class : public InnerMultiple {
  public:
    Integer yy;
  };
#endif

  ///////////////////////////////////////////
  typedef struct {
    Integer x;
  } InnerMultipleAnonTypedef1, InnerMultipleAnonTypedef2, *InnerMultipleAnonTypedef3;

  InnerMultipleAnonTypedef1* makeInnerMultipleAnonTypedef1() { return 0; }
  InnerMultipleAnonTypedef2* makeInnerMultipleAnonTypedef2() { return 0; }
  InnerMultipleAnonTypedef3* makeInnerMultipleAnonTypedef3() { return 0; }

  typedef struct InnerMultipleNamedTypedef {
    Integer x;
  } InnerMultipleNamedTypedef1, InnerMultipleNamedTypedef2, *InnerMultipleNamedTypedef3;

  InnerMultipleNamedTypedef* makeInnerMultipleNamedTypedef() { return 0; }
  InnerMultipleNamedTypedef1* makeInnerMultipleNamedTypedef1() { return 0; }
  InnerMultipleNamedTypedef2* makeInnerMultipleNamedTypedef2() { return 0; }
  InnerMultipleNamedTypedef3* makeInnerMultipleNamedTypedef3() { return 0; }

  ///////////////////////////////////////////
  typedef struct InnerSameName {
    Integer x;
  } InnerSameName;

  InnerSameName* makeInnerSameName() { return 0; }
};


struct Outer2 {
  struct IgnoreMe {
    int xx;
  };
};


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_nested_1class_nested_1classJNI_Outer_1InnerClass2Instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerClass2 *arg2 = (Outer::InnerClass2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  arg2 = *(Outer::InnerClass2 **)&jarg2; 
  if (arg1) (arg1)->InnerClass2Instance = *arg2;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1InnerClass2Instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerClass2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerClass2 *)& ((arg1)->InnerClass2Instance);
  *(Outer::InnerClass2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nested_1class_nested_1classJNI_Outer_1InnerStruct2Instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerStruct2 *arg2 = (Outer::InnerStruct2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  arg2 = *(Outer::InnerStruct2 **)&jarg2; 
  if (arg1) (arg1)->InnerStruct2Instance = *arg2;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1InnerStruct2Instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerStruct2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerStruct2 *)& ((arg1)->InnerStruct2Instance);
  *(Outer::InnerStruct2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nested_1class_nested_1classJNI_Outer_1InnerUnion2Instance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerUnion2 *arg2 = (Outer::InnerUnion2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  arg2 = *(Outer::InnerUnion2 **)&jarg2; 
  if (arg1) (arg1)->InnerUnion2Instance = *arg2;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1InnerUnion2Instance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerUnion2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerUnion2 *)& ((arg1)->InnerUnion2Instance);
  *(Outer::InnerUnion2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerStruct1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerStruct1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerStruct1 *)(arg1)->makeInnerStruct1();
  *(Outer::InnerStruct1 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerClass1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerClass1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerClass1 *)(arg1)->makeInnerClass1();
  *(Outer::InnerClass1 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerUnion1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerUnion1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerUnion1 *)(arg1)->makeInnerUnion1();
  *(Outer::InnerUnion1 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerStruct2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerStruct2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerStruct2 *)(arg1)->makeInnerStruct2();
  *(Outer::InnerStruct2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerClass2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerClass2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerClass2 *)(arg1)->makeInnerClass2();
  *(Outer::InnerClass2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerUnion2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerUnion2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerUnion2 *)(arg1)->makeInnerUnion2();
  *(Outer::InnerUnion2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerStruct4Typedef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerStruct4Typedef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerStruct4Typedef *)(arg1)->makeInnerStruct4Typedef();
  *(Outer::InnerStruct4Typedef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerClass4Typedef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerClass4Typedef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerClass4Typedef *)(arg1)->makeInnerClass4Typedef();
  *(Outer::InnerClass4Typedef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerUnion4Typedef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerUnion4Typedef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerUnion4Typedef *)(arg1)->makeInnerUnion4Typedef();
  *(Outer::InnerUnion4Typedef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerStruct5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerStruct5 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerStruct5 *)(arg1)->makeInnerStruct5();
  *(Outer::InnerStruct5 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerClass5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerClass5 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerClass5 *)(arg1)->makeInnerClass5();
  *(Outer::InnerClass5 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerUnion5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerUnion5 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerUnion5 *)(arg1)->makeInnerUnion5();
  *(Outer::InnerUnion5 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerStruct5Typedef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerStruct5Typedef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerStruct5Typedef *)(arg1)->makeInnerStruct5Typedef();
  *(Outer::InnerStruct5Typedef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerClass5Typedef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerClass5Typedef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerClass5Typedef *)(arg1)->makeInnerClass5Typedef();
  *(Outer::InnerClass5Typedef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerUnion5Typedef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerUnion5Typedef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerUnion5Typedef *)(arg1)->makeInnerUnion5Typedef();
  *(Outer::InnerUnion5Typedef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleInstance1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultiple *arg2 = (Outer::InnerMultiple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  arg2 = *(Outer::InnerMultiple **)&jarg2; 
  if (arg1) (arg1)->MultipleInstance1 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleInstance1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultiple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultiple *)& ((arg1)->MultipleInstance1);
  *(Outer::InnerMultiple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleInstance2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultiple *arg2 = (Outer::InnerMultiple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  arg2 = *(Outer::InnerMultiple **)&jarg2; 
  if (arg1) (arg1)->MultipleInstance2 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleInstance2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultiple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultiple *)& ((arg1)->MultipleInstance2);
  *(Outer::InnerMultiple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleInstance3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultiple *arg2 = (Outer::InnerMultiple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  arg2 = *(Outer::InnerMultiple **)&jarg2; 
  if (arg1) (arg1)->MultipleInstance3 = arg2;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleInstance3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultiple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultiple *) ((arg1)->MultipleInstance3);
  *(Outer::InnerMultiple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleInstance4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultiple *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  arg2 = *(Outer::InnerMultiple **)&jarg2; 
  {
    size_t ii;
    Outer::InnerMultiple *b = (Outer::InnerMultiple *) arg1->MultipleInstance4;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((Outer::InnerMultiple *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleInstance4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultiple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultiple *)(Outer::InnerMultiple *) ((arg1)->MultipleInstance4);
  *(Outer::InnerMultiple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleDerivedInstance1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleDerived *arg2 = (Outer::InnerMultipleDerived *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  arg2 = *(Outer::InnerMultipleDerived **)&jarg2; 
  if (arg1) (arg1)->MultipleDerivedInstance1 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleDerivedInstance1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultipleDerived *)& ((arg1)->MultipleDerivedInstance1);
  *(Outer::InnerMultipleDerived **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleDerivedInstance2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleDerived *arg2 = (Outer::InnerMultipleDerived *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  arg2 = *(Outer::InnerMultipleDerived **)&jarg2; 
  if (arg1) (arg1)->MultipleDerivedInstance2 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleDerivedInstance2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultipleDerived *)& ((arg1)->MultipleDerivedInstance2);
  *(Outer::InnerMultipleDerived **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleDerivedInstance3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleDerived *arg2 = (Outer::InnerMultipleDerived *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  arg2 = *(Outer::InnerMultipleDerived **)&jarg2; 
  if (arg1) (arg1)->MultipleDerivedInstance3 = arg2;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleDerivedInstance3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultipleDerived *) ((arg1)->MultipleDerivedInstance3);
  *(Outer::InnerMultipleDerived **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleDerivedInstance4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleDerived *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  arg2 = *(Outer::InnerMultipleDerived **)&jarg2; 
  {
    size_t ii;
    Outer::InnerMultipleDerived *b = (Outer::InnerMultipleDerived *) arg1->MultipleDerivedInstance4;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((Outer::InnerMultipleDerived *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1MultipleDerivedInstance4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultipleDerived *)(Outer::InnerMultipleDerived *) ((arg1)->MultipleDerivedInstance4);
  *(Outer::InnerMultipleDerived **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerMultipleAnonTypedef1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleAnonTypedef1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultipleAnonTypedef1 *)(arg1)->makeInnerMultipleAnonTypedef1();
  *(Outer::InnerMultipleAnonTypedef1 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerMultipleAnonTypedef2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleAnonTypedef2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultipleAnonTypedef2 *)(arg1)->makeInnerMultipleAnonTypedef2();
  *(Outer::InnerMultipleAnonTypedef2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerMultipleAnonTypedef3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleAnonTypedef3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultipleAnonTypedef3 *)(arg1)->makeInnerMultipleAnonTypedef3();
  *(Outer::InnerMultipleAnonTypedef3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerMultipleNamedTypedef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleNamedTypedef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultipleNamedTypedef *)(arg1)->makeInnerMultipleNamedTypedef();
  *(Outer::InnerMultipleNamedTypedef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerMultipleNamedTypedef1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleNamedTypedef1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultipleNamedTypedef1 *)(arg1)->makeInnerMultipleNamedTypedef1();
  *(Outer::InnerMultipleNamedTypedef1 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerMultipleNamedTypedef2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleNamedTypedef2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultipleNamedTypedef2 *)(arg1)->makeInnerMultipleNamedTypedef2();
  *(Outer::InnerMultipleNamedTypedef2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerMultipleNamedTypedef3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerMultipleNamedTypedef3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerMultipleNamedTypedef3 *)(arg1)->makeInnerMultipleNamedTypedef3();
  *(Outer::InnerMultipleNamedTypedef3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_Outer_1makeInnerSameName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer *arg1 = (Outer *) 0 ;
  Outer::InnerSameName *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer **)&jarg1; 
  result = (Outer::InnerSameName *)(arg1)->makeInnerSameName();
  *(Outer::InnerSameName **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_new_1Outer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Outer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Outer *)new Outer();
  *(Outer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nested_1class_nested_1classJNI_delete_1Outer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Outer *arg1 = (Outer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Outer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nested_1class_nested_1classJNI_new_1Outer2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Outer2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Outer2 *)new Outer2();
  *(Outer2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nested_1class_nested_1classJNI_delete_1Outer2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Outer2 *arg1 = (Outer2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Outer2 **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

