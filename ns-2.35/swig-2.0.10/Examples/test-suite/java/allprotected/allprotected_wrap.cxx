/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_allprotectedJNI = NULL;
    jmethodID director_methids[2];
  }
}

#include <string>


#include <string>


class Klass {
  std::string name;
public:
  Klass(const std::string& n) : name(n) {}
  std::string getName() { return name; }
};

class PublicBase {
  std::string str;
public:
  enum AnEnum { EnumVal1, EnumVal2 };
public:
  PublicBase(const char* s): str(s), instanceMemberVariable(0), anEnum(EnumVal1), stringMember(0) {}
  virtual ~PublicBase() { }
  virtual std::string virtualMethod() const { return "PublicBase"; }
  Klass instanceMethod(Klass k) const { return k; }
  Klass *instanceOverloaded(Klass *k) const { return k; }
  Klass *instanceOverloaded(Klass *k, std::string name) const { return new Klass(name); }
  static Klass staticMethod(Klass k) { return k; }
  static Klass *staticOverloaded(Klass *k) { return k; }
  static Klass *staticOverloaded(Klass *k, std::string name) { return new Klass(name); }
  int instanceMemberVariable;
  static int staticMemberVariable;
  static const int staticConstMemberVariable = 20;
  AnEnum anEnum;
  char *stringMember;
};
int PublicBase::staticMemberVariable = 10;

class ProtectedBase {
  std::string str;
public:
  enum AnEnum { EnumVal1, EnumVal2 };
  std::string getName() { return str; }
protected:
  ProtectedBase(const char* s): str(s), instanceMemberVariable(0), anEnum(EnumVal1), stringMember(0), protectedenum(ProtEnumVal1) {}
  virtual ~ProtectedBase() { }
  virtual std::string virtualMethod() const { return "ProtectedBase"; }
  Klass instanceMethod(Klass k) const { return k; }
  Klass *instanceOverloaded(Klass *k) const { return k; }
  Klass *instanceOverloaded(Klass *k, std::string name) const { return new Klass(name); }
  static Klass staticMethod(Klass k) { return k; }
  static Klass *staticOverloaded(Klass *k) { return k; }
  static Klass *staticOverloaded(Klass *k, std::string name) { return new Klass(name); }
  int instanceMemberVariable;
  static int staticMemberVariable;
  static const int staticConstMemberVariable = 20;
  AnEnum anEnum;
  char *stringMember;

// unsupported: types defined with protected access and thus methods/variables which use them
  enum ProtectedEnum { ProtEnumVal1, ProtEnumVal2 };
  typedef int IntegerType;
  ProtectedEnum protectedenum;
  IntegerType typedefs(IntegerType it) { return it; }
};
int ProtectedBase::staticMemberVariable = 10;




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "allprotected_wrap.h"

SwigDirector_PublicBase::SwigDirector_PublicBase(JNIEnv *jenv, char const *s) : PublicBase(s), Swig::Director(jenv) {
}

SwigDirector_PublicBase::~SwigDirector_PublicBase() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_PublicBase::virtualMethod() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return PublicBase::virtualMethod();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_allprotectedJNI, Swig::director_methids[0], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_PublicBase::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "virtualMethod", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("allprotected/PublicBase");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ProtectedBase::SwigDirector_ProtectedBase(JNIEnv *jenv, char const *s) : ProtectedBase(s), Swig::Director(jenv) {
}

SwigDirector_ProtectedBase::~SwigDirector_ProtectedBase() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_ProtectedBase::virtualMethod() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return ProtectedBase::virtualMethod();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_allprotectedJNI, Swig::director_methids[1], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ProtectedBase::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "virtualMethod", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("allprotected/ProtectedBase");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_new_1Klass(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (Klass *)new Klass((std::string const &)*arg1);
  *(Klass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_allprotected_allprotectedJNI_Klass_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Klass *arg1 = (Klass *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Klass **)&jarg1; 
  result = (arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_delete_1Klass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Klass *arg1 = (Klass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Klass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_new_1PublicBase(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  PublicBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (PublicBase *)new SwigDirector_PublicBase(jenv,(char const *)arg1);
  *(PublicBase **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_delete_1PublicBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PublicBase *arg1 = (PublicBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PublicBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_allprotected_allprotectedJNI_PublicBase_1virtualMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PublicBase *arg1 = (PublicBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicBase **)&jarg1; 
  result = ((PublicBase const *)arg1)->virtualMethod();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_allprotected_allprotectedJNI_PublicBase_1virtualMethodSwigExplicitPublicBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PublicBase *arg1 = (PublicBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicBase **)&jarg1; 
  result = ((PublicBase const *)arg1)->PublicBase::virtualMethod();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_PublicBase_1instanceMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  PublicBase *arg1 = (PublicBase *) 0 ;
  SwigValueWrapper< Klass > arg2 ;
  Klass *argp2 ;
  SwigValueWrapper< Klass > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicBase **)&jarg1; 
  argp2 = *(Klass **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass");
    return 0;
  }
  arg2 = *argp2; 
  result = ((PublicBase const *)arg1)->instanceMethod(arg2);
  *(Klass **)&jresult = new Klass((const Klass &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_PublicBase_1instanceOverloaded_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  PublicBase *arg1 = (PublicBase *) 0 ;
  Klass *arg2 = (Klass *) 0 ;
  Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicBase **)&jarg1; 
  arg2 = *(Klass **)&jarg2; 
  result = (Klass *)((PublicBase const *)arg1)->instanceOverloaded(arg2);
  *(Klass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_PublicBase_1instanceOverloaded_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  PublicBase *arg1 = (PublicBase *) 0 ;
  Klass *arg2 = (Klass *) 0 ;
  std::string arg3 ;
  Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PublicBase **)&jarg1; 
  arg2 = *(Klass **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (Klass *)((PublicBase const *)arg1)->instanceOverloaded(arg2,arg3);
  *(Klass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_PublicBase_1staticMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigValueWrapper< Klass > arg1 ;
  Klass *argp1 ;
  SwigValueWrapper< Klass > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Klass **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass");
    return 0;
  }
  arg1 = *argp1; 
  result = PublicBase::staticMethod(arg1);
  *(Klass **)&jresult = new Klass((const Klass &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_PublicBase_1staticOverloaded_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Klass *arg1 = (Klass *) 0 ;
  Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Klass **)&jarg1; 
  result = (Klass *)PublicBase::staticOverloaded(arg1);
  *(Klass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_PublicBase_1staticOverloaded_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Klass *arg1 = (Klass *) 0 ;
  std::string arg2 ;
  Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Klass **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Klass *)PublicBase::staticOverloaded(arg1,arg2);
  *(Klass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_PublicBase_1instanceMemberVariable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PublicBase *arg1 = (PublicBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicBase **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->instanceMemberVariable = arg2;
}


SWIGEXPORT jint JNICALL Java_allprotected_allprotectedJNI_PublicBase_1instanceMemberVariable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PublicBase *arg1 = (PublicBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicBase **)&jarg1; 
  result = (int) ((arg1)->instanceMemberVariable);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_PublicBase_1staticMemberVariable_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  PublicBase::staticMemberVariable = arg1;
}


SWIGEXPORT jint JNICALL Java_allprotected_allprotectedJNI_PublicBase_1staticMemberVariable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)PublicBase::staticMemberVariable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_allprotected_allprotectedJNI_PublicBase_1staticConstMemberVariable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)PublicBase::staticConstMemberVariable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_PublicBase_1anEnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  PublicBase *arg1 = (PublicBase *) 0 ;
  PublicBase::AnEnum arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicBase **)&jarg1; 
  arg2 = (PublicBase::AnEnum)jarg2; 
  if (arg1) (arg1)->anEnum = arg2;
}


SWIGEXPORT jint JNICALL Java_allprotected_allprotectedJNI_PublicBase_1anEnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  PublicBase *arg1 = (PublicBase *) 0 ;
  PublicBase::AnEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicBase **)&jarg1; 
  result = (PublicBase::AnEnum) ((arg1)->anEnum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_PublicBase_1stringMember_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  PublicBase *arg1 = (PublicBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->stringMember;
    if (arg2) {
      arg1->stringMember = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->stringMember, (const char *)arg2);
    } else {
      arg1->stringMember = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_allprotected_allprotectedJNI_PublicBase_1stringMember_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PublicBase *arg1 = (PublicBase *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PublicBase **)&jarg1; 
  result = (char *) ((arg1)->stringMember);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_PublicBase_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  PublicBase *obj = *((PublicBase **)&objarg);
  (void)jcls;
  SwigDirector_PublicBase *director = dynamic_cast<SwigDirector_PublicBase *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_PublicBase_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  PublicBase *obj = *((PublicBase **)&objarg);
  SwigDirector_PublicBase *director = dynamic_cast<SwigDirector_PublicBase *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ProtectedBase *arg1 = (ProtectedBase *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProtectedBase **)&jarg1; 
  result = (arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_new_1ProtectedBase(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ProtectedBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ProtectedBase *)new SwigDirector_ProtectedBase(jenv,(char const *)arg1);
  *(ProtectedBase **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1virtualMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ProtectedBase *arg1 = (ProtectedBase *) 0 ;
  SwigDirector_ProtectedBase *darg = 0;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProtectedBase **)&jarg1; 
  darg = dynamic_cast<SwigDirector_ProtectedBase *>(arg1);
  result = ((SwigDirector_ProtectedBase const *)darg)->virtualMethod();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1virtualMethodSwigExplicitProtectedBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ProtectedBase *arg1 = (ProtectedBase *) 0 ;
  SwigDirector_ProtectedBase *darg = 0;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProtectedBase **)&jarg1; 
  darg = dynamic_cast<SwigDirector_ProtectedBase *>(arg1);
  result = ((SwigDirector_ProtectedBase const *)darg)->virtualMethodSwigPublic();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1instanceMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ProtectedBase *arg1 = (ProtectedBase *) 0 ;
  SwigValueWrapper< Klass > arg2 ;
  Klass *argp2 ;
  SwigDirector_ProtectedBase *darg = 0;
  SwigValueWrapper< Klass > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProtectedBase **)&jarg1; 
  argp2 = *(Klass **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass");
    return 0;
  }
  arg2 = *argp2; 
  darg = dynamic_cast<SwigDirector_ProtectedBase *>(arg1);
  result = ((SwigDirector_ProtectedBase const *)darg)->instanceMethod(arg2);
  *(Klass **)&jresult = new Klass((const Klass &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1instanceOverloaded_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ProtectedBase *arg1 = (ProtectedBase *) 0 ;
  Klass *arg2 = (Klass *) 0 ;
  SwigDirector_ProtectedBase *darg = 0;
  Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProtectedBase **)&jarg1; 
  arg2 = *(Klass **)&jarg2; 
  darg = dynamic_cast<SwigDirector_ProtectedBase *>(arg1);
  result = (Klass *)((SwigDirector_ProtectedBase const *)darg)->instanceOverloaded(arg2);
  *(Klass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1instanceOverloaded_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  ProtectedBase *arg1 = (ProtectedBase *) 0 ;
  Klass *arg2 = (Klass *) 0 ;
  std::string arg3 ;
  SwigDirector_ProtectedBase *darg = 0;
  Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ProtectedBase **)&jarg1; 
  arg2 = *(Klass **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  darg = dynamic_cast<SwigDirector_ProtectedBase *>(arg1);
  result = (Klass *)((SwigDirector_ProtectedBase const *)darg)->instanceOverloaded(arg2,arg3);
  *(Klass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1staticMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigValueWrapper< Klass > arg1 ;
  Klass *argp1 ;
  SwigValueWrapper< Klass > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Klass **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass");
    return 0;
  }
  arg1 = *argp1; 
  result = SwigDirector_ProtectedBase::staticMethod(arg1);
  *(Klass **)&jresult = new Klass((const Klass &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1staticOverloaded_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Klass *arg1 = (Klass *) 0 ;
  Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Klass **)&jarg1; 
  result = (Klass *)SwigDirector_ProtectedBase::staticOverloaded(arg1);
  *(Klass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1staticOverloaded_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Klass *arg1 = (Klass *) 0 ;
  std::string arg2 ;
  Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Klass **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (Klass *)SwigDirector_ProtectedBase::staticOverloaded(arg1,arg2);
  *(Klass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1instanceMemberVariable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ProtectedBase *arg1 = (ProtectedBase *) 0 ;
  int arg2 ;
  SwigDirector_ProtectedBase *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProtectedBase **)&jarg1; 
  arg2 = (int)jarg2; 
  darg = dynamic_cast<SwigDirector_ProtectedBase *>(arg1);
  if (arg1) darg->instanceMemberVariable = arg2;
}


SWIGEXPORT jint JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1instanceMemberVariable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ProtectedBase *arg1 = (ProtectedBase *) 0 ;
  SwigDirector_ProtectedBase *darg = 0;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProtectedBase **)&jarg1; 
  darg = dynamic_cast<SwigDirector_ProtectedBase *>(arg1);
  result = (int) (darg->instanceMemberVariable);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1staticMemberVariable_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  SwigDirector_ProtectedBase::staticMemberVariable = arg1;
}


SWIGEXPORT jint JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1staticMemberVariable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)SwigDirector_ProtectedBase::staticMemberVariable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1staticConstMemberVariable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)SwigDirector_ProtectedBase::staticConstMemberVariable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1anEnum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ProtectedBase *arg1 = (ProtectedBase *) 0 ;
  ProtectedBase::AnEnum arg2 ;
  SwigDirector_ProtectedBase *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProtectedBase **)&jarg1; 
  arg2 = (ProtectedBase::AnEnum)jarg2; 
  darg = dynamic_cast<SwigDirector_ProtectedBase *>(arg1);
  if (arg1) darg->anEnum = arg2;
}


SWIGEXPORT jint JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1anEnum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ProtectedBase *arg1 = (ProtectedBase *) 0 ;
  SwigDirector_ProtectedBase *darg = 0;
  ProtectedBase::AnEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProtectedBase **)&jarg1; 
  darg = dynamic_cast<SwigDirector_ProtectedBase *>(arg1);
  result = (ProtectedBase::AnEnum) (darg->anEnum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1stringMember_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ProtectedBase *arg1 = (ProtectedBase *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigDirector_ProtectedBase *darg = 0;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProtectedBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  darg = dynamic_cast<SwigDirector_ProtectedBase *>(arg1);
  {
    delete [] darg->stringMember;
    if (arg2) {
      darg->stringMember = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)darg->stringMember, (const char *)arg2);
    } else {
      darg->stringMember = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1stringMember_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ProtectedBase *arg1 = (ProtectedBase *) 0 ;
  SwigDirector_ProtectedBase *darg = 0;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProtectedBase **)&jarg1; 
  darg = dynamic_cast<SwigDirector_ProtectedBase *>(arg1);
  result = (char *) (darg->stringMember);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ProtectedBase *obj = *((ProtectedBase **)&objarg);
  (void)jcls;
  SwigDirector_ProtectedBase *director = dynamic_cast<SwigDirector_ProtectedBase *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_ProtectedBase_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ProtectedBase *obj = *((ProtectedBase **)&objarg);
  SwigDirector_ProtectedBase *director = dynamic_cast<SwigDirector_ProtectedBase *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_allprotected_allprotectedJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[2] = {
    {
      "SwigDirector_PublicBase_virtualMethod", "(Lallprotected/PublicBase;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ProtectedBase_virtualMethod", "(Lallprotected/ProtectedBase;)Ljava/lang/String;" 
    }
  };
  Swig::jclass_allprotectedJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_allprotectedJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

