/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


  template <class T>
    struct Foo 
    {
      typedef unsigned int size_type;
      Foo(size_type n = size_type(0) ) { }
    };
  
  int foob(Foo<int> h = Foo<int>()) {return 1; }

  template <class T>
    struct Hello
    {
      typedef unsigned int size_type;

      // This works
      // Hello(size_type n = Hello<T>::size_type(0) ) { }

      // This doesn't
      Hello(size_type n = size_type(0) ) { }

      enum Hi { hi, hello };

      void foo(Hi h = hi) { }
    };

  template <typename T> struct X {
      X(const T& t = T()) {}
      X(double a, const T& t = T(0)) {}
      T meth(double a, const T& t = T(0)) { return t; }
      const T& meth(const T& t = T(0)) { return t; }
    };

  template <typename TT> class Y : private X<TT> {
  public:
    // test using on templated class with default args in the method
    using X<TT>::meth;
  };

  template <int V> struct Z 
  {
    Z(int t = V) {}    
    // and also:
    Z(double a, int t = V){}
  };
  
  



  struct Bar : Hello<int>
  {
    Bar(size_type n) : Hello<int>(n)
    {
    }
    
  };


  // Templated methods which are overloaded and have default args, and %template which
  // uses the same name as the C++ functions and overload on the template parameters and
  // specialization thrown in too. Wow, SWIG can handle this insane stuff!
  template<typename T, typename U> int ott(T t = 0, const U& u = U()) { return 10; }
  template<typename T, typename U> int ott(const char *msg, T t = 0, const U& u = U()) { return 20; }
  int ott(Foo<int>) { return 30; }
  template<typename T> int ott(Hello<int> h, T t = 0) { return 40; }
  template<> int ott<int>(Hello<int> h, int t) { return 50; }
  template<> int ott(Hello<int> h, double t) { return 60; }


namespace OuterSpace {
  namespace InnerSpace {
    // Templated methods which are overloaded and have default args, and %template which
    // uses the same name as the C++ functions and overload on the template parameters and
    // specialization thrown in too. Wow, SWIG can handle this insane stuff!
    template<typename T, typename U> int nsott(T t = 0, const U& u = U()) { return 110; }
    template<typename T, typename U> int nsott(const char *msg, T t = 0, const U& u = U()) { return 120; }
    int nsott(Foo<int>) { return 130; }
    template<typename T> int nsott(Hello<int> h, T t = 0) { return 140; }
    template<> int nsott<int>(Hello<int> h, int t) { return 150; }
    template<> int nsott(Hello<int> h, double t) { return 160; }
  }
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_foob_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Foo< int > arg1 ;
  Foo< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Foo< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Foo< int >");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)foob(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_foob_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)foob();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1Foo_1int_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Foo< int >::size_type arg1 ;
  Foo< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Foo< int >::size_type)jarg1; 
  result = (Foo< int > *)new Foo< int >(arg1);
  *(Foo< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1Foo_1int_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo< int > *)new Foo< int >();
  *(Foo< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_delete_1Foo_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo< int > *arg1 = (Foo< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1Hello_1int_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Hello< int >::size_type arg1 ;
  Hello< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Hello< int >::size_type)jarg1; 
  result = (Hello< int > *)new Hello< int >(arg1);
  *(Hello< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1Hello_1int_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Hello< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Hello< int > *)new Hello< int >();
  *(Hello< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_Hello_1int_1foo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Hello< int > *arg1 = (Hello< int > *) 0 ;
  Hello< int >::Hi arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Hello< int > **)&jarg1; 
  arg2 = (Hello< int >::Hi)jarg2; 
  (arg1)->foo(arg2);
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_Hello_1int_1foo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Hello< int > *arg1 = (Hello< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Hello< int > **)&jarg1; 
  (arg1)->foo();
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_delete_1Hello_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Hello< int > *arg1 = (Hello< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Hello< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1int_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int *arg1 = 0 ;
  int temp1 ;
  X< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  result = (X< int > *)new X< int >((int const &)*arg1);
  *(X< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1int_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  X< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (X< int > *)new X< int >();
  *(X< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1int_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  X< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (X< int > *)new X< int >(arg1,(int const &)*arg2);
  *(X< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1int_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  X< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (X< int > *)new X< int >(arg1);
  *(X< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1int_1meth_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  jint jresult = 0 ;
  X< int > *arg1 = (X< int > *) 0 ;
  double arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< int > **)&jarg1; 
  arg2 = (double)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  result = (int)(arg1)->meth(arg2,(int const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1int_1meth_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  X< int > *arg1 = (X< int > *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< int > **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)(arg1)->meth(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1int_1meth_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  X< int > *arg1 = (X< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int *) &(arg1)->meth((int const &)*arg2);
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1int_1meth_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  X< int > *arg1 = (X< int > *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< int > **)&jarg1; 
  result = (int *) &(arg1)->meth();
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_delete_1X_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  X< int > *arg1 = (X< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(X< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1longlong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long *arg1 = 0 ;
  long long temp1 ;
  X< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (long long)jarg1; 
  arg1 = &temp1; 
  result = (X< long long > *)new X< long long >((long long const &)*arg1);
  *(X< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1longlong_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  X< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (X< long long > *)new X< long long >();
  *(X< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1longlong_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  X< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (X< long long > *)new X< long long >(arg1,(long long const &)*arg2);
  *(X< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1longlong_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  X< long long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (X< long long > *)new X< long long >(arg1);
  *(X< long long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1longlong_1meth_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  X< long long > *arg1 = (X< long long > *) 0 ;
  double arg2 ;
  long long *arg3 = 0 ;
  long long temp3 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< long long > **)&jarg1; 
  arg2 = (double)jarg2; 
  temp3 = (long long)jarg3; 
  arg3 = &temp3; 
  result = (long long)(arg1)->meth(arg2,(long long const &)*arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1longlong_1meth_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  X< long long > *arg1 = (X< long long > *) 0 ;
  double arg2 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< long long > **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (long long)(arg1)->meth(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1longlong_1meth_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  X< long long > *arg1 = (X< long long > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< long long > **)&jarg1; 
  temp2 = (long long)jarg2; 
  arg2 = &temp2; 
  result = (long long *) &(arg1)->meth((long long const &)*arg2);
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1longlong_1meth_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  X< long long > *arg1 = (X< long long > *) 0 ;
  long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< long long > **)&jarg1; 
  result = (long long *) &(arg1)->meth();
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_delete_1X_1longlong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  X< long long > *arg1 = (X< long long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(X< long long > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1unsigned_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  X< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (unsigned int)jarg1; 
  arg1 = &temp1; 
  result = (X< unsigned int > *)new X< unsigned int >((unsigned int const &)*arg1);
  *(X< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1unsigned_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  X< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (X< unsigned int > *)new X< unsigned int >();
  *(X< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1unsigned_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  X< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (X< unsigned int > *)new X< unsigned int >(arg1,(unsigned int const &)*arg2);
  *(X< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1unsigned_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  X< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (X< unsigned int > *)new X< unsigned int >(arg1);
  *(X< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1unsigned_1meth_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  X< unsigned int > *arg1 = (X< unsigned int > *) 0 ;
  double arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  result = (unsigned int)(arg1)->meth(arg2,(unsigned int const &)*arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1unsigned_1meth_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  X< unsigned int > *arg1 = (X< unsigned int > *) 0 ;
  double arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (unsigned int)(arg1)->meth(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1unsigned_1meth_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  X< unsigned int > *arg1 = (X< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< unsigned int > **)&jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (unsigned int *) &(arg1)->meth((unsigned int const &)*arg2);
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1unsigned_1meth_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  X< unsigned int > *arg1 = (X< unsigned int > *) 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< unsigned int > **)&jarg1; 
  result = (unsigned int *) &(arg1)->meth();
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_delete_1X_1unsigned(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  X< unsigned int > *arg1 = (X< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(X< unsigned int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_Y_1unsigned_1meth_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  Y< unsigned int > *arg1 = (Y< unsigned int > *) 0 ;
  double arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Y< unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  temp3 = (unsigned int)jarg3; 
  arg3 = &temp3; 
  result = (unsigned int)(arg1)->meth(arg2,(unsigned int const &)*arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_Y_1unsigned_1meth_1SWIG_10_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Y< unsigned int > *arg1 = (Y< unsigned int > *) 0 ;
  double arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Y< unsigned int > **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (unsigned int)(arg1)->meth(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_Y_1unsigned_1meth_1SWIG_10_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Y< unsigned int > *arg1 = (Y< unsigned int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Y< unsigned int > **)&jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (unsigned int *) &(arg1)->meth((unsigned int const &)*arg2);
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_Y_1unsigned_1meth_1SWIG_10_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Y< unsigned int > *arg1 = (Y< unsigned int > *) 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Y< unsigned int > **)&jarg1; 
  result = (unsigned int *) &(arg1)->meth();
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1Y_1unsigned(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Y< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Y< unsigned int > *)new Y< unsigned int >();
  *(Y< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_delete_1Y_1unsigned(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Y< unsigned int > *arg1 = (Y< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Y< unsigned int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1hello_1unsigned_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Hello< int > *arg1 = 0 ;
  X< Hello< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Hello< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Hello< int > const & reference is null");
    return 0;
  } 
  result = (X< Hello< int > > *)new X< Hello< int > >((Hello< int > const &)*arg1);
  *(X< Hello< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1hello_1unsigned_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  X< Hello< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (X< Hello< int > > *)new X< Hello< int > >();
  *(X< Hello< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1hello_1unsigned_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  double arg1 ;
  Hello< int > *arg2 = 0 ;
  X< Hello< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (double)jarg1; 
  arg2 = *(Hello< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Hello< int > const & reference is null");
    return 0;
  } 
  result = (X< Hello< int > > *)new X< Hello< int > >(arg1,(Hello< int > const &)*arg2);
  *(X< Hello< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1hello_1unsigned_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  X< Hello< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (X< Hello< int > > *)new X< Hello< int > >(arg1);
  *(X< Hello< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1hello_1unsigned_1meth_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  X< Hello< int > > *arg1 = (X< Hello< int > > *) 0 ;
  double arg2 ;
  Hello< int > *arg3 = 0 ;
  Hello< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(X< Hello< int > > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(Hello< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Hello< int > const & reference is null");
    return 0;
  } 
  result = (arg1)->meth(arg2,(Hello< int > const &)*arg3);
  *(Hello< int > **)&jresult = new Hello< int >((const Hello< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1hello_1unsigned_1meth_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  X< Hello< int > > *arg1 = (X< Hello< int > > *) 0 ;
  double arg2 ;
  Hello< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< Hello< int > > **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->meth(arg2);
  *(Hello< int > **)&jresult = new Hello< int >((const Hello< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1hello_1unsigned_1meth_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  X< Hello< int > > *arg1 = (X< Hello< int > > *) 0 ;
  Hello< int > *arg2 = 0 ;
  Hello< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(X< Hello< int > > **)&jarg1; 
  arg2 = *(Hello< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Hello< int > const & reference is null");
    return 0;
  } 
  result = (Hello< int > *) &(arg1)->meth((Hello< int > const &)*arg2);
  *(Hello< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1hello_1unsigned_1meth_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  X< Hello< int > > *arg1 = (X< Hello< int > > *) 0 ;
  Hello< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< Hello< int > > **)&jarg1; 
  result = (Hello< int > *) &(arg1)->meth();
  *(Hello< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_delete_1X_1hello_1unsigned(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  X< Hello< int > > *arg1 = (X< Hello< int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(X< Hello< int > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_Y_1hello_1unsigned_1meth_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Y< Hello< int > > *arg1 = (Y< Hello< int > > *) 0 ;
  double arg2 ;
  Hello< int > *arg3 = 0 ;
  Hello< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Y< Hello< int > > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(Hello< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Hello< int > const & reference is null");
    return 0;
  } 
  result = (arg1)->meth(arg2,(Hello< int > const &)*arg3);
  *(Hello< int > **)&jresult = new Hello< int >((const Hello< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_Y_1hello_1unsigned_1meth_1SWIG_10_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  Y< Hello< int > > *arg1 = (Y< Hello< int > > *) 0 ;
  double arg2 ;
  Hello< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Y< Hello< int > > **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->meth(arg2);
  *(Hello< int > **)&jresult = new Hello< int >((const Hello< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_Y_1hello_1unsigned_1meth_1SWIG_10_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Y< Hello< int > > *arg1 = (Y< Hello< int > > *) 0 ;
  Hello< int > *arg2 = 0 ;
  Hello< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Y< Hello< int > > **)&jarg1; 
  arg2 = *(Hello< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Hello< int > const & reference is null");
    return 0;
  } 
  result = (Hello< int > *) &(arg1)->meth((Hello< int > const &)*arg2);
  *(Hello< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_Y_1hello_1unsigned_1meth_1SWIG_10_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Y< Hello< int > > *arg1 = (Y< Hello< int > > *) 0 ;
  Hello< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Y< Hello< int > > **)&jarg1; 
  result = (Hello< int > *) &(arg1)->meth();
  *(Hello< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1Y_1hello_1unsigned(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Y< Hello< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Y< Hello< int > > *)new Y< Hello< int > >();
  *(Y< Hello< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_delete_1Y_1hello_1unsigned(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Y< Hello< int > > *arg1 = (Y< Hello< int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Y< Hello< int > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1Foo_1Foo_1int_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Foo< Foo< int > > *arg1 = 0 ;
  X< Foo< Foo< int > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo< Foo< int > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Foo< Foo< int > > const & reference is null");
    return 0;
  } 
  result = (X< Foo< Foo< int > > > *)new X< Foo< Foo< int > > >((Foo< Foo< int > > const &)*arg1);
  *(X< Foo< Foo< int > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1Foo_1Foo_1int_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  X< Foo< Foo< int > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (X< Foo< Foo< int > > > *)new X< Foo< Foo< int > > >();
  *(X< Foo< Foo< int > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1Foo_1Foo_1int_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  Foo< Foo< int > > *arg2 = 0 ;
  X< Foo< Foo< int > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = *(Foo< Foo< int > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Foo< Foo< int > > const & reference is null");
    return 0;
  } 
  result = (X< Foo< Foo< int > > > *)new X< Foo< Foo< int > > >(arg1,(Foo< Foo< int > > const &)*arg2);
  *(X< Foo< Foo< int > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1Foo_1Foo_1int_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  X< Foo< Foo< int > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (X< Foo< Foo< int > > > *)new X< Foo< Foo< int > > >(arg1);
  *(X< Foo< Foo< int > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1Foo_1Foo_1int_1meth_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  X< Foo< Foo< int > > > *arg1 = (X< Foo< Foo< int > > > *) 0 ;
  double arg2 ;
  Foo< Foo< int > > *arg3 = 0 ;
  SwigValueWrapper< Foo< Foo< int > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< Foo< Foo< int > > > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(Foo< Foo< int > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Foo< Foo< int > > const & reference is null");
    return 0;
  } 
  result = (arg1)->meth(arg2,(Foo< Foo< int > > const &)*arg3);
  *(Foo< Foo< int > > **)&jresult = new Foo< Foo< int > >((const Foo< Foo< int > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1Foo_1Foo_1int_1meth_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  X< Foo< Foo< int > > > *arg1 = (X< Foo< Foo< int > > > *) 0 ;
  double arg2 ;
  SwigValueWrapper< Foo< Foo< int > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< Foo< Foo< int > > > **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->meth(arg2);
  *(Foo< Foo< int > > **)&jresult = new Foo< Foo< int > >((const Foo< Foo< int > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1Foo_1Foo_1int_1meth_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  X< Foo< Foo< int > > > *arg1 = (X< Foo< Foo< int > > > *) 0 ;
  Foo< Foo< int > > *arg2 = 0 ;
  Foo< Foo< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< Foo< Foo< int > > > **)&jarg1; 
  arg2 = *(Foo< Foo< int > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Foo< Foo< int > > const & reference is null");
    return 0;
  } 
  result = (Foo< Foo< int > > *) &(arg1)->meth((Foo< Foo< int > > const &)*arg2);
  *(Foo< Foo< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1Foo_1Foo_1int_1meth_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  X< Foo< Foo< int > > > *arg1 = (X< Foo< Foo< int > > > *) 0 ;
  Foo< Foo< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< Foo< Foo< int > > > **)&jarg1; 
  result = (Foo< Foo< int > > *) &(arg1)->meth();
  *(Foo< Foo< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_delete_1X_1Foo_1Foo_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  X< Foo< Foo< int > > > *arg1 = (X< Foo< Foo< int > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(X< Foo< Foo< int > > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1Z_18_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  Z< 8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (Z< 8 > *)new Z< 8 >(arg1);
  *(Z< 8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1Z_18_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Z< 8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Z< 8 > *)new Z< 8 >();
  *(Z< 8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1Z_18_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  int arg2 ;
  Z< 8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (int)jarg2; 
  result = (Z< 8 > *)new Z< 8 >(arg1,arg2);
  *(Z< 8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1Z_18_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  Z< 8 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (Z< 8 > *)new Z< 8 >(arg1);
  *(Z< 8 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_delete_1Z_18(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Z< 8 > *arg1 = (Z< 8 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Z< 8 > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1Foo_1Z_18_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Foo< Z< 8 > >::size_type arg1 ;
  Foo< Z< 8 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Foo< Z< 8 > >::size_type)jarg1; 
  result = (Foo< Z< 8 > > *)new Foo< Z< 8 > >(arg1);
  *(Foo< Z< 8 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1Foo_1Z_18_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo< Z< 8 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo< Z< 8 > > *)new Foo< Z< 8 > >();
  *(Foo< Z< 8 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_delete_1Foo_1Z_18(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo< Z< 8 > > *arg1 = (Foo< Z< 8 > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo< Z< 8 > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1Foo_1Z_18_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Foo< Z< 8 > > *arg1 = 0 ;
  X< Foo< Z< 8 > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo< Z< 8 > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Foo< Z< 8 > > const & reference is null");
    return 0;
  } 
  result = (X< Foo< Z< 8 > > > *)new X< Foo< Z< 8 > > >((Foo< Z< 8 > > const &)*arg1);
  *(X< Foo< Z< 8 > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1Foo_1Z_18_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  X< Foo< Z< 8 > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (X< Foo< Z< 8 > > > *)new X< Foo< Z< 8 > > >();
  *(X< Foo< Z< 8 > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1Foo_1Z_18_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  double arg1 ;
  Foo< Z< 8 > > *arg2 = 0 ;
  X< Foo< Z< 8 > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (double)jarg1; 
  arg2 = *(Foo< Z< 8 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Foo< Z< 8 > > const & reference is null");
    return 0;
  } 
  result = (X< Foo< Z< 8 > > > *)new X< Foo< Z< 8 > > >(arg1,(Foo< Z< 8 > > const &)*arg2);
  *(X< Foo< Z< 8 > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1X_1Foo_1Z_18_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  X< Foo< Z< 8 > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (X< Foo< Z< 8 > > > *)new X< Foo< Z< 8 > > >(arg1);
  *(X< Foo< Z< 8 > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1Foo_1Z_18_1meth_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  X< Foo< Z< 8 > > > *arg1 = (X< Foo< Z< 8 > > > *) 0 ;
  double arg2 ;
  Foo< Z< 8 > > *arg3 = 0 ;
  Foo< Z< 8 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(X< Foo< Z< 8 > > > **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(Foo< Z< 8 > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Foo< Z< 8 > > const & reference is null");
    return 0;
  } 
  result = (arg1)->meth(arg2,(Foo< Z< 8 > > const &)*arg3);
  *(Foo< Z< 8 > > **)&jresult = new Foo< Z< 8 > >((const Foo< Z< 8 > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1Foo_1Z_18_1meth_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  X< Foo< Z< 8 > > > *arg1 = (X< Foo< Z< 8 > > > *) 0 ;
  double arg2 ;
  Foo< Z< 8 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< Foo< Z< 8 > > > **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->meth(arg2);
  *(Foo< Z< 8 > > **)&jresult = new Foo< Z< 8 > >((const Foo< Z< 8 > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1Foo_1Z_18_1meth_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  X< Foo< Z< 8 > > > *arg1 = (X< Foo< Z< 8 > > > *) 0 ;
  Foo< Z< 8 > > *arg2 = 0 ;
  Foo< Z< 8 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(X< Foo< Z< 8 > > > **)&jarg1; 
  arg2 = *(Foo< Z< 8 > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Foo< Z< 8 > > const & reference is null");
    return 0;
  } 
  result = (Foo< Z< 8 > > *) &(arg1)->meth((Foo< Z< 8 > > const &)*arg2);
  *(Foo< Z< 8 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_X_1Foo_1Z_18_1meth_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  X< Foo< Z< 8 > > > *arg1 = (X< Foo< Z< 8 > > > *) 0 ;
  Foo< Z< 8 > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(X< Foo< Z< 8 > > > **)&jarg1; 
  result = (Foo< Z< 8 > > *) &(arg1)->meth();
  *(Foo< Z< 8 > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_delete_1X_1Foo_1Z_18(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  X< Foo< Z< 8 > > > *arg1 = (X< Foo< Z< 8 > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(X< Foo< Z< 8 > > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_new_1Bar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Hello< int >::size_type arg1 ;
  Bar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Hello< int >::size_type)jarg1; 
  result = (Bar *)new Bar(arg1);
  *(Bar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1default_1arg_template_1default_1argJNI_delete_1Bar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bar *arg1 = (Bar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_ott_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Foo< int > arg1 ;
  Foo< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Foo< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Foo< int >");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)ott(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_ott_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)ott< int,int >(arg1,(int const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_ott_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)ott< int,int >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_ott_1_1SWIG_112(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ott< int,int >();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_ott_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  result = (int)ott< int,int >((char const *)arg1,arg2,(int const &)*arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_ott_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (int)ott< int,int >((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_ott_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)ott< int,int >((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_ott_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  Hello< int > arg1 ;
  double arg2 ;
  Hello< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Hello< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Hello< int >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  result = (int)ott< double >(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_ott_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Hello< int > arg1 ;
  Hello< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Hello< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Hello< int >");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)ott< double >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_ottint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Hello< int > arg1 ;
  int arg2 ;
  Hello< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Hello< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Hello< int >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2; 
  result = (int)ott< int >(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_ottint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Hello< int > arg1 ;
  Hello< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Hello< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Hello< int >");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)ott< int >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_ottstring_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Hello< int > arg1 ;
  char *arg2 = (char *) 0 ;
  Hello< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Hello< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Hello< int >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)ott< char const * >(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_ottstring_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Hello< int > arg1 ;
  Hello< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Hello< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Hello< int >");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)ott< char const * >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_nsott_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Foo< int > arg1 ;
  Foo< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Foo< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Foo< int >");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)OuterSpace::InnerSpace::nsott(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_nsott_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)OuterSpace::InnerSpace::SWIGTEMPLATEDISAMBIGUATOR nsott< int,int >(arg1,(int const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_nsott_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)OuterSpace::InnerSpace::SWIGTEMPLATEDISAMBIGUATOR nsott< int,int >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_nsott_1_1SWIG_112(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)OuterSpace::InnerSpace::SWIGTEMPLATEDISAMBIGUATOR nsott< int,int >();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_nsott_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  result = (int)OuterSpace::InnerSpace::SWIGTEMPLATEDISAMBIGUATOR nsott< int,int >((char const *)arg1,arg2,(int const &)*arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_nsott_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (int)OuterSpace::InnerSpace::SWIGTEMPLATEDISAMBIGUATOR nsott< int,int >((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_nsott_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)OuterSpace::InnerSpace::SWIGTEMPLATEDISAMBIGUATOR nsott< int,int >((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_nsott_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  Hello< int > arg1 ;
  double arg2 ;
  Hello< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Hello< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Hello< int >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  result = (int)OuterSpace::InnerSpace::SWIGTEMPLATEDISAMBIGUATOR nsott< double >(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_nsott_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Hello< int > arg1 ;
  Hello< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Hello< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Hello< int >");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)OuterSpace::InnerSpace::SWIGTEMPLATEDISAMBIGUATOR nsott< double >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_nsottint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Hello< int > arg1 ;
  int arg2 ;
  Hello< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Hello< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Hello< int >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2; 
  result = (int)OuterSpace::InnerSpace::SWIGTEMPLATEDISAMBIGUATOR nsott< int >(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_nsottint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Hello< int > arg1 ;
  Hello< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Hello< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Hello< int >");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)OuterSpace::InnerSpace::SWIGTEMPLATEDISAMBIGUATOR nsott< int >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_nsottstring_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Hello< int > arg1 ;
  char *arg2 = (char *) 0 ;
  Hello< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Hello< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Hello< int >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)OuterSpace::InnerSpace::SWIGTEMPLATEDISAMBIGUATOR nsott< char const * >(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_template_1default_1arg_template_1default_1argJNI_nsottstring_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Hello< int > arg1 ;
  Hello< int > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Hello< int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Hello< int >");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)OuterSpace::InnerSpace::SWIGTEMPLATEDISAMBIGUATOR nsott< char const * >(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_template_1default_1arg_template_1default_1argJNI_Bar_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Hello< int > **)&baseptr = *(Bar **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

