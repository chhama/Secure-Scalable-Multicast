/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



int globalints[] = {100, 200, 300};
const int constglobalints[] = {400, 500, 600};

struct Bar {
    static int ints[];
};
int Bar::ints[] = {700, 800, 900};

double arr_bool(bool array[], int length)                { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]=!array[i]; } return sum; }
double arr_char(char array[], int length)                { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]*=2; } return sum; }
double arr_schar(signed char array[], int length)        { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]*=2; } return sum; }
double arr_uchar(unsigned char array[], int length)      { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]*=2; } return sum; }
double arr_short(short array[], int length)              { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]*=2; } return sum; }
double arr_ushort(unsigned short array[], int length)    { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]*=2; } return sum; }
double arr_int(int array[], int length)                  { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]*=2; } return sum; }
double arr_uint(unsigned int array[], int length)        { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]*=2; } return sum; }
double arr_long(long array[], int length)                { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]*=2; } return sum; }
double arr_ulong(unsigned long array[], int length)      { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]*=2; } return sum; }
double arr_ll(long long array[], int length)             { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]*=2; } return sum; }
double arr_ull(unsigned long long array[], int length)   { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]*=2; } return sum; }
double arr_float(float array[], int length)              { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]*=2; } return sum; }
double arr_double(double array[], int length)            { double sum=0.0; int i=0; for(; i<length; i++) { sum += array[i]; array[i]*=2; } return sum; }




double ptr_bool(bool *array, int length)                { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }
double ptr_char(char *array, int length)                { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }
double ptr_schar(signed char *array, int length)        { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }
double ptr_uchar(unsigned char *array, int length)      { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }
double ptr_short(short *array, int length)              { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }
double ptr_ushort(unsigned short *array, int length)    { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }
double ptr_int(int *array, int length)                  { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }
double ptr_uint(unsigned int *array, int length)        { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }
double ptr_long(long *array, int length)                { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }
double ptr_ulong(unsigned long *array, int length)      { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }
double ptr_ll(long long *array, int length)             { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }
double ptr_ull(unsigned long long *array, int length)   { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }
double ptr_float(float *array, int length)              { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }
double ptr_double(double *array, int length)            { double sum=0.0; int i=0; for(; i<length; i++) sum += array[i]; return sum; }



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_globalints_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)(int *)globalints;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_constglobalints_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)(int *)constglobalints;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_Bar_1ints_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)(int *)Bar::ints;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_new_1Bar(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bar *)new Bar();
  *(Bar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_delete_1Bar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bar *arg1 = (Bar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  bool *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)arr_bool(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1char(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  char *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (double)arr_char(arg1,arg2);
  jresult = (jdouble)result; 
  
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1schar(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  signed char *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(signed char **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)arr_schar(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1uchar(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  unsigned char *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)arr_uchar(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1short(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  short *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(short **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)arr_short(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1ushort(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  unsigned short *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned short **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)arr_ushort(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  int *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)arr_int(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1uint(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  unsigned int *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)arr_uint(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1long(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  long *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)arr_long(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1ulong(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  unsigned long *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)arr_ulong(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1ll(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  long long *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long long **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)arr_ll(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1ull(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  unsigned long long *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)arr_ull(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1float(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  float *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)arr_float(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_arr_1double(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  double *arg1 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)arr_double(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  bool *arg1 = (bool *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_bool(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1char(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_char(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1schar(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  signed char *arg1 = (signed char *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(signed char **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_schar(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1uchar(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_uchar(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1short(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  short *arg1 = (short *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(short **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_short(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1ushort(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  unsigned short *arg1 = (unsigned short *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned short **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_ushort(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_int(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1uint(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_uint(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1long(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  long *arg1 = (long *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_long(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1ulong(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  unsigned long *arg1 = (unsigned long *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_ulong(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1ll(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  long long *arg1 = (long long *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long long **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_ll(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1ull(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_ull(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1float(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_float(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1dimensionless_arrays_1dimensionlessJNI_ptr_1double(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)ptr_double(arg1,arg2);
  jresult = (jdouble)result; 
  
  return jresult;
}


#ifdef __cplusplus
}
#endif

