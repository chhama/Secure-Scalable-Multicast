/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


static int *new_intArray(int nelements) { 
  return new int[nelements]; 
}

static void delete_intArray(int *ary) { 
  delete [] ary; 
}

static int intArray_getitem(int *ary, int index) {
    return ary[index];
}
static void intArray_setitem(int *ary, int index, int value) {
    ary[index] = value;
}


typedef double doubleArray;

SWIGINTERN doubleArray *new_doubleArray(int nelements){
  return new double[nelements];
}
SWIGINTERN void delete_doubleArray(doubleArray *self){
  delete [] self;
}
SWIGINTERN double doubleArray_getitem(doubleArray *self,int index){
  return self[index];
}
SWIGINTERN void doubleArray_setitem(doubleArray *self,int index,double value){
  self[index] = value;
}
SWIGINTERN double *doubleArray_cast(doubleArray *self){
  return self;
}
SWIGINTERN doubleArray *doubleArray_frompointer(double *t){
  return (doubleArray *) t;
}

typedef struct {
  int x;
  int y;
} XY;
XY globalXYArray[3];

typedef struct {
  int a;
  int b;
} AB;

AB globalABArray[3];


typedef XY XYArray;

SWIGINTERN XYArray *new_XYArray(int nelements){
  return new XY[nelements];
}
SWIGINTERN void delete_XYArray(XYArray *self){
  delete [] self;
}
SWIGINTERN XY XYArray_getitem(XYArray *self,int index){
  return self[index];
}
SWIGINTERN void XYArray_setitem(XYArray *self,int index,XY value){
  self[index] = value;
}
SWIGINTERN XY *XYArray_cast(XYArray *self){
  return self;
}
SWIGINTERN XYArray *XYArray_frompointer(XY *t){
  return (XYArray *) t;
}

static AB *new_ABArray(int nelements) { 
  return new AB[nelements]; 
}

static void delete_ABArray(AB *ary) { 
  delete [] ary; 
}

static AB ABArray_getitem(AB *ary, int index) {
    return ary[index];
}
static void ABArray_setitem(AB *ary, int index, AB value) {
    ary[index] = value;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_new_1intArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)new_intArray(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_delete_1intArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_intArray(arg1);
}


SWIGEXPORT jint JNICALL Java_li_1carrays_li_1carraysJNI_intArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)intArray_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_intArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  intArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_new_1doubleArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  doubleArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (doubleArray *)new_doubleArray(arg1);
  *(doubleArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_delete_1doubleArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  doubleArray *arg1 = (doubleArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(doubleArray **)&jarg1; 
  delete_doubleArray(arg1);
}


SWIGEXPORT jdouble JNICALL Java_li_1carrays_li_1carraysJNI_doubleArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  doubleArray *arg1 = (doubleArray *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(doubleArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)doubleArray_getitem(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_doubleArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  doubleArray *arg1 = (doubleArray *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(doubleArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  doubleArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_doubleArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  doubleArray *arg1 = (doubleArray *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(doubleArray **)&jarg1; 
  result = (double *)doubleArray_cast(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_doubleArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  double *arg1 = (double *) 0 ;
  doubleArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  result = (doubleArray *)doubleArray_frompointer(arg1);
  *(doubleArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_XY_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XY *arg1 = (XY *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XY **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1carrays_li_1carraysJNI_XY_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XY *arg1 = (XY *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XY **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_XY_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XY *arg1 = (XY *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XY **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1carrays_li_1carraysJNI_XY_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XY *arg1 = (XY *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XY **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_new_1XY(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XY *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XY *)new XY();
  *(XY **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_delete_1XY(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XY *arg1 = (XY *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XY **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_globalXYArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XY *arg1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XY **)&jarg1; 
  {
    size_t ii;
    XY *b = (XY *) globalXYArray;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((XY *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_globalXYArray_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XY *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XY *)(XY *)globalXYArray;
  *(XY **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_AB_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AB *arg1 = (AB *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AB **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1carrays_li_1carraysJNI_AB_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AB *arg1 = (AB *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AB **)&jarg1; 
  result = (int) ((arg1)->a);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_AB_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AB *arg1 = (AB *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AB **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1carrays_li_1carraysJNI_AB_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AB *arg1 = (AB *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AB **)&jarg1; 
  result = (int) ((arg1)->b);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_new_1AB(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AB *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AB *)new AB();
  *(AB **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_delete_1AB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AB *arg1 = (AB *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AB **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_globalABArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AB *arg1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AB **)&jarg1; 
  {
    size_t ii;
    AB *b = (AB *) globalABArray;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((AB *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_globalABArray_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AB *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AB *)(AB *)globalABArray;
  *(AB **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_new_1XYArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  XYArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (XYArray *)new_XYArray(arg1);
  *(XYArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_delete_1XYArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XYArray *arg1 = (XYArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XYArray **)&jarg1; 
  delete_XYArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_XYArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XYArray *arg1 = (XYArray *) 0 ;
  int arg2 ;
  XY result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XYArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = XYArray_getitem(arg1,arg2);
  *(XY **)&jresult = new XY((const XY &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_XYArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  XYArray *arg1 = (XYArray *) 0 ;
  int arg2 ;
  XY arg3 ;
  XY *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XYArray **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(XY **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XY");
    return ;
  }
  arg3 = *argp3; 
  XYArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_XYArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XYArray *arg1 = (XYArray *) 0 ;
  XY *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XYArray **)&jarg1; 
  result = (XY *)XYArray_cast(arg1);
  *(XY **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_XYArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XY *arg1 = (XY *) 0 ;
  XYArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XY **)&jarg1; 
  result = (XYArray *)XYArray_frompointer(arg1);
  *(XYArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_new_1ABArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  AB *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (AB *)new_ABArray(arg1);
  *(AB **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_delete_1ABArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AB *arg1 = (AB *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AB **)&jarg1; 
  delete_ABArray(arg1);
}


SWIGEXPORT jlong JNICALL Java_li_1carrays_li_1carraysJNI_ABArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  AB *arg1 = (AB *) 0 ;
  int arg2 ;
  AB result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AB **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ABArray_getitem(arg1,arg2);
  *(AB **)&jresult = new AB((const AB &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1carrays_li_1carraysJNI_ABArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  AB *arg1 = (AB *) 0 ;
  int arg2 ;
  AB arg3 ;
  AB *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(AB **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(AB **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AB");
    return ;
  }
  arg3 = *argp3; 
  ABArray_setitem(arg1,arg2,arg3);
}


#ifdef __cplusplus
}
#endif

