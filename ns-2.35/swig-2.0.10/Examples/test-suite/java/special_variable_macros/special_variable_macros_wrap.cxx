/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#if defined(_MSC_VER)
  #pragma warning(disable: 4996) // 'strdup': The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details.
#endif


struct Name {
  Name(const char *n="none") : name(strdup(n ? n : "")) {}
  Name(const Name& x) : name(strdup(x.name)) {}
  Name& operator= (const Name& x)
  {
    if (this != &x) {
      free(this->name);
      this->name = strdup(x.name);
    }
    return *this;
  }
  ~Name () { free(this->name); }
  const char *getName() const { return name; };
  Name *getNamePtr() { return this; };
private:
  char *name;
};
struct NameWrap {
  NameWrap(const char *n="casternone") : name(n) {}
  Name *getNamePtr() { return &name; };
private:
  Name name;
};


const char * testFred(Name *fred) {
  return fred->getName();
}
const char * testJack(Name *jack) {
  return jack->getName();
}
const char * testJill(Name *jill) {
  return jill->getName();
}
const char * testMary(Name *mary) {
  return mary->getName();
}
const char * testJames(Name *james) {
  return james->getName();
}


/*%fragment("getNameDescriptor", "header") start */
static const char *nameDescriptor = "SWIGTYPE_Name";
/*%fragment("getNameDescriptor", "header") end */


const char * testJim(Name *jim, int count) {
  if (count != (int)strlen(jim->getNamePtr()->getName()) + 100)
    return "size check failed";
  else
    return jim->getName();
}


namespace Space {
  template <typename T1, typename T2> struct Pair {
    Pair(T1 f, T2 s) : first(f), second(s) {}
    Pair() {}
    T1 first;
    T2 second;
  };
  int testJohn(Space::Pair<int, bool> john) {
    return john.first;
  }
}


namespace Space {
  struct RenameMe {
    RenameMe(Name n) : storedName(n) {}
    Name getStoredName() { return storedName; }
  private:
    Name storedName;
  };
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_new_1Name_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Name *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Name *)new Name((char const *)arg1);
  *(Name **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_new_1Name_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Name *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Name *)new Name();
  *(Name **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_new_1Name_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Name *arg1 = 0 ;
  Name *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Name const & reference is null");
    return 0;
  } 
  result = (Name *)new Name((Name const &)*arg1);
  *(Name **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_delete_1Name(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Name *arg1 = (Name *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Name **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_Name_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Name *arg1 = (Name *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name **)&jarg1; 
  result = (char *)((Name const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_Name_1getNamePtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Name *arg1 = (Name *) 0 ;
  Name *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name **)&jarg1; 
  result = (Name *)(arg1)->getNamePtr();
  *(Name **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_new_1NameWrap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  NameWrap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (NameWrap *)new NameWrap((char const *)arg1);
  *(NameWrap **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_new_1NameWrap_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NameWrap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NameWrap *)new NameWrap();
  *(NameWrap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_NameWrap_1getNamePtr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NameWrap *arg1 = (NameWrap *) 0 ;
  Name *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NameWrap **)&jarg1; 
  result = (Name *)(arg1)->getNamePtr();
  *(Name **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_delete_1NameWrap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NameWrap *arg1 = (NameWrap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NameWrap **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_testFred(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Name *arg1 = (Name *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name **)&jarg1; 
  result = (char *)testFred(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_testJack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Name *arg1 = (Name *) 0 ;
  Name temp1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  {
    // %typemap(in) Name *jack start
    
    /*%typemap(in) Name *GENERIC start */
    temp1 = Name("$specialname");
    (void)jarg1;
    arg1 = (Name *) &temp1;
    /*%typemap(in) Name *GENERIC end */
    
    // %typemap(in) Name *jack end
  }
  result = (char *)testJack(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_testJill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Name *arg1 = (Name *) 0 ;
  Name temp1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  {
    // %typemap(in) Name *jill start
    
    /*%typemap(in) Name *GENERIC start */
    temp1 = Name("jilly");
    (void)jarg1;
    arg1 = (Name *) &temp1;
    /*%typemap(in) Name *GENERIC end */
    
    // %typemap(in) Name *jill end
  }
  result = (char *)testJill(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_testMary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Name *arg1 = (Name *) 0 ;
  NameWrap temp1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  {
    // %typemap(in) Name *mary start
    
    /*%typemap(in) NameWrap *NAMEWRAP start */
    temp1 = NameWrap("SWIGTYPE_p_NameWrap");
    (void)jarg1;
    arg1 = temp1.getNamePtr();
    /*%typemap(in) NameWrap *NAMEWRAP end */
    
    // %typemap(in) Name *mary end
  }
  result = (char *)testMary(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_testJames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Name *arg1 = (Name *) 0 ;
  Name temp1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  {
    // %typemap(in) Name *james start
    temp1 = Name(nameDescriptor);
    (void)jarg1;
    arg1 = &temp1;
    // %typemap(in) Name *james end
  }
  result = (char *)testJames(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_testJim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Name *arg1 = (Name *) 0 ;
  int arg2 ;
  Name temp_name1 ;
  int temp_count1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  {
    // %typemap(in) Name *jim start
    
    /*%typemap(in) (Name *multiname, int num) start */
    temp_name1 = Name("multiname num");
    temp_count1 = (int)strlen(temp_name1.getNamePtr()->getName());
    (void)jarg1;
    arg1 = temp_name1.getNamePtr();
    arg2 = temp_count1 + 100;
    /*%typemap(in) (Name *multiname, int num) end */
    
    // %typemap(in) Name *jim end
  }
  result = (char *)testJim(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_testJohn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Space::Pair< int,bool > arg1 ;
  Space::Pair< int,bool > temp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  {
    // %typemap(in) Name *john start
    
    /*%typemap(in) Name *GENERIC start */
    temp1 = Space::Pair<int, bool>(123, true);
    (void)jarg1;
    arg1 = (Space::Pair< int,bool >)temp1;
    /*%typemap(in) Name *GENERIC end */
    
    // %typemap(in) Name *john end
  }
  result = (int)Space::testJohn(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_new_1PairIntBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  Space::Pair< int,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Space::Pair< int,bool > *)new Space::Pair< int,bool >(arg1,arg2);
  *(Space::Pair< int,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_new_1PairIntBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Pair< int,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::Pair< int,bool > *)new Space::Pair< int,bool >();
  *(Space::Pair< int,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_PairIntBool_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Space::Pair< int,bool > *arg1 = (Space::Pair< int,bool > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Pair< int,bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jint JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_PairIntBool_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Space::Pair< int,bool > *arg1 = (Space::Pair< int,bool > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Pair< int,bool > **)&jarg1; 
  result = (int) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_PairIntBool_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Space::Pair< int,bool > *arg1 = (Space::Pair< int,bool > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Pair< int,bool > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jboolean JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_PairIntBool_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Space::Pair< int,bool > *arg1 = (Space::Pair< int,bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Pair< int,bool > **)&jarg1; 
  result = (bool) ((arg1)->second);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_delete_1PairIntBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Pair< int,bool > *arg1 = (Space::Pair< int,bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::Pair< int,bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_new_1NewName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Name arg1 ;
  Name *argp1 ;
  Space::RenameMe *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Name **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Name");
    return 0;
  }
  arg1 = *argp1; 
  result = (Space::RenameMe *)new Space::RenameMe(arg1);
  *(Space::RenameMe **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_NewName_1getStoredName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::RenameMe *arg1 = (Space::RenameMe *) 0 ;
  Name result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::RenameMe **)&jarg1; 
  result = (arg1)->getStoredName();
  *(Name **)&jresult = new Name((const Name &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_special_1variable_1macros_special_1variable_1macrosJNI_delete_1NewName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::RenameMe *arg1 = (Space::RenameMe *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::RenameMe **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

