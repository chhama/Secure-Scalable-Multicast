/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



int        GlobalInt;
const int  ConstInt=2;
int*       GlobalIntPtr=&GlobalInt;
int* const GlobalConstIntPtr=&GlobalInt;
#define ARRAY_SIZE 2

class ParametersTest {
public:
    void param1(int* a) {}
    void param2(const int* a) {}
    void param3(int* const a) {}
    void param4(int const a) {}
    void param5(const int a) {}
    void param6(int& a) {}
    void param7(const int& a) {}
    void param8(int const& a) {}
    void param9(int*& a) {}
    void param10(int* const& a) {}
    void param11(const int* const a) {}

    void param_array1(int* a[ARRAY_SIZE]) {}
    void param_array2(const int* a[ARRAY_SIZE]) {}
    void param_array3(int* const a[ARRAY_SIZE]) {}
    void param_array4(int const a[ARRAY_SIZE]) {}
    void param_array5(const int a[ARRAY_SIZE]) {}
    void param_array6(const int* const a[ARRAY_SIZE]) {}
};

class MemberVariablesTest {
public:
    int* member1;
    ParametersTest* member2;
    int* const member3;
    ParametersTest* const member4;

    int* array_member1[ARRAY_SIZE];
    ParametersTest* array_member2[ARRAY_SIZE];
    MemberVariablesTest() : member3(NULL), member4(NULL) {}
private:
  MemberVariablesTest& operator=(const MemberVariablesTest&);
};
void foofunction(const int *const i) {}

typedef int *typedef1, typedef2, *const typedef3;
int int1, int2=2, *int3, *const int4 = &GlobalInt;

int* const global_const_int_ptr_array[ARRAY_SIZE] = { &int1, &int2 };
ParametersTest* const array_member4[ARRAY_SIZE] = { new ParametersTest(), new ParametersTest() };

class ReturnValuesTest {
public:
    typedef1 td1;
    typedef2 td2;
    int int1, int2, *const int3, *int4, array1[ARRAY_SIZE];
    int ret1() {return 5;}
    const int ret2() {return 5;}
    int ret3() {return 5;}
    const int* ret4() {return &ConstInt;}
    int* const ret5() {return &GlobalInt;}

    void ret6(int*& a) {}
    int*& ret7() {return GlobalIntPtr;}
    void ret8(int*const& a) {}
    int*const& ret9() {return GlobalIntPtr;}
    ReturnValuesTest() : int3(NULL) {}
private:
  ReturnValuesTest& operator=(const ReturnValuesTest&);
};

const int* globalRet1() {return &GlobalInt;}
int* const globalRet2() {return &GlobalInt;}



  struct A
  {
  };


  typedef const A* Acptr;

  Acptr opaque(Acptr aptr) {
    return aptr;
  }

  struct B
  {
    B() : ca() {}
    const A ca;
    A a;
    A* ap;
    const A* cap;
    Acptr acptr;  
  private:
    B& operator=(const B&);
  };

  const B* bar(const B* b) {
    return b;
  }

  B *const& cbar(B *const& b) {
    return b;
  }


static int wxEVT_COMMAND_BUTTON_CLICKEDv;
static int *wxEVT_COMMAND_BUTTON_CLICKEDp;
static int **wxEVT_COMMAND_BUTTON_CLICKEDpp = &wxEVT_COMMAND_BUTTON_CLICKEDp;
#if defined(SWIGR)
#undef lang1 /* conflicts with symbol in R internals */
#endif

char lang1[16] = "Hello";
char *langs[] ={ lang1 };
 
     




  const int* wxEVENT_COMMAND_BUTTON_CLICKEDr = (int*) &wxEVT_COMMAND_BUTTON_CLICKEDv;
  const int* wxEVENT_COMMAND_BUTTON_CLICKEDp = (int*) *wxEVT_COMMAND_BUTTON_CLICKEDpp;
  char **languages1 = &langs[0];
  char **languages2 = (char **)&langs[0];


struct Foo {
  const int *icap;
};
const int* icap;
const Foo *cap;


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_GlobalInt_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  GlobalInt = arg1;
}


SWIGEXPORT jint JNICALL Java_constant_1pointers_constant_1pointersJNI_GlobalInt_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)GlobalInt;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_constant_1pointers_constant_1pointersJNI_ConstInt_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)ConstInt;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_GlobalIntPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  GlobalIntPtr = arg1;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_GlobalIntPtr_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)GlobalIntPtr;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_GlobalConstIntPtr_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)(int *)GlobalConstIntPtr;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_constant_1pointers_constant_1pointersJNI_ARRAY_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  (arg1)->param1(arg2);
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  (arg1)->param2((int const *)arg2);
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  (arg1)->param3(arg2);
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->param4(arg2);
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->param5(arg2);
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  (arg1)->param6(*arg2);
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param7(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->param7((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->param8((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param9(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int **arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = *(int ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int *& reference is null");
    return ;
  } 
  (arg1)->param9(*arg2);
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int **arg2 = 0 ;
  int *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  temp2 = *(int **)&jarg2;
  arg2 = (int **)&temp2; 
  (arg1)->param10((int *const &)*arg2);
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  (arg1)->param11((int const *)arg2);
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param_1array1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int **arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = *(int ***)&jarg2; 
  (arg1)->param_array1(arg2);
  
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param_1array2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int **arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = *(int ***)&jarg2; 
  (arg1)->param_array2((int const *(*))arg2);
  
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param_1array3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int **arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = *(int ***)&jarg2; 
  (arg1)->param_array3((int *const (*))arg2);
  
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param_1array4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  (arg1)->param_array4((int const (*))arg2);
  
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param_1array5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  (arg1)->param_array5((int const (*))arg2);
  
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ParametersTest_1param_1array6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  int **arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParametersTest **)&jarg1; 
  arg2 = *(int ***)&jarg2; 
  (arg1)->param_array6((int const *const (*))arg2);
  
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_new_1ParametersTest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ParametersTest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ParametersTest *)new ParametersTest();
  *(ParametersTest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_delete_1ParametersTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ParametersTest *arg1 = (ParametersTest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParametersTest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_MemberVariablesTest_1member1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MemberVariablesTest *arg1 = (MemberVariablesTest *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariablesTest **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  if (arg1) (arg1)->member1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_MemberVariablesTest_1member1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MemberVariablesTest *arg1 = (MemberVariablesTest *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariablesTest **)&jarg1; 
  result = (int *) ((arg1)->member1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_MemberVariablesTest_1member2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MemberVariablesTest *arg1 = (MemberVariablesTest *) 0 ;
  ParametersTest *arg2 = (ParametersTest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MemberVariablesTest **)&jarg1; 
  arg2 = *(ParametersTest **)&jarg2; 
  if (arg1) (arg1)->member2 = arg2;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_MemberVariablesTest_1member2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MemberVariablesTest *arg1 = (MemberVariablesTest *) 0 ;
  ParametersTest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariablesTest **)&jarg1; 
  result = (ParametersTest *) ((arg1)->member2);
  *(ParametersTest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_MemberVariablesTest_1member3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MemberVariablesTest *arg1 = (MemberVariablesTest *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariablesTest **)&jarg1; 
  result = (int *)(int *) ((arg1)->member3);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_MemberVariablesTest_1member4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MemberVariablesTest *arg1 = (MemberVariablesTest *) 0 ;
  ParametersTest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariablesTest **)&jarg1; 
  result = (ParametersTest *)(ParametersTest *) ((arg1)->member4);
  *(ParametersTest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_MemberVariablesTest_1array_1member1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MemberVariablesTest *arg1 = (MemberVariablesTest *) 0 ;
  int **arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariablesTest **)&jarg1; 
  arg2 = *(int ***)&jarg2; 
  {
    size_t ii;
    int * *b = (int * *) arg1->array_member1;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int * *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_MemberVariablesTest_1array_1member1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MemberVariablesTest *arg1 = (MemberVariablesTest *) 0 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariablesTest **)&jarg1; 
  result = (int **)(int **) ((arg1)->array_member1);
  *(int ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_MemberVariablesTest_1array_1member2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MemberVariablesTest *arg1 = (MemberVariablesTest *) 0 ;
  ParametersTest **arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariablesTest **)&jarg1; 
  arg2 = *(ParametersTest ***)&jarg2; 
  {
    size_t ii;
    ParametersTest * *b = (ParametersTest * *) arg1->array_member2;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((ParametersTest * *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_MemberVariablesTest_1array_1member2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MemberVariablesTest *arg1 = (MemberVariablesTest *) 0 ;
  ParametersTest **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariablesTest **)&jarg1; 
  result = (ParametersTest **)(ParametersTest **) ((arg1)->array_member2);
  *(ParametersTest ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_new_1MemberVariablesTest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MemberVariablesTest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MemberVariablesTest *)new MemberVariablesTest();
  *(MemberVariablesTest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_delete_1MemberVariablesTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MemberVariablesTest *arg1 = (MemberVariablesTest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MemberVariablesTest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_foofunction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) (int *)0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  foofunction((int const *)arg1);
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_int1_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  int1 = arg1;
}


SWIGEXPORT jint JNICALL Java_constant_1pointers_constant_1pointersJNI_int1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)int1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_int2_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  int2 = arg1;
}


SWIGEXPORT jint JNICALL Java_constant_1pointers_constant_1pointersJNI_int2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)int2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_int3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  int3 = arg1;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_int3_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)int3;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_int4_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)(int *)int4;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_global_1const_1int_1ptr_1array_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int **)(int **)global_const_int_ptr_array;
  *(int ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_array_1member4_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ParametersTest **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ParametersTest **)(ParametersTest **)array_member4;
  *(ParametersTest ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1td1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  typedef1 arg2 = (typedef1) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  arg2 = *(typedef1 *)&jarg2; 
  if (arg1) (arg1)->td1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1td1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  typedef1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (typedef1) ((arg1)->td1);
  *(typedef1 *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1td2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  typedef2 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  arg2 = (typedef2)jarg2; 
  if (arg1) (arg1)->td2 = arg2;
}


SWIGEXPORT jint JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1td2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  typedef2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (typedef2) ((arg1)->td2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1int1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->int1 = arg2;
}


SWIGEXPORT jint JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1int1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (int) ((arg1)->int1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1int2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->int2 = arg2;
}


SWIGEXPORT jint JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1int2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (int) ((arg1)->int2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1int3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (int *)(int *) ((arg1)->int3);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1int4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  if (arg1) (arg1)->int4 = arg2;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1int4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (int *) ((arg1)->int4);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1array1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->array1;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1array1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (int *)(int *) ((arg1)->array1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1ret1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (int)(arg1)->ret1();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1ret2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (int)(arg1)->ret2();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1ret3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (int)(arg1)->ret3();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1ret4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (int *)(arg1)->ret4();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1ret5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (int *)(arg1)->ret5();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1ret6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int **arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  arg2 = *(int ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int *& reference is null");
    return ;
  } 
  (arg1)->ret6(*arg2);
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1ret7(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (int **) &(arg1)->ret7();
  *(int ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1ret8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int **arg2 = 0 ;
  int *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  temp2 = *(int **)&jarg2;
  arg2 = (int **)&temp2; 
  (arg1)->ret8((int *const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_ReturnValuesTest_1ret9(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  result = (int **) &(arg1)->ret9();
  *(int **)&jresult = *result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_new_1ReturnValuesTest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ReturnValuesTest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ReturnValuesTest *)new ReturnValuesTest();
  *(ReturnValuesTest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_delete_1ReturnValuesTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ReturnValuesTest *arg1 = (ReturnValuesTest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReturnValuesTest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_globalRet1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)globalRet1();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_globalRet2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)globalRet2();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_opaque(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Acptr arg1 = (Acptr) 0 ;
  Acptr result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Acptr *)&jarg1; 
  result = (Acptr)opaque((A const *)arg1);
  *(Acptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_new_1B(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  B *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (B *)new B();
  *(B **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_B_1ca_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  B *arg1 = (B *) 0 ;
  A result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  result = (A) ((arg1)->ca);
  *(A **)&jresult = new A((const A &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_B_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  B *arg1 = (B *) 0 ;
  A arg2 ;
  A *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  argp2 = *(A **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null A");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_B_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  B *arg1 = (B *) 0 ;
  A result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  result =  ((arg1)->a);
  *(A **)&jresult = new A((const A &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_B_1ap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  B *arg1 = (B *) 0 ;
  A *arg2 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  if (arg1) (arg1)->ap = arg2;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_B_1ap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  B *arg1 = (B *) 0 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  result = (A *) ((arg1)->ap);
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_B_1cap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  B *arg1 = (B *) 0 ;
  A *arg2 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  if (arg1) (arg1)->cap = (A const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_B_1cap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  B *arg1 = (B *) 0 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  result = (A *) ((arg1)->cap);
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_B_1acptr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  B *arg1 = (B *) 0 ;
  Acptr arg2 = (Acptr) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  arg2 = *(Acptr *)&jarg2; 
  if (arg1) (arg1)->acptr = arg2;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_B_1acptr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  B *arg1 = (B *) 0 ;
  Acptr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  result = (Acptr) ((arg1)->acptr);
  *(Acptr *)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_delete_1B(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  B *arg1 = (B *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(B **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_bar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  B *arg1 = (B *) 0 ;
  B *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  result = (B *)bar((B const *)arg1);
  *(B **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_cbar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  B **arg1 = 0 ;
  B *temp1 = 0 ;
  B **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  temp1 = *(B **)&jarg1;
  arg1 = (B **)&temp1; 
  result = (B **) &cbar((B *const &)*arg1);
  *(B **)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_wxEVENT_1COMMAND_1BUTTON_1CLICKEDr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  wxEVENT_COMMAND_BUTTON_CLICKEDr = (int const *)arg1;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_wxEVENT_1COMMAND_1BUTTON_1CLICKEDr_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)wxEVENT_COMMAND_BUTTON_CLICKEDr;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_wxEVENT_1COMMAND_1BUTTON_1CLICKEDp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  wxEVENT_COMMAND_BUTTON_CLICKEDp = (int const *)arg1;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_wxEVENT_1COMMAND_1BUTTON_1CLICKEDp_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)wxEVENT_COMMAND_BUTTON_CLICKEDp;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_languages1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  char **arg1 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  languages1 = arg1;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_languages1_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char **)languages1;
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_languages2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  char **arg1 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  languages2 = arg1;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_languages2_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char **)languages2;
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_Foo_1icap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  if (arg1) (arg1)->icap = (int const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_Foo_1icap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (int *) ((arg1)->icap);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_new_1Foo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo *)new Foo();
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_delete_1Foo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_icap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  icap = (int const *)arg1;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_icap_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)icap;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_constant_1pointers_constant_1pointersJNI_cap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  cap = (Foo const *)arg1;
}


SWIGEXPORT jlong JNICALL Java_constant_1pointers_constant_1pointersJNI_cap_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo *)cap;
  *(Foo **)&jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

