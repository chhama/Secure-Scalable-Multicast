/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



enum SOME_ENUM {ENUM_ONE, ENUM_TWO};

struct StructWithEnums {
    StructWithEnums() : some_enum(ENUM_ONE) {};
    enum SOME_ENUM some_enum;
    void enum_test1(enum SOME_ENUM param1, enum SOME_ENUM* param2, enum SOME_ENUM& param3) {};
    void enum_test2(SOME_ENUM param1, SOME_ENUM* param2, SOME_ENUM& param3) {};

    SOME_ENUM enum_test3() { return ENUM_ONE; };
    enum SOME_ENUM enum_test4() { return ENUM_TWO; };

    SOME_ENUM* enum_test5() { return &some_enum; };
    enum SOME_ENUM* enum_test6() { return &some_enum; };

    SOME_ENUM& enum_test7() { return some_enum; };
    enum SOME_ENUM& enum_test8() { return some_enum; };
};

 struct Foo
 {   
   enum {Hi, Hello } hola;
   
   Foo() 
     : hola(Hello)
   {
   }
 };

extern "C"
{
 enum {Hi, Hello } hi;
}



typedef enum { PLAY = true, STOP = false } play_state;


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_cpp_1enum_cpp_1enumJNI_new_1StructWithEnums(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StructWithEnums *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (StructWithEnums *)new StructWithEnums();
  *(StructWithEnums **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cpp_1enum_cpp_1enumJNI_StructWithEnums_1some_1enum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StructWithEnums *arg1 = (StructWithEnums *) 0 ;
  enum SOME_ENUM arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StructWithEnums **)&jarg1; 
  arg2 = (enum SOME_ENUM)jarg2; 
  if (arg1) (arg1)->some_enum = arg2;
}


SWIGEXPORT jint JNICALL Java_cpp_1enum_cpp_1enumJNI_StructWithEnums_1some_1enum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StructWithEnums *arg1 = (StructWithEnums *) 0 ;
  enum SOME_ENUM result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StructWithEnums **)&jarg1; 
  result = (enum SOME_ENUM) ((arg1)->some_enum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cpp_1enum_cpp_1enumJNI_StructWithEnums_1enum_1test1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  StructWithEnums *arg1 = (StructWithEnums *) 0 ;
  enum SOME_ENUM arg2 ;
  enum SOME_ENUM *arg3 = (enum SOME_ENUM *) 0 ;
  enum SOME_ENUM *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StructWithEnums **)&jarg1; 
  arg2 = (enum SOME_ENUM)jarg2; 
  arg3 = *(enum SOME_ENUM **)&jarg3; 
  arg4 = *(enum SOME_ENUM **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "enum SOME_ENUM & reference is null");
    return ;
  } 
  (arg1)->enum_test1(arg2,arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_cpp_1enum_cpp_1enumJNI_StructWithEnums_1enum_1test2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  StructWithEnums *arg1 = (StructWithEnums *) 0 ;
  SOME_ENUM arg2 ;
  SOME_ENUM *arg3 = (SOME_ENUM *) 0 ;
  SOME_ENUM *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StructWithEnums **)&jarg1; 
  arg2 = (SOME_ENUM)jarg2; 
  arg3 = *(SOME_ENUM **)&jarg3; 
  arg4 = *(SOME_ENUM **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SOME_ENUM & reference is null");
    return ;
  } 
  (arg1)->enum_test2(arg2,arg3,*arg4);
}


SWIGEXPORT jint JNICALL Java_cpp_1enum_cpp_1enumJNI_StructWithEnums_1enum_1test3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StructWithEnums *arg1 = (StructWithEnums *) 0 ;
  SOME_ENUM result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StructWithEnums **)&jarg1; 
  result = (SOME_ENUM)(arg1)->enum_test3();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cpp_1enum_cpp_1enumJNI_StructWithEnums_1enum_1test4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StructWithEnums *arg1 = (StructWithEnums *) 0 ;
  enum SOME_ENUM result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StructWithEnums **)&jarg1; 
  result = (enum SOME_ENUM)(arg1)->enum_test4();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cpp_1enum_cpp_1enumJNI_StructWithEnums_1enum_1test5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StructWithEnums *arg1 = (StructWithEnums *) 0 ;
  SOME_ENUM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StructWithEnums **)&jarg1; 
  result = (SOME_ENUM *)(arg1)->enum_test5();
  *(SOME_ENUM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cpp_1enum_cpp_1enumJNI_StructWithEnums_1enum_1test6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StructWithEnums *arg1 = (StructWithEnums *) 0 ;
  enum SOME_ENUM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StructWithEnums **)&jarg1; 
  result = (enum SOME_ENUM *)(arg1)->enum_test6();
  *(enum SOME_ENUM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cpp_1enum_cpp_1enumJNI_StructWithEnums_1enum_1test7(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StructWithEnums *arg1 = (StructWithEnums *) 0 ;
  SOME_ENUM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StructWithEnums **)&jarg1; 
  result = (SOME_ENUM *) &(arg1)->enum_test7();
  *(SOME_ENUM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cpp_1enum_cpp_1enumJNI_StructWithEnums_1enum_1test8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StructWithEnums *arg1 = (StructWithEnums *) 0 ;
  enum SOME_ENUM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StructWithEnums **)&jarg1; 
  result = (enum SOME_ENUM *) &(arg1)->enum_test8();
  *(enum SOME_ENUM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cpp_1enum_cpp_1enumJNI_delete_1StructWithEnums(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StructWithEnums *arg1 = (StructWithEnums *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StructWithEnums **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_cpp_1enum_cpp_1enumJNI_Foo_1Hi_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Foo::Hi;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cpp_1enum_cpp_1enumJNI_Foo_1Hello_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Foo::Hello;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cpp_1enum_cpp_1enumJNI_Foo_1hola_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->hola)) *(int*)(void*)&((arg1)->hola) = arg2;
}


SWIGEXPORT jint JNICALL Java_cpp_1enum_cpp_1enumJNI_Foo_1hola_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (int) ((arg1)->hola);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cpp_1enum_cpp_1enumJNI_new_1Foo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo *)new Foo();
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cpp_1enum_cpp_1enumJNI_delete_1Foo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_cpp_1enum_cpp_1enumJNI_Hi_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Hi;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cpp_1enum_cpp_1enumJNI_Hello_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Hello;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cpp_1enum_cpp_1enumJNI_hi_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if (sizeof(int) == sizeof(hi)) *(int*)(void*)&(hi) = arg1;
}


SWIGEXPORT jint JNICALL Java_cpp_1enum_cpp_1enumJNI_hi_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)hi;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cpp_1enum_cpp_1enumJNI_PLAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  play_state result;
  
  (void)jenv;
  (void)jcls;
  result = (play_state)PLAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cpp_1enum_cpp_1enumJNI_STOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  play_state result;
  
  (void)jenv;
  (void)jcls;
  result = (play_state)STOP;
  jresult = (jint)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

