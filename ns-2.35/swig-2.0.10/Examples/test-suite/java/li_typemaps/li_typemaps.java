/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package li_typemaps;

public class li_typemaps {
  public static boolean in_bool(boolean INPUT) {
    return li_typemapsJNI.in_bool(INPUT);
  }

  public static int in_int(int INPUT) {
    return li_typemapsJNI.in_int(INPUT);
  }

  public static int in_long(int INPUT) {
    return li_typemapsJNI.in_long(INPUT);
  }

  public static short in_short(short INPUT) {
    return li_typemapsJNI.in_short(INPUT);
  }

  public static long in_uint(long INPUT) {
    return li_typemapsJNI.in_uint(INPUT);
  }

  public static int in_ushort(int INPUT) {
    return li_typemapsJNI.in_ushort(INPUT);
  }

  public static long in_ulong(long INPUT) {
    return li_typemapsJNI.in_ulong(INPUT);
  }

  public static short in_uchar(short INPUT) {
    return li_typemapsJNI.in_uchar(INPUT);
  }

  public static byte in_schar(byte INPUT) {
    return li_typemapsJNI.in_schar(INPUT);
  }

  public static float in_float(float INPUT) {
    return li_typemapsJNI.in_float(INPUT);
  }

  public static double in_double(double INPUT) {
    return li_typemapsJNI.in_double(INPUT);
  }

  public static long in_longlong(long INPUT) {
    return li_typemapsJNI.in_longlong(INPUT);
  }

  public static java.math.BigInteger in_ulonglong(java.math.BigInteger INPUT) {
    return li_typemapsJNI.in_ulonglong(INPUT);
  }

  public static boolean inr_bool(boolean INPUT) {
    return li_typemapsJNI.inr_bool(INPUT);
  }

  public static int inr_int(int INPUT) {
    return li_typemapsJNI.inr_int(INPUT);
  }

  public static int inr_long(int INPUT) {
    return li_typemapsJNI.inr_long(INPUT);
  }

  public static short inr_short(short INPUT) {
    return li_typemapsJNI.inr_short(INPUT);
  }

  public static long inr_uint(long INPUT) {
    return li_typemapsJNI.inr_uint(INPUT);
  }

  public static int inr_ushort(int INPUT) {
    return li_typemapsJNI.inr_ushort(INPUT);
  }

  public static long inr_ulong(long INPUT) {
    return li_typemapsJNI.inr_ulong(INPUT);
  }

  public static short inr_uchar(short INPUT) {
    return li_typemapsJNI.inr_uchar(INPUT);
  }

  public static byte inr_schar(byte INPUT) {
    return li_typemapsJNI.inr_schar(INPUT);
  }

  public static float inr_float(float INPUT) {
    return li_typemapsJNI.inr_float(INPUT);
  }

  public static double inr_double(double INPUT) {
    return li_typemapsJNI.inr_double(INPUT);
  }

  public static long inr_longlong(long INPUT) {
    return li_typemapsJNI.inr_longlong(INPUT);
  }

  public static java.math.BigInteger inr_ulonglong(java.math.BigInteger INPUT) {
    return li_typemapsJNI.inr_ulonglong(INPUT);
  }

  public static void out_bool(boolean x, boolean[] OUTPUT) {
    li_typemapsJNI.out_bool(x, OUTPUT);
  }

  public static void out_int(int x, int[] OUTPUT) {
    li_typemapsJNI.out_int(x, OUTPUT);
  }

  public static void out_short(short x, short[] OUTPUT) {
    li_typemapsJNI.out_short(x, OUTPUT);
  }

  public static void out_long(int x, int[] OUTPUT) {
    li_typemapsJNI.out_long(x, OUTPUT);
  }

  public static void out_uint(long x, long[] OUTPUT) {
    li_typemapsJNI.out_uint(x, OUTPUT);
  }

  public static void out_ushort(int x, int[] OUTPUT) {
    li_typemapsJNI.out_ushort(x, OUTPUT);
  }

  public static void out_ulong(long x, long[] OUTPUT) {
    li_typemapsJNI.out_ulong(x, OUTPUT);
  }

  public static void out_uchar(short x, short[] OUTPUT) {
    li_typemapsJNI.out_uchar(x, OUTPUT);
  }

  public static void out_schar(byte x, byte[] OUTPUT) {
    li_typemapsJNI.out_schar(x, OUTPUT);
  }

  public static void out_float(float x, float[] OUTPUT) {
    li_typemapsJNI.out_float(x, OUTPUT);
  }

  public static void out_double(double x, double[] OUTPUT) {
    li_typemapsJNI.out_double(x, OUTPUT);
  }

  public static void out_longlong(long x, long[] OUTPUT) {
    li_typemapsJNI.out_longlong(x, OUTPUT);
  }

  public static void out_ulonglong(java.math.BigInteger x, java.math.BigInteger[] OUTPUT) {
    li_typemapsJNI.out_ulonglong(x, OUTPUT);
  }

  public static Foo out_foo(int a, int[] OUTPUT) {
    long cPtr = li_typemapsJNI.out_foo(a, OUTPUT);
    return (cPtr == 0) ? null : new Foo(cPtr, true);
  }

  public static void outr_bool(boolean x, boolean[] OUTPUT) {
    li_typemapsJNI.outr_bool(x, OUTPUT);
  }

  public static void outr_int(int x, int[] OUTPUT) {
    li_typemapsJNI.outr_int(x, OUTPUT);
  }

  public static void outr_short(short x, short[] OUTPUT) {
    li_typemapsJNI.outr_short(x, OUTPUT);
  }

  public static void outr_long(int x, int[] OUTPUT) {
    li_typemapsJNI.outr_long(x, OUTPUT);
  }

  public static void outr_uint(long x, long[] OUTPUT) {
    li_typemapsJNI.outr_uint(x, OUTPUT);
  }

  public static void outr_ushort(int x, int[] OUTPUT) {
    li_typemapsJNI.outr_ushort(x, OUTPUT);
  }

  public static void outr_ulong(long x, long[] OUTPUT) {
    li_typemapsJNI.outr_ulong(x, OUTPUT);
  }

  public static void outr_uchar(short x, short[] OUTPUT) {
    li_typemapsJNI.outr_uchar(x, OUTPUT);
  }

  public static void outr_schar(byte x, byte[] OUTPUT) {
    li_typemapsJNI.outr_schar(x, OUTPUT);
  }

  public static void outr_float(float x, float[] OUTPUT) {
    li_typemapsJNI.outr_float(x, OUTPUT);
  }

  public static void outr_double(double x, double[] OUTPUT) {
    li_typemapsJNI.outr_double(x, OUTPUT);
  }

  public static void outr_longlong(long x, long[] OUTPUT) {
    li_typemapsJNI.outr_longlong(x, OUTPUT);
  }

  public static void outr_ulonglong(java.math.BigInteger x, java.math.BigInteger[] OUTPUT) {
    li_typemapsJNI.outr_ulonglong(x, OUTPUT);
  }

  public static void inout_bool(boolean[] INOUT) {
    li_typemapsJNI.inout_bool(INOUT);
  }

  public static void inout_int(int[] INOUT) {
    li_typemapsJNI.inout_int(INOUT);
  }

  public static void inout_short(short[] INOUT) {
    li_typemapsJNI.inout_short(INOUT);
  }

  public static void inout_long(int[] INOUT) {
    li_typemapsJNI.inout_long(INOUT);
  }

  public static void inout_uint(long[] INOUT) {
    li_typemapsJNI.inout_uint(INOUT);
  }

  public static void inout_ushort(int[] INOUT) {
    li_typemapsJNI.inout_ushort(INOUT);
  }

  public static void inout_ulong(long[] INOUT) {
    li_typemapsJNI.inout_ulong(INOUT);
  }

  public static void inout_uchar(short[] INOUT) {
    li_typemapsJNI.inout_uchar(INOUT);
  }

  public static void inout_schar(byte[] INOUT) {
    li_typemapsJNI.inout_schar(INOUT);
  }

  public static void inout_float(float[] INOUT) {
    li_typemapsJNI.inout_float(INOUT);
  }

  public static void inout_double(double[] INOUT) {
    li_typemapsJNI.inout_double(INOUT);
  }

  public static void inout_longlong(long[] INOUT) {
    li_typemapsJNI.inout_longlong(INOUT);
  }

  public static void inout_ulonglong(java.math.BigInteger[] INOUT) {
    li_typemapsJNI.inout_ulonglong(INOUT);
  }

  public static void inoutr_bool(boolean[] INOUT) {
    li_typemapsJNI.inoutr_bool(INOUT);
  }

  public static void inoutr_int(int[] INOUT) {
    li_typemapsJNI.inoutr_int(INOUT);
  }

  public static void inoutr_short(short[] INOUT) {
    li_typemapsJNI.inoutr_short(INOUT);
  }

  public static void inoutr_long(int[] INOUT) {
    li_typemapsJNI.inoutr_long(INOUT);
  }

  public static void inoutr_uint(long[] INOUT) {
    li_typemapsJNI.inoutr_uint(INOUT);
  }

  public static void inoutr_ushort(int[] INOUT) {
    li_typemapsJNI.inoutr_ushort(INOUT);
  }

  public static void inoutr_ulong(long[] INOUT) {
    li_typemapsJNI.inoutr_ulong(INOUT);
  }

  public static void inoutr_uchar(short[] INOUT) {
    li_typemapsJNI.inoutr_uchar(INOUT);
  }

  public static void inoutr_schar(byte[] INOUT) {
    li_typemapsJNI.inoutr_schar(INOUT);
  }

  public static void inoutr_float(float[] INOUT) {
    li_typemapsJNI.inoutr_float(INOUT);
  }

  public static void inoutr_double(double[] INOUT) {
    li_typemapsJNI.inoutr_double(INOUT);
  }

  public static void inoutr_longlong(long[] INOUT) {
    li_typemapsJNI.inoutr_longlong(INOUT);
  }

  public static void inoutr_ulonglong(java.math.BigInteger[] INOUT) {
    li_typemapsJNI.inoutr_ulonglong(INOUT);
  }

  public static void inoutr_int2(int[] INOUT, int[] INOUT2) {
    li_typemapsJNI.inoutr_int2(INOUT, INOUT2);
  }

}
