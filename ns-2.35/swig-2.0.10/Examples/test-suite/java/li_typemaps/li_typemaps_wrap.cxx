/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



struct Foo { int a; };

bool in_bool(bool *INPUT) { return *INPUT; }
int in_int(int *INPUT) { return *INPUT; }
long in_long(long *INPUT) { return *INPUT; }
short in_short(short *INPUT) { return *INPUT; }
unsigned int in_uint(unsigned int *INPUT) { return *INPUT; }
unsigned short in_ushort(unsigned short *INPUT) { return *INPUT; }
unsigned long in_ulong(unsigned long *INPUT) { return *INPUT; }
unsigned char in_uchar(unsigned char *INPUT) { return *INPUT; }
signed char in_schar(signed char *INPUT) { return *INPUT; }
float in_float(float *INPUT) { return *INPUT; }
double in_double(double *INPUT) { return *INPUT; }
long long in_longlong(long long *INPUT) { return *INPUT; }
unsigned long long in_ulonglong(unsigned long long *INPUT) { return *INPUT; }

bool inr_bool(bool &INPUT) { return INPUT; }
int inr_int(int &INPUT) { return INPUT; }
long inr_long(long &INPUT) { return INPUT; }
short inr_short(short &INPUT) { return INPUT; }
unsigned int inr_uint(unsigned int &INPUT) { return INPUT; }
unsigned short inr_ushort(unsigned short &INPUT) { return INPUT; }
unsigned long inr_ulong(unsigned long &INPUT) { return INPUT; }
unsigned char inr_uchar(unsigned char &INPUT) { return INPUT; }
signed char inr_schar(signed char &INPUT) { return INPUT; }
float inr_float(float &INPUT) { return INPUT; }
double inr_double(double &INPUT) { return INPUT; }
long long inr_longlong(long long &INPUT) { return INPUT; }
unsigned long long inr_ulonglong(unsigned long long &INPUT) { return INPUT; }

void out_bool(bool x, bool *OUTPUT) {  *OUTPUT = x; }
void out_int(int x, int *OUTPUT) {  *OUTPUT = x; }
void out_short(short x, short *OUTPUT) {  *OUTPUT = x; }
void out_long(long x, long *OUTPUT) {  *OUTPUT = x; }
void out_uint(unsigned int x, unsigned int *OUTPUT) {  *OUTPUT = x; }
void out_ushort(unsigned short x, unsigned short *OUTPUT) {  *OUTPUT = x; }
void out_ulong(unsigned long x, unsigned long *OUTPUT) {  *OUTPUT = x; }
void out_uchar(unsigned char x, unsigned char *OUTPUT) {  *OUTPUT = x; }
void out_schar(signed char x, signed char *OUTPUT) {  *OUTPUT = x; }
void out_float(float x, float *OUTPUT) {  *OUTPUT = x; }
void out_double(double x, double *OUTPUT) {  *OUTPUT = x; }
void out_longlong(long long x, long long *OUTPUT) {  *OUTPUT = x; }
void out_ulonglong(unsigned long long x, unsigned long long *OUTPUT) {  *OUTPUT = x; }

/* Tests a returning a wrapped pointer and an output argument */
struct Foo *out_foo(int a, int *OUTPUT) {
  struct Foo *f = new struct Foo();
  f->a = a;
  *OUTPUT = a * 2;
  return f;
}

void outr_bool(bool x, bool &OUTPUT) {  OUTPUT = x; }
void outr_int(int x, int &OUTPUT) {  OUTPUT = x; }
void outr_short(short x, short &OUTPUT) {  OUTPUT = x; }
void outr_long(long x, long &OUTPUT) {  OUTPUT = x; }
void outr_uint(unsigned int x, unsigned int &OUTPUT) {  OUTPUT = x; }
void outr_ushort(unsigned short x, unsigned short &OUTPUT) {  OUTPUT = x; }
void outr_ulong(unsigned long x, unsigned long &OUTPUT) {  OUTPUT = x; }
void outr_uchar(unsigned char x, unsigned char &OUTPUT) {  OUTPUT = x; }
void outr_schar(signed char x, signed char &OUTPUT) {  OUTPUT = x; }
void outr_float(float x, float &OUTPUT) {  OUTPUT = x; }
void outr_double(double x, double &OUTPUT) {  OUTPUT = x; }
void outr_longlong(long long x, long long &OUTPUT) {  OUTPUT = x; }
void outr_ulonglong(unsigned long long x, unsigned long long &OUTPUT) {  OUTPUT = x; }

void inout_bool(bool *INOUT) {  *INOUT = *INOUT; }
void inout_int(int *INOUT) {  *INOUT = *INOUT; }
void inout_short(short *INOUT) {  *INOUT = *INOUT; }
void inout_long(long *INOUT) {  *INOUT = *INOUT; }
void inout_uint(unsigned int *INOUT) {  *INOUT = *INOUT; }
void inout_ushort(unsigned short *INOUT) {  *INOUT = *INOUT; }
void inout_ulong(unsigned long *INOUT) {  *INOUT = *INOUT; }
void inout_uchar(unsigned char *INOUT) {  *INOUT = *INOUT; }
void inout_schar(signed char *INOUT) {  *INOUT = *INOUT; }
void inout_float(float *INOUT) {  *INOUT = *INOUT; }
void inout_double(double *INOUT) {  *INOUT = *INOUT; }
void inout_longlong(long long *INOUT) {  *INOUT = *INOUT; }
void inout_ulonglong(unsigned long long *INOUT) {  *INOUT = *INOUT; }

void inoutr_bool(bool &INOUT) {  INOUT = INOUT; }
void inoutr_int(int &INOUT) {  INOUT = INOUT; }
void inoutr_short(short &INOUT) {  INOUT = INOUT; }
void inoutr_long(long &INOUT) {  INOUT = INOUT; }
void inoutr_uint(unsigned int &INOUT) {  INOUT = INOUT; }
void inoutr_ushort(unsigned short &INOUT) {  INOUT = INOUT; }
void inoutr_ulong(unsigned long &INOUT) {  INOUT = INOUT; }
void inoutr_uchar(unsigned char &INOUT) {  INOUT = INOUT; }
void inoutr_schar(signed char &INOUT) {  INOUT = INOUT; }
void inoutr_float(float &INOUT) {  INOUT = INOUT; }
void inoutr_double(double &INOUT) {  INOUT = INOUT; }
void inoutr_longlong(long long &INOUT) {  INOUT = INOUT; }
void inoutr_ulonglong(unsigned long long &INOUT) {  INOUT = INOUT; }

void inoutr_int2(int &INOUT, int &INOUT2) {  INOUT = INOUT; INOUT2 = INOUT2;}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_Foo_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1typemaps_li_1typemapsJNI_Foo_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (int) ((arg1)->a);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1typemaps_li_1typemapsJNI_new_1Foo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo *)new Foo();
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_delete_1Foo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_li_1typemaps_li_1typemapsJNI_in_1bool(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jboolean jresult = 0 ;
  bool *arg1 = (bool *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (bool *)&jarg1; 
  result = (bool)in_bool(arg1);
  jresult = (jboolean)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1typemaps_li_1typemapsJNI_in_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int *)&jarg1; 
  result = (int)in_int(arg1);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1typemaps_li_1typemapsJNI_in_1long(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  long *arg1 = (long *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long *)&jarg1; 
  result = (long)in_long(arg1);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1typemaps_li_1typemapsJNI_in_1short(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jshort jresult = 0 ;
  short *arg1 = (short *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (short *)&jarg1; 
  result = (short)in_short(arg1);
  jresult = (jshort)result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1typemaps_li_1typemapsJNI_in_1uint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int *)&jarg1; 
  result = (unsigned int)in_uint(arg1);
  jresult = (jlong)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1typemaps_li_1typemapsJNI_in_1ushort(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  unsigned short *arg1 = (unsigned short *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned short *)&jarg1; 
  result = (unsigned short)in_ushort(arg1);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1typemaps_li_1typemapsJNI_in_1ulong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned long *arg1 = (unsigned long *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long *)&jarg1; 
  result = (unsigned long)in_ulong(arg1);
  jresult = (jlong)result; 
  
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1typemaps_li_1typemapsJNI_in_1uchar(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jshort jresult = 0 ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char *)&jarg1; 
  result = (unsigned char)in_uchar(arg1);
  jresult = (jshort)result; 
  
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_li_1typemaps_li_1typemapsJNI_in_1schar(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  jbyte jresult = 0 ;
  signed char *arg1 = (signed char *) 0 ;
  signed char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (signed char *)&jarg1; 
  result = (signed char)in_schar(arg1);
  jresult = (jbyte)result; 
  
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_li_1typemaps_li_1typemapsJNI_in_1float(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  float *arg1 = (float *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float *)&jarg1; 
  result = (float)in_float(arg1);
  jresult = (jfloat)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_li_1typemaps_li_1typemapsJNI_in_1double(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double *arg1 = (double *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double *)&jarg1; 
  result = (double)in_double(arg1);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1typemaps_li_1typemapsJNI_in_1longlong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long *arg1 = (long long *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long *)&jarg1; 
  result = (long long)in_longlong(arg1);
  jresult = (jlong)result; 
  
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_li_1typemaps_li_1typemapsJNI_in_1ulonglong(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jobject jresult = 0 ;
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  unsigned long long temp1 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    temp1 = 0;
    for(i=0; i<sz; i++) {
      temp1 = (temp1 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    arg1 = &temp1;
  }
  result = (unsigned long long)in_ulonglong(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_li_1typemaps_li_1typemapsJNI_inr_1bool(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jboolean jresult = 0 ;
  bool *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (bool *)&jarg1; 
  result = (bool)inr_bool(*arg1);
  jresult = (jboolean)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1typemaps_li_1typemapsJNI_inr_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int *)&jarg1; 
  result = (int)inr_int(*arg1);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1typemaps_li_1typemapsJNI_inr_1long(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  long *arg1 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long *)&jarg1; 
  result = (long)inr_long(*arg1);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1typemaps_li_1typemapsJNI_inr_1short(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jshort jresult = 0 ;
  short *arg1 = 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (short *)&jarg1; 
  result = (short)inr_short(*arg1);
  jresult = (jshort)result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1typemaps_li_1typemapsJNI_inr_1uint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int *arg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int *)&jarg1; 
  result = (unsigned int)inr_uint(*arg1);
  jresult = (jlong)result; 
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1typemaps_li_1typemapsJNI_inr_1ushort(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  unsigned short *arg1 = 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned short *)&jarg1; 
  result = (unsigned short)inr_ushort(*arg1);
  jresult = (jint)result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1typemaps_li_1typemapsJNI_inr_1ulong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned long *arg1 = 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long *)&jarg1; 
  result = (unsigned long)inr_ulong(*arg1);
  jresult = (jlong)result; 
  
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1typemaps_li_1typemapsJNI_inr_1uchar(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jshort jresult = 0 ;
  unsigned char *arg1 = 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char *)&jarg1; 
  result = (unsigned char)inr_uchar(*arg1);
  jresult = (jshort)result; 
  
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_li_1typemaps_li_1typemapsJNI_inr_1schar(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  jbyte jresult = 0 ;
  signed char *arg1 = 0 ;
  signed char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (signed char *)&jarg1; 
  result = (signed char)inr_schar(*arg1);
  jresult = (jbyte)result; 
  
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_li_1typemaps_li_1typemapsJNI_inr_1float(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jfloat jresult = 0 ;
  float *arg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float *)&jarg1; 
  result = (float)inr_float(*arg1);
  jresult = (jfloat)result; 
  
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_li_1typemaps_li_1typemapsJNI_inr_1double(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double *arg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double *)&jarg1; 
  result = (double)inr_double(*arg1);
  jresult = (jdouble)result; 
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1typemaps_li_1typemapsJNI_inr_1longlong(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long *arg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long *)&jarg1; 
  result = (long long)inr_longlong(*arg1);
  jresult = (jlong)result; 
  
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_li_1typemaps_li_1typemapsJNI_inr_1ulonglong(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jobject jresult = 0 ;
  unsigned long long *arg1 = 0 ;
  unsigned long long temp1 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    temp1 = 0;
    for(i=0; i<sz; i++) {
      temp1 = (temp1 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    arg1 = &temp1;
  }
  result = (unsigned long long)inr_ulonglong(*arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1bool(JNIEnv *jenv, jclass jcls, jboolean jarg1, jbooleanArray jarg2) {
  bool arg1 ;
  bool *arg2 = (bool *) 0 ;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = false;
    arg2 = &temp2; 
  }
  out_bool(arg1,arg2);
  {
    jboolean jvalue = (jboolean)temp2;
    jenv->SetBooleanArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1int(JNIEnv *jenv, jclass jcls, jint jarg1, jintArray jarg2) {
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  out_int(arg1,arg2);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1short(JNIEnv *jenv, jclass jcls, jshort jarg1, jshortArray jarg2) {
  short arg1 ;
  short *arg2 = (short *) 0 ;
  short temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (short)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (short)0;
    arg2 = &temp2; 
  }
  out_short(arg1,arg2);
  {
    jshort jvalue = (jshort)temp2;
    jenv->SetShortArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1long(JNIEnv *jenv, jclass jcls, jint jarg1, jintArray jarg2) {
  long arg1 ;
  long *arg2 = (long *) 0 ;
  long temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (long)0;
    arg2 = &temp2; 
  }
  out_long(arg1,arg2);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1uint(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2) {
  unsigned int arg1 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (unsigned int)0;
    arg2 = &temp2; 
  }
  out_uint(arg1,arg2);
  {
    jlong jvalue = (jlong)temp2;
    jenv->SetLongArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1ushort(JNIEnv *jenv, jclass jcls, jint jarg1, jintArray jarg2) {
  unsigned short arg1 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  unsigned short temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned short)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (unsigned short)0;
    arg2 = &temp2; 
  }
  out_ushort(arg1,arg2);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1ulong(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2) {
  unsigned long arg1 ;
  unsigned long *arg2 = (unsigned long *) 0 ;
  unsigned long temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (unsigned long)0;
    arg2 = &temp2; 
  }
  out_ulong(arg1,arg2);
  {
    jlong jvalue = (jlong)temp2;
    jenv->SetLongArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1uchar(JNIEnv *jenv, jclass jcls, jshort jarg1, jshortArray jarg2) {
  unsigned char arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned char temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (unsigned char)0;
    arg2 = &temp2; 
  }
  out_uchar(arg1,arg2);
  {
    jshort jvalue = (jshort)temp2;
    jenv->SetShortArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1schar(JNIEnv *jenv, jclass jcls, jbyte jarg1, jbyteArray jarg2) {
  signed char arg1 ;
  signed char *arg2 = (signed char *) 0 ;
  signed char temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (signed char)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (signed char)0;
    arg2 = &temp2; 
  }
  out_schar(arg1,arg2);
  {
    jbyte jvalue = (jbyte)temp2;
    jenv->SetByteArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1float(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloatArray jarg2) {
  float arg1 ;
  float *arg2 = (float *) 0 ;
  float temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (float)0;
    arg2 = &temp2; 
  }
  out_float(arg1,arg2);
  {
    jfloat jvalue = (jfloat)temp2;
    jenv->SetFloatArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1double(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdoubleArray jarg2) {
  double arg1 ;
  double *arg2 = (double *) 0 ;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  out_double(arg1,arg2);
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1longlong(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2) {
  long long arg1 ;
  long long *arg2 = (long long *) 0 ;
  long long temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (long long)0;
    arg2 = &temp2; 
  }
  out_longlong(arg1,arg2);
  {
    jlong jvalue = (jlong)temp2;
    jenv->SetLongArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1ulonglong(JNIEnv *jenv, jclass jcls, jobject jarg1, jobjectArray jarg2) {
  unsigned long long arg1 ;
  unsigned long long *arg2 = (unsigned long long *) 0 ;
  unsigned long long temp2 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    for(i=0; i<sz; i++) {
      arg1 = (arg1 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (unsigned long long)0;
    arg2 = &temp2; 
  }
  out_ulonglong(arg1,arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(temp2>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->SetObjectArrayElement(jarg2, 0, bigint);
  }
  
}


SWIGEXPORT jlong JNICALL Java_li_1typemaps_li_1typemapsJNI_out_1foo(JNIEnv *jenv, jclass jcls, jint jarg1, jintArray jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int temp2 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  result = (Foo *)out_foo(arg1,arg2);
  *(Foo **)&jresult = result; 
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_outr_1bool(JNIEnv *jenv, jclass jcls, jboolean jarg1, jbooleanArray jarg2) {
  bool arg1 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = false;
    arg2 = &temp2; 
  }
  outr_bool(arg1,*arg2);
  {
    jboolean jvalue = (jboolean)temp2;
    jenv->SetBooleanArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_outr_1int(JNIEnv *jenv, jclass jcls, jint jarg1, jintArray jarg2) {
  int arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  outr_int(arg1,*arg2);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_outr_1short(JNIEnv *jenv, jclass jcls, jshort jarg1, jshortArray jarg2) {
  short arg1 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (short)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (short)0;
    arg2 = &temp2; 
  }
  outr_short(arg1,*arg2);
  {
    jshort jvalue = (jshort)temp2;
    jenv->SetShortArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_outr_1long(JNIEnv *jenv, jclass jcls, jint jarg1, jintArray jarg2) {
  long arg1 ;
  long *arg2 = 0 ;
  long temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (long)0;
    arg2 = &temp2; 
  }
  outr_long(arg1,*arg2);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_outr_1uint(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2) {
  unsigned int arg1 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (unsigned int)0;
    arg2 = &temp2; 
  }
  outr_uint(arg1,*arg2);
  {
    jlong jvalue = (jlong)temp2;
    jenv->SetLongArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_outr_1ushort(JNIEnv *jenv, jclass jcls, jint jarg1, jintArray jarg2) {
  unsigned short arg1 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned short)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (unsigned short)0;
    arg2 = &temp2; 
  }
  outr_ushort(arg1,*arg2);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_outr_1ulong(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2) {
  unsigned long arg1 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (unsigned long)0;
    arg2 = &temp2; 
  }
  outr_ulong(arg1,*arg2);
  {
    jlong jvalue = (jlong)temp2;
    jenv->SetLongArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_outr_1uchar(JNIEnv *jenv, jclass jcls, jshort jarg1, jshortArray jarg2) {
  unsigned char arg1 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (unsigned char)0;
    arg2 = &temp2; 
  }
  outr_uchar(arg1,*arg2);
  {
    jshort jvalue = (jshort)temp2;
    jenv->SetShortArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_outr_1schar(JNIEnv *jenv, jclass jcls, jbyte jarg1, jbyteArray jarg2) {
  signed char arg1 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (signed char)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (signed char)0;
    arg2 = &temp2; 
  }
  outr_schar(arg1,*arg2);
  {
    jbyte jvalue = (jbyte)temp2;
    jenv->SetByteArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_outr_1float(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloatArray jarg2) {
  float arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (float)0;
    arg2 = &temp2; 
  }
  outr_float(arg1,*arg2);
  {
    jfloat jvalue = (jfloat)temp2;
    jenv->SetFloatArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_outr_1double(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdoubleArray jarg2) {
  double arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  outr_double(arg1,*arg2);
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_outr_1longlong(JNIEnv *jenv, jclass jcls, jlong jarg1, jlongArray jarg2) {
  long long arg1 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (long long)0;
    arg2 = &temp2; 
  }
  outr_longlong(arg1,*arg2);
  {
    jlong jvalue = (jlong)temp2;
    jenv->SetLongArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_outr_1ulonglong(JNIEnv *jenv, jclass jcls, jobject jarg1, jobjectArray jarg2) {
  unsigned long long arg1 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    for(i=0; i<sz; i++) {
      arg1 = (arg1 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (unsigned long long)0;
    arg2 = &temp2; 
  }
  outr_ulonglong(arg1,*arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(temp2>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->SetObjectArrayElement(jarg2, 0, bigint);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inout_1bool(JNIEnv *jenv, jclass jcls, jbooleanArray jarg1) {
  bool *arg1 = (bool *) 0 ;
  bool btemp1 ;
  jboolean *jbtemp1 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    jbtemp1 = jenv->GetBooleanArrayElements(jarg1, 0);
    btemp1 = (*jbtemp1) ? true : false;
    arg1 = &btemp1;
  }
  inout_bool(arg1);
  {
    *jbtemp1 = btemp1 ? (jboolean)1 : (jboolean)0;
    jenv->ReleaseBooleanArrayElements(jarg1, (jboolean *)jbtemp1, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inout_1int(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (int *) jenv->GetIntArrayElements(jarg1, 0); 
  }
  inout_int(arg1);
  {
    jenv->ReleaseIntArrayElements(jarg1, (jint *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inout_1short(JNIEnv *jenv, jclass jcls, jshortArray jarg1) {
  short *arg1 = (short *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (short *) jenv->GetShortArrayElements(jarg1, 0); 
  }
  inout_short(arg1);
  {
    jenv->ReleaseShortArrayElements(jarg1, (jshort *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inout_1long(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  long *arg1 = (long *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (long *) jenv->GetIntArrayElements(jarg1, 0); 
  }
  inout_long(arg1);
  {
    jenv->ReleaseIntArrayElements(jarg1, (jint *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inout_1uint(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (unsigned int *) jenv->GetLongArrayElements(jarg1, 0); 
  }
  inout_uint(arg1);
  {
    jenv->ReleaseLongArrayElements(jarg1, (jlong *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inout_1ushort(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  unsigned short *arg1 = (unsigned short *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (unsigned short *) jenv->GetIntArrayElements(jarg1, 0); 
  }
  inout_ushort(arg1);
  {
    jenv->ReleaseIntArrayElements(jarg1, (jint *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inout_1ulong(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  unsigned long *arg1 = (unsigned long *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (unsigned long *) jenv->GetLongArrayElements(jarg1, 0); 
  }
  inout_ulong(arg1);
  {
    jenv->ReleaseLongArrayElements(jarg1, (jlong *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inout_1uchar(JNIEnv *jenv, jclass jcls, jshortArray jarg1) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (unsigned char *) jenv->GetShortArrayElements(jarg1, 0); 
  }
  inout_uchar(arg1);
  {
    jenv->ReleaseShortArrayElements(jarg1, (jshort *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inout_1schar(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  signed char *arg1 = (signed char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (signed char *) jenv->GetByteArrayElements(jarg1, 0); 
  }
  inout_schar(arg1);
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inout_1float(JNIEnv *jenv, jclass jcls, jfloatArray jarg1) {
  float *arg1 = (float *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (float *) jenv->GetFloatArrayElements(jarg1, 0); 
  }
  inout_float(arg1);
  {
    jenv->ReleaseFloatArrayElements(jarg1, (jfloat *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inout_1double(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1) {
  double *arg1 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (double *) jenv->GetDoubleArrayElements(jarg1, 0); 
  }
  inout_double(arg1);
  {
    jenv->ReleaseDoubleArrayElements(jarg1, (jdouble *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inout_1longlong(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  long long *arg1 = (long long *) 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (long long *) jenv->GetLongArrayElements(jarg1, 0); 
  }
  inout_longlong(arg1);
  {
    jenv->ReleaseLongArrayElements(jarg1, (jlong *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inout_1ulonglong(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  unsigned long long *arg1 = (unsigned long long *) 0 ;
  unsigned long long temp1 ;
  
  (void)jenv;
  (void)jcls;
  {
    jobject bigint;
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    bigint = jenv->GetObjectArrayElement(jarg1, 0);
    if (!bigint) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array element null");
      return ;
    }
    clazz = jenv->GetObjectClass(bigint);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(bigint, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    temp1 = 0;
    for(i=0; i<sz; i++) {
      temp1 = (temp1 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    arg1 = &temp1;
  }
  inout_ulonglong(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(temp1>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->SetObjectArrayElement(jarg1, 0, bigint);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1bool(JNIEnv *jenv, jclass jcls, jbooleanArray jarg1) {
  bool *arg1 = 0 ;
  bool btemp1 ;
  jboolean *jbtemp1 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    jbtemp1 = jenv->GetBooleanArrayElements(jarg1, 0);
    btemp1 = (*jbtemp1) ? true : false;
    arg1 = &btemp1;
  }
  inoutr_bool(*arg1);
  {
    *jbtemp1 = btemp1 ? (jboolean)1 : (jboolean)0;
    jenv->ReleaseBooleanArrayElements(jarg1, (jboolean *)jbtemp1, 0);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1int(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  int *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (int *) jenv->GetIntArrayElements(jarg1, 0); 
  }
  inoutr_int(*arg1);
  {
    jenv->ReleaseIntArrayElements(jarg1, (jint *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1short(JNIEnv *jenv, jclass jcls, jshortArray jarg1) {
  short *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (short *) jenv->GetShortArrayElements(jarg1, 0); 
  }
  inoutr_short(*arg1);
  {
    jenv->ReleaseShortArrayElements(jarg1, (jshort *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1long(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  long *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (long *) jenv->GetIntArrayElements(jarg1, 0); 
  }
  inoutr_long(*arg1);
  {
    jenv->ReleaseIntArrayElements(jarg1, (jint *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1uint(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  unsigned int *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (unsigned int *) jenv->GetLongArrayElements(jarg1, 0); 
  }
  inoutr_uint(*arg1);
  {
    jenv->ReleaseLongArrayElements(jarg1, (jlong *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1ushort(JNIEnv *jenv, jclass jcls, jintArray jarg1) {
  unsigned short *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (unsigned short *) jenv->GetIntArrayElements(jarg1, 0); 
  }
  inoutr_ushort(*arg1);
  {
    jenv->ReleaseIntArrayElements(jarg1, (jint *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1ulong(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  unsigned long *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (unsigned long *) jenv->GetLongArrayElements(jarg1, 0); 
  }
  inoutr_ulong(*arg1);
  {
    jenv->ReleaseLongArrayElements(jarg1, (jlong *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1uchar(JNIEnv *jenv, jclass jcls, jshortArray jarg1) {
  unsigned char *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (unsigned char *) jenv->GetShortArrayElements(jarg1, 0); 
  }
  inoutr_uchar(*arg1);
  {
    jenv->ReleaseShortArrayElements(jarg1, (jshort *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1schar(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  signed char *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (signed char *) jenv->GetByteArrayElements(jarg1, 0); 
  }
  inoutr_schar(*arg1);
  {
    jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1float(JNIEnv *jenv, jclass jcls, jfloatArray jarg1) {
  float *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (float *) jenv->GetFloatArrayElements(jarg1, 0); 
  }
  inoutr_float(*arg1);
  {
    jenv->ReleaseFloatArrayElements(jarg1, (jfloat *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1double(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1) {
  double *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (double *) jenv->GetDoubleArrayElements(jarg1, 0); 
  }
  inoutr_double(*arg1);
  {
    jenv->ReleaseDoubleArrayElements(jarg1, (jdouble *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1longlong(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  long long *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (long long *) jenv->GetLongArrayElements(jarg1, 0); 
  }
  inoutr_longlong(*arg1);
  {
    jenv->ReleaseLongArrayElements(jarg1, (jlong *)arg1, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1ulonglong(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  unsigned long long *arg1 = 0 ;
  unsigned long long temp1 ;
  
  (void)jenv;
  (void)jcls;
  {
    jobject bigint;
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    bigint = jenv->GetObjectArrayElement(jarg1, 0);
    if (!bigint) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array element null");
      return ;
    }
    clazz = jenv->GetObjectClass(bigint);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(bigint, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    temp1 = 0;
    for(i=0; i<sz; i++) {
      temp1 = (temp1 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    arg1 = &temp1;
  }
  inoutr_ulonglong(*arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(temp1>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->SetObjectArrayElement(jarg1, 0, bigint);
  }
  
}


SWIGEXPORT void JNICALL Java_li_1typemaps_li_1typemapsJNI_inoutr_1int2(JNIEnv *jenv, jclass jcls, jintArray jarg1, jintArray jarg2) {
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg1 = (int *) jenv->GetIntArrayElements(jarg1, 0); 
  }
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = (int *) jenv->GetIntArrayElements(jarg2, 0); 
  }
  inoutr_int2(*arg1,*arg2);
  {
    jenv->ReleaseIntArrayElements(jarg1, (jint *)arg1, 0); 
  }
  {
    jenv->ReleaseIntArrayElements(jarg2, (jint *)arg2, 0); 
  }
  
  
}


#ifdef __cplusplus
}
#endif

