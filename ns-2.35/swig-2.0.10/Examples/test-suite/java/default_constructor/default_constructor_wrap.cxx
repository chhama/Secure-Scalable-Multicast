/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



/* A class with a public default constructor */
class A {
public:
   A() { };
};

/* This class should get default constructor/destructors */
class AA : public A {
};

/* A class with a public constructor, but not default */

class B {
private:
   B() { }
public:
   B(int x, int y) { }
};

/* This class should get no default constructor, but a destructor */
class BB : public B {
};

/* A class with a protected constructor */
class C {
protected:
    C() { };
public:
};

/* This class does get a default constructor/destructor */
class CC : public C {
};


/* A class with a private constructor */
class D {
private:
   D() { };
public:
   void foo() { };
};

/* This class does not get a default constructor */
class DD: public D {
	
};

/* No default constructor.  A is okay, but D is not */
class AD: public A, public D {

};

/* This class has a default constructor because of optional arguments */
class E {
public:
   E(int x = 0, int y = 0) { }
};

/* This should get a default constructor */
class EE : public E {
};

/* This class should not get a default constructor. B doesn't have one */

class EB : public E, public B {

};

/* A class with a private destructor */

class F {
private:
   ~F() { }
public:
   void foo(int, int) { }
   friend void bar(F *);
   void destroy() { delete this; }
    
};

void bar(F *) { }

#if defined(_MSC_VER)
  #pragma warning(disable: 4624) // : destructor could not be generated because a base class destructor is inaccessible
#endif
class FFF : public F { 
};
#if defined(_MSC_VER)
  #pragma warning(default: 4624) // : destructor could not be generated because a base class destructor is inaccessible
#endif

/* A class with a protected destructor */
class G {
protected:
   ~G() { }

public:
  static void destroy(G *g) { delete g; }
};

class GG : public G { 
};

template <class T>
class HH_T 
{


public:

  HH_T(int i,int j)
  {
  }
  

protected:
  HH_T();
  
};
 
 


  class OSRSpatialReferenceShadow {
  private:
    OSRSpatialReferenceShadow();
  public:
  };

SWIGINTERN OSRSpatialReferenceShadow *new_OSRSpatialReferenceShadow__SWIG_0(char const *wkt=""){
      return 0;
    }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1A(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (A *)new A();
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1A(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  A *arg1 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(A **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1AA(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AA *)new AA();
  *(AA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1AA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AA *arg1 = (AA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AA **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1B(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  B *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (B *)new B(arg1,arg2);
  *(B **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1B(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  B *arg1 = (B *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(B **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1BB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BB *arg1 = (BB *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BB **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1C(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  C *arg1 = (C *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(C **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1CC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CC *)new CC();
  *(CC **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1CC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CC *arg1 = (CC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CC **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_D_1foo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  D *arg1 = (D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(D **)&jarg1; 
  (arg1)->foo();
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  D *arg1 = (D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1DD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DD *arg1 = (DD *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DD **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1AD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AD *arg1 = (AD *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AD **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1E_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  E *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (E *)new E(arg1,arg2);
  *(E **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1E_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  E *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (E *)new E(arg1);
  *(E **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1E_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  E *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (E *)new E();
  *(E **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1E(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  E *arg1 = (E *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(E **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1EE(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EE *)new EE();
  *(EE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1EE(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EE *arg1 = (EE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EE **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1EB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EB *arg1 = (EB *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EB **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_F_1foo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  F *arg1 = (F *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(F **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->foo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_bar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  F *arg1 = (F *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(F **)&jarg1; 
  bar(arg1);
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_F_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  F *arg1 = (F *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(F **)&jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1F(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  F *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (F *)new F();
  *(F **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1FFF(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FFF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FFF *)new FFF();
  *(FFF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_G_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  G *arg1 = (G *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(G **)&jarg1; 
  G::destroy(arg1);
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1G(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  G *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (G *)new G();
  *(G **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1GG(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GG *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GG *)new GG();
  *(GG **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1GG(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GG *arg1 = (GG *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GG **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1HH(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  HH_T< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (HH_T< int > *)new HH_T< int >(arg1,arg2);
  *(HH_T< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1HH(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HH_T< int > *arg1 = (HH_T< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HH_T< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1OSRSpatialReferenceShadow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OSRSpatialReferenceShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OSRSpatialReferenceShadow *)new_OSRSpatialReferenceShadow__SWIG_0((char const *)arg1);
  *(OSRSpatialReferenceShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_new_1OSRSpatialReferenceShadow_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OSRSpatialReferenceShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OSRSpatialReferenceShadow *)new_OSRSpatialReferenceShadow__SWIG_0();
  *(OSRSpatialReferenceShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1constructor_default_1constructorJNI_delete_1OSRSpatialReferenceShadow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OSRSpatialReferenceShadow **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_AA_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(A **)&baseptr = *(AA **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_BB_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(B **)&baseptr = *(BB **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_CC_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(C **)&baseptr = *(CC **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_DD_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(D **)&baseptr = *(DD **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_AD_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(A **)&baseptr = *(AD **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_EE_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(E **)&baseptr = *(EE **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_EB_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(E **)&baseptr = *(EB **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_FFF_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(F **)&baseptr = *(FFF **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_default_1constructor_default_1constructorJNI_GG_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(G **)&baseptr = *(GG **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

