/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdint.h>		// Use the C99 official header


  struct StdInts {
    int8_t   int8_member;
    int16_t  int16_member;
    int32_t  int32_member;
    int64_t  int64_member;
    uint8_t  uint8_member;
    uint16_t uint16_member;
    uint32_t uint32_member;
    uint64_t uint64_member;
  };

  int8_t   int8_td (int8_t  i) { return i; }
  int16_t  int16_td(int16_t i) { return i; }
  int32_t  int32_td(int32_t i) { return i; }
  int64_t  int64_td(int64_t i) { return i; }
  uint8_t  uint8_td (int8_t  i) { return i; }
  uint16_t uint16_td(int16_t i) { return i; }
  uint32_t uint32_td(int32_t i) { return i; }
  uint64_t uint64_td(int64_t i) { return i; }

  struct StdIntFasts {
    int_fast8_t   int_fast8_member;
    int_fast16_t  int_fast16_member;
    int_fast32_t  int_fast32_member;
    int_fast64_t  int_fast64_member;
    uint_fast8_t  uint_fast8_member;
    uint_fast16_t uint_fast16_member;
    uint_fast32_t uint_fast32_member;
    uint_fast64_t uint_fast64_member;
  };

  int_fast8_t   int_fast8_td (int_fast8_t  i) { return i; }
  int_fast16_t  int_fast16_td(int_fast16_t i) { return i; }
  int_fast32_t  int_fast32_td(int_fast32_t i) { return i; }
  int_fast64_t  int_fast64_td(int_fast64_t i) { return i; }
  uint_fast8_t  uint_fast8_td (int_fast8_t  i) { return i; }
  uint_fast16_t uint_fast16_td(int_fast16_t i) { return i; }
  uint_fast32_t uint_fast32_td(int_fast32_t i) { return i; }
  uint_fast64_t uint_fast64_td(int_fast64_t i) { return i; }

  struct StdIntLeasts {
    int_least8_t   int_least8_member;
    int_least16_t  int_least16_member;
    int_least32_t  int_least32_member;
    int_least64_t  int_least64_member;
    uint_least8_t  uint_least8_member;
    uint_least16_t uint_least16_member;
    uint_least32_t uint_least32_member;
    uint_least64_t uint_least64_member;
  };

  int_least8_t   int_least8_td (int_least8_t  i) { return i; }
  int_least16_t  int_least16_td(int_least16_t i) { return i; }
  int_least32_t  int_least32_td(int_least32_t i) { return i; }
  int_least64_t  int_least64_td(int_least64_t i) { return i; }
  uint_least8_t  uint_least8_td (int_least8_t  i) { return i; }
  uint_least16_t uint_least16_td(int_least16_t i) { return i; }
  uint_least32_t uint_least32_td(int_least32_t i) { return i; }
  uint_least64_t uint_least64_td(int_least64_t i) { return i; }



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1int8_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  StdInts *arg1 = (StdInts *) 0 ;
  int8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  arg2 = (int8_t)jarg2; 
  if (arg1) (arg1)->int8_member = arg2;
}


SWIGEXPORT jbyte JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1int8_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  StdInts *arg1 = (StdInts *) 0 ;
  int8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  result = (int8_t) ((arg1)->int8_member);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1int16_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  StdInts *arg1 = (StdInts *) 0 ;
  int16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  arg2 = (int16_t)jarg2; 
  if (arg1) (arg1)->int16_member = arg2;
}


SWIGEXPORT jshort JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1int16_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  StdInts *arg1 = (StdInts *) 0 ;
  int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  result = (int16_t) ((arg1)->int16_member);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1int32_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StdInts *arg1 = (StdInts *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->int32_member = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1int32_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StdInts *arg1 = (StdInts *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  result = (int32_t) ((arg1)->int32_member);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1int64_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  StdInts *arg1 = (StdInts *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->int64_member = arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1int64_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StdInts *arg1 = (StdInts *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  result = (int64_t) ((arg1)->int64_member);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1uint8_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  StdInts *arg1 = (StdInts *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->uint8_member = arg2;
}


SWIGEXPORT jshort JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1uint8_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  StdInts *arg1 = (StdInts *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  result = (uint8_t) ((arg1)->uint8_member);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1uint16_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StdInts *arg1 = (StdInts *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->uint16_member = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1uint16_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StdInts *arg1 = (StdInts *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  result = (uint16_t) ((arg1)->uint16_member);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1uint32_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  StdInts *arg1 = (StdInts *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->uint32_member = arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1uint32_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StdInts *arg1 = (StdInts *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  result = (uint32_t) ((arg1)->uint32_member);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1uint64_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  StdInts *arg1 = (StdInts *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->uint64_member = arg2;
}


SWIGEXPORT jobject JNICALL Java_li_1stdint_li_1stdintJNI_StdInts_1uint64_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  StdInts *arg1 = (StdInts *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdInts **)&jarg1; 
  result = (uint64_t) ((arg1)->uint64_member);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_new_1StdInts(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StdInts *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (StdInts *)new StdInts();
  *(StdInts **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_delete_1StdInts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StdInts *arg1 = (StdInts *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StdInts **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jbyte JNICALL Java_li_1stdint_li_1stdintJNI_int8_1td(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  jbyte jresult = 0 ;
  int8_t arg1 ;
  int8_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int8_t)jarg1; 
  result = (int8_t)int8_td(arg1);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1stdint_li_1stdintJNI_int16_1td(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jshort jresult = 0 ;
  int16_t arg1 ;
  int16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int16_t)jarg1; 
  result = (int16_t)int16_td(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1stdint_li_1stdintJNI_int32_1td(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int32_t arg1 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  result = (int32_t)int32_td(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_int64_1td(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  result = (int64_t)int64_td(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1stdint_li_1stdintJNI_uint8_1td(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  jshort jresult = 0 ;
  int8_t arg1 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int8_t)jarg1; 
  result = (uint8_t)uint8_td(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1stdint_li_1stdintJNI_uint16_1td(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jint jresult = 0 ;
  int16_t arg1 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int16_t)jarg1; 
  result = (uint16_t)uint16_td(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_uint32_1td(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  result = (uint32_t)uint32_td(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_li_1stdint_li_1stdintJNI_uint64_1td(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jobject jresult = 0 ;
  int64_t arg1 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  result = (uint64_t)uint64_td(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1int_1fast8_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  int_fast8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  arg2 = (int_fast8_t)jarg2; 
  if (arg1) (arg1)->int_fast8_member = arg2;
}


SWIGEXPORT jbyte JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1int_1fast8_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  int_fast8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  result = (int_fast8_t) ((arg1)->int_fast8_member);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1int_1fast16_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  int_fast16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  arg2 = (int_fast16_t)jarg2; 
  if (arg1) (arg1)->int_fast16_member = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1int_1fast16_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  int_fast16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  result = (int_fast16_t) ((arg1)->int_fast16_member);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1int_1fast32_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  int_fast32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  arg2 = (int_fast32_t)jarg2; 
  if (arg1) (arg1)->int_fast32_member = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1int_1fast32_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  int_fast32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  result = (int_fast32_t) ((arg1)->int_fast32_member);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1int_1fast64_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  int_fast64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  arg2 = (int_fast64_t)jarg2; 
  if (arg1) (arg1)->int_fast64_member = arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1int_1fast64_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  int_fast64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  result = (int_fast64_t) ((arg1)->int_fast64_member);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1uint_1fast8_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  uint_fast8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  arg2 = (uint_fast8_t)jarg2; 
  if (arg1) (arg1)->uint_fast8_member = arg2;
}


SWIGEXPORT jshort JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1uint_1fast8_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  uint_fast8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  result = (uint_fast8_t) ((arg1)->uint_fast8_member);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1uint_1fast16_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  uint_fast16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  arg2 = (uint_fast16_t)jarg2; 
  if (arg1) (arg1)->uint_fast16_member = arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1uint_1fast16_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  uint_fast16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  result = (uint_fast16_t) ((arg1)->uint_fast16_member);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1uint_1fast32_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  uint_fast32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  arg2 = (uint_fast32_t)jarg2; 
  if (arg1) (arg1)->uint_fast32_member = arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1uint_1fast32_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  uint_fast32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  result = (uint_fast32_t) ((arg1)->uint_fast32_member);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1uint_1fast64_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  uint_fast64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint_fast64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->uint_fast64_member = arg2;
}


SWIGEXPORT jobject JNICALL Java_li_1stdint_li_1stdintJNI_StdIntFasts_1uint_1fast64_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  uint_fast64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntFasts **)&jarg1; 
  result = (uint_fast64_t) ((arg1)->uint_fast64_member);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_new_1StdIntFasts(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StdIntFasts *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (StdIntFasts *)new StdIntFasts();
  *(StdIntFasts **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_delete_1StdIntFasts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StdIntFasts *arg1 = (StdIntFasts *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StdIntFasts **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jbyte JNICALL Java_li_1stdint_li_1stdintJNI_int_1fast8_1td(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  jbyte jresult = 0 ;
  int_fast8_t arg1 ;
  int_fast8_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_fast8_t)jarg1; 
  result = (int_fast8_t)int_fast8_td(arg1);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1stdint_li_1stdintJNI_int_1fast16_1td(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int_fast16_t arg1 ;
  int_fast16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_fast16_t)jarg1; 
  result = (int_fast16_t)int_fast16_td(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1stdint_li_1stdintJNI_int_1fast32_1td(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int_fast32_t arg1 ;
  int_fast32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_fast32_t)jarg1; 
  result = (int_fast32_t)int_fast32_td(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_int_1fast64_1td(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int_fast64_t arg1 ;
  int_fast64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_fast64_t)jarg1; 
  result = (int_fast64_t)int_fast64_td(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1stdint_li_1stdintJNI_uint_1fast8_1td(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  jshort jresult = 0 ;
  int_fast8_t arg1 ;
  uint_fast8_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_fast8_t)jarg1; 
  result = (uint_fast8_t)uint_fast8_td(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_uint_1fast16_1td(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int_fast16_t arg1 ;
  uint_fast16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_fast16_t)jarg1; 
  result = (uint_fast16_t)uint_fast16_td(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_uint_1fast32_1td(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int_fast32_t arg1 ;
  uint_fast32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_fast32_t)jarg1; 
  result = (uint_fast32_t)uint_fast32_td(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_li_1stdint_li_1stdintJNI_uint_1fast64_1td(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jobject jresult = 0 ;
  int_fast64_t arg1 ;
  uint_fast64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_fast64_t)jarg1; 
  result = (uint_fast64_t)uint_fast64_td(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1int_1least8_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  int_least8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  arg2 = (int_least8_t)jarg2; 
  if (arg1) (arg1)->int_least8_member = arg2;
}


SWIGEXPORT jbyte JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1int_1least8_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  int_least8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  result = (int_least8_t) ((arg1)->int_least8_member);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1int_1least16_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  int_least16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  arg2 = (int_least16_t)jarg2; 
  if (arg1) (arg1)->int_least16_member = arg2;
}


SWIGEXPORT jshort JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1int_1least16_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  int_least16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  result = (int_least16_t) ((arg1)->int_least16_member);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1int_1least32_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  int_least32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  arg2 = (int_least32_t)jarg2; 
  if (arg1) (arg1)->int_least32_member = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1int_1least32_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  int_least32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  result = (int_least32_t) ((arg1)->int_least32_member);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1int_1least64_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  int_least64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  arg2 = (int_least64_t)jarg2; 
  if (arg1) (arg1)->int_least64_member = arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1int_1least64_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  int_least64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  result = (int_least64_t) ((arg1)->int_least64_member);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1uint_1least8_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  uint_least8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  arg2 = (uint_least8_t)jarg2; 
  if (arg1) (arg1)->uint_least8_member = arg2;
}


SWIGEXPORT jshort JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1uint_1least8_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  uint_least8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  result = (uint_least8_t) ((arg1)->uint_least8_member);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1uint_1least16_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  uint_least16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  arg2 = (uint_least16_t)jarg2; 
  if (arg1) (arg1)->uint_least16_member = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1uint_1least16_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  uint_least16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  result = (uint_least16_t) ((arg1)->uint_least16_member);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1uint_1least32_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  uint_least32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  arg2 = (uint_least32_t)jarg2; 
  if (arg1) (arg1)->uint_least32_member = arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1uint_1least32_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  uint_least32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  result = (uint_least32_t) ((arg1)->uint_least32_member);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1uint_1least64_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  uint_least64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint_least64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->uint_least64_member = arg2;
}


SWIGEXPORT jobject JNICALL Java_li_1stdint_li_1stdintJNI_StdIntLeasts_1uint_1least64_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  uint_least64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StdIntLeasts **)&jarg1; 
  result = (uint_least64_t) ((arg1)->uint_least64_member);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_new_1StdIntLeasts(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StdIntLeasts *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (StdIntLeasts *)new StdIntLeasts();
  *(StdIntLeasts **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1stdint_li_1stdintJNI_delete_1StdIntLeasts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StdIntLeasts *arg1 = (StdIntLeasts *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StdIntLeasts **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jbyte JNICALL Java_li_1stdint_li_1stdintJNI_int_1least8_1td(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  jbyte jresult = 0 ;
  int_least8_t arg1 ;
  int_least8_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_least8_t)jarg1; 
  result = (int_least8_t)int_least8_td(arg1);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1stdint_li_1stdintJNI_int_1least16_1td(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jshort jresult = 0 ;
  int_least16_t arg1 ;
  int_least16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_least16_t)jarg1; 
  result = (int_least16_t)int_least16_td(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1stdint_li_1stdintJNI_int_1least32_1td(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int_least32_t arg1 ;
  int_least32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_least32_t)jarg1; 
  result = (int_least32_t)int_least32_td(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_int_1least64_1td(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int_least64_t arg1 ;
  int_least64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_least64_t)jarg1; 
  result = (int_least64_t)int_least64_td(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1stdint_li_1stdintJNI_uint_1least8_1td(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  jshort jresult = 0 ;
  int_least8_t arg1 ;
  uint_least8_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_least8_t)jarg1; 
  result = (uint_least8_t)uint_least8_td(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1stdint_li_1stdintJNI_uint_1least16_1td(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jint jresult = 0 ;
  int_least16_t arg1 ;
  uint_least16_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_least16_t)jarg1; 
  result = (uint_least16_t)uint_least16_td(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1stdint_li_1stdintJNI_uint_1least32_1td(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int_least32_t arg1 ;
  uint_least32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_least32_t)jarg1; 
  result = (uint_least32_t)uint_least32_td(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_li_1stdint_li_1stdintJNI_uint_1least64_1td(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jobject jresult = 0 ;
  int_least64_t arg1 ;
  uint_least64_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int_least64_t)jarg1; 
  result = (uint_least64_t)uint_least64_td(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


#ifdef __cplusplus
}
#endif

