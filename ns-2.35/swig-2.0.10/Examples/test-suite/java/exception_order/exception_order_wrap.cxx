/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#if defined(_MSC_VER)
  #pragma warning(disable: 4290) // C++ exception specification ignored except to indicate a function is not __declspec(nothrow)
#endif


  int efoovar;
  int foovar;
  const int cfoovar = 1;
  
  struct E1
  {
  };

  struct E2 
  {
  };

  struct E3 
  {
  };

  template <class T>
  struct ET 
  {
  };

  struct A 
  {
    static int sfoovar;
    static const int CSFOOVAR = 1;
    int foovar;
    int efoovar;

    /* caught by the user's throw definition */
    int foo() throw(E1) 
    {
      throw E1();
      return 0;     
    }
    
    int bar() throw(E2)
    {
      throw E2();
      return 0;     
    }
    
    /* caught by %postexception */
    int foobar()
    {
      throw E3();
      return 0;
    }


    int barfoo(int i)
    {
      if (i == 1) {
	throw E1();
      } else if (i == 2) {
	static E2 *ep = new E2();
	throw ep;
      } else if (i == 3) {
	throw ET<int>();
      } else  {
	throw ET<double>();
      }
      return 0;
    }
  };
  int A::sfoovar = 1;


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_exception_1order_exception_1orderJNI_efoovar_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      efoovar = arg1;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_exception_1order_exception_1orderJNI_efoovar_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)efoovar;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_exception_1order_exception_1orderJNI_foovar_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  foovar = arg1;
}


SWIGEXPORT jint JNICALL Java_exception_1order_exception_1orderJNI_foovar_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)foovar;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_exception_1order_exception_1orderJNI_cfoovar_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)cfoovar;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_exception_1order_exception_1orderJNI_new_1E1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  E1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (E1 *)new E1();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return 0; 
      };
    }
  }
  *(E1 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_exception_1order_exception_1orderJNI_delete_1E1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  E1 *arg1 = (E1 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(E1 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_exception_1order_exception_1orderJNI_new_1E2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  E2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (E2 *)new E2();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return 0; 
      };
    }
  }
  *(E2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_exception_1order_exception_1orderJNI_delete_1E2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  E2 *arg1 = (E2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(E2 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_exception_1order_exception_1orderJNI_new_1E3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  E3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (E3 *)new E3();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return 0; 
      };
    }
  }
  *(E3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_exception_1order_exception_1orderJNI_delete_1E3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  E3 *arg1 = (E3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(E3 **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_exception_1order_exception_1orderJNI_A_1sfoovar_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  A::sfoovar = arg1;
}


SWIGEXPORT jint JNICALL Java_exception_1order_exception_1orderJNI_A_1sfoovar_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)A::sfoovar;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_exception_1order_exception_1orderJNI_A_1CSFOOVAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)A::CSFOOVAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_exception_1order_exception_1orderJNI_A_1foovar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  A *arg1 = (A *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->foovar = arg2;
}


SWIGEXPORT jint JNICALL Java_exception_1order_exception_1orderJNI_A_1foovar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (int) ((arg1)->foovar);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_exception_1order_exception_1orderJNI_A_1efoovar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  A *arg1 = (A *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      if (arg1) (arg1)->efoovar = arg2;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_exception_1order_exception_1orderJNI_A_1efoovar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  {
    try {
      result = (int) ((arg1)->efoovar);
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_exception_1order_exception_1orderJNI_A_1foo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  {
    try {
      try {
        result = (int)(arg1)->foo();
      }
      catch(E1 &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ E1 exception thrown");
        return 0; 
      }
      
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_exception_1order_exception_1orderJNI_A_1bar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  {
    try {
      try {
        result = (int)(arg1)->bar();
      }
      catch(E2 &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ E2 exception thrown");
        return 0; 
      }
      
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_exception_1order_exception_1orderJNI_A_1foobar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  {
    try {
      result = (int)(arg1)->foobar();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_exception_1order_exception_1orderJNI_A_1barfoo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (int)(arg1)->barfoo(arg2);
      }
      catch(E1 &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ E1 exception thrown");
        return 0; 
      }
      catch(E2 *_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ E2 * exception thrown");
        return 0; 
      }
      catch(ET< int > &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ ET< int > exception thrown");
        return 0; 
      }
      catch(ET< double > &_e) {
        (void)_e;
        SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ ET< double > exception thrown");
        return 0; 
      }
      catch(...) {
        {
          SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
        };
      }
      
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_exception_1order_exception_1orderJNI_new_1A(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (A *)new A();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return 0; 
      };
    }
  }
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_exception_1order_exception_1orderJNI_delete_1A(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  A *arg1 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(A **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_exception_1order_exception_1orderJNI_new_1ET_1i(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ET< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (ET< int > *)new ET< int >();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return 0; 
      };
    }
  }
  *(ET< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_exception_1order_exception_1orderJNI_delete_1ET_1i(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ET< int > *arg1 = (ET< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ET< int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_exception_1order_exception_1orderJNI_new_1ET_1d(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ET< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (ET< double > *)new ET< double >();
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return 0; 
      };
    }
  }
  *(ET< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_exception_1order_exception_1orderJNI_delete_1ET_1d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ET< double > *arg1 = (ET< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ET< double > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "postcatch unknown"); return ; 
      };
    }
  }
}


#ifdef __cplusplus
}
#endif

