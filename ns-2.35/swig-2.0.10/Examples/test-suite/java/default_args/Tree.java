/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package default_args;

public class Tree {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Tree(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Tree obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        default_argsJNI.delete_Tree(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void chops(Tree.types type) {
    default_argsJNI.Tree_chops(swigCPtr, this, type.swigValue());
  }

  public void test(int x) {
    default_argsJNI.Tree_test__SWIG_0(swigCPtr, this, x);
  }

  public void test() {
    default_argsJNI.Tree_test__SWIG_1(swigCPtr, this);
  }

  public Tree() {
    this(default_argsJNI.new_Tree(), true);
  }

  public final static class types {
    public final static Tree.types Oak = new Tree.types("Oak");
    public final static Tree.types Fir = new Tree.types("Fir");
    public final static Tree.types Cedar = new Tree.types("Cedar");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static types swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + types.class + " with value " + swigValue);
    }

    private types(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private types(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private types(String swigName, types swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static types[] swigValues = { Oak, Fir, Cedar };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
