/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#if defined(_MSC_VER)
  #pragma warning(disable: 4290) // C++ exception specification ignored except to indicate a function is not __declspec(nothrow)
#endif


#include <string>


  #include <string>

  // Anonymous arguments
  int anonymous(int = 7771);
  int anonymous(int x) { return x; }

  // Bug [548272] Default arguments
  bool booltest(bool x = true) { return x; }

  // scoped enums
  enum flavor { BITTER, SWEET };
  class EnumClass {
    public:
      enum speed { FAST, SLOW };
      // Note: default values should be EnumClass::FAST and SWEET 
      bool blah(speed s = FAST, flavor f = SWEET) { return (s == FAST && f == SWEET); };
  };

  // casts
  const char * casts1(const char *m = (const char *) NULL) {
    char *ret = NULL; 
    if (m) { 
      ret = new char[strlen(m)+1];
      strcpy(ret, m);
    }
    return ret;
  }
  const char * casts2(const char *m = (const char *) "Hello") {
    char *ret = NULL; 
    if (m) { 
      ret = new char[strlen(m)+1];
      strcpy(ret, m);
    }
    return ret;
  }

  // char
  char chartest1(char c = 'x') { return c; }
  char chartest2(char c = '\0') { return c; }

  // namespaces
  namespace AType { 
    enum AType { NoType }; 
  } 
  void dummy(AType::AType aType = AType::NoType) {}
  namespace A { 
    namespace B { 
      int CONST_NUM = 10; 
    } 
    int afunction(int i = B::CONST_NUM) { return i; }
  } 

  // references
  int reftest1(const int &x = 42) { return x; }
  std::string reftest2(const std::string &x = "hello") { return x; }

  // enum scope
  class Tree {
    public:
      enum types {Oak, Fir, Cedar};
      void chops(enum types type) {}
      void test(int x = Oak + Fir + Cedar) {}
  };
  enum Tree::types chops(enum Tree::types type) { return type; }
 



  // Define a class
  class Foo {
    public:
      static int bar;
      static int spam;

      Foo(){}
     
      Foo(int x, int y = 0, int z = 0){}

      void meth(int x, int y = 0, int z = 0){}
    
      // Use a renamed member as a default argument.  SWIG has to resolve
      // bar to Foo::bar and not Foo::spam.  SWIG-1.3.11 got this wrong.
      // (Different default parameter wrapping in SWIG-1.3.23 ensures SWIG doesn't have to resolve these symbols).
      void method1(int x = bar) {}

      // Use unrenamed member as default
      void method2(int x = spam) {}

      // test the method itself being renamed
      void oldname(int x = 1234) {}
      void renameme(int x = 1234, double d=123.4) const {}
  };
  int Foo::bar = 1;
  int Foo::spam = 2;


  enum MyType { Val1, Val2 }; 

  class MyClass1 
  { 
    public: 
      MyClass1(MyType myType) {}
  }; 

  class MyClass2 
  { 
    public : 
      void set(MyClass1 cl1 = Val1) {}
      // This could have been written : set(MyClass1 cl1 = MyClass1(Val1)) 
      // But it works in C++ since there is a "conversion" constructor in  MyClass1. 
      void set2(MyClass1 cl1 = Val1) {}
  };


void exceptionspec(int a = -1) throw (int, const char*) {
  if (a == -1)
    throw "ciao";
  else
    throw a;
}
struct Except {
  Except(bool throwException, int a = -1) throw (int) {
    if (throwException)
      throw a;
  }
  void exspec(int a = 0) throw (int, const char*) {
    ::exceptionspec(a);
  }
};


namespace SpaceName {
  struct Statics {
    static int staticmethod(int a=10, int b=20, int c=30) { return a+b+c; }
  };
}


class Tricky {
  static int getDefault() { return 500; }
  enum { privatevalue = 200 };
  static const char charvalue;
public:
  int privatedefault(int val = privatevalue) { return val; }
  int protectedint(int val = intvalue) { return val; }
  double protecteddouble(double val = doublevalue) { return val; }
  int functiondefault(int val = Tricky::getDefault()) { return val; }
  char contrived(const char *c = &charvalue) { return *c; }
protected:
  static const int intvalue = 2000;
  static const double doublevalue;
};
const char Tricky::charvalue = 'X';
const double Tricky::doublevalue = 987.654;


// tests default argument which is a constructor call within namespace
// also tests default constructor (from defaulted parameter)
namespace Space {
struct Klass {
  int val;
  Klass(int val = -1) : val(val) {}
};
Klass constructorcall(const Klass& k = Klass()) { return k; }

}


struct ConstMethods {
  int coo(double d = 0.0) { return 10; }
  int coo(double d = 0.0) const { return 20; }
};


  extern "C" double cfunc1(double x,double p = 1) {
    return(x+p);
  }

  extern "C" {
    double cfunc2(double x,double p = 2) {
      return(x+p);
    }

    double cfunc3(double x,double p = 3) {
      return(x+p);
    }

    typedef struct Pointf { 
      double		x,y; 
    } Pointf;
  }


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_anonymous_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)anonymous(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_anonymous_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)anonymous();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_default_1args_default_1argsJNI_booltest_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jboolean jresult = 0 ;
  bool arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (bool)booltest(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_default_1args_default_1argsJNI_booltest_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)booltest();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_default_1args_default_1argsJNI_EnumClass_1blah_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  EnumClass *arg1 = (EnumClass *) 0 ;
  EnumClass::speed arg2 ;
  flavor arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnumClass **)&jarg1; 
  arg2 = (EnumClass::speed)jarg2; 
  arg3 = (flavor)jarg3; 
  result = (bool)(arg1)->blah(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_default_1args_default_1argsJNI_EnumClass_1blah_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  EnumClass *arg1 = (EnumClass *) 0 ;
  EnumClass::speed arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnumClass **)&jarg1; 
  arg2 = (EnumClass::speed)jarg2; 
  result = (bool)(arg1)->blah(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_default_1args_default_1argsJNI_EnumClass_1blah_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  EnumClass *arg1 = (EnumClass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EnumClass **)&jarg1; 
  result = (bool)(arg1)->blah();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_new_1EnumClass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EnumClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (EnumClass *)new EnumClass();
  *(EnumClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_delete_1EnumClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EnumClass *arg1 = (EnumClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EnumClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_default_1args_default_1argsJNI_casts1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *)casts1((char const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_default_1args_default_1argsJNI_casts1_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)casts1();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_default_1args_default_1argsJNI_casts2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *)casts2((char const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_default_1args_default_1argsJNI_casts2_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)casts2();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_default_1args_default_1argsJNI_chartest1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jchar jarg1) {
  jchar jresult = 0 ;
  char arg1 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (char)jarg1; 
  result = (char)chartest1(arg1);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_default_1args_default_1argsJNI_chartest1_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jchar jresult = 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  result = (char)chartest1();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_default_1args_default_1argsJNI_chartest2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jchar jarg1) {
  jchar jresult = 0 ;
  char arg1 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (char)jarg1; 
  result = (char)chartest2(arg1);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_default_1args_default_1argsJNI_chartest2_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jchar jresult = 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  result = (char)chartest2();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_dummy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  AType::AType arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (AType::AType)jarg1; 
  dummy(arg1);
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_dummy_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  dummy();
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_CONST_1NUM_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  A::B::CONST_NUM = arg1;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_CONST_1NUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)A::B::CONST_NUM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_afunction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)A::afunction(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_afunction_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)A::afunction();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_reftest1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int *arg1 = 0 ;
  int temp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  result = (int)reftest1((int const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_reftest1_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)reftest1();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_default_1args_default_1argsJNI_reftest2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = reftest2((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_default_1args_default_1argsJNI_reftest2_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = reftest2();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Tree_1chops(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  enum Tree::types arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tree **)&jarg1; 
  arg2 = (enum Tree::types)jarg2; 
  (arg1)->chops(arg2);
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Tree_1test_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Tree *arg1 = (Tree *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tree **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->test(arg2);
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Tree_1test_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Tree *arg1 = (Tree *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tree **)&jarg1; 
  (arg1)->test();
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_new_1Tree(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Tree *)new Tree();
  *(Tree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_delete_1Tree(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tree *arg1 = (Tree *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tree **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_chops(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum Tree::types arg1 ;
  enum Tree::types result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum Tree::types)jarg1; 
  result = (enum Tree::types)chops(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Foo_1bar2_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  Foo::bar = arg1;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_Foo_1bar2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Foo::bar;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Foo_1spam_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  Foo::spam = arg1;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_Foo_1spam_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Foo::spam;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_new_1Foo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo *)new Foo();
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Foo_1method1_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->method1(arg2);
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Foo_1method1_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  (arg1)->method1();
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Foo_1method2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->method2(arg2);
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Foo_1method2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  (arg1)->method2();
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Foo_1newname_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->oldname(arg2);
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Foo_1newname_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  (arg1)->oldname();
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Foo_1renamed3arg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  ((Foo const *)arg1)->renameme(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Foo_1renamed2arg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  ((Foo const *)arg1)->renameme(arg2);
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Foo_1renamed1arg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  ((Foo const *)arg1)->renameme();
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_delete_1Foo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_new_1MyClass1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  MyType arg1 ;
  MyClass1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (MyType)jarg1; 
  result = (MyClass1 *)new MyClass1(arg1);
  *(MyClass1 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_delete_1MyClass1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MyClass1 *arg1 = (MyClass1 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MyClass1 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_MyClass2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MyClass2 *arg1 = (MyClass2 *) 0 ;
  MyClass1 arg2 = (MyClass1) Val1 ;
  MyClass1 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MyClass2 **)&jarg1; 
  argp2 = *(MyClass1 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null MyClass1");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set(arg2);
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_MyClass2_1set2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MyClass2 *arg1 = (MyClass2 *) 0 ;
  SwigValueWrapper< MyClass1 > arg2 ;
  MyClass1 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MyClass2 **)&jarg1; 
  argp2 = *(MyClass1 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null MyClass1");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set2(arg2);
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_MyClass2_1set2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MyClass2 *arg1 = (MyClass2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MyClass2 **)&jarg1; 
  (arg1)->set2();
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_new_1MyClass2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MyClass2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MyClass2 *)new MyClass2();
  *(MyClass2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_delete_1MyClass2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MyClass2 *arg1 = (MyClass2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MyClass2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_exceptionspec_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  try {
    exceptionspec(arg1);
  }
  catch(int &_e) {
    char error_msg[256];
    sprintf(error_msg, "C++ int exception thrown, value: %d", _e);
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, error_msg);
    return ; 
  }
  catch(char const *_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, _e);
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_exceptionspec_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  try {
    exceptionspec();
  }
  catch(int &_e) {
    char error_msg[256];
    sprintf(error_msg, "C++ int exception thrown, value: %d", _e);
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, error_msg);
    return ; 
  }
  catch(char const *_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, _e);
    return ; 
  }
  
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_new_1Except_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  int arg2 ;
  Except *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (int)jarg2; 
  try {
    result = (Except *)new Except(arg1,arg2);
  }
  catch(int &_e) {
    char error_msg[256];
    sprintf(error_msg, "C++ int exception thrown, value: %d", _e);
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, error_msg);
    return 0; 
  }
  
  *(Except **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_new_1Except_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  Except *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  try {
    result = (Except *)new Except(arg1);
  }
  catch(int &_e) {
    char error_msg[256];
    sprintf(error_msg, "C++ int exception thrown, value: %d", _e);
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, error_msg);
    return 0; 
  }
  
  *(Except **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Except_1exspec_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Except *arg1 = (Except *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Except **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    (arg1)->exspec(arg2);
  }
  catch(int &_e) {
    char error_msg[256];
    sprintf(error_msg, "C++ int exception thrown, value: %d", _e);
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, error_msg);
    return ; 
  }
  catch(char const *_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, _e);
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Except_1exspec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Except *arg1 = (Except *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Except **)&jarg1; 
  try {
    (arg1)->exspec();
  }
  catch(int &_e) {
    char error_msg[256];
    sprintf(error_msg, "C++ int exception thrown, value: %d", _e);
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, error_msg);
    return ; 
  }
  catch(char const *_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, _e);
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_delete_1Except(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Except *arg1 = (Except *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Except **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_Statics_1staticmethod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)SpaceName::Statics::staticmethod(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_Statics_1staticmethod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)SpaceName::Statics::staticmethod(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_Statics_1staticmethod_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)SpaceName::Statics::staticmethod(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_Statics_1staticmethod_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)SpaceName::Statics::staticmethod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_new_1Statics(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SpaceName::Statics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SpaceName::Statics *)new SpaceName::Statics();
  *(SpaceName::Statics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_delete_1Statics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SpaceName::Statics *arg1 = (SpaceName::Statics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SpaceName::Statics **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_Tricky_1privatedefault_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Tricky *arg1 = (Tricky *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tricky **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->privatedefault(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_Tricky_1privatedefault_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tricky *arg1 = (Tricky *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tricky **)&jarg1; 
  result = (int)(arg1)->privatedefault();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_Tricky_1protectedint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Tricky *arg1 = (Tricky *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tricky **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->protectedint(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_Tricky_1protectedint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tricky *arg1 = (Tricky *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tricky **)&jarg1; 
  result = (int)(arg1)->protectedint();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_default_1args_default_1argsJNI_Tricky_1protecteddouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jdouble jresult = 0 ;
  Tricky *arg1 = (Tricky *) 0 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tricky **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (double)(arg1)->protecteddouble(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_default_1args_default_1argsJNI_Tricky_1protecteddouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Tricky *arg1 = (Tricky *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tricky **)&jarg1; 
  result = (double)(arg1)->protecteddouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_Tricky_1functiondefault_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Tricky *arg1 = (Tricky *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tricky **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->functiondefault(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_Tricky_1functiondefault_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tricky *arg1 = (Tricky *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tricky **)&jarg1; 
  result = (int)(arg1)->functiondefault();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_default_1args_default_1argsJNI_Tricky_1contrived_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jchar jresult = 0 ;
  Tricky *arg1 = (Tricky *) 0 ;
  char *arg2 = (char *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tricky **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char)(arg1)->contrived((char const *)arg2);
  jresult = (jchar)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_default_1args_default_1argsJNI_Tricky_1contrived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  Tricky *arg1 = (Tricky *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tricky **)&jarg1; 
  result = (char)(arg1)->contrived();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_new_1Tricky(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tricky *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Tricky *)new Tricky();
  *(Tricky **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_delete_1Tricky(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tricky *arg1 = (Tricky *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tricky **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Klass_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Klass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->val = arg2;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_Klass_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Klass **)&jarg1; 
  result = (int) ((arg1)->val);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_new_1Klass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (Space::Klass *)new Space::Klass(arg1);
  *(Space::Klass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_new_1Klass_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::Klass *)new Space::Klass();
  *(Space::Klass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_delete_1Klass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::Klass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_constructorcall_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Klass *arg1 = 0 ;
  Space::Klass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Klass **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Klass const & reference is null");
    return 0;
  } 
  result = Space::constructorcall((Space::Klass const &)*arg1);
  *(Space::Klass **)&jresult = new Space::Klass((const Space::Klass &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_constructorcall_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Klass result;
  
  (void)jenv;
  (void)jcls;
  result = Space::constructorcall();
  *(Space::Klass **)&jresult = new Space::Klass((const Space::Klass &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_ConstMethods_1coo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  ConstMethods *arg1 = (ConstMethods *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConstMethods **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)((ConstMethods const *)arg1)->coo(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_default_1args_default_1argsJNI_ConstMethods_1coo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ConstMethods *arg1 = (ConstMethods *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConstMethods **)&jarg1; 
  result = (int)((ConstMethods const *)arg1)->coo();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_new_1ConstMethods(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ConstMethods *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ConstMethods *)new ConstMethods();
  *(ConstMethods **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_delete_1ConstMethods(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConstMethods *arg1 = (ConstMethods *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConstMethods **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_default_1args_default_1argsJNI_cfunc1(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 = (double) 1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)cfunc1(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_default_1args_default_1argsJNI_cfunc2(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 = (double) 2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)cfunc2(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_default_1args_default_1argsJNI_cfunc3(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  double arg1 ;
  double arg2 = (double) 3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)cfunc3(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Pointf_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Pointf *arg1 = (Pointf *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Pointf **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jdouble JNICALL Java_default_1args_default_1argsJNI_Pointf_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Pointf *arg1 = (Pointf *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Pointf **)&jarg1; 
  result = (double) ((arg1)->x);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_Pointf_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Pointf *arg1 = (Pointf *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Pointf **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jdouble JNICALL Java_default_1args_default_1argsJNI_Pointf_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Pointf *arg1 = (Pointf *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Pointf **)&jarg1; 
  result = (double) ((arg1)->y);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_default_1args_default_1argsJNI_new_1Pointf(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Pointf *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Pointf *)new Pointf();
  *(Pointf **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_default_1args_default_1argsJNI_delete_1Pointf(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Pointf *arg1 = (Pointf *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Pointf **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

