/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



enum { AnonEnum1, AnonEnum2 = 100 };
enum { ReallyAnInteger = 200 };
//enum { AnonEnum3, AnonEnum4 } instance;
namespace AnonSpace {
  enum { AnonSpaceEnum1, AnonSpaceEnum2 = 300 };
  struct AnonStruct {
    enum { AnonStructEnum1, AnonStructEnum2 = 400 };
  };
}


enum colour { red=-1, blue, green = 10 };
colour colourTest1(colour e) { return e; }
enum colour colourTest2(enum colour e) { return e; }
const colour colourTest3(const colour e) { return e; }
const enum colour colourTest4(const enum colour e) { return e; }

colour myColour;

struct SpeedClass {
  enum speed { slow=10, medium=20, fast=30, lightning };
  typedef enum speed speedtd1;

  int                           speedTest0(int s) { return s; }
  speed                         speedTest1(speed s) { return s; }
  enum speed                    speedTest2(enum speed s) { return s; }
  const speed                   speedTest3(const speed s) { return s; }
  const enum speed              speedTest4(const enum speed s) { return s; }
  speedtd1                      speedTest5(speedtd1 s) { return s; }
  const speedtd1                speedTest6(const speedtd1 s) { return s; }
  const speed &                 speedTest7(const speed &s) { return s; }
  const enum speed &            speedTest8(const enum speed &s) { return s; }

  const colour myColour2;
  speedtd1 mySpeedtd1;
  SpeedClass() : myColour2(red), mySpeedtd1(slow) { }
private:
  SpeedClass& operator=(const SpeedClass&);
};

int                            speedTest0(int s) { return s; }
SpeedClass::speed              speedTest1(SpeedClass::speed s) { return s; }
enum SpeedClass::speed         speedTest2(enum SpeedClass::speed s) { return s; }
const SpeedClass::speed        speedTest3(const SpeedClass::speed s) { return s; }
const enum SpeedClass::speed   speedTest4(const enum SpeedClass::speed s) { return s; }
const SpeedClass::speed &      speedTest5(const SpeedClass::speed &s) { return s; }


typedef enum { NamedAnon1, NamedAnon2 } namedanon;

namedanon                       namedanonTest1(namedanon e) { return e; } 

typedef enum twonamestag { TwoNames1, TwoNames2, TwoNames3 = 33 } twonames;

twonames                        twonamesTest1(twonames e) { return e; } 
twonamestag                     twonamesTest2(twonamestag e) { return e; } 
enum twonamestag                twonamesTest3(enum twonamestag e) { return e; } 

struct TwoNamesStruct {
  typedef enum twonamestag { TwoNamesStruct1, TwoNamesStruct2 } twonames;
  twonames                      twonamesTest1(twonames e) { return e; } 
  twonamestag                   twonamesTest2(twonamestag e) { return e; } 
  enum twonamestag              twonamesTest3(enum twonamestag e) { return e; } 
};

namespace AnonSpace{
  typedef enum { NamedAnonSpace1, NamedAnonSpace2 } namedanonspace;
  namedanonspace                namedanonspaceTest1(namedanonspace e) { return e; } 
  AnonSpace::namedanonspace     namedanonspaceTest2(AnonSpace::namedanonspace e) { return e; } 
}
AnonSpace::namedanonspace       namedanonspaceTest3(AnonSpace::namedanonspace e) { return e; } 
using namespace AnonSpace;
namedanonspace                  namedanonspaceTest4(namedanonspace e) { return e; } 


template<typename T> struct TemplateClass {
  enum scientists { einstein, galileo = 10 }; 
  typedef enum scientists scientiststd1;
  typedef scientists scientiststd2;
  typedef scientiststd1 scientiststd3;
  scientists                                scientistsTest1(scientists e) { return e; }
  enum scientists                           scientistsTest2(enum scientists e) { return e; }
  const scientists                          scientistsTest3(const scientists e) { return e; }
  const enum scientists                     scientistsTest4(const enum scientists e) { return e; }
  typename TemplateClass<T>::scientists     scientistsTest5(typename TemplateClass<T>::scientists e) { return e; }
  const typename TemplateClass<T>::scientists        scientistsTest6(const typename TemplateClass<T>::scientists e) { return e; }
  enum TemplateClass<T>::scientists         scientistsTest7(enum TemplateClass<T>::scientists e) { return e; }
  const enum TemplateClass<T>::scientists   scientistsTest8(const enum TemplateClass<T>::scientists e) { return e; }
  typename TemplateClass::scientists        scientistsTest9(typename TemplateClass::scientists e) { return e; }
//  enum TemplateClass::scientists            scientistsTestA(enum TemplateClass::scientists e) { return e; }
  const typename TemplateClass::scientists  scientistsTestB(const typename TemplateClass::scientists e) { return e; }
//  const enum TemplateClass::scientists      scientistsTestC(const enum TemplateClass::scientists e) { return e; }
  scientiststd1                             scientistsTestD(scientiststd1 e) { return e; }
  scientiststd2                             scientistsTestE(scientiststd2 e) { return e; }
  scientiststd3                             scientistsTestF(scientiststd3 e) { return e; }
  typename TemplateClass<T>::scientiststd1  scientistsTestG(typename TemplateClass<T>::scientiststd1 e) { return e; }
  typename TemplateClass<T>::scientiststd2  scientistsTestH(typename TemplateClass<T>::scientiststd2 e) { return e; }
  typename TemplateClass<T>::scientiststd3  scientistsTestI(typename TemplateClass<T>::scientiststd3 e) { return e; }
  const scientists &                        scientistsTestJ(const scientists &e) { return e; }
};

TemplateClass<int>::scientists              scientistsTest1(TemplateClass<int>::scientists e) { return e; }
const TemplateClass<int>::scientists        scientistsTest2(const TemplateClass<int>::scientists e) { return e; }
enum TemplateClass<int>::scientists         scientistsTest3(enum TemplateClass<int>::scientists e) { return e; }
const enum TemplateClass<int>::scientists   scientistsTest4(const enum TemplateClass<int>::scientists e) { return e; }
TemplateClass<int>::scientiststd1           scientistsTest5(TemplateClass<int>::scientiststd1 e) { return e; }
TemplateClass<int>::scientiststd2           scientistsTest6(TemplateClass<int>::scientiststd2 e) { return e; }
TemplateClass<int>::scientiststd3           scientistsTest7(TemplateClass<int>::scientiststd3 e) { return e; }
const TemplateClass<int>::scientiststd3 &   scientistsTest8(const TemplateClass<int>::scientiststd3 &e) { return e; }


namespace Name {
template<typename T> struct TClass {
  enum scientists { faraday, bell = 20 }; 
  typedef enum scientists scientiststd1;
  typedef scientists scientiststd2;
  typedef scientiststd1 scientiststd3;
  scientists                                scientistsNameTest1(scientists e) { return e; }
  enum scientists                           scientistsNameTest2(enum scientists e) { return e; }
  const scientists                          scientistsNameTest3(const scientists e) { return e; }
  const enum scientists                     scientistsNameTest4(const enum scientists e) { return e; }
  typename TClass<T>::scientists            scientistsNameTest5(typename TClass<T>::scientists e) { return e; }
  const typename TClass<T>::scientists      scientistsNameTest6(const typename TClass<T>::scientists e) { return e; }
  enum TClass<T>::scientists                scientistsNameTest7(enum TClass<T>::scientists e) { return e; }
  const enum TClass<T>::scientists          scientistsNameTest8(const enum TClass<T>::scientists e) { return e; }
  typename TClass::scientists               scientistsNameTest9(typename TClass::scientists e) { return e; }
//  enum TClass::scientists                   scientistsNameTestA(enum TClass::scientists e) { return e; }
  const typename TClass::scientists         scientistsNameTestB(const typename TClass::scientists e) { return e; }
//  const enum TClass::scientists             scientistsNameTestC(const enum TClass::scientists e) { return e; }
  scientiststd1                             scientistsNameTestD(scientiststd1 e) { return e; }
  scientiststd2                             scientistsNameTestE(scientiststd2 e) { return e; }
  scientiststd3                             scientistsNameTestF(scientiststd3 e) { return e; }
  typename TClass<T>::scientiststd1         scientistsNameTestG(typename TClass<T>::scientiststd1 e) { return e; }
  typename TClass<T>::scientiststd2         scientistsNameTestH(typename TClass<T>::scientiststd2 e) { return e; }
  typename TClass<T>::scientiststd3         scientistsNameTestI(typename TClass<T>::scientiststd3 e) { return e; }

  typename Name::TClass<T>::scientists      scientistsNameSpaceTest1(typename Name::TClass<T>::scientists e) { return e; }
  const typename Name::TClass<T>::scientists         scientistsNameSpaceTest2(const typename Name::TClass<T>::scientists e) { return e; }
  enum Name::TClass<T>::scientists          scientistsNameSpaceTest3(enum Name::TClass<T>::scientists e) { return e; }
  const enum Name::TClass<T>::scientists    scientistsNameSpaceTest4(const enum Name::TClass<T>::scientists e) { return e; }
  typename Name::TClass<T>::scientiststd1   scientistsNameSpaceTest5(typename Name::TClass<T>::scientiststd1 e) { return e; }
  typename Name::TClass<T>::scientiststd2   scientistsNameSpaceTest6(typename Name::TClass<T>::scientiststd2 e) { return e; }
  typename Name::TClass<T>::scientiststd3   scientistsNameSpaceTest7(typename Name::TClass<T>::scientiststd3 e) { return e; }

  // Test TemplateClass::scientists rather then TClass::scientists
  ::TemplateClass<int>::scientists              scientistsOtherTest1(::TemplateClass<int>::scientists e) { return e; }
  const ::TemplateClass<int>::scientists        scientistsOtherTest2(const ::TemplateClass<int>::scientists e) { return e; }
  enum ::TemplateClass<int>::scientists         scientistsOtherTest3(enum ::TemplateClass<int>::scientists e) { return e; }
  const enum ::TemplateClass<int>::scientists   scientistsOtherTest4(const enum ::TemplateClass<int>::scientists e) { return e; }
  ::TemplateClass<int>::scientiststd1           scientistsOtherTest5(::TemplateClass<int>::scientiststd1 e) { return e; }
  ::TemplateClass<int>::scientiststd2           scientistsOtherTest6(::TemplateClass<int>::scientiststd2 e) { return e; }
  ::TemplateClass<int>::scientiststd3           scientistsOtherTest7(::TemplateClass<int>::scientiststd3 e) { return e; }
};

TClass<int>::scientists                     scientistsNameTest1(TClass<int>::scientists e) { return e; }
const TClass<int>::scientists               scientistsNameTest2(const TClass<int>::scientists e) { return e; }
enum TClass<int>::scientists                scientistsNameTest3(enum TClass<int>::scientists e) { return e; }
const enum TClass<int>::scientists          scientistsNameTest4(const enum TClass<int>::scientists e) { return e; }
TClass<int>::scientiststd1                  scientistsNameTest5(TClass<int>::scientiststd1 e) { return e; }
TClass<int>::scientiststd2                  scientistsNameTest6(TClass<int>::scientiststd2 e) { return e; }
TClass<int>::scientiststd3                  scientistsNameTest7(TClass<int>::scientiststd3 e) { return e; }

Name::TClass<int>::scientists               scientistsNameSpaceTest1(Name::TClass<int>::scientists e) { return e; }
const Name::TClass<int>::scientists         scientistsNameSpaceTest2(const Name::TClass<int>::scientists e) { return e; }
enum Name::TClass<int>::scientists          scientistsNameSpaceTest3(enum Name::TClass<int>::scientists e) { return e; }
const enum Name::TClass<int>::scientists    scientistsNameSpaceTest4(const enum Name::TClass<int>::scientists e) { return e; }
Name::TClass<int>::scientiststd1            scientistsNameSpaceTest5(Name::TClass<int>::scientiststd1 e) { return e; }
Name::TClass<int>::scientiststd2            scientistsNameSpaceTest6(Name::TClass<int>::scientiststd2 e) { return e; }
Name::TClass<int>::scientiststd3            scientistsNameSpaceTest7(Name::TClass<int>::scientiststd3 e) { return e; }
}

Name::TClass<int>::scientists               scientistsNameSpaceTest8(Name::TClass<int>::scientists e) { return e; }
const Name::TClass<int>::scientists         scientistsNameSpaceTest9(const Name::TClass<int>::scientists e) { return e; }
enum Name::TClass<int>::scientists          scientistsNameSpaceTestA(enum Name::TClass<int>::scientists e) { return e; }
const enum Name::TClass<int>::scientists    scientistsNameSpaceTestB(const enum Name::TClass<int>::scientists e) { return e; }
Name::TClass<int>::scientiststd1            scientistsNameSpaceTestC(Name::TClass<int>::scientiststd1 e) { return e; }
Name::TClass<int>::scientiststd2            scientistsNameSpaceTestD(Name::TClass<int>::scientiststd2 e) { return e; }
Name::TClass<int>::scientiststd3            scientistsNameSpaceTestE(Name::TClass<int>::scientiststd3 e) { return e; }

using namespace Name;
TClass<int>::scientists                     scientistsNameSpaceTestF(TClass<int>::scientists e) { return e; }
const TClass<int>::scientists               scientistsNameSpaceTestG(const TClass<int>::scientists e) { return e; }
enum TClass<int>::scientists                scientistsNameSpaceTestH(enum TClass<int>::scientists e) { return e; }
const enum TClass<int>::scientists          scientistsNameSpaceTestI(const enum TClass<int>::scientists e) { return e; }
TClass<int>::scientiststd1                  scientistsNameSpaceTestJ(TClass<int>::scientiststd1 e) { return e; }
TClass<int>::scientiststd2                  scientistsNameSpaceTestK(TClass<int>::scientiststd2 e) { return e; }
TClass<int>::scientiststd3                  scientistsNameSpaceTestL(TClass<int>::scientiststd3 e) { return e; }



enum old_name { argh, eek = -1 };
typedef old_name old_nametd;
old_name                            renameTest1(old_name e) { return e; }
old_nametd                          renameTest2(old_nametd e) { return e; }

struct OldNameStruct {
  enum enumeration {whizz, kerboom, pop};
  enumeration                       renameTest1(enumeration e) { return e; }
  OldNameStruct::enumeration        renameTest2(OldNameStruct::enumeration e) { return e; }

  enum simple {simple1};
  typedef enum doublenametag {doublename1} doublename;
  typedef enum {singlename1} singlename;

  simple                            renameTest3(simple e) { return e; }
  doublename                        renameTest4(doublename e) { return e; }
  doublenametag                     renameTest5(doublenametag e) { return e; }
  singlename                        renameTest6(singlename e) { return e; }
};

OldNameStruct::enumeration          renameTest3(OldNameStruct::enumeration e) { return e; }
OldNameStruct::simple               renameTest4(OldNameStruct::simple e) { return e; }
OldNameStruct::doublename           renameTest5(OldNameStruct::doublename e) { return e; }
OldNameStruct::doublenametag        renameTest6(OldNameStruct::doublenametag e) { return e; }
OldNameStruct::singlename           renameTest7(OldNameStruct::singlename e) { return e; }


struct TreesClass {
  enum trees {oak, fir, pine };
  typedef enum trees treestd1;
  typedef trees treestd2;
  typedef treestd1 treestd3;
  typedef TreesClass::trees treestd4;
  typedef treestd1 treestd5;

  trees                             treesTest1(trees e) { return e; }
  treestd1                          treesTest2(treestd1 e) { return e; }
  treestd2                          treesTest3(treestd2 e) { return e; }
  treestd3                          treesTest4(treestd3 e) { return e; }
  treestd4                          treesTest5(treestd4 e) { return e; }
  treestd5                          treesTest6(treestd5 e) { return e; }
  const trees                       treesTest7(const trees e) { return e; }
  const treestd1                    treesTest8(const treestd1 e) { return e; }
  const treestd2                    treesTest9(const treestd2 e) { return e; }
  const treestd3                    treesTestA(const treestd3 e) { return e; }
  const treestd4                    treesTestB(const treestd4 e) { return e; }
  const treestd5                    treesTestC(const treestd5 e) { return e; }
  TreesClass::trees                 treesTestD(TreesClass::trees e) { return e; }
  TreesClass::treestd1              treesTestE(TreesClass::treestd1 e) { return e; }
  TreesClass::treestd2              treesTestF(TreesClass::treestd2 e) { return e; }
  TreesClass::treestd3              treesTestG(TreesClass::treestd3 e) { return e; }
  TreesClass::treestd4              treesTestH(TreesClass::treestd4 e) { return e; }
  TreesClass::treestd5              treesTestI(TreesClass::treestd5 e) { return e; }
  const TreesClass::trees           treesTestJ(const TreesClass::trees e) { return e; }
  const TreesClass::treestd1        treesTestK(const TreesClass::treestd1 e) { return e; }
  const TreesClass::treestd2        treesTestL(const TreesClass::treestd2 e) { return e; }
  const TreesClass::treestd3        treesTestM(const TreesClass::treestd3 e) { return e; }
  const TreesClass::treestd4        treesTestN(const TreesClass::treestd4 e) { return e; }
  const TreesClass::treestd5        treesTestO(const TreesClass::treestd5 e) { return e; }
};

TreesClass::trees                   treesTest1(TreesClass::trees e) { return e; }
TreesClass::treestd1                treesTest2(TreesClass::treestd1 e) { return e; }
TreesClass::treestd2                treesTest3(TreesClass::treestd2 e) { return e; }
TreesClass::treestd3                treesTest4(TreesClass::treestd3 e) { return e; }
TreesClass::treestd4                treesTest5(TreesClass::treestd4 e) { return e; }
TreesClass::treestd5                treesTest6(TreesClass::treestd5 e) { return e; }
const TreesClass::trees             treesTest7(const TreesClass::trees e) { return e; }
const TreesClass::treestd1          treesTest8(const TreesClass::treestd1 e) { return e; }
const TreesClass::treestd2          treesTest9(const TreesClass::treestd2 e) { return e; }
const TreesClass::treestd3          treesTestA(const TreesClass::treestd3 e) { return e; }
const TreesClass::treestd4          treesTestB(const TreesClass::treestd4 e) { return e; }
const TreesClass::treestd5          treesTestC(const TreesClass::treestd5 e) { return e; }

typedef enum TreesClass::trees treesglobaltd1;
typedef TreesClass::trees treesglobaltd2;
typedef TreesClass::treestd1 treesglobaltd3;
typedef TreesClass::treestd2 treesglobaltd4;
typedef treesglobaltd4 treesglobaltd5;

treesglobaltd1                      treesTestD(treesglobaltd1 e) { return e; }
treesglobaltd2                      treesTestE(treesglobaltd2 e) { return e; }
treesglobaltd3                      treesTestF(treesglobaltd3 e) { return e; }
treesglobaltd4                      treesTestG(treesglobaltd4 e) { return e; }
treesglobaltd5                      treesTestH(treesglobaltd5 e) { return e; }
const treesglobaltd1                treesTestI(const treesglobaltd1 e) { return e; }
const treesglobaltd2                treesTestJ(const treesglobaltd2 e) { return e; }
const treesglobaltd3                treesTestK(const treesglobaltd3 e) { return e; }
const treesglobaltd4                treesTestL(const treesglobaltd4 e) { return e; }
const treesglobaltd5                treesTestM(const treesglobaltd5 e) { return e; }

typedef const enum TreesClass::trees treesglobaltd6;
typedef const TreesClass::trees treesglobaltd7;
typedef const TreesClass::treestd1 treesglobaltd8;
typedef const TreesClass::treestd2 treesglobaltd9;
typedef const treesglobaltd4 treesglobaltdA;

//treesglobaltd6                      treesTestN(treesglobaltd6 e) { return e; } // casting using an int instead of treesglobaltd6
treesglobaltd7                      treesTestO(treesglobaltd7 e) { return e; }
treesglobaltd8                      treesTestP(treesglobaltd8 e) { return e; }
treesglobaltd9                      treesTestQ(treesglobaltd9 e) { return e; }
treesglobaltdA                      treesTestR(treesglobaltdA e) { return e; }

namespace curly {
  namespace greasy {
    struct HairStruct {
      enum hair { blonde=0xFF0, ginger };
      typedef hair hairtd1;
      typedef HairStruct::hair hairtd2;
      typedef greasy::HairStruct::hair hairtd3;
      typedef curly::greasy::HairStruct::hair hairtd4;
      typedef ::curly::greasy::HairStruct::hair hairtd5;
      typedef hairtd1 hairtd6;
      typedef HairStruct::hairtd1 hairtd7;
      typedef greasy::HairStruct::hairtd1 hairtd8;
      typedef curly::greasy::HairStruct::hairtd1 hairtd9;
      typedef ::curly::greasy::HairStruct::hairtd1 hairtdA;
      hair                          hairTest1(hair e) { return e; }
      hairtd1                       hairTest2(hairtd1 e) { return e; }
      hairtd2                       hairTest3(hairtd2 e) { return e; }
      hairtd3                       hairTest4(hairtd3 e) { return e; }
      hairtd4                       hairTest5(hairtd4 e) { return e; }
      hairtd5                       hairTest6(hairtd5 e) { return e; }
      hairtd6                       hairTest7(hairtd6 e) { return e; }
      hairtd7                       hairTest8(hairtd7 e) { return e; }
      hairtd8                       hairTest9(hairtd8 e) { return e; }
      hairtd9                       hairTestA(hairtd9 e) { return e; }
      hairtdA                       hairTestB(hairtdA e) { return e; }

      ::colour                      colourTest1(::colour e) { return e; }
      enum colour                   colourTest2(enum colour e) { return e; }
      namedanon                     namedanonTest1(namedanon e) { return e; }
      AnonSpace::namedanonspace      namedanonspaceTest1(AnonSpace::namedanonspace e) { return e; }

      treesglobaltd1                treesGlobalTest1(treesglobaltd1 e) { return e; }
      treesglobaltd2                treesGlobalTest2(treesglobaltd2 e) { return e; }
      treesglobaltd3                treesGlobalTest3(treesglobaltd3 e) { return e; }
      treesglobaltd4                treesGlobalTest4(treesglobaltd4 e) { return e; }
      treesglobaltd5                treesGlobalTest5(treesglobaltd5 e) { return e; }

    };
    HairStruct::hair                hairTest1(HairStruct::hair e) { return e; }
    HairStruct::hairtd1             hairTest2(HairStruct::hairtd1 e) { return e; }
    HairStruct::hairtd2             hairTest3(HairStruct::hairtd2 e) { return e; }
    HairStruct::hairtd3             hairTest4(HairStruct::hairtd3 e) { return e; }
    HairStruct::hairtd4             hairTest5(HairStruct::hairtd4 e) { return e; }
    HairStruct::hairtd5             hairTest6(HairStruct::hairtd5 e) { return e; }
    HairStruct::hairtd6             hairTest7(HairStruct::hairtd6 e) { return e; }
    HairStruct::hairtd7             hairTest8(HairStruct::hairtd7 e) { return e; }
    HairStruct::hairtd8             hairTest9(HairStruct::hairtd8 e) { return e; }
    HairStruct::hairtd9             hairTestA(HairStruct::hairtd9 e) { return e; }
    HairStruct::hairtdA             hairTestB(HairStruct::hairtdA e) { return e; }
    const HairStruct::hair &        hairTestC(const HairStruct::hair &e) { return e; }
  }
  greasy::HairStruct::hair          hairTestA1(greasy::HairStruct::hair e) { return e; }
  greasy::HairStruct::hairtd1       hairTestA2(greasy::HairStruct::hairtd1 e) { return e; }
  greasy::HairStruct::hairtd2       hairTestA3(greasy::HairStruct::hairtd2 e) { return e; }
  greasy::HairStruct::hairtd3       hairTestA4(greasy::HairStruct::hairtd3 e) { return e; }
  greasy::HairStruct::hairtd4       hairTestA5(greasy::HairStruct::hairtd4 e) { return e; }
  greasy::HairStruct::hairtd5       hairTestA6(greasy::HairStruct::hairtd5 e) { return e; }
  greasy::HairStruct::hairtd6       hairTestA7(greasy::HairStruct::hairtd6 e) { return e; }
  greasy::HairStruct::hairtd7       hairTestA8(greasy::HairStruct::hairtd7 e) { return e; }
  greasy::HairStruct::hairtd8       hairTestA9(greasy::HairStruct::hairtd8 e) { return e; }
  greasy::HairStruct::hairtd9       hairTestAA(greasy::HairStruct::hairtd9 e) { return e; }
  greasy::HairStruct::hairtdA       hairTestAB(greasy::HairStruct::hairtdA e) { return e; }
  const greasy::HairStruct::hairtdA &     hairTestAC(const greasy::HairStruct::hairtdA &e) { return e; }
}
curly::greasy::HairStruct::hair     hairTestB1(curly::greasy::HairStruct::hair e) { return e; }
curly::greasy::HairStruct::hairtd1  hairTestB2(curly::greasy::HairStruct::hairtd1 e) { return e; }
curly::greasy::HairStruct::hairtd2  hairTestB3(curly::greasy::HairStruct::hairtd2 e) { return e; }
curly::greasy::HairStruct::hairtd3  hairTestB4(curly::greasy::HairStruct::hairtd3 e) { return e; }
curly::greasy::HairStruct::hairtd4  hairTestB5(curly::greasy::HairStruct::hairtd4 e) { return e; }
curly::greasy::HairStruct::hairtd5  hairTestB6(curly::greasy::HairStruct::hairtd5 e) { return e; }
curly::greasy::HairStruct::hairtd6  hairTestB7(curly::greasy::HairStruct::hairtd6 e) { return e; }
curly::greasy::HairStruct::hairtd7  hairTestB8(curly::greasy::HairStruct::hairtd7 e) { return e; }
curly::greasy::HairStruct::hairtd8  hairTestB9(curly::greasy::HairStruct::hairtd8 e) { return e; }
curly::greasy::HairStruct::hairtd9  hairTestBA(curly::greasy::HairStruct::hairtd9 e) { return e; }
curly::greasy::HairStruct::hairtdA  hairTestBB(curly::greasy::HairStruct::hairtdA e) { return e; }
const curly::greasy::HairStruct::hairtdA & hairTestBC(const curly::greasy::HairStruct::hairtdA &e) { return e; }

using curly::greasy::HairStruct;
HairStruct::hair                    hairTestC1(HairStruct::hair e) { return e; }
HairStruct::hairtd1                 hairTestC2(HairStruct::hairtd1 e) { return e; }
HairStruct::hairtd2                 hairTestC3(HairStruct::hairtd2 e) { return e; }
HairStruct::hairtd3                 hairTestC4(HairStruct::hairtd3 e) { return e; }
HairStruct::hairtd4                 hairTestC5(HairStruct::hairtd4 e) { return e; }
HairStruct::hairtd5                 hairTestC6(HairStruct::hairtd5 e) { return e; }
HairStruct::hairtd6                 hairTestC7(HairStruct::hairtd6 e) { return e; }
HairStruct::hairtd7                 hairTestC8(HairStruct::hairtd7 e) { return e; }
HairStruct::hairtd8                 hairTestC9(HairStruct::hairtd8 e) { return e; }
HairStruct::hairtd9                 hairTestCA(HairStruct::hairtd9 e) { return e; }
HairStruct::hairtdA                 hairTestCB(HairStruct::hairtdA e) { return e; }
const HairStruct::hairtdA &         hairTestCC(const HairStruct::hairtdA &e) { return e; }

namespace curly {
  namespace greasy {
    struct FirStruct : HairStruct {
      hair                          hairTestFir1(hair e) { return e; }
      hairtd1                       hairTestFir2(hairtd1 e) { return e; }
      hairtd2                       hairTestFir3(hairtd2 e) { return e; }
      hairtd3                       hairTestFir4(hairtd3 e) { return e; }
      hairtd4                       hairTestFir5(hairtd4 e) { return e; }
      hairtd5                       hairTestFir6(hairtd5 e) { return e; }
      hairtd6                       hairTestFir7(hairtd6 e) { return e; }
      hairtd7                       hairTestFir8(hairtd7 e) { return e; }
      hairtd8                       hairTestFir9(hairtd8 e) { return e; }
      hairtd9                       hairTestFirA(hairtd9 e) { return e; }
      hairtdA                       hairTestFirB(hairtdA e) { return e; }
    };
  }
}

struct Obscure {
  enum Zero {};
  enum One {one};
  enum Two {two, twoagain};
#if defined(SWIG)
  // g++-4.3 warns about this
  typedef enum Empty {};
#endif
  typedef enum {} AlsoEmpty;
};

// Unnamed enum instance
extern "C" {
enum { globalinstance1, globalinstance2, globalinstance3 = 30 } GlobalInstance;
}

struct Instances {
  enum { memberinstance1, memberinstance2, memberinstance3 = 300 } MemberInstance;
  Instances() : MemberInstance(memberinstance3) {}
};



struct IgnoreTest {
  enum IgnoreA { ignoreA_zero, ignoreA_one, ignoreA_two, ignoreA_three, ignoreA_ten=10, ignoreA_eleven, ignoreA_twelve, ignoreA_thirteen, ignoreA_fourteen, ignoreA_twenty=20, ignoreA_thirty=30, ignoreA_thirty_one, ignoreA_thirty_two, ignoreA_thirty_three };
  enum IgnoreB { ignoreB_ten=10, ignoreB_eleven, ignoreB_twelve, ignoreB_twenty=20, ignoreB_thirty=30, ignoreB_thirty_one, ignoreB_thirty_two, ignoreB_forty=40, ignoreB_forty_one, ignoreB_forty_two };
  enum IgnoreC { ignoreC_ten=10, ignoreC_eleven, ignoreC_twelve, ignoreC_twenty=20, ignoreC_thirty=30, ignoreC_thirty_one, ignoreC_thirty_two, ignoreC_forty=40, ignoreC_forty_one, ignoreC_forty_two };
  enum IgnoreD { ignoreD_ten=10, ignoreD_twenty=20, ignoreD_twenty_one, ignoreD_twenty_two };
  enum IgnoreE { ignoreE_zero, ignoreE_twenty=20, ignoreE_twenty_one, ignoreE_twenty_two };
};

IgnoreTest::IgnoreA ignoreATest(IgnoreTest::IgnoreA n) { return n; }
IgnoreTest::IgnoreB ignoreBTest(IgnoreTest::IgnoreB n) { return n; }
IgnoreTest::IgnoreC ignoreCTest(IgnoreTest::IgnoreC n) { return n; }
IgnoreTest::IgnoreD ignoreDTest(IgnoreTest::IgnoreD n) { return n; }
IgnoreTest::IgnoreE ignoreETest(IgnoreTest::IgnoreE n) { return n; }


namespace RepeatSpace {
typedef enum
{
   one = 1,
   initial = one,
   two,
   three,
   llast = three,
   end = llast
} repeat;
repeat repeatTest(repeat e) { return e; }
}


namespace DifferentSpace {
enum DifferentTypes {
  typeint = 10,
  typeboolfalse = false,
  typebooltrue = true,
  typebooltwo,
  typechar = 'C',
  typedefaultint
};
DifferentTypes differentTypesTest(DifferentTypes n) { return n; }

enum {
  global_typeint = 10,
  global_typeboolfalse = false,
  global_typebooltrue = true,
  global_typebooltwo,
  global_typechar = 'C',
  global_typedefaultint
};
int globalDifferentTypesTest(int n) { return n; }
}



namespace DifferentSpace {
enum DifferentTypesNoConst {
  typeint_noconst = 10,
  typeboolfalse_noconst = false,
  typebooltrue_noconst = true,
  typebooltwo_noconst,
  typechar_noconst = 'C',
  typedefaultint_noconst
};

enum {
  global_typeint_noconst = 10,
  global_typeboolfalse_noconst = false,
  global_typebooltrue_noconst = true,
  global_typebooltwo_noconst,
  global_typechar_noconst = 'C',
  global_typedefaultint_noconst
};
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_AnonEnum1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)AnonEnum1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_AnonEnum2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)AnonEnum2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_ReallyAnInteger_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ReallyAnInteger;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_AnonSpaceEnum1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)AnonSpace::AnonSpaceEnum1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_AnonSpaceEnum2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)AnonSpace::AnonSpaceEnum2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_AnonStruct_1AnonStructEnum1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)AnonSpace::AnonStruct::AnonStructEnum1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_AnonStruct_1AnonStructEnum2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)AnonSpace::AnonStruct::AnonStructEnum2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_new_1AnonStruct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AnonSpace::AnonStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AnonSpace::AnonStruct *)new AnonSpace::AnonStruct();
  *(AnonSpace::AnonStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_delete_1AnonStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AnonSpace::AnonStruct *arg1 = (AnonSpace::AnonStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AnonSpace::AnonStruct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_red_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  colour result;
  
  (void)jenv;
  (void)jcls;
  result = (colour)red;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_blue_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  colour result;
  
  (void)jenv;
  (void)jcls;
  result = (colour)blue;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_green_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  colour result;
  
  (void)jenv;
  (void)jcls;
  result = (colour)green;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_colourTest1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  colour arg1 ;
  colour result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (colour)jarg1; 
  result = (colour)colourTest1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_colourTest2(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum colour arg1 ;
  enum colour result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum colour)jarg1; 
  result = (enum colour)colourTest2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_colourTest3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  colour arg1 ;
  colour result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (colour)jarg1; 
  result = (colour)colourTest3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_colourTest4(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum colour arg1 ;
  enum colour result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum colour)jarg1; 
  result = (enum colour)colourTest4(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_myColour_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  colour arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (colour)jarg1; 
  myColour = arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_myColour_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  colour result;
  
  (void)jenv;
  (void)jcls;
  result = (colour)myColour;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1slow_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SpeedClass::speed result;
  
  (void)jenv;
  (void)jcls;
  result = (SpeedClass::speed)SpeedClass::slow;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1medium_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SpeedClass::speed result;
  
  (void)jenv;
  (void)jcls;
  result = (SpeedClass::speed)SpeedClass::medium;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1fast_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SpeedClass::speed result;
  
  (void)jenv;
  (void)jcls;
  result = (SpeedClass::speed)SpeedClass::fast;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1lightning_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SpeedClass::speed result;
  
  (void)jenv;
  (void)jcls;
  result = (SpeedClass::speed)SpeedClass::lightning;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1speedTest0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeedClass **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->speedTest0(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1speedTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speed arg2 ;
  SpeedClass::speed result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeedClass **)&jarg1; 
  arg2 = (SpeedClass::speed)jarg2; 
  result = (SpeedClass::speed)(arg1)->speedTest1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1speedTest2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  enum SpeedClass::speed arg2 ;
  enum SpeedClass::speed result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeedClass **)&jarg1; 
  arg2 = (enum SpeedClass::speed)jarg2; 
  result = (enum SpeedClass::speed)(arg1)->speedTest2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1speedTest3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speed arg2 ;
  SpeedClass::speed result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeedClass **)&jarg1; 
  arg2 = (SpeedClass::speed)jarg2; 
  result = (SpeedClass::speed)(arg1)->speedTest3(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1speedTest4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  enum SpeedClass::speed arg2 ;
  enum SpeedClass::speed result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeedClass **)&jarg1; 
  arg2 = (enum SpeedClass::speed)jarg2; 
  result = (enum SpeedClass::speed)(arg1)->speedTest4(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1speedTest5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speedtd1 arg2 ;
  SpeedClass::speedtd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeedClass **)&jarg1; 
  arg2 = (SpeedClass::speedtd1)jarg2; 
  result = (SpeedClass::speedtd1)(arg1)->speedTest5(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1speedTest6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speedtd1 arg2 ;
  SpeedClass::speedtd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeedClass **)&jarg1; 
  arg2 = (SpeedClass::speedtd1)jarg2; 
  result = (SpeedClass::speedtd1)(arg1)->speedTest6(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1speedTest7(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speed *arg2 = 0 ;
  SpeedClass::speed temp2 ;
  SpeedClass::speed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeedClass **)&jarg1; 
  temp2 = (SpeedClass::speed)jarg2; 
  arg2 = &temp2; 
  result = (SpeedClass::speed *) &(arg1)->speedTest7((SpeedClass::speed const &)*arg2);
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1speedTest8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  enum SpeedClass::speed *arg2 = 0 ;
  enum SpeedClass::speed temp2 ;
  enum SpeedClass::speed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeedClass **)&jarg1; 
  temp2 = (enum SpeedClass::speed)jarg2; 
  arg2 = &temp2; 
  result = (enum SpeedClass::speed *) &(arg1)->speedTest8((enum SpeedClass::speed const &)*arg2);
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1myColour2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  colour result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeedClass **)&jarg1; 
  result = (colour)(colour) ((arg1)->myColour2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1mySpeedtd1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speedtd1 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeedClass **)&jarg1; 
  arg2 = (SpeedClass::speedtd1)jarg2; 
  if (arg1) (arg1)->mySpeedtd1 = arg2;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_SpeedClass_1mySpeedtd1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  SpeedClass::speedtd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpeedClass **)&jarg1; 
  result = (SpeedClass::speedtd1) ((arg1)->mySpeedtd1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_new_1SpeedClass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SpeedClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SpeedClass *)new SpeedClass();
  *(SpeedClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_delete_1SpeedClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SpeedClass *arg1 = (SpeedClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SpeedClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_speedTest0(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)speedTest0(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_speedTest1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  SpeedClass::speed arg1 ;
  SpeedClass::speed result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SpeedClass::speed)jarg1; 
  result = (SpeedClass::speed)speedTest1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_speedTest2(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum SpeedClass::speed arg1 ;
  enum SpeedClass::speed result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum SpeedClass::speed)jarg1; 
  result = (enum SpeedClass::speed)speedTest2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_speedTest3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  SpeedClass::speed arg1 ;
  SpeedClass::speed result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (SpeedClass::speed)jarg1; 
  result = (SpeedClass::speed)speedTest3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_speedTest4(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum SpeedClass::speed arg1 ;
  enum SpeedClass::speed result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum SpeedClass::speed)jarg1; 
  result = (enum SpeedClass::speed)speedTest4(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_speedTest5(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  SpeedClass::speed *arg1 = 0 ;
  SpeedClass::speed temp1 ;
  SpeedClass::speed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (SpeedClass::speed)jarg1; 
  arg1 = &temp1; 
  result = (SpeedClass::speed *) &speedTest5((enum SpeedClass::speed const &)*arg1);
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NamedAnon1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  namedanon result;
  
  (void)jenv;
  (void)jcls;
  result = (namedanon)NamedAnon1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NamedAnon2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  namedanon result;
  
  (void)jenv;
  (void)jcls;
  result = (namedanon)NamedAnon2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_namedanonTest1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  namedanon arg1 ;
  namedanon result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (namedanon)jarg1; 
  result = (namedanon)namedanonTest1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TwoNames1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  twonamestag result;
  
  (void)jenv;
  (void)jcls;
  result = (twonamestag)TwoNames1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TwoNames2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  twonamestag result;
  
  (void)jenv;
  (void)jcls;
  result = (twonamestag)TwoNames2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TwoNames3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  twonamestag result;
  
  (void)jenv;
  (void)jcls;
  result = (twonamestag)TwoNames3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_twonamesTest1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  twonames arg1 ;
  twonames result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (twonames)jarg1; 
  result = (twonames)twonamesTest1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_twonamesTest2(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  twonamestag arg1 ;
  twonamestag result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (twonamestag)jarg1; 
  result = (twonamestag)twonamesTest2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_twonamesTest3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum twonamestag arg1 ;
  enum twonamestag result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum twonamestag)jarg1; 
  result = (enum twonamestag)twonamesTest3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TwoNamesStruct_1TwoNamesStruct1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TwoNamesStruct::twonamestag result;
  
  (void)jenv;
  (void)jcls;
  result = (TwoNamesStruct::twonamestag)TwoNamesStruct::TwoNamesStruct1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TwoNamesStruct_1TwoNamesStruct2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TwoNamesStruct::twonamestag result;
  
  (void)jenv;
  (void)jcls;
  result = (TwoNamesStruct::twonamestag)TwoNamesStruct::TwoNamesStruct2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TwoNamesStruct_1twonamesTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
  TwoNamesStruct::twonames arg2 ;
  TwoNamesStruct::twonames result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TwoNamesStruct **)&jarg1; 
  arg2 = (TwoNamesStruct::twonames)jarg2; 
  result = (TwoNamesStruct::twonames)(arg1)->twonamesTest1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TwoNamesStruct_1twonamesTest2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
  TwoNamesStruct::twonamestag arg2 ;
  TwoNamesStruct::twonamestag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TwoNamesStruct **)&jarg1; 
  arg2 = (TwoNamesStruct::twonamestag)jarg2; 
  result = (TwoNamesStruct::twonamestag)(arg1)->twonamesTest2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TwoNamesStruct_1twonamesTest3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
  enum TwoNamesStruct::twonamestag arg2 ;
  enum TwoNamesStruct::twonamestag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TwoNamesStruct **)&jarg1; 
  arg2 = (enum TwoNamesStruct::twonamestag)jarg2; 
  result = (enum TwoNamesStruct::twonamestag)(arg1)->twonamesTest3(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_new_1TwoNamesStruct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TwoNamesStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TwoNamesStruct *)new TwoNamesStruct();
  *(TwoNamesStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_delete_1TwoNamesStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TwoNamesStruct *arg1 = (TwoNamesStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TwoNamesStruct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NamedAnonSpace1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AnonSpace::namedanonspace result;
  
  (void)jenv;
  (void)jcls;
  result = (AnonSpace::namedanonspace)AnonSpace::NamedAnonSpace1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NamedAnonSpace2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  AnonSpace::namedanonspace result;
  
  (void)jenv;
  (void)jcls;
  result = (AnonSpace::namedanonspace)AnonSpace::NamedAnonSpace2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_namedanonspaceTest1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  AnonSpace::namedanonspace arg1 ;
  AnonSpace::namedanonspace result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (AnonSpace::namedanonspace)jarg1; 
  result = (AnonSpace::namedanonspace)AnonSpace::namedanonspaceTest1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_namedanonspaceTest2(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  AnonSpace::namedanonspace arg1 ;
  AnonSpace::namedanonspace result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (AnonSpace::namedanonspace)jarg1; 
  result = (AnonSpace::namedanonspace)AnonSpace::namedanonspaceTest2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_namedanonspaceTest3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  AnonSpace::namedanonspace arg1 ;
  AnonSpace::namedanonspace result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (AnonSpace::namedanonspace)jarg1; 
  result = (AnonSpace::namedanonspace)namedanonspaceTest3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_namedanonspaceTest4(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  AnonSpace::namedanonspace arg1 ;
  AnonSpace::namedanonspace result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (AnonSpace::namedanonspace)jarg1; 
  result = (AnonSpace::namedanonspace)namedanonspaceTest4(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsTest1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TemplateClass< int >::scientists arg1 ;
  TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TemplateClass< int >::scientists)jarg1; 
  result = (TemplateClass< int >::scientists)scientistsTest1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsTest2(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TemplateClass< int >::scientists arg1 ;
  TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TemplateClass< int >::scientists)jarg1; 
  result = (TemplateClass< int >::scientists)scientistsTest2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsTest3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum TemplateClass< int >::scientists arg1 ;
  enum TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum TemplateClass< int >::scientists)jarg1; 
  result = (enum TemplateClass< int >::scientists)scientistsTest3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsTest4(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum TemplateClass< int >::scientists arg1 ;
  enum TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum TemplateClass< int >::scientists)jarg1; 
  result = (enum TemplateClass< int >::scientists)scientistsTest4(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsTest5(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TemplateClass< int >::scientiststd1 arg1 ;
  TemplateClass< int >::scientiststd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TemplateClass< int >::scientiststd1)jarg1; 
  result = (TemplateClass< int >::scientiststd1)scientistsTest5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsTest6(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TemplateClass< int >::scientiststd2 arg1 ;
  TemplateClass< int >::scientiststd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TemplateClass< int >::scientiststd2)jarg1; 
  result = (TemplateClass< int >::scientiststd2)scientistsTest6(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsTest7(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TemplateClass< int >::scientiststd3 arg1 ;
  TemplateClass< int >::scientiststd3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TemplateClass< int >::scientiststd3)jarg1; 
  result = (TemplateClass< int >::scientiststd3)scientistsTest7(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsTest8(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TemplateClass< int >::scientiststd3 *arg1 = 0 ;
  TemplateClass< int >::scientiststd3 temp1 ;
  TemplateClass< int >::scientiststd3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (TemplateClass< int >::scientiststd3)jarg1; 
  arg1 = &temp1; 
  result = (TemplateClass< int >::scientiststd3 *) &scientistsTest8((enum TemplateClass< int >::scientists const &)*arg1);
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameTest1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientists arg1 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientists)jarg1; 
  result = (Name::TClass< int >::scientists)Name::scientistsNameTest1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameTest2(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientists arg1 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientists)jarg1; 
  result = (Name::TClass< int >::scientists)Name::scientistsNameTest2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameTest3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum Name::TClass< int >::scientists arg1 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum Name::TClass< int >::scientists)jarg1; 
  result = (enum Name::TClass< int >::scientists)Name::scientistsNameTest3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameTest4(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum Name::TClass< int >::scientists arg1 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum Name::TClass< int >::scientists)jarg1; 
  result = (enum Name::TClass< int >::scientists)Name::scientistsNameTest4(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameTest5(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientiststd1 arg1 ;
  Name::TClass< int >::scientiststd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientiststd1)jarg1; 
  result = (Name::TClass< int >::scientiststd1)Name::scientistsNameTest5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameTest6(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientiststd2 arg1 ;
  Name::TClass< int >::scientiststd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientiststd2)jarg1; 
  result = (Name::TClass< int >::scientiststd2)Name::scientistsNameTest6(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameTest7(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientiststd3 arg1 ;
  Name::TClass< int >::scientiststd3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientiststd3)jarg1; 
  result = (Name::TClass< int >::scientiststd3)Name::scientistsNameTest7(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTest1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientists arg1 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientists)jarg1; 
  result = (Name::TClass< int >::scientists)Name::scientistsNameSpaceTest1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTest2(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientists arg1 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientists)jarg1; 
  result = (Name::TClass< int >::scientists)Name::scientistsNameSpaceTest2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTest3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum Name::TClass< int >::scientists arg1 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum Name::TClass< int >::scientists)jarg1; 
  result = (enum Name::TClass< int >::scientists)Name::scientistsNameSpaceTest3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTest4(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum Name::TClass< int >::scientists arg1 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum Name::TClass< int >::scientists)jarg1; 
  result = (enum Name::TClass< int >::scientists)Name::scientistsNameSpaceTest4(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTest5(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientiststd1 arg1 ;
  Name::TClass< int >::scientiststd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientiststd1)jarg1; 
  result = (Name::TClass< int >::scientiststd1)Name::scientistsNameSpaceTest5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTest6(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientiststd2 arg1 ;
  Name::TClass< int >::scientiststd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientiststd2)jarg1; 
  result = (Name::TClass< int >::scientiststd2)Name::scientistsNameSpaceTest6(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTest7(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientiststd3 arg1 ;
  Name::TClass< int >::scientiststd3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientiststd3)jarg1; 
  result = (Name::TClass< int >::scientiststd3)Name::scientistsNameSpaceTest7(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTest8(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientists arg1 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientists)jarg1; 
  result = (Name::TClass< int >::scientists)scientistsNameSpaceTest8(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTest9(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientists arg1 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientists)jarg1; 
  result = (Name::TClass< int >::scientists)scientistsNameSpaceTest9(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTestA(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum Name::TClass< int >::scientists arg1 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum Name::TClass< int >::scientists)jarg1; 
  result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestA(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTestB(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum Name::TClass< int >::scientists arg1 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum Name::TClass< int >::scientists)jarg1; 
  result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestB(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTestC(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientiststd1 arg1 ;
  Name::TClass< int >::scientiststd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientiststd1)jarg1; 
  result = (Name::TClass< int >::scientiststd1)scientistsNameSpaceTestC(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTestD(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientiststd2 arg1 ;
  Name::TClass< int >::scientiststd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientiststd2)jarg1; 
  result = (Name::TClass< int >::scientiststd2)scientistsNameSpaceTestD(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTestE(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientiststd3 arg1 ;
  Name::TClass< int >::scientiststd3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientiststd3)jarg1; 
  result = (Name::TClass< int >::scientiststd3)scientistsNameSpaceTestE(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTestF(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientists arg1 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientists)jarg1; 
  result = (Name::TClass< int >::scientists)scientistsNameSpaceTestF(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTestG(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientists arg1 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientists)jarg1; 
  result = (Name::TClass< int >::scientists)scientistsNameSpaceTestG(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTestH(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum Name::TClass< int >::scientists arg1 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum Name::TClass< int >::scientists)jarg1; 
  result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestH(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTestI(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  enum Name::TClass< int >::scientists arg1 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum Name::TClass< int >::scientists)jarg1; 
  result = (enum Name::TClass< int >::scientists)scientistsNameSpaceTestI(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTestJ(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientiststd1 arg1 ;
  Name::TClass< int >::scientiststd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientiststd1)jarg1; 
  result = (Name::TClass< int >::scientiststd1)scientistsNameSpaceTestJ(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTestK(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientiststd2 arg1 ;
  Name::TClass< int >::scientiststd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientiststd2)jarg1; 
  result = (Name::TClass< int >::scientiststd2)scientistsNameSpaceTestK(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_scientistsNameSpaceTestL(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Name::TClass< int >::scientiststd3 arg1 ;
  Name::TClass< int >::scientiststd3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Name::TClass< int >::scientiststd3)jarg1; 
  result = (Name::TClass< int >::scientiststd3)scientistsNameSpaceTestL(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1einstein_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  result = (TemplateClass< int >::scientists)TemplateClass< int >::einstein;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1galileo_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  result = (TemplateClass< int >::scientists)TemplateClass< int >::galileo;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (TemplateClass< int >::scientists)jarg2; 
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTest2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  enum TemplateClass< int >::scientists arg2 ;
  enum TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (enum TemplateClass< int >::scientists)jarg2; 
  result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTest3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (TemplateClass< int >::scientists)jarg2; 
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest3(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTest4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  enum TemplateClass< int >::scientists arg2 ;
  enum TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (enum TemplateClass< int >::scientists)jarg2; 
  result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest4(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTest5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (TemplateClass< int >::scientists)jarg2; 
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest5(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTest6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (TemplateClass< int >::scientists)jarg2; 
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest6(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTest7(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  enum TemplateClass< int >::scientists arg2 ;
  enum TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (enum TemplateClass< int >::scientists)jarg2; 
  result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest7(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTest8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  enum TemplateClass< int >::scientists arg2 ;
  enum TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (enum TemplateClass< int >::scientists)jarg2; 
  result = (enum TemplateClass< int >::scientists)(arg1)->scientistsTest8(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTest9(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (TemplateClass< int >::scientists)jarg2; 
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTest9(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTestB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists arg2 ;
  TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (TemplateClass< int >::scientists)jarg2; 
  result = (TemplateClass< int >::scientists)(arg1)->scientistsTestB(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTestD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd1 arg2 ;
  TemplateClass< int >::scientiststd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (TemplateClass< int >::scientiststd1)jarg2; 
  result = (TemplateClass< int >::scientiststd1)(arg1)->scientistsTestD(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTestE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd2 arg2 ;
  TemplateClass< int >::scientiststd2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (TemplateClass< int >::scientiststd2)jarg2; 
  result = (TemplateClass< int >::scientiststd2)(arg1)->scientistsTestE(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTestF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd3 arg2 ;
  TemplateClass< int >::scientiststd3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (TemplateClass< int >::scientiststd3)jarg2; 
  result = (TemplateClass< int >::scientiststd3)(arg1)->scientistsTestF(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTestG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd1 arg2 ;
  TemplateClass< int >::scientiststd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (TemplateClass< int >::scientiststd1)jarg2; 
  result = (TemplateClass< int >::scientiststd1)(arg1)->scientistsTestG(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTestH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd2 arg2 ;
  TemplateClass< int >::scientiststd2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (TemplateClass< int >::scientiststd2)jarg2; 
  result = (TemplateClass< int >::scientiststd2)(arg1)->scientistsTestH(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTestI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientiststd3 arg2 ;
  TemplateClass< int >::scientiststd3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  arg2 = (TemplateClass< int >::scientiststd3)jarg2; 
  result = (TemplateClass< int >::scientiststd3)(arg1)->scientistsTestI(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TemplateClassInt_1scientistsTestJ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  TemplateClass< int >::scientists *arg2 = 0 ;
  TemplateClass< int >::scientists temp2 ;
  TemplateClass< int >::scientists *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  temp2 = (TemplateClass< int >::scientists)jarg2; 
  arg2 = &temp2; 
  result = (TemplateClass< int >::scientists *) &(arg1)->scientistsTestJ((TemplateClass< int >::scientists const &)*arg2);
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_new_1TemplateClassInt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TemplateClass< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TemplateClass< int > *)new TemplateClass< int >();
  *(TemplateClass< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_delete_1TemplateClassInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TemplateClass< int > *arg1 = (TemplateClass< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TemplateClass< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1faraday_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  result = (Name::TClass< int >::scientists)Name::TClass< int >::faraday;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1bell_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  result = (Name::TClass< int >::scientists)Name::TClass< int >::bell;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientists)jarg2; 
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTest2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (enum Name::TClass< int >::scientists)jarg2; 
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTest3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientists)jarg2; 
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest3(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTest4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (enum Name::TClass< int >::scientists)jarg2; 
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest4(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTest5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientists)jarg2; 
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest5(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTest6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientists)jarg2; 
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest6(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTest7(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (enum Name::TClass< int >::scientists)jarg2; 
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest7(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTest8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (enum Name::TClass< int >::scientists)jarg2; 
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameTest8(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTest9(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientists)jarg2; 
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTest9(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTestB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientists)jarg2; 
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameTestB(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTestD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd1 arg2 ;
  Name::TClass< int >::scientiststd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientiststd1)jarg2; 
  result = (Name::TClass< int >::scientiststd1)(arg1)->scientistsNameTestD(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTestE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd2 arg2 ;
  Name::TClass< int >::scientiststd2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientiststd2)jarg2; 
  result = (Name::TClass< int >::scientiststd2)(arg1)->scientistsNameTestE(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTestF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd3 arg2 ;
  Name::TClass< int >::scientiststd3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientiststd3)jarg2; 
  result = (Name::TClass< int >::scientiststd3)(arg1)->scientistsNameTestF(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTestG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd1 arg2 ;
  Name::TClass< int >::scientiststd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientiststd1)jarg2; 
  result = (Name::TClass< int >::scientiststd1)(arg1)->scientistsNameTestG(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTestH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd2 arg2 ;
  Name::TClass< int >::scientiststd2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientiststd2)jarg2; 
  result = (Name::TClass< int >::scientiststd2)(arg1)->scientistsNameTestH(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameTestI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd3 arg2 ;
  Name::TClass< int >::scientiststd3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientiststd3)jarg2; 
  result = (Name::TClass< int >::scientiststd3)(arg1)->scientistsNameTestI(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameSpaceTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientists)jarg2; 
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameSpaceTest2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientists arg2 ;
  Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientists)jarg2; 
  result = (Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameSpaceTest3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (enum Name::TClass< int >::scientists)jarg2; 
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest3(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameSpaceTest4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum Name::TClass< int >::scientists arg2 ;
  enum Name::TClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (enum Name::TClass< int >::scientists)jarg2; 
  result = (enum Name::TClass< int >::scientists)(arg1)->scientistsNameSpaceTest4(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameSpaceTest5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd1 arg2 ;
  Name::TClass< int >::scientiststd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientiststd1)jarg2; 
  result = (Name::TClass< int >::scientiststd1)(arg1)->scientistsNameSpaceTest5(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameSpaceTest6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd2 arg2 ;
  Name::TClass< int >::scientiststd2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientiststd2)jarg2; 
  result = (Name::TClass< int >::scientiststd2)(arg1)->scientistsNameSpaceTest6(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsNameSpaceTest7(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  Name::TClass< int >::scientiststd3 arg2 ;
  Name::TClass< int >::scientiststd3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (Name::TClass< int >::scientiststd3)jarg2; 
  result = (Name::TClass< int >::scientiststd3)(arg1)->scientistsNameSpaceTest7(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsOtherTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientists arg2 ;
  ::TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (::TemplateClass< int >::scientists)jarg2; 
  result = (::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsOtherTest2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientists arg2 ;
  ::TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (::TemplateClass< int >::scientists)jarg2; 
  result = (::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsOtherTest3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum ::TemplateClass< int >::scientists arg2 ;
  enum ::TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (enum ::TemplateClass< int >::scientists)jarg2; 
  result = (enum ::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest3(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsOtherTest4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  enum ::TemplateClass< int >::scientists arg2 ;
  enum ::TemplateClass< int >::scientists result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (enum ::TemplateClass< int >::scientists)jarg2; 
  result = (enum ::TemplateClass< int >::scientists)(arg1)->scientistsOtherTest4(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsOtherTest5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientiststd1 arg2 ;
  ::TemplateClass< int >::scientiststd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (::TemplateClass< int >::scientiststd1)jarg2; 
  result = (::TemplateClass< int >::scientiststd1)(arg1)->scientistsOtherTest5(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsOtherTest6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientiststd2 arg2 ;
  ::TemplateClass< int >::scientiststd2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (::TemplateClass< int >::scientiststd2)jarg2; 
  result = (::TemplateClass< int >::scientiststd2)(arg1)->scientistsOtherTest6(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TClassInt_1scientistsOtherTest7(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  ::TemplateClass< int >::scientiststd3 arg2 ;
  ::TemplateClass< int >::scientiststd3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  arg2 = (::TemplateClass< int >::scientiststd3)jarg2; 
  result = (::TemplateClass< int >::scientiststd3)(arg1)->scientistsOtherTest7(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_new_1TClassInt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Name::TClass< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Name::TClass< int > *)new Name::TClass< int >();
  *(Name::TClass< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_delete_1TClassInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Name::TClass< int > *arg1 = (Name::TClass< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Name::TClass< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_argh_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  old_name result;
  
  (void)jenv;
  (void)jcls;
  result = (old_name)argh;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_eek_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  old_name result;
  
  (void)jenv;
  (void)jcls;
  result = (old_name)eek;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_renameTest1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  old_name arg1 ;
  old_name result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (old_name)jarg1; 
  result = (old_name)renameTest1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_renameTest2(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  old_nametd arg1 ;
  old_nametd result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (old_nametd)jarg1; 
  result = (old_nametd)renameTest2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NewNameStruct_1whizz_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OldNameStruct::enumeration result;
  
  (void)jenv;
  (void)jcls;
  result = (OldNameStruct::enumeration)OldNameStruct::whizz;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NewNameStruct_1bang_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OldNameStruct::enumeration result;
  
  (void)jenv;
  (void)jcls;
  result = (OldNameStruct::enumeration)OldNameStruct::kerboom;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NewNameStruct_1pop_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OldNameStruct::enumeration result;
  
  (void)jenv;
  (void)jcls;
  result = (OldNameStruct::enumeration)OldNameStruct::pop;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NewNameStruct_1renameTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::enumeration arg2 ;
  OldNameStruct::enumeration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OldNameStruct **)&jarg1; 
  arg2 = (OldNameStruct::enumeration)jarg2; 
  result = (OldNameStruct::enumeration)(arg1)->renameTest1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NewNameStruct_1renameTest2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::enumeration arg2 ;
  OldNameStruct::enumeration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OldNameStruct **)&jarg1; 
  arg2 = (OldNameStruct::enumeration)jarg2; 
  result = (OldNameStruct::enumeration)(arg1)->renameTest2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NewNameStruct_1simple1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OldNameStruct::simple result;
  
  (void)jenv;
  (void)jcls;
  result = (OldNameStruct::simple)OldNameStruct::simple1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NewNameStruct_1doublename1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OldNameStruct::doublenametag result;
  
  (void)jenv;
  (void)jcls;
  result = (OldNameStruct::doublenametag)OldNameStruct::doublename1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NewNameStruct_1singlename1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OldNameStruct::singlename result;
  
  (void)jenv;
  (void)jcls;
  result = (OldNameStruct::singlename)OldNameStruct::singlename1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NewNameStruct_1renameTest3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::simple arg2 ;
  OldNameStruct::simple result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OldNameStruct **)&jarg1; 
  arg2 = (OldNameStruct::simple)jarg2; 
  result = (OldNameStruct::simple)(arg1)->renameTest3(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NewNameStruct_1renameTest4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::doublename arg2 ;
  OldNameStruct::doublename result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OldNameStruct **)&jarg1; 
  arg2 = (OldNameStruct::doublename)jarg2; 
  result = (OldNameStruct::doublename)(arg1)->renameTest4(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NewNameStruct_1renameTest5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::doublenametag arg2 ;
  OldNameStruct::doublenametag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OldNameStruct **)&jarg1; 
  arg2 = (OldNameStruct::doublenametag)jarg2; 
  result = (OldNameStruct::doublenametag)(arg1)->renameTest5(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_NewNameStruct_1renameTest6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  OldNameStruct::singlename arg2 ;
  OldNameStruct::singlename result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OldNameStruct **)&jarg1; 
  arg2 = (OldNameStruct::singlename)jarg2; 
  result = (OldNameStruct::singlename)(arg1)->renameTest6(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_new_1NewNameStruct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OldNameStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OldNameStruct *)new OldNameStruct();
  *(OldNameStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_delete_1NewNameStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OldNameStruct *arg1 = (OldNameStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OldNameStruct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_renameTest3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  OldNameStruct::enumeration arg1 ;
  OldNameStruct::enumeration result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OldNameStruct::enumeration)jarg1; 
  result = (OldNameStruct::enumeration)renameTest3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_renameTest4(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  OldNameStruct::simple arg1 ;
  OldNameStruct::simple result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OldNameStruct::simple)jarg1; 
  result = (OldNameStruct::simple)renameTest4(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_renameTest5(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  OldNameStruct::doublename arg1 ;
  OldNameStruct::doublename result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OldNameStruct::doublename)jarg1; 
  result = (OldNameStruct::doublename)renameTest5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_renameTest6(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  OldNameStruct::doublenametag arg1 ;
  OldNameStruct::doublenametag result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OldNameStruct::doublenametag)jarg1; 
  result = (OldNameStruct::doublenametag)renameTest6(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_renameTest7(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  OldNameStruct::singlename arg1 ;
  OldNameStruct::singlename result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (OldNameStruct::singlename)jarg1; 
  result = (OldNameStruct::singlename)renameTest7(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1oak_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TreesClass::trees result;
  
  (void)jenv;
  (void)jcls;
  result = (TreesClass::trees)TreesClass::oak;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1fir_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TreesClass::trees result;
  
  (void)jenv;
  (void)jcls;
  result = (TreesClass::trees)TreesClass::fir;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1pine_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TreesClass::trees result;
  
  (void)jenv;
  (void)jcls;
  result = (TreesClass::trees)TreesClass::pine;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::trees arg2 ;
  TreesClass::trees result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::trees)jarg2; 
  result = (TreesClass::trees)(arg1)->treesTest1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTest2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd1 arg2 ;
  TreesClass::treestd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd1)jarg2; 
  result = (TreesClass::treestd1)(arg1)->treesTest2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTest3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd2 arg2 ;
  TreesClass::treestd2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd2)jarg2; 
  result = (TreesClass::treestd2)(arg1)->treesTest3(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTest4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd3 arg2 ;
  TreesClass::treestd3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd3)jarg2; 
  result = (TreesClass::treestd3)(arg1)->treesTest4(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTest5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd4 arg2 ;
  TreesClass::treestd4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd4)jarg2; 
  result = (TreesClass::treestd4)(arg1)->treesTest5(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTest6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd5 arg2 ;
  TreesClass::treestd5 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd5)jarg2; 
  result = (TreesClass::treestd5)(arg1)->treesTest6(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTest7(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::trees arg2 ;
  TreesClass::trees result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::trees)jarg2; 
  result = (TreesClass::trees)(arg1)->treesTest7(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTest8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd1 arg2 ;
  TreesClass::treestd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd1)jarg2; 
  result = (TreesClass::treestd1)(arg1)->treesTest8(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTest9(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd2 arg2 ;
  TreesClass::treestd2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd2)jarg2; 
  result = (TreesClass::treestd2)(arg1)->treesTest9(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd3 arg2 ;
  TreesClass::treestd3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd3)jarg2; 
  result = (TreesClass::treestd3)(arg1)->treesTestA(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd4 arg2 ;
  TreesClass::treestd4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd4)jarg2; 
  result = (TreesClass::treestd4)(arg1)->treesTestB(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd5 arg2 ;
  TreesClass::treestd5 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd5)jarg2; 
  result = (TreesClass::treestd5)(arg1)->treesTestC(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::trees arg2 ;
  TreesClass::trees result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::trees)jarg2; 
  result = (TreesClass::trees)(arg1)->treesTestD(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestE(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd1 arg2 ;
  TreesClass::treestd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd1)jarg2; 
  result = (TreesClass::treestd1)(arg1)->treesTestE(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd2 arg2 ;
  TreesClass::treestd2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd2)jarg2; 
  result = (TreesClass::treestd2)(arg1)->treesTestF(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestG(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd3 arg2 ;
  TreesClass::treestd3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd3)jarg2; 
  result = (TreesClass::treestd3)(arg1)->treesTestG(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd4 arg2 ;
  TreesClass::treestd4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd4)jarg2; 
  result = (TreesClass::treestd4)(arg1)->treesTestH(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd5 arg2 ;
  TreesClass::treestd5 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd5)jarg2; 
  result = (TreesClass::treestd5)(arg1)->treesTestI(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestJ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::trees arg2 ;
  TreesClass::trees result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::trees)jarg2; 
  result = (TreesClass::trees)(arg1)->treesTestJ(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestK(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd1 arg2 ;
  TreesClass::treestd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd1)jarg2; 
  result = (TreesClass::treestd1)(arg1)->treesTestK(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd2 arg2 ;
  TreesClass::treestd2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd2)jarg2; 
  result = (TreesClass::treestd2)(arg1)->treesTestL(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd3 arg2 ;
  TreesClass::treestd3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd3)jarg2; 
  result = (TreesClass::treestd3)(arg1)->treesTestM(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd4 arg2 ;
  TreesClass::treestd4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd4)jarg2; 
  result = (TreesClass::treestd4)(arg1)->treesTestN(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_TreesClass_1treesTestO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  TreesClass *arg1 = (TreesClass *) 0 ;
  TreesClass::treestd5 arg2 ;
  TreesClass::treestd5 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TreesClass **)&jarg1; 
  arg2 = (TreesClass::treestd5)jarg2; 
  result = (TreesClass::treestd5)(arg1)->treesTestO(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_new_1TreesClass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TreesClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TreesClass *)new TreesClass();
  *(TreesClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_delete_1TreesClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TreesClass *arg1 = (TreesClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TreesClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTest1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::trees arg1 ;
  TreesClass::trees result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::trees)jarg1; 
  result = (TreesClass::trees)treesTest1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTest2(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::treestd1 arg1 ;
  TreesClass::treestd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::treestd1)jarg1; 
  result = (TreesClass::treestd1)treesTest2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTest3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::treestd2 arg1 ;
  TreesClass::treestd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::treestd2)jarg1; 
  result = (TreesClass::treestd2)treesTest3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTest4(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::treestd3 arg1 ;
  TreesClass::treestd3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::treestd3)jarg1; 
  result = (TreesClass::treestd3)treesTest4(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTest5(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::treestd4 arg1 ;
  TreesClass::treestd4 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::treestd4)jarg1; 
  result = (TreesClass::treestd4)treesTest5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTest6(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::treestd5 arg1 ;
  TreesClass::treestd5 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::treestd5)jarg1; 
  result = (TreesClass::treestd5)treesTest6(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTest7(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::trees arg1 ;
  TreesClass::trees result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::trees)jarg1; 
  result = (TreesClass::trees)treesTest7(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTest8(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::treestd1 arg1 ;
  TreesClass::treestd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::treestd1)jarg1; 
  result = (TreesClass::treestd1)treesTest8(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTest9(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::treestd2 arg1 ;
  TreesClass::treestd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::treestd2)jarg1; 
  result = (TreesClass::treestd2)treesTest9(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestA(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::treestd3 arg1 ;
  TreesClass::treestd3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::treestd3)jarg1; 
  result = (TreesClass::treestd3)treesTestA(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestB(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::treestd4 arg1 ;
  TreesClass::treestd4 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::treestd4)jarg1; 
  result = (TreesClass::treestd4)treesTestB(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestC(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::treestd5 arg1 ;
  TreesClass::treestd5 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::treestd5)jarg1; 
  result = (TreesClass::treestd5)treesTestC(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestD(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  treesglobaltd1 arg1 ;
  treesglobaltd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (treesglobaltd1)jarg1; 
  result = (treesglobaltd1)treesTestD(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestE(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  treesglobaltd2 arg1 ;
  treesglobaltd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (treesglobaltd2)jarg1; 
  result = (treesglobaltd2)treesTestE(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestF(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  treesglobaltd3 arg1 ;
  treesglobaltd3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (treesglobaltd3)jarg1; 
  result = (treesglobaltd3)treesTestF(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestG(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  treesglobaltd4 arg1 ;
  treesglobaltd4 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (treesglobaltd4)jarg1; 
  result = (treesglobaltd4)treesTestG(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestH(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  treesglobaltd5 arg1 ;
  treesglobaltd5 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (treesglobaltd5)jarg1; 
  result = (treesglobaltd5)treesTestH(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestI(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  treesglobaltd1 arg1 ;
  treesglobaltd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (treesglobaltd1)jarg1; 
  result = (treesglobaltd1)treesTestI(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestJ(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  treesglobaltd2 arg1 ;
  treesglobaltd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (treesglobaltd2)jarg1; 
  result = (treesglobaltd2)treesTestJ(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestK(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  treesglobaltd3 arg1 ;
  treesglobaltd3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (treesglobaltd3)jarg1; 
  result = (treesglobaltd3)treesTestK(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestL(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  treesglobaltd4 arg1 ;
  treesglobaltd4 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (treesglobaltd4)jarg1; 
  result = (treesglobaltd4)treesTestL(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestM(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  treesglobaltd5 arg1 ;
  treesglobaltd5 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (treesglobaltd5)jarg1; 
  result = (treesglobaltd5)treesTestM(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestO(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::trees arg1 ;
  TreesClass::trees result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::trees)jarg1; 
  result = (TreesClass::trees)treesTestO(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestP(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::treestd1 arg1 ;
  TreesClass::treestd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::treestd1)jarg1; 
  result = (TreesClass::treestd1)treesTestP(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestQ(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  TreesClass::treestd2 arg1 ;
  TreesClass::treestd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (TreesClass::treestd2)jarg1; 
  result = (TreesClass::treestd2)treesTestQ(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_treesTestR(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  treesglobaltd4 arg1 ;
  treesglobaltd4 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (treesglobaltd4)jarg1; 
  result = (treesglobaltd4)treesTestR(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1blonde_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hair result;
  
  (void)jenv;
  (void)jcls;
  result = (curly::greasy::HairStruct::hair)curly::greasy::HairStruct::blonde;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1ginger_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hair result;
  
  (void)jenv;
  (void)jcls;
  result = (curly::greasy::HairStruct::hair)curly::greasy::HairStruct::ginger;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1hairTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hair arg2 ;
  curly::greasy::HairStruct::hair result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hair)jarg2; 
  result = (curly::greasy::HairStruct::hair)(arg1)->hairTest1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1hairTest2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd1 arg2 ;
  curly::greasy::HairStruct::hairtd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd1)jarg2; 
  result = (curly::greasy::HairStruct::hairtd1)(arg1)->hairTest2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1hairTest3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd2 arg2 ;
  curly::greasy::HairStruct::hairtd2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd2)jarg2; 
  result = (curly::greasy::HairStruct::hairtd2)(arg1)->hairTest3(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1hairTest4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd3 arg2 ;
  curly::greasy::HairStruct::hairtd3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd3)jarg2; 
  result = (curly::greasy::HairStruct::hairtd3)(arg1)->hairTest4(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1hairTest5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd4 arg2 ;
  curly::greasy::HairStruct::hairtd4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd4)jarg2; 
  result = (curly::greasy::HairStruct::hairtd4)(arg1)->hairTest5(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1hairTest6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd5 arg2 ;
  curly::greasy::HairStruct::hairtd5 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd5)jarg2; 
  result = (curly::greasy::HairStruct::hairtd5)(arg1)->hairTest6(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1hairTest7(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd6 arg2 ;
  curly::greasy::HairStruct::hairtd6 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd6)jarg2; 
  result = (curly::greasy::HairStruct::hairtd6)(arg1)->hairTest7(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1hairTest8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd7 arg2 ;
  curly::greasy::HairStruct::hairtd7 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd7)jarg2; 
  result = (curly::greasy::HairStruct::hairtd7)(arg1)->hairTest8(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1hairTest9(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd8 arg2 ;
  curly::greasy::HairStruct::hairtd8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd8)jarg2; 
  result = (curly::greasy::HairStruct::hairtd8)(arg1)->hairTest9(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1hairTestA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtd9 arg2 ;
  curly::greasy::HairStruct::hairtd9 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd9)jarg2; 
  result = (curly::greasy::HairStruct::hairtd9)(arg1)->hairTestA(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1hairTestB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  curly::greasy::HairStruct::hairtdA arg2 ;
  curly::greasy::HairStruct::hairtdA result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtdA)jarg2; 
  result = (curly::greasy::HairStruct::hairtdA)(arg1)->hairTestB(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1colourTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  ::colour arg2 ;
  ::colour result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (::colour)jarg2; 
  result = (::colour)(arg1)->colourTest1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1colourTest2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  enum colour arg2 ;
  enum colour result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (enum colour)jarg2; 
  result = (enum colour)(arg1)->colourTest2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1namedanonTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  namedanon arg2 ;
  namedanon result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (namedanon)jarg2; 
  result = (namedanon)(arg1)->namedanonTest1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1namedanonspaceTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  AnonSpace::namedanonspace arg2 ;
  AnonSpace::namedanonspace result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (AnonSpace::namedanonspace)jarg2; 
  result = (AnonSpace::namedanonspace)(arg1)->namedanonspaceTest1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1treesGlobalTest1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd1 arg2 ;
  treesglobaltd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (treesglobaltd1)jarg2; 
  result = (treesglobaltd1)(arg1)->treesGlobalTest1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1treesGlobalTest2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd2 arg2 ;
  treesglobaltd2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (treesglobaltd2)jarg2; 
  result = (treesglobaltd2)(arg1)->treesGlobalTest2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1treesGlobalTest3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd3 arg2 ;
  treesglobaltd3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (treesglobaltd3)jarg2; 
  result = (treesglobaltd3)(arg1)->treesGlobalTest3(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1treesGlobalTest4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd4 arg2 ;
  treesglobaltd4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (treesglobaltd4)jarg2; 
  result = (treesglobaltd4)(arg1)->treesGlobalTest4(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_HairStruct_1treesGlobalTest5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  treesglobaltd5 arg2 ;
  treesglobaltd5 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  arg2 = (treesglobaltd5)jarg2; 
  result = (treesglobaltd5)(arg1)->treesGlobalTest5(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_new_1HairStruct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  curly::greasy::HairStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (curly::greasy::HairStruct *)new curly::greasy::HairStruct();
  *(curly::greasy::HairStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_delete_1HairStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  curly::greasy::HairStruct *arg1 = (curly::greasy::HairStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(curly::greasy::HairStruct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTest1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hair arg1 ;
  curly::greasy::HairStruct::hair result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hair)jarg1; 
  result = (curly::greasy::HairStruct::hair)curly::greasy::hairTest1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTest2(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd1 arg1 ;
  curly::greasy::HairStruct::hairtd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd1)jarg1; 
  result = (curly::greasy::HairStruct::hairtd1)curly::greasy::hairTest2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTest3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd2 arg1 ;
  curly::greasy::HairStruct::hairtd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd2)jarg1; 
  result = (curly::greasy::HairStruct::hairtd2)curly::greasy::hairTest3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTest4(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd3 arg1 ;
  curly::greasy::HairStruct::hairtd3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd3)jarg1; 
  result = (curly::greasy::HairStruct::hairtd3)curly::greasy::hairTest4(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTest5(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd4 arg1 ;
  curly::greasy::HairStruct::hairtd4 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd4)jarg1; 
  result = (curly::greasy::HairStruct::hairtd4)curly::greasy::hairTest5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTest6(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd5 arg1 ;
  curly::greasy::HairStruct::hairtd5 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd5)jarg1; 
  result = (curly::greasy::HairStruct::hairtd5)curly::greasy::hairTest6(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTest7(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd6 arg1 ;
  curly::greasy::HairStruct::hairtd6 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd6)jarg1; 
  result = (curly::greasy::HairStruct::hairtd6)curly::greasy::hairTest7(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTest8(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd7 arg1 ;
  curly::greasy::HairStruct::hairtd7 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd7)jarg1; 
  result = (curly::greasy::HairStruct::hairtd7)curly::greasy::hairTest8(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTest9(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd8 arg1 ;
  curly::greasy::HairStruct::hairtd8 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd8)jarg1; 
  result = (curly::greasy::HairStruct::hairtd8)curly::greasy::hairTest9(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestA(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd9 arg1 ;
  curly::greasy::HairStruct::hairtd9 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd9)jarg1; 
  result = (curly::greasy::HairStruct::hairtd9)curly::greasy::hairTestA(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestB(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtdA arg1 ;
  curly::greasy::HairStruct::hairtdA result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtdA)jarg1; 
  result = (curly::greasy::HairStruct::hairtdA)curly::greasy::hairTestB(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestC(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hair *arg1 = 0 ;
  curly::greasy::HairStruct::hair temp1 ;
  curly::greasy::HairStruct::hair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (curly::greasy::HairStruct::hair)jarg1; 
  arg1 = &temp1; 
  result = (curly::greasy::HairStruct::hair *) &curly::greasy::hairTestC((enum curly::greasy::HairStruct::hair const &)*arg1);
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestA1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hair arg1 ;
  curly::greasy::HairStruct::hair result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hair)jarg1; 
  result = (curly::greasy::HairStruct::hair)curly::hairTestA1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestA2(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd1 arg1 ;
  curly::greasy::HairStruct::hairtd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd1)jarg1; 
  result = (curly::greasy::HairStruct::hairtd1)curly::hairTestA2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestA3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd2 arg1 ;
  curly::greasy::HairStruct::hairtd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd2)jarg1; 
  result = (curly::greasy::HairStruct::hairtd2)curly::hairTestA3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestA4(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd3 arg1 ;
  curly::greasy::HairStruct::hairtd3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd3)jarg1; 
  result = (curly::greasy::HairStruct::hairtd3)curly::hairTestA4(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestA5(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd4 arg1 ;
  curly::greasy::HairStruct::hairtd4 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd4)jarg1; 
  result = (curly::greasy::HairStruct::hairtd4)curly::hairTestA5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestA6(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd5 arg1 ;
  curly::greasy::HairStruct::hairtd5 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd5)jarg1; 
  result = (curly::greasy::HairStruct::hairtd5)curly::hairTestA6(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestA7(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd6 arg1 ;
  curly::greasy::HairStruct::hairtd6 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd6)jarg1; 
  result = (curly::greasy::HairStruct::hairtd6)curly::hairTestA7(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestA8(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd7 arg1 ;
  curly::greasy::HairStruct::hairtd7 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd7)jarg1; 
  result = (curly::greasy::HairStruct::hairtd7)curly::hairTestA8(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestA9(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd8 arg1 ;
  curly::greasy::HairStruct::hairtd8 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd8)jarg1; 
  result = (curly::greasy::HairStruct::hairtd8)curly::hairTestA9(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestAA(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd9 arg1 ;
  curly::greasy::HairStruct::hairtd9 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd9)jarg1; 
  result = (curly::greasy::HairStruct::hairtd9)curly::hairTestAA(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestAB(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtdA arg1 ;
  curly::greasy::HairStruct::hairtdA result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtdA)jarg1; 
  result = (curly::greasy::HairStruct::hairtdA)curly::hairTestAB(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestAC(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtdA *arg1 = 0 ;
  curly::greasy::HairStruct::hairtdA temp1 ;
  curly::greasy::HairStruct::hairtdA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (curly::greasy::HairStruct::hairtdA)jarg1; 
  arg1 = &temp1; 
  result = (curly::greasy::HairStruct::hairtdA *) &curly::hairTestAC((enum curly::greasy::HairStruct::hair const &)*arg1);
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestB1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hair arg1 ;
  curly::greasy::HairStruct::hair result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hair)jarg1; 
  result = (curly::greasy::HairStruct::hair)hairTestB1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestB2(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd1 arg1 ;
  curly::greasy::HairStruct::hairtd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd1)jarg1; 
  result = (curly::greasy::HairStruct::hairtd1)hairTestB2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestB3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd2 arg1 ;
  curly::greasy::HairStruct::hairtd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd2)jarg1; 
  result = (curly::greasy::HairStruct::hairtd2)hairTestB3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestB4(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd3 arg1 ;
  curly::greasy::HairStruct::hairtd3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd3)jarg1; 
  result = (curly::greasy::HairStruct::hairtd3)hairTestB4(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestB5(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd4 arg1 ;
  curly::greasy::HairStruct::hairtd4 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd4)jarg1; 
  result = (curly::greasy::HairStruct::hairtd4)hairTestB5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestB6(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd5 arg1 ;
  curly::greasy::HairStruct::hairtd5 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd5)jarg1; 
  result = (curly::greasy::HairStruct::hairtd5)hairTestB6(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestB7(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd6 arg1 ;
  curly::greasy::HairStruct::hairtd6 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd6)jarg1; 
  result = (curly::greasy::HairStruct::hairtd6)hairTestB7(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestB8(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd7 arg1 ;
  curly::greasy::HairStruct::hairtd7 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd7)jarg1; 
  result = (curly::greasy::HairStruct::hairtd7)hairTestB8(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestB9(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd8 arg1 ;
  curly::greasy::HairStruct::hairtd8 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd8)jarg1; 
  result = (curly::greasy::HairStruct::hairtd8)hairTestB9(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestBA(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtd9 arg1 ;
  curly::greasy::HairStruct::hairtd9 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtd9)jarg1; 
  result = (curly::greasy::HairStruct::hairtd9)hairTestBA(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestBB(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtdA arg1 ;
  curly::greasy::HairStruct::hairtdA result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (curly::greasy::HairStruct::hairtdA)jarg1; 
  result = (curly::greasy::HairStruct::hairtdA)hairTestBB(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestBC(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  curly::greasy::HairStruct::hairtdA *arg1 = 0 ;
  curly::greasy::HairStruct::hairtdA temp1 ;
  curly::greasy::HairStruct::hairtdA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (curly::greasy::HairStruct::hairtdA)jarg1; 
  arg1 = &temp1; 
  result = (curly::greasy::HairStruct::hairtdA *) &hairTestBC((enum curly::greasy::HairStruct::hair const &)*arg1);
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestC1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  HairStruct::hair arg1 ;
  HairStruct::hair result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (HairStruct::hair)jarg1; 
  result = (HairStruct::hair)hairTestC1(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestC2(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  HairStruct::hairtd1 arg1 ;
  HairStruct::hairtd1 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (HairStruct::hairtd1)jarg1; 
  result = (HairStruct::hairtd1)hairTestC2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestC3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  HairStruct::hairtd2 arg1 ;
  HairStruct::hairtd2 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (HairStruct::hairtd2)jarg1; 
  result = (HairStruct::hairtd2)hairTestC3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestC4(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  HairStruct::hairtd3 arg1 ;
  HairStruct::hairtd3 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (HairStruct::hairtd3)jarg1; 
  result = (HairStruct::hairtd3)hairTestC4(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestC5(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  HairStruct::hairtd4 arg1 ;
  HairStruct::hairtd4 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (HairStruct::hairtd4)jarg1; 
  result = (HairStruct::hairtd4)hairTestC5(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestC6(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  HairStruct::hairtd5 arg1 ;
  HairStruct::hairtd5 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (HairStruct::hairtd5)jarg1; 
  result = (HairStruct::hairtd5)hairTestC6(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestC7(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  HairStruct::hairtd6 arg1 ;
  HairStruct::hairtd6 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (HairStruct::hairtd6)jarg1; 
  result = (HairStruct::hairtd6)hairTestC7(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestC8(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  HairStruct::hairtd7 arg1 ;
  HairStruct::hairtd7 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (HairStruct::hairtd7)jarg1; 
  result = (HairStruct::hairtd7)hairTestC8(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestC9(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  HairStruct::hairtd8 arg1 ;
  HairStruct::hairtd8 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (HairStruct::hairtd8)jarg1; 
  result = (HairStruct::hairtd8)hairTestC9(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestCA(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  HairStruct::hairtd9 arg1 ;
  HairStruct::hairtd9 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (HairStruct::hairtd9)jarg1; 
  result = (HairStruct::hairtd9)hairTestCA(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestCB(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  HairStruct::hairtdA arg1 ;
  HairStruct::hairtdA result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (HairStruct::hairtdA)jarg1; 
  result = (HairStruct::hairtdA)hairTestCB(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_hairTestCC(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  HairStruct::hairtdA *arg1 = 0 ;
  HairStruct::hairtdA temp1 ;
  HairStruct::hairtdA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (HairStruct::hairtdA)jarg1; 
  arg1 = &temp1; 
  result = (HairStruct::hairtdA *) &hairTestCC((enum curly::greasy::HairStruct::hair const &)*arg1);
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_FirStruct_1hairTestFir1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hair arg2 ;
  curly::greasy::HairStruct::hair result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::FirStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hair)jarg2; 
  result = (curly::greasy::HairStruct::hair)(arg1)->hairTestFir1(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_FirStruct_1hairTestFir2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd1 arg2 ;
  curly::greasy::HairStruct::hairtd1 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::FirStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd1)jarg2; 
  result = (curly::greasy::HairStruct::hairtd1)(arg1)->hairTestFir2(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_FirStruct_1hairTestFir3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd2 arg2 ;
  curly::greasy::HairStruct::hairtd2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::FirStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd2)jarg2; 
  result = (curly::greasy::HairStruct::hairtd2)(arg1)->hairTestFir3(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_FirStruct_1hairTestFir4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd3 arg2 ;
  curly::greasy::HairStruct::hairtd3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::FirStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd3)jarg2; 
  result = (curly::greasy::HairStruct::hairtd3)(arg1)->hairTestFir4(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_FirStruct_1hairTestFir5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd4 arg2 ;
  curly::greasy::HairStruct::hairtd4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::FirStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd4)jarg2; 
  result = (curly::greasy::HairStruct::hairtd4)(arg1)->hairTestFir5(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_FirStruct_1hairTestFir6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd5 arg2 ;
  curly::greasy::HairStruct::hairtd5 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::FirStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd5)jarg2; 
  result = (curly::greasy::HairStruct::hairtd5)(arg1)->hairTestFir6(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_FirStruct_1hairTestFir7(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd6 arg2 ;
  curly::greasy::HairStruct::hairtd6 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::FirStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd6)jarg2; 
  result = (curly::greasy::HairStruct::hairtd6)(arg1)->hairTestFir7(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_FirStruct_1hairTestFir8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd7 arg2 ;
  curly::greasy::HairStruct::hairtd7 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::FirStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd7)jarg2; 
  result = (curly::greasy::HairStruct::hairtd7)(arg1)->hairTestFir8(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_FirStruct_1hairTestFir9(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd8 arg2 ;
  curly::greasy::HairStruct::hairtd8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::FirStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd8)jarg2; 
  result = (curly::greasy::HairStruct::hairtd8)(arg1)->hairTestFir9(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_FirStruct_1hairTestFirA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtd9 arg2 ;
  curly::greasy::HairStruct::hairtd9 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::FirStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtd9)jarg2; 
  result = (curly::greasy::HairStruct::hairtd9)(arg1)->hairTestFirA(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_FirStruct_1hairTestFirB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  curly::greasy::HairStruct::hairtdA arg2 ;
  curly::greasy::HairStruct::hairtdA result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(curly::greasy::FirStruct **)&jarg1; 
  arg2 = (curly::greasy::HairStruct::hairtdA)jarg2; 
  result = (curly::greasy::HairStruct::hairtdA)(arg1)->hairTestFirB(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_new_1FirStruct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  curly::greasy::FirStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (curly::greasy::FirStruct *)new curly::greasy::FirStruct();
  *(curly::greasy::FirStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_delete_1FirStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  curly::greasy::FirStruct *arg1 = (curly::greasy::FirStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(curly::greasy::FirStruct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_Obscure_1one_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Obscure::One result;
  
  (void)jenv;
  (void)jcls;
  result = (Obscure::One)Obscure::one;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_Obscure_1two_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Obscure::Two result;
  
  (void)jenv;
  (void)jcls;
  result = (Obscure::Two)Obscure::two;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_Obscure_1twoagain_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Obscure::Two result;
  
  (void)jenv;
  (void)jcls;
  result = (Obscure::Two)Obscure::twoagain;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_new_1Obscure(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Obscure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Obscure *)new Obscure();
  *(Obscure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_delete_1Obscure(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Obscure *arg1 = (Obscure *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Obscure **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_globalinstance1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)globalinstance1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_globalinstance2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)globalinstance2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_globalinstance3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)globalinstance3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_GlobalInstance_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if (sizeof(int) == sizeof(GlobalInstance)) *(int*)(void*)&(GlobalInstance) = arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_GlobalInstance_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)GlobalInstance;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_Instances_1memberinstance1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Instances::memberinstance1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_Instances_1memberinstance2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Instances::memberinstance2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_Instances_1memberinstance3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Instances::memberinstance3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_Instances_1MemberInstance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Instances *arg1 = (Instances *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Instances **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1 && sizeof(int) == sizeof((arg1)->MemberInstance)) *(int*)(void*)&((arg1)->MemberInstance) = arg2;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_Instances_1MemberInstance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Instances *arg1 = (Instances *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Instances **)&jarg1; 
  result = (int) ((arg1)->MemberInstance);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_new_1Instances(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Instances *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Instances *)new Instances();
  *(Instances **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_delete_1Instances(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Instances *arg1 = (Instances *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Instances **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_IgnoreTest_1ignoreA_1three_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  IgnoreTest::IgnoreA result;
  
  (void)jenv;
  (void)jcls;
  result = (IgnoreTest::IgnoreA)IgnoreTest::ignoreA_three;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_IgnoreTest_1ignoreA_1thirteen_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  IgnoreTest::IgnoreA result;
  
  (void)jenv;
  (void)jcls;
  result = (IgnoreTest::IgnoreA)IgnoreTest::ignoreA_thirteen;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_new_1IgnoreTest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IgnoreTest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IgnoreTest *)new IgnoreTest();
  *(IgnoreTest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_delete_1IgnoreTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IgnoreTest *arg1 = (IgnoreTest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IgnoreTest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_ignoreATest(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  IgnoreTest::IgnoreA arg1 ;
  IgnoreTest::IgnoreA result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (IgnoreTest::IgnoreA)jarg1; 
  result = (IgnoreTest::IgnoreA)ignoreATest(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_ignoreBTest(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  IgnoreTest::IgnoreB arg1 ;
  IgnoreTest::IgnoreB result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (IgnoreTest::IgnoreB)jarg1; 
  result = (IgnoreTest::IgnoreB)ignoreBTest(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_ignoreCTest(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  IgnoreTest::IgnoreC arg1 ;
  IgnoreTest::IgnoreC result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (IgnoreTest::IgnoreC)jarg1; 
  result = (IgnoreTest::IgnoreC)ignoreCTest(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_ignoreDTest(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  IgnoreTest::IgnoreD arg1 ;
  IgnoreTest::IgnoreD result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (IgnoreTest::IgnoreD)jarg1; 
  result = (IgnoreTest::IgnoreD)ignoreDTest(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_ignoreETest(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  IgnoreTest::IgnoreE arg1 ;
  IgnoreTest::IgnoreE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (IgnoreTest::IgnoreE)jarg1; 
  result = (IgnoreTest::IgnoreE)ignoreETest(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_repeatTest(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  RepeatSpace::repeat arg1 ;
  RepeatSpace::repeat result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (RepeatSpace::repeat)jarg1; 
  result = (RepeatSpace::repeat)RepeatSpace::repeatTest(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_differentTypesTest(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  DifferentSpace::DifferentTypes arg1 ;
  DifferentSpace::DifferentTypes result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (DifferentSpace::DifferentTypes)jarg1; 
  result = (DifferentSpace::DifferentTypes)DifferentSpace::differentTypesTest(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_globalDifferentTypesTest(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)DifferentSpace::globalDifferentTypesTest(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_typeint_1noconst_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DifferentSpace::DifferentTypesNoConst result;
  
  (void)jenv;
  (void)jcls;
  result = (DifferentSpace::DifferentTypesNoConst)DifferentSpace::typeint_noconst;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_typeboolfalse_1noconst_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DifferentSpace::DifferentTypesNoConst result;
  
  (void)jenv;
  (void)jcls;
  result = (DifferentSpace::DifferentTypesNoConst)DifferentSpace::typeboolfalse_noconst;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_typebooltrue_1noconst_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DifferentSpace::DifferentTypesNoConst result;
  
  (void)jenv;
  (void)jcls;
  result = (DifferentSpace::DifferentTypesNoConst)DifferentSpace::typebooltrue_noconst;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_typebooltwo_1noconst_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DifferentSpace::DifferentTypesNoConst result;
  
  (void)jenv;
  (void)jcls;
  result = (DifferentSpace::DifferentTypesNoConst)DifferentSpace::typebooltwo_noconst;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_typechar_1noconst_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DifferentSpace::DifferentTypesNoConst result;
  
  (void)jenv;
  (void)jcls;
  result = (DifferentSpace::DifferentTypesNoConst)DifferentSpace::typechar_noconst;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_typedefaultint_1noconst_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DifferentSpace::DifferentTypesNoConst result;
  
  (void)jenv;
  (void)jcls;
  result = (DifferentSpace::DifferentTypesNoConst)DifferentSpace::typedefaultint_noconst;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_global_1typeint_1noconst_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)DifferentSpace::global_typeint_noconst;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_global_1typeboolfalse_1noconst_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)DifferentSpace::global_typeboolfalse_noconst;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_global_1typebooltrue_1noconst_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)DifferentSpace::global_typebooltrue_noconst;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_global_1typebooltwo_1noconst_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)DifferentSpace::global_typebooltwo_noconst;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_global_1typechar_1noconst_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)DifferentSpace::global_typechar_noconst;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_global_1typedefaultint_1noconst_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)DifferentSpace::global_typedefaultint_noconst;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_enum_1thorough_1typeunsafe_enum_1thorough_1typeunsafeJNI_FirStruct_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(curly::greasy::HairStruct **)&baseptr = *(curly::greasy::FirStruct **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

