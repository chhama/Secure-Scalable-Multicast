/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


class Simple {};


  namespace NS 
  {
    
    class SimpleNS {
    public:
      void method() const {}
      void afunction() {}
    };
  }
  


template<class T> void foobar(T t) {}


template<class T> class SimpleTemplate {
 public:
};
 


template<class T> class Template {
public:
  Template(){}

  Template(const Template&){}
  ~Template(){}
  void foo(){}
  void bar(const int &t) const {}
#ifdef SWIG
    %extend {
      T& get(int i) const {
        throw 1;
      }
      void set(const T &t) {}
    }
#endif
};

SWIGINTERN int &Template_Sl_int_Sg__get(Template< int > const *self,int i){
        throw 1;
      }
SWIGINTERN void Template_Sl_int_Sg__set(Template< int > *self,int const &t){}

namespace Space {
  struct WildCards {
    virtual ~WildCards() {}
    virtual WildCards* incy(int a) const { return 0; }
    virtual WildCards* wincy(int a) { return 0; }
    virtual WildCards* spider(int a) const { return 0; }
  };
}


namespace Space {
  struct Animals {
    Animals(int a = 0, double d = 0.0) {}
    void* lions(int a = 0, double d = 0.0) const { return 0; }
    void* leopards(int a = 0, double d = 0.0) { return 0; }
    int cheetahs(int a = 0, double d = 0.0) const { return 0; }
    int jackal(int a = 0, double d = 0.0) { return 0; }
  };
}


namespace Space {
  struct Base {
    int operator+=(int) { return 0; }    
    virtual const char** virtualmethod(int a) const { return 0; }
    virtual ~Base() {}
  };
  struct Derived : Base {
    virtual const char** virtualmethod(int a) const { return 0; }
  };
}


  class ConversionOperators {
  public:
    operator bool() { return false; }
    operator unsigned int() { return 0; }
  };


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_features_featuresJNI_new_1Simple(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Simple *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Simple *)new Simple(); /*Simple::Simple*/
  *(Simple **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_delete_1Simple(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Simple *arg1 = (Simple *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Simple **)&jarg1; 
  delete arg1; /*Simple::~Simple*/
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_SimpleNS_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  NS::SimpleNS *arg1 = (NS::SimpleNS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NS::SimpleNS **)&jarg1; 
  ((NS::SimpleNS const *)arg1)->method(); /*NS::Simple::method() const*/
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_SimpleNS_1afunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  NS::SimpleNS *arg1 = (NS::SimpleNS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NS::SimpleNS **)&jarg1; 
  (arg1)->afunction(); /*NS::Simple::afunction()*/
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_new_1SimpleNS(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NS::SimpleNS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NS::SimpleNS *)new NS::SimpleNS(); /*NS::SimpleNS::SimpleNS*/
  *(NS::SimpleNS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_delete_1SimpleNS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NS::SimpleNS *arg1 = (NS::SimpleNS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NS::SimpleNS **)&jarg1; 
  delete arg1; /*NS::SimpleNS::~SimpleNS*/
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_FooBarInt(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  foobar< int >(arg1); /*foobar<int>*/
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_new_1SimpleInt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SimpleTemplate< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SimpleTemplate< int > *)new SimpleTemplate< int >(); /*SimpleTemplate<int>::SimpleTemplate<int>*/
  *(SimpleTemplate< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_delete_1SimpleInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SimpleTemplate< int > *arg1 = (SimpleTemplate< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SimpleTemplate< int > **)&jarg1; 
  delete arg1; /*SimpleTemplate<int>::~SimpleTemplate*/
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_new_1TemplateInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Template< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Template< int > *)new Template< int >(); /*Template<int>::Template<int>*/
  *(Template< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_new_1TemplateInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Template< int > *arg1 = 0 ;
  Template< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Template< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Template< int > const & reference is null");
    return 0;
  } 
  result = (Template< int > *)new Template< int >((Template< int > const &)*arg1); /*Template<int>::Template<int>(const Template&)*/
  *(Template< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_delete_1TemplateInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Template< int > *arg1 = (Template< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Template< int > **)&jarg1; 
  delete arg1; /*Template<int>::~Template*/
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_TemplateInt_1foo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Template< int > *arg1 = (Template< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Template< int > **)&jarg1; 
  (arg1)->foo(); /*Template<int>::foo*/
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_TemplateInt_1bar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Template< int > *arg1 = (Template< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Template< int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  ((Template< int > const *)arg1)->bar((int const &)*arg2); /*Template<int>::bar(const int &t) const*/
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_TemplateInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Template< int > *arg1 = (Template< int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Template< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int *) &Template_Sl_int_Sg__get((Template< int > const *)arg1,arg2); /*Template<int>::get*/
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_TemplateInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Template< int > *arg1 = (Template< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Template< int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  Template_Sl_int_Sg__set(arg1,(int const &)*arg2); /*Template<int>::set(const int &t)*/
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_delete_1WildCards(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::WildCards *arg1 = (Space::WildCards *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::WildCards **)&jarg1; 
  delete arg1; /* Space::WildCards::WildCards() */
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_WildCards_1incy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Space::WildCards *arg1 = (Space::WildCards *) 0 ;
  int arg2 ;
  Space::WildCards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::WildCards **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Space::WildCards *)((Space::WildCards const *)arg1)->incy(arg2); /* *::incy(int a) const */
  *(Space::WildCards **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_WildCards_1wincy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Space::WildCards *arg1 = (Space::WildCards *) 0 ;
  int arg2 ;
  Space::WildCards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::WildCards **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Space::WildCards *)(arg1)->wincy(arg2); /* *::wincy(int a) */
  *(Space::WildCards **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_WildCards_1spider(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Space::WildCards *arg1 = (Space::WildCards *) 0 ;
  int arg2 ;
  Space::WildCards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::WildCards **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (Space::WildCards *)((Space::WildCards const *)arg1)->spider(arg2); /* *::spider */
  *(Space::WildCards **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_new_1WildCards(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::WildCards *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::WildCards *)new Space::WildCards(); /* Space::WildCards::WildCards() */
  *(Space::WildCards **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_new_1Animals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  Space::Animals *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (Space::Animals *)new Space::Animals(arg1,arg2); /* Space::Animals::Animals(int a = 0, double d = 0.0) */
  *(Space::Animals **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_new_1Animals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  Space::Animals *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (Space::Animals *)new Space::Animals(arg1); /* Space::Animals::Animals(int a = 0, double d = 0.0) */
  *(Space::Animals **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_new_1Animals_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Animals *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::Animals *)new Space::Animals(); /* Space::Animals::Animals(int a = 0, double d = 0.0) */
  *(Space::Animals **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_Animals_1lions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  Space::Animals *arg1 = (Space::Animals *) 0 ;
  int arg2 ;
  double arg3 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Animals **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (void *)((Space::Animals const *)arg1)->lions(arg2,arg3); /* Space::Animals::lions(int a = 0, double d = 0.0) const */
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_Animals_1lions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Space::Animals *arg1 = (Space::Animals *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Animals **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)((Space::Animals const *)arg1)->lions(arg2); /* Space::Animals::lions(int a = 0, double d = 0.0) const */
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_Animals_1lions_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Animals *arg1 = (Space::Animals *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Animals **)&jarg1; 
  result = (void *)((Space::Animals const *)arg1)->lions(); /* Space::Animals::lions(int a = 0, double d = 0.0) const */
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_Animals_1leopards_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  Space::Animals *arg1 = (Space::Animals *) 0 ;
  int arg2 ;
  double arg3 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Animals **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (void *)(arg1)->leopards(arg2,arg3); /* Space::Animals::leopards(int a = 0, double d = 0.0) */
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_Animals_1leopards_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Space::Animals *arg1 = (Space::Animals *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Animals **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)(arg1)->leopards(arg2); /* Space::Animals::leopards(int a = 0, double d = 0.0) */
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_Animals_1leopards_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Animals *arg1 = (Space::Animals *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Animals **)&jarg1; 
  result = (void *)(arg1)->leopards(); /* Space::Animals::leopards(int a = 0, double d = 0.0) */
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_features_featuresJNI_Animals_1cheetahs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  Space::Animals *arg1 = (Space::Animals *) 0 ;
  int arg2 ;
  double arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Animals **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (int)((Space::Animals const *)arg1)->cheetahs(arg2,arg3); /* *::cheetahs(int a = 0, double d = 0.0) const */
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_features_featuresJNI_Animals_1cheetahs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Space::Animals *arg1 = (Space::Animals *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Animals **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((Space::Animals const *)arg1)->cheetahs(arg2); /* *::cheetahs(int a = 0, double d = 0.0) const */
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_features_featuresJNI_Animals_1cheetahs_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Space::Animals *arg1 = (Space::Animals *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Animals **)&jarg1; 
  result = (int)((Space::Animals const *)arg1)->cheetahs(); /* *::cheetahs(int a = 0, double d = 0.0) const */
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_features_featuresJNI_Animals_1jackal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  Space::Animals *arg1 = (Space::Animals *) 0 ;
  int arg2 ;
  double arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Animals **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (int)(arg1)->jackal(arg2,arg3); /* *::jackal(int a = 0, double d = 0.0) */
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_features_featuresJNI_Animals_1jackal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Space::Animals *arg1 = (Space::Animals *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Animals **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->jackal(arg2); /* *::jackal(int a = 0, double d = 0.0) */
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_features_featuresJNI_Animals_1jackal_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Space::Animals *arg1 = (Space::Animals *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Animals **)&jarg1; 
  result = (int)(arg1)->jackal(); /* *::jackal(int a = 0, double d = 0.0) */
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_delete_1Animals(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Animals *arg1 = (Space::Animals *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::Animals **)&jarg1; 
  delete arg1; /* Space::Animals::~Animals() */
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_Base_1virtualmethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Space::Base *arg1 = (Space::Base *) 0 ;
  int arg2 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Base **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char **)((Space::Base const *)arg1)->virtualmethod(arg2); /* Space::Base::virtualmethod(int a) const */
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_delete_1Base(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Base *arg1 = (Space::Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::Base **)&jarg1; 
  delete arg1; /* Space::Base::~Base() */
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_new_1Base(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::Base *)new Space::Base(); /* Space::Base::Base() */
  *(Space::Base **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_Derived_1virtualmethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Space::Derived *arg1 = (Space::Derived *) 0 ;
  int arg2 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::Derived **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char **)((Space::Derived const *)arg1)->virtualmethod(arg2); /* Space::Base::virtualmethod(int a) const */
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_new_1Derived(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Derived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::Derived *)new Space::Derived(); /* Space::Derived::Derived() */
  *(Space::Derived **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_delete_1Derived(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Derived *arg1 = (Space::Derived *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::Derived **)&jarg1; 
  delete arg1; /* Space::Derived::~Derived() */
}


SWIGEXPORT jboolean JNICALL Java_features_featuresJNI_ConversionOperators_1opbool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ConversionOperators *arg1 = (ConversionOperators *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOperators **)&jarg1; 
  result = (bool)(arg1)->operator bool(); /* ConversionOperators::operator bool */
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_ConversionOperators_1opuint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConversionOperators *arg1 = (ConversionOperators *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConversionOperators **)&jarg1; 
  result = (unsigned int)(arg1)->operator unsigned int(); /* ConversionOperators::unsigned int*/
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_new_1ConversionOperators(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ConversionOperators *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ConversionOperators *)new ConversionOperators(); /* ConversionOperators::ConversionOperators() */
  *(ConversionOperators **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_features_featuresJNI_delete_1ConversionOperators(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConversionOperators *arg1 = (ConversionOperators *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConversionOperators **)&jarg1; 
  delete arg1; /* ConversionOperators::~ConversionOperators() */
}


SWIGEXPORT jlong JNICALL Java_features_featuresJNI_Derived_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Space::Base **)&baseptr = *(Space::Derived **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

