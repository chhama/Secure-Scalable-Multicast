/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package java_prepost;

public class PrePostTest {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected PrePostTest(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PrePostTest obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        java_prepostJNI.delete_PrePostTest(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public PrePostTest() {
    this(java_prepostJNI.new_PrePostTest__SWIG_0(), true);
  }

  static private long SwigConstructPrePostTest(double[] v) {
    DoubleVector dv = new DoubleVector();
    try {
      return java_prepostJNI.new_PrePostTest__SWIG_1(DoubleVector.getCPtr(dv), dv);
    } finally {
      int countv = (int)dv.size();
      v = new double[countv];
      for (int i=0; i<countv; ++i) {
        v[i] = dv.get(i);
      }
    }
  }

  public PrePostTest(double[] v) {
    this(PrePostTest.SwigConstructPrePostTest(v), true);
  }

  public boolean method(double[] v) {
    DoubleVector dv = new DoubleVector();
    try {
      return java_prepostJNI.PrePostTest_method(swigCPtr, this, DoubleVector.getCPtr(dv), dv);
    } finally {
      int countv = (int)dv.size();
      v = new double[countv];
      for (int i=0; i<countv; ++i) {
        v[i] = dv.get(i);
      }
    }
  }

  public static boolean staticmethod(double[] v) {
    DoubleVector dv = new DoubleVector();
    try {
      return java_prepostJNI.PrePostTest_staticmethod(DoubleVector.getCPtr(dv), dv);
    } finally {
      int countv = (int)dv.size();
      v = new double[countv];
      for (int i=0; i<countv; ++i) {
        v[i] = dv.get(i);
      }
    }
  }

}
