/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package java_prepost;

public class PrePost2 {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected PrePost2(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PrePost2 obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        java_prepostJNI.delete_PrePost2(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public PrePost2() {
    this(java_prepostJNI.new_PrePost2__SWIG_0(), true);
  }

  static private long SwigConstructPrePost2(double[] v, double[] v2, double[] vpre, DoubleVector vpost) {
    DoubleVector dv = new DoubleVector();
    DoubleVector dv2 = new DoubleVector();
    DoubleVector dvpre = new DoubleVector();
    for (int i=0; i<vpre.length; ++i) {
      double d = vpre[i];
      dvpre.add(d);
    }
    try {
      return java_prepostJNI.new_PrePost2__SWIG_1(DoubleVector.getCPtr(dv), dv, DoubleVector.getCPtr(dv2), dv2, DoubleVector.getCPtr(dvpre), dvpre, DoubleVector.getCPtr(vpost), vpost);
    } finally {
      int countv = (int)dv.size();
      v = new double[countv];
      for (int i=0; i<countv; ++i) {
        v[i] = dv.get(i);
      }
      int countv2 = (int)dv2.size();
      v2 = new double[countv2];
      for (int i=0; i<countv2; ++i) {
        v2[i] = dv2.get(i);
      }
      int size = (int)vpost.size();
      for (int i=0; i<size; ++i) {
        vpost.set(i, vpost.get(i)/100);
      }
    }
  }

  public PrePost2(double[] v, double[] v2, double[] vpre, DoubleVector vpost) {
    this(PrePost2.SwigConstructPrePost2(v, v2, vpre, vpost), true);
  }

  public boolean method(double[] v, double[] v2, double[] vpre, DoubleVector vpost) {
    DoubleVector dv = new DoubleVector();
    DoubleVector dv2 = new DoubleVector();
    DoubleVector dvpre = new DoubleVector();
    for (int i=0; i<vpre.length; ++i) {
      double d = vpre[i];
      dvpre.add(d);
    }
    try {
      return java_prepostJNI.PrePost2_method(swigCPtr, this, DoubleVector.getCPtr(dv), dv, DoubleVector.getCPtr(dv2), dv2, DoubleVector.getCPtr(dvpre), dvpre, DoubleVector.getCPtr(vpost), vpost);
    } finally {
      int countv = (int)dv.size();
      v = new double[countv];
      for (int i=0; i<countv; ++i) {
        v[i] = dv.get(i);
      }
      int countv2 = (int)dv2.size();
      v2 = new double[countv2];
      for (int i=0; i<countv2; ++i) {
        v2[i] = dv2.get(i);
      }
      int size = (int)vpost.size();
      for (int i=0; i<size; ++i) {
        vpost.set(i, vpost.get(i)/100);
      }
    }
  }

  public static boolean staticmethod(double[] v, double[] v2, double[] vpre, DoubleVector vpost) {
    DoubleVector dv = new DoubleVector();
    DoubleVector dv2 = new DoubleVector();
    DoubleVector dvpre = new DoubleVector();
    for (int i=0; i<vpre.length; ++i) {
      double d = vpre[i];
      dvpre.add(d);
    }
    try {
      return java_prepostJNI.PrePost2_staticmethod(DoubleVector.getCPtr(dv), dv, DoubleVector.getCPtr(dv2), dv2, DoubleVector.getCPtr(dvpre), dvpre, DoubleVector.getCPtr(vpost), vpost);
    } finally {
      int countv = (int)dv.size();
      v = new double[countv];
      for (int i=0; i<countv; ++i) {
        v[i] = dv.get(i);
      }
      int countv2 = (int)dv2.size();
      v2 = new double[countv2];
      for (int i=0; i<countv2; ++i) {
        v2[i] = dv2.get(i);
      }
      int size = (int)vpost.size();
      for (int i=0; i<size; ++i) {
        vpost.set(i, vpost.get(i)/100);
      }
    }
  }

}
