/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




namespace another {
struct map {
  int val;
  map(int x) : val(x) {}
};
}


#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <string>

SWIGINTERN int const &std_map_Sl_int_Sc_int_Sg__get(std::map< int,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_int_Sg__set(std::map< int,int > *self,int const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_int_Sg__del(std::map< int,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_int_Sg__has_key(std::map< int,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN int const &std_map_Sl_std_string_Sc_int_Sg__get(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__set(std::map< std::string,int > *self,std::string const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__del(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg__has_key(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                return i != self->end();
            }


double valueAverage(std::map<std::string, int> m) {
  if (m.size() == 0) {
    return 0.0;
  }
    
  double a = 0.0;
  for (std::map<std::string, int>::iterator i = m.begin(); i != m.end(); i++) {
    a += i->second;
  }
    
  return a / m.size();
}
    
std::string stringifyKeys(std::map<std::string, int> m) {
  std::string a;
  for (std::map<std::string, int>::iterator i = m.begin(); i != m.end(); i++) {
    a += " " + i->first;
  }
  return a;
}

struct Struct {
  double num;
  Struct() : num(0.0) {}
  Struct(double d) : num(d) {}
  bool operator<(const Struct &other) const { return num < other.num; }
  bool operator==(const Struct &other) const { return num == other.num; }
};


SWIGINTERN int *const &std_map_Sl_int_Sc_int_Sm__Sg__get(std::map< int,int * > *self,int const &key){
                std::map<int,int * >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_int_Sm__Sg__set(std::map< int,int * > *self,int const &key,int *const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_int_Sm__Sg__del(std::map< int,int * > *self,int const &key){
                std::map<int,int * >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_int_Sm__Sg__has_key(std::map< int,int * > *self,int const &key){
                std::map<int,int * >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN int const *const &std_map_Sl_int_Sc_int_SS_const_Sm__Sg__get(std::map< int,int const * > *self,int const &key){
                std::map<int,int const * >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_int_SS_const_Sm__Sg__set(std::map< int,int const * > *self,int const &key,int const *const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_int_SS_const_Sm__Sg__del(std::map< int,int const * > *self,int const &key){
                std::map<int,int const * >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_int_SS_const_Sm__Sg__has_key(std::map< int,int const * > *self,int const &key){
                std::map<int,int const * >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN Struct const &std_map_Sl_int_Sc_Struct_Sg__get(std::map< int,Struct > *self,int const &key){
                std::map<int,Struct >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_Struct_Sg__set(std::map< int,Struct > *self,int const &key,Struct const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_Struct_Sg__del(std::map< int,Struct > *self,int const &key){
                std::map<int,Struct >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_Struct_Sg__has_key(std::map< int,Struct > *self,int const &key){
                std::map<int,Struct >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN Struct *const &std_map_Sl_int_Sc_Struct_Sm__Sg__get(std::map< int,Struct * > *self,int const &key){
                std::map<int,Struct * >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_Struct_Sm__Sg__set(std::map< int,Struct * > *self,int const &key,Struct *const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_Struct_Sm__Sg__del(std::map< int,Struct * > *self,int const &key){
                std::map<int,Struct * >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_Struct_Sm__Sg__has_key(std::map< int,Struct * > *self,int const &key){
                std::map<int,Struct * >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN Struct const *const &std_map_Sl_int_Sc_Struct_SS_const_Sm__Sg__get(std::map< int,Struct const * > *self,int const &key){
                std::map<int,Struct const * >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_Struct_SS_const_Sm__Sg__set(std::map< int,Struct const * > *self,int const &key,Struct const *const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_Struct_SS_const_Sm__Sg__del(std::map< int,Struct const * > *self,int const &key){
                std::map<int,Struct const * >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_Struct_SS_const_Sm__Sg__has_key(std::map< int,Struct const * > *self,int const &key){
                std::map<int,Struct const * >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN int const &std_map_Sl_Struct_Sm__Sc_int_Sg__get(std::map< Struct *,int > *self,Struct *const &key){
                std::map<Struct *,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_Struct_Sm__Sc_int_Sg__set(std::map< Struct *,int > *self,Struct *const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_Struct_Sm__Sc_int_Sg__del(std::map< Struct *,int > *self,Struct *const &key){
                std::map<Struct *,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_Struct_Sm__Sc_int_Sg__has_key(std::map< Struct *,int > *self,Struct *const &key){
                std::map<Struct *,int >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN int const &std_map_Sl_Struct_Sc_int_Sg__get(std::map< Struct,int > *self,Struct const &key){
                std::map<Struct,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_Struct_Sc_int_Sg__set(std::map< Struct,int > *self,Struct const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_Struct_Sc_int_Sg__del(std::map< Struct,int > *self,Struct const &key){
                std::map<Struct,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_Struct_Sc_int_Sg__has_key(std::map< Struct,int > *self,Struct const &key){
                std::map<Struct,int >::iterator i = self->find(key);
                return i != self->end();
            }

  struct A{
    int val;
    
    A(int v = 0): val(v) {
    }
  };

SWIGINTERN A *const &std_map_Sl_int_Sc_A_Sm__Sg__get(std::map< int,A * > *self,int const &key){
                std::map<int,A * >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_A_Sm__Sg__set(std::map< int,A * > *self,int const &key,A *const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_A_Sm__Sg__del(std::map< int,A * > *self,int const &key){
                std::map<int,A * >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_A_Sm__Sg__has_key(std::map< int,A * > *self,int const &key){
                std::map<int,A * >::iterator i = self->find(key);
                return i != self->end();
            }

  std::pair<int, A*> p_identa(std::pair<int, A*> p) {
    return p;
  }

  std::map<int, A*> m_identa(const std::map<int,A*>& v) {
    return v;
  }


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_map_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  another::map *arg1 = (another::map *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(another::map **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->val = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_map_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  another::map *arg1 = (another::map *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(another::map **)&jarg1; 
  result = (int) ((arg1)->val);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1map(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  another::map *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (another::map *)new another::map(arg1);
  *(another::map **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  another::map *arg1 = (another::map *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(another::map **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1IntIntMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< int,int > *)new std::map< int,int >();
  *(std::map< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1IntIntMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,int > *arg1 = 0 ;
  std::map< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,int > const & reference is null");
    return 0;
  } 
  result = (std::map< int,int > *)new std::map< int,int >((std::map< int,int > const &)*arg1);
  *(std::map< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  result = (unsigned int)((std::map< int,int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  result = (bool)((std::map< int,int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (int *) &std_map_Sl_int_Sc_int_Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int_Sc_int_Sg__set(arg1,(int const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_int_Sc_int_Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_int_Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1IntIntMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1StringIntMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,int > *)new std::map< std::string,int >();
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1StringIntMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,int > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,int > *)new std::map< std::string,int >((std::map< std::string,int > const &)*arg1);
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_StringIntMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  result = (unsigned int)((std::map< std::string,int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_StringIntMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  result = (bool)((std::map< std::string,int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_StringIntMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_StringIntMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (int *) &std_map_Sl_std_string_Sc_int_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_StringIntMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_int_Sg__set(arg1,(std::string const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_StringIntMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    std_map_Sl_std_string_Sc_int_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_StringIntMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_int_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1StringIntMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_li_1std_1map_li_1std_1mapJNI_valueAverage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::map< std::string,int > arg1 ;
  std::map< std::string,int > *argp1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::map< std::string,int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,int >");
    return 0;
  }
  arg1 = *argp1; 
  result = (double)valueAverage(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1std_1map_li_1std_1mapJNI_stringifyKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,int > arg1 ;
  std::map< std::string,int > *argp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::map< std::string,int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,int >");
    return 0;
  }
  arg1 = *argp1; 
  result = stringifyKeys(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_Struct_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Struct *arg1 = (Struct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Struct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->num = arg2;
}


SWIGEXPORT jdouble JNICALL Java_li_1std_1map_li_1std_1mapJNI_Struct_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Struct *arg1 = (Struct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Struct **)&jarg1; 
  result = (double) ((arg1)->num);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1Struct_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Struct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Struct *)new Struct();
  *(Struct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1Struct_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  Struct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (Struct *)new Struct(arg1);
  *(Struct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1Struct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Struct *arg1 = (Struct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Struct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1IntIntPtrMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,int * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< int,int * > *)new std::map< int,int * >();
  *(std::map< int,int * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1IntIntPtrMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,int * > *arg1 = 0 ;
  std::map< int,int * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,int * > const & reference is null");
    return 0;
  } 
  result = (std::map< int,int * > *)new std::map< int,int * >((std::map< int,int * > const &)*arg1);
  *(std::map< int,int * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntPtrMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,int * > *arg1 = (std::map< int,int * > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int * > **)&jarg1; 
  result = (unsigned int)((std::map< int,int * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntPtrMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,int * > *arg1 = (std::map< int,int * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int * > **)&jarg1; 
  result = (bool)((std::map< int,int * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntPtrMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,int * > *arg1 = (std::map< int,int * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntPtrMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::map< int,int * > *arg1 = (std::map< int,int * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (int **) &std_map_Sl_int_Sc_int_Sm__Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(int **)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntPtrMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::map< int,int * > *arg1 = (std::map< int,int * > *) 0 ;
  int *arg2 = 0 ;
  int **arg3 = 0 ;
  int temp2 ;
  int *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = *(int **)&jarg3;
  arg3 = (int **)&temp3; 
  std_map_Sl_int_Sc_int_Sm__Sg__set(arg1,(int const &)*arg2,(int *const &)*arg3);
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntPtrMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,int * > *arg1 = (std::map< int,int * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_int_Sc_int_Sm__Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntIntPtrMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,int * > *arg1 = (std::map< int,int * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_int_Sm__Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1IntIntPtrMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,int * > *arg1 = (std::map< int,int * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,int * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1IntConstIntPtrMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,int const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< int,int const * > *)new std::map< int,int const * >();
  *(std::map< int,int const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1IntConstIntPtrMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,int const * > *arg1 = 0 ;
  std::map< int,int const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int const * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,int const * > const & reference is null");
    return 0;
  } 
  result = (std::map< int,int const * > *)new std::map< int,int const * >((std::map< int,int const * > const &)*arg1);
  *(std::map< int,int const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntConstIntPtrMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,int const * > *arg1 = (std::map< int,int const * > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int const * > **)&jarg1; 
  result = (unsigned int)((std::map< int,int const * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntConstIntPtrMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,int const * > *arg1 = (std::map< int,int const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int const * > **)&jarg1; 
  result = (bool)((std::map< int,int const * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntConstIntPtrMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,int const * > *arg1 = (std::map< int,int const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int const * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntConstIntPtrMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::map< int,int const * > *arg1 = (std::map< int,int const * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int const * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (int **) &std_map_Sl_int_Sc_int_SS_const_Sm__Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(int **)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntConstIntPtrMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::map< int,int const * > *arg1 = (std::map< int,int const * > *) 0 ;
  int *arg2 = 0 ;
  int **arg3 = 0 ;
  int temp2 ;
  int *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int const * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = *(int **)&jarg3;
  arg3 = (int **)&temp3; 
  std_map_Sl_int_Sc_int_SS_const_Sm__Sg__set(arg1,(int const &)*arg2,(int const *const &)*arg3);
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntConstIntPtrMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,int const * > *arg1 = (std::map< int,int const * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int const * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_int_Sc_int_SS_const_Sm__Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntConstIntPtrMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,int const * > *arg1 = (std::map< int,int const * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int const * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_int_SS_const_Sm__Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1IntConstIntPtrMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,int const * > *arg1 = (std::map< int,int const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,int const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1IntStructMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,Struct > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< int,Struct > *)new std::map< int,Struct >();
  *(std::map< int,Struct > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1IntStructMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,Struct > *arg1 = 0 ;
  std::map< int,Struct > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,Struct > const & reference is null");
    return 0;
  } 
  result = (std::map< int,Struct > *)new std::map< int,Struct >((std::map< int,Struct > const &)*arg1);
  *(std::map< int,Struct > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,Struct > *arg1 = (std::map< int,Struct > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct > **)&jarg1; 
  result = (unsigned int)((std::map< int,Struct > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,Struct > *arg1 = (std::map< int,Struct > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct > **)&jarg1; 
  result = (bool)((std::map< int,Struct > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,Struct > *arg1 = (std::map< int,Struct > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::map< int,Struct > *arg1 = (std::map< int,Struct > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Struct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (Struct *) &std_map_Sl_int_Sc_Struct_Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(Struct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::map< int,Struct > *arg1 = (std::map< int,Struct > *) 0 ;
  int *arg2 = 0 ;
  Struct *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< int,Struct > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(Struct **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Struct const & reference is null");
    return ;
  } 
  std_map_Sl_int_Sc_Struct_Sg__set(arg1,(int const &)*arg2,(Struct const &)*arg3);
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,Struct > *arg1 = (std::map< int,Struct > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_int_Sc_Struct_Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,Struct > *arg1 = (std::map< int,Struct > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_Struct_Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1IntStructMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,Struct > *arg1 = (std::map< int,Struct > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,Struct > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1IntStructPtrMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,Struct * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< int,Struct * > *)new std::map< int,Struct * >();
  *(std::map< int,Struct * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1IntStructPtrMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,Struct * > *arg1 = 0 ;
  std::map< int,Struct * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,Struct * > const & reference is null");
    return 0;
  } 
  result = (std::map< int,Struct * > *)new std::map< int,Struct * >((std::map< int,Struct * > const &)*arg1);
  *(std::map< int,Struct * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructPtrMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,Struct * > *arg1 = (std::map< int,Struct * > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct * > **)&jarg1; 
  result = (unsigned int)((std::map< int,Struct * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructPtrMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,Struct * > *arg1 = (std::map< int,Struct * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct * > **)&jarg1; 
  result = (bool)((std::map< int,Struct * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructPtrMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,Struct * > *arg1 = (std::map< int,Struct * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructPtrMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::map< int,Struct * > *arg1 = (std::map< int,Struct * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Struct **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (Struct **) &std_map_Sl_int_Sc_Struct_Sm__Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(Struct **)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructPtrMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::map< int,Struct * > *arg1 = (std::map< int,Struct * > *) 0 ;
  int *arg2 = 0 ;
  Struct **arg3 = 0 ;
  int temp2 ;
  Struct *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< int,Struct * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = *(Struct **)&jarg3;
  arg3 = (Struct **)&temp3; 
  std_map_Sl_int_Sc_Struct_Sm__Sg__set(arg1,(int const &)*arg2,(Struct *const &)*arg3);
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructPtrMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,Struct * > *arg1 = (std::map< int,Struct * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_int_Sc_Struct_Sm__Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructPtrMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,Struct * > *arg1 = (std::map< int,Struct * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_Struct_Sm__Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1IntStructPtrMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,Struct * > *arg1 = (std::map< int,Struct * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,Struct * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1IntStructConstPtrMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,Struct const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< int,Struct const * > *)new std::map< int,Struct const * >();
  *(std::map< int,Struct const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1IntStructConstPtrMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,Struct const * > *arg1 = 0 ;
  std::map< int,Struct const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct const * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,Struct const * > const & reference is null");
    return 0;
  } 
  result = (std::map< int,Struct const * > *)new std::map< int,Struct const * >((std::map< int,Struct const * > const &)*arg1);
  *(std::map< int,Struct const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructConstPtrMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,Struct const * > *arg1 = (std::map< int,Struct const * > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct const * > **)&jarg1; 
  result = (unsigned int)((std::map< int,Struct const * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructConstPtrMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,Struct const * > *arg1 = (std::map< int,Struct const * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct const * > **)&jarg1; 
  result = (bool)((std::map< int,Struct const * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructConstPtrMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,Struct const * > *arg1 = (std::map< int,Struct const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct const * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructConstPtrMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::map< int,Struct const * > *arg1 = (std::map< int,Struct const * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  Struct **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct const * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (Struct **) &std_map_Sl_int_Sc_Struct_SS_const_Sm__Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(Struct **)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructConstPtrMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::map< int,Struct const * > *arg1 = (std::map< int,Struct const * > *) 0 ;
  int *arg2 = 0 ;
  Struct **arg3 = 0 ;
  int temp2 ;
  Struct *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< int,Struct const * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = *(Struct **)&jarg3;
  arg3 = (Struct **)&temp3; 
  std_map_Sl_int_Sc_Struct_SS_const_Sm__Sg__set(arg1,(int const &)*arg2,(Struct const *const &)*arg3);
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructConstPtrMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,Struct const * > *arg1 = (std::map< int,Struct const * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct const * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_int_Sc_Struct_SS_const_Sm__Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_IntStructConstPtrMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,Struct const * > *arg1 = (std::map< int,Struct const * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,Struct const * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_Struct_SS_const_Sm__Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1IntStructConstPtrMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,Struct const * > *arg1 = (std::map< int,Struct const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,Struct const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1StructPtrIntMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< Struct *,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< Struct *,int > *)new std::map< Struct *,int >();
  *(std::map< Struct *,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1StructPtrIntMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< Struct *,int > *arg1 = 0 ;
  std::map< Struct *,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Struct *,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< Struct *,int > const & reference is null");
    return 0;
  } 
  result = (std::map< Struct *,int > *)new std::map< Struct *,int >((std::map< Struct *,int > const &)*arg1);
  *(std::map< Struct *,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructPtrIntMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< Struct *,int > *arg1 = (std::map< Struct *,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Struct *,int > **)&jarg1; 
  result = (unsigned int)((std::map< Struct *,int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructPtrIntMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< Struct *,int > *arg1 = (std::map< Struct *,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Struct *,int > **)&jarg1; 
  result = (bool)((std::map< Struct *,int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructPtrIntMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< Struct *,int > *arg1 = (std::map< Struct *,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Struct *,int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructPtrIntMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::map< Struct *,int > *arg1 = (std::map< Struct *,int > *) 0 ;
  Struct **arg2 = 0 ;
  Struct *temp2 = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< Struct *,int > **)&jarg1; 
  temp2 = *(Struct **)&jarg2;
  arg2 = (Struct **)&temp2; 
  try {
    result = (int *) &std_map_Sl_Struct_Sm__Sc_int_Sg__get(arg1,(Struct *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructPtrIntMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  std::map< Struct *,int > *arg1 = (std::map< Struct *,int > *) 0 ;
  Struct **arg2 = 0 ;
  int *arg3 = 0 ;
  Struct *temp2 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< Struct *,int > **)&jarg1; 
  temp2 = *(Struct **)&jarg2;
  arg2 = (Struct **)&temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_Struct_Sm__Sc_int_Sg__set(arg1,(Struct *const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructPtrIntMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< Struct *,int > *arg1 = (std::map< Struct *,int > *) 0 ;
  Struct **arg2 = 0 ;
  Struct *temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< Struct *,int > **)&jarg1; 
  temp2 = *(Struct **)&jarg2;
  arg2 = (Struct **)&temp2; 
  try {
    std_map_Sl_Struct_Sm__Sc_int_Sg__del(arg1,(Struct *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructPtrIntMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< Struct *,int > *arg1 = (std::map< Struct *,int > *) 0 ;
  Struct **arg2 = 0 ;
  Struct *temp2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< Struct *,int > **)&jarg1; 
  temp2 = *(Struct **)&jarg2;
  arg2 = (Struct **)&temp2; 
  result = (bool)std_map_Sl_Struct_Sm__Sc_int_Sg__has_key(arg1,(Struct *const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1StructPtrIntMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< Struct *,int > *arg1 = (std::map< Struct *,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< Struct *,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1StructIntMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< Struct,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< Struct,int > *)new std::map< Struct,int >();
  *(std::map< Struct,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1StructIntMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< Struct,int > *arg1 = 0 ;
  std::map< Struct,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Struct,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< Struct,int > const & reference is null");
    return 0;
  } 
  result = (std::map< Struct,int > *)new std::map< Struct,int >((std::map< Struct,int > const &)*arg1);
  *(std::map< Struct,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructIntMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< Struct,int > *arg1 = (std::map< Struct,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Struct,int > **)&jarg1; 
  result = (unsigned int)((std::map< Struct,int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructIntMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< Struct,int > *arg1 = (std::map< Struct,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Struct,int > **)&jarg1; 
  result = (bool)((std::map< Struct,int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructIntMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< Struct,int > *arg1 = (std::map< Struct,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Struct,int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructIntMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::map< Struct,int > *arg1 = (std::map< Struct,int > *) 0 ;
  Struct *arg2 = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< Struct,int > **)&jarg1; 
  arg2 = *(Struct **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Struct const & reference is null");
    return 0;
  } 
  try {
    result = (int *) &std_map_Sl_Struct_Sc_int_Sg__get(arg1,(Struct const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructIntMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  std::map< Struct,int > *arg1 = (std::map< Struct,int > *) 0 ;
  Struct *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< Struct,int > **)&jarg1; 
  arg2 = *(Struct **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Struct const & reference is null");
    return ;
  } 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_Struct_Sc_int_Sg__set(arg1,(Struct const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructIntMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< Struct,int > *arg1 = (std::map< Struct,int > *) 0 ;
  Struct *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< Struct,int > **)&jarg1; 
  arg2 = *(Struct **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Struct const & reference is null");
    return ;
  } 
  try {
    std_map_Sl_Struct_Sc_int_Sg__del(arg1,(Struct const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_StructIntMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< Struct,int > *arg1 = (std::map< Struct,int > *) 0 ;
  Struct *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< Struct,int > **)&jarg1; 
  arg2 = *(Struct **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Struct const & reference is null");
    return 0;
  } 
  result = (bool)std_map_Sl_Struct_Sc_int_Sg__has_key(arg1,(Struct const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1StructIntMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< Struct,int > *arg1 = (std::map< Struct,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< Struct,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_A_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  A *arg1 = (A *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->val = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_A_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (int) ((arg1)->val);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1A_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (A *)new A(arg1);
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1A_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (A *)new A();
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1A(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  A *arg1 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(A **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairii_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< int,int > *)new std::pair< int,int >();
  *(std::pair< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairii_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::pair< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::pair< int,int > *)new std::pair< int,int >(arg1,arg2);
  *(std::pair< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairii_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,int > *arg1 = 0 ;
  std::pair< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< int,int > const & reference is null");
    return 0;
  } 
  result = (std::pair< int,int > *)new std::pair< int,int >((std::pair< int,int > const &)*arg1);
  *(std::pair< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairii_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairii_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,int > **)&jarg1; 
  result = (int) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairii_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairii_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,int > **)&jarg1; 
  result = (int) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1pairii(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< int,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairAA_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< int,A > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< int,A > *)new std::pair< int,A >();
  *(std::pair< int,A > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairAA_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  A arg2 ;
  A *argp2 ;
  std::pair< int,A > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  argp2 = *(A **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null A");
    return 0;
  }
  arg2 = *argp2; 
  result = (std::pair< int,A > *)new std::pair< int,A >(arg1,arg2);
  *(std::pair< int,A > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairAA_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,A > *arg1 = 0 ;
  std::pair< int,A > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,A > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< int,A > const & reference is null");
    return 0;
  } 
  result = (std::pair< int,A > *)new std::pair< int,A >((std::pair< int,A > const &)*arg1);
  *(std::pair< int,A > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairAA_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< int,A > *arg1 = (std::pair< int,A > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,A > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairAA_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int,A > *arg1 = (std::pair< int,A > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,A > **)&jarg1; 
  result = (int) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairAA_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< int,A > *arg1 = (std::pair< int,A > *) 0 ;
  A *arg2 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< int,A > **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairAA_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,A > *arg1 = (std::pair< int,A > *) 0 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,A > **)&jarg1; 
  result = (A *)& ((arg1)->second);
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1pairAA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< int,A > *arg1 = (std::pair< int,A > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< int,A > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairA_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< int,A * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< int,A * > *)new std::pair< int,A * >();
  *(std::pair< int,A * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairA_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  A *arg2 = (A *) 0 ;
  std::pair< int,A * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(A **)&jarg2; 
  result = (std::pair< int,A * > *)new std::pair< int,A * >(arg1,arg2);
  *(std::pair< int,A * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairA_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,A * > *arg1 = 0 ;
  std::pair< int,A * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,A * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< int,A * > const & reference is null");
    return 0;
  } 
  result = (std::pair< int,A * > *)new std::pair< int,A * >((std::pair< int,A * > const &)*arg1);
  *(std::pair< int,A * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairA_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< int,A * > *arg1 = (std::pair< int,A * > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,A * > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairA_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int,A * > *arg1 = (std::pair< int,A * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,A * > **)&jarg1; 
  result = (int) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairA_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< int,A * > *arg1 = (std::pair< int,A * > *) 0 ;
  A *arg2 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< int,A * > **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairA_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,A * > *arg1 = (std::pair< int,A * > *) 0 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,A * > **)&jarg1; 
  result = (A *) ((arg1)->second);
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1pairA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< int,A * > *arg1 = (std::pair< int,A * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< int,A * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1mapA_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,A * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< int,A * > *)new std::map< int,A * >();
  *(std::map< int,A * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1mapA_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,A * > *arg1 = 0 ;
  std::map< int,A * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,A * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,A * > const & reference is null");
    return 0;
  } 
  result = (std::map< int,A * > *)new std::map< int,A * >((std::map< int,A * > const &)*arg1);
  *(std::map< int,A * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_mapA_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,A * > *arg1 = (std::map< int,A * > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,A * > **)&jarg1; 
  result = (unsigned int)((std::map< int,A * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_mapA_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,A * > *arg1 = (std::map< int,A * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,A * > **)&jarg1; 
  result = (bool)((std::map< int,A * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_mapA_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,A * > *arg1 = (std::map< int,A * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,A * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_mapA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::map< int,A * > *arg1 = (std::map< int,A * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  A **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,A * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (A **) &std_map_Sl_int_Sc_A_Sm__Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(A **)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_mapA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::map< int,A * > *arg1 = (std::map< int,A * > *) 0 ;
  int *arg2 = 0 ;
  A **arg3 = 0 ;
  int temp2 ;
  A *temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< int,A * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = *(A **)&jarg3;
  arg3 = (A **)&temp3; 
  std_map_Sl_int_Sc_A_Sm__Sg__set(arg1,(int const &)*arg2,(A *const &)*arg3);
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_mapA_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,A * > *arg1 = (std::map< int,A * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,A * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_int_Sc_A_Sm__Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_li_1std_1map_li_1std_1mapJNI_mapA_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,A * > *arg1 = (std::map< int,A * > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,A * > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_A_Sm__Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1mapA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,A * > *arg1 = (std::map< int,A * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,A * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1paircA1_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< int const,A * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< int const,A * > *)new std::pair< int const,A * >();
  *(std::pair< int const,A * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1paircA1_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  A *arg2 = (A *) 0 ;
  std::pair< int const,A * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(A **)&jarg2; 
  result = (std::pair< int const,A * > *)new std::pair< int const,A * >(arg1,arg2);
  *(std::pair< int const,A * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1paircA1_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int const,A * > *arg1 = 0 ;
  std::pair< int const,A * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int const,A * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< int const,A * > const & reference is null");
    return 0;
  } 
  result = (std::pair< int const,A * > *)new std::pair< int const,A * >((std::pair< int const,A * > const &)*arg1);
  *(std::pair< int const,A * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_paircA1_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int const,A * > *arg1 = (std::pair< int const,A * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int const,A * > **)&jarg1; 
  result = (int)(int) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_paircA1_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< int const,A * > *arg1 = (std::pair< int const,A * > *) 0 ;
  A *arg2 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< int const,A * > **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_paircA1_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int const,A * > *arg1 = (std::pair< int const,A * > *) 0 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int const,A * > **)&jarg1; 
  result = (A *) ((arg1)->second);
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1paircA1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< int const,A * > *arg1 = (std::pair< int const,A * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< int const,A * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1paircA2_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< int const,A const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< int const,A const * > *)new std::pair< int const,A const * >();
  *(std::pair< int const,A const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1paircA2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  A *arg2 = (A *) 0 ;
  std::pair< int const,A const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(A **)&jarg2; 
  result = (std::pair< int const,A const * > *)new std::pair< int const,A const * >(arg1,(A const *)arg2);
  *(std::pair< int const,A const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1paircA2_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int const,A const * > *arg1 = 0 ;
  std::pair< int const,A const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int const,A const * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< int const,A const * > const & reference is null");
    return 0;
  } 
  result = (std::pair< int const,A const * > *)new std::pair< int const,A const * >((std::pair< int const,A const * > const &)*arg1);
  *(std::pair< int const,A const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_paircA2_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int const,A const * > *arg1 = (std::pair< int const,A const * > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int const,A const * > **)&jarg1; 
  result = (int)(int) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_paircA2_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< int const,A const * > *arg1 = (std::pair< int const,A const * > *) 0 ;
  A *arg2 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< int const,A const * > **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  if (arg1) (arg1)->second = (A const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_paircA2_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int const,A const * > *arg1 = (std::pair< int const,A const * > *) 0 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int const,A const * > **)&jarg1; 
  result = (A *) ((arg1)->second);
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1paircA2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< int const,A const * > *arg1 = (std::pair< int const,A const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< int const,A const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairiiA_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< int,std::pair< int,A * > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< int,std::pair< int,A * > > *)new std::pair< int,std::pair< int,A * > >();
  *(std::pair< int,std::pair< int,A * > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairiiA_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  std::pair< int,A * > arg2 ;
  std::pair< int,A * > *argp2 ;
  std::pair< int,std::pair< int,A * > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  argp2 = *(std::pair< int,A * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::pair< int,A * >");
    return 0;
  }
  arg2 = *argp2; 
  result = (std::pair< int,std::pair< int,A * > > *)new std::pair< int,std::pair< int,A * > >(arg1,arg2);
  *(std::pair< int,std::pair< int,A * > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairiiA_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,std::pair< int,A * > > *arg1 = 0 ;
  std::pair< int,std::pair< int,A * > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,std::pair< int,A * > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< int,std::pair< int,A * > > const & reference is null");
    return 0;
  } 
  result = (std::pair< int,std::pair< int,A * > > *)new std::pair< int,std::pair< int,A * > >((std::pair< int,std::pair< int,A * > > const &)*arg1);
  *(std::pair< int,std::pair< int,A * > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairiiA_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< int,std::pair< int,A * > > *arg1 = (std::pair< int,std::pair< int,A * > > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,std::pair< int,A * > > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairiiA_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int,std::pair< int,A * > > *arg1 = (std::pair< int,std::pair< int,A * > > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,std::pair< int,A * > > **)&jarg1; 
  result = (int) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairiiA_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< int,std::pair< int,A * > > *arg1 = (std::pair< int,std::pair< int,A * > > *) 0 ;
  std::pair< int,A * > *arg2 = (std::pair< int,A * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< int,std::pair< int,A * > > **)&jarg1; 
  arg2 = *(std::pair< int,A * > **)&jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairiiA_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,std::pair< int,A * > > *arg1 = (std::pair< int,std::pair< int,A * > > *) 0 ;
  std::pair< int,A * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,std::pair< int,A * > > **)&jarg1; 
  result = (std::pair< int,A * > *)& ((arg1)->second);
  *(std::pair< int,A * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1pairiiA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< int,std::pair< int,A * > > *arg1 = (std::pair< int,std::pair< int,A * > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< int,std::pair< int,A * > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairiiAc_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< int,std::pair< int,A * > const > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< int,std::pair< int,A * > const > *)new std::pair< int,std::pair< int,A * > const >();
  *(std::pair< int,std::pair< int,A * > const > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairiiAc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  std::pair< int,A * > arg2 ;
  std::pair< int,A * > const *argp2 ;
  std::pair< int,std::pair< int,A * > const > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  argp2 = *(std::pair< int,A * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::pair< int,A * > const");
    return 0;
  }
  arg2 = *argp2; 
  result = (std::pair< int,std::pair< int,A * > const > *)new std::pair< int,std::pair< int,A * > const >(arg1,arg2);
  *(std::pair< int,std::pair< int,A * > const > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_new_1pairiiAc_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,std::pair< int,A * > const > *arg1 = 0 ;
  std::pair< int,std::pair< int,A * > const > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,std::pair< int,A * > const > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< int,std::pair< int,A * > const > const & reference is null");
    return 0;
  } 
  result = (std::pair< int,std::pair< int,A * > const > *)new std::pair< int,std::pair< int,A * > const >((std::pair< int,std::pair< int,A * > const > const &)*arg1);
  *(std::pair< int,std::pair< int,A * > const > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairiiAc_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< int,std::pair< int,A * > const > *arg1 = (std::pair< int,std::pair< int,A * > const > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,std::pair< int,A * > const > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairiiAc_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int,std::pair< int,A * > const > *arg1 = (std::pair< int,std::pair< int,A * > const > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,std::pair< int,A * > const > **)&jarg1; 
  result = (int) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_pairiiAc_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,std::pair< int,A * > const > *arg1 = (std::pair< int,std::pair< int,A * > const > *) 0 ;
  std::pair< int,A * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,std::pair< int,A * > const > **)&jarg1; 
  result = (std::pair< int,A * > *)& ((arg1)->second);
  *(std::pair< int,A * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1std_1map_li_1std_1mapJNI_delete_1pairiiAc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< int,std::pair< int,A * > const > *arg1 = (std::pair< int,std::pair< int,A * > const > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< int,std::pair< int,A * > const > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_p_1identa(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,A * > arg1 ;
  std::pair< int,A * > *argp1 ;
  std::pair< int,A * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::pair< int,A * > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::pair< int,A * >");
    return 0;
  }
  arg1 = *argp1; 
  result = p_identa(arg1);
  *(std::pair< int,A * > **)&jresult = new std::pair< int,A * >((const std::pair< int,A * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1std_1map_li_1std_1mapJNI_m_1identa(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,A * > *arg1 = 0 ;
  std::map< int,A * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,A * > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,A * > const & reference is null");
    return 0;
  } 
  result = m_identa((std::map< int,A * > const &)*arg1);
  *(std::map< int,A * > **)&jresult = new std::map< int,A * >((const std::map< int,A * > &)result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

