/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_special_variablesJNI = NULL;
    jmethodID director_methids[1];
  }
}

#include <string>


#define KKK_testmethod testmethod
#define KKK_teststaticmethod KKK::teststaticmethod


void testmethod(int i) {}
struct KKK {
  void testmethod(int i) {}
  static void teststaticmethod(int i) {}
};


std::string ExceptionVars(double i, double j) {
  return "a1";
}


namespace Space {
std::string exceptionvars(double i, double j) {
  return "b2";
}
}


namespace Space {
  std::string overloadedmethod(double j) {
    return "c3";
  }
  std::string overloadedmethod() {
    return "d4";
  }
}
std::string declaration;


namespace SpaceNamespace {
  struct ABC {
    ABC(int a, double b) {}
    ABC() {}
    static short * staticmethod(int x, bool b) { return 0; }
    short * instancemethod(int x, bool b = false) { return 0; }
    short * constmethod(int x) const { return 0; }
  };
  template<typename T> struct Template {
    std::string tmethod(T t) { return ""; }
  };
  void globtemplate(Template<ABC> t) {}
}


void DirectorTest_director_testmethod(int i) {}
void DirectorTest_director_testmethodSwigExplicitDirectorTest(int i) {}


void director_testmethod(int i) {}
struct DirectorTest {
  virtual void director_testmethod(int i) {}
  virtual ~DirectorTest() {}
};


void DEFNewName_aaa() {}
namespace SpaceNamespace {
  void DEF_bbb() {}
}


namespace SpaceNamespace {
  struct DEF : ABC {
    void instance_def() {}
    static void static_def() {}
  };
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "special_variables_wrap.h"

SwigDirector_DirectorTest::SwigDirector_DirectorTest(JNIEnv *jenv) : DirectorTest(), Swig::Director(jenv) {
}

void SwigDirector_DirectorTest::director_testmethod(int i) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint ji  ;
  
  if (!swig_override[0]) {
    DirectorTest::director_testmethod(i);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ji = (jint) i;
    jenv->CallStaticVoidMethod(Swig::jclass_special_variablesJNI, Swig::director_methids[0], swigjobj, ji);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
    {
      director_testmethod(99);
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_DirectorTest::~SwigDirector_DirectorTest() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_DirectorTest::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "director_testmethod", "(I)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("special_variables/DirectorTest");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_testmethod(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  testmethod(arg1);
  {
    testmethod(99);
  }
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_KKK_1testmethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  KKK *arg1 = (KKK *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(KKK **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->testmethod(arg2);
  {
    KKK_testmethod(99);
  }
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_KKK_1teststaticmethod(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  KKK::teststaticmethod(arg1);
  {
    KKK_teststaticmethod(99);
  }
}


SWIGEXPORT jlong JNICALL Java_special_1variables_special_1variablesJNI_new_1KKK(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  KKK *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    result = (KKK *)new KKK();
    declaration = "KKK::KKK() KKK::KKK()";
  }
  *(KKK **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_delete_1KKK(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  KKK *arg1 = (KKK *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(KKK **)&jarg1; 
  {
    delete arg1;
    declaration = "KKK::~KKK() KKK::~KKK()";
  }
}


SWIGEXPORT jstring JNICALL Java_special_1variables_special_1variablesJNI_ExceptionVars(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2) {
  jstring jresult = 0 ;
  double arg1 ;
  double arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  
  result = Space::exceptionvars(arg1,arg2);
  result = ExceptionVars(1.0,2.0); // Should expand to ExceptionVars
  result = Space::exceptionvars(3.0,4.0); // Should expand to Space::exceptionvars
  // above will not compile if the variables are not expanded properly
  result = "result = Space::exceptionvars(arg1,arg2);  Space::exceptionvars  ExceptionVars   Java_special_1variables_special_1variablesJNI_ExceptionVars  ";
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_special_1variables_special_1variablesJNI_overloadedmethod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jstring jresult = 0 ;
  double arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  
  result = Space::overloadedmethod(arg1);
  result = Space::overloadedmethod(1.0);
  result = Space::overloadedmethod();
  result = Space::overloadedmethod(2.0);
  // above will not compile if the variables are not expanded properly
  result = "result = Space::overloadedmethod(arg1);  Space::overloadedmethod  overloadedmethod  __SWIG_0 Java_special_1variables_special_1variablesJNI_overloadedmethod_1_1SWIG_10  ";
  // Space::overloadedmethod(double)
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_special_1variables_special_1variablesJNI_overloadedmethod_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  
  result = Space::overloadedmethod();
  result = Space::overloadedmethod(1.0);
  result = Space::overloadedmethod();
  result = Space::overloadedmethod(2.0);
  // above will not compile if the variables are not expanded properly
  result = "result = Space::overloadedmethod();  Space::overloadedmethod  overloadedmethod  __SWIG_1 Java_special_1variables_special_1variablesJNI_overloadedmethod_1_1SWIG_11  ";
  // Space::overloadedmethod()
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_declaration_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  declaration = *arg1;
}


SWIGEXPORT jstring JNICALL Java_special_1variables_special_1variablesJNI_declaration_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *) &declaration;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variables_special_1variablesJNI_new_1ABC_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  SpaceNamespace::ABC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  {
    result = (SpaceNamespace::ABC *)new SpaceNamespace::ABC(arg1,arg2);
    declaration = "SpaceNamespace::ABC::ABC(int,double) SpaceNamespace::ABC::ABC(int,double)";
  }
  *(SpaceNamespace::ABC **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variables_special_1variablesJNI_new_1ABC_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SpaceNamespace::ABC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    result = (SpaceNamespace::ABC *)new SpaceNamespace::ABC();
    declaration = "SpaceNamespace::ABC::ABC() SpaceNamespace::ABC::ABC()";
  }
  *(SpaceNamespace::ABC **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variables_special_1variablesJNI_ABC_1staticmethod(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    result = (short *)SpaceNamespace::ABC::staticmethod(arg1,arg2);
    declaration = "short * SpaceNamespace::ABC::staticmethod(int,bool) SpaceNamespace::ABC::staticmethod(int,bool)";
  }
  *(short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variables_special_1variablesJNI_ABC_1instancemethod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  SpaceNamespace::ABC *arg1 = (SpaceNamespace::ABC *) 0 ;
  int arg2 ;
  bool arg3 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpaceNamespace::ABC **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    result = (short *)(arg1)->instancemethod(arg2,arg3);
    declaration = "short * SpaceNamespace::ABC::instancemethod(int,bool) SpaceNamespace::ABC::instancemethod(int,bool)";
  }
  *(short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variables_special_1variablesJNI_ABC_1instancemethod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SpaceNamespace::ABC *arg1 = (SpaceNamespace::ABC *) 0 ;
  int arg2 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpaceNamespace::ABC **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    result = (short *)(arg1)->instancemethod(arg2);
    declaration = "short * SpaceNamespace::ABC::instancemethod(int) SpaceNamespace::ABC::instancemethod(int)";
  }
  *(short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variables_special_1variablesJNI_ABC_1constmethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  SpaceNamespace::ABC *arg1 = (SpaceNamespace::ABC *) 0 ;
  int arg2 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpaceNamespace::ABC **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    result = (short *)((SpaceNamespace::ABC const *)arg1)->constmethod(arg2);
    declaration = "short * SpaceNamespace::ABC::constmethod(int) const SpaceNamespace::ABC::constmethod(int) const";
  }
  *(short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_delete_1ABC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SpaceNamespace::ABC *arg1 = (SpaceNamespace::ABC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SpaceNamespace::ABC **)&jarg1; 
  {
    delete arg1;
    declaration = "SpaceNamespace::ABC::~ABC() SpaceNamespace::ABC::~ABC()";
  }
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_globtemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SpaceNamespace::Template< SpaceNamespace::ABC > arg1 ;
  SpaceNamespace::Template< SpaceNamespace::ABC > *argp1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(SpaceNamespace::Template< SpaceNamespace::ABC > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SpaceNamespace::Template< SpaceNamespace::ABC >");
    return ;
  }
  arg1 = *argp1; 
  {
    SpaceNamespace::globtemplate(arg1);
    declaration = "void SpaceNamespace::globtemplate(SpaceNamespace::Template< SpaceNamespace::ABC >) SpaceNamespace::globtemplate(SpaceNamespace::Template< SpaceNamespace::ABC >)";
  }
}


SWIGEXPORT jstring JNICALL Java_special_1variables_special_1variablesJNI_TemplateABC_1tmethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  SpaceNamespace::Template< SpaceNamespace::ABC > *arg1 = (SpaceNamespace::Template< SpaceNamespace::ABC > *) 0 ;
  SpaceNamespace::ABC arg2 ;
  SpaceNamespace::ABC *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SpaceNamespace::Template< SpaceNamespace::ABC > **)&jarg1; 
  argp2 = *(SpaceNamespace::ABC **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SpaceNamespace::ABC");
    return 0;
  }
  arg2 = *argp2; 
  {
    result = (arg1)->tmethod(arg2);
    declaration = "std::string SpaceNamespace::Template< SpaceNamespace::ABC >::tmethod(SpaceNamespace::ABC) SpaceNamespace::Template< SpaceNamespace::ABC >::tmethod(SpaceNamespace::ABC)";
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_special_1variables_special_1variablesJNI_new_1TemplateABC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SpaceNamespace::Template< SpaceNamespace::ABC > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    result = (SpaceNamespace::Template< SpaceNamespace::ABC > *)new SpaceNamespace::Template< SpaceNamespace::ABC >();
    declaration = "SpaceNamespace::Template< SpaceNamespace::ABC >::Template() SpaceNamespace::Template< SpaceNamespace::ABC >::Template()";
  }
  *(SpaceNamespace::Template< SpaceNamespace::ABC > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_delete_1TemplateABC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SpaceNamespace::Template< SpaceNamespace::ABC > *arg1 = (SpaceNamespace::Template< SpaceNamespace::ABC > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SpaceNamespace::Template< SpaceNamespace::ABC > **)&jarg1; 
  {
    delete arg1;
    declaration = "SpaceNamespace::Template< SpaceNamespace::ABC >::~Template() SpaceNamespace::Template< SpaceNamespace::ABC >::~Template()";
  }
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_director_1testmethod(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    director_testmethod(arg1);
    declaration = "void director_testmethod(int) director_testmethod(int)";
  }
  {
    director_testmethod(99);
  }
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_DirectorTest_1director_1testmethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DirectorTest *arg1 = (DirectorTest *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DirectorTest **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    (arg1)->director_testmethod(arg2);
    declaration = "void DirectorTest::director_testmethod(int) DirectorTest::director_testmethod(int)";
  }
  {
    DirectorTest_director_testmethod(99);
  }
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_DirectorTest_1director_1testmethodSwigExplicitDirectorTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DirectorTest *arg1 = (DirectorTest *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DirectorTest **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    (arg1)->DirectorTest::director_testmethod(arg2);
    declaration = "void DirectorTest::director_testmethod(int) DirectorTest::director_testmethod(int)";
  }
  {
    DirectorTest_director_testmethodSwigExplicitDirectorTest(99);
  }
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_delete_1DirectorTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DirectorTest *arg1 = (DirectorTest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DirectorTest **)&jarg1; 
  {
    delete arg1;
    declaration = "DirectorTest::~DirectorTest() DirectorTest::~DirectorTest()";
  }
}


SWIGEXPORT jlong JNICALL Java_special_1variables_special_1variablesJNI_new_1DirectorTest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DirectorTest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    result = (DirectorTest *)new SwigDirector_DirectorTest(jenv);
    declaration = "DirectorTest::DirectorTest() DirectorTest::DirectorTest()";
  }
  *(DirectorTest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_DirectorTest_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  DirectorTest *obj = *((DirectorTest **)&objarg);
  (void)jcls;
  SwigDirector_DirectorTest *director = dynamic_cast<SwigDirector_DirectorTest *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_DirectorTest_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  DirectorTest *obj = *((DirectorTest **)&objarg);
  SwigDirector_DirectorTest *director = dynamic_cast<SwigDirector_DirectorTest *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_DEFNewName_1instance_1def(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SpaceNamespace::DEF *arg1 = (SpaceNamespace::DEF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SpaceNamespace::DEF **)&jarg1; 
  {
    (arg1)->instance_def();
    DEFNewName_aaa();
    SpaceNamespace::DEF_bbb();
    // above will not compile if the variables are not expanded properly
  }
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_DEFNewName_1static_1def(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    SpaceNamespace::DEF::static_def();
    DEFNewName_aaa();
    SpaceNamespace::DEF_bbb();
    // above will not compile if the variables are not expanded properly
  }
}


SWIGEXPORT jlong JNICALL Java_special_1variables_special_1variablesJNI_new_1DEFNewName(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SpaceNamespace::DEF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    result = (SpaceNamespace::DEF *)new SpaceNamespace::DEF();
    declaration = "SpaceNamespace::DEF::DEF() SpaceNamespace::DEF::DEF()";
  }
  *(SpaceNamespace::DEF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_delete_1DEFNewName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SpaceNamespace::DEF *arg1 = (SpaceNamespace::DEF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SpaceNamespace::DEF **)&jarg1; 
  {
    delete arg1;
    declaration = "SpaceNamespace::DEF::~DEF() SpaceNamespace::DEF::~DEF()";
  }
}


SWIGEXPORT jlong JNICALL Java_special_1variables_special_1variablesJNI_DEFNewName_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(SpaceNamespace::ABC **)&baseptr = *(SpaceNamespace::DEF **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_special_1variables_special_1variablesJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[1] = {
    {
      "SwigDirector_DirectorTest_director_testmethod", "(Lspecial_variables/DirectorTest;I)V" 
    }
  };
  Swig::jclass_special_variablesJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_special_variablesJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

