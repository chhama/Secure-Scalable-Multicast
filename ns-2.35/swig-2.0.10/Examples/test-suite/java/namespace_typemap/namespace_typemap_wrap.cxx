/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


namespace test {
   /* A minimalistic string class */
   class string_class {
      char *data;
   public:
      string_class() {
	data = 0;
      }
      string_class(const char *s) {
        data = new char[strlen(s)+1];
	strcpy(data,s);
      }
     ~string_class() {
        if (data) delete [] data;
      }
      char *c_str() {
        return data;
      }
   };

   /* A minimalistic test_complex class */
   class test_complex {
      double re;
      double im;
   public:
      test_complex(double r = 0, double i = 0) {
	re = r;
	im = i;
      }
      double real() {
        return re;
      }
      double imag() {
        return im;
      }
   };
}
 

    namespace test {
	class string_class;
	class test_complex;

	/* Functions in the namespace itself */
	char *stest1(string_class *s) {
	    return s->c_str();
	}
	double ctest1(test_complex *c) {
	    return c->real();
	}
    }

    namespace test2 {
	using test::string_class;
	using test::test_complex;

	/* Functions in another namespace */
	char *stest2(string_class *s) {
	    return s->c_str();
	}
	double ctest2(test_complex *c) {
	    return c->real();
	}
    }

    namespace test3 {
	using namespace test;

	char *stest3(string_class *s) {
	    return s->c_str();
	}
	double ctest3(test_complex *c) {
	    return c->real();
	}
    }
    
    namespace test4 {
	using namespace test2;

	char *stest4(string_class *s) {
	    return s->c_str();
	}
	double ctest4(test_complex *c) {
	    return c->real();
	}
    }

    namespace test5 {
	using namespace test3;

	char *stest5(string_class *s) {
	    return s->c_str();
	}
	double ctest5(test_complex *c) {
	    return c->real();
	}
    }

    char *stest6(test::string_class *s) {
	return s->c_str();
    }
    double ctest6(test::test_complex *c) {
	return c->real();
    }

    char *stest7(test2::string_class *s) {
	return s->c_str();
    }
    double ctest7(test2::test_complex *c) {
	return c->real();
    }

    char *stest8(test3::string_class *s) {
	return s->c_str();
    }
    double ctest8(test3::test_complex *c) {
	return c->real();
    }

    char *stest9(test4::string_class *s) {
	return s->c_str();
    }
    double ctest9(test4::test_complex *c) {
	return c->real();
    }

    char *stest10(test5::string_class *s) {
	return s->c_str();
    }
    double ctest10(test5::test_complex *c) {
	return c->real();
    }

    namespace test11 = test;
    
    char *stest11(test11::string_class *s) {
	return s->c_str();
    }
    double ctest11(test11::test_complex *c) {
	return c->real();
    }

    using namespace test2;
    using test::test_complex;

    char *stest12(string_class *s) {
	return s->c_str();
    }
    double ctest12(test_complex *c) {
	return c->real();
    }


    namespace Split {
	typedef int PosInteger;
	PosInteger ttest1(PosInteger x) {
	    return x;
	}
    }


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jstring JNICALL Java_namespace_1typemap_namespace_1typemapJNI_stest1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  test::string_class *arg1 = (test::string_class *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test::string_class **)&jarg1; 
  result = (char *)test::stest1(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_namespace_1typemap_namespace_1typemapJNI_ctest1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  test::test_complex *arg1 = (test::test_complex *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test::test_complex **)&jarg1; 
  result = (double)test::ctest1(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_namespace_1typemap_namespace_1typemapJNI_stest2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  test2::string_class *arg1 = (test2::string_class *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test2::string_class **)&jarg1; 
  result = (char *)test2::stest2(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_namespace_1typemap_namespace_1typemapJNI_ctest2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  test2::test_complex *arg1 = (test2::test_complex *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test2::test_complex **)&jarg1; 
  result = (double)test2::ctest2(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_namespace_1typemap_namespace_1typemapJNI_stest3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  test::string_class *arg1 = (test::string_class *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test::string_class **)&jarg1; 
  result = (char *)test3::stest3(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_namespace_1typemap_namespace_1typemapJNI_ctest3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  test::test_complex *arg1 = (test::test_complex *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test::test_complex **)&jarg1; 
  result = (double)test3::ctest3(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_namespace_1typemap_namespace_1typemapJNI_stest4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  test2::string_class *arg1 = (test2::string_class *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test2::string_class **)&jarg1; 
  result = (char *)test4::stest4(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_namespace_1typemap_namespace_1typemapJNI_ctest4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  test2::test_complex *arg1 = (test2::test_complex *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test2::test_complex **)&jarg1; 
  result = (double)test4::ctest4(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_namespace_1typemap_namespace_1typemapJNI_stest5(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  test::string_class *arg1 = (test::string_class *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test::string_class **)&jarg1; 
  result = (char *)test5::stest5(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_namespace_1typemap_namespace_1typemapJNI_ctest5(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  test::test_complex *arg1 = (test::test_complex *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test::test_complex **)&jarg1; 
  result = (double)test5::ctest5(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_namespace_1typemap_namespace_1typemapJNI_stest6(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  test::string_class *arg1 = (test::string_class *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test::string_class **)&jarg1; 
  result = (char *)stest6(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_namespace_1typemap_namespace_1typemapJNI_ctest6(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  test::test_complex *arg1 = (test::test_complex *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test::test_complex **)&jarg1; 
  result = (double)ctest6(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_namespace_1typemap_namespace_1typemapJNI_stest7(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  test2::string_class *arg1 = (test2::string_class *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test2::string_class **)&jarg1; 
  result = (char *)stest7(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_namespace_1typemap_namespace_1typemapJNI_ctest7(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  test2::test_complex *arg1 = (test2::test_complex *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test2::test_complex **)&jarg1; 
  result = (double)ctest7(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_namespace_1typemap_namespace_1typemapJNI_stest8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  test3::string_class *arg1 = (test3::string_class *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test3::string_class **)&jarg1; 
  result = (char *)stest8(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_namespace_1typemap_namespace_1typemapJNI_ctest8(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  test3::test_complex *arg1 = (test3::test_complex *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test3::test_complex **)&jarg1; 
  result = (double)ctest8(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_namespace_1typemap_namespace_1typemapJNI_stest9(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  test4::string_class *arg1 = (test4::string_class *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test4::string_class **)&jarg1; 
  result = (char *)stest9(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_namespace_1typemap_namespace_1typemapJNI_ctest9(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  test4::test_complex *arg1 = (test4::test_complex *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test4::test_complex **)&jarg1; 
  result = (double)ctest9(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_namespace_1typemap_namespace_1typemapJNI_stest10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  test5::string_class *arg1 = (test5::string_class *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test5::string_class **)&jarg1; 
  result = (char *)stest10(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_namespace_1typemap_namespace_1typemapJNI_ctest10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  test5::test_complex *arg1 = (test5::test_complex *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test5::test_complex **)&jarg1; 
  result = (double)ctest10(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_namespace_1typemap_namespace_1typemapJNI_stest11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  test11::string_class *arg1 = (test11::string_class *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test11::string_class **)&jarg1; 
  result = (char *)stest11(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_namespace_1typemap_namespace_1typemapJNI_ctest11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  test11::test_complex *arg1 = (test11::test_complex *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test11::test_complex **)&jarg1; 
  result = (double)ctest11(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_namespace_1typemap_namespace_1typemapJNI_stest12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  test2::string_class *arg1 = (test2::string_class *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test2::string_class **)&jarg1; 
  result = (char *)stest12(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_namespace_1typemap_namespace_1typemapJNI_ctest12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  test_complex *arg1 = (test_complex *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(test_complex **)&jarg1; 
  result = (double)ctest12(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_namespace_1typemap_namespace_1typemapJNI_ttest1(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Split::PosInteger arg1 ;
  Split::PosInteger result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Split::PosInteger)jarg1; 
  result = (Split::PosInteger)Split::ttest1(arg1);
  jresult = (jint)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

