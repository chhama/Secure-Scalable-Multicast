/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


class Klass1 {};
class Klass2 {};
class Klass3 {};
class Klass4 {};
class Klass5 {};
class Klass6 {};
class Klass7 {};

struct KlassMethods {
   static void methodA(::Klass1 v, const ::Klass2 cv, const ::Klass3 *cp, ::Klass4 *p, const ::Klass5 &cr, ::Klass6 &r, ::Klass7*const& pr) {}
   static void methodB(  Klass1 v, const   Klass2 cv, const   Klass3 *cp,   Klass4 *p, const   Klass5 &cr,   Klass6 &r,   Klass7*const& pr) {}
};


namespace Space {
class XYZ1 {};
class XYZ2 {};
class XYZ3 {};
class XYZ4 {};
class XYZ5 {};
class XYZ6 {};
class XYZ7 {};
}

struct XYZMethods {
   static void methodA(::Space::XYZ1 v, const ::Space::XYZ2 cv, const ::Space::XYZ3 *cp, ::Space::XYZ4 *p, const ::Space::XYZ5 &cr, ::Space::XYZ6 &r, ::Space::XYZ7*const& pr) {}
   static void methodB(  Space::XYZ1 v, const   Space::XYZ2 cv, const   Space::XYZ3 *cp,   Space::XYZ4 *p, const   Space::XYZ5 &cr,   Space::XYZ6 &r,   Space::XYZ7*const& pr) {}
};


enum AnEnum1 { anenum1 };
enum AnEnum2 { anenum2 };
enum AnEnum3 { anenum3 };

struct AnEnumMethods {
   static void methodA(::AnEnum1 v, const ::AnEnum2 cv, const ::AnEnum3 &cr) {}
   static void methodB(  AnEnum1 v, const   AnEnum2 cv, const   AnEnum3 &cr) {}
};


namespace Space {
enum TheEnum1 { theenum1 };
enum TheEnum2 { theenum2 };
enum TheEnum3 { theenum3 };

struct TheEnumMethods {
   static void methodA(::Space::TheEnum1 v, const ::Space::TheEnum2 cv, const ::Space::TheEnum3 &cr) {}
   static void methodB(  Space::TheEnum1 v, const   Space::TheEnum2 cv, const   Space::TheEnum3 &cr) {}
};
}


Klass1 getKlass1A()   { return ::Klass1(); }
::Klass1 getKlass1B() { return ::Klass1(); }

Klass2 getKlass2A()   { return ::Klass2(); }
::Klass2 getKlass2B() { return ::Klass2(); }

Klass3 getKlass3A()   { return ::Klass3(); }
::Klass3 getKlass3B() { return ::Klass3(); }

Klass4 getKlass4A()   { return ::Klass4(); }
::Klass4 getKlass4B() { return ::Klass4(); }

Klass5 getKlass5A()   { return ::Klass5(); }
::Klass5 getKlass5B() { return ::Klass5(); }

Klass6 getKlass6A()   { return ::Klass6(); }
::Klass6 getKlass6B() { return ::Klass6(); }

Klass7 getKlass7A()   { return ::Klass7(); }
::Klass7 getKlass7B() { return ::Klass7(); }


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1Klass1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Klass1 *)new Klass1();
  *(Klass1 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1Klass1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Klass1 *arg1 = (Klass1 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Klass1 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1Klass2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Klass2 *)new Klass2();
  *(Klass2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1Klass2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Klass2 *arg1 = (Klass2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Klass2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1Klass3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Klass3 *)new Klass3();
  *(Klass3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1Klass3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Klass3 *arg1 = (Klass3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Klass3 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1Klass4(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Klass4 *)new Klass4();
  *(Klass4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1Klass4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Klass4 *arg1 = (Klass4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Klass4 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1Klass5(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass5 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Klass5 *)new Klass5();
  *(Klass5 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1Klass5(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Klass5 *arg1 = (Klass5 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Klass5 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1Klass6(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass6 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Klass6 *)new Klass6();
  *(Klass6 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1Klass6(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Klass6 *arg1 = (Klass6 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Klass6 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1Klass7(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass7 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Klass7 *)new Klass7();
  *(Klass7 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1Klass7(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Klass7 *arg1 = (Klass7 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Klass7 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_KlassMethods_1methodA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  ::Klass1 arg1 ;
  ::Klass2 arg2 ;
  ::Klass3 *arg3 = (::Klass3 *) 0 ;
  ::Klass4 *arg4 = (::Klass4 *) 0 ;
  ::Klass5 *arg5 = 0 ;
  ::Klass6 *arg6 = 0 ;
  ::Klass7 **arg7 = 0 ;
  ::Klass1 *argp1 ;
  ::Klass2 const *argp2 ;
  ::Klass7 *temp7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  argp1 = *(::Klass1 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ::Klass1");
    return ;
  }
  arg1 = *argp1; 
  argp2 = *(::Klass2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ::Klass2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(::Klass3 **)&jarg3; 
  arg4 = *(::Klass4 **)&jarg4; 
  arg5 = *(::Klass5 **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "::Klass5 const & reference is null");
    return ;
  } 
  arg6 = *(::Klass6 **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "::Klass6 & reference is null");
    return ;
  } 
  temp7 = *(::Klass7 **)&jarg7;
  arg7 = (::Klass7 **)&temp7; 
  KlassMethods::methodA(arg1,arg2,(::Klass3 const *)arg3,arg4,(::Klass5 const &)*arg5,*arg6,(::Klass7 *const &)*arg7);
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_KlassMethods_1methodB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  Klass1 arg1 ;
  Klass2 arg2 ;
  Klass3 *arg3 = (Klass3 *) 0 ;
  Klass4 *arg4 = (Klass4 *) 0 ;
  Klass5 *arg5 = 0 ;
  Klass6 *arg6 = 0 ;
  Klass7 **arg7 = 0 ;
  Klass1 *argp1 ;
  Klass2 const *argp2 ;
  Klass7 *temp7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  argp1 = *(Klass1 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass1");
    return ;
  }
  arg1 = *argp1; 
  argp2 = *(Klass2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(Klass3 **)&jarg3; 
  arg4 = *(Klass4 **)&jarg4; 
  arg5 = *(Klass5 **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Klass5 const & reference is null");
    return ;
  } 
  arg6 = *(Klass6 **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Klass6 & reference is null");
    return ;
  } 
  temp7 = *(Klass7 **)&jarg7;
  arg7 = (Klass7 **)&temp7; 
  KlassMethods::methodB(arg1,arg2,(Klass3 const *)arg3,arg4,(Klass5 const &)*arg5,*arg6,(Klass7 *const &)*arg7);
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1KlassMethods(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  KlassMethods *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (KlassMethods *)new KlassMethods();
  *(KlassMethods **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1KlassMethods(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  KlassMethods *arg1 = (KlassMethods *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(KlassMethods **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1XYZ1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::XYZ1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::XYZ1 *)new Space::XYZ1();
  *(Space::XYZ1 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1XYZ1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::XYZ1 *arg1 = (Space::XYZ1 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::XYZ1 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1XYZ2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::XYZ2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::XYZ2 *)new Space::XYZ2();
  *(Space::XYZ2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1XYZ2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::XYZ2 *arg1 = (Space::XYZ2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::XYZ2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1XYZ3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::XYZ3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::XYZ3 *)new Space::XYZ3();
  *(Space::XYZ3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1XYZ3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::XYZ3 *arg1 = (Space::XYZ3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::XYZ3 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1XYZ4(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::XYZ4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::XYZ4 *)new Space::XYZ4();
  *(Space::XYZ4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1XYZ4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::XYZ4 *arg1 = (Space::XYZ4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::XYZ4 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1XYZ5(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::XYZ5 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::XYZ5 *)new Space::XYZ5();
  *(Space::XYZ5 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1XYZ5(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::XYZ5 *arg1 = (Space::XYZ5 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::XYZ5 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1XYZ6(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::XYZ6 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::XYZ6 *)new Space::XYZ6();
  *(Space::XYZ6 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1XYZ6(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::XYZ6 *arg1 = (Space::XYZ6 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::XYZ6 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1XYZ7(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::XYZ7 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::XYZ7 *)new Space::XYZ7();
  *(Space::XYZ7 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1XYZ7(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::XYZ7 *arg1 = (Space::XYZ7 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::XYZ7 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_XYZMethods_1methodA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  ::Space::XYZ1 arg1 ;
  ::Space::XYZ2 arg2 ;
  ::Space::XYZ3 *arg3 = (::Space::XYZ3 *) 0 ;
  ::Space::XYZ4 *arg4 = (::Space::XYZ4 *) 0 ;
  ::Space::XYZ5 *arg5 = 0 ;
  ::Space::XYZ6 *arg6 = 0 ;
  ::Space::XYZ7 **arg7 = 0 ;
  ::Space::XYZ1 *argp1 ;
  ::Space::XYZ2 const *argp2 ;
  ::Space::XYZ7 *temp7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  argp1 = *(::Space::XYZ1 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ::Space::XYZ1");
    return ;
  }
  arg1 = *argp1; 
  argp2 = *(::Space::XYZ2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ::Space::XYZ2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(::Space::XYZ3 **)&jarg3; 
  arg4 = *(::Space::XYZ4 **)&jarg4; 
  arg5 = *(::Space::XYZ5 **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "::Space::XYZ5 const & reference is null");
    return ;
  } 
  arg6 = *(::Space::XYZ6 **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "::Space::XYZ6 & reference is null");
    return ;
  } 
  temp7 = *(::Space::XYZ7 **)&jarg7;
  arg7 = (::Space::XYZ7 **)&temp7; 
  XYZMethods::methodA(arg1,arg2,(::Space::XYZ3 const *)arg3,arg4,(::Space::XYZ5 const &)*arg5,*arg6,(::Space::XYZ7 *const &)*arg7);
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_XYZMethods_1methodB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  Space::XYZ1 arg1 ;
  Space::XYZ2 arg2 ;
  Space::XYZ3 *arg3 = (Space::XYZ3 *) 0 ;
  Space::XYZ4 *arg4 = (Space::XYZ4 *) 0 ;
  Space::XYZ5 *arg5 = 0 ;
  Space::XYZ6 *arg6 = 0 ;
  Space::XYZ7 **arg7 = 0 ;
  Space::XYZ1 *argp1 ;
  Space::XYZ2 const *argp2 ;
  Space::XYZ7 *temp7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  argp1 = *(Space::XYZ1 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::XYZ1");
    return ;
  }
  arg1 = *argp1; 
  argp2 = *(Space::XYZ2 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::XYZ2 const");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(Space::XYZ3 **)&jarg3; 
  arg4 = *(Space::XYZ4 **)&jarg4; 
  arg5 = *(Space::XYZ5 **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::XYZ5 const & reference is null");
    return ;
  } 
  arg6 = *(Space::XYZ6 **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::XYZ6 & reference is null");
    return ;
  } 
  temp7 = *(Space::XYZ7 **)&jarg7;
  arg7 = (Space::XYZ7 **)&temp7; 
  XYZMethods::methodB(arg1,arg2,(Space::XYZ3 const *)arg3,arg4,(Space::XYZ5 const &)*arg5,*arg6,(Space::XYZ7 *const &)*arg7);
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1XYZMethods(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XYZMethods *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XYZMethods *)new XYZMethods();
  *(XYZMethods **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1XYZMethods(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XYZMethods *arg1 = (XYZMethods *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XYZMethods **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_AnEnumMethods_1methodA(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  ::AnEnum1 arg1 ;
  ::AnEnum2 arg2 ;
  ::AnEnum3 *arg3 = 0 ;
  ::AnEnum3 temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::AnEnum1)jarg1; 
  arg2 = (::AnEnum2)jarg2; 
  temp3 = (::AnEnum3)jarg3; 
  arg3 = &temp3; 
  AnEnumMethods::methodA(arg1,arg2,(enum AnEnum3 const &)*arg3);
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_AnEnumMethods_1methodB(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  AnEnum1 arg1 ;
  AnEnum2 arg2 ;
  AnEnum3 *arg3 = 0 ;
  AnEnum3 temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (AnEnum1)jarg1; 
  arg2 = (AnEnum2)jarg2; 
  temp3 = (AnEnum3)jarg3; 
  arg3 = &temp3; 
  AnEnumMethods::methodB(arg1,arg2,(enum AnEnum3 const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1AnEnumMethods(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AnEnumMethods *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AnEnumMethods *)new AnEnumMethods();
  *(AnEnumMethods **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1AnEnumMethods(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AnEnumMethods *arg1 = (AnEnumMethods *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AnEnumMethods **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_TheEnumMethods_1methodA(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  ::Space::TheEnum1 arg1 ;
  ::Space::TheEnum2 arg2 ;
  ::Space::TheEnum3 *arg3 = 0 ;
  ::Space::TheEnum3 temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (::Space::TheEnum1)jarg1; 
  arg2 = (::Space::TheEnum2)jarg2; 
  temp3 = (::Space::TheEnum3)jarg3; 
  arg3 = &temp3; 
  Space::TheEnumMethods::methodA(arg1,arg2,(enum Space::TheEnum3 const &)*arg3);
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_TheEnumMethods_1methodB(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  Space::TheEnum1 arg1 ;
  Space::TheEnum2 arg2 ;
  Space::TheEnum3 *arg3 = 0 ;
  Space::TheEnum3 temp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Space::TheEnum1)jarg1; 
  arg2 = (Space::TheEnum2)jarg2; 
  temp3 = (Space::TheEnum3)jarg3; 
  arg3 = &temp3; 
  Space::TheEnumMethods::methodB(arg1,arg2,(enum Space::TheEnum3 const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_new_1TheEnumMethods(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::TheEnumMethods *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::TheEnumMethods *)new Space::TheEnumMethods();
  *(Space::TheEnumMethods **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_global_1namespace_global_1namespaceJNI_delete_1TheEnumMethods(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::TheEnumMethods *arg1 = (Space::TheEnumMethods *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::TheEnumMethods **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass1A(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass1 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass1A();
  *(Klass1 **)&jresult = new Klass1((const Klass1 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass1B(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ::Klass1 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass1B();
  *(::Klass1 **)&jresult = new ::Klass1((const ::Klass1 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass2A(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass2 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass2A();
  *(Klass2 **)&jresult = new Klass2((const Klass2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass2B(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ::Klass2 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass2B();
  *(::Klass2 **)&jresult = new ::Klass2((const ::Klass2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass3A(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass3 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass3A();
  *(Klass3 **)&jresult = new Klass3((const Klass3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass3B(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ::Klass3 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass3B();
  *(::Klass3 **)&jresult = new ::Klass3((const ::Klass3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass4A(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass4 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass4A();
  *(Klass4 **)&jresult = new Klass4((const Klass4 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass4B(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ::Klass4 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass4B();
  *(::Klass4 **)&jresult = new ::Klass4((const ::Klass4 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass5A(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass5 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass5A();
  *(Klass5 **)&jresult = new Klass5((const Klass5 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass5B(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ::Klass5 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass5B();
  *(::Klass5 **)&jresult = new ::Klass5((const ::Klass5 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass6A(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass6 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass6A();
  *(Klass6 **)&jresult = new Klass6((const Klass6 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass6B(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ::Klass6 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass6B();
  *(::Klass6 **)&jresult = new ::Klass6((const ::Klass6 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass7A(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass7 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass7A();
  *(Klass7 **)&jresult = new Klass7((const Klass7 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_global_1namespace_global_1namespaceJNI_getKlass7B(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ::Klass7 result;
  
  (void)jenv;
  (void)jcls;
  result = getKlass7B();
  *(::Klass7 **)&jresult = new ::Klass7((const ::Klass7 &)result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

