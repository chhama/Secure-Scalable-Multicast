/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


struct Test1 {};
struct Test2 {};
namespace Space {
  struct Test3 {};
  struct Test4 {};
}


void test1a(Test1 t, const Test1 &tt) {}
void test1b(::Test1 t, const ::Test1 &tt) {}

void test2a(Test2 t, const Test2 &tt) {}
void test2b(::Test2 t, const ::Test2 &tt) {}

void test3a(Space::Test3 t, const Space::Test3 &tt) {}
void test3b(::Space::Test3 t, const ::Space::Test3 &tt) {}
namespace Space {
  void test3c(Space::Test3 t, const Space::Test3 &tt) {}
  void test3d(::Space::Test3 t, const ::Space::Test3 &tt) {}
  void test3e(Test3 t, const Test3 &tt) {}
}

void test4a(Space::Test4 t, const Space::Test4 &tt) {}
void test4b(::Space::Test4 t, const ::Space::Test4 &tt) {}
namespace Space {
  void test4c(Space::Test4 t, const Space::Test4 &tt) {}
  void test4d(::Space::Test4 t, const ::Space::Test4 &tt) {}
  void test4e(Test4 t, const Test4 &tt) {}
}


struct XX {};


template<typename T> struct TemplateTest1 { T m_t; };
template<typename T> struct TemplateTest2 { T m_t; };
namespace Space {
  template<typename T> struct TemplateTest3 { T m_t; };
  template<typename T> struct TemplateTest4 { T m_t; };
}


void test_template_1a(TemplateTest1< ::XX > t, const TemplateTest1< ::XX > &tt) {}
void test_template_1b(::TemplateTest1< ::XX > t, const ::TemplateTest1< ::XX > &tt) {}

void test_template_2a(TemplateTest2< ::XX > t, const TemplateTest2< ::XX > &tt) {}
void test_template_2b(::TemplateTest2< ::XX > t, const ::TemplateTest2< ::XX > &tt) {}

void test_template_3a(Space::TemplateTest3< ::XX > t, const Space::TemplateTest3< ::XX > &tt) {}
void test_template_3b(::Space::TemplateTest3< ::XX > t, const ::Space::TemplateTest3< ::XX > &tt) {}
namespace Space {
  void test_template_3c(Space::TemplateTest3< ::XX > t, const Space::TemplateTest3< ::XX > &tt) {}
  void test_template_3d(::Space::TemplateTest3< ::XX > t, const ::Space::TemplateTest3< ::XX > &tt) {}
  void test_template_3e(TemplateTest3< ::XX > t, const TemplateTest3< ::XX > &tt) {}
}

void test_template_4a(Space::TemplateTest4< ::XX > t, const Space::TemplateTest4< ::XX > &tt) {}
void test_template_4b(::Space::TemplateTest4< ::XX > t, const ::Space::TemplateTest4< ::XX > &tt) {}
namespace Space {
  void test_template_4c(Space::TemplateTest4< ::XX > t, const Space::TemplateTest4< ::XX > &tt) {}
  void test_template_4d(::Space::TemplateTest4< ::XX > t, const ::Space::TemplateTest4< ::XX > &tt) {}
  void test_template_4e(TemplateTest4< ::XX > t, const TemplateTest4< ::XX > &tt) {}
}


enum Enum1 { enum_1 };
enum Enum2 { enum_2 };
namespace Space {
  enum Enum3 { enum_3 };
  enum Enum4 { enum_4 };
}


void test_enum_1a(Enum1 t, const Enum1 &tt) {}
void test_enum_1b(::Enum1 t, const ::Enum1 &tt) {}

void test_enum_2a(Enum2 t, const Enum2 &tt) {}
void test_enum_2b(::Enum2 t, const ::Enum2 &tt) {}

void test_enum_3a(Space::Enum3 t, const Space::Enum3 &tt) {}
void test_enum_3b(::Space::Enum3 t, const ::Space::Enum3 &tt) {}
namespace Space {
  void test_enum_3c(Space::Enum3 t, const Space::Enum3 &tt) {}
  void test_enum_3d(::Space::Enum3 t, const ::Space::Enum3 &tt) {}
  void test_enum_3e(Enum3 t, const Enum3 &tt) {}
}

void test_enum_4a(Space::Enum4 t, const Space::Enum4 &tt) {}
void test_enum_4b(::Space::Enum4 t, const ::Space::Enum4 &tt) {}
namespace Space {
  void test_enum_4c(Space::Enum4 t, const Space::Enum4 &tt) {}
  void test_enum_4d(::Space::Enum4 t, const ::Space::Enum4 &tt) {}
  void test_enum_4e(Enum4 t, const Enum4 &tt) {}
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_new_1Test1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Test1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Test1 *)new Test1();
  *(Test1 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_delete_1Test1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Test1 *arg1 = (Test1 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Test1 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_new_1Test2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Test2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Test2 *)new Test2();
  *(Test2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_delete_1Test2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Test2 *arg1 = (Test2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Test2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_new_1Test3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Test3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::Test3 *)new Space::Test3();
  *(Space::Test3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_delete_1Test3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Test3 *arg1 = (Space::Test3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::Test3 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_new_1Test4(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Test4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::Test4 *)new Space::Test4();
  *(Space::Test4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_delete_1Test4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Test4 *arg1 = (Space::Test4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::Test4 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Test1 arg1 ;
  Test1 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Test1(); /*in typemap for Test1*/
  /*in typemap for Test1 const &*/
  test1a(arg1,(Test1 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ::Test1 arg1 ;
  ::Test1 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = ::Test1(); /*in typemap for ::Test1*/
  /*in typemap for ::Test1 const &*/
  test1b(arg1,(::Test1 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test2a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Test2 arg1 ;
  Test2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Test2(); /*in typemap for Test2*/
  /*in typemap for Test2 const &*/
  test2a(arg1,(Test2 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test2b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ::Test2 arg1 ;
  ::Test2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = ::Test2(); /*in typemap for ::Test2*/
  /*in typemap for ::Test2 const &*/
  test2b(arg1,(::Test2 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test3a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::Test3 arg1 ;
  Space::Test3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Space::Test3(); /*in typemap for Space::Test3*/
  /*in typemap for Space::Test3 const &*/
  test3a(arg1,(Space::Test3 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test3b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ::Space::Test3 arg1 ;
  ::Space::Test3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = ::Space::Test3(); /*in typemap for ::Space::Test3*/
  /*in typemap for ::Space::Test3 const &*/
  test3b(arg1,(::Space::Test3 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test3c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::Test3 arg1 ;
  Space::Test3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Space::Test3(); /*in typemap for Space::Test3*/
  /*in typemap for Space::Test3 const &*/
  Space::test3c(arg1,(Space::Test3 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test3d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ::Space::Test3 arg1 ;
  ::Space::Test3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = ::Space::Test3(); /*in typemap for ::Space::Test3*/
  /*in typemap for ::Space::Test3 const &*/
  Space::test3d(arg1,(::Space::Test3 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test3e(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::Test3 arg1 ;
  Space::Test3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Space::Test3(); /*in typemap for Space::Test3*/
  /*in typemap for Space::Test3 const &*/
  Space::test3e(arg1,(Space::Test3 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test4a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::Test4 arg1 ;
  Space::Test4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Space::Test4(); /*in typemap for Space::Test4*/
  /*in typemap for Space::Test4 const &*/
  test4a(arg1,(Space::Test4 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test4b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ::Space::Test4 arg1 ;
  ::Space::Test4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = ::Space::Test4(); /*in typemap for ::Space::Test4*/
  /*in typemap for ::Space::Test4 const &*/
  test4b(arg1,(::Space::Test4 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test4c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::Test4 arg1 ;
  Space::Test4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Space::Test4(); /*in typemap for Space::Test4*/
  /*in typemap for Space::Test4 const &*/
  Space::test4c(arg1,(Space::Test4 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test4d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ::Space::Test4 arg1 ;
  ::Space::Test4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = ::Space::Test4(); /*in typemap for ::Space::Test4*/
  /*in typemap for ::Space::Test4 const &*/
  Space::test4d(arg1,(::Space::Test4 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test4e(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::Test4 arg1 ;
  Space::Test4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Space::Test4(); /*in typemap for Space::Test4*/
  /*in typemap for Space::Test4 const &*/
  Space::test4e(arg1,(Space::Test4 const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_new_1XX(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XX *)new XX();
  *(XX **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_delete_1XX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XX *arg1 = (XX *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XX **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_TemplateTest1XX_1m_1t_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TemplateTest1< ::XX > *arg1 = (TemplateTest1< ::XX > *) 0 ;
  ::XX *arg2 = (::XX *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TemplateTest1< ::XX > **)&jarg1; 
  arg2 = *(::XX **)&jarg2; 
  if (arg1) (arg1)->m_t = *arg2;
}


SWIGEXPORT jlong JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_TemplateTest1XX_1m_1t_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TemplateTest1< ::XX > *arg1 = (TemplateTest1< ::XX > *) 0 ;
  ::XX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateTest1< ::XX > **)&jarg1; 
  result = (::XX *)& ((arg1)->m_t);
  *(::XX **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_new_1TemplateTest1XX(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TemplateTest1< ::XX > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TemplateTest1< ::XX > *)new TemplateTest1< ::XX >();
  *(TemplateTest1< ::XX > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_delete_1TemplateTest1XX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TemplateTest1< ::XX > *arg1 = (TemplateTest1< ::XX > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TemplateTest1< ::XX > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_TemplateTest2XX_1m_1t_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TemplateTest2< ::XX > *arg1 = (TemplateTest2< ::XX > *) 0 ;
  ::XX *arg2 = (::XX *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TemplateTest2< ::XX > **)&jarg1; 
  arg2 = *(::XX **)&jarg2; 
  if (arg1) (arg1)->m_t = *arg2;
}


SWIGEXPORT jlong JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_TemplateTest2XX_1m_1t_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TemplateTest2< ::XX > *arg1 = (TemplateTest2< ::XX > *) 0 ;
  ::XX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TemplateTest2< ::XX > **)&jarg1; 
  result = (::XX *)& ((arg1)->m_t);
  *(::XX **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_new_1TemplateTest2XX(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TemplateTest2< ::XX > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TemplateTest2< ::XX > *)new TemplateTest2< ::XX >();
  *(TemplateTest2< ::XX > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_delete_1TemplateTest2XX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TemplateTest2< ::XX > *arg1 = (TemplateTest2< ::XX > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TemplateTest2< ::XX > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_TemplateTest3XX_1m_1t_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::TemplateTest3< ::XX > *arg1 = (Space::TemplateTest3< ::XX > *) 0 ;
  ::XX *arg2 = (::XX *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::TemplateTest3< ::XX > **)&jarg1; 
  arg2 = *(::XX **)&jarg2; 
  if (arg1) (arg1)->m_t = *arg2;
}


SWIGEXPORT jlong JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_TemplateTest3XX_1m_1t_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::TemplateTest3< ::XX > *arg1 = (Space::TemplateTest3< ::XX > *) 0 ;
  ::XX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::TemplateTest3< ::XX > **)&jarg1; 
  result = (::XX *)& ((arg1)->m_t);
  *(::XX **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_new_1TemplateTest3XX(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::TemplateTest3< ::XX > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::TemplateTest3< ::XX > *)new Space::TemplateTest3< ::XX >();
  *(Space::TemplateTest3< ::XX > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_delete_1TemplateTest3XX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::TemplateTest3< ::XX > *arg1 = (Space::TemplateTest3< ::XX > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::TemplateTest3< ::XX > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_TemplateTest4XX_1m_1t_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::TemplateTest4< ::XX > *arg1 = (Space::TemplateTest4< ::XX > *) 0 ;
  ::XX *arg2 = (::XX *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Space::TemplateTest4< ::XX > **)&jarg1; 
  arg2 = *(::XX **)&jarg2; 
  if (arg1) (arg1)->m_t = *arg2;
}


SWIGEXPORT jlong JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_TemplateTest4XX_1m_1t_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::TemplateTest4< ::XX > *arg1 = (Space::TemplateTest4< ::XX > *) 0 ;
  ::XX *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Space::TemplateTest4< ::XX > **)&jarg1; 
  result = (::XX *)& ((arg1)->m_t);
  *(::XX **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_new_1TemplateTest4XX(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::TemplateTest4< ::XX > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::TemplateTest4< ::XX > *)new Space::TemplateTest4< ::XX >();
  *(Space::TemplateTest4< ::XX > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_delete_1TemplateTest4XX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::TemplateTest4< ::XX > *arg1 = (Space::TemplateTest4< ::XX > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Space::TemplateTest4< ::XX > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_11a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TemplateTest1< ::XX > arg1 ;
  TemplateTest1< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = TemplateTest1< ::XX >(); /* in typemap for TemplateTest1< ::XX > */
  /* in typemap for TemplateTest1< ::XX > const & */
  test_template_1a(arg1,(TemplateTest1< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_11b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ::TemplateTest1< ::XX > arg1 ;
  ::TemplateTest1< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = ::TemplateTest1< ::XX >(); /* in typemap for ::TemplateTest1< ::XX > */
  /* in typemap for ::TemplateTest1< ::XX > const & */
  test_template_1b(arg1,(::TemplateTest1< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_12a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TemplateTest2< ::XX > arg1 ;
  TemplateTest2< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = TemplateTest2< ::XX >(); /* in typemap for TemplateTest2< ::XX > */
  /* in typemap for TemplateTest2< ::XX > const & */
  test_template_2a(arg1,(TemplateTest2< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_12b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ::TemplateTest2< ::XX > arg1 ;
  ::TemplateTest2< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = ::TemplateTest2< ::XX >(); /* in typemap for ::TemplateTest2< ::XX > */
  /* in typemap for ::TemplateTest2< ::XX > const & */
  test_template_2b(arg1,(::TemplateTest2< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_13a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::TemplateTest3< ::XX > arg1 ;
  Space::TemplateTest3< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Space::TemplateTest3< ::XX >(); /* in typemap for Space::TemplateTest3< ::XX > */
  /* in typemap for Space::TemplateTest3< ::XX > const & */
  test_template_3a(arg1,(Space::TemplateTest3< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_13b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ::Space::TemplateTest3< ::XX > arg1 ;
  ::Space::TemplateTest3< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = ::Space::TemplateTest3< ::XX >(); /* in typemap for ::Space::TemplateTest3< ::XX > */
  /* in typemap for ::Space::TemplateTest3< ::XX > const & */
  test_template_3b(arg1,(::Space::TemplateTest3< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_13c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::TemplateTest3< ::XX > arg1 ;
  Space::TemplateTest3< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Space::TemplateTest3< ::XX >(); /* in typemap for Space::TemplateTest3< ::XX > */
  /* in typemap for Space::TemplateTest3< ::XX > const & */
  Space::test_template_3c(arg1,(Space::TemplateTest3< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_13d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ::Space::TemplateTest3< ::XX > arg1 ;
  ::Space::TemplateTest3< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = ::Space::TemplateTest3< ::XX >(); /* in typemap for ::Space::TemplateTest3< ::XX > */
  /* in typemap for ::Space::TemplateTest3< ::XX > const & */
  Space::test_template_3d(arg1,(::Space::TemplateTest3< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_13e(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::TemplateTest3< ::XX > arg1 ;
  Space::TemplateTest3< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Space::TemplateTest3< ::XX >(); /* in typemap for Space::TemplateTest3< ::XX > */
  /* in typemap for Space::TemplateTest3< ::XX > const & */
  Space::test_template_3e(arg1,(Space::TemplateTest3< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_14a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::TemplateTest4< ::XX > arg1 ;
  Space::TemplateTest4< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Space::TemplateTest4< ::XX >(); /* in typemap for Space::TemplateTest4< ::XX > */
  /* in typemap for Space::TemplateTest4< ::XX > const & */
  test_template_4a(arg1,(Space::TemplateTest4< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_14b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ::Space::TemplateTest4< ::XX > arg1 ;
  ::Space::TemplateTest4< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = ::Space::TemplateTest4< ::XX >(); /* in typemap for ::Space::TemplateTest4< ::XX > */
  /* in typemap for ::Space::TemplateTest4< ::XX > const & */
  test_template_4b(arg1,(::Space::TemplateTest4< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_14c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::TemplateTest4< ::XX > arg1 ;
  Space::TemplateTest4< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Space::TemplateTest4< ::XX >(); /* in typemap for Space::TemplateTest4< ::XX > */
  /* in typemap for Space::TemplateTest4< ::XX > const & */
  Space::test_template_4c(arg1,(Space::TemplateTest4< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_14d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ::Space::TemplateTest4< ::XX > arg1 ;
  ::Space::TemplateTest4< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = ::Space::TemplateTest4< ::XX >(); /* in typemap for ::Space::TemplateTest4< ::XX > */
  /* in typemap for ::Space::TemplateTest4< ::XX > const & */
  Space::test_template_4d(arg1,(::Space::TemplateTest4< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1template_14e(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Space::TemplateTest4< ::XX > arg1 ;
  Space::TemplateTest4< ::XX > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = Space::TemplateTest4< ::XX >(); /* in typemap for Space::TemplateTest4< ::XX > */
  /* in typemap for Space::TemplateTest4< ::XX > const & */
  Space::test_template_4e(arg1,(Space::TemplateTest4< ::XX > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_11a(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  Enum1 arg1 ;
  Enum1 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = Enum1(); /*in typemap for Enum1*/
  /*in typemap for Enum1 const &*/
  test_enum_1a(arg1,(enum Enum1 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_11b(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  ::Enum1 arg1 ;
  ::Enum1 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = ::Enum1(); /*in typemap for ::Enum1*/
  /*in typemap for ::Enum1 const &*/
  test_enum_1b(arg1,(enum Enum1 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_12a(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  Enum2 arg1 ;
  Enum2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = Enum2(); /*in typemap for Enum2*/
  /*in typemap for Enum2 const &*/
  test_enum_2a(arg1,(enum Enum2 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_12b(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  ::Enum2 arg1 ;
  ::Enum2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = ::Enum2(); /*in typemap for ::Enum2*/
  /*in typemap for ::Enum2 const &*/
  test_enum_2b(arg1,(enum Enum2 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_13a(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  Space::Enum3 arg1 ;
  Space::Enum3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = Space::Enum3(); /*in typemap for Space::Enum3*/
  /*in typemap for Space::Enum3 const &*/
  test_enum_3a(arg1,(enum Space::Enum3 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_13b(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  ::Space::Enum3 arg1 ;
  ::Space::Enum3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = ::Space::Enum3(); /*in typemap for ::Space::Enum3*/
  /*in typemap for ::Space::Enum3 const &*/
  test_enum_3b(arg1,(enum Space::Enum3 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_13c(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  Space::Enum3 arg1 ;
  Space::Enum3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = Space::Enum3(); /*in typemap for Space::Enum3*/
  /*in typemap for Space::Enum3 const &*/
  Space::test_enum_3c(arg1,(enum Space::Enum3 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_13d(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  ::Space::Enum3 arg1 ;
  ::Space::Enum3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = ::Space::Enum3(); /*in typemap for ::Space::Enum3*/
  /*in typemap for ::Space::Enum3 const &*/
  Space::test_enum_3d(arg1,(enum Space::Enum3 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_13e(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  Space::Enum3 arg1 ;
  Space::Enum3 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = Space::Enum3(); /*in typemap for Space::Enum3*/
  /*in typemap for Space::Enum3 const &*/
  Space::test_enum_3e(arg1,(enum Space::Enum3 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_14a(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  Space::Enum4 arg1 ;
  Space::Enum4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = Space::Enum4(); /*in typemap for Space::Enum4*/
  /*in typemap for Space::Enum4 const &*/
  test_enum_4a(arg1,(enum Space::Enum4 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_14b(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  ::Space::Enum4 arg1 ;
  ::Space::Enum4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = ::Space::Enum4(); /*in typemap for ::Space::Enum4*/
  /*in typemap for ::Space::Enum4 const &*/
  test_enum_4b(arg1,(enum Space::Enum4 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_14c(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  Space::Enum4 arg1 ;
  Space::Enum4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = Space::Enum4(); /*in typemap for Space::Enum4*/
  /*in typemap for Space::Enum4 const &*/
  Space::test_enum_4c(arg1,(enum Space::Enum4 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_14d(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  ::Space::Enum4 arg1 ;
  ::Space::Enum4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = ::Space::Enum4(); /*in typemap for ::Space::Enum4*/
  /*in typemap for ::Space::Enum4 const &*/
  Space::test_enum_4d(arg1,(enum Space::Enum4 const &)*arg2);
}


SWIGEXPORT void JNICALL Java_typemap_1global_1scope_typemap_1global_1scopeJNI_test_1enum_14e(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  Space::Enum4 arg1 ;
  Space::Enum4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = Space::Enum4(); /*in typemap for Space::Enum4*/
  /*in typemap for Space::Enum4 const &*/
  Space::test_enum_4e(arg1,(enum Space::Enum4 const &)*arg2);
}


#ifdef __cplusplus
}
#endif

