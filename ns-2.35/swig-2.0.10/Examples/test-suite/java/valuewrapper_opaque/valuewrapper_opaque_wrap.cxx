/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


template<typename T> class TemplateClass {
public:
TemplateClass<T>(T a) {}
};

struct B
{
};

class C
{
public:
  C(int){}
};



struct A 
{
  A(int){}
};

class D {};

class Klass {};


TemplateClass<Klass> getKlass(Klass k) {
  TemplateClass<Klass> t(k);
  return t;
}


TemplateClass<A> getA(A a) {
  TemplateClass<A> t(a);
  return t;
}


TemplateClass<B> getA(B b) {
  TemplateClass<B> t(b);
  return t;
}


TemplateClass<C> getC(C a) {
  TemplateClass<C> t(a);
  return t;
}


TemplateClass<int> getInt(int a) {
  TemplateClass<int> t(a);
  return t;
}

A sgetA(A a) {
  return a;
}

Klass sgetKlass(Klass a) {
  return a;
}

template <class T> 
struct auto_ptr
{
  auto_ptr(T a){}
};

auto_ptr<A> getPtrA(auto_ptr<A> a) {
  return a;
}

B getB(B a) {
  return a;
}

D getD(D a) {
  return a;
}
 


class BB {
friend class AA;

protected:
	BB(int aa) { this->a = aa; };
	BB() {};
	
	int a;
};



class AA {
public:	
	AA(){}
	
	BB innerObj;
};



class Foobar
{
public:
  Foobar()
  {
  }
  
  char *foo_method()
  {
    return 0;
  }
  
};

class Quux
{
public:
  Quux()
  {
  }
  
  Foobar method()
  {
    return Foobar();
  }
  
};


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_new_1A(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (A *)new A(arg1);
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_delete_1A(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  A *arg1 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(A **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_new_1D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (D *)new D();
  *(D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_delete_1D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  D *arg1 = (D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_new_1Klass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Klass *)new Klass();
  *(Klass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_delete_1Klass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Klass *arg1 = (Klass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Klass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_getKlass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Klass arg1 ;
  Klass *argp1 ;
  SwigValueWrapper< TemplateClass< Klass > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Klass **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass");
    return 0;
  }
  arg1 = *argp1; 
  result = getKlass(arg1);
  *(TemplateClass< Klass > **)&jresult = new TemplateClass< Klass >((const TemplateClass< Klass > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_getA_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigValueWrapper< A > arg1 ;
  A *argp1 ;
  SwigValueWrapper< TemplateClass< A > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(A **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null A");
    return 0;
  }
  arg1 = *argp1; 
  result = getA(arg1);
  *(TemplateClass< A > **)&jresult = new TemplateClass< A >((const TemplateClass< A > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_getA_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  B arg1 ;
  B *argp1 ;
  SwigValueWrapper< TemplateClass< B > > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(B **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null B");
    return 0;
  }
  arg1 = *argp1; 
  result = getA(arg1);
  *(TemplateClass< B > **)&jresult = new TemplateClass< B >((const TemplateClass< B > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_getC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< C > arg1 ;
  C *argp1 ;
  SwigValueWrapper< TemplateClass< C > > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(C **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null C");
    return 0;
  }
  arg1 = *argp1; 
  result = getC(arg1);
  *(TemplateClass< C > **)&jresult = new TemplateClass< C >((const TemplateClass< C > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_getInt(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  SwigValueWrapper< TemplateClass< int > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = getInt(arg1);
  *(TemplateClass< int > **)&jresult = new TemplateClass< int >((const TemplateClass< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_sgetA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigValueWrapper< A > arg1 ;
  A *argp1 ;
  SwigValueWrapper< A > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(A **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null A");
    return 0;
  }
  arg1 = *argp1; 
  result = sgetA(arg1);
  *(A **)&jresult = new A((const A &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_sgetKlass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Klass arg1 ;
  Klass *argp1 ;
  Klass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Klass **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Klass");
    return 0;
  }
  arg1 = *argp1; 
  result = sgetKlass(arg1);
  *(Klass **)&jresult = new Klass((const Klass &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_getPtrA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< auto_ptr< A > > arg1 ;
  auto_ptr< A > *argp1 ;
  SwigValueWrapper< auto_ptr< A > > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(auto_ptr< A > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null auto_ptr< A >");
    return 0;
  }
  arg1 = *argp1; 
  result = getPtrA(arg1);
  *(auto_ptr< A > **)&jresult = new auto_ptr< A >((const auto_ptr< A > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_getB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  B arg1 ;
  B *argp1 ;
  B result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(B **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null B");
    return 0;
  }
  arg1 = *argp1; 
  result = getB(arg1);
  *(B **)&jresult = new B((const B &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_getD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigValueWrapper< D > arg1 ;
  D *argp1 ;
  SwigValueWrapper< D > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(D **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null D");
    return 0;
  }
  arg1 = *argp1; 
  result = getD(arg1);
  *(D **)&jresult = new D((const D &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_new_1AA(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AA *)new AA();
  *(AA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_AA_1innerObj_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  AA *arg1 = (AA *) 0 ;
  BB *arg2 = (BB *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AA **)&jarg1; 
  arg2 = *(BB **)&jarg2; 
  if (arg1) (arg1)->innerObj = *arg2;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_AA_1innerObj_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AA *arg1 = (AA *) 0 ;
  BB *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AA **)&jarg1; 
  result = (BB *)& ((arg1)->innerObj);
  *(BB **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_delete_1AA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AA *arg1 = (AA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AA **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_new_1Quux(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Quux *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Quux *)new Quux();
  *(Quux **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_Quux_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Quux *arg1 = (Quux *) 0 ;
  Foobar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Quux **)&jarg1; 
  result = (arg1)->method();
  *(Foobar **)&jresult = new Foobar((const Foobar &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_valuewrapper_1opaque_valuewrapper_1opaqueJNI_delete_1Quux(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Quux *arg1 = (Quux *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Quux **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

