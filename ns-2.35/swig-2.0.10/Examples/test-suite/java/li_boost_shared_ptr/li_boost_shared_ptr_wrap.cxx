/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "boost/shared_ptr.hpp"
#include "swig_examples_lock.h"

// Uncomment macro below to turn on shared_ptr memory leak checking as described above
//#define SHARED_PTR_WRAPPER

#ifdef SHARED_PTR_WRAPPER
# include "shared_ptr_wrapper.h"
#endif


#ifndef SHARED_PTR_WRAPPER
# define SwigBoost boost
#endif


#include <string>


#include <iostream>
using namespace std;

static bool debug_shared = false;

namespace Space {

struct Klass {
  Klass() : value("EMPTY") { if (debug_shared) cout << "Klass() [" << value << "]" << endl; increment(); }

  Klass(const std::string &val) : value(val) { if (debug_shared) cout << "Klass(string) [" << value << "]" << endl; increment(); }

  virtual ~Klass() { if (debug_shared) cout << "~Klass() [" << value << "]" << endl; decrement(); }
  virtual std::string getValue() const { return value; }
  void append(const std::string &s) { value += s; }
  Klass(const Klass &other) : value(other.value) { if (debug_shared) cout << "Klass(const Klass&) [" << value << "]" << endl; increment(); }

  Klass &operator=(const Klass &other) { value = other.value; return *this; }
  static int getTotal_count() { return total_count; }

private:
  // lock increment and decrement as a destructor could be called at the same time as a 
  // new object is being created - C# / Java, at least, have finalizers run in a separate thread
  static SwigExamples::CriticalSection critical_section;
  static void increment() { SwigExamples::Lock lock(critical_section); total_count++; if (debug_shared) cout << "      ++xxxxx Klass::increment tot: " << total_count << endl;}
  static void decrement() { SwigExamples::Lock lock(critical_section); total_count--; if (debug_shared) cout << "      --xxxxx Klass::decrement tot: " << total_count << endl;}
  static int total_count;
  std::string value;
  int array[1024];
};
SwigExamples::CriticalSection Space::Klass::critical_section;

struct IgnoredMultipleInheritBase { 
  IgnoredMultipleInheritBase() : d(0.0), e(0.0) {}
  virtual ~IgnoredMultipleInheritBase() {} 
  double d; 
  double e;
  virtual void AVirtualMethod() {} 
};

// For most compilers, this use of multiple inheritance results in different derived and base class 
// pointer values ... for some more challenging tests :)
struct KlassDerived : IgnoredMultipleInheritBase, Klass {
  KlassDerived() : Klass() {}
  KlassDerived(const std::string &val) : Klass(val) {}
  KlassDerived(const KlassDerived &other) : Klass(other) {}
  virtual ~KlassDerived() {}
  virtual std::string getValue() const { return Klass::getValue() + "-Derived"; }
};
KlassDerived* derivedpointertest(KlassDerived* kd) {
  if (kd)
    kd->append(" derivedpointertest");
  return kd;
}
KlassDerived& derivedreftest(KlassDerived& kd) {
  kd.append(" derivedreftest");
  return kd;
}
SwigBoost::shared_ptr<KlassDerived> derivedsmartptrtest(SwigBoost::shared_ptr<KlassDerived> kd) {
  if (kd)
    kd->append(" derivedsmartptrtest");
  return kd;
}
SwigBoost::shared_ptr<KlassDerived>* derivedsmartptrpointertest(SwigBoost::shared_ptr<KlassDerived>* kd) {
  if (kd && *kd)
    (*kd)->append(" derivedsmartptrpointertest");
  return kd;
}
SwigBoost::shared_ptr<KlassDerived>* derivedsmartptrreftest(SwigBoost::shared_ptr<KlassDerived>* kd) {
  if (kd && *kd)
    (*kd)->append(" derivedsmartptrreftest");
  return kd;
}
SwigBoost::shared_ptr<KlassDerived>*& derivedsmartptrpointerreftest(SwigBoost::shared_ptr<KlassDerived>*& kd) {
  if (kd && *kd)
    (*kd)->append(" derivedsmartptrpointerreftest");
  return kd;
}

// 3 classes in inheritance chain test
struct Klass2ndDerived : Klass {
  Klass2ndDerived() : Klass() {}
  Klass2ndDerived(const std::string &val) : Klass(val) {}
};
struct Klass3rdDerived : IgnoredMultipleInheritBase, Klass2ndDerived {
  Klass3rdDerived() : Klass2ndDerived() {}
  Klass3rdDerived(const std::string &val) : Klass2ndDerived(val) {}
  virtual ~Klass3rdDerived() {}
  virtual std::string getValue() const { return Klass2ndDerived::getValue() + "-3rdDerived"; }
};

std::string test3rdupcast( SwigBoost::shared_ptr< Klass > k) {
  return k->getValue();
}



SwigBoost::shared_ptr<Klass> factorycreate() {
  return SwigBoost::shared_ptr<Klass>(new Klass("factorycreate"));
}
// smart pointer
SwigBoost::shared_ptr<Klass> smartpointertest(SwigBoost::shared_ptr<Klass> k) {
  if (k)
    k->append(" smartpointertest");
  return SwigBoost::shared_ptr<Klass>(k);
}
SwigBoost::shared_ptr<Klass>* smartpointerpointertest(SwigBoost::shared_ptr<Klass>* k) {
  if (k && *k)
    (*k)->append(" smartpointerpointertest");
  return k;
}
SwigBoost::shared_ptr<Klass>& smartpointerreftest(SwigBoost::shared_ptr<Klass>& k) {
  if (k)
    k->append(" smartpointerreftest");
  return k;
}
SwigBoost::shared_ptr<Klass>*& smartpointerpointerreftest(SwigBoost::shared_ptr<Klass>*& k) {
  if (k && *k)
    (*k)->append(" smartpointerpointerreftest");
  return k;
}
// const
SwigBoost::shared_ptr<const Klass> constsmartpointertest(SwigBoost::shared_ptr<const Klass> k) {
  return SwigBoost::shared_ptr<const Klass>(k);
}
SwigBoost::shared_ptr<const Klass>* constsmartpointerpointertest(SwigBoost::shared_ptr<const Klass>* k) {
  return k;
}
SwigBoost::shared_ptr<const Klass>& constsmartpointerreftest(SwigBoost::shared_ptr<const Klass>& k) {
  return k;
}
// plain pointer
Klass valuetest(Klass k) {
  k.append(" valuetest");
  return k;
}
Klass *pointertest(Klass *k) {
  if (k)
    k->append(" pointertest");
  return k;
}
Klass& reftest(Klass& k) {
  k.append(" reftest");
  return k;
}
Klass *const& pointerreftest(Klass *const& k) {
  k->append(" pointerreftest");
  return k;
}
// null
std::string nullsmartpointerpointertest(SwigBoost::shared_ptr<Klass>* k) {
  if (k && *k)
    return "not null";
  else if (!k)
    return "null smartpointer pointer";
  else if (!*k)
    return "null pointer";
  else
    return "also not null";
}
// $owner
Klass *pointerownertest() {
  return new Klass("pointerownertest");
}
SwigBoost::shared_ptr<Klass>* smartpointerpointerownertest() {
  return new SwigBoost::shared_ptr<Klass>(new Klass("smartpointerpointerownertest"));
}

// Provide overloads for Klass and derived classes as some language modules, eg Python, create an extra reference in
// the marshalling if an upcast to a base class is required.
long use_count(const SwigBoost::shared_ptr<Klass3rdDerived>& sptr) {
  return sptr.use_count();
}
long use_count(const SwigBoost::shared_ptr<Klass2ndDerived>& sptr) {
  return sptr.use_count();
}
long use_count(const SwigBoost::shared_ptr<KlassDerived>& sptr) {
  return sptr.use_count();
}
long use_count(const SwigBoost::shared_ptr<Klass>& sptr) {
  return sptr.use_count();
}
const SwigBoost::shared_ptr<Klass>& ref_1() { 
  static SwigBoost::shared_ptr<Klass> sptr;
  return sptr;
}

// overloading tests
std::string overload_rawbyval(int i) { return "int"; }
std::string overload_rawbyval(Klass k) { return "rawbyval"; }

std::string overload_rawbyref(int i) { return "int"; }
std::string overload_rawbyref(Klass &k) { return "rawbyref"; }

std::string overload_rawbyptr(int i) { return "int"; }
std::string overload_rawbyptr(Klass *k) { return "rawbyptr"; }

std::string overload_rawbyptrref(int i) { return "int"; }
std::string overload_rawbyptrref(Klass *const&k) { return "rawbyptrref"; }



std::string overload_smartbyval(int i) { return "int"; }
std::string overload_smartbyval(SwigBoost::shared_ptr<Klass> k) { return "smartbyval"; }

std::string overload_smartbyref(int i) { return "int"; }
std::string overload_smartbyref(SwigBoost::shared_ptr<Klass> &k) { return "smartbyref"; }

std::string overload_smartbyptr(int i) { return "int"; }
std::string overload_smartbyptr(SwigBoost::shared_ptr<Klass> *k) { return "smartbyptr"; }

std::string overload_smartbyptrref(int i) { return "int"; }
std::string overload_smartbyptrref(SwigBoost::shared_ptr<Klass> *&k) { return "smartbyptrref"; }

} // namespace Space



struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


  int Space::Klass::total_count = 0;


struct MemberVariables {
  MemberVariables() : SmartMemberPointer(&SmartMemberValue), SmartMemberReference(SmartMemberValue), MemberPointer(0), MemberReference(MemberValue) {}
  SwigBoost::shared_ptr<Space::Klass> SmartMemberValue;
  SwigBoost::shared_ptr<Space::Klass> * SmartMemberPointer;
  SwigBoost::shared_ptr<Space::Klass> & SmartMemberReference;
  Space::Klass MemberValue;
  Space::Klass * MemberPointer;
  Space::Klass & MemberReference;
};

// Global variables
SwigBoost::shared_ptr<Space::Klass> GlobalSmartValue;
Space::Klass GlobalValue;
Space::Klass * GlobalPointer = 0;
Space::Klass & GlobalReference = GlobalValue;



template <class T1, class T2> struct Base {
  Space::Klass klassBase;
  T1 baseVal1;
  T2 baseVal2;
  Base(T1 t1, T2 t2) : baseVal1(t1*2), baseVal2(t2*2) {}
  virtual std::string getValue() const { return "Base<>"; };
};


template <class T1, class T2> struct Pair : Base<T1, T2> {
  Space::Klass klassPair;
  T1 val1;
  T2 val2;
  Pair(T1 t1, T2 t2) : Base<T1, T2>(t1, t2), val1(t1), val2(t2) {}
  virtual std::string getValue() const { return "Pair<>"; };
};
Pair<int, double> pair_id2(Pair<int, double> p) { return p; }
SwigBoost::shared_ptr< Pair<int, double> > pair_id1(SwigBoost::shared_ptr< Pair<int, double> > p) { return p; }


namespace SwigBoost {
  const int NOT_COUNTING = -123456;
  int shared_ptr_wrapper_count() { 
  #ifdef SHARED_PTR_WRAPPER
    return SwigBoost::SharedPtrWrapper::getTotalCount(); 
  #else
    return NOT_COUNTING;
  #endif
  }
  #ifdef SHARED_PTR_WRAPPER
  template<> std::string show_message(boost::shared_ptr<Space::Klass >*t) {
    if (!t)
      return "null shared_ptr!!!";
    if (boost::get_deleter<SWIG_null_deleter>(*t))
      return "Klass NULL DELETER"; // pointer may be dangling so cannot use it
    if (*t)
      return "Klass: " + (*t)->getValue();
    else
      return "Klass: NULL";
  }
  template<> std::string show_message(boost::shared_ptr<const Space::Klass >*t) {
    if (!t)
      return "null shared_ptr!!!";
    if (boost::get_deleter<SWIG_null_deleter>(*t))
      return "Klass NULL DELETER"; // pointer may be dangling so cannot use it
    if (*t)
      return "Klass: " + (*t)->getValue();
    else
      return "Klass: NULL";
  }
  template<> std::string show_message(boost::shared_ptr<Space::KlassDerived >*t) {
    if (!t)
      return "null shared_ptr!!!";
    if (boost::get_deleter<SWIG_null_deleter>(*t))
      return "KlassDerived NULL DELETER"; // pointer may be dangling so cannot use it
    if (*t)
      return "KlassDerived: " + (*t)->getValue();
    else
      return "KlassDerived: NULL";
  }
  template<> std::string show_message(boost::shared_ptr<const Space::KlassDerived >*t) {
    if (!t)
      return "null shared_ptr!!!";
    if (boost::get_deleter<SWIG_null_deleter>(*t))
      return "KlassDerived NULL DELETER"; // pointer may be dangling so cannot use it
    if (*t)
      return "KlassDerived: " + (*t)->getValue();
    else
      return "KlassDerived: NULL";
  }
  #endif
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_debug_1shared_1set(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  debug_shared = arg1;
}


SWIGEXPORT jboolean JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_debug_1shared_1get(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)debug_shared;
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_new_1Klass_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass" << endl;
    }
    result = (Space::Klass *)new Space::Klass();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Space::Klass > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::Klass >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_new_1Klass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass" << endl;
    }
    result = (Space::Klass *)new Space::Klass((std::string const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Space::Klass > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::Klass >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_delete_1Klass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1;
  arg1 = (Space::Klass *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~Klass" << endl;
    }
    (void)arg1; delete smartarg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_Klass_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  SwigBoost::shared_ptr< Space::Klass const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr< const Space::Klass > **)&jarg1;
  arg1 = (Space::Klass *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling getValue" << endl;
    }
    result = ((Space::Klass const *)arg1)->getValue();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_Klass_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  std::string *arg2 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1;
  arg1 = (Space::Klass *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling append" << endl;
    }
    (arg1)->append((std::string const &)*arg2);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_new_1Klass_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Klass *arg1 = 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (Space::Klass *)((*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg1) ? (*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Klass const & reference is null");
    return 0;
  } 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass" << endl;
    }
    result = (Space::Klass *)new Space::Klass((Space::Klass const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Space::Klass > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::Klass >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_Klass_1getTotal_1count(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::Klass::getTotal_count" << endl;
    }
    result = (int)Space::Klass::getTotal_count();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_new_1KlassDerived_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::KlassDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling KlassDerived" << endl;
    }
    result = (Space::KlassDerived *)new Space::KlassDerived();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Space::KlassDerived > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::KlassDerived >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_new_1KlassDerived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  Space::KlassDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling KlassDerived" << endl;
    }
    result = (Space::KlassDerived *)new Space::KlassDerived((std::string const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Space::KlassDerived > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::KlassDerived >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_new_1KlassDerived_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::KlassDerived *arg1 = 0 ;
  Space::KlassDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (Space::KlassDerived *)((*(SwigBoost::shared_ptr< const Space::KlassDerived > **)&jarg1) ? (*(SwigBoost::shared_ptr< const Space::KlassDerived > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::KlassDerived const & reference is null");
    return 0;
  } 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling KlassDerived" << endl;
    }
    result = (Space::KlassDerived *)new Space::KlassDerived((Space::KlassDerived const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Space::KlassDerived > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::KlassDerived >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_delete_1KlassDerived(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::KlassDerived *arg1 = (Space::KlassDerived *) 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Space::KlassDerived > **)&jarg1;
  arg1 = (Space::KlassDerived *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~KlassDerived" << endl;
    }
    (void)arg1; delete smartarg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_KlassDerived_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Space::KlassDerived *arg1 = (Space::KlassDerived *) 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr< const Space::KlassDerived > **)&jarg1;
  arg1 = (Space::KlassDerived *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling getValue" << endl;
    }
    result = ((Space::KlassDerived const *)arg1)->getValue();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_derivedpointertest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::KlassDerived *arg1 = (Space::KlassDerived *) 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > *smartarg1 = 0 ;
  Space::KlassDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Space::KlassDerived > **)&jarg1;
  arg1 = (Space::KlassDerived *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::derivedpointertest" << endl;
    }
    result = (Space::KlassDerived *)Space::derivedpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Space::KlassDerived > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::KlassDerived >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_derivedreftest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::KlassDerived *arg1 = 0 ;
  Space::KlassDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (Space::KlassDerived *)((*(SwigBoost::shared_ptr<  Space::KlassDerived > **)&jarg1) ? (*(SwigBoost::shared_ptr<  Space::KlassDerived > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::KlassDerived & reference is null");
    return 0;
  } 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::derivedreftest" << endl;
    }
    result = (Space::KlassDerived *) &Space::derivedreftest(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr<  Space::KlassDerived > **)&jresult = new SwigBoost::shared_ptr<  Space::KlassDerived >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_derivedsmartptrtest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > arg1 ;
  SwigBoost::shared_ptr< Space::KlassDerived > *argp1 ;
  SwigBoost::shared_ptr< Space::KlassDerived > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(SwigBoost::shared_ptr< Space::KlassDerived > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::derivedsmartptrtest" << endl;
    }
    result = Space::derivedsmartptrtest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::KlassDerived > **)&jresult = result ? new SwigBoost::shared_ptr< Space::KlassDerived >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_derivedsmartptrpointertest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > *arg1 = (SwigBoost::shared_ptr< Space::KlassDerived > *) 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > tempnull1 ;
  SwigBoost::shared_ptr< Space::KlassDerived > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::KlassDerived > **)&jarg1 : &tempnull1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::derivedsmartptrpointertest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::KlassDerived > *)Space::derivedsmartptrpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::KlassDerived > **)&jresult = (result && *result) ? new SwigBoost::shared_ptr< Space::KlassDerived >(*result) : 0;
  if (0) delete result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_derivedsmartptrreftest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > *arg1 = (SwigBoost::shared_ptr< Space::KlassDerived > *) 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > tempnull1 ;
  SwigBoost::shared_ptr< Space::KlassDerived > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::KlassDerived > **)&jarg1 : &tempnull1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::derivedsmartptrreftest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::KlassDerived > *)Space::derivedsmartptrreftest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::KlassDerived > **)&jresult = (result && *result) ? new SwigBoost::shared_ptr< Space::KlassDerived >(*result) : 0;
  if (0) delete result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_derivedsmartptrpointerreftest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > **arg1 = 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > tempnull1 ;
  SwigBoost::shared_ptr< Space::KlassDerived > *temp1 = 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  temp1 = jarg1 ? *(SwigBoost::shared_ptr< Space::KlassDerived > **)&jarg1 : &tempnull1;
  arg1 = &temp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::derivedsmartptrpointerreftest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::KlassDerived > **) &Space::derivedsmartptrpointerreftest(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::KlassDerived > **)&jresult = (*result && **result) ? new SwigBoost::shared_ptr<  Space::KlassDerived >(**result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_new_1Klass2ndDerived_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Klass2ndDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass2ndDerived" << endl;
    }
    result = (Space::Klass2ndDerived *)new Space::Klass2ndDerived();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Space::Klass2ndDerived > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::Klass2ndDerived >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_new_1Klass2ndDerived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  Space::Klass2ndDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass2ndDerived" << endl;
    }
    result = (Space::Klass2ndDerived *)new Space::Klass2ndDerived((std::string const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Space::Klass2ndDerived > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::Klass2ndDerived >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_delete_1Klass2ndDerived(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Klass2ndDerived *arg1 = (Space::Klass2ndDerived *) 0 ;
  SwigBoost::shared_ptr< Space::Klass2ndDerived > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Space::Klass2ndDerived > **)&jarg1;
  arg1 = (Space::Klass2ndDerived *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~Klass2ndDerived" << endl;
    }
    (void)arg1; delete smartarg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_new_1Klass3rdDerived_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Klass3rdDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass3rdDerived" << endl;
    }
    result = (Space::Klass3rdDerived *)new Space::Klass3rdDerived();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Space::Klass3rdDerived > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::Klass3rdDerived >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_new_1Klass3rdDerived_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  Space::Klass3rdDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Klass3rdDerived" << endl;
    }
    result = (Space::Klass3rdDerived *)new Space::Klass3rdDerived((std::string const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Space::Klass3rdDerived > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::Klass3rdDerived >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_delete_1Klass3rdDerived(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Space::Klass3rdDerived *arg1 = (Space::Klass3rdDerived *) 0 ;
  SwigBoost::shared_ptr< Space::Klass3rdDerived > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Space::Klass3rdDerived > **)&jarg1;
  arg1 = (Space::Klass3rdDerived *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~Klass3rdDerived" << endl;
    }
    (void)arg1; delete smartarg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_Klass3rdDerived_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Space::Klass3rdDerived *arg1 = (Space::Klass3rdDerived *) 0 ;
  SwigBoost::shared_ptr< Space::Klass3rdDerived const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr< const Space::Klass3rdDerived > **)&jarg1;
  arg1 = (Space::Klass3rdDerived *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling getValue" << endl;
    }
    result = ((Space::Klass3rdDerived const *)arg1)->getValue();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_test3rdupcast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > arg1 ;
  SwigBoost::shared_ptr< Space::Klass > *argp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(SwigBoost::shared_ptr< Space::Klass > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::test3rdupcast" << endl;
    }
    result = Space::test3rdupcast(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_factorycreate(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > result;
  
  (void)jenv;
  (void)jcls;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::factorycreate" << endl;
    }
    result = Space::factorycreate();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::Klass > **)&jresult = result ? new SwigBoost::shared_ptr< Space::Klass >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_smartpointertest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > arg1 ;
  SwigBoost::shared_ptr< Space::Klass > *argp1 ;
  SwigBoost::shared_ptr< Space::Klass > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(SwigBoost::shared_ptr< Space::Klass > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::smartpointertest" << endl;
    }
    result = Space::smartpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::Klass > **)&jresult = result ? new SwigBoost::shared_ptr< Space::Klass >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_smartpointerpointertest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *arg1 = (SwigBoost::shared_ptr< Space::Klass > *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > tempnull1 ;
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::Klass > **)&jarg1 : &tempnull1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::smartpointerpointertest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass > *)Space::smartpointerpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::Klass > **)&jresult = (result && *result) ? new SwigBoost::shared_ptr< Space::Klass >(*result) : 0;
  if (0) delete result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_smartpointerreftest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *arg1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > tempnull1 ;
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::Klass > **)&jarg1 : &tempnull1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::smartpointerreftest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass > *) &Space::smartpointerreftest(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::Klass > **)&jresult = *result ? new SwigBoost::shared_ptr< Space::Klass >(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_smartpointerpointerreftest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > **arg1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > tempnull1 ;
  SwigBoost::shared_ptr< Space::Klass > *temp1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  temp1 = jarg1 ? *(SwigBoost::shared_ptr< Space::Klass > **)&jarg1 : &tempnull1;
  arg1 = &temp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::smartpointerpointerreftest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass > **) &Space::smartpointerpointerreftest(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::Klass > **)&jresult = (*result && **result) ? new SwigBoost::shared_ptr<  Space::Klass >(**result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_constsmartpointertest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass const > arg1 ;
  SwigBoost::shared_ptr< Space::Klass const > *argp1 ;
  SwigBoost::shared_ptr< Space::Klass const > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(SwigBoost::shared_ptr< Space::Klass const > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::constsmartpointertest" << endl;
    }
    result = Space::constsmartpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::Klass const > **)&jresult = result ? new SwigBoost::shared_ptr< Space::Klass const >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_constsmartpointerpointertest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass const > *arg1 = (SwigBoost::shared_ptr< Space::Klass const > *) 0 ;
  SwigBoost::shared_ptr< Space::Klass const > tempnull1 ;
  SwigBoost::shared_ptr< Space::Klass const > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::Klass const > **)&jarg1 : &tempnull1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::constsmartpointerpointertest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass const > *)Space::constsmartpointerpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::Klass const > **)&jresult = (result && *result) ? new SwigBoost::shared_ptr< Space::Klass const >(*result) : 0;
  if (0) delete result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_constsmartpointerreftest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass const > *arg1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass const > tempnull1 ;
  SwigBoost::shared_ptr< Space::Klass const > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::Klass const > **)&jarg1 : &tempnull1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::constsmartpointerreftest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass const > *) &Space::constsmartpointerreftest(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::Klass const > **)&jresult = *result ? new SwigBoost::shared_ptr< Space::Klass const >(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_valuetest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Klass arg1 ;
  Space::Klass *argp1 = 0 ;
  Space::Klass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  argp1 = (*(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1) ? (*(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1)->get() : 0;
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Klass");
    return 0;
  }
  arg1 = *argp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::valuetest" << endl;
    }
    result = Space::valuetest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr<  Space::Klass > **)&jresult = new SwigBoost::shared_ptr<  Space::Klass >(new Space::Klass((Space::Klass &)result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_pointertest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *smartarg1 = 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1;
  arg1 = (Space::Klass *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::pointertest" << endl;
    }
    result = (Space::Klass *)Space::pointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Space::Klass > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::Klass >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_reftest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Klass *arg1 = 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (Space::Klass *)((*(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1) ? (*(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Klass & reference is null");
    return 0;
  } 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::reftest" << endl;
    }
    result = (Space::Klass *) &Space::reftest(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr<  Space::Klass > **)&jresult = new SwigBoost::shared_ptr<  Space::Klass >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_pointerreftest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Space::Klass **arg1 = 0 ;
  Space::Klass *temp1 = 0 ;
  Space::Klass **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  temp1 = (Space::Klass *)((*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg1) ? (*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg1)->get() : 0);
  arg1 = &temp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::pointerreftest" << endl;
    }
    result = (Space::Klass **) &Space::pointerreftest((Space::Klass *const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< const Space::Klass > **)&jresult = new SwigBoost::shared_ptr< const Space::Klass >(*result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_nullsmartpointerpointertest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *arg1 = (SwigBoost::shared_ptr< Space::Klass > *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > tempnull1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::Klass > **)&jarg1 : &tempnull1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::nullsmartpointerpointertest" << endl;
    }
    result = Space::nullsmartpointerpointertest(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_pointerownertest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::pointerownertest" << endl;
    }
    result = (Space::Klass *)Space::pointerownertest();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Space::Klass > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::Klass >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_smartpointerpointerownertest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::smartpointerpointerownertest" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass > *)Space::smartpointerpointerownertest();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::Klass > **)&jresult = (result && *result) ? new SwigBoost::shared_ptr< Space::Klass >(*result) : 0;
  if (1) delete result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_use_1count_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass3rdDerived > *arg1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass3rdDerived > tempnull1 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::Klass3rdDerived > **)&jarg1 : &tempnull1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::use_count" << endl;
    }
    result = (long)Space::use_count((SwigBoost::shared_ptr< Space::Klass3rdDerived > const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_use_1count_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass2ndDerived > *arg1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass2ndDerived > tempnull1 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::Klass2ndDerived > **)&jarg1 : &tempnull1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::use_count" << endl;
    }
    result = (long)Space::use_count((SwigBoost::shared_ptr< Space::Klass2ndDerived > const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_use_1count_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > *arg1 = 0 ;
  SwigBoost::shared_ptr< Space::KlassDerived > tempnull1 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::KlassDerived > **)&jarg1 : &tempnull1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::use_count" << endl;
    }
    result = (long)Space::use_count((SwigBoost::shared_ptr< Space::KlassDerived > const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_use_1count_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *arg1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > tempnull1 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::Klass > **)&jarg1 : &tempnull1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::use_count" << endl;
    }
    result = (long)Space::use_count((SwigBoost::shared_ptr< Space::Klass > const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_ref_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::ref_1" << endl;
    }
    result = (SwigBoost::shared_ptr< Space::Klass > *) &Space::ref_1();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Space::Klass > **)&jresult = *result ? new SwigBoost::shared_ptr< Space::Klass >(*result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1rawbyval_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyval" << endl;
    }
    result = Space::overload_rawbyval(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1rawbyval_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Space::Klass arg1 ;
  Space::Klass *argp1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  argp1 = (*(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1) ? (*(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1)->get() : 0;
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Space::Klass");
    return 0;
  }
  arg1 = *argp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyval" << endl;
    }
    result = Space::overload_rawbyval(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1rawbyref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyref" << endl;
    }
    result = Space::overload_rawbyref(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1rawbyref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Space::Klass *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (Space::Klass *)((*(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1) ? (*(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Klass & reference is null");
    return 0;
  } 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyref" << endl;
    }
    result = Space::overload_rawbyref(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1rawbyptr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyptr" << endl;
    }
    result = Space::overload_rawbyptr(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1rawbyptr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1;
  arg1 = (Space::Klass *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyptr" << endl;
    }
    result = Space::overload_rawbyptr(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1rawbyptrref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyptrref" << endl;
    }
    result = Space::overload_rawbyptrref(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1rawbyptrref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Space::Klass **arg1 = 0 ;
  Space::Klass *temp1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  temp1 = (Space::Klass *)((*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg1) ? (*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg1)->get() : 0);
  arg1 = &temp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_rawbyptrref" << endl;
    }
    result = Space::overload_rawbyptrref((Space::Klass *const &)*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1smartbyval_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyval" << endl;
    }
    result = Space::overload_smartbyval(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1smartbyval_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > arg1 ;
  SwigBoost::shared_ptr< Space::Klass > *argp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(SwigBoost::shared_ptr< Space::Klass > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyval" << endl;
    }
    result = Space::overload_smartbyval(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1smartbyref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyref" << endl;
    }
    result = Space::overload_smartbyref(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1smartbyref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *arg1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > tempnull1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::Klass > **)&jarg1 : &tempnull1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyref" << endl;
    }
    result = Space::overload_smartbyref(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1smartbyptr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyptr" << endl;
    }
    result = Space::overload_smartbyptr(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1smartbyptr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *arg1 = (SwigBoost::shared_ptr< Space::Klass > *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > tempnull1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::Klass > **)&jarg1 : &tempnull1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyptr" << endl;
    }
    result = Space::overload_smartbyptr(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1smartbyptrref_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyptrref" << endl;
    }
    result = Space::overload_smartbyptrref(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_overload_1smartbyptrref_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > **arg1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > tempnull1 ;
  SwigBoost::shared_ptr< Space::Klass > *temp1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  temp1 = jarg1 ? *(SwigBoost::shared_ptr< Space::Klass > **)&jarg1 : &tempnull1;
  arg1 = &temp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Space::overload_smartbyptrref" << endl;
    }
    result = Space::overload_smartbyptrref(*arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_new_1MemberVariables(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MemberVariables *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling MemberVariables" << endl;
    }
    result = (MemberVariables *)new MemberVariables();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(MemberVariables **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_MemberVariables_1SmartMemberValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *arg2 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MemberVariables **)&jarg1; 
  arg2 = jarg2 ? *(SwigBoost::shared_ptr< Space::Klass > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->SmartMemberValue = *arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_MemberVariables_1SmartMemberValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariables **)&jarg1; 
  result = (SwigBoost::shared_ptr< Space::Klass > *) & ((arg1)->SmartMemberValue);
  *(SwigBoost::shared_ptr< Space::Klass > **)&jresult = *result ? new SwigBoost::shared_ptr< Space::Klass >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_MemberVariables_1SmartMemberPointer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *arg2 = (SwigBoost::shared_ptr< Space::Klass > *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MemberVariables **)&jarg1; 
  arg2 = jarg2 ? *(SwigBoost::shared_ptr< Space::Klass > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->SmartMemberPointer = arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_MemberVariables_1SmartMemberPointer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariables **)&jarg1; 
  result = (SwigBoost::shared_ptr< Space::Klass > *) ((arg1)->SmartMemberPointer);
  *(SwigBoost::shared_ptr< Space::Klass > **)&jresult = (result && *result) ? new SwigBoost::shared_ptr< Space::Klass >(*result) : 0;
  if (0) delete result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_MemberVariables_1SmartMemberReference_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *arg2 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MemberVariables **)&jarg1; 
  arg2 = jarg2 ? *(SwigBoost::shared_ptr< Space::Klass > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->SmartMemberReference = *arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_MemberVariables_1SmartMemberReference_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariables **)&jarg1; 
  result = (SwigBoost::shared_ptr< Space::Klass > *) &(SwigBoost::shared_ptr< Space::Klass > &) ((arg1)->SmartMemberReference);
  *(SwigBoost::shared_ptr< Space::Klass > **)&jresult = *result ? new SwigBoost::shared_ptr< Space::Klass >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_MemberVariables_1MemberValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  Space::Klass *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MemberVariables **)&jarg1; 
  
  arg2 = (Space::Klass *)((*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg2) ? (*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Klass const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->MemberValue = *arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_MemberVariables_1MemberValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariables **)&jarg1; 
  result = (Space::Klass *) & ((arg1)->MemberValue);
  *(SwigBoost::shared_ptr< const Space::Klass > **)&jresult = new SwigBoost::shared_ptr< const Space::Klass >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_MemberVariables_1MemberPointer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  Space::Klass *arg2 = (Space::Klass *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *smartarg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MemberVariables **)&jarg1; 
  
  smartarg2 = *(SwigBoost::shared_ptr<  Space::Klass > **)&jarg2;
  arg2 = (Space::Klass *)(smartarg2 ? smartarg2->get() : 0); 
  if (arg1) (arg1)->MemberPointer = arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_MemberVariables_1MemberPointer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariables **)&jarg1; 
  result = (Space::Klass *) ((arg1)->MemberPointer);
  
  *(SwigBoost::shared_ptr<  Space::Klass > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::Klass >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_MemberVariables_1MemberReference_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  Space::Klass *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MemberVariables **)&jarg1; 
  
  arg2 = (Space::Klass *)((*(SwigBoost::shared_ptr<  Space::Klass > **)&jarg2) ? (*(SwigBoost::shared_ptr<  Space::Klass > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Klass & reference is null");
    return ;
  } 
  if (arg1) (arg1)->MemberReference = *arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_MemberVariables_1MemberReference_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MemberVariables **)&jarg1; 
  result = (Space::Klass *) &(Space::Klass &) ((arg1)->MemberReference);
  *(SwigBoost::shared_ptr<  Space::Klass > **)&jresult = new SwigBoost::shared_ptr<  Space::Klass >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_delete_1MemberVariables(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MemberVariables *arg1 = (MemberVariables *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MemberVariables **)&jarg1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~MemberVariables" << endl;
    }
    delete arg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_GlobalSmartValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SwigBoost::shared_ptr< Space::Klass > *arg1 = 0 ;
  SwigBoost::shared_ptr< Space::Klass > tempnull1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(SwigBoost::shared_ptr< Space::Klass > **)&jarg1 : &tempnull1; 
  GlobalSmartValue = *arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_GlobalSmartValue_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Space::Klass > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SwigBoost::shared_ptr< Space::Klass > *) &GlobalSmartValue;
  *(SwigBoost::shared_ptr< Space::Klass > **)&jresult = *result ? new SwigBoost::shared_ptr< Space::Klass >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_GlobalValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Space::Klass *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (Space::Klass *)((*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg1) ? (*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Klass const & reference is null");
    return ;
  } 
  GlobalValue = *arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_GlobalValue_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::Klass *) &GlobalValue;
  *(SwigBoost::shared_ptr< const Space::Klass > **)&jresult = new SwigBoost::shared_ptr< const Space::Klass >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_GlobalPointer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Space::Klass *arg1 = (Space::Klass *) 0 ;
  SwigBoost::shared_ptr< Space::Klass > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1;
  arg1 = (Space::Klass *)(smartarg1 ? smartarg1->get() : 0); 
  GlobalPointer = arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_GlobalPointer_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::Klass *)GlobalPointer;
  
  *(SwigBoost::shared_ptr<  Space::Klass > **)&jresult = result ? new SwigBoost::shared_ptr<  Space::Klass >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_GlobalReference_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Space::Klass *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (Space::Klass *)((*(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1) ? (*(SwigBoost::shared_ptr<  Space::Klass > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Klass & reference is null");
    return ;
  } 
  GlobalReference = *arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_GlobalReference_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Space::Klass *) &(Space::Klass &)GlobalReference;
  *(SwigBoost::shared_ptr<  Space::Klass > **)&jresult = new SwigBoost::shared_ptr<  Space::Klass >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_BaseIntDouble_1klassBase_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  Space::Klass *arg2 = 0 ;
  SwigBoost::shared_ptr< Base< int,double > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Base<int,double> > **)&jarg1;
  arg1 = (Base<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (Space::Klass *)((*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg2) ? (*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Klass const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->klassBase = *arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_BaseIntDouble_1klassBase_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  SwigBoost::shared_ptr< Base< int,double > > *smartarg1 = 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Base<int,double> > **)&jarg1;
  arg1 = (Base<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Space::Klass *) & ((arg1)->klassBase);
  *(SwigBoost::shared_ptr< const Space::Klass > **)&jresult = new SwigBoost::shared_ptr< const Space::Klass >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_BaseIntDouble_1baseVal1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  int arg2 ;
  SwigBoost::shared_ptr< Base< int,double > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Base<int,double> > **)&jarg1;
  arg1 = (Base<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->baseVal1 = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_BaseIntDouble_1baseVal1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  SwigBoost::shared_ptr< Base< int,double > > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Base<int,double> > **)&jarg1;
  arg1 = (Base<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int) ((arg1)->baseVal1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_BaseIntDouble_1baseVal2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  double arg2 ;
  SwigBoost::shared_ptr< Base< int,double > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Base<int,double> > **)&jarg1;
  arg1 = (Base<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->baseVal2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_BaseIntDouble_1baseVal2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  SwigBoost::shared_ptr< Base< int,double > > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Base<int,double> > **)&jarg1;
  arg1 = (Base<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double) ((arg1)->baseVal2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_new_1BaseIntDouble(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  Base< int,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Base<(int,double)>" << endl;
    }
    result = (Base< int,double > *)new Base< int,double >(arg1,arg2);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Base<int,double> > **)&jresult = result ? new SwigBoost::shared_ptr<  Base<int,double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_BaseIntDouble_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  SwigBoost::shared_ptr< Base< int,double > const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr< const Base<int,double> > **)&jarg1;
  arg1 = (Base<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling getValue" << endl;
    }
    result = ((Base< int,double > const *)arg1)->getValue();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_delete_1BaseIntDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Base< int,double > *arg1 = (Base< int,double > *) 0 ;
  SwigBoost::shared_ptr< Base< int,double > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Base<int,double> > **)&jarg1;
  arg1 = (Base<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~Base<(int,double)>" << endl;
    }
    (void)arg1; delete smartarg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_pair_1id2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigValueWrapper< Pair< int,double > > arg1 ;
  Pair< int,double > *argp1 = 0 ;
  SwigValueWrapper< Pair< int,double > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  argp1 = (*(SwigBoost::shared_ptr<  Pair<int,double> > **)&jarg1) ? (*(SwigBoost::shared_ptr<  Pair<int,double> > **)&jarg1)->get() : 0;
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Pair< int,double >");
    return 0;
  }
  arg1 = *argp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling pair_id2" << endl;
    }
    result = pair_id2(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr<  Pair<int,double> > **)&jresult = new SwigBoost::shared_ptr<  Pair<int,double> >(new Pair< int,double >((Pair< int,double > &)result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_pair_1id1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SwigBoost::shared_ptr< Pair< int,double > > arg1 ;
  SwigBoost::shared_ptr< Pair< int,double > > *argp1 ;
  SwigBoost::shared_ptr< Pair< int,double > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(SwigBoost::shared_ptr< Pair< int,double > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling pair_id1" << endl;
    }
    result = pair_id1(arg1);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  *(SwigBoost::shared_ptr< Pair< int,double > > **)&jresult = result ? new SwigBoost::shared_ptr< Pair< int,double > >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_PairIntDouble_1klassPair_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  Space::Klass *arg2 = 0 ;
  SwigBoost::shared_ptr< Pair< int,double > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Pair<int,double> > **)&jarg1;
  arg1 = (Pair<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (Space::Klass *)((*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg2) ? (*(SwigBoost::shared_ptr< const Space::Klass > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Space::Klass const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->klassPair = *arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_PairIntDouble_1klassPair_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  SwigBoost::shared_ptr< Pair< int,double > > *smartarg1 = 0 ;
  Space::Klass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Pair<int,double> > **)&jarg1;
  arg1 = (Pair<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Space::Klass *) & ((arg1)->klassPair);
  *(SwigBoost::shared_ptr< const Space::Klass > **)&jresult = new SwigBoost::shared_ptr< const Space::Klass >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_PairIntDouble_1val1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  int arg2 ;
  SwigBoost::shared_ptr< Pair< int,double > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Pair<int,double> > **)&jarg1;
  arg1 = (Pair<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->val1 = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_PairIntDouble_1val1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  SwigBoost::shared_ptr< Pair< int,double > > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Pair<int,double> > **)&jarg1;
  arg1 = (Pair<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int) ((arg1)->val1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_PairIntDouble_1val2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  double arg2 ;
  SwigBoost::shared_ptr< Pair< int,double > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Pair<int,double> > **)&jarg1;
  arg1 = (Pair<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->val2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_PairIntDouble_1val2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  SwigBoost::shared_ptr< Pair< int,double > > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Pair<int,double> > **)&jarg1;
  arg1 = (Pair<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double) ((arg1)->val2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_new_1PairIntDouble(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  Pair< int,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling Pair<(int,double)>" << endl;
    }
    result = (Pair< int,double > *)new Pair< int,double >(arg1,arg2);
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  
  *(SwigBoost::shared_ptr<  Pair<int,double> > **)&jresult = result ? new SwigBoost::shared_ptr<  Pair<int,double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_PairIntDouble_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  SwigBoost::shared_ptr< Pair< int,double > const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(SwigBoost::shared_ptr< const Pair<int,double> > **)&jarg1;
  arg1 = (Pair<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling getValue" << endl;
    }
    result = ((Pair< int,double > const *)arg1)->getValue();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_delete_1PairIntDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Pair< int,double > *arg1 = (Pair< int,double > *) 0 ;
  SwigBoost::shared_ptr< Pair< int,double > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(SwigBoost::shared_ptr<  Pair<int,double> > **)&jarg1;
  arg1 = (Pair<int,double> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling ~Pair<(int,double)>" << endl;
    }
    (void)arg1; delete smartarg1;
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
}


SWIGEXPORT jint JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_NOT_1COUNTING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)SwigBoost::NOT_COUNTING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_shared_1ptr_1wrapper_1count(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    if (debug_shared) {
      cout << "++++++" << endl;
      cout << "calling SwigBoost::shared_ptr_wrapper_count" << endl;
    }
    result = (int)SwigBoost::shared_ptr_wrapper_count();
    if (debug_shared) {
      cout << "------" << endl;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_KlassDerived_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    SwigBoost::shared_ptr< Space::KlassDerived > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(SwigBoost::shared_ptr< Space::KlassDerived > **)&jarg1;
    *(SwigBoost::shared_ptr< Space::Klass > **)&baseptr = argp1 ? new SwigBoost::shared_ptr< Space::Klass >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_Klass2ndDerived_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    SwigBoost::shared_ptr< Space::Klass2ndDerived > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(SwigBoost::shared_ptr< Space::Klass2ndDerived > **)&jarg1;
    *(SwigBoost::shared_ptr< Space::Klass > **)&baseptr = argp1 ? new SwigBoost::shared_ptr< Space::Klass >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_Klass3rdDerived_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    SwigBoost::shared_ptr< Space::Klass3rdDerived > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(SwigBoost::shared_ptr< Space::Klass3rdDerived > **)&jarg1;
    *(SwigBoost::shared_ptr< Space::Klass2ndDerived > **)&baseptr = argp1 ? new SwigBoost::shared_ptr< Space::Klass2ndDerived >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_li_1boost_1shared_1ptr_li_1boost_1shared_1ptrJNI_PairIntDouble_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    SwigBoost::shared_ptr< Pair< int,double > > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(SwigBoost::shared_ptr< Pair< int,double > > **)&jarg1;
    *(SwigBoost::shared_ptr< Pair< int,double > > **)&baseptr = argp1 ? new SwigBoost::shared_ptr< Pair< int,double > >(*argp1) : 0;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

