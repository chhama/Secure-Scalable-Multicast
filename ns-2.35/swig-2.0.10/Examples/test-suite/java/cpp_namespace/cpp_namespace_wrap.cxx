/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


  typedef int Bad;

  /* A very basic namespace */
  namespace example {
    typedef char *Bad;

    int fact(int n) {
      if (n <= 0) return 1;
      else return n*fact(n-1);
    }
    int Foo = 42;

    class Test {
    public:
      Test() { }
      ~Test() { }
      char *method() {
	return (char *) "Test::method";
      }
    };
    typedef Test *TestPtr;
    void weird(Bad x, ::Bad y) { }
  }

  char *do_method(example::TestPtr t) {
    return t->method();
  }

  namespace ex = example;

  char *do_method2(ex::TestPtr t) {
     return t->method();
  }



namespace Foo {
   typedef int Integer;
   class Test2 { 
   public:
       virtual ~Test2() { }
       virtual char *method() {	
	 return (char *) "Test2::method";
       }
   };
  typedef Test2 *Test2Ptr;
}

namespace Foo2 {
  using Foo::Integer;
  using Foo::Test2;
  class Test3 : public Test2 {
  public:
    virtual char *method() {	
      return (char *) "Test3::method";
    }
  };
  typedef Test3 *Test3Ptr;
  typedef Test3 Test3Alt;
}

namespace Foo3 {
  using namespace Foo2;
  class Test4 : public Test3 {
  public:
    virtual char *method() {	
      return (char *) "Test4::method";
    }
  };
  Integer foo3(Integer x) { return x; }
  typedef Test4 *Test4Ptr;
  
}
   
using Foo2::Test3Alt;
using Foo3::Integer;

class Test5 : public Test3Alt { 
public:
  virtual char *method() {	
    return (char *) "Test5::method";
  }
};

char *do_method3(Foo::Test2 *t, Integer x) {
  return t->method();
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_fact(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)example::fact(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_Foo_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  example::Foo = arg1;
}


SWIGEXPORT jint JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_Foo_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)example::Foo;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_new_1Test(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  example::Test *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (example::Test *)new example::Test();
  *(example::Test **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_delete_1Test(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  example::Test *arg1 = (example::Test *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(example::Test **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_Test_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  example::Test *arg1 = (example::Test *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(example::Test **)&jarg1; 
  result = (char *)(arg1)->method();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_weird(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  example::Bad arg1 = (example::Bad) 0 ;
  ::Bad arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (example::Bad)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = (::Bad)jarg2; 
  example::weird(arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_do_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  example::TestPtr arg1 = (example::TestPtr) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(example::TestPtr *)&jarg1; 
  result = (char *)do_method(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_do_1method2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ex::TestPtr arg1 = (ex::TestPtr) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ex::TestPtr *)&jarg1; 
  result = (char *)do_method2(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_delete_1Test2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo::Test2 *arg1 = (Foo::Test2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo::Test2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_Test2_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Foo::Test2 *arg1 = (Foo::Test2 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo::Test2 **)&jarg1; 
  result = (char *)(arg1)->method();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_new_1Test2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo::Test2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo::Test2 *)new Foo::Test2();
  *(Foo::Test2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_Test3_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Foo2::Test3 *arg1 = (Foo2::Test3 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo2::Test3 **)&jarg1; 
  result = (char *)(arg1)->method();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_new_1Test3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo2::Test3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo2::Test3 *)new Foo2::Test3();
  *(Foo2::Test3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_delete_1Test3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo2::Test3 *arg1 = (Foo2::Test3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo2::Test3 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_Test4_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Foo3::Test4 *arg1 = (Foo3::Test4 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo3::Test4 **)&jarg1; 
  result = (char *)(arg1)->method();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_new_1Test4(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo3::Test4 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo3::Test4 *)new Foo3::Test4();
  *(Foo3::Test4 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_delete_1Test4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo3::Test4 *arg1 = (Foo3::Test4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo3::Test4 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_foo3(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  Foo2::Integer arg1 ;
  Foo2::Integer result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Foo2::Integer)jarg1; 
  result = (Foo2::Integer)Foo3::foo3(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_Test5_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Test5 *arg1 = (Test5 *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Test5 **)&jarg1; 
  result = (char *)(arg1)->method();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_new_1Test5(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Test5 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Test5 *)new Test5();
  *(Test5 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_delete_1Test5(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Test5 *arg1 = (Test5 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Test5 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_do_1method3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  Foo::Test2 *arg1 = (Foo::Test2 *) 0 ;
  Integer arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo::Test2 **)&jarg1; 
  arg2 = (Integer)jarg2; 
  result = (char *)do_method3(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_Test3_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Foo::Test2 **)&baseptr = *(Foo2::Test3 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_Test4_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Foo2::Test3 **)&baseptr = *(Foo3::Test4 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_cpp_1namespace_cpp_1namespaceJNI_Test5_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Foo2::Test3 **)&baseptr = *(Test5 **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

