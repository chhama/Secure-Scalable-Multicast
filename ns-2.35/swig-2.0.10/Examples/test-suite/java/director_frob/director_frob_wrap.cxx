/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_director_frobJNI = NULL;
    jmethodID director_methids[11];
  }
}

#include <iostream>



  struct Alpha
  {
    virtual ~Alpha() { };
    virtual const char* abs_method() = 0;
  };
  
  struct Bravo : Alpha
  {
    const char* abs_method()
    {
      return "Bravo::abs_method()";
    }
  };

  struct Charlie : Bravo 
  {
    const char* abs_method()
    {
      return "Charlie::abs_method()";
    }
  };
  
  struct Delta : Charlie
  {
  };


  class Ops {
  public:
    Ops() : num(0) {}
    virtual ~Ops() {}
    virtual operator int() { return 0; }
    virtual operator int **() const {
      return (int **) 0;
    }
    virtual operator int &() {
      return num;
    }
    virtual operator void *() {
      return (void *) this;
    }
    virtual operator const int *() {
      return &num;
    }
  private:
    int num;
  };

  struct Prims {
    virtual ~Prims() {}
    virtual unsigned long long ull(unsigned long long i, unsigned long long j) { return i + j; }
    unsigned long long callull(int i, int j) { return ull(i, j); }
  };


class corePoint3d {};

struct coreCallbacks_On3dEngineRedrawnData
{
	corePoint3d _eye;
	corePoint3d _at;
};

struct coreCallbacksOn3dEngineRedrawnData
{
	corePoint3d _eye;
	corePoint3d _at;
};

class coreCallbacks
{
public:
	coreCallbacks(void) {}
	virtual ~coreCallbacks(void) {}

	virtual void On3dEngineRedrawn(const coreCallbacks_On3dEngineRedrawnData& data){}
	virtual void On3dEngineRedrawn2(const coreCallbacksOn3dEngineRedrawnData& data){}
};



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "director_frob_wrap.h"

SwigDirector_Alpha::SwigDirector_Alpha(JNIEnv *jenv) : Alpha(), Swig::Director(jenv) {
}

SwigDirector_Alpha::~SwigDirector_Alpha() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


char const *SwigDirector_Alpha::abs_method() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method Alpha::abs_method.");
    return (char const *)c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_director_frobJNI, Swig::director_methids[0], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_Alpha::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "abs_method", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("director_frob/Alpha");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Bravo::SwigDirector_Bravo(JNIEnv *jenv) : Bravo(), Swig::Director(jenv) {
}

SwigDirector_Bravo::~SwigDirector_Bravo() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Bravo::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("director_frob/Bravo");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
  }
}


SwigDirector_Charlie::SwigDirector_Charlie(JNIEnv *jenv) : Charlie(), Swig::Director(jenv) {
}

SwigDirector_Charlie::~SwigDirector_Charlie() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


char const *SwigDirector_Charlie::abs_method() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return Charlie::abs_method();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_director_frobJNI, Swig::director_methids[1], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_Charlie::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "abs_method", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("director_frob/Charlie");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Delta::SwigDirector_Delta(JNIEnv *jenv) : Delta(), Swig::Director(jenv) {
}

SwigDirector_Delta::~SwigDirector_Delta() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


char const *SwigDirector_Delta::abs_method() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return Charlie::abs_method();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_director_frobJNI, Swig::director_methids[2], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return (char const *)c_result;
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_Delta::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "abs_method", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("director_frob/Delta");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Ops::SwigDirector_Ops(JNIEnv *jenv) : Ops(), Swig::Director(jenv) {
}

SwigDirector_Ops::~SwigDirector_Ops() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


SwigDirector_Ops::operator int() {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return Ops::operator int();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_director_frobJNI, Swig::director_methids[3], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_Ops::operator int**() const {
  int **c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return Ops::operator int**();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_director_frobJNI, Swig::director_methids[4], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(int ***)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_Ops::operator int&() {
  static int result_default = int () ;
  int *c_result = &result_default ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return Ops::operator int&();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_director_frobJNI, Swig::director_methids[5], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return *c_result;
    if (!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type int &");
      return *c_result;
    }
    c_result = *(int **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return *c_result;
}

SwigDirector_Ops::operator void*() {
  void *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return Ops::operator void*();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_director_frobJNI, Swig::director_methids[6], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = *(void **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_Ops::operator const int*() {
  int *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return Ops::operator const int*();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_director_frobJNI, Swig::director_methids[7], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return (int const *)c_result;
    c_result = *(int **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (int const *)c_result;
}

void SwigDirector_Ops::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OpInt", "()I", NULL 
    },
    {
      "OpIntStarStarConst", "()Ldirector_frob/SWIGTYPE_p_p_int;", NULL 
    },
    {
      "OpIntAmp", "()Ldirector_frob/SWIGTYPE_p_int;", NULL 
    },
    {
      "OpIntStar", "()Ldirector_frob/SWIGTYPE_p_void;", NULL 
    },
    {
      "OpConstIntIntStar", "()Ldirector_frob/SWIGTYPE_p_int;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("director_frob/Ops");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_Prims::SwigDirector_Prims(JNIEnv *jenv) : Prims(), Swig::Director(jenv) {
}

SwigDirector_Prims::~SwigDirector_Prims() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


unsigned long long SwigDirector_Prims::ull(unsigned long long i, unsigned long long j) {
  unsigned long long c_result = SwigValueInit< unsigned long long >() ;
  jobject jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jobject ji  ;
  jobject jj  ;
  
  if (!swig_override[0]) {
    return Prims::ull(i,j);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    {
      jbyteArray ba = jenv->NewByteArray(9);
      jbyte* bae = jenv->GetByteArrayElements(ba, 0);
      jclass clazz = jenv->FindClass("java/math/BigInteger");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
      jobject bigint;
      int swig_i;
      
      bae[0] = 0;
      for(swig_i=1; swig_i<9; swig_i++ ) {
        bae[swig_i] = (jbyte)(i>>8*(8-swig_i));
      }
      
      jenv->ReleaseByteArrayElements(ba, bae, 0);
      bigint = jenv->NewObject(clazz, mid, ba);
      ji = bigint;
    }
    {
      jbyteArray ba = jenv->NewByteArray(9);
      jbyte* bae = jenv->GetByteArrayElements(ba, 0);
      jclass clazz = jenv->FindClass("java/math/BigInteger");
      jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
      jobject bigint;
      int swig_i;
      
      bae[0] = 0;
      for(swig_i=1; swig_i<9; swig_i++ ) {
        bae[swig_i] = (jbyte)(j>>8*(8-swig_i));
      }
      
      jenv->ReleaseByteArrayElements(ba, bae, 0);
      bigint = jenv->NewObject(clazz, mid, ba);
      jj = bigint;
    }
    jresult = (jobject) jenv->CallStaticObjectMethod(Swig::jclass_director_frobJNI, Swig::director_methids[8], swigjobj, ji, jj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    {
      jclass clazz;
      jmethodID mid;
      jbyteArray ba;
      jbyte* bae;
      jsize sz;
      int i;
      
      if (!jresult) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
        return c_result;
      }
      clazz = jenv->GetObjectClass(jresult);
      mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
      ba = (jbyteArray)jenv->CallObjectMethod(jresult, mid);
      bae = jenv->GetByteArrayElements(ba, 0);
      sz = jenv->GetArrayLength(ba);
      c_result = 0;
      for(i=0; i<sz; i++) {
        c_result = (c_result << 8) | (unsigned long long)(unsigned char)bae[i];
      }
      jenv->ReleaseByteArrayElements(ba, bae, 0);
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Prims::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "ull", "(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("director_frob/Prims");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_coreCallbacks::SwigDirector_coreCallbacks(JNIEnv *jenv) : coreCallbacks(), Swig::Director(jenv) {
}

SwigDirector_coreCallbacks::~SwigDirector_coreCallbacks() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_coreCallbacks::On3dEngineRedrawn(coreCallbacks_On3dEngineRedrawnData const &data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata = 0 ;
  
  if (!swig_override[0]) {
    coreCallbacks::On3dEngineRedrawn(data);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(coreCallbacks_On3dEngineRedrawnData **)&jdata = (coreCallbacks_On3dEngineRedrawnData *) &data; 
    jenv->CallStaticVoidMethod(Swig::jclass_director_frobJNI, Swig::director_methids[9], swigjobj, jdata);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_coreCallbacks::On3dEngineRedrawn2(coreCallbacksOn3dEngineRedrawnData const &data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata = 0 ;
  
  if (!swig_override[1]) {
    coreCallbacks::On3dEngineRedrawn2(data);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(coreCallbacksOn3dEngineRedrawnData **)&jdata = (coreCallbacksOn3dEngineRedrawnData *) &data; 
    jenv->CallStaticVoidMethod(Swig::jclass_director_frobJNI, Swig::director_methids[10], swigjobj, jdata);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_coreCallbacks::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "On3dEngineRedrawn", "(Ldirector_frob/coreCallbacks_On3dEngineRedrawnData;)V", NULL 
    },
    {
      "On3dEngineRedrawn2", "(Ldirector_frob/coreCallbacksOn3dEngineRedrawnData;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("director_frob/coreCallbacks");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_delete_1Alpha(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Alpha *arg1 = (Alpha *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Alpha **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_director_1frob_director_1frobJNI_Alpha_1abs_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Alpha *arg1 = (Alpha *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Alpha **)&jarg1; 
  result = (char *)(arg1)->abs_method();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_new_1Alpha(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Alpha *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Alpha *)new SwigDirector_Alpha(jenv);
  *(Alpha **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_Alpha_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Alpha *obj = *((Alpha **)&objarg);
  (void)jcls;
  SwigDirector_Alpha *director = dynamic_cast<SwigDirector_Alpha *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_Alpha_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Alpha *obj = *((Alpha **)&objarg);
  SwigDirector_Alpha *director = dynamic_cast<SwigDirector_Alpha *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_director_1frob_director_1frobJNI_Bravo_1abs_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Bravo *arg1 = (Bravo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bravo **)&jarg1; 
  result = (char *)(arg1)->abs_method();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_new_1Bravo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bravo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bravo *)new SwigDirector_Bravo(jenv);
  *(Bravo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_delete_1Bravo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bravo *arg1 = (Bravo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bravo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_Bravo_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Bravo *obj = *((Bravo **)&objarg);
  (void)jcls;
  SwigDirector_Bravo *director = dynamic_cast<SwigDirector_Bravo *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_Bravo_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Bravo *obj = *((Bravo **)&objarg);
  SwigDirector_Bravo *director = dynamic_cast<SwigDirector_Bravo *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_director_1frob_director_1frobJNI_Charlie_1abs_1method(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Charlie *arg1 = (Charlie *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Charlie **)&jarg1; 
  result = (char *)(arg1)->abs_method();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_director_1frob_director_1frobJNI_Charlie_1abs_1methodSwigExplicitCharlie(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Charlie *arg1 = (Charlie *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Charlie **)&jarg1; 
  result = (char *)(arg1)->Charlie::abs_method();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_new_1Charlie(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Charlie *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Charlie *)new SwigDirector_Charlie(jenv);
  *(Charlie **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_delete_1Charlie(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Charlie *arg1 = (Charlie *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Charlie **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_Charlie_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Charlie *obj = *((Charlie **)&objarg);
  (void)jcls;
  SwigDirector_Charlie *director = dynamic_cast<SwigDirector_Charlie *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_Charlie_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Charlie *obj = *((Charlie **)&objarg);
  SwigDirector_Charlie *director = dynamic_cast<SwigDirector_Charlie *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_new_1Delta(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Delta *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Delta *)new SwigDirector_Delta(jenv);
  *(Delta **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_delete_1Delta(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Delta *arg1 = (Delta *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Delta **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_Delta_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Delta *obj = *((Delta **)&objarg);
  (void)jcls;
  SwigDirector_Delta *director = dynamic_cast<SwigDirector_Delta *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_Delta_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Delta *obj = *((Delta **)&objarg);
  SwigDirector_Delta *director = dynamic_cast<SwigDirector_Delta *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_new_1Ops(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ops *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ops *)new SwigDirector_Ops(jenv);
  *(Ops **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_delete_1Ops(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ops *arg1 = (Ops *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ops **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_director_1frob_director_1frobJNI_Ops_1OpInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ops *arg1 = (Ops *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ops **)&jarg1; 
  result = (int)(arg1)->operator int();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_director_1frob_director_1frobJNI_Ops_1OpIntSwigExplicitOps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ops *arg1 = (Ops *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ops **)&jarg1; 
  result = (int)(arg1)->Ops::operator int();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_Ops_1OpIntStarStarConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ops *arg1 = (Ops *) 0 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ops **)&jarg1; 
  result = (int **)((Ops const *)arg1)->operator int**();
  *(int ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_Ops_1OpIntStarStarConstSwigExplicitOps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ops *arg1 = (Ops *) 0 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ops **)&jarg1; 
  result = (int **)((Ops const *)arg1)->Ops::operator int**();
  *(int ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_Ops_1OpIntAmp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ops *arg1 = (Ops *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ops **)&jarg1; 
  result = (int *) &(arg1)->operator int&();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_Ops_1OpIntAmpSwigExplicitOps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ops *arg1 = (Ops *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ops **)&jarg1; 
  result = (int *) &(arg1)->Ops::operator int&();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_Ops_1OpIntStar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ops *arg1 = (Ops *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ops **)&jarg1; 
  result = (void *)(arg1)->operator void*();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_Ops_1OpIntStarSwigExplicitOps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ops *arg1 = (Ops *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ops **)&jarg1; 
  result = (void *)(arg1)->Ops::operator void*();
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_Ops_1OpConstIntIntStar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ops *arg1 = (Ops *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ops **)&jarg1; 
  result = (int *)(arg1)->operator const int*();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_Ops_1OpConstIntIntStarSwigExplicitOps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ops *arg1 = (Ops *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ops **)&jarg1; 
  result = (int *)(arg1)->Ops::operator const int*();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_Ops_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Ops *obj = *((Ops **)&objarg);
  (void)jcls;
  SwigDirector_Ops *director = dynamic_cast<SwigDirector_Ops *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_Ops_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Ops *obj = *((Ops **)&objarg);
  SwigDirector_Ops *director = dynamic_cast<SwigDirector_Ops *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_delete_1Prims(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Prims *arg1 = (Prims *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Prims **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jobject JNICALL Java_director_1frob_director_1frobJNI_Prims_1ull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jobject jarg3) {
  jobject jresult = 0 ;
  Prims *arg1 = (Prims *) 0 ;
  unsigned long long arg2 ;
  unsigned long long arg3 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Prims **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (unsigned long long)(arg1)->ull(arg2,arg3);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_director_1frob_director_1frobJNI_Prims_1ullSwigExplicitPrims(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jobject jarg3) {
  jobject jresult = 0 ;
  Prims *arg1 = (Prims *) 0 ;
  unsigned long long arg2 ;
  unsigned long long arg3 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Prims **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    for(i=0; i<sz; i++) {
      arg3 = (arg3 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (unsigned long long)(arg1)->Prims::ull(arg2,arg3);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_director_1frob_director_1frobJNI_Prims_1callull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jobject jresult = 0 ;
  Prims *arg1 = (Prims *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Prims **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (unsigned long long)(arg1)->callull(arg2,arg3);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_new_1Prims(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Prims *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Prims *)new SwigDirector_Prims(jenv);
  *(Prims **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_Prims_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Prims *obj = *((Prims **)&objarg);
  (void)jcls;
  SwigDirector_Prims *director = dynamic_cast<SwigDirector_Prims *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_Prims_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Prims *obj = *((Prims **)&objarg);
  SwigDirector_Prims *director = dynamic_cast<SwigDirector_Prims *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_new_1corePoint3d(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  corePoint3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (corePoint3d *)new corePoint3d();
  *(corePoint3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_delete_1corePoint3d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  corePoint3d *arg1 = (corePoint3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(corePoint3d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_coreCallbacks_1On3dEngineRedrawnData_1_1eye_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  coreCallbacks_On3dEngineRedrawnData *arg1 = (coreCallbacks_On3dEngineRedrawnData *) 0 ;
  corePoint3d *arg2 = (corePoint3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(coreCallbacks_On3dEngineRedrawnData **)&jarg1; 
  arg2 = *(corePoint3d **)&jarg2; 
  if (arg1) (arg1)->_eye = *arg2;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_coreCallbacks_1On3dEngineRedrawnData_1_1eye_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  coreCallbacks_On3dEngineRedrawnData *arg1 = (coreCallbacks_On3dEngineRedrawnData *) 0 ;
  corePoint3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(coreCallbacks_On3dEngineRedrawnData **)&jarg1; 
  result = (corePoint3d *)& ((arg1)->_eye);
  *(corePoint3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_coreCallbacks_1On3dEngineRedrawnData_1_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  coreCallbacks_On3dEngineRedrawnData *arg1 = (coreCallbacks_On3dEngineRedrawnData *) 0 ;
  corePoint3d *arg2 = (corePoint3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(coreCallbacks_On3dEngineRedrawnData **)&jarg1; 
  arg2 = *(corePoint3d **)&jarg2; 
  if (arg1) (arg1)->_at = *arg2;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_coreCallbacks_1On3dEngineRedrawnData_1_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  coreCallbacks_On3dEngineRedrawnData *arg1 = (coreCallbacks_On3dEngineRedrawnData *) 0 ;
  corePoint3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(coreCallbacks_On3dEngineRedrawnData **)&jarg1; 
  result = (corePoint3d *)& ((arg1)->_at);
  *(corePoint3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_new_1coreCallbacks_1On3dEngineRedrawnData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  coreCallbacks_On3dEngineRedrawnData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (coreCallbacks_On3dEngineRedrawnData *)new coreCallbacks_On3dEngineRedrawnData();
  *(coreCallbacks_On3dEngineRedrawnData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_delete_1coreCallbacks_1On3dEngineRedrawnData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  coreCallbacks_On3dEngineRedrawnData *arg1 = (coreCallbacks_On3dEngineRedrawnData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(coreCallbacks_On3dEngineRedrawnData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_coreCallbacksOn3dEngineRedrawnData_1_1eye_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  coreCallbacksOn3dEngineRedrawnData *arg1 = (coreCallbacksOn3dEngineRedrawnData *) 0 ;
  corePoint3d *arg2 = (corePoint3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(coreCallbacksOn3dEngineRedrawnData **)&jarg1; 
  arg2 = *(corePoint3d **)&jarg2; 
  if (arg1) (arg1)->_eye = *arg2;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_coreCallbacksOn3dEngineRedrawnData_1_1eye_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  coreCallbacksOn3dEngineRedrawnData *arg1 = (coreCallbacksOn3dEngineRedrawnData *) 0 ;
  corePoint3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(coreCallbacksOn3dEngineRedrawnData **)&jarg1; 
  result = (corePoint3d *)& ((arg1)->_eye);
  *(corePoint3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_coreCallbacksOn3dEngineRedrawnData_1_1at_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  coreCallbacksOn3dEngineRedrawnData *arg1 = (coreCallbacksOn3dEngineRedrawnData *) 0 ;
  corePoint3d *arg2 = (corePoint3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(coreCallbacksOn3dEngineRedrawnData **)&jarg1; 
  arg2 = *(corePoint3d **)&jarg2; 
  if (arg1) (arg1)->_at = *arg2;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_coreCallbacksOn3dEngineRedrawnData_1_1at_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  coreCallbacksOn3dEngineRedrawnData *arg1 = (coreCallbacksOn3dEngineRedrawnData *) 0 ;
  corePoint3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(coreCallbacksOn3dEngineRedrawnData **)&jarg1; 
  result = (corePoint3d *)& ((arg1)->_at);
  *(corePoint3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_new_1coreCallbacksOn3dEngineRedrawnData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  coreCallbacksOn3dEngineRedrawnData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (coreCallbacksOn3dEngineRedrawnData *)new coreCallbacksOn3dEngineRedrawnData();
  *(coreCallbacksOn3dEngineRedrawnData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_delete_1coreCallbacksOn3dEngineRedrawnData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  coreCallbacksOn3dEngineRedrawnData *arg1 = (coreCallbacksOn3dEngineRedrawnData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(coreCallbacksOn3dEngineRedrawnData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_new_1coreCallbacks(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  coreCallbacks *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (coreCallbacks *)new SwigDirector_coreCallbacks(jenv);
  *(coreCallbacks **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_delete_1coreCallbacks(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  coreCallbacks *arg1 = (coreCallbacks *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(coreCallbacks **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_coreCallbacks_1On3dEngineRedrawn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  coreCallbacks *arg1 = (coreCallbacks *) 0 ;
  coreCallbacks_On3dEngineRedrawnData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(coreCallbacks **)&jarg1; 
  arg2 = *(coreCallbacks_On3dEngineRedrawnData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "coreCallbacks_On3dEngineRedrawnData const & reference is null");
    return ;
  } 
  (arg1)->On3dEngineRedrawn((coreCallbacks_On3dEngineRedrawnData const &)*arg2);
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_coreCallbacks_1On3dEngineRedrawnSwigExplicitcoreCallbacks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  coreCallbacks *arg1 = (coreCallbacks *) 0 ;
  coreCallbacks_On3dEngineRedrawnData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(coreCallbacks **)&jarg1; 
  arg2 = *(coreCallbacks_On3dEngineRedrawnData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "coreCallbacks_On3dEngineRedrawnData const & reference is null");
    return ;
  } 
  (arg1)->coreCallbacks::On3dEngineRedrawn((coreCallbacks_On3dEngineRedrawnData const &)*arg2);
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_coreCallbacks_1On3dEngineRedrawn2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  coreCallbacks *arg1 = (coreCallbacks *) 0 ;
  coreCallbacksOn3dEngineRedrawnData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(coreCallbacks **)&jarg1; 
  arg2 = *(coreCallbacksOn3dEngineRedrawnData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "coreCallbacksOn3dEngineRedrawnData const & reference is null");
    return ;
  } 
  (arg1)->On3dEngineRedrawn2((coreCallbacksOn3dEngineRedrawnData const &)*arg2);
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_coreCallbacks_1On3dEngineRedrawn2SwigExplicitcoreCallbacks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  coreCallbacks *arg1 = (coreCallbacks *) 0 ;
  coreCallbacksOn3dEngineRedrawnData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(coreCallbacks **)&jarg1; 
  arg2 = *(coreCallbacksOn3dEngineRedrawnData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "coreCallbacksOn3dEngineRedrawnData const & reference is null");
    return ;
  } 
  (arg1)->coreCallbacks::On3dEngineRedrawn2((coreCallbacksOn3dEngineRedrawnData const &)*arg2);
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_coreCallbacks_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  coreCallbacks *obj = *((coreCallbacks **)&objarg);
  (void)jcls;
  SwigDirector_coreCallbacks *director = dynamic_cast<SwigDirector_coreCallbacks *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_coreCallbacks_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  coreCallbacks *obj = *((coreCallbacks **)&objarg);
  SwigDirector_coreCallbacks *director = dynamic_cast<SwigDirector_coreCallbacks *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_Bravo_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Alpha **)&baseptr = *(Bravo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_Charlie_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Bravo **)&baseptr = *(Charlie **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_director_1frob_director_1frobJNI_Delta_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Charlie **)&baseptr = *(Delta **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_director_1frob_director_1frobJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[11] = {
    {
      "SwigDirector_Alpha_abs_method", "(Ldirector_frob/Alpha;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_Charlie_abs_method", "(Ldirector_frob/Charlie;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_Delta_abs_method", "(Ldirector_frob/Delta;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_Ops_OpInt", "(Ldirector_frob/Ops;)I" 
    },
    {
      "SwigDirector_Ops_OpIntStarStarConst", "(Ldirector_frob/Ops;)J" 
    },
    {
      "SwigDirector_Ops_OpIntAmp", "(Ldirector_frob/Ops;)J" 
    },
    {
      "SwigDirector_Ops_OpIntStar", "(Ldirector_frob/Ops;)J" 
    },
    {
      "SwigDirector_Ops_OpConstIntIntStar", "(Ldirector_frob/Ops;)J" 
    },
    {
      "SwigDirector_Prims_ull", "(Ldirector_frob/Prims;Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;" 
    },
    {
      "SwigDirector_coreCallbacks_On3dEngineRedrawn", "(Ldirector_frob/coreCallbacks;J)V" 
    },
    {
      "SwigDirector_coreCallbacks_On3dEngineRedrawn2", "(Ldirector_frob/coreCallbacks;J)V" 
    }
  };
  Swig::jclass_director_frobJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_director_frobJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

