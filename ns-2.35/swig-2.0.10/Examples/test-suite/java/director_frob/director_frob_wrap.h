/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_director_frob_WRAP_H_
#define SWIG_director_frob_WRAP_H_

struct SwigDirector_Alpha : public Alpha, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Alpha(JNIEnv *jenv);
    virtual ~SwigDirector_Alpha();
    virtual char const *abs_method();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

struct SwigDirector_Bravo : public Bravo, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Bravo(JNIEnv *jenv);
    virtual ~SwigDirector_Bravo();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

struct SwigDirector_Charlie : public Charlie, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Charlie(JNIEnv *jenv);
    virtual ~SwigDirector_Charlie();
    virtual char const *abs_method();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

struct SwigDirector_Delta : public Delta, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Delta(JNIEnv *jenv);
    virtual ~SwigDirector_Delta();
    virtual char const *abs_method();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_Ops : public Ops, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Ops(JNIEnv *jenv);
    virtual ~SwigDirector_Ops();
    virtual operator int();
    virtual operator int**() const;
    virtual operator int&();
    virtual operator void*();
    virtual operator const int*();
public:
    bool swig_overrides(int n) {
      return (n < 5 ? swig_override[n] : false);
    }
protected:
    bool swig_override[5];
};

struct SwigDirector_Prims : public Prims, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Prims(JNIEnv *jenv);
    virtual ~SwigDirector_Prims();
    virtual unsigned long long ull(unsigned long long i, unsigned long long j);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_coreCallbacks : public coreCallbacks, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_coreCallbacks(JNIEnv *jenv);
    virtual ~SwigDirector_coreCallbacks();
    virtual void On3dEngineRedrawn(coreCallbacks_On3dEngineRedrawnData const &data);
    virtual void On3dEngineRedrawn2(coreCallbacksOn3dEngineRedrawnData const &data);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};


#endif
