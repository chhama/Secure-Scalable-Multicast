/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#define ARRAY_LEN 2

typedef enum {One, Two, Three, Four, Five} finger;

typedef struct {
	double         double_field;
} SimpleStruct;

char           array_c [ARRAY_LEN];
signed char    array_sc[ARRAY_LEN];
unsigned char  array_uc[ARRAY_LEN];
short          array_s [ARRAY_LEN];
unsigned short array_us[ARRAY_LEN];
int            array_i [ARRAY_LEN];
unsigned int   array_ui[ARRAY_LEN];
long           array_l [ARRAY_LEN];
unsigned long  array_ul[ARRAY_LEN];
long long      array_ll[ARRAY_LEN];
float          array_f [ARRAY_LEN];
double         array_d [ARRAY_LEN];
SimpleStruct   array_struct[ARRAY_LEN];
SimpleStruct*  array_structpointers[ARRAY_LEN];
int*           array_ipointers [ARRAY_LEN];
finger         array_enum[ARRAY_LEN];
finger*        array_enumpointers[ARRAY_LEN];
const int      array_const_i[ARRAY_LEN] = {10, 20};



  
const char BeginString_FIX44a[8] = "FIX.a.a"; 
char BeginString_FIX44b[8] = "FIX.b.b"; 

const char BeginString_FIX44c[] = "FIX.c.c"; 
char BeginString_FIX44d[] = "FIX.d.d"; 

const char* BeginString_FIX44e = "FIX.e.e"; 
const char* const BeginString_FIX44f = "FIX.f.f"; 

typedef char name[8];
typedef char namea[];

char* test_a(char hello[8],
	     char hi[],
	     const char chello[8],
	     const char chi[]) {
  return hi;
}

char* test_b(name a, const namea b)  {
  return a;
}

int test_a(int a)  {
  return a;
}

int test_b(int a)  {
  return a;
}
 



  struct Material
  {
  };

  enum {
    Size = 32
  };
  
  const Material * chitMat[Size];
  Material hitMat_val[Size];
  Material *hitMat[Size];


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_arrays_1global_arrays_1globalJNI_ARRAY_1LEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_SimpleStruct_1double_1field_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  SimpleStruct *arg1 = (SimpleStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->double_field = arg2;
}


SWIGEXPORT jdouble JNICALL Java_arrays_1global_arrays_1globalJNI_SimpleStruct_1double_1field_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  SimpleStruct *arg1 = (SimpleStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleStruct **)&jarg1; 
  result = (double) ((arg1)->double_field);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_new_1SimpleStruct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SimpleStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SimpleStruct *)new SimpleStruct();
  *(SimpleStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_delete_1SimpleStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SimpleStruct *arg1 = (SimpleStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SimpleStruct **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1c_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if(arg1) {
      strncpy((char*)array_c, (const char *)arg1, 2-1);
      array_c[2-1] = 0;
    } else {
      array_c[0] = 0;
    }
  }
  
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_arrays_1global_arrays_1globalJNI_array_1c_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)array_c;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1sc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  signed char *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(signed char **)&jarg1; 
  {
    size_t ii;
    signed char *b = (signed char *) array_sc;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((signed char *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1sc_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  signed char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (signed char *)(signed char *)array_sc;
  *(signed char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1uc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned char *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  {
    size_t ii;
    unsigned char *b = (unsigned char *) array_uc;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((unsigned char *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1uc_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned char *)(unsigned char *)array_uc;
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  short *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(short **)&jarg1; 
  {
    size_t ii;
    short *b = (short *) array_s;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((short *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1s_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (short *)(short *)array_s;
  *(short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1us_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned short *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned short **)&jarg1; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) array_us;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((unsigned short *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1us_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned short *)(unsigned short *)array_us;
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1i_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  {
    size_t ii;
    int *b = (int *) array_i;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1i_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)(int *)array_i;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1ui_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned int *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  {
    size_t ii;
    unsigned int *b = (unsigned int *) array_ui;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((unsigned int *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1ui_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int *)(unsigned int *)array_ui;
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  long *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long **)&jarg1; 
  {
    size_t ii;
    long *b = (long *) array_l;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((long *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1l_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (long *)(long *)array_l;
  *(long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1ul_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned long *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long **)&jarg1; 
  {
    size_t ii;
    unsigned long *b = (unsigned long *) array_ul;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((unsigned long *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1ul_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned long *)(unsigned long *)array_ul;
  *(unsigned long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1ll_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  long long *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long long **)&jarg1; 
  {
    size_t ii;
    long long *b = (long long *) array_ll;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((long long *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1ll_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (long long *)(long long *)array_ll;
  *(long long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1f_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  float *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1; 
  {
    size_t ii;
    float *b = (float *) array_f;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((float *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1f_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (float *)(float *)array_f;
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  double *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  {
    size_t ii;
    double *b = (double *) array_d;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((double *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1d_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (double *)(double *)array_d;
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1struct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  SimpleStruct *arg1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SimpleStruct **)&jarg1; 
  {
    size_t ii;
    SimpleStruct *b = (SimpleStruct *) array_struct;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((SimpleStruct *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1struct_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SimpleStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SimpleStruct *)(SimpleStruct *)array_struct;
  *(SimpleStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1structpointers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SimpleStruct **arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SimpleStruct ***)&jarg1; 
  {
    size_t ii;
    SimpleStruct * *b = (SimpleStruct * *) array_structpointers;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((SimpleStruct * *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1structpointers_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SimpleStruct **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SimpleStruct **)(SimpleStruct **)array_structpointers;
  *(SimpleStruct ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1ipointers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int **arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int ***)&jarg1; 
  {
    size_t ii;
    int * *b = (int * *) array_ipointers;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int * *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1ipointers_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int **)(int **)array_ipointers;
  *(int ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1enum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  finger *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(finger **)&jarg1; 
  {
    size_t ii;
    finger *b = (finger *) array_enum;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((finger *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1enum_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  finger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (finger *)(finger *)array_enum;
  *(finger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_array_1enumpointers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  finger **arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(finger ***)&jarg1; 
  {
    size_t ii;
    finger * *b = (finger * *) array_enumpointers;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((finger * *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1enumpointers_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  finger **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (finger **)(finger **)array_enumpointers;
  *(finger ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_array_1const_1i_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)(int *)array_const_i;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_arrays_1global_arrays_1globalJNI_BeginString_1FIX44a_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)BeginString_FIX44a;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_BeginString_1FIX44b_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if(arg1) {
      strncpy((char*)BeginString_FIX44b, (const char *)arg1, 8-1);
      BeginString_FIX44b[8-1] = 0;
    } else {
      BeginString_FIX44b[0] = 0;
    }
  }
  
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_arrays_1global_arrays_1globalJNI_BeginString_1FIX44b_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)BeginString_FIX44b;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_arrays_1global_arrays_1globalJNI_BeginString_1FIX44c_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)BeginString_FIX44c;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_BeginString_1FIX44d_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) strcpy((char *)BeginString_FIX44d, (const char *)arg1);
    else BeginString_FIX44d[0] = 0;
  }
  
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_arrays_1global_arrays_1globalJNI_BeginString_1FIX44d_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)BeginString_FIX44d;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_BeginString_1FIX44e_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (arg1) {
      BeginString_FIX44e = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)BeginString_FIX44e, (const char *)arg1);
    } else {
      BeginString_FIX44e = 0;
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jstring JNICALL Java_arrays_1global_arrays_1globalJNI_BeginString_1FIX44e_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)BeginString_FIX44e;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_arrays_1global_arrays_1globalJNI_BeginString_1FIX44f_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)BeginString_FIX44f;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_arrays_1global_arrays_1globalJNI_test_1a_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  char *arg1 ;
  char *arg2 ;
  char *arg3 ;
  char *arg4 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (char *)test_a(arg1,arg2,(char const (*))arg3,(char const (*))arg4);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  
  
  
  
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_arrays_1global_arrays_1globalJNI_test_1b_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  char *arg1 ;
  char *arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)test_b(arg1,(char const (*))arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  
  
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_arrays_1global_arrays_1globalJNI_test_1a_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)test_a(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_arrays_1global_arrays_1globalJNI_test_1b_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)test_b(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_new_1Material(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Material *)new Material();
  *(Material **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_delete_1Material(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Material *arg1 = (Material *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Material **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_arrays_1global_arrays_1globalJNI_Size_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Size;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_chitMat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Material **arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Material ***)&jarg1; 
  {
    size_t ii;
    Material const * *b = (Material const * *) chitMat;
    for (ii = 0; ii < (size_t)Size; ii++) b[ii] = *((Material const * *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_chitMat_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Material **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Material **)(Material **)chitMat;
  *(Material ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_hitMat_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Material *arg1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Material **)&jarg1; 
  {
    size_t ii;
    Material *b = (Material *) hitMat_val;
    for (ii = 0; ii < (size_t)Size; ii++) b[ii] = *((Material *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_hitMat_1val_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Material *)(Material *)hitMat_val;
  *(Material **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_arrays_1global_arrays_1globalJNI_hitMat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Material **arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Material ***)&jarg1; 
  {
    size_t ii;
    Material * *b = (Material * *) hitMat;
    for (ii = 0; ii < (size_t)Size; ii++) b[ii] = *((Material * *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_arrays_1global_arrays_1globalJNI_hitMat_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Material **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Material **)(Material **)hitMat;
  *(Material ***)&jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

