/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_director_protected_WRAP_H_
#define SWIG_director_protected_WRAP_H_

class SwigDirector_Foo : public Foo, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Foo(JNIEnv *jenv);
    virtual ~SwigDirector_Foo();
    virtual std::string pong();
    virtual std::string ping();
    virtual std::string pang();
    virtual std::string pangSwigPublic() {
      return Foo::pang();
    }
    virtual std::string used();
    virtual std::string usedSwigPublic() {
      return Foo::used();
    }
    virtual std::string cheer();
    virtual std::string cheerSwigPublic() {
      return Foo::cheer();
    }
public:
    bool swig_overrides(int n) {
      return (n < 5 ? swig_override[n] : false);
    }
protected:
    bool swig_override[5];
};

class SwigDirector_Bar : public Bar, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Bar(JNIEnv *jenv);
    virtual ~SwigDirector_Bar();
    virtual std::string pong();
    virtual std::string ping();
    virtual std::string pingSwigPublic() {
      return Bar::ping();
    }
    virtual std::string pang();
    virtual std::string pangSwigPublic() {
      return Foo::pang();
    }
    virtual std::string used();
    virtual std::string cheer();
    virtual std::string cheerSwigPublic() {
      return Bar::cheer();
    }
public:
    bool swig_overrides(int n) {
      return (n < 5 ? swig_override[n] : false);
    }
protected:
    bool swig_override[5];
};

class SwigDirector_A : public A, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_A(JNIEnv *jenv);
    virtual ~SwigDirector_A();
    virtual void draw();
    virtual void drawSwigPublic() {
      A::draw();
    }
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_B : public B, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_B(JNIEnv *jenv);
    virtual ~SwigDirector_B();
    virtual void draw();
    virtual void drawSwigPublic() {
      B::draw();
    }
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};


#endif
