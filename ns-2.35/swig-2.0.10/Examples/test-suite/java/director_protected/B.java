/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package director_protected;

public class B extends A {
  private long swigCPtr;

  protected B(long cPtr, boolean cMemoryOwn) {
    super(director_protectedJNI.B_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(B obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        director_protectedJNI.delete_B(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    director_protectedJNI.B_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    director_protectedJNI.B_change_ownership(this, swigCPtr, true);
  }

  public B() {
    this(director_protectedJNI.new_B(), true);
    director_protectedJNI.B_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  protected void draw() {
    if (getClass() == B.class) director_protectedJNI.B_draw(swigCPtr, this); else director_protectedJNI.B_drawSwigExplicitB(swigCPtr, this);
  }

}
