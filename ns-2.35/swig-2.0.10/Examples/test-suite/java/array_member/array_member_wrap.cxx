/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



typedef struct Foo {
    char   text[8]; 
    int    data[8];
} Foo;

int global_data[8] = { 0,1,2,3,4,5,6,7 };

void set_value(int *x, int i, int v) {
    x[i] = v;
}

int get_value(int *x, int i) {
    return x[i];
}



  struct Material
  {
  };

  class RayPacketData {
  public:
    enum {
      Size = 32
    };
    
    const Material * chitMat[Size];
    Material hitMat_val[Size];
    Material *hitMat[Size];

    const Material * chitMat2[Size][Size];
    Material hitMat_val2[Size][Size];
    Material *hitMat2[Size][Size];
  };


#define BUFF_LEN 12

typedef unsigned char BUFF[BUFF_LEN]; 

typedef BUFF MY_BUFF;

typedef struct _m {
  int i;
  MY_BUFF x;
} MyBuff;


typedef char SBUFF[BUFF_LEN];
typedef SBUFF MY_SBUFF;
typedef struct _sm {
  int i;
  MY_SBUFF x;
} MySBuff;



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_Foo_1text_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->text, (const char *)arg2, 8-1);
      arg1->text[8-1] = 0;
    } else {
      arg1->text[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_array_1member_array_1memberJNI_Foo_1text_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (char *)(char *) ((arg1)->text);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_Foo_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->data;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((int *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_Foo_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (int *)(int *) ((arg1)->data);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_new_1Foo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo *)new Foo();
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_delete_1Foo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_global_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  {
    size_t ii;
    int *b = (int *) global_data;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((int *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_global_1data_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)(int *)global_data;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_set_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  set_value(arg1,arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_array_1member_array_1memberJNI_get_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)get_value(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_new_1Material(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Material *)new Material();
  *(Material **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_delete_1Material(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Material *arg1 = (Material *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Material **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_array_1member_array_1memberJNI_RayPacketData_1Size_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)RayPacketData::Size;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_RayPacketData_1chitMat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RayPacketData *arg1 = (RayPacketData *) 0 ;
  Material **arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RayPacketData **)&jarg1; 
  arg2 = *(Material ***)&jarg2; 
  {
    size_t ii;
    Material const * *b = (Material const * *) arg1->chitMat;
    for (ii = 0; ii < (size_t)RayPacketData::Size; ii++) b[ii] = *((Material const * *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_RayPacketData_1chitMat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RayPacketData *arg1 = (RayPacketData *) 0 ;
  Material **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RayPacketData **)&jarg1; 
  result = (Material **)(Material **) ((arg1)->chitMat);
  *(Material ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_RayPacketData_1hitMat_1val_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RayPacketData *arg1 = (RayPacketData *) 0 ;
  Material *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RayPacketData **)&jarg1; 
  arg2 = *(Material **)&jarg2; 
  {
    size_t ii;
    Material *b = (Material *) arg1->hitMat_val;
    for (ii = 0; ii < (size_t)RayPacketData::Size; ii++) b[ii] = *((Material *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_RayPacketData_1hitMat_1val_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RayPacketData *arg1 = (RayPacketData *) 0 ;
  Material *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RayPacketData **)&jarg1; 
  result = (Material *)(Material *) ((arg1)->hitMat_val);
  *(Material **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_RayPacketData_1hitMat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RayPacketData *arg1 = (RayPacketData *) 0 ;
  Material **arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RayPacketData **)&jarg1; 
  arg2 = *(Material ***)&jarg2; 
  {
    size_t ii;
    Material * *b = (Material * *) arg1->hitMat;
    for (ii = 0; ii < (size_t)RayPacketData::Size; ii++) b[ii] = *((Material * *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_RayPacketData_1hitMat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RayPacketData *arg1 = (RayPacketData *) 0 ;
  Material **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RayPacketData **)&jarg1; 
  result = (Material **)(Material **) ((arg1)->hitMat);
  *(Material ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_RayPacketData_1chitMat2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RayPacketData *arg1 = (RayPacketData *) 0 ;
  Material *(*arg2)[RayPacketData::Size] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RayPacketData **)&jarg1; 
  arg2 = *(Material *(**)[RayPacketData::Size])&jarg2; 
  {
    Material const * (*inp)[RayPacketData::Size] = (Material const * (*)[RayPacketData::Size])(arg2);
    Material const * (*dest)[RayPacketData::Size] = (Material const * (*)[RayPacketData::Size])(arg1->chitMat2);
    size_t ii = 0;
    for (; ii < RayPacketData::Size; ++ii) {
      Material const * *ip = inp[ii];
      Material const * *dp = dest[ii];
      size_t jj = 0;
      for (; jj < RayPacketData::Size; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_RayPacketData_1chitMat2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RayPacketData *arg1 = (RayPacketData *) 0 ;
  Material *(*result)[RayPacketData::Size] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RayPacketData **)&jarg1; 
  result = (Material *(*)[RayPacketData::Size])(Material *(*)[RayPacketData::Size]) ((arg1)->chitMat2);
  *(Material *(**)[RayPacketData::Size])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_RayPacketData_1hitMat_1val2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RayPacketData *arg1 = (RayPacketData *) 0 ;
  Material (*arg2)[RayPacketData::Size] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RayPacketData **)&jarg1; 
  arg2 = *(Material (**)[RayPacketData::Size])&jarg2; 
  {
    Material (*inp)[RayPacketData::Size] = (Material (*)[RayPacketData::Size])(arg2);
    Material (*dest)[RayPacketData::Size] = (Material (*)[RayPacketData::Size])(arg1->hitMat_val2);
    size_t ii = 0;
    for (; ii < RayPacketData::Size; ++ii) {
      Material *ip = inp[ii];
      Material *dp = dest[ii];
      size_t jj = 0;
      for (; jj < RayPacketData::Size; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_RayPacketData_1hitMat_1val2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RayPacketData *arg1 = (RayPacketData *) 0 ;
  Material (*result)[RayPacketData::Size] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RayPacketData **)&jarg1; 
  result = (Material (*)[RayPacketData::Size])(Material (*)[RayPacketData::Size]) ((arg1)->hitMat_val2);
  *(Material (**)[RayPacketData::Size])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_RayPacketData_1hitMat2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RayPacketData *arg1 = (RayPacketData *) 0 ;
  Material *(*arg2)[RayPacketData::Size] ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RayPacketData **)&jarg1; 
  arg2 = *(Material *(**)[RayPacketData::Size])&jarg2; 
  {
    Material * (*inp)[RayPacketData::Size] = (Material * (*)[RayPacketData::Size])(arg2);
    Material * (*dest)[RayPacketData::Size] = (Material * (*)[RayPacketData::Size])(arg1->hitMat2);
    size_t ii = 0;
    for (; ii < RayPacketData::Size; ++ii) {
      Material * *ip = inp[ii];
      Material * *dp = dest[ii];
      size_t jj = 0;
      for (; jj < RayPacketData::Size; ++jj) dp[jj] = ip[jj];
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_RayPacketData_1hitMat2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RayPacketData *arg1 = (RayPacketData *) 0 ;
  Material *(*result)[RayPacketData::Size] = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RayPacketData **)&jarg1; 
  result = (Material *(*)[RayPacketData::Size])(Material *(*)[RayPacketData::Size]) ((arg1)->hitMat2);
  *(Material *(**)[RayPacketData::Size])&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_new_1RayPacketData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RayPacketData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RayPacketData *)new RayPacketData();
  *(RayPacketData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_delete_1RayPacketData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RayPacketData *arg1 = (RayPacketData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RayPacketData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_array_1member_array_1memberJNI_BUFF_1LEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(12);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_MyBuff_1i_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  _m *arg1 = (_m *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_m **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i = arg2;
}


SWIGEXPORT jint JNICALL Java_array_1member_array_1memberJNI_MyBuff_1i_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  _m *arg1 = (_m *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_m **)&jarg1; 
  result = (int) ((arg1)->i);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_MyBuff_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  _m *arg1 = (_m *) 0 ;
  unsigned char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_m **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->x;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_MyBuff_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  _m *arg1 = (_m *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_m **)&jarg1; 
  result = (unsigned char *) ((arg1)->x);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_new_1MyBuff(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _m *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_m *)new _m();
  *(_m **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_delete_1MyBuff(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _m *arg1 = (_m *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_m **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_MySBuff_1i_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  _sm *arg1 = (_sm *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_sm **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i = arg2;
}


SWIGEXPORT jint JNICALL Java_array_1member_array_1memberJNI_MySBuff_1i_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  _sm *arg1 = (_sm *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_sm **)&jarg1; 
  result = (int) ((arg1)->i);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_MySBuff_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  _sm *arg1 = (_sm *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_sm **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->x, (const char *)arg2, 12-1);
      arg1->x[12-1] = 0;
    } else {
      arg1->x[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_array_1member_array_1memberJNI_MySBuff_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  _sm *arg1 = (_sm *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(_sm **)&jarg1; 
  result = (char *) ((arg1)->x);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_array_1member_array_1memberJNI_new_1MySBuff(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  _sm *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (_sm *)new _sm();
  *(_sm **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1member_array_1memberJNI_delete_1MySBuff(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  _sm *arg1 = (_sm *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(_sm **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

