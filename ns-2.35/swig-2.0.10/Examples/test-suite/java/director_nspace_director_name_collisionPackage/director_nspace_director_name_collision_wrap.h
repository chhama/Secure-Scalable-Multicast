/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_director_nspace_director_name_collision_WRAP_H_
#define SWIG_director_nspace_director_name_collision_WRAP_H_

class SwigDirector_TopLevel_A_Foo : public TopLevel::A::Foo, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_TopLevel_A_Foo(JNIEnv *jenv);
    virtual ~SwigDirector_TopLevel_A_Foo();
    virtual std::string ping();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_TopLevel_B_Foo : public TopLevel::B::Foo, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_TopLevel_B_Foo(JNIEnv *jenv);
    virtual ~SwigDirector_TopLevel_B_Foo();
    virtual std::string ping();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};


#endif
