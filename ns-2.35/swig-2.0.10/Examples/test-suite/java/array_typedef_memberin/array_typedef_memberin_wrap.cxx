/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

 
typedef short Eight[8]; 
typedef const short ConstEight[8]; 
namespace ArrayExample 
{ 
    class ExampleDetail 
    { 
    public: 
        Eight node_list; 
#ifndef _MSC_VER
        const Eight node_list2; 
        ConstEight node_list3; 
#else
        Eight node_list2; 
        Eight node_list3; 
#endif

        void fn1(Eight a) {}
        void fn2(const Eight a) {}
        void fn3(ConstEight a) {}

        void fn4(Eight* a) {}
        void fn5(ConstEight* a) {}
        void fn6(const ConstEight* a) {}

        void fn7(Eight*& a) {}
        void fn8(ConstEight*& a) {}
        void fn9(const ConstEight*& a) {}
    };
} 

typedef int Four[4];
typedef const int ConstFour[4];

void test_1(int (*v)[4]) {}
void test_2(Four *v) {}
void test_3(const Four *v) {}
void test_4(ConstFour *v) {}
void test_5(const int (*v)[4]) {}
void test_3r(const Four *&v) {}
void test_4r(ConstFour *&v) {}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_ExampleDetail_1node_1list_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  short *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  arg2 = *(short **)&jarg2; 
  {
    size_t ii;
    short *b = (short *) arg1->node_list;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((short *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_ExampleDetail_1node_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  result = (short *) ((arg1)->node_list);
  *(short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_ExampleDetail_1node_1list2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  result = (short *)(short *) ((arg1)->node_list2);
  *(short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_ExampleDetail_1node_1list3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  result = (short *) ((arg1)->node_list3);
  *(short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_ExampleDetail_1fn1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  short *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  arg2 = *(short **)&jarg2; 
  (arg1)->fn1(arg2);
  
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_ExampleDetail_1fn2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  short *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  arg2 = *(short **)&jarg2; 
  (arg1)->fn2(arg2);
  
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_ExampleDetail_1fn3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  short *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  arg2 = *(short **)&jarg2; 
  (arg1)->fn3((short const (*))arg2);
  
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_ExampleDetail_1fn4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  Eight *arg2 = (Eight *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  arg2 = *(Eight **)&jarg2; 
  (arg1)->fn4(arg2);
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_ExampleDetail_1fn5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  ConstEight *arg2 = (ConstEight *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  arg2 = *(ConstEight **)&jarg2; 
  (arg1)->fn5(arg2);
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_ExampleDetail_1fn6(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  ConstEight *arg2 = (ConstEight *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  arg2 = *(ConstEight **)&jarg2; 
  (arg1)->fn6((ConstEight const *)arg2);
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_ExampleDetail_1fn7(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  Eight **arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  arg2 = *(Eight ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Eight *& reference is null");
    return ;
  } 
  (arg1)->fn7(*arg2);
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_ExampleDetail_1fn8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  ConstEight **arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  arg2 = *(ConstEight ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConstEight *& reference is null");
    return ;
  } 
  (arg1)->fn8(*arg2);
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_ExampleDetail_1fn9(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  ConstEight **arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  arg2 = *(ConstEight ***)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConstEight const *& reference is null");
    return ;
  } 
  (arg1)->fn9((ConstEight const *&)*arg2);
}


SWIGEXPORT jlong JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_new_1ExampleDetail(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArrayExample::ExampleDetail *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArrayExample::ExampleDetail *)new ArrayExample::ExampleDetail();
  *(ArrayExample::ExampleDetail **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_delete_1ExampleDetail(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArrayExample::ExampleDetail *arg1 = (ArrayExample::ExampleDetail *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArrayExample::ExampleDetail **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_test_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int (*arg1)[4] = (int (*)[4]) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int (**)[4])&jarg1; 
  test_1((int (*)[4])arg1);
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_test_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Four *arg1 = (Four *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Four **)&jarg1; 
  test_2((int (*)[4])arg1);
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_test_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Four *arg1 = (Four *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Four **)&jarg1; 
  test_3((int const (*)[4])arg1);
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_test_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConstFour *arg1 = (ConstFour *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConstFour **)&jarg1; 
  test_4((int const (*)[4])arg1);
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_test_15(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int (*arg1)[4] = (int (*)[4]) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int (**)[4])&jarg1; 
  test_5((int const (*)[4])arg1);
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_test_13r(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Four **arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Four ***)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Four const *& reference is null");
    return ;
  } 
  test_3r((int const (*&)[4])*arg1);
}


SWIGEXPORT void JNICALL Java_array_1typedef_1memberin_array_1typedef_1memberinJNI_test_14r(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConstFour **arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConstFour ***)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ConstFour *& reference is null");
    return ;
  } 
  test_4r((int const (*&)[4])*arg1);
}


#ifdef __cplusplus
}
#endif

