/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


  namespace hi
  {
    struct CBase
    {
      static int hello() 
      {
	return 1;
      }
      int x;
      static const int z = 1;
    };

    class CDerived : public CBase
    {
    };

    class CPtr
    {
    public:
      CDerived* operator->(void) {return 0;}
    };

    int get_hello(CPtr ptr)
    {
      return ptr->hello();
    }

    class CPtrConst
    {
    public:
      const CDerived* operator->() const {return 0;};
    };
    
  }
  

SWIGINTERN int hi_CBase_foo(hi::CBase *self){return 1;}
SWIGINTERN int hi_CBase_bar(hi::CBase *self){return 2;}
SWIGINTERN int hi_CBase_boo(hi::CBase *self,int i){return i;}
SWIGINTERN int hi_CDerived_foo(hi::CDerived *self){return 1;}

  struct Foo {
  };
  
  class Bar {
    Foo *f;
  public:
    Bar(Foo *f) : f(f) { }
    Foo *operator->() {
      return f;
    }
  };

SWIGINTERN int Foo_extension__SWIG_0(Foo *self,int i,int j){ return i; }
SWIGINTERN int Foo_extension__SWIG_1(Foo *self,int i){ return i; }
SWIGINTERN int Foo_extension__SWIG_2(Foo *self){ return 1; }


class CFoo
{
};

class CPtrFoo
{
public:
    CFoo* operator->(void) {return 0;};
};


SWIGINTERN void CFoo_StatFun__SWIG_0(){}
SWIGINTERN void CFoo_StatFun__SWIG_1(int i){}
SWIGINTERN void CFoo_HoHoHo(int i,int j){}

  namespace foo {
    
    class DFoo;
    
    class DPtrFoo
    {
      DFoo *p;
    public:
      DPtrFoo(DFoo *ptr) : p(ptr)
      {
      }
      
      DFoo* operator->(void) {return p;};
    };
    
    class DFoo
    {
    public:
      void F(void) {};
    };
  }

SWIGINTERN int foo_DFoo_SExt__SWIG_0(int i=1){return i;}
SWIGINTERN int foo_DFoo_Ext__SWIG_0(foo::DFoo *self,int i=2){return i;}

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CBase_1hello(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)hi::CBase::hello();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CBase_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  hi::CBase *arg1 = (hi::CBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CBase **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CBase_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::CBase *arg1 = (hi::CBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CBase **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CBase_1z_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)hi::CBase::z;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CBase_1foo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::CBase *arg1 = (hi::CBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CBase **)&jarg1; 
  result = (int)hi_CBase_foo(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CBase_1bar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::CBase *arg1 = (hi::CBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CBase **)&jarg1; 
  result = (int)hi_CBase_bar(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CBase_1boo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  hi::CBase *arg1 = (hi::CBase *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CBase **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)hi_CBase_boo(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_new_1CBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  hi::CBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (hi::CBase *)new hi::CBase();
  *(hi::CBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_delete_1CBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  hi::CBase *arg1 = (hi::CBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(hi::CBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CDerived_1foo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::CDerived *arg1 = (hi::CDerived *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CDerived **)&jarg1; 
  result = (int)hi_CDerived_foo(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_new_1CDerived(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  hi::CDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (hi::CDerived *)new hi::CDerived();
  *(hi::CDerived **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_delete_1CDerived(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  hi::CDerived *arg1 = (hi::CDerived *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(hi::CDerived **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtr_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  hi::CPtr *arg1 = (hi::CPtr *) 0 ;
  hi::CDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CPtr **)&jarg1; 
  result = (hi::CDerived *)(arg1)->operator ->();
  *(hi::CDerived **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_new_1CPtr(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  hi::CPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (hi::CPtr *)new hi::CPtr();
  *(hi::CPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_delete_1CPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  hi::CPtr *arg1 = (hi::CPtr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(hi::CPtr **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtr_1foo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::CPtr *arg1 = (hi::CPtr *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CPtr **)&jarg1; 
  result = (int)hi_CDerived_foo((hi::CDerived*)(arg1)->operator ->());
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtr_1hello(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::CPtr *arg1 = (hi::CPtr *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CPtr **)&jarg1; 
  result = (int)(*arg1)->hello();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtr_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  hi::CPtr *arg1 = (hi::CPtr *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CPtr **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (*arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtr_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::CPtr *arg1 = (hi::CPtr *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CPtr **)&jarg1; 
  result = (int) ((*arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtr_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::CPtr *arg1 = (hi::CPtr *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CPtr **)&jarg1; 
  result = (int)(int) (hi::CBase::z);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtr_1bar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::CPtr *arg1 = (hi::CPtr *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CPtr **)&jarg1; 
  result = (int)hi_CBase_bar((hi::CBase*)(arg1)->operator ->());
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtr_1boo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  hi::CPtr *arg1 = (hi::CPtr *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CPtr **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)hi_CBase_boo((hi::CBase*)(arg1)->operator ->(),arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_get_1hello(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::CPtr arg1 ;
  hi::CPtr *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(hi::CPtr **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null hi::CPtr");
    return 0;
  }
  arg1 = *argp1; 
  result = (int)hi::get_hello(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtrConst_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  hi::CPtrConst *arg1 = (hi::CPtrConst *) 0 ;
  hi::CDerived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CPtrConst **)&jarg1; 
  result = (hi::CDerived *)((hi::CPtrConst const *)arg1)->operator ->();
  *(hi::CDerived **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_new_1CPtrConst(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  hi::CPtrConst *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (hi::CPtrConst *)new hi::CPtrConst();
  *(hi::CPtrConst **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_delete_1CPtrConst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  hi::CPtrConst *arg1 = (hi::CPtrConst *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(hi::CPtrConst **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtrConst_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::CPtrConst *arg1 = (hi::CPtrConst *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CPtrConst **)&jarg1; 
  result = (int) ((*arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtrConst_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  hi::CPtrConst *arg1 = (hi::CPtrConst *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(hi::CPtrConst **)&jarg1; 
  result = (int)(int) (hi::CBase::z);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_Foo_1extension_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)Foo_extension__SWIG_0(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_Foo_1extension_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Foo_extension__SWIG_1(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_Foo_1extension_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (int)Foo_extension__SWIG_2(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_new_1Foo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo *)new Foo();
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_delete_1Foo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_new_1Bar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Foo *arg1 = (Foo *) 0 ;
  Bar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  result = (Bar *)new Bar(arg1);
  *(Bar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_Bar_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Bar *arg1 = (Bar *) 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  result = (Foo *)(arg1)->operator ->();
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_delete_1Bar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bar *arg1 = (Bar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_Bar_1extension_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  Bar *arg1 = (Bar *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)Foo_extension__SWIG_0((Foo*)(arg1)->operator ->(),arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_Bar_1extension_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Bar *arg1 = (Bar *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Foo_extension__SWIG_1((Foo*)(arg1)->operator ->(),arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_Bar_1extension_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Bar *arg1 = (Bar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  result = (int)Foo_extension__SWIG_2((Foo*)(arg1)->operator ->());
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CFoo_1StatFun_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  CFoo_StatFun__SWIG_0();
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CFoo_1StatFun_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  CFoo_StatFun__SWIG_1(arg1);
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CFoo_1HoHoHo(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  int arg1 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  CFoo_HoHoHo(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_new_1CFoo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CFoo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CFoo *)new CFoo();
  *(CFoo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_delete_1CFoo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CFoo *arg1 = (CFoo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CFoo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtrFoo_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CPtrFoo *arg1 = (CPtrFoo *) 0 ;
  CFoo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPtrFoo **)&jarg1; 
  result = (CFoo *)(arg1)->operator ->();
  *(CFoo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_new_1CPtrFoo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CPtrFoo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CPtrFoo *)new CPtrFoo();
  *(CPtrFoo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_delete_1CPtrFoo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CPtrFoo *arg1 = (CPtrFoo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CPtrFoo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtrFoo_1StatFun_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CPtrFoo *arg1 = (CPtrFoo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPtrFoo **)&jarg1; 
  CFoo_StatFun__SWIG_0();
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtrFoo_1StatFun_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CPtrFoo *arg1 = (CPtrFoo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPtrFoo **)&jarg1; 
  arg2 = (int)jarg2; 
  CFoo_StatFun__SWIG_1(arg2);
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CPtrFoo_1HoHoHo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  CPtrFoo *arg1 = (CPtrFoo *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPtrFoo **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  CFoo_HoHoHo(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_new_1DPtrFoo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  foo::DFoo *arg1 = (foo::DFoo *) 0 ;
  foo::DPtrFoo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(foo::DFoo **)&jarg1; 
  result = (foo::DPtrFoo *)new foo::DPtrFoo(arg1);
  *(foo::DPtrFoo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_DPtrFoo_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  foo::DPtrFoo *arg1 = (foo::DPtrFoo *) 0 ;
  foo::DFoo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(foo::DPtrFoo **)&jarg1; 
  result = (foo::DFoo *)(arg1)->operator ->();
  *(foo::DFoo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_delete_1DPtrFoo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  foo::DPtrFoo *arg1 = (foo::DPtrFoo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(foo::DPtrFoo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_DPtrFoo_1F(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  foo::DPtrFoo *arg1 = (foo::DPtrFoo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(foo::DPtrFoo **)&jarg1; 
  (*arg1)->F();
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_DPtrFoo_1SExt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  foo::DPtrFoo *arg1 = (foo::DPtrFoo *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(foo::DPtrFoo **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)foo_DFoo_SExt__SWIG_0(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_DPtrFoo_1SExt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  foo::DPtrFoo *arg1 = (foo::DPtrFoo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(foo::DPtrFoo **)&jarg1; 
  result = (int)foo_DFoo_SExt__SWIG_0();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_DPtrFoo_1Ext_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  foo::DPtrFoo *arg1 = (foo::DPtrFoo *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(foo::DPtrFoo **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)foo_DFoo_Ext__SWIG_0((foo::DFoo*)(arg1)->operator ->(),arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_DPtrFoo_1Ext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  foo::DPtrFoo *arg1 = (foo::DPtrFoo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(foo::DPtrFoo **)&jarg1; 
  result = (int)foo_DFoo_Ext__SWIG_0((foo::DFoo*)(arg1)->operator ->());
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_DFoo_1F(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  foo::DFoo *arg1 = (foo::DFoo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(foo::DFoo **)&jarg1; 
  (arg1)->F();
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_DFoo_1SExt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)foo_DFoo_SExt__SWIG_0(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_DFoo_1SExt_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)foo_DFoo_SExt__SWIG_0();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_DFoo_1Ext_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  foo::DFoo *arg1 = (foo::DFoo *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(foo::DFoo **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)foo_DFoo_Ext__SWIG_0(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_DFoo_1Ext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  foo::DFoo *arg1 = (foo::DFoo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(foo::DFoo **)&jarg1; 
  result = (int)foo_DFoo_Ext__SWIG_0(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_new_1DFoo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  foo::DFoo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (foo::DFoo *)new foo::DFoo();
  *(foo::DFoo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_delete_1DFoo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  foo::DFoo *arg1 = (foo::DFoo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(foo::DFoo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_smart_1pointer_1extend_smart_1pointer_1extendJNI_CDerived_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(hi::CBase **)&baseptr = *(hi::CDerived **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

