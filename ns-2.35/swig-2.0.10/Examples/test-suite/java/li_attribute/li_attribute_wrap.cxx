/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <stdio.h>


// forward reference needed if using SWIG_ATTRIBUTE_TEMPLATE
struct A;
struct MyFoo; // %attribute2 does not work with templates


#define A_a_get(self_) self_->get_a()
#define A_a_set(self_, val_) self_->set_a(val_)
  

#define A_b_get(self_) self_->b()
#define A_b_set(self_, val_) self_->b() = val_
  

#define Param_Sl_int_Sg__value_get(self_) self_->value()
#define Param_Sl_int_Sg__value_set(self_, val_) self_->value() = val_
  

#define A_c_get(self_) self_->get_c()
  

#define A_d_get(self_) self_->b()
#define A_d_set(self_, val_) self_->b() = val_
  

#define B_a_get(self_) self_->a()
#define B_a_set(self_, val_) self_->a() = val_
  

  struct A
  {
    A(int a, int b, int c) : _a(a), _b(b), _c(c)
    {
    }
    
    int get_a() const 
    {
      return _a;
    }
    
    void set_a(int aa) 
    {
      _a = aa;
    }

    /* only one ref method */
    int& b() 
    {
      return _b;
    }    

    int get_c() const 
    {
      return _c;
    }
  private:
    int _a;
    int _b;
    int _c;
  };

  template <class C>
  struct Param 
  {
    Param(C v) : _v(v)
    {
    }

    const int& value() const 
    {
      return _v;
    }
    
    int& value() 
    {
      return _v;
    }    
  private:
    C _v;
  }; 
  
  
  struct B {
    B(A *a) : mA(a)
    {
    }
    
    A*& a() { return mA; }
    
  protected:
    A*  mA;
  };
 


#define MyClass_Foo_get(self_) &self_->GetFoo()
#define MyClass_Foo_set(self_, val_) self_->SetFoo(*val_)
  

  struct MyFoo { 
    MyFoo() : x(-1) {}
    int x;
  };
  class MyClass {
    MyFoo foo;
  public:
    MyFoo& GetFoo() { return foo; }
    void SetFoo(const MyFoo& other) { foo = other; }
  };


#define MyClassVal_ReadWriteFoo_get(self_) new MyFoo(self_->GetFoo())
  

#define MyClassVal_ReadWriteFoo_set(self_, val_) self_->SetFoo(*val_)
    

#define MyClassVal_ReadOnlyFoo_get(self_) new MyFoo(self_->GetFoo())
  

  class MyClassVal {
    MyFoo foo;
  public:
    MyFoo GetFoo() { return foo; }
    void SetFoo(MyFoo other) { foo = other; }
  };


#include <string>


#define MyStringyClass_ReadWriteString_get(self_) *new std::string(self_->GetString())
  

#define MyStringyClass_ReadWriteString_set(self_, val_) self_->SetString(val_)
    

#define MyStringyClass_ReadOnlyString_get(self_) *new std::string(self_->GetString())
  

  class MyStringyClass {
    std::string str;
  public:
    MyStringyClass(const std::string &val) : str(val) {}
    std::string GetString() { return str; }
    void SetString(std::string other) { str = other; }
  };


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_li_1attribute_li_1attributeJNI_new_1A(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (A *)new A(arg1,arg2,arg3);
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_A_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  A *arg1 = (A *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (int)jarg2; 
  A_a_set(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_li_1attribute_li_1attributeJNI_A_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (int)A_a_get(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_A_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  A *arg1 = (A *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (int)jarg2; 
  A_b_set(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_li_1attribute_li_1attributeJNI_A_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (int)A_b_get(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1attribute_li_1attributeJNI_A_1c_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (int)A_c_get(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_A_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  A *arg1 = (A *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  arg2 = (int)jarg2; 
  A_d_set(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_li_1attribute_li_1attributeJNI_A_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  A *arg1 = (A *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (int)A_d_get(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_delete_1A(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  A *arg1 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(A **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1attribute_li_1attributeJNI_new_1B(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  A *arg1 = (A *) 0 ;
  B *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(A **)&jarg1; 
  result = (B *)new B(arg1);
  *(B **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_B_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  B *arg1 = (B *) 0 ;
  A *arg2 = (A *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(B **)&jarg1; 
  arg2 = *(A **)&jarg2; 
  B_a_set(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_li_1attribute_li_1attributeJNI_B_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  B *arg1 = (B *) 0 ;
  A *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(B **)&jarg1; 
  result = (A *)B_a_get(arg1);
  *(A **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_delete_1B(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  B *arg1 = (B *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(B **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1attribute_li_1attributeJNI_new_1Param_1i(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  Param< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (Param< int > *)new Param< int >(arg1);
  *(Param< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_Param_1i_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Param< int > *arg1 = (Param< int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Param< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  Param_Sl_int_Sg__value_set(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_li_1attribute_li_1attributeJNI_Param_1i_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Param< int > *arg1 = (Param< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Param< int > **)&jarg1; 
  result = (int)Param_Sl_int_Sg__value_get(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_delete_1Param_1i(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Param< int > *arg1 = (Param< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Param< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1attribute_li_1attributeJNI_new_1MyFoo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MyFoo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MyFoo *)new MyFoo();
  *(MyFoo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_MyFoo_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MyFoo *arg1 = (MyFoo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MyFoo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1attribute_li_1attributeJNI_MyFoo_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MyFoo *arg1 = (MyFoo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MyFoo **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_delete_1MyFoo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MyFoo *arg1 = (MyFoo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MyFoo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_MyClass_1Foo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MyClass *arg1 = (MyClass *) 0 ;
  MyFoo *arg2 = (MyFoo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MyClass **)&jarg1; 
  arg2 = *(MyFoo **)&jarg2; 
  MyClass_Foo_set(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_li_1attribute_li_1attributeJNI_MyClass_1Foo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MyClass *arg1 = (MyClass *) 0 ;
  MyFoo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MyClass **)&jarg1; 
  result = (MyFoo *)MyClass_Foo_get(arg1);
  *(MyFoo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1attribute_li_1attributeJNI_new_1MyClass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MyClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MyClass *)new MyClass();
  *(MyClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_delete_1MyClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MyClass *arg1 = (MyClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MyClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_MyClassVal_1ReadWriteFoo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MyClassVal *arg1 = (MyClassVal *) 0 ;
  MyFoo *arg2 = (MyFoo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MyClassVal **)&jarg1; 
  arg2 = *(MyFoo **)&jarg2; 
  MyClassVal_ReadWriteFoo_set(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_li_1attribute_li_1attributeJNI_MyClassVal_1ReadWriteFoo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MyClassVal *arg1 = (MyClassVal *) 0 ;
  MyFoo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MyClassVal **)&jarg1; 
  result = (MyFoo *)MyClassVal_ReadWriteFoo_get(arg1);
  *(MyFoo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1attribute_li_1attributeJNI_MyClassVal_1ReadOnlyFoo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MyClassVal *arg1 = (MyClassVal *) 0 ;
  MyFoo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MyClassVal **)&jarg1; 
  result = (MyFoo *)MyClassVal_ReadOnlyFoo_get(arg1);
  *(MyFoo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1attribute_li_1attributeJNI_new_1MyClassVal(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MyClassVal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MyClassVal *)new MyClassVal();
  *(MyClassVal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_delete_1MyClassVal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MyClassVal *arg1 = (MyClassVal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MyClassVal **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1attribute_li_1attributeJNI_new_1MyStringyClass(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  MyStringyClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (MyStringyClass *)new MyStringyClass((std::string const &)*arg1);
  *(MyStringyClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_MyStringyClass_1ReadWriteString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  MyStringyClass *arg1 = (MyStringyClass *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MyStringyClass **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  MyStringyClass_ReadWriteString_set(arg1,(std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_li_1attribute_li_1attributeJNI_MyStringyClass_1ReadWriteString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MyStringyClass *arg1 = (MyStringyClass *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MyStringyClass **)&jarg1; 
  result = (std::string *) &MyStringyClass_ReadWriteString_get(arg1);
  jresult = jenv->NewStringUTF(result->c_str()); 
  delete result;// my newfree override
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1attribute_li_1attributeJNI_MyStringyClass_1ReadOnlyString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MyStringyClass *arg1 = (MyStringyClass *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MyStringyClass **)&jarg1; 
  result = (std::string *) &MyStringyClass_ReadOnlyString_get(arg1);
  jresult = jenv->NewStringUTF(result->c_str()); 
  delete result;// my newfree override
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1attribute_li_1attributeJNI_delete_1MyStringyClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MyStringyClass *arg1 = (MyStringyClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MyStringyClass **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

