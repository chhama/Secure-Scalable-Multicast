/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package li_cmalloc;

public class li_cmalloc implements li_cmallocConstants {
  public static SWIGTYPE_p_int malloc_int(int nbytes) {
    long cPtr = li_cmallocJNI.malloc_int(nbytes);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static SWIGTYPE_p_int calloc_int(int nobj, int sz) {
    long cPtr = li_cmallocJNI.calloc_int(nobj, sz);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static SWIGTYPE_p_int realloc_int(SWIGTYPE_p_int ptr, int nitems) {
    long cPtr = li_cmallocJNI.realloc_int(SWIGTYPE_p_int.getCPtr(ptr), nitems);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static void free_int(SWIGTYPE_p_int ptr) {
    li_cmallocJNI.free_int(SWIGTYPE_p_int.getCPtr(ptr));
  }

  public static SWIGTYPE_p_double malloc_double(int nbytes) {
    long cPtr = li_cmallocJNI.malloc_double(nbytes);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static SWIGTYPE_p_double calloc_double(int nobj, int sz) {
    long cPtr = li_cmallocJNI.calloc_double(nobj, sz);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static SWIGTYPE_p_double realloc_double(SWIGTYPE_p_double ptr, int nitems) {
    long cPtr = li_cmallocJNI.realloc_double(SWIGTYPE_p_double.getCPtr(ptr), nitems);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public static void free_double(SWIGTYPE_p_double ptr) {
    li_cmallocJNI.free_double(SWIGTYPE_p_double.getCPtr(ptr));
  }

  public static SWIGTYPE_p_void malloc_void(int nbytes) {
    long cPtr = li_cmallocJNI.malloc_void(nbytes);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void calloc_void(int nobj, int sz) {
    long cPtr = li_cmallocJNI.calloc_void(nobj, sz);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void realloc_void(SWIGTYPE_p_void ptr, int nitems) {
    long cPtr = li_cmallocJNI.realloc_void(SWIGTYPE_p_void.getCPtr(ptr), nitems);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void free_void(SWIGTYPE_p_void ptr) {
    li_cmallocJNI.free_void(SWIGTYPE_p_void.getCPtr(ptr));
  }

  public static SWIGTYPE_p_p_int malloc_intp(int nbytes) {
    long cPtr = li_cmallocJNI.malloc_intp(nbytes);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_int(cPtr, false);
  }

  public static SWIGTYPE_p_p_int calloc_intp(int nobj, int sz) {
    long cPtr = li_cmallocJNI.calloc_intp(nobj, sz);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_int(cPtr, false);
  }

  public static SWIGTYPE_p_p_int realloc_intp(SWIGTYPE_p_p_int ptr, int nitems) {
    long cPtr = li_cmallocJNI.realloc_intp(SWIGTYPE_p_p_int.getCPtr(ptr), nitems);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_int(cPtr, false);
  }

  public static void free_intp(SWIGTYPE_p_p_int ptr) {
    li_cmallocJNI.free_intp(SWIGTYPE_p_p_int.getCPtr(ptr));
  }

}
