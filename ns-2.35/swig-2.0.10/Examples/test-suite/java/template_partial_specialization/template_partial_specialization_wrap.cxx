/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


namespace One {
  template <typename T> struct OneParm                  { void a() {} };
  template <typename T> struct OneParm<T *>             { void b() {} };
  template <typename T> struct OneParm<T &>             { void c() {} };
  template <typename T> struct OneParm<T const &>       { void d() {} };
  template <typename T> struct OneParm<T * const &>     { void e() {} };

  template <>           struct OneParm<int>             { void f() {} };
  template <>           struct OneParm<int * const &>   { void g() {} };
  template <>           struct OneParm<int **>          { void h() {} };

  template <>           struct OneParm<float>           { void i() {} };
  template <>           struct OneParm<float *>         { void j() {} };
  template <>           struct OneParm<float **>        { void k() {} };
  template <>           struct OneParm<float ***>       { void l() {} };
}


struct Concrete {};
namespace Two {
  template <typename T1, typename T2> struct TwoParm                          { void a() {} };
  template <typename T1, typename T2> struct TwoParm<T1 *, T2 *>              { void b() {} };
  template <typename T1, typename T2> struct TwoParm<T1 *, const T2 *>        { void c() {} };
  template <typename T1, typename T2> struct TwoParm<const T1 *, const T2 *>  { void d() {} };
  template <typename T1>              struct TwoParm<T1 *, int *>             { void e() {} };
  template <typename T1>              struct TwoParm<T1, int>                 { void f() {} };
  template <>                         struct TwoParm<int *, const int *>      { void g() {} };
  template <>                         struct TwoParm<Concrete, Concrete *>    { void h() {} };
}


template <typename T1, typename T2, typename T3, typename T4, typename T5> struct FiveParm                               { void a() {} };
template <typename T1>                                                     struct FiveParm<T1, int, int, double, short>  { void b() {} };


template <typename T, int N = 0, int M = 0> struct ThreeParm;
template <typename T, int N, int M>         struct ThreeParm          { void a1() {} };
template <typename T>                       struct ThreeParm<T, 0, 0> { void a2() {} };
template <typename T, int N>                struct ThreeParm<T, N, N> { void a3() {} };


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_A_1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< double > *arg1 = (One::OneParm< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< double > **)&jarg1; 
  (arg1)->a();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1A(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< double > *)new One::OneParm< double >();
  *(One::OneParm< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1A(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< double > *arg1 = (One::OneParm< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_B_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< double * > *arg1 = (One::OneParm< double * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< double * > **)&jarg1; 
  (arg1)->b();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1B(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< double * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< double * > *)new One::OneParm< double * >();
  *(One::OneParm< double * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1B(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< double * > *arg1 = (One::OneParm< double * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< double * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_C_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< double & > *arg1 = (One::OneParm< double & > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< double & > **)&jarg1; 
  (arg1)->c();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1C(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< double & > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< double & > *)new One::OneParm< double & >();
  *(One::OneParm< double & > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1C(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< double & > *arg1 = (One::OneParm< double & > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< double & > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_D_1d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< double const & > *arg1 = (One::OneParm< double const & > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< double const & > **)&jarg1; 
  (arg1)->d();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< double const & > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< double const & > *)new One::OneParm< double const & >();
  *(One::OneParm< double const & > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< double const & > *arg1 = (One::OneParm< double const & > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< double const & > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_E_1e(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< double *const & > *arg1 = (One::OneParm< double *const & > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< double *const & > **)&jarg1; 
  (arg1)->e();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1E(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< double *const & > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< double *const & > *)new One::OneParm< double *const & >();
  *(One::OneParm< double *const & > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1E(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< double *const & > *arg1 = (One::OneParm< double *const & > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< double *const & > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_F_1f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< int > *arg1 = (One::OneParm< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< int > **)&jarg1; 
  (arg1)->f();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1F(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< int > *)new One::OneParm< int >();
  *(One::OneParm< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1F(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< int > *arg1 = (One::OneParm< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_G_1g(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< int *const & > *arg1 = (One::OneParm< int *const & > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< int *const & > **)&jarg1; 
  (arg1)->g();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1G(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< int *const & > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< int *const & > *)new One::OneParm< int *const & >();
  *(One::OneParm< int *const & > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1G(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< int *const & > *arg1 = (One::OneParm< int *const & > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< int *const & > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_H_1h(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< int ** > *arg1 = (One::OneParm< int ** > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< int ** > **)&jarg1; 
  (arg1)->h();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1H(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< int ** > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< int ** > *)new One::OneParm< int ** >();
  *(One::OneParm< int ** > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1H(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< int ** > *arg1 = (One::OneParm< int ** > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< int ** > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_I_1i(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< float > *arg1 = (One::OneParm< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< float > **)&jarg1; 
  (arg1)->i();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1I(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< float > *)new One::OneParm< float >();
  *(One::OneParm< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1I(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< float > *arg1 = (One::OneParm< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_J_1j(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< float * > *arg1 = (One::OneParm< float * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< float * > **)&jarg1; 
  (arg1)->j();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1J(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< float * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< float * > *)new One::OneParm< float * >();
  *(One::OneParm< float * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1J(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< float * > *arg1 = (One::OneParm< float * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< float * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_K_1k(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< float ** > *arg1 = (One::OneParm< float ** > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< float ** > **)&jarg1; 
  (arg1)->k();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1K(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< float ** > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< float ** > *)new One::OneParm< float ** >();
  *(One::OneParm< float ** > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1K(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< float ** > *arg1 = (One::OneParm< float ** > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< float ** > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_L_1l(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< float *** > *arg1 = (One::OneParm< float *** > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< float *** > **)&jarg1; 
  (arg1)->l();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1L(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< float *** > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< float *** > *)new One::OneParm< float *** >();
  *(One::OneParm< float *** > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1L(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< float *** > *arg1 = (One::OneParm< float *** > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< float *** > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_BB_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< bool * > *arg1 = (One::OneParm< bool * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< bool * > **)&jarg1; 
  (arg1)->b();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1BB(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< bool * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< bool * > *)new One::OneParm< bool * >();
  *(One::OneParm< bool * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1BB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< bool * > *arg1 = (One::OneParm< bool * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< bool * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_BBB_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< char * > *arg1 = (One::OneParm< char * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< char * > **)&jarg1; 
  (arg1)->b();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1BBB(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< char * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< char * > *)new One::OneParm< char * >();
  *(One::OneParm< char * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1BBB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< char * > *arg1 = (One::OneParm< char * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< char * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_BBBB_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< short * > *arg1 = (One::OneParm< short * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< short * > **)&jarg1; 
  (arg1)->b();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1BBBB(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< short * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< short * > *)new One::OneParm< short * >();
  *(One::OneParm< short * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1BBBB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< short * > *arg1 = (One::OneParm< short * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< short * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_BBBBB_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< long * > *arg1 = (One::OneParm< long * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< long * > **)&jarg1; 
  (arg1)->b();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1BBBBB(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< long * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< long * > *)new One::OneParm< long * >();
  *(One::OneParm< long * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1BBBBB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< long * > *arg1 = (One::OneParm< long * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< long * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_B1_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< unsigned int ** > *arg1 = (One::OneParm< unsigned int ** > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< unsigned int ** > **)&jarg1; 
  (arg1)->b();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1B1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< unsigned int ** > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< unsigned int ** > *)new One::OneParm< unsigned int ** >();
  *(One::OneParm< unsigned int ** > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1B1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< unsigned int ** > *arg1 = (One::OneParm< unsigned int ** > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< unsigned int ** > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_B2_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< unsigned int *** > *arg1 = (One::OneParm< unsigned int *** > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< unsigned int *** > **)&jarg1; 
  (arg1)->b();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1B2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< unsigned int *** > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< unsigned int *** > *)new One::OneParm< unsigned int *** >();
  *(One::OneParm< unsigned int *** > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1B2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< unsigned int *** > *arg1 = (One::OneParm< unsigned int *** > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< unsigned int *** > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_B3_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< unsigned int const * > *arg1 = (One::OneParm< unsigned int const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< unsigned int const * > **)&jarg1; 
  (arg1)->b();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1B3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< unsigned int const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< unsigned int const * > *)new One::OneParm< unsigned int const * >();
  *(One::OneParm< unsigned int const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1B3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< unsigned int const * > *arg1 = (One::OneParm< unsigned int const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< unsigned int const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_B4_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  One::OneParm< unsigned int const ** > *arg1 = (One::OneParm< unsigned int const ** > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(One::OneParm< unsigned int const ** > **)&jarg1; 
  (arg1)->b();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1B4(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  One::OneParm< unsigned int const ** > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (One::OneParm< unsigned int const ** > *)new One::OneParm< unsigned int const ** >();
  *(One::OneParm< unsigned int const ** > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1B4(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  One::OneParm< unsigned int const ** > *arg1 = (One::OneParm< unsigned int const ** > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(One::OneParm< unsigned int const ** > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1Concrete(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Concrete *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Concrete *)new Concrete();
  *(Concrete **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1Concrete(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Concrete *arg1 = (Concrete *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Concrete **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_A_1_1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< double,double > *arg1 = (Two::TwoParm< double,double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< double,double > **)&jarg1; 
  (arg1)->a();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1A_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< double,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< double,double > *)new Two::TwoParm< double,double >();
  *(Two::TwoParm< double,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1A_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< double,double > *arg1 = (Two::TwoParm< double,double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< double,double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_B_1_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< double *,double * > *arg1 = (Two::TwoParm< double *,double * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< double *,double * > **)&jarg1; 
  (arg1)->b();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1B_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< double *,double * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< double *,double * > *)new Two::TwoParm< double *,double * >();
  *(Two::TwoParm< double *,double * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1B_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< double *,double * > *arg1 = (Two::TwoParm< double *,double * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< double *,double * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_C_1_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< double *,double const * > *arg1 = (Two::TwoParm< double *,double const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< double *,double const * > **)&jarg1; 
  (arg1)->c();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1C_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< double *,double const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< double *,double const * > *)new Two::TwoParm< double *,double const * >();
  *(Two::TwoParm< double *,double const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1C_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< double *,double const * > *arg1 = (Two::TwoParm< double *,double const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< double *,double const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_D_1_1d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< int const *,int const * > *arg1 = (Two::TwoParm< int const *,int const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< int const *,int const * > **)&jarg1; 
  (arg1)->d();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1D_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< int const *,int const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< int const *,int const * > *)new Two::TwoParm< int const *,int const * >();
  *(Two::TwoParm< int const *,int const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1D_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< int const *,int const * > *arg1 = (Two::TwoParm< int const *,int const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< int const *,int const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_E_1_1e(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< int *,int * > *arg1 = (Two::TwoParm< int *,int * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< int *,int * > **)&jarg1; 
  (arg1)->e();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1E_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< int *,int * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< int *,int * > *)new Two::TwoParm< int *,int * >();
  *(Two::TwoParm< int *,int * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1E_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< int *,int * > *arg1 = (Two::TwoParm< int *,int * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< int *,int * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_F_1_1f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< int *,int > *arg1 = (Two::TwoParm< int *,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< int *,int > **)&jarg1; 
  (arg1)->f();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1F_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< int *,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< int *,int > *)new Two::TwoParm< int *,int >();
  *(Two::TwoParm< int *,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1F_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< int *,int > *arg1 = (Two::TwoParm< int *,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< int *,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_G_1_1g(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< int *,int const * > *arg1 = (Two::TwoParm< int *,int const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< int *,int const * > **)&jarg1; 
  (arg1)->g();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1G_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< int *,int const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< int *,int const * > *)new Two::TwoParm< int *,int const * >();
  *(Two::TwoParm< int *,int const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1G_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< int *,int const * > *arg1 = (Two::TwoParm< int *,int const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< int *,int const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_C1_1_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< Concrete *,Concrete const * > *arg1 = (Two::TwoParm< Concrete *,Concrete const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< Concrete *,Concrete const * > **)&jarg1; 
  (arg1)->c();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1C1_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< Concrete *,Concrete const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< Concrete *,Concrete const * > *)new Two::TwoParm< Concrete *,Concrete const * >();
  *(Two::TwoParm< Concrete *,Concrete const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1C1_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< Concrete *,Concrete const * > *arg1 = (Two::TwoParm< Concrete *,Concrete const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< Concrete *,Concrete const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_C2_1_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< int *,Concrete const * > *arg1 = (Two::TwoParm< int *,Concrete const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< int *,Concrete const * > **)&jarg1; 
  (arg1)->c();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1C2_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< int *,Concrete const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< int *,Concrete const * > *)new Two::TwoParm< int *,Concrete const * >();
  *(Two::TwoParm< int *,Concrete const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1C2_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< int *,Concrete const * > *arg1 = (Two::TwoParm< int *,Concrete const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< int *,Concrete const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_C3_1_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< double *,Concrete const * > *arg1 = (Two::TwoParm< double *,Concrete const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< double *,Concrete const * > **)&jarg1; 
  (arg1)->c();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1C3_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< double *,Concrete const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< double *,Concrete const * > *)new Two::TwoParm< double *,Concrete const * >();
  *(Two::TwoParm< double *,Concrete const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1C3_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< double *,Concrete const * > *arg1 = (Two::TwoParm< double *,Concrete const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< double *,Concrete const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_C4_1_1c(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< void *,Concrete const * > *arg1 = (Two::TwoParm< void *,Concrete const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< void *,Concrete const * > **)&jarg1; 
  (arg1)->c();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1C4_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< void *,Concrete const * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< void *,Concrete const * > *)new Two::TwoParm< void *,Concrete const * >();
  *(Two::TwoParm< void *,Concrete const * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1C4_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< void *,Concrete const * > *arg1 = (Two::TwoParm< void *,Concrete const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< void *,Concrete const * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_B1_1_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< char *,Concrete * > *arg1 = (Two::TwoParm< char *,Concrete * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< char *,Concrete * > **)&jarg1; 
  (arg1)->b();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1B1_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< char *,Concrete * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< char *,Concrete * > *)new Two::TwoParm< char *,Concrete * >();
  *(Two::TwoParm< char *,Concrete * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1B1_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< char *,Concrete * > *arg1 = (Two::TwoParm< char *,Concrete * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< char *,Concrete * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_E1_1_1e(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< int const *,int * > *arg1 = (Two::TwoParm< int const *,int * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< int const *,int * > **)&jarg1; 
  (arg1)->e();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1E1_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< int const *,int * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< int const *,int * > *)new Two::TwoParm< int const *,int * >();
  *(Two::TwoParm< int const *,int * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1E1_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< int const *,int * > *arg1 = (Two::TwoParm< int const *,int * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< int const *,int * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_E2_1_1e(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< int **,int * > *arg1 = (Two::TwoParm< int **,int * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< int **,int * > **)&jarg1; 
  (arg1)->e();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1E2_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< int **,int * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< int **,int * > *)new Two::TwoParm< int **,int * >();
  *(Two::TwoParm< int **,int * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1E2_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< int **,int * > *arg1 = (Two::TwoParm< int **,int * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< int **,int * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_H_1_1h(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Two::TwoParm< ::Concrete,Concrete * > *arg1 = (Two::TwoParm< ::Concrete,Concrete * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Two::TwoParm< ::Concrete,Concrete * > **)&jarg1; 
  (arg1)->h();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1H_1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Two::TwoParm< ::Concrete,Concrete * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Two::TwoParm< ::Concrete,Concrete * > *)new Two::TwoParm< ::Concrete,Concrete * >();
  *(Two::TwoParm< ::Concrete,Concrete * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1H_1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Two::TwoParm< ::Concrete,Concrete * > *arg1 = (Two::TwoParm< ::Concrete,Concrete * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Two::TwoParm< ::Concrete,Concrete * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_FiveParm1_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FiveParm< bool,int,int,double,short > *arg1 = (FiveParm< bool,int,int,double,short > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FiveParm< bool,int,int,double,short > **)&jarg1; 
  (arg1)->b();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1FiveParm1(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FiveParm< bool,int,int,double,short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FiveParm< bool,int,int,double,short > *)new FiveParm< bool,int,int,double,short >();
  *(FiveParm< bool,int,int,double,short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1FiveParm1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FiveParm< bool,int,int,double,short > *arg1 = (FiveParm< bool,int,int,double,short > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FiveParm< bool,int,int,double,short > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_ThreeParmInt_1a2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ThreeParm< int,0,0 > *arg1 = (ThreeParm< int,0,0 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ThreeParm< int,0,0 > **)&jarg1; 
  (arg1)->a2();
}


SWIGEXPORT jlong JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_new_1ThreeParmInt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ThreeParm< int,0,0 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ThreeParm< int,0,0 > *)new ThreeParm< int,0,0 >();
  *(ThreeParm< int,0,0 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_template_1partial_1specialization_template_1partial_1specializationJNI_delete_1ThreeParmInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ThreeParm< int,0,0 > *arg1 = (ThreeParm< int,0,0 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ThreeParm< int,0,0 > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

