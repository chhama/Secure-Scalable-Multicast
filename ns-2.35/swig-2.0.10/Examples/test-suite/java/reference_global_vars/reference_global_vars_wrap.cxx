/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


class TestClass {
public:
    int num;
    TestClass(int n = 0) : num(n) {}
};


const TestClass& global_constTestClass = TestClass(33);


TestClass getconstTC() {
    return global_constTestClass;
}


static bool initial_value_bool;


static bool &var_bool = initial_value_bool;
bool setref_bool(bool &x) {
    var_bool = x;
    return var_bool;
}
bool& createref_bool(bool x) {
    return *new bool(x);
}
bool value_bool(bool &x) {
    return x;
}


static char initial_value_char;


static char &var_char = initial_value_char;
char setref_char(char &x) {
    var_char = x;
    return var_char;
}
char& createref_char(char x) {
    return *new char(x);
}
char value_char(char &x) {
    return x;
}


static unsigned char initial_value_unsigned_char;


static unsigned char &var_unsigned_char = initial_value_unsigned_char;
unsigned char setref_unsigned_char(unsigned char &x) {
    var_unsigned_char = x;
    return var_unsigned_char;
}
unsigned char& createref_unsigned_char(unsigned char x) {
    return *new unsigned char(x);
}
unsigned char value_unsigned_char(unsigned char &x) {
    return x;
}


static signed char initial_value_signed_char;


static signed char &var_signed_char = initial_value_signed_char;
signed char setref_signed_char(signed char &x) {
    var_signed_char = x;
    return var_signed_char;
}
signed char& createref_signed_char(signed char x) {
    return *new signed char(x);
}
signed char value_signed_char(signed char &x) {
    return x;
}


static short initial_value_short;


static short &var_short = initial_value_short;
short setref_short(short &x) {
    var_short = x;
    return var_short;
}
short& createref_short(short x) {
    return *new short(x);
}
short value_short(short &x) {
    return x;
}


static unsigned short initial_value_unsigned_short;


static unsigned short &var_unsigned_short = initial_value_unsigned_short;
unsigned short setref_unsigned_short(unsigned short &x) {
    var_unsigned_short = x;
    return var_unsigned_short;
}
unsigned short& createref_unsigned_short(unsigned short x) {
    return *new unsigned short(x);
}
unsigned short value_unsigned_short(unsigned short &x) {
    return x;
}


static int initial_value_int;


static int &var_int = initial_value_int;
int setref_int(int &x) {
    var_int = x;
    return var_int;
}
int& createref_int(int x) {
    return *new int(x);
}
int value_int(int &x) {
    return x;
}


static unsigned int initial_value_unsigned_int;


static unsigned int &var_unsigned_int = initial_value_unsigned_int;
unsigned int setref_unsigned_int(unsigned int &x) {
    var_unsigned_int = x;
    return var_unsigned_int;
}
unsigned int& createref_unsigned_int(unsigned int x) {
    return *new unsigned int(x);
}
unsigned int value_unsigned_int(unsigned int &x) {
    return x;
}


static long initial_value_long;


static long &var_long = initial_value_long;
long setref_long(long &x) {
    var_long = x;
    return var_long;
}
long& createref_long(long x) {
    return *new long(x);
}
long value_long(long &x) {
    return x;
}


static unsigned long initial_value_unsigned_long;


static unsigned long &var_unsigned_long = initial_value_unsigned_long;
unsigned long setref_unsigned_long(unsigned long &x) {
    var_unsigned_long = x;
    return var_unsigned_long;
}
unsigned long& createref_unsigned_long(unsigned long x) {
    return *new unsigned long(x);
}
unsigned long value_unsigned_long(unsigned long &x) {
    return x;
}


static float initial_value_float;


static float &var_float = initial_value_float;
float setref_float(float &x) {
    var_float = x;
    return var_float;
}
float& createref_float(float x) {
    return *new float(x);
}
float value_float(float &x) {
    return x;
}


static double initial_value_double;


static double &var_double = initial_value_double;
double setref_double(double &x) {
    var_double = x;
    return var_double;
}
double& createref_double(double x) {
    return *new double(x);
}
double value_double(double &x) {
    return x;
}


static long long initial_value_long_long;


static long long &var_long_long = initial_value_long_long;
long long setref_long_long(long long &x) {
    var_long_long = x;
    return var_long_long;
}
long long& createref_long_long(long long x) {
    return *new long long(x);
}
long long value_long_long(long long &x) {
    return x;
}


static unsigned long long initial_value_unsigned_long_long;


static unsigned long long &var_unsigned_long_long = initial_value_unsigned_long_long;
unsigned long long setref_unsigned_long_long(unsigned long long &x) {
    var_unsigned_long_long = x;
    return var_unsigned_long_long;
}
unsigned long long& createref_unsigned_long_long(unsigned long long x) {
    return *new unsigned long long(x);
}
unsigned long long value_unsigned_long_long(unsigned long long &x) {
    return x;
}


static TestClass initial_value_TestClass;


static TestClass &var_TestClass = initial_value_TestClass;
TestClass setref_TestClass(TestClass &x) {
    var_TestClass = x;
    return var_TestClass;
}
TestClass& createref_TestClass(TestClass x) {
    return *new TestClass(x);
}
TestClass value_TestClass(TestClass &x) {
    return x;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_TestClass_1num_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TestClass *arg1 = (TestClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->num = arg2;
}


SWIGEXPORT jint JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_TestClass_1num_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TestClass *arg1 = (TestClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestClass **)&jarg1; 
  result = (int) ((arg1)->num);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_new_1TestClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  TestClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (TestClass *)new TestClass(arg1);
  *(TestClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_new_1TestClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TestClass *)new TestClass();
  *(TestClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_delete_1TestClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TestClass *arg1 = (TestClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TestClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_getconstTC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestClass result;
  
  (void)jenv;
  (void)jcls;
  result = getconstTC();
  *(TestClass **)&jresult = new TestClass((const TestClass &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1bool_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bool *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return ;
  } 
  var_bool = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1bool_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (bool *) &(bool &)var_bool;
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  bool *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (bool)setref_bool(*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1bool(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (bool *) &createref_bool(arg1);
  *(bool **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  bool *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bool **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (bool)value_bool(*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1char_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  char *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char & reference is null");
    return ;
  } 
  var_char = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1char_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *) &(char &)var_char;
  *(char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1char(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jchar jresult = 0 ;
  char *arg1 = 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char & reference is null");
    return 0;
  } 
  result = (char)setref_char(*arg1);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1char(JNIEnv *jenv, jclass jcls, jchar jarg1) {
  jlong jresult = 0 ;
  char arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (char)jarg1; 
  result = (char *) &createref_char(arg1);
  *(char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1char(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jchar jresult = 0 ;
  char *arg1 = 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "char & reference is null");
    return 0;
  } 
  result = (char)value_char(*arg1);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1unsigned_1char_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned char *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned char & reference is null");
    return ;
  } 
  var_unsigned_char = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1unsigned_1char_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned char *) &(unsigned char &)var_unsigned_char;
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1unsigned_1char(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  unsigned char *arg1 = 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned char & reference is null");
    return 0;
  } 
  result = (unsigned char)setref_unsigned_char(*arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1unsigned_1char(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  result = (unsigned char *) &createref_unsigned_char(arg1);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1unsigned_1char(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  unsigned char *arg1 = 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned char & reference is null");
    return 0;
  } 
  result = (unsigned char)value_unsigned_char(*arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1signed_1char_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  signed char *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(signed char **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "signed char & reference is null");
    return ;
  } 
  var_signed_char = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1signed_1char_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  signed char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (signed char *) &(signed char &)var_signed_char;
  *(signed char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1signed_1char(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jbyte jresult = 0 ;
  signed char *arg1 = 0 ;
  signed char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(signed char **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "signed char & reference is null");
    return 0;
  } 
  result = (signed char)setref_signed_char(*arg1);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1signed_1char(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  jlong jresult = 0 ;
  signed char arg1 ;
  signed char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (signed char)jarg1; 
  result = (signed char *) &createref_signed_char(arg1);
  *(signed char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1signed_1char(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jbyte jresult = 0 ;
  signed char *arg1 = 0 ;
  signed char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(signed char **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "signed char & reference is null");
    return 0;
  } 
  result = (signed char)value_signed_char(*arg1);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1short_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  short *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(short **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "short & reference is null");
    return ;
  } 
  var_short = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1short_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (short *) &(short &)var_short;
  *(short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1short(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  short *arg1 = 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(short **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "short & reference is null");
    return 0;
  } 
  result = (short)setref_short(*arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1short(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  short arg1 ;
  short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (short)jarg1; 
  result = (short *) &createref_short(arg1);
  *(short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1short(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jshort jresult = 0 ;
  short *arg1 = 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(short **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "short & reference is null");
    return 0;
  } 
  result = (short)value_short(*arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1unsigned_1short_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned short *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned short **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned short & reference is null");
    return ;
  } 
  var_unsigned_short = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1unsigned_1short_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned short *) &(unsigned short &)var_unsigned_short;
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1unsigned_1short(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  unsigned short *arg1 = 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned short **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned short & reference is null");
    return 0;
  } 
  result = (unsigned short)setref_unsigned_short(*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1unsigned_1short(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  unsigned short arg1 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned short)jarg1; 
  result = (unsigned short *) &createref_unsigned_short(arg1);
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1unsigned_1short(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  unsigned short *arg1 = 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned short **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned short & reference is null");
    return 0;
  } 
  result = (unsigned short)value_unsigned_short(*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1int_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  var_int = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1int_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *) &(int &)var_int;
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  int *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (int)setref_int(*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *) &createref_int(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  int *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (int)value_int(*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1unsigned_1int_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned int *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return ;
  } 
  var_unsigned_int = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1unsigned_1int_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int *) &(unsigned int &)var_unsigned_int;
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1unsigned_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int *arg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  result = (unsigned int)setref_unsigned_int(*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1unsigned_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (unsigned int *) &createref_unsigned_int(arg1);
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1unsigned_1int(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int *arg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  result = (unsigned int)value_unsigned_int(*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1long_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  long *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "long & reference is null");
    return ;
  } 
  var_long = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1long_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (long *) &(long &)var_long;
  *(long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1long(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  long *arg1 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "long & reference is null");
    return 0;
  } 
  result = (long)setref_long(*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1long(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  long arg1 ;
  long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1; 
  result = (long *) &createref_long(arg1);
  *(long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1long(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  long *arg1 = 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "long & reference is null");
    return 0;
  } 
  result = (long)value_long(*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1unsigned_1long_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned long *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned long & reference is null");
    return ;
  } 
  var_unsigned_long = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1unsigned_1long_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned long *) &(unsigned long &)var_unsigned_long;
  *(unsigned long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1unsigned_1long(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned long *arg1 = 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned long & reference is null");
    return 0;
  } 
  result = (unsigned long)setref_unsigned_long(*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1unsigned_1long(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned long arg1 ;
  unsigned long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  result = (unsigned long *) &createref_unsigned_long(arg1);
  *(unsigned long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1unsigned_1long(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned long *arg1 = 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned long & reference is null");
    return 0;
  } 
  result = (unsigned long)value_unsigned_long(*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1float_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  float *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  var_float = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1float_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (float *) &(float &)var_float;
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1float(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jfloat jresult = 0 ;
  float *arg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)setref_float(*arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1float(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (float *) &createref_float(arg1);
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1float(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jfloat jresult = 0 ;
  float *arg1 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(float **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return 0;
  } 
  result = (float)value_float(*arg1);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1double_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  double *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  var_double = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1double_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (double *) &(double &)var_double;
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1double(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  double *arg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (double)setref_double(*arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1double(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double *) &createref_double(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1double(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  double *arg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return 0;
  } 
  result = (double)value_double(*arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1long_1long_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  long long *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long long **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "long long & reference is null");
    return ;
  } 
  var_long_long = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1long_1long_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (long long *) &(long long &)var_long_long;
  *(long long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1long_1long(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long *arg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long long **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "long long & reference is null");
    return 0;
  } 
  result = (long long)setref_long_long(*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1long_1long(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long arg1 ;
  long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (long long)jarg1; 
  result = (long long *) &createref_long_long(arg1);
  *(long long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1long_1long(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long long *arg1 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long long **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "long long & reference is null");
    return 0;
  } 
  result = (long long)value_long_long(*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1unsigned_1long_1long_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned long long *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned long long & reference is null");
    return ;
  } 
  var_unsigned_long_long = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1unsigned_1long_1long_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned long long *) &(unsigned long long &)var_unsigned_long_long;
  *(unsigned long long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1unsigned_1long_1long(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jobject jresult = 0 ;
  unsigned long long *arg1 = 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned long long & reference is null");
    return 0;
  } 
  result = (unsigned long long)setref_unsigned_long_long(*arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1unsigned_1long_1long(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  unsigned long long arg1 ;
  unsigned long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    for(i=0; i<sz; i++) {
      arg1 = (arg1 << 8) | (unsigned long long)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (unsigned long long *) &createref_unsigned_long_long(arg1);
  *(unsigned long long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1unsigned_1long_1long(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jobject jresult = 0 ;
  unsigned long long *arg1 = 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned long long **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned long long & reference is null");
    return 0;
  } 
  result = (unsigned long long)value_unsigned_long_long(*arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1TestClass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TestClass *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestClass **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TestClass & reference is null");
    return ;
  } 
  var_TestClass = *arg1;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_var_1TestClass_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TestClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TestClass *) &(TestClass &)var_TestClass;
  *(TestClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_setref_1TestClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TestClass *arg1 = 0 ;
  TestClass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestClass **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TestClass & reference is null");
    return 0;
  } 
  result = setref_TestClass(*arg1);
  *(TestClass **)&jresult = new TestClass((const TestClass &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_createref_1TestClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TestClass arg1 ;
  TestClass *argp1 ;
  TestClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(TestClass **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TestClass");
    return 0;
  }
  arg1 = *argp1; 
  result = (TestClass *) &createref_TestClass(arg1);
  *(TestClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_reference_1global_1vars_reference_1global_1varsJNI_value_1TestClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TestClass *arg1 = 0 ;
  TestClass result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TestClass **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TestClass & reference is null");
    return 0;
  } 
  result = value_TestClass(*arg1);
  *(TestClass **)&jresult = new TestClass((const TestClass &)result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

