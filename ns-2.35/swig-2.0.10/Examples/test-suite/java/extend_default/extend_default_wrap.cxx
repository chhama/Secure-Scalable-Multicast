/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


struct Before {
  double d;
  int i;
};

SWIGINTERN Before *new_Before__SWIG_0(int i=-1,double d=-1.0){ 
    Before *self = new Before();
    self->i = i;
    self->d = d;
    return self;
  }
SWIGINTERN double Before_AddedStaticMethod__SWIG_0(int i=-1,double d=-1){ return i+d; }
SWIGINTERN double Before_AddedMethod__SWIG_0(Before *self,int i=-1,double d=-1.0){ return i+d; }

struct After {
  double d;
  int i;
};

SWIGINTERN After *new_After__SWIG_0(int i=-1,double d=-1.0){ 
    After *self = new After();
    self->i = i;
    self->d = d;
    return self;
  }
SWIGINTERN double After_AddedStaticMethod__SWIG_0(int i=-1,double d=-1){ return i+d; }
SWIGINTERN double After_AddedMethod__SWIG_0(After *self,int i=-1,double d=-1.0){ return i+d; }

struct OverBefore {
  OverBefore(const char *str, int ii = -2, double dd = -2.0) : d(dd), i(ii) { str=0; }
  static double AddedStaticMethod(const char*, int ii = -1, double dd = -1) { return ii+dd; }
  double AddedMethod(const char*, int ii = -1, double dd = -1.0) { return ii+dd; }
  double d;
  int i;
};

SWIGINTERN OverBefore *new_OverBefore__SWIG_3(int i=-1,double d=-1.0){ 
    OverBefore *self = new OverBefore("boo");
    self->i = i;
    self->d = d;
    return self;
  }
SWIGINTERN double OverBefore_AddedStaticMethod__SWIG_3(int i=-1,double d=-1){ return i+d; }
SWIGINTERN double OverBefore_AddedMethod__SWIG_3(OverBefore *self,int i=-1,double d=-1.0){ return i+d; }

struct OverAfter {
  OverAfter(const char *str, int ii = -2, double dd = -2.0) : d(dd), i(ii) { str=0; }
  static double AddedStaticMethod(const char*, int ii = -1, double dd = -1) { return ii+dd; }
  double AddedMethod(const char*, int ii = -1, double dd = -1.0) { return ii+dd; }
  double d;
  int i;
};

SWIGINTERN OverAfter *new_OverAfter__SWIG_3(int i=-1,double d=-1.0){ 
    OverAfter *self = new OverAfter("boo");
    self->i = i;
    self->d = d;
    return self;
  }
SWIGINTERN double OverAfter_AddedStaticMethod__SWIG_3(int i=-1,double d=-1){ return i+d; }
SWIGINTERN double OverAfter_AddedMethod__SWIG_3(OverAfter *self,int i=-1,double d=-1.0){ return i+d; }

struct Override {
  int over(int a = -1) { return a; }
  int ride(int a = -1) { return a; }
  int overload(int a) { return a; }
  int overload() { return -10; }
};

SWIGINTERN int Override_over__SWIG_1(Override *self,int a){ return a*a; }
SWIGINTERN int Override_overload__SWIG_1(Override *self,int a){ return a*a; }

struct Base {
  virtual ~Base() {}
  virtual int * realvirtual(int a = 0) { return 0; }
};
struct Derived : Base {
};

SWIGINTERN int *Base_virtualmethod__SWIG_0(Base *self,int a=0){ return 0; }
SWIGINTERN int *Base_nonvirtual__SWIG_0(Base *self,int a=0){ return 0; }
SWIGINTERN int *Base_static_method__SWIG_0(int a=0){ return 0; }
SWIGINTERN int *Derived_virtualmethod__SWIG_0(Derived *self,int a=0){ return 0; }
SWIGINTERN int *Derived_nonvirtual__SWIG_0(Derived *self,int a=0){ return 0; }
SWIGINTERN int *Derived_static_method__SWIG_0(int a=0){ return 0; }
SWIGINTERN int *Derived_realvirtual__SWIG_0(Derived *self,int a=0){ return 0; }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_Before_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Before *arg1 = (Before *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Before **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_Before_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Before *arg1 = (Before *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Before **)&jarg1; 
  result = (double) ((arg1)->d);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_Before_1i_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Before *arg1 = (Before *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Before **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i = arg2;
}


SWIGEXPORT jint JNICALL Java_extend_1default_extend_1defaultJNI_Before_1i_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Before *arg1 = (Before *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Before **)&jarg1; 
  result = (int) ((arg1)->i);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1Before_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  Before *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (Before *)new_Before__SWIG_0(arg1,arg2);
  *(Before **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1Before_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  Before *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (Before *)new_Before__SWIG_0(arg1);
  *(Before **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1Before_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Before *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Before *)new_Before__SWIG_0();
  *(Before **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_Before_1AddedStaticMethod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)Before_AddedStaticMethod__SWIG_0(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_Before_1AddedStaticMethod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jdouble jresult = 0 ;
  int arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (double)Before_AddedStaticMethod__SWIG_0(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_Before_1AddedStaticMethod_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)Before_AddedStaticMethod__SWIG_0();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_Before_1AddedMethod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  Before *arg1 = (Before *) 0 ;
  int arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Before **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)Before_AddedMethod__SWIG_0(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_Before_1AddedMethod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  Before *arg1 = (Before *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Before **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)Before_AddedMethod__SWIG_0(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_Before_1AddedMethod_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Before *arg1 = (Before *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Before **)&jarg1; 
  result = (double)Before_AddedMethod__SWIG_0(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_delete_1Before(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Before *arg1 = (Before *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Before **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_After_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  After *arg1 = (After *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(After **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_After_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  After *arg1 = (After *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(After **)&jarg1; 
  result = (double) ((arg1)->d);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_After_1i_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  After *arg1 = (After *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(After **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i = arg2;
}


SWIGEXPORT jint JNICALL Java_extend_1default_extend_1defaultJNI_After_1i_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  After *arg1 = (After *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(After **)&jarg1; 
  result = (int) ((arg1)->i);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1After_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  After *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (After *)new_After__SWIG_0(arg1,arg2);
  *(After **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1After_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  After *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (After *)new_After__SWIG_0(arg1);
  *(After **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1After_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  After *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (After *)new_After__SWIG_0();
  *(After **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_After_1AddedStaticMethod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)After_AddedStaticMethod__SWIG_0(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_After_1AddedStaticMethod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jdouble jresult = 0 ;
  int arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (double)After_AddedStaticMethod__SWIG_0(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_After_1AddedStaticMethod_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)After_AddedStaticMethod__SWIG_0();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_After_1AddedMethod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  After *arg1 = (After *) 0 ;
  int arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(After **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)After_AddedMethod__SWIG_0(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_After_1AddedMethod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  After *arg1 = (After *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(After **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)After_AddedMethod__SWIG_0(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_After_1AddedMethod_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  After *arg1 = (After *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(After **)&jarg1; 
  result = (double)After_AddedMethod__SWIG_0(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_delete_1After(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  After *arg1 = (After *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(After **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1OverBefore_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double arg3 ;
  OverBefore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (OverBefore *)new OverBefore((char const *)arg1,arg2,arg3);
  *(OverBefore **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1OverBefore_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  OverBefore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (OverBefore *)new OverBefore((char const *)arg1,arg2);
  *(OverBefore **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1OverBefore_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OverBefore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OverBefore *)new OverBefore((char const *)arg1);
  *(OverBefore **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1AddedStaticMethod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)OverBefore::AddedStaticMethod((char const *)arg1,arg2,arg3);
  jresult = (jdouble)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1AddedStaticMethod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (double)OverBefore::AddedStaticMethod((char const *)arg1,arg2);
  jresult = (jdouble)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1AddedStaticMethod_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jdouble jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (double)OverBefore::AddedStaticMethod((char const *)arg1);
  jresult = (jdouble)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1AddedMethod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  OverBefore *arg1 = (OverBefore *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverBefore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->AddedMethod((char const *)arg2,arg3,arg4);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1AddedMethod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OverBefore *arg1 = (OverBefore *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverBefore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (double)(arg1)->AddedMethod((char const *)arg2,arg3);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1AddedMethod_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  OverBefore *arg1 = (OverBefore *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverBefore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->AddedMethod((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OverBefore *arg1 = (OverBefore *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverBefore **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OverBefore *arg1 = (OverBefore *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverBefore **)&jarg1; 
  result = (double) ((arg1)->d);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1i_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OverBefore *arg1 = (OverBefore *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverBefore **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i = arg2;
}


SWIGEXPORT jint JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1i_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OverBefore *arg1 = (OverBefore *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverBefore **)&jarg1; 
  result = (int) ((arg1)->i);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1OverBefore_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  OverBefore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (OverBefore *)new_OverBefore__SWIG_3(arg1,arg2);
  *(OverBefore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1OverBefore_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OverBefore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OverBefore *)new_OverBefore__SWIG_3(arg1);
  *(OverBefore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1OverBefore_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OverBefore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OverBefore *)new_OverBefore__SWIG_3();
  *(OverBefore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1AddedStaticMethod_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)OverBefore_AddedStaticMethod__SWIG_3(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1AddedStaticMethod_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jdouble jresult = 0 ;
  int arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (double)OverBefore_AddedStaticMethod__SWIG_3(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1AddedStaticMethod_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)OverBefore_AddedStaticMethod__SWIG_3();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1AddedMethod_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  OverBefore *arg1 = (OverBefore *) 0 ;
  int arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverBefore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)OverBefore_AddedMethod__SWIG_3(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1AddedMethod_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OverBefore *arg1 = (OverBefore *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverBefore **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)OverBefore_AddedMethod__SWIG_3(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverBefore_1AddedMethod_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OverBefore *arg1 = (OverBefore *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverBefore **)&jarg1; 
  result = (double)OverBefore_AddedMethod__SWIG_3(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_delete_1OverBefore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OverBefore *arg1 = (OverBefore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OverBefore **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1OverAfter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double arg3 ;
  OverAfter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (OverAfter *)new OverAfter((char const *)arg1,arg2,arg3);
  *(OverAfter **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1OverAfter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  OverAfter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (OverAfter *)new OverAfter((char const *)arg1,arg2);
  *(OverAfter **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1OverAfter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  OverAfter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (OverAfter *)new OverAfter((char const *)arg1);
  *(OverAfter **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1AddedStaticMethod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)OverAfter::AddedStaticMethod((char const *)arg1,arg2,arg3);
  jresult = (jdouble)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1AddedStaticMethod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (double)OverAfter::AddedStaticMethod((char const *)arg1,arg2);
  jresult = (jdouble)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1AddedStaticMethod_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jdouble jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (double)OverAfter::AddedStaticMethod((char const *)arg1);
  jresult = (jdouble)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1AddedMethod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  OverAfter *arg1 = (OverAfter *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverAfter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->AddedMethod((char const *)arg2,arg3,arg4);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1AddedMethod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  OverAfter *arg1 = (OverAfter *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverAfter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (double)(arg1)->AddedMethod((char const *)arg2,arg3);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1AddedMethod_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  OverAfter *arg1 = (OverAfter *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverAfter **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (double)(arg1)->AddedMethod((char const *)arg2);
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OverAfter *arg1 = (OverAfter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverAfter **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OverAfter *arg1 = (OverAfter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverAfter **)&jarg1; 
  result = (double) ((arg1)->d);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1i_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OverAfter *arg1 = (OverAfter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverAfter **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->i = arg2;
}


SWIGEXPORT jint JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1i_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OverAfter *arg1 = (OverAfter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverAfter **)&jarg1; 
  result = (int) ((arg1)->i);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1OverAfter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  OverAfter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (OverAfter *)new_OverAfter__SWIG_3(arg1,arg2);
  *(OverAfter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1OverAfter_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  OverAfter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (OverAfter *)new_OverAfter__SWIG_3(arg1);
  *(OverAfter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1OverAfter_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OverAfter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OverAfter *)new_OverAfter__SWIG_3();
  *(OverAfter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1AddedStaticMethod_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jdouble jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)OverAfter_AddedStaticMethod__SWIG_3(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1AddedStaticMethod_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jdouble jresult = 0 ;
  int arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (double)OverAfter_AddedStaticMethod__SWIG_3(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1AddedStaticMethod_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)OverAfter_AddedStaticMethod__SWIG_3();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1AddedMethod_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  OverAfter *arg1 = (OverAfter *) 0 ;
  int arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverAfter **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)OverAfter_AddedMethod__SWIG_3(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1AddedMethod_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OverAfter *arg1 = (OverAfter *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverAfter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)OverAfter_AddedMethod__SWIG_3(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_extend_1default_extend_1defaultJNI_OverAfter_1AddedMethod_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OverAfter *arg1 = (OverAfter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OverAfter **)&jarg1; 
  result = (double)OverAfter_AddedMethod__SWIG_3(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_delete_1OverAfter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OverAfter *arg1 = (OverAfter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OverAfter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_extend_1default_extend_1defaultJNI_Override_1over_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Override *arg1 = (Override *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Override **)&jarg1; 
  result = (int)(arg1)->over();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_extend_1default_extend_1defaultJNI_Override_1ride_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Override *arg1 = (Override *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Override **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->ride(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_extend_1default_extend_1defaultJNI_Override_1ride_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Override *arg1 = (Override *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Override **)&jarg1; 
  result = (int)(arg1)->ride();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_extend_1default_extend_1defaultJNI_Override_1overload_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Override *arg1 = (Override *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Override **)&jarg1; 
  result = (int)(arg1)->overload();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_extend_1default_extend_1defaultJNI_Override_1over_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Override *arg1 = (Override *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Override **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Override_over__SWIG_1(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_extend_1default_extend_1defaultJNI_Override_1overload_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Override *arg1 = (Override *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Override **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)Override_overload__SWIG_1(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1Override(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Override *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Override *)new Override();
  *(Override **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_delete_1Override(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Override *arg1 = (Override *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Override **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_delete_1Base(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Base *arg1 = (Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Base **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Base_1realvirtual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int *)(arg1)->realvirtual(arg2);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Base_1realvirtual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  result = (int *)(arg1)->realvirtual();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Base_1virtualmethod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int *)Base_virtualmethod__SWIG_0(arg1,arg2);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Base_1virtualmethod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  result = (int *)Base_virtualmethod__SWIG_0(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Base_1nonvirtual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int *)Base_nonvirtual__SWIG_0(arg1,arg2);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Base_1nonvirtual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Base *arg1 = (Base *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Base **)&jarg1; 
  result = (int *)Base_nonvirtual__SWIG_0(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Base_1static_1method_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)Base_static_method__SWIG_0(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Base_1static_1method_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)Base_static_method__SWIG_0();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1Base(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Base *)new Base();
  *(Base **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Derived_1virtualmethod_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int *)Derived_virtualmethod__SWIG_0(arg1,arg2);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Derived_1virtualmethod_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  result = (int *)Derived_virtualmethod__SWIG_0(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Derived_1nonvirtual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int *)Derived_nonvirtual__SWIG_0(arg1,arg2);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Derived_1nonvirtual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  result = (int *)Derived_nonvirtual__SWIG_0(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Derived_1static_1method_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)Derived_static_method__SWIG_0(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Derived_1static_1method_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int *)Derived_static_method__SWIG_0();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Derived_1realvirtual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int *)Derived_realvirtual__SWIG_0(arg1,arg2);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Derived_1realvirtual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Derived *arg1 = (Derived *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Derived **)&jarg1; 
  result = (int *)Derived_realvirtual__SWIG_0(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_new_1Derived(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Derived *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Derived *)new Derived();
  *(Derived **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_extend_1default_extend_1defaultJNI_delete_1Derived(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Derived *arg1 = (Derived *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Derived **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_extend_1default_extend_1defaultJNI_Derived_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Base **)&baseptr = *(Derived **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

