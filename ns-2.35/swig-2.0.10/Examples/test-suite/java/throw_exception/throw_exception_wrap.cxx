/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#if defined(_MSC_VER)
  #pragma warning(disable: 4290) // C++ exception specification ignored except to indicate a function is not __declspec(nothrow)
#endif



class Error {
};

void test_is_Error(Error *r) {}

namespace Namespace {
  typedef Error ErrorTypedef;
  typedef const Error& ErrorRef;
  typedef const Error* ErrorPtr;
  typedef int IntArray[10];
  enum EnumTest { enum1, enum2 };
}
class Foo {
public:
    void test_int() throw(int) {
      throw 37;
    }
    void test_msg() throw(const char *) {
      throw "Dead";
    }
    void test_cls() throw(Error) {
      throw Error();
    }	
    void test_cls_ptr() throw(Error *) {
      static Error StaticError;
      throw &StaticError;
    }	
    void test_cls_ref() throw(Error &) {
      static Error StaticError;
      throw StaticError;
    }	
    void test_cls_td() throw(Namespace::ErrorTypedef) {
      throw Error();
    }	
    void test_cls_ptr_td() throw(Namespace::ErrorPtr) {
      static Error StaticError;
      throw &StaticError;
    }	
    void test_cls_ref_td() throw(Namespace::ErrorRef) {
      static Error StaticError;
      throw StaticError;
    }	
    void test_array() throw(Namespace::IntArray) {
      static Namespace::IntArray array;
      for (int i=0; i<10; i++) {
        array[i] = i;
      }
      throw array;
    }	
    void test_enum() throw(Namespace::EnumTest) {
      throw Namespace::enum2;
    }	
    void test_multi(int x) throw(int, const char *, Error) {
      if (x == 1) throw 37;
      if (x == 2) throw "Dead";
      if (x == 3) throw Error();
    }
};



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_throw_1exception_throw_1exceptionJNI_new_1Error(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Error *)new Error();
  *(Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_delete_1Error(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Error *arg1 = (Error *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Error **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_test_1is_1Error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Error *arg1 = (Error *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Error **)&jarg1; 
  test_is_Error(arg1);
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_Foo_1test_1int(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  try {
    (arg1)->test_int();
  }
  catch(int &_e) {
    char error_msg[256];
    sprintf(error_msg, "C++ int exception thrown, value: %d", _e);
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, error_msg);
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_Foo_1test_1msg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  try {
    (arg1)->test_msg();
  }
  catch(char const *_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, _e);
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_Foo_1test_1cls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  try {
    (arg1)->test_cls();
  }
  catch(Error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_Foo_1test_1cls_1ptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  try {
    (arg1)->test_cls_ptr();
  }
  catch(Error *_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Error * exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_Foo_1test_1cls_1ref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  try {
    (arg1)->test_cls_ref();
  }
  catch(Error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Error & exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_Foo_1test_1cls_1td(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  try {
    (arg1)->test_cls_td();
  }
  catch(Namespace::ErrorTypedef &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Namespace::ErrorTypedef exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_Foo_1test_1cls_1ptr_1td(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  try {
    (arg1)->test_cls_ptr_td();
  }
  catch(Namespace::ErrorPtr _e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Namespace::ErrorPtr exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_Foo_1test_1cls_1ref_1td(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  try {
    (arg1)->test_cls_ref_td();
  }
  catch(Namespace::ErrorRef _e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Namespace::ErrorRef exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_Foo_1test_1array(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  try {
    (arg1)->test_array();
  }
  catch(Namespace::IntArray _e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ int [10] exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_Foo_1test_1enum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  try {
    (arg1)->test_enum();
  }
  catch(Namespace::EnumTest &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Namespace::EnumTest exception thrown"); 
  }
  
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_Foo_1test_1multi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    (arg1)->test_multi(arg2);
  }
  catch(int &_e) {
    char error_msg[256];
    sprintf(error_msg, "C++ int exception thrown, value: %d", _e);
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, error_msg);
    return ; 
  }
  catch(char const *_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, _e);
    return ; 
  }
  catch(Error &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT jlong JNICALL Java_throw_1exception_throw_1exceptionJNI_new_1Foo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo *)new Foo();
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_throw_1exception_throw_1exceptionJNI_delete_1Foo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

