/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



namespace Outer {
  class namespce {
  };
  namespace Inner1 {
    enum Channel { Diffuse, Specular = 0x10, Transmission1 };
    enum { ColorEnumVal1, ColorEnumVal2 = 0x11, ColorEnumVal3 };

    struct Color {
      static Color* create() { return new Color(); }

      enum Channel { Diffuse, Specular = 0x20, Transmission };
      enum { ColorEnumVal1, ColorEnumVal2 = 0x22, ColorEnumVal3 };

      int instanceMemberVariable;
      static int staticMemberVariable;
      static const int staticConstMemberVariable = 222;
      static const Channel staticConstEnumMemberVariable = Transmission;
      void colorInstanceMethod(double d) {}
      static void colorStaticMethod(double d) {}
    }; // Color
    int Color::staticMemberVariable = 0;

    Color namespaceFunction(Color k) { return k; }
    int namespaceVar = 0;
  } // Inner1

  namespace Inner2 {
    enum Channel { Diffuse, Specular = 0x30, Transmission2 };

    struct Color {
      Color() : instanceMemberVariable(0) {}
      static Color* create() { return new Color(); }

      enum Channel { Diffuse, Specular = 0x40, Transmission };
      enum { ColorEnumVal1, ColorEnumVal2 = 0x33, ColorEnumVal3 };

      int instanceMemberVariable;
      static int staticMemberVariable;
      static const int staticConstMemberVariable = 333;
      static const Channel staticConstEnumMemberVariable = Transmission;
      void colorInstanceMethod(double d) {}
      static void colorStaticMethod(double d) {}
      void colors(const Inner1::Color& col1a,
                  const Outer::Inner1::Color& col1b,
                  const Color &col2a,
                  const Inner2::Color& col2b,
                  const Outer::Inner2::Color& col2c) {}
    }; // Color
    int Color::staticMemberVariable = 0;
    class NoNSpacePlease {};
  } // Inner2

  // Derived class
  namespace Inner3 {
    struct Blue : Inner2::Color {
      void blueInstanceMethod() {}
    };
  }
  namespace Inner4 {
    struct Blue : Inner2::Color {
      void blueInstanceMethod() {}
    };
  }

  class SomeClass {
  public:
    Inner1::Color::Channel GetInner1ColorChannel() { return Inner1::Color::Transmission; }
    Inner2::Color::Channel GetInner2ColorChannel() { return Inner2::Color::Transmission; }
    Inner1::Channel GetInner1Channel() { return Inner1::Transmission1; }
    Inner2::Channel GetInner2Channel() { return Inner2::Transmission2; }
  }; // SomeClass

} // Outer

namespace Outer {
  struct MyWorldPart2 {};
}

struct GlobalClass {
  void gmethod() {}
};

void test_classes(Outer::SomeClass c, Outer::Inner2::Color cc) {}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_CONSTANT100_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(100);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1Outer_1namespce_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Outer::namespce *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Outer::namespce *)new Outer::namespce();
  *(Outer::namespce **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1Outer_1namespce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer::namespce *arg1 = 0 ;
  Outer::namespce *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::namespce **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Outer::namespce const & reference is null");
    return 0;
  } 
  result = (Outer::namespce *)new Outer::namespce((Outer::namespce const &)*arg1);
  *(Outer::namespce **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_delete_1Outer_1namespce(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Outer::namespce *arg1 = (Outer::namespce *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Outer::namespce **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Specular_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Outer::Inner1::Channel result;
  
  (void)jenv;
  (void)jcls;
  result = (Outer::Inner1::Channel)Outer::Inner1::Specular;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1ColorEnumVal1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner1::ColorEnumVal1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1ColorEnumVal2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner1::ColorEnumVal2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1ColorEnumVal3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner1::ColorEnumVal3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Color_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Outer::Inner1::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Outer::Inner1::Color *)Outer::Inner1::Color::create();
  *(Outer::Inner1::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Color_1Specular_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Outer::Inner1::Color::Channel result;
  
  (void)jenv;
  (void)jcls;
  result = (Outer::Inner1::Color::Channel)Outer::Inner1::Color::Specular;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Color_1ColorEnumVal1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner1::Color::ColorEnumVal1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Color_1ColorEnumVal2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner1::Color::ColorEnumVal2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Color_1ColorEnumVal3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner1::Color::ColorEnumVal3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Color_1instanceMemberVariable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Outer::Inner1::Color *arg1 = (Outer::Inner1::Color *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::Inner1::Color **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->instanceMemberVariable = arg2;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Color_1instanceMemberVariable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Outer::Inner1::Color *arg1 = (Outer::Inner1::Color *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::Inner1::Color **)&jarg1; 
  result = (int) ((arg1)->instanceMemberVariable);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Color_1staticMemberVariable_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  Outer::Inner1::Color::staticMemberVariable = arg1;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Color_1staticMemberVariable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner1::Color::staticMemberVariable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Color_1staticConstMemberVariable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner1::Color::staticConstMemberVariable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Color_1staticConstEnumMemberVariable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum Outer::Inner1::Color::Channel result;
  
  (void)jenv;
  (void)jcls;
  result = (enum Outer::Inner1::Color::Channel)Outer::Inner1::Color::staticConstEnumMemberVariable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Color_1colorInstanceMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Outer::Inner1::Color *arg1 = (Outer::Inner1::Color *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::Inner1::Color **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->colorInstanceMethod(arg2);
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner1_1Color_1colorStaticMethod(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  double arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  Outer::Inner1::Color::colorStaticMethod(arg1);
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1Outer_1Inner1_1Color_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Outer::Inner1::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Outer::Inner1::Color *)new Outer::Inner1::Color();
  *(Outer::Inner1::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1Outer_1Inner1_1Color_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer::Inner1::Color *arg1 = 0 ;
  Outer::Inner1::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::Inner1::Color **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Outer::Inner1::Color const & reference is null");
    return 0;
  } 
  result = (Outer::Inner1::Color *)new Outer::Inner1::Color((Outer::Inner1::Color const &)*arg1);
  *(Outer::Inner1::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_delete_1Outer_1Inner1_1Color(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Outer::Inner1::Color *arg1 = (Outer::Inner1::Color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Outer::Inner1::Color **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_namespaceFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer::Inner1::Color arg1 ;
  Outer::Inner1::Color *argp1 ;
  Outer::Inner1::Color result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Outer::Inner1::Color **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Outer::Inner1::Color");
    return 0;
  }
  arg1 = *argp1; 
  result = Outer::Inner1::namespaceFunction(arg1);
  *(Outer::Inner1::Color **)&jresult = new Outer::Inner1::Color((const Outer::Inner1::Color &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_namespaceVar_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  Outer::Inner1::namespaceVar = arg1;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_namespaceVar_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner1::namespaceVar;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Specular_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Outer::Inner2::Channel result;
  
  (void)jenv;
  (void)jcls;
  result = (Outer::Inner2::Channel)Outer::Inner2::Specular;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Outer::Inner2::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Outer::Inner2::Color *)Outer::Inner2::Color::create();
  *(Outer::Inner2::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1Specular_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Outer::Inner2::Color::Channel result;
  
  (void)jenv;
  (void)jcls;
  result = (Outer::Inner2::Color::Channel)Outer::Inner2::Color::Specular;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1ColorEnumVal1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner2::Color::ColorEnumVal1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1ColorEnumVal2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner2::Color::ColorEnumVal2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1ColorEnumVal3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner2::Color::ColorEnumVal3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1instanceMemberVariable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Outer::Inner2::Color *arg1 = (Outer::Inner2::Color *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::Inner2::Color **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->instanceMemberVariable = arg2;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1instanceMemberVariable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Outer::Inner2::Color *arg1 = (Outer::Inner2::Color *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::Inner2::Color **)&jarg1; 
  result = (int) ((arg1)->instanceMemberVariable);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1staticMemberVariable_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  Outer::Inner2::Color::staticMemberVariable = arg1;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1staticMemberVariable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner2::Color::staticMemberVariable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1staticConstMemberVariable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Outer::Inner2::Color::staticConstMemberVariable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1staticConstEnumMemberVariable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  enum Outer::Inner2::Color::Channel result;
  
  (void)jenv;
  (void)jcls;
  result = (enum Outer::Inner2::Color::Channel)Outer::Inner2::Color::staticConstEnumMemberVariable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1colorInstanceMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Outer::Inner2::Color *arg1 = (Outer::Inner2::Color *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::Inner2::Color **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->colorInstanceMethod(arg2);
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1colorStaticMethod(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  double arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  Outer::Inner2::Color::colorStaticMethod(arg1);
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner2_1Color_1colors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  Outer::Inner2::Color *arg1 = (Outer::Inner2::Color *) 0 ;
  Outer::Inner1::Color *arg2 = 0 ;
  Outer::Inner1::Color *arg3 = 0 ;
  Outer::Inner2::Color *arg4 = 0 ;
  Outer::Inner2::Color *arg5 = 0 ;
  Outer::Inner2::Color *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(Outer::Inner2::Color **)&jarg1; 
  arg2 = *(Outer::Inner1::Color **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Outer::Inner1::Color const & reference is null");
    return ;
  } 
  arg3 = *(Outer::Inner1::Color **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Outer::Inner1::Color const & reference is null");
    return ;
  } 
  arg4 = *(Outer::Inner2::Color **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Outer::Inner2::Color const & reference is null");
    return ;
  } 
  arg5 = *(Outer::Inner2::Color **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Outer::Inner2::Color const & reference is null");
    return ;
  } 
  arg6 = *(Outer::Inner2::Color **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Outer::Inner2::Color const & reference is null");
    return ;
  } 
  (arg1)->colors((Outer::Inner1::Color const &)*arg2,(Outer::Inner1::Color const &)*arg3,(Outer::Inner2::Color const &)*arg4,(Outer::Inner2::Color const &)*arg5,(Outer::Inner2::Color const &)*arg6);
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1Outer_1Inner2_1Color(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer::Inner2::Color *arg1 = 0 ;
  Outer::Inner2::Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::Inner2::Color **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Outer::Inner2::Color const & reference is null");
    return 0;
  } 
  result = (Outer::Inner2::Color *)new Outer::Inner2::Color((Outer::Inner2::Color const &)*arg1);
  *(Outer::Inner2::Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_delete_1Outer_1Inner2_1Color(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Outer::Inner2::Color *arg1 = (Outer::Inner2::Color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Outer::Inner2::Color **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1NoNSpacePlease_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Outer::Inner2::NoNSpacePlease *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Outer::Inner2::NoNSpacePlease *)new Outer::Inner2::NoNSpacePlease();
  *(Outer::Inner2::NoNSpacePlease **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1NoNSpacePlease_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer::Inner2::NoNSpacePlease *arg1 = 0 ;
  Outer::Inner2::NoNSpacePlease *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::Inner2::NoNSpacePlease **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Outer::Inner2::NoNSpacePlease const & reference is null");
    return 0;
  } 
  result = (Outer::Inner2::NoNSpacePlease *)new Outer::Inner2::NoNSpacePlease((Outer::Inner2::NoNSpacePlease const &)*arg1);
  *(Outer::Inner2::NoNSpacePlease **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_delete_1NoNSpacePlease(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Outer::Inner2::NoNSpacePlease *arg1 = (Outer::Inner2::NoNSpacePlease *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Outer::Inner2::NoNSpacePlease **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner3_1Blue_1blueInstanceMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Outer::Inner3::Blue *arg1 = (Outer::Inner3::Blue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::Inner3::Blue **)&jarg1; 
  (arg1)->blueInstanceMethod();
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1Outer_1Inner3_1Blue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Outer::Inner3::Blue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Outer::Inner3::Blue *)new Outer::Inner3::Blue();
  *(Outer::Inner3::Blue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1Outer_1Inner3_1Blue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer::Inner3::Blue *arg1 = 0 ;
  Outer::Inner3::Blue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::Inner3::Blue **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Outer::Inner3::Blue const & reference is null");
    return 0;
  } 
  result = (Outer::Inner3::Blue *)new Outer::Inner3::Blue((Outer::Inner3::Blue const &)*arg1);
  *(Outer::Inner3::Blue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_delete_1Outer_1Inner3_1Blue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Outer::Inner3::Blue *arg1 = (Outer::Inner3::Blue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Outer::Inner3::Blue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner4_1Blue_1blueInstanceMethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Outer::Inner4::Blue *arg1 = (Outer::Inner4::Blue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::Inner4::Blue **)&jarg1; 
  (arg1)->blueInstanceMethod();
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1Outer_1Inner4_1Blue_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Outer::Inner4::Blue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Outer::Inner4::Blue *)new Outer::Inner4::Blue();
  *(Outer::Inner4::Blue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1Outer_1Inner4_1Blue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer::Inner4::Blue *arg1 = 0 ;
  Outer::Inner4::Blue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::Inner4::Blue **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Outer::Inner4::Blue const & reference is null");
    return 0;
  } 
  result = (Outer::Inner4::Blue *)new Outer::Inner4::Blue((Outer::Inner4::Blue const &)*arg1);
  *(Outer::Inner4::Blue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_delete_1Outer_1Inner4_1Blue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Outer::Inner4::Blue *arg1 = (Outer::Inner4::Blue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Outer::Inner4::Blue **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1SomeClass_1GetInner1ColorChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Outer::SomeClass *arg1 = (Outer::SomeClass *) 0 ;
  Outer::Inner1::Color::Channel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::SomeClass **)&jarg1; 
  result = (Outer::Inner1::Color::Channel)(arg1)->GetInner1ColorChannel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1SomeClass_1GetInner2ColorChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Outer::SomeClass *arg1 = (Outer::SomeClass *) 0 ;
  Outer::Inner2::Color::Channel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::SomeClass **)&jarg1; 
  result = (Outer::Inner2::Color::Channel)(arg1)->GetInner2ColorChannel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1SomeClass_1GetInner1Channel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Outer::SomeClass *arg1 = (Outer::SomeClass *) 0 ;
  Outer::Inner1::Channel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::SomeClass **)&jarg1; 
  result = (Outer::Inner1::Channel)(arg1)->GetInner1Channel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nspacePackage_nspaceJNI_Outer_1SomeClass_1GetInner2Channel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Outer::SomeClass *arg1 = (Outer::SomeClass *) 0 ;
  Outer::Inner2::Channel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::SomeClass **)&jarg1; 
  result = (Outer::Inner2::Channel)(arg1)->GetInner2Channel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1Outer_1SomeClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Outer::SomeClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Outer::SomeClass *)new Outer::SomeClass();
  *(Outer::SomeClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1Outer_1SomeClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer::SomeClass *arg1 = 0 ;
  Outer::SomeClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::SomeClass **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Outer::SomeClass const & reference is null");
    return 0;
  } 
  result = (Outer::SomeClass *)new Outer::SomeClass((Outer::SomeClass const &)*arg1);
  *(Outer::SomeClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_delete_1Outer_1SomeClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Outer::SomeClass *arg1 = (Outer::SomeClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Outer::SomeClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1Outer_1MyWorldPart2_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Outer::MyWorldPart2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Outer::MyWorldPart2 *)new Outer::MyWorldPart2();
  *(Outer::MyWorldPart2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1Outer_1MyWorldPart2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Outer::MyWorldPart2 *arg1 = 0 ;
  Outer::MyWorldPart2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Outer::MyWorldPart2 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Outer::MyWorldPart2 const & reference is null");
    return 0;
  } 
  result = (Outer::MyWorldPart2 *)new Outer::MyWorldPart2((Outer::MyWorldPart2 const &)*arg1);
  *(Outer::MyWorldPart2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_delete_1Outer_1MyWorldPart2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Outer::MyWorldPart2 *arg1 = (Outer::MyWorldPart2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Outer::MyWorldPart2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_GlobalClass_1gmethod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GlobalClass *arg1 = (GlobalClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GlobalClass **)&jarg1; 
  (arg1)->gmethod();
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1GlobalClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GlobalClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GlobalClass *)new GlobalClass();
  *(GlobalClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_new_1GlobalClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GlobalClass *arg1 = 0 ;
  GlobalClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GlobalClass **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GlobalClass const & reference is null");
    return 0;
  } 
  result = (GlobalClass *)new GlobalClass((GlobalClass const &)*arg1);
  *(GlobalClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_delete_1GlobalClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GlobalClass *arg1 = (GlobalClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GlobalClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nspacePackage_nspaceJNI_test_1classes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Outer::SomeClass arg1 ;
  Outer::Inner2::Color arg2 ;
  Outer::SomeClass *argp1 ;
  Outer::Inner2::Color *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(Outer::SomeClass **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Outer::SomeClass");
    return ;
  }
  arg1 = *argp1; 
  argp2 = *(Outer::Inner2::Color **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Outer::Inner2::Color");
    return ;
  }
  arg2 = *argp2; 
  test_classes(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner3_1Blue_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Outer::Inner2::Color **)&baseptr = *(Outer::Inner3::Blue **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_nspacePackage_nspaceJNI_Outer_1Inner4_1Blue_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Outer::Inner2::Color **)&baseptr = *(Outer::Inner4::Blue **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

