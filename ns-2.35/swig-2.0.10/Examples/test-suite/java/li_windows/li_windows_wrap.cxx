/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
  #include <windows.h>
#else
  // Use equivalent types for non-windows systems
  #define __int8   char
  #define __int16  short
  #define __int32  int
  #define __int64  long long
#endif


// Non ISO integral types
         __int8   int8_val (         __int8  i) { return i; }
         __int16  int16_val(         __int16 i) { return i; }
         __int32  int32_val(         __int32 i) { return i; }
         __int64  int64_val(         __int64 i) { return i; }
unsigned __int8  uint8_val (unsigned __int8  i) { return i; }
unsigned __int16 uint16_val(unsigned __int16 i) { return i; }
unsigned __int32 uint32_val(unsigned __int32 i) { return i; }
unsigned __int64 uint64_val(unsigned __int64 i) { return i; }

const          __int8&   int8_ref (const          __int8&  i) { return i; }
const          __int16&  int16_ref(const          __int16& i) { return i; }
const          __int32&  int32_ref(const          __int32& i) { return i; }
const          __int64&  int64_ref(const          __int64& i) { return i; }
const unsigned __int8&  uint8_ref (const unsigned __int8&  i) { return i; }
const unsigned __int16& uint16_ref(const unsigned __int16& i) { return i; }
const unsigned __int32& uint32_ref(const unsigned __int32& i) { return i; }
const unsigned __int64& uint64_ref(const unsigned __int64& i) { return i; }

         __int8   int8_global;
         __int16  int16_global;
         __int32  int32_global;
         __int64  int64_global;
unsigned __int8  uint8_global;
unsigned __int16 uint16_global;
unsigned __int32 uint32_global;
unsigned __int64 uint64_global;

struct WindowsInts {
           __int8   int8_member;
           __int16  int16_member;
           __int32  int32_member;
           __int64  int64_member;
  unsigned __int8  uint8_member;
  unsigned __int16 uint16_member;
  unsigned __int32 uint32_member;
  unsigned __int64 uint64_member;
};

// Typedef for non ISO integral types
typedef __int8 int8;
typedef __int16 int16;
typedef __int32 int32;
typedef __int64 int64;

typedef unsigned __int8 uint8;
typedef unsigned __int16 uint16;
typedef unsigned __int32 uint32;
typedef unsigned __int64 uint64;

 int8   int8_td (int8  i) { return i; }
 int16  int16_td(int16 i) { return i; }
 int32  int32_td(int32 i) { return i; }
 int64  int64_td(int64 i) { return i; }
uint8  uint8_td (int8  i) { return i; }
uint16 uint16_td(int16 i) { return i; }
uint32 uint32_td(int32 i) { return i; }
uint64 uint64_td(int64 i) { return i; }



#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#else

#define __stdcall
#define __declspec(WINDOWS_EXTENDED_ATTRIBUTE)
#define DWORD unsigned int
#define PSZ char *

#endif

// Windows calling conventions
__declspec(dllexport) int __stdcall declspecstdcall(int i) { return i; }

DWORD mefod(DWORD d) { return d; }
PSZ funktion(PSZ d) { return d; }


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jbyte JNICALL Java_li_1windows_li_1windowsJNI_int8_1val(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  jbyte jresult = 0 ;
  __int8 arg1 ;
  __int8 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (__int8)jarg1; 
  result = int8_val(arg1);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1windows_li_1windowsJNI_int16_1val(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jshort jresult = 0 ;
  __int16 arg1 ;
  __int16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (__int16)jarg1; 
  result = int16_val(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1windows_li_1windowsJNI_int32_1val(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  __int32 arg1 ;
  __int32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (__int32)jarg1; 
  result = int32_val(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1windows_li_1windowsJNI_int64_1val(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  __int64 arg1 ;
  __int64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (__int64)jarg1; 
  result = int64_val(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1windows_li_1windowsJNI_uint8_1val(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jshort jresult = 0 ;
  unsigned __int8 arg1 ;
  unsigned __int8 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned __int8)jarg1; 
  result = uint8_val(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1windows_li_1windowsJNI_uint16_1val(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  unsigned __int16 arg1 ;
  unsigned __int16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned __int16)jarg1; 
  result = uint16_val(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1windows_li_1windowsJNI_uint32_1val(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned __int32 arg1 ;
  unsigned __int32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned __int32)jarg1; 
  result = uint32_val(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_li_1windows_li_1windowsJNI_uint64_1val(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jobject jresult = 0 ;
  unsigned __int64 arg1 ;
  unsigned __int64 result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    for(i=0; i<sz; i++) {
      arg1 = (arg1 << 8) | (unsigned __int64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = uint64_val(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_li_1windows_li_1windowsJNI_int8_1ref(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  jbyte jresult = 0 ;
  __int8 *arg1 = 0 ;
  __int8 temp1 ;
  __int8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (__int8)jarg1; 
  arg1 = &temp1; 
  result = (__int8 *) &int8_ref((__int8 const &)*arg1);
  jresult = (jbyte)*result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1windows_li_1windowsJNI_int16_1ref(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jshort jresult = 0 ;
  __int16 *arg1 = 0 ;
  __int16 temp1 ;
  __int16 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (__int16)jarg1; 
  arg1 = &temp1; 
  result = (__int16 *) &int16_ref((__int16 const &)*arg1);
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1windows_li_1windowsJNI_int32_1ref(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  __int32 *arg1 = 0 ;
  __int32 temp1 ;
  __int32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (__int32)jarg1; 
  arg1 = &temp1; 
  result = (__int32 *) &int32_ref((__int32 const &)*arg1);
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1windows_li_1windowsJNI_int64_1ref(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  __int64 *arg1 = 0 ;
  __int64 temp1 ;
  __int64 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (__int64)jarg1; 
  arg1 = &temp1; 
  result = (__int64 *) &int64_ref((__int64 const &)*arg1);
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1windows_li_1windowsJNI_uint8_1ref(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jshort jresult = 0 ;
  unsigned __int8 *arg1 = 0 ;
  unsigned __int8 temp1 ;
  unsigned __int8 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (unsigned __int8)jarg1; 
  arg1 = &temp1; 
  result = (unsigned __int8 *) &uint8_ref((unsigned __int8 const &)*arg1);
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1windows_li_1windowsJNI_uint16_1ref(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  unsigned __int16 *arg1 = 0 ;
  unsigned __int16 temp1 ;
  unsigned __int16 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (unsigned __int16)jarg1; 
  arg1 = &temp1; 
  result = (unsigned __int16 *) &uint16_ref((unsigned __int16 const &)*arg1);
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1windows_li_1windowsJNI_uint32_1ref(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned __int32 *arg1 = 0 ;
  unsigned __int32 temp1 ;
  unsigned __int32 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (unsigned __int32)jarg1; 
  arg1 = &temp1; 
  result = (unsigned __int32 *) &uint32_ref((unsigned __int32 const &)*arg1);
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_li_1windows_li_1windowsJNI_uint64_1ref(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jobject jresult = 0 ;
  unsigned __int64 *arg1 = 0 ;
  unsigned __int64 temp1 ;
  unsigned __int64 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = &temp1;
    temp1 = 0;
    for(i=0; i<sz; i++) {
      temp1 = (temp1 << 8) | (unsigned __int64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (unsigned __int64 *) &uint64_ref((unsigned __int64 const &)*arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(*result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_int8_1global_1set(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  __int8 arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (__int8)jarg1; 
  int8_global = arg1;
}


SWIGEXPORT jbyte JNICALL Java_li_1windows_li_1windowsJNI_int8_1global_1get(JNIEnv *jenv, jclass jcls) {
  jbyte jresult = 0 ;
  __int8 result;
  
  (void)jenv;
  (void)jcls;
  result = int8_global;
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_int16_1global_1set(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  __int16 arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (__int16)jarg1; 
  int16_global = arg1;
}


SWIGEXPORT jshort JNICALL Java_li_1windows_li_1windowsJNI_int16_1global_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  __int16 result;
  
  (void)jenv;
  (void)jcls;
  result = int16_global;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_int32_1global_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  __int32 arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (__int32)jarg1; 
  int32_global = arg1;
}


SWIGEXPORT jint JNICALL Java_li_1windows_li_1windowsJNI_int32_1global_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  __int32 result;
  
  (void)jenv;
  (void)jcls;
  result = int32_global;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_int64_1global_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  __int64 arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (__int64)jarg1; 
  int64_global = arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1windows_li_1windowsJNI_int64_1global_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  __int64 result;
  
  (void)jenv;
  (void)jcls;
  result = int64_global;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_uint8_1global_1set(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  unsigned __int8 arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned __int8)jarg1; 
  uint8_global = arg1;
}


SWIGEXPORT jshort JNICALL Java_li_1windows_li_1windowsJNI_uint8_1global_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  unsigned __int8 result;
  
  (void)jenv;
  (void)jcls;
  result = uint8_global;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_uint16_1global_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  unsigned __int16 arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned __int16)jarg1; 
  uint16_global = arg1;
}


SWIGEXPORT jint JNICALL Java_li_1windows_li_1windowsJNI_uint16_1global_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  unsigned __int16 result;
  
  (void)jenv;
  (void)jcls;
  result = uint16_global;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_uint32_1global_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned __int32 arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned __int32)jarg1; 
  uint32_global = arg1;
}


SWIGEXPORT jlong JNICALL Java_li_1windows_li_1windowsJNI_uint32_1global_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned __int32 result;
  
  (void)jenv;
  (void)jcls;
  result = uint32_global;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_uint64_1global_1set(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  unsigned __int64 arg1 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    for(i=0; i<sz; i++) {
      arg1 = (arg1 << 8) | (unsigned __int64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  uint64_global = arg1;
}


SWIGEXPORT jobject JNICALL Java_li_1windows_li_1windowsJNI_uint64_1global_1get(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  unsigned __int64 result;
  
  (void)jenv;
  (void)jcls;
  result = uint64_global;
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1int8_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  __int8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  arg2 = (__int8)jarg2; 
  if (arg1) (arg1)->int8_member = arg2;
}


SWIGEXPORT jbyte JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1int8_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyte jresult = 0 ;
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  __int8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  result =  ((arg1)->int8_member);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1int16_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  __int16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  arg2 = (__int16)jarg2; 
  if (arg1) (arg1)->int16_member = arg2;
}


SWIGEXPORT jshort JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1int16_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  __int16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  result =  ((arg1)->int16_member);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1int32_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  __int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  arg2 = (__int32)jarg2; 
  if (arg1) (arg1)->int32_member = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1int32_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  __int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  result =  ((arg1)->int32_member);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1int64_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  __int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  arg2 = (__int64)jarg2; 
  if (arg1) (arg1)->int64_member = arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1int64_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  __int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  result =  ((arg1)->int64_member);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1uint8_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  unsigned __int8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  arg2 = (unsigned __int8)jarg2; 
  if (arg1) (arg1)->uint8_member = arg2;
}


SWIGEXPORT jshort JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1uint8_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  unsigned __int8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  result =  ((arg1)->uint8_member);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1uint16_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  unsigned __int16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  arg2 = (unsigned __int16)jarg2; 
  if (arg1) (arg1)->uint16_member = arg2;
}


SWIGEXPORT jint JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1uint16_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  unsigned __int16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  result =  ((arg1)->uint16_member);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1uint32_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  unsigned __int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  arg2 = (unsigned __int32)jarg2; 
  if (arg1) (arg1)->uint32_member = arg2;
}


SWIGEXPORT jlong JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1uint32_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  unsigned __int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  result =  ((arg1)->uint32_member);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1uint64_1member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  unsigned __int64 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (unsigned __int64)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->uint64_member = arg2;
}


SWIGEXPORT jobject JNICALL Java_li_1windows_li_1windowsJNI_WindowsInts_1uint64_1member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  unsigned __int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WindowsInts **)&jarg1; 
  result =  ((arg1)->uint64_member);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1windows_li_1windowsJNI_new_1WindowsInts(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  WindowsInts *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (WindowsInts *)new WindowsInts();
  *(WindowsInts **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_li_1windows_li_1windowsJNI_delete_1WindowsInts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WindowsInts *arg1 = (WindowsInts *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WindowsInts **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jbyte JNICALL Java_li_1windows_li_1windowsJNI_int8_1td(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  jbyte jresult = 0 ;
  int8 arg1 ;
  int8 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int8)jarg1; 
  result = int8_td(arg1);
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1windows_li_1windowsJNI_int16_1td(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jshort jresult = 0 ;
  int16 arg1 ;
  int16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int16)jarg1; 
  result = int16_td(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1windows_li_1windowsJNI_int32_1td(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int32 arg1 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32)jarg1; 
  result = int32_td(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1windows_li_1windowsJNI_int64_1td(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int64 arg1 ;
  int64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64)jarg1; 
  result = int64_td(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_li_1windows_li_1windowsJNI_uint8_1td(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  jshort jresult = 0 ;
  int8 arg1 ;
  uint8 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int8)jarg1; 
  result = uint8_td(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1windows_li_1windowsJNI_uint16_1td(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jint jresult = 0 ;
  int16 arg1 ;
  uint16 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int16)jarg1; 
  result = uint16_td(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1windows_li_1windowsJNI_uint32_1td(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int32 arg1 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32)jarg1; 
  result = uint32_td(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_li_1windows_li_1windowsJNI_uint64_1td(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jobject jresult = 0 ;
  int64 arg1 ;
  uint64 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64)jarg1; 
  result = uint64_td(arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_li_1windows_li_1windowsJNI_declspecstdcall(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)declspecstdcall(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_li_1windows_li_1windowsJNI_mefod(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (unsigned int)mefod(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_li_1windows_li_1windowsJNI_funktion(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (char *)funktion(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


#ifdef __cplusplus
}
#endif

