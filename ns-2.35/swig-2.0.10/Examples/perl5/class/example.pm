# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package example;
use base qw(Exporter);
use base qw(DynaLoader);
package examplec;
bootstrap example;
package example;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package example;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package example;


############# Class : example::Shape ##############

package example::Shape;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( example );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        examplec::delete_Shape($self);
        delete $OWNER{$self};
    }
}

*swig_x_get = *examplec::Shape_x_get;
*swig_x_set = *examplec::Shape_x_set;
*swig_y_get = *examplec::Shape_y_get;
*swig_y_set = *examplec::Shape_y_set;
*move = *examplec::Shape_move;
*area = *examplec::Shape_area;
*perimeter = *examplec::Shape_perimeter;
*nshapes = *examplec::Shape_nshapes;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : example::Circle ##############

package example::Circle;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( example::Shape example );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = examplec::new_Circle(@_);
    bless $self, $pkg if defined($self);
}

*area = *examplec::Circle_area;
*perimeter = *examplec::Circle_perimeter;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        examplec::delete_Circle($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : example::Square ##############

package example::Square;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( example::Shape example );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = examplec::new_Square(@_);
    bless $self, $pkg if defined($self);
}

*area = *examplec::Square_area;
*perimeter = *examplec::Square_perimeter;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        examplec::delete_Square($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : example::CFoo ##############

package example::CFoo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( example );
%OWNER = ();
%ITERATORS = ();
*MakeSquare = *examplec::CFoo_MakeSquare;
*MakeTSquare = *examplec::CFoo_MakeTSquare;
sub new {
    my $pkg = shift;
    my $self = examplec::new_CFoo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        examplec::delete_CFoo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package example;

*Shape_nshapes = *examplec::Shape_nshapes;
1;
